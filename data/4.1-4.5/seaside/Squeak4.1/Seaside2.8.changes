'From Squeak4.1 of 17 April 2010 [latest update: #9957] on 17 April 2010 at 5:22:05 pm'!----STARTUP----{17 April 2010 . 5:21:54 pm} as C:\Squeak\4.0\4.1-final\Squeak4.1.image!Smalltalk appendChangesTo: 'SqueakV41.sources'.!----QUIT----{17 April 2010 . 5:22:11 pm} Squeak4.1.image priorSource: 89!----STARTUP----{21 July 2010 . 5:46:42 pm} as C:\Squeak\4.1\Squeak4.1-Seaside2.8\Squeak4.1.image!----SNAPSHOT----{21 July 2010 . 5:49:05 pm} Squeak4.1.image priorSource: 229!!ConfigurationOfSeaside28 class methodsFor: 'private' stamp: 'DaleHenrichs 12/19/2009 09:43'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfSeaside28 class methodsFor: 'private' stamp: 'DaleHenrichs 1/16/2010 12:46'!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.21"			self bootstrapPackage: 'Gofer-Core-lr.115' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfSeaside28 class methodsFor: 'metacello tool support' stamp: 'DaleHenrichs 12/19/2009 09:43'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfSeaside28 class methodsFor: 'metacello tool support' stamp: 'DaleHenrichs 12/19/2009 09:43'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfSeaside28 class methodsFor: 'loading' stamp: 'DaleHenrichs 12/19/2009 10:52'!load	"self load"		self project latestVersion load! !!ConfigurationOfSeaside28 class methodsFor: 'metacello tool support' stamp: 'DaleHenrichs 12/19/2009 09:43'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfSeaside28 class methodsFor: 'accessing' stamp: 'DaleHenrichs 12/19/2009 09:43'!project	^self new project! !!ConfigurationOfSeaside28 methodsFor: 'baselines' stamp: 'DaleHenrichs 3/19/2010 11:05'!baseline2840: spec 	<version: '2.8.4-baseline'>	spec for: #common do: [		spec blessing: #baseline.		spec description: 'Initial baseline for Seaside 2.8.4'.		spec repository: 'http://www.squeaksource.com/Seaside'.		spec group: 'Seaside2.8a1' with: #( 'Seaside2' ). "group to maintain backward compatibility w/ConfigurationOfSeaside28-DaleHenrichs.11 and earlier"].		spec for: #squeakCommon do: [		spec			project: 'KomHttpServer' with: [				spec					className: 'ConfigurationOfKomHttpServer';					versionString: '1.0-baseline';					file: 'ConfigurationOfKomHttpServer';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			yourself.		spec			package: 'Comet' with: [				spec requires: #('Seaside2' 'Scriptaculous') ];			package: 'RSRSS2' with: [				spec					requires: 'Seaside2';					repository: 'http://www.squeaksource.com/rsrss' ];			package: 'Seaside2' with: [				spec 					requires: 'KomHttpServer';					file: 'Seaside2.8';					supplyingAnswers: 					#(						#('*username*' 'admin')						#('*password*'  'seaside') 						) ];			package: 'Scriptaculous' with: [				spec requires: 'Seaside2' ];			yourself ].	spec for: #gemstone do: [		spec repository: 'http://seaside.gemstone.com/ss/seaside'.		spec			project: 'Announcements' with: [				spec					className: 'ConfigurationOfGsMisc';					loads: #('Announcements');					file: 'ConfigurationOfGsMisc';					repository: 'http://seaside.gemstone.com/ss/GLASSproject' ];			project: 'Utf8Encoding' copyFrom: 'Announcements' with: [				spec					loads: #('Utf8Encoding').];			project: 'Core' with: [				spec					className: 'ConfigurationOfGsCore';					file: 'ConfigurationOfGsCore';					repository: 'http://seaside.gemstone.com/ss/GLASSproject' ];			project: 'FastCGI' with: [				spec					className: 'ConfigurationOfGsFastCGI';					file: 'ConfigurationOfGsFastCGI';					repository: 'http://seaside.gemstone.com/ss/fastcgi'];			project: 'Hyper' with: [				spec					className: 'ConfigurationOfGsHyper';					file: 'ConfigurationOfGsHyper';					repository: 'http://seaside.gemstone.com/ss/hyper' ];			yourself.		spec 			package: 'FastCGISeaside' with: [ 				spec 					requires: #('FastCGI' 'Seaside2');					repository: 'http://seaside.gemstone.com/ss/fastcgi'];			package: 'HyperSeaside' with: [ 				spec 					requires: #('Hyper' 'Seaside2');					repository: 'http://seaside.gemstone.com/ss/hyper'];			package: 'RSRSS2' with: [ 					spec 						requires: #('Seaside2');						repository: 'http://seaside.gemstone.com/ss/rsrss2'.];			package: 'Scriptaculous' with: [ spec requires: #('Seaside2')];			package: 'SeasideAsync' with: [ spec requires: #('Seaside2')];			package: 'Seaside2' with: [				spec 					requires: #('Announcements' 'Utf8Encoding' 'Core');					postLoadDoIt: #postLoadSeaside284GS];			yourself. ].! !!ConfigurationOfSeaside28 methodsFor: 'baselines' stamp: 'DaleHenrichs 03/20/2010 11:26'!baseline2843: spec 	<version: '2.8.4.3-baseline'>	spec for: #common do: [		spec blessing: #baseline.		spec description: 'incorporate more examples/supporting packages, define groups'.		spec repository: 'http://www.squeaksource.com/Seaside'.				spec			package: 'Seaside2' with: 'Seaside2.8';			package: 'Scriptaculous' with: [				spec requires: 'Seaside2' ];			package: 'RSRSS2' with: [				spec requires: 'Seaside2' ];			yourself.		spec			group: 'Core' with: #( 'default' );			group: 'Seaside2.8a1' with: #( 'Seaside2' ); "group to maintain backward compatibility w/ConfigurationOfSeaside28-DaleHenrichs.11 and earlier"			yourself ].		spec for: #squeakCommon do: [		spec			project: 'KomHttpServer' with: [				spec					className: 'ConfigurationOfKomHttpServer';					versionString: '1.0-baseline';					file: 'ConfigurationOfKomHttpServer';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			yourself.		spec			package: 'Comet' with: [				spec requires: #('Seaside2' 'Scriptaculous') ];			package: 'RSRSS2' with: [				spec repository: 'http://www.squeaksource.com/rsrss' ];			package: 'Seaside2' with: [				spec requires: 'KomHttpServer';				supplyingAnswers: 					#(						#('*username*' 'admin')						#('*password*'  'seaside') 						) ];			yourself.		spec			group: 'default' with: #('KomHttpServer' 'Seaside2' 'Scriptaculous' 'RSRSS2');			yourself ].	spec for: #gemstone do: [		spec repository: 'http://seaside.gemstone.com/ss/seaside'.		spec			project: 'Announcements' with: [				spec					className: 'ConfigurationOfGsMisc';					loads: #('Announcements');					file: 'ConfigurationOfGsMisc';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'Utf8Encoding' copyFrom: 'Announcements' with: [				spec					loads: #('Utf8Encoding').];			project: 'GsCore' with: [				spec					className: 'ConfigurationOfGsCore';					file: 'ConfigurationOfGsCore';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'FastCGI' with: [				spec					className: 'ConfigurationOfGsFastCGI';					file: 'ConfigurationOfGsFastCGI';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository'];			project: 'Hyper' with: [				spec					className: 'ConfigurationOfGsHyper';					file: 'ConfigurationOfGsHyper';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			yourself.		spec 			package: 'FastCGISeaside' with: [ 				spec 					requires: #('FastCGI' 'Seaside2');					repository: 'http://seaside.gemstone.com/ss/fastcgi'];			package: 'HyperSeaside' with: [ 				spec 					requires: #('Hyper' 'Seaside2');					repository: 'http://seaside.gemstone.com/ss/hyper'];			package: 'RSRSS2' with: [ 				spec 					file: 'RSRSS2.g';					repository: 'http://seaside.gemstone.com/ss/rsrss2'.];			package: 'SeasideAsync' with: [ 				spec 					file: 'SeasideAsync.g';					requires: #('Seaside2');					repository: 'http://seaside.gemstone.com/ss/seaside'];			package: 'Scriptaculous' with: [ 				spec 					file: 'Scriptaculous.g';					repository: 'http://seaside.gemstone.com/ss/seaside' ];			package: 'Seaside2' with: [				spec 					file: 'Seaside2.8g1-';					requires: #('Announcements' 'Utf8Encoding' 'GsCore');					repository: 'http://seaside.gemstone.com/ss/seaside';					postLoadDoIt: #postLoadSeaside284GS];			yourself.		spec			group: 'default' with: #('HyperSeaside' 'FastCGISeaside' 'Seaside2' 'Scriptaculous' 'RSRSS2');			yourself ].! !!ConfigurationOfSeaside28 methodsFor: 'doits' stamp: 'DaleHenrichs 12/19/2009 09:59'!postLoadSeaside284GS	Smalltalk at: #WAHtmlEncoder ifPresent: [:cl | cl initialize ].	Smalltalk at: #WAUrlEncoder ifPresent: [:cl | cl initialize ]! !!ConfigurationOfSeaside28 methodsFor: 'accessing' stamp: 'DaleHenrichs 12/19/2009 09:43'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear ]! !!ConfigurationOfSeaside28 methodsFor: 'versions' stamp: 'DaleHenrichs 02/12/2010 11:15'!version2842: spec	<version: '2.8.4.2' imports: #('2.8.4-baseline' )>	spec for: #common do: [		spec blessing: #release.		spec description: 'Seaside 2.8.4 with package versions as of 12/19/2009'.		spec author: 'DaleHenrichs'.		spec timestamp: '12/19/2009 10:10'.].	spec for: #squeakCommon do: [		spec 			project: 'KomHttpServer' with: '1.0'.		spec 			package: 'Comet' with: 'Comet-lr.29';			package: 'RSRSS2' with: 'RSRSS2-pmm.12';			package: 'Seaside2' with: 'Seaside2.8a1-pmm.596';			package: 'Scriptaculous' with: 'Scriptaculous-lr.250';			yourself.].	spec for: #gemstone do: [		spec			project: 'Core' with: '0.233';			project: 'FastCGI' with: '0.233';			project: 'Hyper' with: '0.232';			project: 'Announcements' with: '0.233';			project: 'Utf8Encoding' with: '0.233'.		spec 			package: 'SeasideAsync' with: 'SeasideAsync.g-dkh.75';			package: 'Scriptaculous' with: 'Scriptaculous.g-kdt.244';			package: 'RSRSS2' with: 'RSRSS2.g-dkh.16';			package: 'FastCGISeaside' with: 'FastCGISeaside-jgf.49';			package: 'HyperSeaside' with: 'HyperSeaside-dkh.5';			yourself].	spec for: #'gs2.x' do: [		spec			package: 'Seaside2' with: 'Seaside2.8g1-jgf.630'].	spec for: #'gs3.x' do: [		spec			package: 'Seaside2' with: 'Seaside2.8g1.v3-dkh.625'].! !!ConfigurationOfSeaside28 methodsFor: 'versions' stamp: 'DaleHenrichs 02/12/2010 11:15'!version2843: spec	<version: '2.8.4.3' imports: #('2.8.4.3-baseline' )>	spec for: #common do: [		spec blessing: #release.		spec description: '- Minor adjustments so that GLASS can use this config'.		spec author: 'DaleHenrichs'.		spec timestamp: '1/15/2010 11:23'.].	spec for: #squeakCommon do: [		spec 			project: 'KomHttpServer' with: '1.0'.		spec 			package: 'Comet' with: 'Comet-lr.29';			package: 'RSRSS2' with: 'RSRSS2-pmm.12';			package: 'Seaside2' with: 'Seaside2.8a1-pmm.596';			package: 'Scriptaculous' with: 'Scriptaculous-lr.250';			yourself.].	spec for: #gemstone do: [		spec			project: 'GsCore' with: '0.233';			project: 'FastCGI' with: '0.233';			project: 'Hyper' with: '0.232';			project: 'Announcements' with: '0.233';			project: 'Utf8Encoding' with: '0.233'.		spec 			package: 'SeasideAsync' with: 'SeasideAsync.g-dkh.75';			package: 'Scriptaculous' with: 'Scriptaculous.g-kdt.244';			package: 'RSRSS2' with: 'RSRSS2.g-dkh.16';			package: 'FastCGISeaside' with: 'FastCGISeaside-jgf.49';			package: 'HyperSeaside' with: 'HyperSeaside-dkh.5';			yourself].	spec for: #'gs2.x' do: [		spec			package: 'Seaside2' with: 'Seaside2.8g1-jgf.630'].	spec for: #'gs3.x' do: [		spec			package: 'Seaside2' with: 'Seaside2.8g1.v3-dkh.625'].! !!ConfigurationOfSeaside28 methodsFor: 'versions' stamp: 'DaleHenrichs 05/10/2010 15:58'!version28441: spec	<version: '2.8.4.4.1' imports: #('2.8.4.3-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '- fix Issue 109: http://code.google.com/p/glassdb/issues/detail?id=109 "UTF8 URL incorrectly handled in GLASS with Seaside28 and FastCGI"'.		spec author: 'DaleHenrichs'.		spec timestamp: '05/10/10 15:55:31'.].	spec for: #'squeakCommon' do: [		spec project: 'KomHttpServer' with: '1.0.1'.		spec 			package: 'Comet' with: 'Comet-lr.29';			package: 'RSRSS2' with: 'RSRSS2-pmm.12';			package: 'Seaside2' with: 'Seaside2.8a1-pmm.596';			package: 'Scriptaculous' with: 'Scriptaculous-lr.250'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.239';			project: 'FastCGI' with: '0.233';			project: 'Hyper' with: '0.233';			project: 'Announcements' with: '0.236';			project: 'Utf8Encoding' with: '0.236'.		spec 			package: 'SeasideAsync' with: 'SeasideAsync.g-dkh.75';			package: 'Scriptaculous' with: 'Scriptaculous.g-kdt.244';			package: 'RSRSS2' with: 'RSRSS2.g-dkh.16';			package: 'FastCGISeaside' with: 'FastCGISeaside-DaleHenrichs.51';			package: 'HyperSeaside' with: 'HyperSeaside-DaleHenrichs.6'.].	spec for: #'gs2.x' do: [		spec package: 'Seaside2' with: 'Seaside2.8g1-DaleHenrichs.631'.].	spec for: #'gs3.x' do: [		spec package: 'Seaside2' with: 'Seaside2.8g1.v3-dkh.625'.].! !!ConfigurationOfSeaside28 methodsFor: 'versions' stamp: 'DaleHenrichs 03/03/2010 16:43'!version2844: spec	<version: '2.8.4.4' imports: #('2.8.4.3-baseline' )>	spec for: #common do: [		spec blessing: #release.		spec description: '- pick up development version of Kom'.		spec author: 'DaleHenrichs'.		spec timestamp: '2/12/2010 11:49'.].	spec for: #squeakCommon do: [		spec 			project: 'KomHttpServer' with: '1.0.1'.		spec 			package: 'Comet' with: 'Comet-lr.29';			package: 'RSRSS2' with: 'RSRSS2-pmm.12';			package: 'Seaside2' with: 'Seaside2.8a1-pmm.596';			package: 'Scriptaculous' with: 'Scriptaculous-lr.250';			yourself.].	spec for: #gemstone do: [		spec			project: 'GsCore' with: '0.238';			project: 'FastCGI' with: '0.233';			project: 'Hyper' with: '0.233';			project: 'Announcements' with: '0.235';			project: 'Utf8Encoding' with: '0.235'.		spec 			package: 'SeasideAsync' with: 'SeasideAsync.g-dkh.75';			package: 'Scriptaculous' with: 'Scriptaculous.g-kdt.244';			package: 'RSRSS2' with: 'RSRSS2.g-dkh.16';			package: 'FastCGISeaside' with: 'FastCGISeaside-jgf.50';			package: 'HyperSeaside' with: 'HyperSeaside-dkh.5';			yourself].	spec for: #'gs2.x' do: [		spec			package: 'Seaside2' with: 'Seaside2.8g1-jgf.630'].	spec for: #'gs3.x' do: [		spec			package: 'Seaside2' with: 'Seaside2.8g1.v3-dkh.625'].! !!ConfigurationOfSeaside28 methodsFor: 'versions' stamp: 'dkh 3/22/2010 21:18'!version2845: spec	<version: '2.8.4.5' imports: #('2.8.4.3-baseline' )>	spec for: #common do: [		spec blessing: #release.		spec description: '- Fixes Issue 517 reported by danie@danieroux.com  - From 10/20/2009, Squeak''s Behavior>>selectors returns an Array instead of a Set.  - WAFileLibrary>>fileSelectors breaks because of this. Attached one-liner fixes it.'.		spec author: 'DaleHenrichs'.		spec timestamp: '2/12/2010 11:49'.].	spec for: #squeakCommon do: [		spec 			project: 'KomHttpServer' with: '1.0.1'.		spec 			package: 'Comet' with: 'Comet-lr.29';			package: 'RSRSS2' with: 'RSRSS2-pmm.12';			package: 'Seaside2' with: 'Seaside2.8a1-lr.597';			package: 'Scriptaculous' with: 'Scriptaculous-lr.250';			yourself.].	spec for: #gemstone do: [		spec			project: 'GsCore' with: '0.238';			project: 'FastCGI' with: '0.233';			project: 'Hyper' with: '0.233';			project: 'Announcements' with: '0.235';			project: 'Utf8Encoding' with: '0.235'.		spec 			package: 'SeasideAsync' with: 'SeasideAsync.g-dkh.75';			package: 'Scriptaculous' with: 'Scriptaculous.g-kdt.244';			package: 'RSRSS2' with: 'RSRSS2.g-dkh.16';			package: 'FastCGISeaside' with: 'FastCGISeaside-jgf.50';			package: 'HyperSeaside' with: 'HyperSeaside-dkh.5';			yourself].	spec for: #'gs2.x' do: [		spec			package: 'Seaside2' with: 'Seaside2.8g1-jgf.630'].	spec for: #'gs3.x' do: [		spec			package: 'Seaside2' with: 'Seaside2.8g1.v3-dkh.625'].! !!ConfigurationOfSeaside28 methodsFor: 'versions' stamp: 'DaleHenrichs 05/27/2010 14:10'!version2846: spec	<version: '2.8.4.6' imports: #('2.8.4.3-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '- pick up Kom version 1.0.2- latest Seaside code (5/27/2010 10:44)  - Issue 102:	WAFileLibrary should rely on WAContext for url generation  - http://code.google.com/p/seaside/issues/detail?id=102- port to GLASS 1.0-beta.8  - merge Seaside2.8a1-pmm.598  - 813 run, 813 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes- Pharo 1.0  - 289 run, 289 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes'.		spec author: 'DaleHenrichs'.		spec timestamp: '05/27/10 13:56:09'.].	spec for: #'squeakCommon' do: [		spec project: 'KomHttpServer' with: '1.0.2'.		spec 			package: 'Comet' with: 'Comet-lr.29';			package: 'RSRSS2' with: 'RSRSS2-pmm.12';			package: 'Seaside2' with: 'Seaside2.8a1-pmm.598';			package: 'Scriptaculous' with: 'Scriptaculous-lr.250'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.240';			project: 'FastCGI' with: '0.233';			project: 'Hyper' with: '0.233';			project: 'Announcements' with: '0.236';			project: 'Utf8Encoding' with: '0.236'.		spec 			package: 'SeasideAsync' with: 'SeasideAsync.g-dkh.75';			package: 'Scriptaculous' with: 'Scriptaculous.g-kdt.244';			package: 'RSRSS2' with: 'RSRSS2.g-dkh.16';			package: 'FastCGISeaside' with: 'FastCGISeaside-DaleHenrichs.51';			package: 'HyperSeaside' with: 'HyperSeaside-DaleHenrichs.6'.].	spec for: #'gs2.x' do: [		spec package: 'Seaside2' with: 'Seaside2.8g1-DaleHenrichs.633'.].	spec for: #'gs3.x' do: [		spec package: 'Seaside2' with: 'Seaside2.8g1.v3-dkh.625'.].! !!ConfigurationOfSeaside28 methodsFor: 'versions' stamp: 'DaleHenrichs 06/03/2010 14:24'!version2847: spec	<version: '2.8.4.7' imports: #('2.8.4.3-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '- fix GemStone Issue 120: http://code.google.com/p/glassdb/issues/detail?id=120 "TextArea slow with large amounts of data on fastCGI"'.		spec author: 'DaleHenrichs'.		spec timestamp: '06/03/10 10:43:02'.].	spec for: #'squeakCommon' do: [		spec project: 'KomHttpServer' with: '1.0.2'.		spec 			package: 'Comet' with: 'Comet-lr.29';			package: 'RSRSS2' with: 'RSRSS2-pmm.12';			package: 'Seaside2' with: 'Seaside2.8a1-pmm.598';			package: 'Scriptaculous' with: 'Scriptaculous-lr.250'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.240';			project: 'FastCGI' with: '0.233';			project: 'Hyper' with: '0.233';			project: 'Announcements' with: '0.236';			project: 'Utf8Encoding' with: '0.236'.		spec 			package: 'SeasideAsync' with: 'SeasideAsync.g-dkh.75';			package: 'Scriptaculous' with: 'Scriptaculous.g-kdt.244';			package: 'RSRSS2' with: 'RSRSS2.g-dkh.16';			package: 'FastCGISeaside' with: 'FastCGISeaside-DaleHenrichs.52';			package: 'HyperSeaside' with: 'HyperSeaside-DaleHenrichs.7'.].	spec for: #'gs2.x' do: [		spec package: 'Seaside2' with: 'Seaside2.8g1-DaleHenrichs.633'.].	spec for: #'gs3.x' do: [		spec package: 'Seaside2' with: 'Seaside2.8g1.v3-dkh.625'.].! !!ConfigurationOfSeaside28 methodsFor: 'versions' stamp: 'pmm 7/3/2010 10:45'!version2848: spec	<version: '2.8.4.8' imports: #('2.8.4.3-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '- Pharo 1.1 related fixed'.		spec author: 'pmm'.		spec timestamp: '07/03/10 10:43:02'.].	spec for: #'squeakCommon' do: [		spec project: 'KomHttpServer' with: '1.0.2'.		spec 			package: 'Comet' with: 'Comet-lr.29';			package: 'RSRSS2' with: 'RSRSS2-pmm.12';			package: 'Seaside2' with: 'Seaside2.8a1-pmm.601';			package: 'Scriptaculous' with: 'Scriptaculous-lr.250'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.240';			project: 'FastCGI' with: '0.233';			project: 'Hyper' with: '0.233';			project: 'Announcements' with: '0.236';			project: 'Utf8Encoding' with: '0.236'.		spec 			package: 'SeasideAsync' with: 'SeasideAsync.g-dkh.75';			package: 'Scriptaculous' with: 'Scriptaculous.g-kdt.244';			package: 'RSRSS2' with: 'RSRSS2.g-dkh.16';			package: 'FastCGISeaside' with: 'FastCGISeaside-DaleHenrichs.52';			package: 'HyperSeaside' with: 'HyperSeaside-DaleHenrichs.7'.].	spec for: #'gs2.x' do: [		spec package: 'Seaside2' with: 'Seaside2.8g1-DaleHenrichs.633'.].	spec for: #'gs3.x' do: [		spec package: 'Seaside2' with: 'Seaside2.8g1.v3-dkh.625'.].! !"ConfigurationOfSeaside28"!!ConfigurationOfSeaside28Examples class methodsFor: 'private' stamp: 'DaleHenrichs 01/15/2010 11:01'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfSeaside28Examples class methodsFor: 'private' stamp: 'DaleHenrichs 1/16/2010 12:46'!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.21"			self bootstrapPackage: 'Gofer-Core-lr.115' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfSeaside28Examples class methodsFor: 'metacello tool support' stamp: 'DaleHenrichs 01/15/2010 11:01'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfSeaside28Examples class methodsFor: 'metacello tool support' stamp: 'DaleHenrichs 01/15/2010 11:01'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfSeaside28Examples class methodsFor: 'loading' stamp: 'DaleHenrichs 01/15/2010 11:01'!load	"self load"	^self project latestVersion load! !!ConfigurationOfSeaside28Examples class methodsFor: 'metacello tool support' stamp: 'DaleHenrichs 01/15/2010 11:01'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfSeaside28Examples class methodsFor: 'accessing' stamp: 'DaleHenrichs 01/15/2010 11:01'!project	^self new project! !!ConfigurationOfSeaside28Examples methodsFor: 'baselines' stamp: 'DaleHenrichs 01/15/2010 16:08'!baseline2800: spec 	<version: '2.8-baseline'>	spec for: #common do: [		spec blessing: #baseline.		spec description: 'Initial baseline for Seaside 2.8.4 examples (subset)'.		spec repository: 'http://www.squeaksource.com/SeasideExamples'.				spec			project: 'Seaside2.8' with: [				spec					className: 'ConfigurationOfSeaside28';					versionString: '2.8.4.3-baseline';					file: 'ConfigurationOfSeaside28';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			yourself.					spec			package: 'CallDemo' with: [ spec requires: #('Seaside2.8')];			package: 'CheckboxExample' with: [ spec requires: #('Seaside2.8')];			package: 'CSSDock' with: [ spec requires: #('Seaside2.8')];			package: 'ErrorHandler' with: [ spec requires: #('Seaside2.8')];			package: 'HelloWorld' with: [ spec requires: #('Seaside2.8')];			package: 'ImageDemo' with: [ spec requires: #('Seaside2.8')];			package: 'LogoutDemo' with: [ spec requires: #('Seaside2.8')];			package: 'MarqueeDemo' with: [ spec requires: #('Seaside2.8')];			package: 'MenuDemo' with: [ spec requires: #('Seaside2.8')];			package: 'ScreenResolution' with: [ spec requires: #('Seaside2.8')];			package: 'Store' with: [ spec requires: #('Seaside2.8')];			yourself. ].		spec for: #gemstone do: [		spec repository: 'http://seaside.gemstone.com/ss/GemStoneExamples'.		spec			package: 'GemStone-Store' with: [ spec requires: #('Seaside2.8' 'Store')];			package: 'GemStone-Examples' with: [ spec requires: #('Seaside2.8')];			yourself.].! !!ConfigurationOfSeaside28Examples methodsFor: 'accessing' stamp: 'DaleHenrichs 01/15/2010 11:01'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfSeaside28Examples methodsFor: 'versions' stamp: 'DaleHenrichs 1/22/2010 16:04'!version2800: spec	<version: '2.8' imports: #('2.8-baseline' )>	spec for: #common do: [		spec blessing: #alpha.		spec description: 'Seaside 2.8.4 examples (subset)'.		spec author: 'DaleHenrichs'.		spec timestamp: '1/15/2010 11:14'.		spec 			project: 'Seaside2.8' with: '2.8.4.3'.		spec 			package: 'CallDemo' with: 'CallDemo-pmm.1';			package: 'CheckboxExample' with: 'CheckboxExample-pmm.1';			package: 'CSSDock' with: 'CSSDock-tbn.1';			package: 'ErrorHandler' with: 'ErrorHandler-dkh.4';			package: 'HelloWorld' with: 'HelloWorld-pmm.1';			package: 'ImageDemo' with: 'ImageDemo-pmm.1';			package: 'LogoutDemo' with: 'LogoutDemo-pmm.1';			package: 'MarqueeDemo' with: 'MarqueeDemo-tbn.2';			package: 'MenuDemo' with: 'MenuDemo-MiguelCoba.4';			package: 'ScreenResolution' with: 'ScreenResolution-lr.1';			package: 'Store' with: 'Store-dkh.2';			yourself.].	spec for: #gemstone do: [		spec 			package: 'GemStone-Store' with: 'GemStone-Store-dkh.3';			package: 'GemStone-Examples' with: 'GemStone-Examples-dkh.13';			yourself.].! !"ConfigurationOfSeaside28Examples"!!ConfigurationOfMagritte class methodsFor: 'private' stamp: 'EstebanLorenzano 12/18/2009 15:29'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfMagritte class methodsFor: 'private' stamp: 'DaleHenrichs 1/6/2010 16:48'!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.15"			self bootstrapPackage: 'Gofer-lr.83' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfMagritte class methodsFor: 'metacello tool support' stamp: 'EstebanLorenzano 12/18/2009 15:29'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMagritte class methodsFor: 'metacello tool support' stamp: 'EstebanLorenzano 12/18/2009 15:29'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfMagritte class methodsFor: 'loading' stamp: 'DaleHenrichs 12/19/2009 14:11'!load	"self load"		self project latestVersion load! !!ConfigurationOfMagritte class methodsFor: 'metacello tool support' stamp: 'EstebanLorenzano 12/18/2009 15:29'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfMagritte class methodsFor: 'accessing' stamp: 'EstebanLorenzano 12/18/2009 15:29'!project	^self new project! !!ConfigurationOfMagritte methodsFor: 'baselines' stamp: 'DaleHenrichs 03/03/2010 16:08'!baseline1000: spec	<version: '1.0-baseline'>		spec for: #common do: [		spec blessing: #baseline.		spec repository: 'http://source.lukas-renggli.ch/magritte'. 		spec			project: 'Seaside2' with: [				spec					className: 'ConfigurationOfSeaside28';					versionString: '2.8.4-baseline';					file: 'ConfigurationOfSeaside28';					repository: 'http://www.squeaksource.com/MetacelloRepository'];			yourself.		spec 			package: 'Magritte-Model';			package: 'Magritte-Seaside' with: [				spec requires: #('Magritte-Model' 'Seaside2')];			package: 'Magritte-Tests' with: [				spec requires: #('Magritte-Model' )]].	spec for: #squeakCommon do: [		spec 			package: 'Magritte-Morph' with: [				spec requires: #('Magritte-Model' )];			yourself. ].	spec for: #gemstone do: [		spec 			repository: 'http://seaside.gemstone.com/ss/magritte';			repository: 'http://source.lukas-renggli.ch/magritte'.		spec			project: 'Change-Notification' with: [				spec					className: 'ConfigurationOfGsMonticello';					loads: #('Change-Notification');					file: 'ConfigurationOfGsMonticello';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'GsCore' with: [				spec					className: 'ConfigurationOfGsCore';					file: 'ConfigurationOfGsCore';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'OB' with: [				spec					className: 'ConfigurationOfGsOB';					file: 'ConfigurationOfGsOB';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			yourself.		spec 			package: 'Magritte-Model' with: [ spec requires: #('GsCore' 'Change-Notification' 'OB' ) ];			yourself.		spec			group: 'default' with: #('Magritte-Model' 'Magritte-Tests');			yourself. ].! !!ConfigurationOfMagritte methodsFor: 'baselines' stamp: 'DaleHenrichs 03/20/2010 10:19'!baseline1211: spec	<version: '1.2.1.1-baseline' imports: #('1.0-baseline' )>		spec for: #common do: [		spec blessing: #baseline.		spec			project: 'Seaside2' with: [				spec versionString: '2.8.4.3-baseline'];			yourself.		spec			group: 'default' with: #('Core' 'Tests');			group: 'Core' with: #('Magritte-Model');			group: 'Tests' with: #('Magritte-Tests')			yourself].	spec for: #squeakCommon do: [		spec			group: 'Core' with: #('Magritte-Morph');			yourself].! !!ConfigurationOfMagritte methodsFor: 'doits' stamp: 'DaleHenrichs 12/19/2009 14:04'!postLoad290Gs	Smalltalk at: #MADescriptionBuilder ifPresent: [:cl |  cl default: nil ]! !!ConfigurationOfMagritte methodsFor: 'accessing' stamp: 'EstebanLorenzano 12/18/2009 15:29'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear ]! !!ConfigurationOfMagritte methodsFor: 'versions' stamp: 'DaleHenrichs 02/12/2010 11:16'!version1200: spec	<version: '1.2' imports: #('1.0-baseline')>		spec for: #common do: [		spec blessing: #release.		spec project: 'Seaside2' with: '2.8.4.2'].	spec for: #squeakCommon do: [		spec 			package: 'Magritte-Model' with: 'Magritte-Model-lr.352';			package: 'Magritte-Morph' with: 'Magritte-Morph-tg.46';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-lr.303';			package: 'Magritte-Tests' with: 'Magritte-Tests-lr.153' ].	spec for: #gemstone do: [		spec			project: 'GsCore' with: '0.232.4';			project: 'Change-Notification' with: '0.232.4';			project: 'OB' with: '0.232.4'.		spec 			package: 'Magritte-Model' with: [				spec					file:'Magritte-Model-dkh.354';					postLoadDoIt: #postLoad290Gs.];			package: 'Magritte-Tests' with: 'Magritte-Tests-dkh.158';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-dkh.305'.].! !!ConfigurationOfMagritte methodsFor: 'versions' stamp: 'DaleHenrichs 02/12/2010 13:28'!version1210: spec	<version: '1.2.1' imports: #('1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '- fixed two recently reported bugs:  1. MAExternalFileModel should override the equals method (Jan van de Sandt)  2. MAValidation uses reusumeable exceptions and is messy too (Udo Schneider)- normalize broken file-names before serializing them- ported to GemStone'.		spec author: 'DaleHenrichs'.		spec timestamp: '02/12/10 13:08:59'.		spec project: 'Seaside2' with: '2.8.4.2'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Magritte-Model' with: 'Magritte-Model-lr.365';			package: 'Magritte-Morph' with: 'Magritte-Morph-tg.46';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-lr.313';			package: 'Magritte-Tests' with: 'Magritte-Tests-lr.159'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.239';			project: 'Change-Notification' with: '0.232.4';			project: 'OB' with: '0.232.4'.		spec 			package: 'Magritte-Model' with: [				spec 					file: 'Magritte-Model-DaleHenrichs.366';					postLoadDoIt: #'postLoad290Gs'. ];			package: 'Magritte-Tests' with: 'Magritte-Tests-DaleHenrichs.160';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-DaleHenrichs.314'.].! !!ConfigurationOfMagritte methodsFor: 'versions' stamp: 'DaleHenrichs 02/12/2010 13:27'!version1211: spec	<version: '1.2.1.1' imports: #('1.2.1.1-baseline')>		spec for: #common do: [		spec blessing: #release.		spec description: '- define groups'.		spec project: 'Seaside2' with: '2.8.4.2'].	spec for: #squeakCommon do: [		spec 			package: 'Magritte-Model' with: 'Magritte-Model-lr.365';			package: 'Magritte-Morph' with: 'Magritte-Morph-tg.46';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-lr.313';			package: 'Magritte-Tests' with: 'Magritte-Tests-lr.159' ].	spec for: #gemstone do: [		spec			project: 'GsCore' with: '0.239';			project: 'Change-Notification' with: '0.232.4';			project: 'OB' with: '0.232.4'.		spec 			package: 'Magritte-Model' with: [				spec					file:'Magritte-Model-DaleHenrichs.366';					postLoadDoIt: #postLoad290Gs.];			package: 'Magritte-Tests' with: 'Magritte-Tests-DaleHenrichs.160';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-DaleHenrichs.314'.].	! !!ConfigurationOfMagritte methodsFor: 'versions' stamp: 'DaleHenrichs 02/12/2010 13:27'!version1212: spec	<version: '1.2.1.2' imports: #('1.2.1.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '- pick up latest versions (1/27/2010 16:52- port to GemStone'.		spec author: 'DaleHenrichs'.		spec timestamp: '02/12/10 13:23:38'.		spec project: 'Seaside2' with: '2.8.4.2'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Magritte-Model' with: 'Magritte-Model-TestRunner.366';			package: 'Magritte-Morph' with: 'Magritte-Morph-tg.46';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-lr.314';			package: 'Magritte-Tests' with: 'Magritte-Tests-lr.159'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.239';			project: 'Change-Notification' with: '0.232.4';			project: 'OB' with: '0.232.4'.		spec 			package: 'Magritte-Model' with: [				spec 					file: 'Magritte-Model-DaleHenrichs.367';					postLoadDoIt: #'postLoad290Gs'. ];			package: 'Magritte-Tests' with: 'Magritte-Tests-DaleHenrichs.160';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-DaleHenrichs.315'.].! !!ConfigurationOfMagritte methodsFor: 'versions' stamp: 'DaleHenrichs 02/12/2010 13:27'!version1213: spec	<version: '1.2.1.3' imports: #('1.2.1.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'beta'.		spec description: '- pick up Magritte-Model fixes from John McKeon:  - add defaultMorphicClasses to MAMagnitudeDescription  - remove class side morphic default- ported to GemStone'.		spec author: 'DaleHenrichs'.		spec timestamp: '02/12/10 13:27:24'.		spec project: 'Seaside2' with: '2.8.4.2'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Magritte-Model' with: 'Magritte-Model-lr.367';			package: 'Magritte-Morph' with: 'Magritte-Morph-jmck.48';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-jmck.315';			package: 'Magritte-Tests' with: 'Magritte-Tests-lr.159'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.239';			project: 'Change-Notification' with: '0.232.4';			project: 'OB' with: '0.232.4'.		spec 			package: 'Magritte-Model' with: [				spec 					file: 'Magritte-Model-DaleHenrichs.368';					postLoadDoIt: #'postLoad290Gs'. ];			package: 'Magritte-Tests' with: 'Magritte-Tests-DaleHenrichs.160';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-DaleHenrichs.316'.].! !!ConfigurationOfMagritte methodsFor: 'versions' stamp: 'DaleHenrichs 06/02/2010 13:47'!version12141: spec	<version: '1.2.1.4.1' imports: #('1.2.1.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: '- fix GemStone Issue 56: http://code.google.com/p/glassdb/issues/detail?id=56 "No method was found for the selector #''encodeAsUTF8'' when sent to /* HEADER */"'.		spec author: 'DaleHenrichs'.		spec timestamp: '06/02/10 13:47:24'.		spec project: 'Seaside2' with: '2.8.4.2'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Magritte-Model' with: 'Magritte-Model-lr.367';			package: 'Magritte-Morph' with: 'Magritte-Morph-jmck.49';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-lr.316';			package: 'Magritte-Tests' with: 'Magritte-Tests-lr.159'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.239';			project: 'Change-Notification' with: '0.232.4';			project: 'OB' with: '0.232.4'.		spec 			package: 'Magritte-Model' with: [				spec 					file: 'Magritte-Model-DaleHenrichs.368';					postLoadDoIt: #'postLoad290Gs'. ];			package: 'Magritte-Tests' with: 'Magritte-Tests-DaleHenrichs.160';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-DaleHenrichs.318'.].! !!ConfigurationOfMagritte methodsFor: 'versions' stamp: 'DaleHenrichs 03/02/2010 13:43'!version1214: spec	<version: '1.2.1.4' imports: #('1.2.1.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'beta'.		spec description: '- pick up latest mcz file updates (3/1/2010 15:40)- Magritte-Morph  -remove MANumberMorph and MAIntegerMorph  -change MATextMorph to use #string and #string: as getSelector and setSelector- Magritte-Seaside  - fixed a serious regression in the select list- update Magritte-Seaside for GemStone'.		spec author: 'DaleHenrichs'.		spec timestamp: '03/02/10 13:43:52'.		spec project: 'Seaside2' with: '2.8.4.2'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Magritte-Model' with: 'Magritte-Model-lr.367';			package: 'Magritte-Morph' with: 'Magritte-Morph-jmck.49';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-lr.316';			package: 'Magritte-Tests' with: 'Magritte-Tests-lr.159'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.239';			project: 'Change-Notification' with: '0.232.4';			project: 'OB' with: '0.232.4'.		spec 			package: 'Magritte-Model' with: [				spec 					file: 'Magritte-Model-DaleHenrichs.368';					postLoadDoIt: #'postLoad290Gs'. ];			package: 'Magritte-Tests' with: 'Magritte-Tests-DaleHenrichs.160';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-DaleHenrichs.317'.].! !"ConfigurationOfMagritte"!!ConfigurationOfMagritte2 class methodsFor: 'private' stamp: 'DaleHenrichs 1/22/2010 11:04'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfMagritte2 class methodsFor: 'private' stamp: 'DaleHenrichs 1/22/2010 11:04'!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.15"			self bootstrapPackage: 'Gofer-lr.83' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfMagritte2 class methodsFor: 'metacello tool support' stamp: 'DaleHenrichs 1/22/2010 11:04'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMagritte2 class methodsFor: 'metacello tool support' stamp: 'DaleHenrichs 1/22/2010 11:04'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfMagritte2 class methodsFor: 'loading' stamp: 'DaleHenrichs 1/22/2010 11:04'!load	"self load"		self project latestVersion load! !!ConfigurationOfMagritte2 class methodsFor: 'metacello tool support' stamp: 'DaleHenrichs 1/22/2010 11:04'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfMagritte2 class methodsFor: 'accessing' stamp: 'DaleHenrichs 1/22/2010 11:04'!project	^self new project! !!ConfigurationOfMagritte2 methodsFor: 'baselines' stamp: 'DaleHenrichs 06/16/2010 17:22'!baseline2000: spec	<version: '2.0-baseline'>		spec for: #common do: [		spec blessing: #baseline.		spec repository: 'http://source.lukas-renggli.ch/magritte2'. 		spec			project: 'Grease' with: [				spec					className: 'ConfigurationOfGrease';					versionString: '1.0-alpha2-baseline';					loads: #('Grease-Core' );					file: 'ConfigurationOfGrease';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			project: 'Seaside30' with: [				spec					className: 'ConfigurationOfSeaside30';					versionString: '3.0.0-alpha5.6-baseline';					loads: #('Core');					file: 'ConfigurationOfSeaside30';					repository: 'http://www.squeaksource.com/MetacelloRepository'];			yourself.		spec 			package: 'Magritte-Model' with: [				spec requires: #('Grease' )];			package: 'Magritte-Tests-Model' with: [				spec requires: #('Magritte-Model')];			package: 'Magritte-Seaside' with: [				spec requires: #('Magritte-Model' 'Seaside30')];			yourself.		spec			group: 'default' with: #('Core' 'Tests');			group: 'Core' with: #('Magritte-Model' );			group: 'Tests' with: #('Magritte-Tests-Model')			yourself. ].	spec for: #squeakCommon do: [		spec 			package: 'Magritte-Model' with: [				spec includes: #('Magritte-Pharo-Model' 'Magritte-Morph') ];			package: 'Magritte-Tests-Model' with: [				spec includes: #('Magritte-Tests-Pharo-Model' )];			package: 'Magritte-Seaside' with: [				spec includes: #('Magritte-Pharo-Seaside')];			package: 'Magritte-Pharo-Model' with: [				spec requires: #('Magritte-Model') ];			package: 'Magritte-Tests-Pharo-Model' with: [				spec requires: #('Magritte-Pharo-Model' )];			package: 'Magritte-Pharo-Seaside' with: [				spec requires: #('Magritte-Seaside')];			package: 'Magritte-Morph' with: [				spec requires: #('Magritte-Model' )];			yourself. ].! !!ConfigurationOfMagritte2 methodsFor: 'baselines' stamp: 'DaleHenrichs 06/23/2010 15:24'!baseline2050: spec	<version: '2.0.5-baseline'>		spec for: #common do: [		spec blessing: #baseline.		spec repository: 'http://source.lukas-renggli.ch/magritte2'. 		spec			project: 'Grease' with: [				spec					className: 'ConfigurationOfGrease';					versionString: '1.0-alpha9.3-baseline';					loads: #('Core' );					file: 'ConfigurationOfGrease';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			project: 'Seaside30' with: [				spec					className: 'ConfigurationOfSeaside30';					versionString: '3.0.0-alpha5.15-baseline';					loads: #('Base' 'Seaside-HTML5');					file: 'ConfigurationOfSeaside30';					repository: 'http://www.squeaksource.com/MetacelloRepository'];			yourself.		spec 			package: 'Magritte-Model' with: [				spec requires: #('Grease' )];			package: 'Magritte-Tests-Model' with: [				spec requires: #('Magritte-Model')];			package: 'Magritte-Seaside' with: [				spec requires: #('Magritte-Model' 'Seaside30')];			yourself.		spec			group: 'default' with: #('Core');			group: 'Core' with: #('Magritte-Model' );			group: 'Tests' with: #('Magritte-Tests-Model')			yourself. ].	spec for: #squeakCommon do: [		spec 			package: 'Magritte-Model' with: [				spec includes: #('Magritte-Pharo-Model' 'Magritte-Morph') ];			package: 'Magritte-Tests-Model' with: [				spec includes: #('Magritte-Tests-Pharo-Model' )];			package: 'Magritte-Seaside' with: [				spec includes: #('Magritte-Pharo-Seaside')];			package: 'Magritte-Pharo-Model' with: [				spec requires: #('Magritte-Model') ];			package: 'Magritte-Tests-Pharo-Model' with: [				spec requires: #('Magritte-Pharo-Model' )];			package: 'Magritte-Pharo-Seaside' with: [				spec requires: #('Magritte-Seaside')];			package: 'Magritte-Morph' with: [				spec requires: #('Magritte-Model' )];			yourself. ].	spec for: #gemstone do: [		spec repository: 'http://seaside.gemstone.com/ss/Magritte2'. 		spec 			package: 'Magritte-Model' with: [				spec includes: #('Magritte-GemStone-Model' ) ];			package: 'Magritte-Tests-Model' with: [				spec includes: #('Magritte-Tests-GemStone-Model' )];			package: 'Magritte-Seaside' with: [				spec includes: #('Magritte-GemStone-Seaside')];			package: 'Magritte-GemStone-Model' with: [				spec requires: #('Magritte-Model') ];			package: 'Magritte-Tests-GemStone-Model' with: [				spec requires: #('Magritte-GemStone-Model' )];			package: 'Magritte-GemStone-Seaside' with: [				spec requires: #('Magritte-Seaside')];			yourself. ].! !!ConfigurationOfMagritte2 methodsFor: 'accessing' stamp: 'DaleHenrichs 1/22/2010 11:04'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear ]! !!ConfigurationOfMagritte2 methodsFor: 'versions' stamp: 'DaleHenrichs 1/31/2010 11:31'!version200: spec	<version: '2.0' imports: #('2.0-baseline')>	spec for: #common do: [		spec blessing: #alpha.		spec description: 'Initial version of Magritte 2.0 for Seaside 3.0'.		spec author: 'DaleHenrichs'.		spec timestamp: '1/22/2010 14:42'.		spec 			project: 'Grease' with: '1.0-alpha4';			project: 'Seaside30' with: '3.0.0-alpha5.6'.].	spec for: #squeakCommon do: [		spec 			package: 'Magritte-Model' with: 'Magritte-Model-jf.391';			package: 'Magritte-Tests-Model' with: 'Magritte-Tests-Model-NickAger.10';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-NickAger.328';			package: 'Magritte-Pharo-Model' with: 'Magritte-Pharo-Model-lr.21';			package: 'Magritte-Tests-Pharo-Model' with: 'Magritte-Tests-Pharo-Model-jf.2';			package: 'Magritte-Pharo-Seaside' with: 'Magritte-Pharo-Seaside-jf.4';			package: 'Magritte-Morph' with: 'Magritte-Morph-NickAger.50'.].! !!ConfigurationOfMagritte2 methodsFor: 'versions' stamp: 'DaleHenrichs 2/9/2010 12:10'!version201: spec	<version: '2.0.1' imports: #('2.0-baseline')>	spec for: #common do: [		spec blessing: #alpha.		spec description: '- pick up later version of Seaside3.0 (3.0.0-alpha5.7)- Magritte-Seaside-lr.329  - fixed some bugs that were introduced with some recent seaside verisons'.		spec author: 'DaleHenrichs'.		spec timestamp: '1/31/2010 17:04'.		spec 			project: 'Grease' with: '1.0-alpha5.1';			project: 'Seaside30' with: '3.0.0-alpha5.7'.].	spec for: #squeakCommon do: [		spec 			package: 'Magritte-Model' with: 'Magritte-Model-jf.391';			package: 'Magritte-Tests-Model' with: 'Magritte-Tests-Model-NickAger.10';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-lr.329';			package: 'Magritte-Pharo-Model' with: 'Magritte-Pharo-Model-lr.21';			package: 'Magritte-Tests-Pharo-Model' with: 'Magritte-Tests-Pharo-Model-jf.2';			package: 'Magritte-Pharo-Seaside' with: 'Magritte-Pharo-Seaside-jf.4';			package: 'Magritte-Morph' with: 'Magritte-Morph-NickAger.50'.].! !!ConfigurationOfMagritte2 methodsFor: 'versions' stamp: 'DaleHenrichs 3/1/2010 14:59'!version202: spec	<version: '2.0.2' imports: #('2.0-baseline')>	spec for: #common do: [		spec blessing: #alpha.		spec description: '- Magritte-Model  - added repository URL  - added package description and url for all packages  - normalize the protocols- Magritte-Morph  - added package description and url for all packages- Magritte-Pharo-Model, Magritte-Pharo-Seaside  - added repository URL- Magritte-Seaside  - added repository URL  - added package description and url for all packages  - normalize the protocols  - merged late latest fixes from Magritte- Magritte-Tests-Model, Magritte-Tests-Pharo-Model  - added repository URL  - added package description and url for all packages'.		spec author: 'DaleHenrichs'.		spec timestamp: '3/1/2010 14:59'.		spec 			project: 'Grease' with: '1.0-alpha6';			project: 'Seaside30' with: '3.0.0-alpha5.9'.].	spec for: #squeakCommon do: [		spec 			package: 'Magritte-Model' with: 'Magritte-Model-lr.394';			package: 'Magritte-Tests-Model' with: 'Magritte-Tests-Model-lr.12';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-lr.333';			package: 'Magritte-Pharo-Model' with: 'Magritte-Pharo-Model-lr.22';			package: 'Magritte-Tests-Pharo-Model' with: 'Magritte-Tests-Pharo-Model-lr.4';			package: 'Magritte-Pharo-Seaside' with: 'Magritte-Pharo-Seaside-lr.5';			package: 'Magritte-Morph' with: 'Magritte-Morph-lr.51'.].! !!ConfigurationOfMagritte2 methodsFor: 'versions' stamp: 'DaleHenrichs 3/29/2010 12:41'!version203: spec	<version: '2.0.3' imports: #('2.0-baseline' )>	spec for: #common do: [		spec blessing: #alpha.		spec description: '- pick up latest mcz files (3/29/2010 11:30)'.		spec author: 'DaleHenrichs'.		spec timestamp: '3/29/2010 11:34'.		spec 			project: 'Grease' with: '1.0-alpha7';			project: 'Seaside30' with: '3.0.0-alpha5.10'.].	spec for: #squeakCommon do: [		spec 			package: 'Magritte-Model' with: 'Magritte-Model-lr.394';			package: 'Magritte-Tests-Model' with: 'Magritte-Tests-Model-lr.12';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-lr.335';			package: 'Magritte-Pharo-Model' with: 'Magritte-Pharo-Model-lr.22';			package: 'Magritte-Tests-Pharo-Model' with: 'Magritte-Tests-Pharo-Model-lr.4';			package: 'Magritte-Pharo-Seaside' with: 'Magritte-Pharo-Seaside-lr.5';			package: 'Magritte-Morph' with: 'Magritte-Morph-lr.51'.].! !!ConfigurationOfMagritte2 methodsFor: 'versions' stamp: 'DaleHenrichs 6/1/2010 14:56'!version204: spec	<version: '2.0.4' imports: #('2.0-baseline' )>	spec for: #common do: [		spec blessing: #alpha.		spec description: '- pick up latest mcz files (6/1/2010 14:56)'.		spec author: 'DaleHenrichs'.		spec timestamp: '6/1/2010 14:56'.		spec 			project: 'Grease' with: '1.0-alpha9.2';			project: 'Seaside30' with: '3.0.0-alpha5.14'.].	spec for: #squeakCommon do: [		spec 			package: 'Magritte-Model' with: 'Magritte-Model-DamienCassou.395';			package: 'Magritte-Tests-Model' with: 'Magritte-Tests-Model-lr.13';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-lr.335';			package: 'Magritte-Pharo-Model' with: 'Magritte-Pharo-Model-lr.22';			package: 'Magritte-Tests-Pharo-Model' with: 'Magritte-Tests-Pharo-Model-lr.4';			package: 'Magritte-Pharo-Seaside' with: 'Magritte-Pharo-Seaside-lr.5';			package: 'Magritte-Morph' with: 'Magritte-Morph-lr.51'.].! !!ConfigurationOfMagritte2 methodsFor: 'versions' stamp: 'DaleHenrichs 7/13/2010 10:24'!version205: spec	<version: '2.0.5' imports: #('2.0.5-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '- port to GemStone GLASS 1.0-beta.8- pick up recent mcz files (06/23/10 14:41)- need an #asSymbol in MAVariableAccessor>>canRead: for GemStone .... #allInstVarNames returns list of Symbols- fix Issue 5: http://code.google.com/p/magritte-metamodel/issues/detail?id=5 "MAReportComponent>>renderTableCaptionOn: sends #caption ... #caption	not implemented"- load only ''Base'' and ''Seaside-HTML5'' for Magritte-Seaside'.		spec author: 'DaleHenrichs'.		spec timestamp: '06/23/10 15:20:31'.		spec 			project: 'Grease' with: '1.0-alpha9.3';			project: 'Seaside30' with: '3.0.0-alpha5.15'.		spec 			package: 'Magritte-Model' with: 'Magritte-Model-DaleHenrichs.396';			package: 'Magritte-Tests-Model' with: 'Magritte-Tests-Model-lr.13';			package: 'Magritte-Seaside' with: 'Magritte-Seaside-lr.337'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Magritte-Pharo-Model' with: 'Magritte-Pharo-Model-lr.22';			package: 'Magritte-Tests-Pharo-Model' with: 'Magritte-Tests-Pharo-Model-lr.4';			package: 'Magritte-Pharo-Seaside' with: 'Magritte-Pharo-Seaside-lr.5';			package: 'Magritte-Morph' with: 'Magritte-Morph-lr.51'.].	spec for: #'gemstone' do: [		spec 			package: 'Magritte-GemStone-Model' with: 'Magritte-GemStone-Model-DaleHenrichs.2';			package: 'Magritte-Tests-Model' with: 'Magritte-Tests-Model.gemstone-DaleHenrichs.14';			package: 'Magritte-Tests-GemStone-Model' with: 'Magritte-Tests-GemStone-Model-DaleHenrichs.1';			package: 'Magritte-GemStone-Seaside' with: 'Magritte-GemStone-Seaside-DaleHenrichs.2'.].! !!ConfigurationOfPier class methodsFor: 'private' stamp: 'DaleHenrichs 12/19/2009 15:07'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfPier class methodsFor: 'private' stamp: 'DaleHenrichs 1/6/2010 16:48'!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.15"			self bootstrapPackage: 'Gofer-lr.83' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfPier class methodsFor: 'metacello tool support' stamp: 'DaleHenrichs 12/19/2009 15:07'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfPier class methodsFor: 'loading' stamp: 'DaleHenrichs 12/20/2009 13:13'!load	"self load"		self project latestVersion load! !!ConfigurationOfPier class methodsFor: 'accessing' stamp: 'DaleHenrichs 12/19/2009 15:07'!project	^self new project! !!ConfigurationOfPier methodsFor: 'baselines' stamp: 'DaleHenrichs 02/12/2010 11:29'!baseline1200: spec 	<version: '1.2-baseline'>		spec for: #common do: [		spec blessing: #baseline.		spec repository: 'http://source.lukas-renggli.ch/pier'.		spec			project: 'Magritte-Model' with: [				spec					className: 'ConfigurationOfMagritte';					versionString: '1.0-baseline';					loads: #('Magritte-Model');					file: 'ConfigurationOfMagritte';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			project: 'Magritte-Seaside' copyFrom: 'Magritte-Model' with: [				spec					loads: #( 'Magritte-Seaside' 'Magritte-Tests' ).];			yourself.		spec 			package: 'Pier-Model' with: [ spec requires: #('Magritte-Model')];			package: 'Pier-Tests' with: [ spec requires: #('Pier-Model')];			package: 'Pier-Security' with: [ spec requires: #('Pier-Seaside' 'Pier-Tests')];			package: 'Pier-Seaside' with: [ spec requires: #('Pier-Model' 'Magritte-Seaside')];			package: 'Pier-Blog' with: [ spec requires: #('Pier-Seaside')];			yourself ].	spec for: #gemstone do: [		spec repository: 'http://seaside.gemstone.com/ss/pier'.		spec			project: 'GsCore' with: [				spec					className: 'ConfigurationOfGsCore';					file: 'ConfigurationOfGsCore';					repository: 'http://seaside.gemstone.com/ss/GLASSproject' ];			project: 'RSRSS2' with: [				spec					className: 'ConfigurationOfSeaside28';					versionString: '2.8.4-baseline';					loads: 'RSRSS2';					file: 'ConfigurationOfSeaside28';					repository: 'http://www.squeaksource.com/MetacelloRepository'];			project: 'Scriptaculous' copyFrom: 'RSRSS2' with: [ 				spec loads: 'Scriptaculous' ];			project: 'System-Digital-Signatures' with: [				spec					className: 'ConfigurationOfGsMisc';					loads: 'System-Digital-Signatures';					file: 'ConfigurationOfGsMisc';					repository: 'http://seaside.gemstone.com/ss/GLASSproject' ];			yourself.		spec 			package: 'Pier-Blog' with: [ 				spec requires: #( 'RSRSS2' )];			package: 'Pier-Model' with: [ 				spec 					requires: #( 'System-Digital-Signatures' 'GsCore' );					postLoadDoIt: #postLoadDoit120Gs ];			package: 'Pier-Seaside' with: [ spec requires: #('Scriptaculous') ];			yourself. ].! !!ConfigurationOfPier methodsFor: 'baselines' stamp: 'DaleHenrichs 02/12/2010 10:51'!baseline1211: spec 	<version: '1.2.1.1-baseline' imports: #( '1.2-baseline' )>		spec for: #common do: [		spec blessing: #baseline.		spec			group: 'default' with: #('Core' );			group: 'Core' with: #('Pier-Model' 'Pier-Security' 'Pier-Seaside' 'Pier-Blog' );			group: 'Tests' with: #('Core' 'Pier-Tests' );			yourself ].	spec for: #squeakCommon do: [		spec			package: 'Pier-Squeak-Persistency' with: [				spec requires: #('Pier-Model' 'Pier-Tests') ];			yourself.		spec			group: 'Core' with: #('Pier-Squeak-Persistency' );			yourself ].! !!ConfigurationOfPier methodsFor: 'baselines' stamp: 'DaleHenrichs 03/20/2010 10:52'!baseline1213: spec 	<version: '1.2.1.3-baseline'>		spec for: #common do: [		spec blessing: #baseline.		spec repository: 'http://source.lukas-renggli.ch/pier'.		spec			project: 'Magritte-Model' with: [				spec					className: 'ConfigurationOfMagritte';					versionString: '1.2.1.1-baseline';					loads: #('Magritte-Model');					file: 'ConfigurationOfMagritte';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			project: 'Magritte-Seaside' copyFrom: 'Magritte-Model' with: [				spec					loads: #( 'Magritte-Seaside' 'Magritte-Tests' ).];			yourself.		spec 			package: 'Pier-Model' with: [ spec requires: #('Magritte-Model')];			package: 'Pier-Tests' with: [ spec requires: #('Pier-Model')];			package: 'Pier-Security' with: [ spec requires: #('Pier-Seaside' 'Pier-Tests')];			package: 'Pier-Seaside' with: [ spec requires: #('Pier-Model' 'Magritte-Seaside')];			package: 'Pier-Blog' with: [ spec requires: #('Pier-Seaside')];			yourself.		spec			group: 'default' with: #('Core' );			group: 'Core' with: #('Pier-Model' 'Pier-Security' 'Pier-Seaside' 'Pier-Blog' );			group: 'Tests' with: #('Core' 'Pier-Tests' );			yourself ].	spec for: #squeakCommon do: [		spec			package: 'Pier-Squeak-Persistency' with: [				spec requires: #('Pier-Model' 'Pier-Tests') ];			yourself.		spec			group: 'Core' with: #('Pier-Squeak-Persistency' );			yourself ].	spec for: #gemstone do: [		spec repository: 'http://seaside.gemstone.com/ss/pier'.		spec			project: 'GsCore' with: [				spec					className: 'ConfigurationOfGsCore';					file: 'ConfigurationOfGsCore';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'RSRSS2' with: [				spec					className: 'ConfigurationOfSeaside28';					versionString: '2.8.4.3-baseline';					loads: 'RSRSS2';					file: 'ConfigurationOfSeaside28';					repository: 'http://www.squeaksource.com/MetacelloRepository'];			project: 'Scriptaculous' copyFrom: 'RSRSS2' with: [ 				spec loads: 'Scriptaculous' ];			project: 'System-Digital-Signatures' with: [				spec					className: 'ConfigurationOfGsMisc';					loads: 'System-Digital-Signatures';					file: 'ConfigurationOfGsMisc';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			yourself.		spec 			package: 'Pier-Blog' with: [ 				spec requires: #( 'RSRSS2' )];			package: 'Pier-Model' with: [ 				spec 					requires: #( 'System-Digital-Signatures' 'GsCore' );					preLoadDoIt: #preLoadDoit1213Gs;					repository: 'http://seaside.gemstone.com/ss/pier';					yourself ];			package: 'Pier-Seaside' with: [ spec requires: #('Scriptaculous') ];			package: 'Pier-Security' with: [				spec 					file: 'Pier-Security.g';					repository: 'http://seaside.gemstone.com/ss/pier' ];			package: 'Pier-Tests' with: [				spec 					file: 'Pier-Tests.g';					repository: 'http://seaside.gemstone.com/ss/pier' ];			yourself. ].! !!ConfigurationOfPier methodsFor: 'doits' stamp: 'DaleHenrichs 12/19/2009 15:28'!postLoadDoit120Gs	Smalltalk at: #PRDocumentParser ifPresent: [:cl | 		cl 			perform: #resetLineMatcher;			perform: #resetTextMatcher ]! !!ConfigurationOfPier methodsFor: 'doits' stamp: 'DaleHenrichs 02/26/2010 15:35'!preLoadDoit1213Gs	Smalltalk at: #PRDocumentParser ifPresent: [:cl | 		(cl respondsTo: #resetLineMatcher)			ifTrue: [				cl 					perform: #resetLineMatcher;					perform: #resetTextMatcher]			ifFalse: [ 				cl class					compileMethod: self preLoadDoit1213GsMethodString					category: 'as yet unclassified'.				cl perform: #resetLineMatcher ]]! !!ConfigurationOfPier methodsFor: 'doits' stamp: 'DaleHenrichs 02/26/2010 15:28'!preLoadDoit1213GsMethodString	"resetLineMatcher will be redefined during the load"	^'resetLineMatcher TextMatcher := LineMatcher := nil'! !!ConfigurationOfPier methodsFor: 'accessing' stamp: 'DaleHenrichs 12/20/2009 13:36'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear ]! !!ConfigurationOfPier methodsFor: 'versions' stamp: 'DaleHenrichs 02/12/2010 10:52'!version1200: spec 	<version: '1.2' imports: #('1.2-baseline' )>		spec for: #common do: [		spec blessing: #release.		spec description: 'Pier 1.2'.		spec 			project: 'Magritte-Model' with: '1.2';			project: 'Magritte-Seaside' with: '1.2'.		spec 			package: 'Pier-Blog' with: 'Pier-Blog-lr.120';			package: 'Pier-Seaside' with: 'Pier-Seaside-lr.425';			package: 'Pier-Tests' with: 'Pier-Tests-lr.137'].	spec for: #squeakCommon do: [		spec 			package: 'Pier-Model' with: 'Pier-Model-lr.333';			package: 'Pier-Security' with: 'Pier-Security-lr.141'].	spec for: #gemstone do: [		spec description: 'Initial port of Pier 1.2 to GemStone'.		spec			project: 'GsCore' with: '0.232.4';			project: 'RSRSS2' with: '2.8.4.2';			project: 'Scriptaculous' with: '2.8.4.2';			project: 'System-Digital-Signatures' with: '0.233'.		spec 			package: 'Pier-Model' with: 'Pier-Model-dkh.335';			package: 'Pier-Security' with: 'Pier-Security.g-dkh.142'].! !!ConfigurationOfPier methodsFor: 'versions' stamp: 'DaleHenrichs 02/12/2010 16:16'!version1210: spec	<version: '1.2.1' imports: #('1.2-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'equivalent to: Pier-All-lr.356- better manage the naming of structures, spaces are not allowed any longer- when creating pages through links derive malformed names and titles in a truly smart way so that there are no bad surprises- moved PRFile>>#contents: needs to be in Pier-Model- fixed an off by one error that caused lines to disappear- extracted the patchset generation into a separate method, so that it can be used for different renderes- added test that actually do more than just look for smoke- improved interface- created a subclass to for string diff, this gives more precises diffs not only on a per line basis- moved the diff algorithm to Pier-Model- added a start of tests for the diff algorithm- moved the rendering code of the diff algorithm to Pier-Seaside- created a diff view in Pier-Seaside- extracted common diff code in Pier-Blog- made sure that empty annotated paragraphs write correctly- integrated search widget- improved the full text search- added a search view- the remove command is now confirmed through a normal page that shows a nice listing with links to chidren and incoming references- removed the confirmation and confirmation string hack that was a nightmare, also performance wise- made the document description displayed properly- get rid of the confirmation string for removals, it is too expensive to calculate- only confirm removal when there are children/references- cache the confirmation string, this is a major slowdown- cache the security decoration, don''t look it up in the loop- rewrote most code to use CPS- innefficient but working fix for Issue 102 (Multiplying backslashes)- moved up #kind/#kind: to MADescription- port to GemStone'.		spec author: 'DaleHenrichs'.		spec timestamp: '02/12/10 16:10:00'.		spec 			project: 'Magritte-Model' with: '1.2.1';			project: 'Magritte-Seaside' with: '1.2.1'.		spec 			package: 'Pier-Blog' with: 'Pier-Blog-lr.133';			package: 'Pier-Seaside' with: 'Pier-Seaside-lr.445'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Pier-Model' with: 'Pier-Model-lr.349';			package: 'Pier-Security' with: 'Pier-Security-lr.143';			package: 'Pier-Tests' with: 'Pier-Tests-lr.147'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.232.4';			project: 'RSRSS2' with: '2.8.4.2';			project: 'Scriptaculous' with: '2.8.4.2';			project: 'System-Digital-Signatures' with: '0.233'.		spec 			package: 'Pier-Model' with: 'Pier-Model-DaleHenrichs.350';			package: 'Pier-Security' with: 'Pier-Security.g-DaleHenrichs.144';			package: 'Pier-Tests' with: 'Pier-Tests.g-DaleHenrichs.148'.].! !!ConfigurationOfPier methodsFor: 'versions' stamp: 'DaleHenrichs 02/12/2010 16:16'!version1211: spec 	<version: '1.2.1.1' imports: #('1.2.1.1-baseline' )>		spec for: #common do: [		spec blessing: #alpha.		spec description: '- define groups'.		spec 			project: 'Magritte-Model' with: '1.2.1';			project: 'Magritte-Seaside' with: '1.2.1'.		spec 			package: 'Pier-Blog' with: 'Pier-Blog-lr.133';			package: 'Pier-Seaside' with: 'Pier-Seaside-lr.445'].	spec for: #squeakCommon do: [		spec 			package: 'Pier-Model' with: 'Pier-Model-lr.349';			package: 'Pier-Squeak-Persistency' with: 'Pier-Squeak-Persistency-kph.24';			package: 'Pier-Security' with: 'Pier-Security-lr.143';			package: 'Pier-Tests' with: 'Pier-Tests-lr.147'].	spec for: #gemstone do: [		spec			project: 'GsCore' with: '0.232.4';			project: 'RSRSS2' with: '2.8.4.2';			project: 'Scriptaculous' with: '2.8.4.2';			project: 'System-Digital-Signatures' with: '0.233'.		spec 			package: 'Pier-Model' with: 'Pier-Model-DaleHenrichs.350';			package: 'Pier-Security' with: 'Pier-Security.g-DaleHenrichs.144';			package: 'Pier-Tests' with: 'Pier-Tests.g-DaleHenrichs.148'].! !!ConfigurationOfPier methodsFor: 'versions' stamp: 'DaleHenrichs 02/12/2010 16:30'!version1212: spec	<version: '1.2.1.2' imports: #('1.2.1.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'alpha'.		spec description: '- pick up latest versions of packages (1/27/2010 16:57)- port to GemStone'.		spec author: 'DaleHenrichs'.		spec timestamp: '02/12/10 16:30:12'.		spec 			project: 'Magritte-Model' with: '1.2.1.2';			project: 'Magritte-Seaside' with: '1.2.1.2'.		spec 			package: 'Pier-Blog' with: 'Pier-Blog-lr.134';			package: 'Pier-Seaside' with: 'Pier-Seaside-lr.449'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Pier-Model' with: 'Pier-Model-lr.351';			package: 'Pier-Squeak-Persistency' with: 'Pier-Squeak-Persistency-kph.24';			package: 'Pier-Security' with: 'Pier-Security-lr.144';			package: 'Pier-Tests' with: 'Pier-Tests-lr.150'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.232.4';			project: 'RSRSS2' with: '2.8.4.2';			project: 'Scriptaculous' with: '2.8.4.2';			project: 'System-Digital-Signatures' with: '0.233'.		spec 			package: 'Pier-Model' with: 'Pier-Model-DaleHenrichs.352';			package: 'Pier-Security' with: 'Pier-Security.g-DaleHenrichs.145';			package: 'Pier-Tests' with: 'Pier-Tests.g-DaleHenrichs.151'.].! !!ConfigurationOfPier methodsFor: 'versions' stamp: 'DaleHenrichs 3/1/2010 15:46'!version1213: spec	<version: '1.2.1.3' imports: #('1.2.1.3-baseline' )>	spec for: #common do: [		spec blessing: #alpha.		spec description: '- port Pier-AddOns to GemStone- latest mcz files (3/1/2010 15:44)- Pier-Seaside  - ensure to resolve data  - merge Pier-Seaside-lr.446'.		spec author: 'DaleHenrichs'.		spec timestamp: '3/1/2010 15:45'.		spec 			project: 'Magritte-Model' with: '1.2.1.4';			project: 'Magritte-Seaside' with: '1.2.1.4'.		spec 			package: 'Pier-Blog' with: 'Pier-Blog-lr.134';			package: 'Pier-Seaside' with: 'Pier-Seaside-lr.451'.].	spec for: #squeakCommon do: [		spec 			package: 'Pier-Model' with: 'Pier-Model-lr.351';			package: 'Pier-Squeak-Persistency' with: 'Pier-Squeak-Persistency-kph.24';			package: 'Pier-Security' with: 'Pier-Security-lr.144';			package: 'Pier-Tests' with: 'Pier-Tests-lr.150'.].	spec for: #gemstone do: [		spec 			project: 'GsCore' with: '0.239';			project: 'RSRSS2' with: '2.8.4.4';			project: 'Scriptaculous' with: '2.8.4.4';			project: 'System-Digital-Signatures' with: '0.235'.		spec 			package: 'Pier-Model' with: 'Pier-Model-DaleHenrichs.352';			package: 'Pier-Security' with: 'Pier-Security.g-DaleHenrichs.145';			package: 'Pier-Tests' with: 'Pier-Tests.g-DaleHenrichs.151'.].! !!ConfigurationOfPier methodsFor: 'versions' stamp: 'DaleHenrichs 05/28/2010 11:27'!version1214: spec	<version: '1.2.1.4' imports: #('1.2.1.3-baseline' )>	spec for: #common do: [		spec blessing: #release.		spec description: '- latest mcz files (4/9/2010 15:41)- fixed issue with ReadStream>>#next that at the end of the input stream returns nil in Pharo and throws an exceptin in GemStone- fixed symbol/string issue, thanks to Norbert'.		spec author: 'DaleHenrichs'.		spec timestamp: '4/9/2010 15:44'.		spec 			project: 'Magritte-Model' with: '1.2.1.4';			project: 'Magritte-Seaside' with: '1.2.1.4'.		spec 			package: 'Pier-Blog' with: 'Pier-Blog-lr.135';			package: 'Pier-Seaside' with: 'Pier-Seaside-lr.452'.].	spec for: #squeakCommon do: [		spec 			package: 'Pier-Model' with: 'Pier-Model-lr.351';			package: 'Pier-Squeak-Persistency' with: 'Pier-Squeak-Persistency-kph.24';			package: 'Pier-Security' with: 'Pier-Security-lr.144';			package: 'Pier-Tests' with: 'Pier-Tests-lr.150'.].	spec for: #gemstone do: [		spec 			project: 'GsCore' with: '0.239';			project: 'RSRSS2' with: '2.8.4.4';			project: 'Scriptaculous' with: '2.8.4.4';			project: 'System-Digital-Signatures' with: '0.235'.		spec 			package: 'Pier-Model' with: 'Pier-Model-DaleHenrichs.352';			package: 'Pier-Security' with: 'Pier-Security.g-DaleHenrichs.145';			package: 'Pier-Tests' with: 'Pier-Tests.g-DaleHenrichs.151'.].! !"ConfigurationOfMagritte2"!"ConfigurationOfPier"!!Gofer commentStamp: 'lr 12/14/2009 09:20' prior: 0!: Gofer, a person who runs errands. Origin 1960s: from go for, i.e. go and fetch.: ''The New Oxford American Dictionary''!! SynopsisGofer is a small tool on top of Monticello that loads, updates, merges, diffs, reverts, commits, recompiles and unloads groups of Monticello packages. Contrary to existing tools Gofer makes sure that these operations are performed as clean as possible:- Gofer treats packages from one or more repository in one operation.- Gofer works with fixed versions or tries to find the "latest" version using a given name prefix.- Gofer automatically assigns repositories to all packages, so that the other tools are ready to be used on individual packages.- Gofer makes sure that there is only one repository instance registered for a single physical location.- Gofer works with Monticello dependencies and uniformly treats them like the primary package.- Gofer prefers to work with faster repositories if there is a choice.- Gofer cleans up after Monticello, no empty class categories and no empty method protocols are to be expected.!! InstallationGofer is included with the latest Pharo and GemStone distributions. To update to the latest version you can use Gofer itself:== Gofer gofer updateIn case you are missing Gofer in your image, grab it from *http://source.lukas-renggli.ch/gofer.html*.!! DescriptionGofer is very simple by design, the basic useage scenario is always the same and consists of three steps:# You specify a Monticello repository URL. You can do this using the methods ==url:==, ==url:username:password:== (HTTP, FTP), or ==directory:== if you need full control, or using convenience methods like ==squeaksource:==, ==wiresong:==, or ==gemsource:== for well known repositories. Additionally the following settings are available:#- Gofer implicitly declares the local package cache as a repository. To disable the local package cache use the method ==disablePackageCache==, to re-enable use ==enablePackageCache==.#- Gofer throws Gofer throws errors if a repository is not reachable. To silently ignore repository erros use the message ==disableRepositoryErrors==, to re-enable use ==enableRepositoryErrors==.# You specify one or more Monticello packages you want to work with, by adding them to the Gofer instance. Use ==version:== to add a specific version, or use ==package:== to add the "latest" version in the given repository. Furthermore there is ==package:constraint:== that allows to further constraint the version to be loaded in a block passed in as the second argument.# You specify one or more actions to be performed on the specified packages:| ==load==	| Load the specified packages.| ==update==	| Update the specified packages.| ==merge==	| Merge the specified packages into their working copies.| ==localChanges==	| Display the changes between the base version and the working copy.| ==remoteChanges==	| Display the changes between the working copy and the remote changes.| ==cleanup==	| Cleans the specified packages.| ==commit==	| Commit the modified specified packages.| ==commit:==	| Commit the modified specified packages with the given commit message.| ==revert==	| Revert the specified packages to the currently loaded version.| ==recompile==	| Recompile the specified packages.| ==unload==	| Unload the specified packages.| ==fetch==     | Download versions from remote repositories into the local cache.| ==push==      | Upload local versions from local cache into remote repositories.!! ExampleTo use Gofer to load exact versions of the Kom Server, the 'latest' code of Seaside 2.8 and the 'latest' code of the Scriptaculous package that is committed by the author with the initials 'lr' one could write:== Gofer new==     squeaksource: 'KomHttpServer';==     version: 'DynamicBindings-gc.7';==     version: 'KomServices-gc.19';==     version: 'KomHttpServer-gc.32';==     squeaksource: 'Seaside';==     package: 'Seaside2.8a';==     package: 'Scriptaculous' constraint: [ :version | version author = 'lr' ];==     load!!GoferPackageReference commentStamp: 'lr 12/9/2009 22:47' prior: 0!A GoferPackageReference refers to the latest version of a Monticello package.!!GoferConstraintReference commentStamp: 'lr 12/9/2009 22:48' prior: 0!A GoferPackageReference refers to the latest version of a Monticello package satisfying an additional set of conditions.!!GoferVersionReference commentStamp: 'lr 12/9/2009 22:50' prior: 0!A GoferVersionReference refers to a specific version of a Monticello package.!!GoferResolvedReference commentStamp: 'lr 12/9/2009 22:53' prior: 0!A GoferVersionReference refers to a specific version of a Monticello package in a particular repository. This class is the only one that can actually access the version, because it is the only one knowing where to find it.!!MCFileBasedRepository methodsFor: '*gofer-core-accessing' stamp: 'TestRunner 12/12/2009 11:12'!goferReferences	| versionNames |	versionNames := [ self allVersionNames ]		on: Error		do: [ :error | ^ GoferRepositoryError signal: error messageText repository: self ].	^ versionNames		collect: [ :each | GoferResolvedReference name: each repository: self ]! !!MCFileBasedRepository methodsFor: '*gofer-core-accessing' stamp: 'lr 12/12/2009 11:29'!goferVersionFrom: aVersionReference	^ self loadVersionFromFileNamed: aVersionReference name , '.mcz'! !!MCRepository methodsFor: '*gofer-core-accessing' stamp: 'lr 12/11/2009 22:31'!goferPriority	^ 0! !!MCRepository methodsFor: '*gofer-core-accessing' stamp: 'lr 12/9/2009 20:50'!goferReferences	^ #()! !!MCRepository methodsFor: '*gofer-core-accessing' stamp: 'lr 12/12/2009 11:29'!goferVersionFrom: aVersionReference	self error: 'Unable to load from ' , self printString! !!MCDictionaryRepository methodsFor: '*gofer-core-accessing' stamp: 'lr 12/11/2009 22:31'!goferPriority	^ 10! !!MCDictionaryRepository methodsFor: '*gofer-core-accessing' stamp: 'TestRunner 12/12/2009 11:12'!goferReferences	^ self allVersionInfos collect: [ :each | GoferResolvedReference name: each name repository: self ]! !!MCDictionaryRepository methodsFor: '*gofer-core-accessing' stamp: 'TestRunner 12/13/2009 14:57'!goferVersionFrom: aVersionReference	^ self dictionary detect: [ :version | version info name = aVersionReference name ]! !!GoferRepositoryError class methodsFor: 'instance creation' stamp: 'lr 12/9/2009 19:15'!signal: aString repository: aRepository	^ self new repository: aRepository; signal: aString! !!GoferRepositoryError methodsFor: 'private' stamp: 'lr 12/9/2009 22:32'!isResumable	^ true! !!GoferRepositoryError methodsFor: 'accessing' stamp: 'lr 12/9/2009 19:14'!repository	^ repository! !!GoferRepositoryError methodsFor: 'accessing' stamp: 'lr 12/9/2009 19:14'!repository: aRepository	repository := aRepository! !!MCVersionLoader methodsFor: '*gofer-core-accessing' stamp: 'lr 12/18/2009 12:43'!goferHasVersions	^ versions isEmpty not! !!MCVersionLoader methodsFor: '*gofer-core-accessing' stamp: 'lr 12/18/2009 12:43'!goferVersions	^ versions! !!Gofer class methodsFor: 'private' stamp: 'lr 1/5/2010 10:45'!gofer	"Create a Gofer instance of Gofer."	^ self new		renggli: 'gofer';		package: 'Gofer-Core';		package: 'Gofer-Tests';		yourself! !!Gofer class methodsFor: 'instance creation' stamp: 'lr 11/6/2009 10:50'!it	^ self new! !!Gofer class methodsFor: 'instance creation' stamp: 'lr 8/20/2009 09:54'!new	^ self basicNew initialize! !!Gofer class methodsFor: 'private' stamp: 'lr 1/12/2010 19:39'!upgrade	"Update Gofer to the latest version using itself."		| working |	[ self gofer load ]		on: Error		do: [ :err | err retry ].	self new unload		unregister: (MCWorkingCopy 			forPackage: (MCPackage named: 'Gofer')).	self gofer recompile; cleanup! !!Gofer methodsFor: 'deprecated' stamp: 'lr 12/14/2009 20:08'!addPackage: aString	self deprecated: 'Instead of #addPackage: simply use #package:'.	self package: aString! !!Gofer methodsFor: 'deprecated' stamp: 'lr 12/14/2009 20:08'!addPackage: aString constraint: aBlock	self deprecated: 'Instead of #addPackage:constraint: simply use #package:constraint:'.	self package: aString constraint: aBlock! !!Gofer methodsFor: 'deprecated' stamp: 'lr 12/14/2009 20:08'!addVersion: aString	self deprecated: 'Instead of #addVersion: simply use #version:'.	self version: aString! !!Gofer methodsFor: 'accessing' stamp: 'lr 12/13/2009 17:17'!allResolved	"Answer all sorted references within the configured repositories."		| resolved |	resolved := OrderedCollection new.	self repositories		do: [ :repository | resolved addAll: (self allResolvedIn: repository) ].	^ resolved asSortedCollection asArray! !!Gofer methodsFor: 'accessing' stamp: 'lr 12/13/2009 17:17'!allResolvedIn: aRepository	"Answer all sorted references within aRepository. For efficiency cache the references."	^ (resolvedReferencesCache ifNil: [ resolvedReferencesCache := Dictionary new ])		at: aRepository ifAbsentPut: [ self basicReferencesIn: aRepository ]! !!Gofer methodsFor: 'private' stamp: 'lr 12/13/2009 16:28'!basicReferencesIn: aRepository	^ [ aRepository goferReferences asSortedCollection asArray ] 		on: GoferRepositoryError		do: errorBlock! !!Gofer methodsFor: 'operations-ui' stamp: 'lr 12/14/2009 23:51'!browseLocalChanges	"Browse the changes between the base version and the working copy."		^ self execute: GoferBrowseLocalChanges! !!Gofer methodsFor: 'operations-ui' stamp: 'lr 12/14/2009 23:51'!browseRemoteChanges	"Browse the changes between the working copy and the remote changes."		^ self execute: GoferBrowseRemoteChanges! !!Gofer methodsFor: 'operations' stamp: 'lr 10/3/2009 11:31'!cleanup	"Cleans the specified packages."		^ self execute: GoferCleanup! !!Gofer methodsFor: 'operations' stamp: 'lr 11/10/2009 10:08'!commit	"Commit the modified packages."	^ self execute: GoferCommit! !!Gofer methodsFor: 'operations' stamp: 'lr 11/10/2009 10:08'!commit: aString	"Commit the modified packages with the given commit message."	^ self execute: GoferCommit do: [ :operation | operation message: aString ]! !!Gofer methodsFor: 'repositories-places' stamp: 'lr 7/10/2009 16:27'!croquet: aString	self url: 'http://hedgehog.software.umn.edu:8888/' , aString! !!Gofer methodsFor: 'repositories' stamp: 'TestRunner 1/11/2010 22:57'!directory: aDirectoryOrString	"Add a file-system repository at aDirectoryOrString."		| repository |	repository := (aDirectoryOrString isString and: [ aDirectoryOrString endsWith: '*' ])		ifTrue: [ 			(Smalltalk 				at: #MCSubDirectoryRepository				ifAbsent: [ self error: aDirectoryOrString printString , ' is an unsupported repository type' ]) new					directory: (FileDirectory on: aDirectoryOrString allButLast);					yourself ]		ifFalse: [			MCDirectoryRepository new				directory: (aDirectoryOrString isString					ifTrue: [ FileDirectory on: aDirectoryOrString ]					ifFalse: [ aDirectoryOrString ]);				yourself ].	self repository: repository! !!Gofer methodsFor: 'repositories-options' stamp: 'lr 12/13/2009 16:33'!disablePackageCache	"Disable the use of the package-cache repository."	packageCacheRepository := nil! !!Gofer methodsFor: 'repositories-options' stamp: 'lr 12/13/2009 16:32'!disableRepositoryErrors	"Silently swallow all repository errors."	errorBlock := [ :error | error resume: #() ]! !!Gofer methodsFor: 'repositories-options' stamp: 'lr 12/13/2009 16:33'!enablePackageCache	"Enable the use of the package-cache repository."	packageCacheRepository := MCCacheRepository default! !!Gofer methodsFor: 'repositories-options' stamp: 'lr 12/13/2009 16:32'!enableRepositoryErrors	"Throw an exception when repositories are not available."	errorBlock := [ :error | error pass ]! !!Gofer methodsFor: 'private' stamp: 'lr 10/2/2009 10:11'!execute: anOperationClass	^ self execute: anOperationClass do: nil! !!Gofer methodsFor: 'private' stamp: 'lr 12/13/2009 16:43'!execute: anOperationClass do: aBlock	| operation result |	operation := anOperationClass on: self copy.	aBlock isNil		ifFalse: [ aBlock value: operation ].	^ operation execute! !!Gofer methodsFor: 'operations' stamp: 'lr 12/3/2009 21:06'!fetch	"Download versions from remote repositories into the local cache."	^ self execute: GoferFetch! !!Gofer methodsFor: 'repositories-places' stamp: 'dkh 10/16/2009 10:04'!gemsource: aString	self url: 'http://seaside.gemstone.com/ss/' , aString! !!Gofer methodsFor: 'repositories-places' stamp: 'lr 7/10/2009 16:27'!impara: aString	self url: 'http://source.impara.de/' , aString! !!Gofer methodsFor: 'initialization' stamp: 'lr 12/13/2009 16:33'!initialize	self enablePackageCache; enableRepositoryErrors.	references := OrderedCollection new.	repositories := OrderedCollection new! !!Gofer methodsFor: 'operations' stamp: 'lr 11/30/2009 14:17'!load	"Load the specified packages into the image."		^ self execute: GoferLoad! !!Gofer methodsFor: 'operations' stamp: 'lr 12/14/2009 23:51'!localChanges	"Answer the changes between the base version and the working copy."		^ self execute: GoferLocalChanges! !!Gofer methodsFor: 'operations' stamp: 'lr 11/10/2009 10:06'!merge	"Merge the specified packages into their working copies."		^ self execute: GoferMerge! !!Gofer methodsFor: 'references' stamp: 'lr 12/13/2009 13:25'!package: aString	"Add the package aString to the receiver."	references addLast: (GoferPackageReference name: aString)! !!Gofer methodsFor: 'references' stamp: 'lr 12/13/2009 13:25'!package: aString constraint: aOneArgumentBlock	"Add the package aString to the receiver, constraint the resulting versions further with aOneArgumentBlock."	references addLast: (GoferConstraintReference name: aString constraint: aOneArgumentBlock)! !!Gofer methodsFor: 'copying' stamp: 'lr 12/13/2009 16:52'!postCopy	references := references copy.	repositories := repositories copy.	resolvedReferencesCache := nil! !!Gofer methodsFor: 'operations' stamp: 'lr 12/3/2009 21:06'!push	"Upload local versions from local cache into remote repositories."	^ self execute: GoferPush! !!Gofer methodsFor: 'operations' stamp: 'lr 8/20/2009 11:44'!recompile	"Recompile the specified packages."	^ self execute: GoferRecompile! !!Gofer methodsFor: 'accessing' stamp: 'lr 12/13/2009 17:18'!references	"Answer the configured references."	^ Array withAll: references! !!Gofer methodsFor: 'operations' stamp: 'lr 12/30/2009 11:27'!reinitialize	"Calls the class side initializers on all package code."		^ self execute: GoferReinitialize! !!Gofer methodsFor: 'operations' stamp: 'lr 12/12/2009 12:49'!remoteChanges	"Display the changes between the working copy and the remote changes."		^ self execute: GoferRemoteChanges! !!Gofer methodsFor: 'repositories-places' stamp: 'lr 7/10/2009 16:25'!renggli: aString	self url: 'http://source.lukas-renggli.ch/' , aString! !!Gofer methodsFor: 'accessing' stamp: 'lr 12/13/2009 17:18'!repositories	"Answer the configured monticello repositories."	|  result |	result := OrderedCollection withAll: repositories.	packageCacheRepository isNil		ifFalse: [ result addFirst: packageCacheRepository ].	^ result asArray! !!Gofer methodsFor: 'repositories' stamp: 'lr 1/11/2010 10:34'!repository: aRepository	"Add aRepository to the repository configuration. If there is already a repository defined in the global configuration with that URL take this one instead."		| repository |	repository := MCRepositoryGroup default repositories		detect: [ :each | each = aRepository ]		ifNone: [ aRepository ].	repositories addLast: repository! !!Gofer methodsFor: 'accessing' stamp: 'lr 12/13/2009 17:14'!resolved	"Answer the resolved references of the receiver."	^ self references collect: [ :each | each resolveWith: self ]! !!Gofer methodsFor: 'operations' stamp: 'lr 8/20/2009 10:15'!revert	"Revert the specified packages to the currently loaded version."		^ self execute: GoferRevert! !!Gofer methodsFor: 'repositories-places' stamp: 'lr 7/10/2009 16:29'!saltypickle: aString	self url: 'http://squeak.saltypickle.com/' , aString! !!Gofer methodsFor: 'repositories-places' stamp: 'lr 7/10/2009 16:28'!squeakfoundation: aString	self url: 'http://source.squeakfoundation.org/' , aString! !!Gofer methodsFor: 'repositories-places' stamp: 'lr 7/10/2009 16:28'!squeaksource: aString	self url: 'http://www.squeaksource.com/' , aString! !!Gofer methodsFor: 'operations' stamp: 'lr 11/10/2009 10:07'!unload	"Unload the specified packages."		^ self execute: GoferUnload! !!Gofer methodsFor: 'operations' stamp: 'lr 9/18/2009 18:12'!update	"Update the specified packages."		^ self execute: GoferUpdate! !!Gofer methodsFor: 'repositories' stamp: 'lr 12/9/2009 22:17'!url: anUrlString	"Add anUrlString as a repository for the following package operations."	self url: anUrlString username: String new password: String new! !!Gofer methodsFor: 'repositories' stamp: 'lr 1/11/2010 22:41'!url: anUrlString username: aUsernameString password: aPasswordString	"Add anUrlString as a repository for the following package operations."	| repository |	repository := (anUrlString beginsWith: 'ftp://')		ifTrue: [			(Smalltalk 				at: #MCFtpRepository 				ifAbsent: [ self error: anUrlString printString , ' is an unsupported repository type' ])					host:  ((anUrlString allButFirst: 6) copyUpTo: $/)					directory: ((anUrlString allButFirst: 6) copyAfter: $/)					user: aUsernameString					password: aPasswordString ]		ifFalse: [ 			MCHttpRepository				location: anUrlString				user: aUsernameString				password: aPasswordString ].	self repository: repository! !!Gofer methodsFor: 'references' stamp: 'lr 12/13/2009 13:25'!version: aString	"Add the version aString to the receiver."	references addLast: (GoferVersionReference name: aString)! !!Gofer methodsFor: 'repositories-places' stamp: 'lr 7/10/2009 16:26'!wiresong: aString	self url: 'http://source.wiresong.ca/' , aString! !!GoferLoad methodsFor: 'private' stamp: 'lr 12/18/2009 12:56'!addResolved: aResolvedReference	| version reference |	version := aResolvedReference version.	(self versions includes: version)		ifTrue: [ ^ self ].	self versions addLast: version.	version dependencies do: [ :dependency |		self addResolved: (GoferResolvedReference			name: dependency versionInfo name			repository: aResolvedReference repository) ]! !!GoferLoad methodsFor: 'private' stamp: 'lr 9/3/2009 11:00'!defaultModel	^ MCVersionLoader new! !!GoferLoad methodsFor: 'running' stamp: 'dkh 10/12/2009 12:56'!execute	self model goferHasVersions		ifTrue: [ self model load ].	self updateRepositories.	self updateCategories! !!GoferLoad methodsFor: 'initialization' stamp: 'TestRunner 12/13/2009 14:49'!initializeOn: aGofer	super initializeOn: aGofer.	aGofer resolved		do: [ :each | self addResolved: each ]		displayingProgress: 'Loading Versions'! !!GoferLoad methodsFor: 'private' stamp: 'lr 12/18/2009 12:55'!updateCategories	"This method makes sure that the categories are ordered in load-order and as specified in the packages."	| categories |	categories := OrderedCollection new.	self versions do: [ :version |		version snapshot definitions do: [ :definition |			definition isOrganizationDefinition ifTrue: [				definition categories do: [ :category |					(categories includes: category)						ifFalse: [ categories addLast: category ] ] ] ] ].	(MCOrganizationDefinition categories: categories)		postloadOver: nil! !!GoferLoad methodsFor: 'private' stamp: 'lr 12/18/2009 12:55'!updateRepositories	"This code makes sure that all packages have a repository assigned, including the dependencies."	self versions do: [ :version |		gofer repositories do: [ :repository | 			version workingCopy repositoryGroup				addRepository: repository ] ]! !!GoferLoad methodsFor: 'accessing' stamp: 'lr 12/18/2009 12:55'!versions	^ model goferVersions! !!GoferOperation class methodsFor: 'instance creation' stamp: 'TestRunner 12/12/2009 11:09'!new	self error: 'Gofer operations can only work on Gofer instances.'! !!GoferOperation class methodsFor: 'instance creation' stamp: 'lr 8/20/2009 12:01'!on: aGofer	^ self basicNew initializeOn: aGofer! !!GoferOperation methodsFor: 'private' stamp: 'lr 8/19/2009 14:01'!defaultModel	^ nil! !!GoferOperation methodsFor: 'running' stamp: 'lr 8/17/2009 14:40'!execute	"Execute the receiving action."	self subclassResponsibility! !!GoferOperation methodsFor: 'accessing' stamp: 'lr 10/3/2009 11:38'!gofer	"Answer the Gofer instance that triggered this operation."	^ gofer! !!GoferOperation methodsFor: 'initialization' stamp: 'lr 8/19/2009 14:01'!initialize	model := self defaultModel! !!GoferOperation methodsFor: 'initialization' stamp: 'TestRunner 12/12/2009 11:09'!initializeOn: aGofer	gofer := aGofer.	self initialize! !!GoferOperation methodsFor: 'accessing' stamp: 'lr 8/20/2009 10:13'!model	"Answer the Monticello model of this operation."		^ model! !!GoferFetch methodsFor: 'private' stamp: 'lr 11/30/2009 13:46'!defaultModel	^ Set new! !!GoferFetch methodsFor: 'running' stamp: 'lr 12/13/2009 17:22'!execute	self model		do: [ :reference | self cacheRepository storeVersion: reference version ]		displayingProgress: 'Fetching Versions'! !!GoferFetch methodsFor: 'initialization' stamp: 'TestRunner 12/13/2009 19:56'!initializeOn: aGofer	super initializeOn: aGofer.	self gofer references do: [ :reference |		self gofer allResolved do: [ :resolved |			((reference matches: resolved) and: [ (cacheReferences includes: resolved) not ])				ifTrue: [ self model add: resolved ] ] ]! !!GoferPush methodsFor: 'private' stamp: 'lr 11/30/2009 13:46'!defaultModel	^ OrderedCollection new! !!GoferPush methodsFor: 'running' stamp: 'lr 12/13/2009 17:23'!execute	self model 		do: [ :assocation | assocation value storeVersion: assocation key version ]		displayingProgress: 'Pushing Versions'! !!GoferPush methodsFor: 'initialization' stamp: 'TestRunner 12/13/2009 20:08'!initializeOn: aGofer	super initializeOn: aGofer.	self gofer references do: [ :reference |		cacheReferences do: [ :resolved |			(reference matches: resolved) ifTrue: [				self gofer repositories do: [ :repository |					((self gofer allResolvedIn: repository) includes: resolved)						ifFalse: [ self model add: resolved -> repository ] ] ] ] ]! !!GoferSynchronize methodsFor: 'accessing' stamp: 'lr 12/12/2009 14:29'!cacheRepository	^ MCCacheRepository default! !!GoferSynchronize methodsFor: 'initialization' stamp: 'TestRunner 12/13/2009 19:54'!initializeOn: aGofer	super initializeOn: aGofer disablePackageCache.	MCFileBasedRepository flushAllCaches.	cacheReferences := self gofer allResolvedIn: self cacheRepository! !!GoferChanges methodsFor: 'private' stamp: 'lr 12/12/2009 12:56'!addReference: aReference	super addReference: aReference.	self model operations 		addAll: (self patchsetOf: aReference) operations! !!GoferChanges methodsFor: 'private' stamp: 'lr 8/19/2009 14:02'!defaultModel	^ MCPatch operations: OrderedCollection new! !!GoferChanges methodsFor: 'running' stamp: 'lr 12/14/2009 23:50'!execute	^ self model! !!GoferChanges methodsFor: 'queries' stamp: 'lr 12/12/2009 13:06'!patchsetOf: aReference	"Answer the source snapshot of aReference."		| source target |	source := self sourceSnapshotOf: aReference.	target := self targetSnapshotOf: aReference.	^ target patchRelativeToBase: source! !!GoferChanges methodsFor: 'queries' stamp: 'lr 12/12/2009 13:00'!sourceSnapshotOf: aReference	"Answer the source snapshot of aReference."		self subclassResponsibility! !!GoferChanges methodsFor: 'queries' stamp: 'lr 12/12/2009 12:59'!targetSnapshotOf: aReference	"Answer the source snapshot of aReference."		self subclassResponsibility! !!GoferBrowseLocalChanges methodsFor: 'running' stamp: 'lr 12/14/2009 23:50'!execute	^ super execute browse! !!GoferLocalChanges methodsFor: 'queries' stamp: 'TestRunner 12/13/2009 18:02'!sourceSnapshotOf: aReference	| ancestors reference |	ancestors := aReference workingCopy ancestry ancestors.	ancestors isEmpty ifTrue: [ ^ MCSnapshot new ].	reference := GoferVersionReference name: ancestors first name.	^ (reference resolveWith: self gofer) version snapshot! !!GoferLocalChanges methodsFor: 'queries' stamp: 'lr 12/12/2009 13:01'!targetSnapshotOf: aReference	^ aReference workingCopy package snapshot! !!GoferBrowseRemoteChanges methodsFor: 'running' stamp: 'lr 12/14/2009 23:50'!execute	^ super execute browse! !!GoferRemoteChanges methodsFor: 'queries' stamp: 'lr 12/12/2009 13:00'!sourceSnapshotOf: aReference	^ aReference workingCopy package snapshot! !!GoferRemoteChanges methodsFor: 'private' stamp: 'TestRunner 12/13/2009 19:27'!targetSnapshotOf: aReference	^ (aReference resolveWith: self gofer) version snapshot! !!GoferCleanup methodsFor: 'cleaning' stamp: 'lr 10/3/2009 11:37'!cleanup: aWorkingCopy	self cleanupCategories: aWorkingCopy.	self cleanupProtocols: aWorkingCopy! !!GoferCleanup methodsFor: 'cleaning' stamp: 'dkh 10/12/2009 12:59'!cleanupCategories: aWorkingCopy	aWorkingCopy packageInfo systemCategories do: [ :category |		(SystemOrganization goferClassesInCategory: category) isEmpty			ifTrue: [ SystemOrganization removeSystemCategory: category ] ]! !!GoferCleanup methodsFor: 'cleaning' stamp: 'lr 10/3/2009 11:37'!cleanupProtocols: aWorkingCopy	aWorkingCopy packageInfo extensionClasses do: [ :class |		(aWorkingCopy packageInfo extensionCategoriesForClass: class) do: [ :category |			(class organization listAtCategoryNamed: category) isEmpty				ifTrue: [ class organization removeCategory: category ] ] ].	aWorkingCopy packageInfo classesAndMetaClasses do: [ :class |		(aWorkingCopy packageInfo coreCategoriesForClass: class) do: [ :category |			(class organization listAtCategoryNamed: category) isEmpty				ifTrue: [ class organization removeCategory: category ] ] ]! !!GoferCleanup methodsFor: 'running' stamp: 'lr 10/3/2009 11:30'!execute	self workingCopies		do: [ :each | self cleanup: each ]! !!GoferCommit methodsFor: 'running' stamp: 'lr 12/13/2009 18:44'!execute	self workingCopies 		do: [ :each | self execute: each ]! !!GoferCommit methodsFor: 'running' stamp: 'lr 12/27/2009 17:21'!execute: aWorkingCopy	| repositories version |	repositories := self gofer repositories		reject: [ :repository | (aWorkingCopy changesRelativeToRepository: repository) isEmpty ].	repositories isEmpty		ifTrue: [ ^ self ].	version := [ aWorkingCopy newVersion ]		on: MCVersionNameAndMessageRequest		do: [ :notifcation |			self message isNil				ifTrue: [ message := notifcation outer last ].			notifcation resume: (Array with: notifcation suggestedName with: self message) ].	self gofer repositories		do: [ :repository | repository storeVersion: version ]! !!GoferCommit methodsFor: 'running' stamp: 'lr 12/13/2009 19:20'!initializeOn: aGofer	super initializeOn: aGofer disablePackageCache! !!GoferCommit methodsFor: 'accessing' stamp: 'lr 10/2/2009 10:12'!message	^ message! !!GoferCommit methodsFor: 'accessing' stamp: 'lr 10/2/2009 10:12'!message: aString	message := aString! !!GoferRecompile methodsFor: 'running' stamp: 'lr 12/13/2009 19:12'!execute	self workingCopies		do: [ :each | self execute: each ]! !!GoferRecompile methodsFor: 'running' stamp: 'lr 12/13/2009 19:12'!execute: aWorkingCopy	aWorkingCopy packageInfo methods		do: [ :each | each actualClass recompile: each methodSymbol ]! !!GoferReinitialize methodsFor: 'running' stamp: 'lr 12/30/2009 11:14'!execute	self workingCopies		do: [ :each | self execute: each ]! !!GoferReinitialize methodsFor: 'running' stamp: 'lr 12/30/2009 11:26'!execute: aWorkingCopy	aWorkingCopy packageInfo methods do: [ :each |		(each classIsMeta and: [ each selector = #initialize ])			ifTrue: [ each actualClass theNonMetaClass initialize ] ]! !!GoferUnload methodsFor: 'private' stamp: 'dkh 12/15/2009 11:35'!defaultModel	^ (Smalltalk at: #MCMultiPackageLoader ifAbsent: [ MCPackageLoader ]) new! !!GoferUnload methodsFor: 'running' stamp: 'lr 10/3/2009 11:45'!execute	self workingCopies 		do: [ :copy | self unload: copy ].	self model load.	self gofer cleanup.	self workingCopies 		do: [ :copy | self unregister: copy ]! !!GoferUnload methodsFor: 'unloading' stamp: 'lr 10/3/2009 11:46'!unload: aWorkingCopy	self unloadClasses: aWorkingCopy.	self unloadPackage: aWorkingCopy! !!GoferUnload methodsFor: 'unloading' stamp: 'lr 12/30/2009 11:27'!unloadClasses: aWorkingCopy	aWorkingCopy packageInfo methods do: [ :each |		(each classIsMeta and: [ each selector = #unload ])			ifTrue: [ each actualClass theNonMetaClass unload ] ]! !!GoferUnload methodsFor: 'unloading' stamp: 'lr 8/19/2009 14:00'!unloadPackage: aWorkingCopy	self model unloadPackage: aWorkingCopy package! !!GoferUnload methodsFor: 'unregistering' stamp: 'lr 8/19/2009 13:49'!unregister: aWorkingCopy	self unregisterWorkingCopy: aWorkingCopy.	self unregisterRepositories: aWorkingCopy.	self unregisterPackageInfo: aWorkingCopy! !!GoferUnload methodsFor: 'unregistering' stamp: 'lr 8/19/2009 13:50'!unregisterPackageInfo: aWorkingCopy	PackageOrganizer default		unregisterPackage: aWorkingCopy packageInfo! !!GoferUnload methodsFor: 'unregistering' stamp: 'lr 8/19/2009 13:50'!unregisterRepositories: aWorkingCopy	aWorkingCopy repositoryGroup repositories allButFirst do: [ :repository |		MCWorkingCopy allManagers do: [ :copy |			(copy repositoryGroup includes: repository)				ifTrue: [ ^ self ] ].		MCRepositoryGroup default			removeRepository: repository ]! !!GoferUnload methodsFor: 'unregistering' stamp: 'lr 8/20/2009 11:54'!unregisterWorkingCopy: aWorkingCopy	aWorkingCopy unregister! !!GoferMerge methodsFor: 'private' stamp: 'lr 8/19/2009 14:01'!defaultModel	^ MCVersionMerger new! !!GoferMerge methodsFor: 'running' stamp: 'lr 10/3/2009 11:39'!execute	[ [ self model merge ]		on: MCMergeResolutionRequest		do: [ :request |			request merger conflicts isEmpty				ifTrue: [ request resume: true ]				ifFalse: [ request pass ] ] ]		valueSupplyingAnswers: #(('No Changes' true)).	self gofer cleanup! !!GoferRevert methodsFor: 'running' stamp: 'lr 9/19/2009 13:15'!execute	self workingCopies		do: [ :each | each modified: false ].	super execute! !!GoferRevert methodsFor: 'private' stamp: 'TestRunner 12/13/2009 18:09'!referenceFor: aReference	| ancestors reference |	ancestors := aReference workingCopy ancestry ancestors.	ancestors isEmpty ifTrue: [ ^ MCSnapshot new ].	^ GoferVersionReference name: ancestors first name! !!GoferUpdate methodsFor: 'private' stamp: 'TestRunner 12/13/2009 18:09'!addReference: aReference	super addReference: aReference.	self model addVersion: ((self referenceFor: aReference)		 resolveWith: self gofer) version! !!GoferUpdate methodsFor: 'private' stamp: 'lr 9/18/2009 18:13'!defaultModel	^ MCVersionLoader new! !!GoferUpdate methodsFor: 'running' stamp: 'dkh 10/12/2009 12:55'!execute	self model goferHasVersions		ifTrue: [ self model load ].	self gofer cleanup! !!GoferUpdate methodsFor: 'private' stamp: 'TestRunner 12/13/2009 18:08'!referenceFor: aReference	^ aReference! !!GoferWorking methodsFor: 'private' stamp: 'lr 12/18/2009 20:56'!addReference: aReference	| workingCopy |	workingCopy := aReference workingCopy.	(self workingCopies includes: workingCopy)		ifTrue: [ ^ self ].	self workingCopies addLast: workingCopy.	workingCopy requiredPackages do: [ :package |		self addReference: (GoferPackageReference			name: package name) ]! !!GoferWorking methodsFor: 'initialization' stamp: 'lr 8/19/2009 13:14'!initialize	super initialize.	workingCopies := OrderedCollection new! !!GoferWorking methodsFor: 'initialization' stamp: 'lr 12/13/2009 19:16'!initializeOn: aGofer	super initializeOn: aGofer.	aGofer references 		do: [ :each | self addReference: each ]! !!GoferWorking methodsFor: 'accessing' stamp: 'lr 9/24/2009 16:55'!workingCopies	"Answer the working copies to be operated on."	^ workingCopies! !!GoferConstraintReference class methodsFor: 'instance creation' stamp: 'lr 12/9/2009 22:44'!name: aString constraint: aBlock	^ self basicNew initializeName: aString constraint: aBlock! !!GoferConstraintReference methodsFor: 'initialization' stamp: 'TestRunner 12/12/2009 00:18'!initializeName: aString constraint: aBlock	self initializeName: aString.	constraintBlock := aBlock! !!GoferConstraintReference methodsFor: 'private' stamp: 'lr 12/11/2009 22:14'!matches: aLoadableReference	^ (super matches: aLoadableReference) and: [ constraintBlock value: aLoadableReference ]! !!GoferPackageReference methodsFor: 'private' stamp: 'lr 12/13/2009 17:10'!matches: aLoadableReference	^ self packageName = aLoadableReference packageName! !!GoferPackageReference methodsFor: 'accessing' stamp: 'lr 12/13/2009 17:12'!packageName	^ name! !!GoferReference class methodsFor: 'instance creation' stamp: 'lr 12/9/2009 22:42'!name: aString	^ self basicNew initializeName: aString! !!GoferReference class methodsFor: 'instance creation' stamp: 'lr 12/9/2009 22:42'!new	self error: 'Use #name: to initialize the receiver.'! !!GoferReference methodsFor: 'comparing' stamp: 'lr 12/12/2009 13:33'!= aReference	^ self class = aReference class and: [ self name = aReference name ]! !!GoferReference methodsFor: 'comparing' stamp: 'lr 12/12/2009 13:33'!hash	^ self name hash! !!GoferReference methodsFor: 'initialization' stamp: 'lr 12/9/2009 22:57'!initializeName: aString	name := aString! !!GoferReference methodsFor: 'private' stamp: 'lr 12/11/2009 22:13'!matches: aLoadableReference	"Answer true if the receiver matches aLoadableReference."	self subclassResponsibility! !!GoferReference methodsFor: 'accessing' stamp: 'lr 12/11/2009 22:02'!name	"Answer the name of this reference."		^ name! !!GoferReference methodsFor: 'accessing' stamp: 'lr 12/13/2009 17:09'!packageName	"Answer the package name."		self subclassResponsibility! !!GoferReference methodsFor: 'printing' stamp: 'lr 12/11/2009 22:02'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' name: '; print: self name! !!GoferReference methodsFor: 'querying' stamp: 'lr 12/13/2009 17:20'!resolveAllWith: aGofer	"Answer a sorted collection of all resolved references within aGofer."	^ aGofer allResolved select: [ :each | self matches: each ]! !!GoferReference methodsFor: 'querying' stamp: 'lr 12/13/2009 17:20'!resolveWith: aGofer	"Answer a single resolved reference with aGofer configuration, throw an error if the version can't be found.'"	| references |	references := self resolveAllWith: aGofer.	^ references isEmpty		ifTrue: [ self error: 'Unable to resolve ' , self name ]		ifFalse: [ references last ]! !!GoferReference methodsFor: 'querying' stamp: 'lr 12/13/2009 17:10'!workingCopy	"Answer a working copy or throw an error if not present."	^ MCWorkingCopy allManagers		detect: [ :each | self packageName = each packageName ]		ifNone: [ self error: 'Working copy for ' , self name , ' not found' ]! !!GoferResolvedReference class methodsFor: 'instance creation' stamp: 'lr 12/9/2009 22:55'!name: aString repository: aRepository	^ self basicNew initializeName: aString repository: aRepository! !!GoferResolvedReference methodsFor: 'comparing' stamp: 'lr 12/13/2009 17:22'!<= aLoadableReference	"Sort versions according to:		1. package name		2. branch name, list versions without branch last		3. version number		4. author name		5. repository priority"		self packageName = aLoadableReference packageName		ifFalse: [ ^ self packageName <= aLoadableReference packageName ].	self branch = aLoadableReference branch ifFalse: [ 		^ (self branch isEmpty or: [ aLoadableReference branch isEmpty ])			ifTrue: [ self branch size > aLoadableReference branch size ]			ifFalse: [ self branch <= aLoadableReference branch ] ].	self versionNumber = aLoadableReference versionNumber		ifFalse: [ ^ self versionNumber <= aLoadableReference versionNumber ].	self author = aLoadableReference author		ifFalse: [ ^ self author <= aLoadableReference author ].	self repository goferPriority = aLoadableReference repository goferPriority		ifFalse: [ ^ self repository goferPriority > aLoadableReference repository goferPriority ].	^ true! !!GoferResolvedReference methodsFor: 'initialization' stamp: 'lr 12/9/2009 22:55'!initializeName: aString repository: aRepository	self initializeName: aString.	repository := aRepository! !!GoferResolvedReference methodsFor: 'accessing' stamp: 'lr 12/11/2009 22:33'!repository	"Answer the repository of the receiver."		^ repository! !!GoferResolvedReference methodsFor: 'accessing' stamp: 'lr 12/13/2009 17:22'!version	"Answer a Monticello version of the receiver."	^ self repository goferVersionFrom: self! !!GoferVersionReference methodsFor: 'accessing' stamp: 'lr 12/11/2009 22:22'!author	"Answer the author of the receiver."		^ author! !!GoferVersionReference methodsFor: 'accessing' stamp: 'lr 12/11/2009 22:23'!branch	"Answer the branch of the receiver."		^ branch! !!GoferVersionReference methodsFor: 'initialization' stamp: 'lr 12/11/2009 22:17'!initializeName: aString	super initializeName: aString.	self parseName: aString! !!GoferVersionReference methodsFor: 'private' stamp: 'lr 12/11/2009 22:14'!matches: aLoadableReference	^ self name = aLoadableReference name! !!GoferVersionReference methodsFor: 'accessing' stamp: 'lr 12/13/2009 17:12'!packageName	"Answer the package of the receiver."	^ package! !!GoferVersionReference methodsFor: 'initialization' stamp: 'lr 12/13/2009 17:20'!parseName: aString	| basicName |	basicName := aString last isDigit		ifTrue: [ aString ]		ifFalse: [ (aString copyUpToLast: $.) copyUpTo: $( ].	package := basicName copyUpToLast: $-.	author := (basicName copyAfterLast: $-) copyUpTo: $..	versionNumber := (basicName copyAfterLast: $-) copyAfter: $..	versionNumber isEmpty 		ifTrue: [ 			branch := ''.			versionNumber := 0 ]		ifFalse: [ 			(versionNumber allSatisfy: [ :each | each isDigit ]) 				ifTrue: [					branch := ''.					versionNumber := versionNumber asInteger ]				ifFalse: [					branch := versionNumber copyUpToLast: $..					versionNumber := (versionNumber copyAfterLast: $.) asInteger ] ]! !!GoferVersionReference methodsFor: 'accessing' stamp: 'lr 12/13/2009 17:20'!versionNumber	"Answer the version of the receiver."	^ versionNumber! !!MCDirectoryRepository methodsFor: '*gofer-core-accessing' stamp: 'lr 12/11/2009 22:32'!goferPriority	^ 5! !!SystemOrganizer methodsFor: '*gofer-core-accessing' stamp: 'lr 12/3/2009 21:04'!goferClassesInCategory: category		^ (self listAtCategoryNamed: category) collect: [ :className | Smalltalk at: className ]! !"Gofer-Core"!!ConfigurationOfMetacello class methodsFor: 'deprecated' stamp: 'DaleHenrichs 6/14/2010 13:04'!alternateEnsureMetacello	"Use this method if the primary repository 'http://seaside.gemstone.com/ss/metacello' is inaccessible.	 Secondary repository is valid for loading versions 1.0-beta.26 and later. "	self deprecated: 'current version of #ensureMetacello automatically tries to load using alternate repository'.	Smalltalk at: #MetacelloProject  ifAbsent: [  		self ensureGoferVersion: 'Gofer-Core-lr.115'.		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer version repo |			gofer := goferClass new				url: 'http://www.squeaksource.com/metacello';				version: 'Metacello-Core-DaleHenrichs.348';				version: 'Metacello-MC-DaleHenrichs.332';				yourself.			Smalltalk at: #SystemVersion ifPresent: [:cl | | versionString  |				versionString := cl current version.				(versionString beginsWith: 'Squeak3')					ifTrue: [ gofer version: 'Metacello-Platform.squeak-dkh.5']].			gofer load.			"now load minimal installation from alternate repository"			version := self project latestVersion.			repo := MCHttpRepository 				location: 'http://www.squeaksource.com/metacello' 				user: '' 				password: ''.			(version repositoryOverrides: (Array with: (repo))) load ]]! !!ConfigurationOfMetacello class methodsFor: 'metacello release process' stamp: 'DaleHenrichs 5/21/2010 16:22'!backupToSqueakSource	"In order for username and password to be set correctly, you must already have the metacello repository	 set up"	| cacheRepository version |	cacheRepository := MCHttpRepository location: 'http://www.squeaksource.com/metacello' user: '' password: ''.	"need to pick up existing repository with user and password set"	cacheRepository := MCRepositoryGroup default repositories		detect: [ :each | each = cacheRepository ]		ifNone: [ cacheRepository ].	version := self project latestVersion.	(version record: 'ALL') loadDirective		versionDirectivesDo: [ :versionDirective | 			| p pClass |			versionDirective spec ~~ nil				ifTrue: [ 					p := versionDirective spec project.					pClass := p configuration class.	"save packages for Gofer and Metacello only"					(pClass == (Smalltalk at: #ConfigurationOfGofer) or: [ pClass == self ])						ifTrue: [ 							| policy |							policy := ((Smalltalk at: #MetacelloLoaderPolicy) new)								cacheRepository: cacheRepository;								ignoreImage: true;								yourself.	"fetch Gofer or Metacello configuration"							p fetchProject: policy.							versionDirective								packagesDo: [ :packageDirective | 									"skip nested configurations"									(packageDirective spec name beginsWith: 'ConfigurationOf')										ifFalse: [ 											"fetch mcz file"											packageDirective spec fetchPackage: policy ] ] ] ] ]					! !!ConfigurationOfMetacello class methodsFor: 'private' stamp: 'DaleHenrichs 6/15/2010 12:23'!bootstrapMetacelloFrom: repositoryUrl	"Corresponds to version 1.0-beta.27"	self ensureGoferVersion: 'Gofer-Core-lr.115' repositoryUrl: repositoryUrl.	Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |		gofer := goferClass new			url: repositoryUrl;			version: 'Metacello-Core-DaleHenrichs.363';			version: 'Metacello-MC-DaleHenrichs.415';			yourself.		Smalltalk at: #SystemVersion ifPresent: [:cl | | versionString |			versionString := cl current version.			(versionString beginsWith: 'Squeak3')				ifTrue: [ gofer version: 'Metacello-Platform.squeak-dkh.5']].		gofer load ]! !!ConfigurationOfMetacello class methodsFor: 'private' stamp: 'dkh 10/31/2009 13:44'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfMetacello class methodsFor: 'metacello release process' stamp: 'DaleHenrichs 5/21/2010 16:23'!copyConfigToRepos	"In order for username and password to be set correctly, you must already have the MetacelloRepository	 (on GemSource) repository set up"	| targetRepository1 targetRepository2 gofer version |	targetRepository1 := MCHttpRepository location: 'http://www.squeaksource.com/MetacelloRepository' user: '' password: ''.	targetRepository2 := MCHttpRepository location: 'http://seaside.gemstone.com/ss/MetacelloRepository' user: '' password: ''.	"need to pick up existing repository with user and password set"	targetRepository2 := MCRepositoryGroup default repositories		detect: [ :each | each = targetRepository2 ]		ifNone: [ targetRepository2 ].	gofer := (Smalltalk at: #Gofer) new		gemsource: 'metacello';		package: 'ConfigurationOfMetacello'.	version := gofer resolved first version.	(Array with: targetRepository1 with: targetRepository2) do: [:repo | repo storeVersion: version ]! !!ConfigurationOfMetacello class methodsFor: 'deprecated' stamp: 'DaleHenrichs 6/14/2010 13:03'!ensureGoferVersion: goferVersion	"load the p=file goferVersion if Gofer isn't loaded or an earlier version of Gofer is currently loaded"		 | goferVersionNumber goferRepository wc pName |	self deprecated: 'Use #ensureGoferVersion:repositoryUrl: instead ... '.	goferRepository := 'http://seaside.gemstone.com/ss/metacello'.	(Smalltalk at: #Gofer ifAbsent: []) == nil		ifTrue: [ ^self bootstrapPackage: goferVersion from: goferRepository ].	goferVersionNumber := (goferVersion copyAfterLast: $.) asNumber.	wc := [ ((Smalltalk at: #GoferPackageReference) name: 'Gofer') workingCopy ]			on: Error			do: [:ex | ex return: ((Smalltalk at: #GoferPackageReference) name: 'Gofer-Core') workingCopy ].	pName := wc ancestry ancestors first name.	(pName copyAfterLast: $.) asNumber <= goferVersionNumber		ifTrue: [ self bootstrapPackage: goferVersion from: goferRepository ]! !!ConfigurationOfMetacello class methodsFor: 'private' stamp: 'DaleHenrichs 6/14/2010 11:49'!ensureGoferVersion: goferVersion repositoryUrl: repositoryUrl	"load the p=file goferVersion if Gofer isn't loaded or an earlier version of Gofer is currently loaded"		 | goferVersionNumber wc pName |	(Smalltalk at: #Gofer ifAbsent: []) == nil		ifTrue: [ ^self bootstrapPackage: goferVersion from: repositoryUrl ].	goferVersionNumber := (goferVersion copyAfterLast: $.) asNumber.	wc := [ ((Smalltalk at: #GoferPackageReference) name: 'Gofer') workingCopy ]			on: Error			do: [:ex | ex return: ((Smalltalk at: #GoferPackageReference) name: 'Gofer-Core') workingCopy ].	pName := wc ancestry ancestors first name.	(pName copyAfterLast: $.) asNumber <= goferVersionNumber		ifTrue: [ self bootstrapPackage: goferVersion from: repositoryUrl ]! !!ConfigurationOfMetacello class methodsFor: 'private' stamp: 'DaleHenrichs 6/14/2010 13:10'!ensureMetacello	"Bootstrap Metacello, retry using alternate repository, if primary repository is not accessible"		Smalltalk		at: #MetacelloProject		ifAbsent: [ 			| retry version error |			retry := false.			(Array with: 'http://seaside.gemstone.com/ss/metacello' with: 'http://www.squeaksource.com/metacello')				do: [ :repositoryUrl | 					[ 					"bootstrap Metacello"					self bootstrapMetacelloFrom: repositoryUrl.						"load latest version of Metacello"					version := self project latestVersion.					retry						ifTrue: [ 							"on retry, use #repositoryOverrides:"							version repositoryOverrides: (Array with: (MCHttpRepository location: repositoryUrl user: '' password: '')) ].					version load.					^ self ]						on: Error						do: [ :ex | 							error := ex.							Transcript 								cr; 								show: 'failed ensureMetacello: ';								show: ex description printString;								show: '...retrying'.							"try again"							retry := true.							ex return: nil ]].				"shouldn't get here unless the load failed ... throw an error"				self error: 'retry with alternate repository failed: ', error description printString. ]! !!ConfigurationOfMetacello class methodsFor: 'deprecated' stamp: 'dkh 12/29/2009 15:48'!ensureMetacello18	"Special method no longer needed"	self deprecated: 'It is no longer necessary to use #ensureMetacello18. The standard bootstrapping procedure is working correctly.'.	self ensureMetacello! !!ConfigurationOfMetacello class methodsFor: 'metacello tool support' stamp: 'dkh 10/31/2009 13:44'!isMetacelloConfig	^true! !!ConfigurationOfMetacello class methodsFor: 'metacello tool support' stamp: 'dkh 11/03/2009 11:04'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfMetacello class methodsFor: 'loading' stamp: 'dkh 1/2/2010 13:51'!load	"Load a minimum installation of Metacello"	"self load"	^self project latestVersion load! !!ConfigurationOfMetacello class methodsFor: 'loading' stamp: 'dkh 1/7/2010 14:35'!loadLatestPackages	"self loadLatestPackages"	| project |	project := self project.	^(project latestVersion: #baseline) load: #( 'default' 'Metacello-Tutorial')! !!ConfigurationOfMetacello class methodsFor: 'loading' stamp: 'DaleHenrichs 3/24/2010 15:29'!loadLatestVersion	"self loadLatestVersion"	self project updateProject.	^self project latestVersion load! !!ConfigurationOfMetacello class methodsFor: 'metacello tool support' stamp: 'dkh 11/3/2009 10:16'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfMetacello class methodsFor: 'deprecated' stamp: 'DaleHenrichs 6/14/2010 13:07'!oldEnsureMetacello	"original implementation of ensureMetacello, just in case problems surface."	self deprecated: 'use #ensureMetacello instead'.	Smalltalk at: #MetacelloProject  ifAbsent: [  		self ensureGoferVersion: 'Gofer-Core-lr.115'.		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				version: 'Metacello-Core-DaleHenrichs.348';				version: 'Metacello-MC-DaleHenrichs.332';				yourself.			Smalltalk at: #SystemVersion ifPresent: [:cl | | versionString |				versionString := cl current version.				(versionString beginsWith: 'Squeak3')					ifTrue: [ gofer version: 'Metacello-Platform.squeak-dkh.5']].			gofer load.			"now load minimal installation"			self load ]]! !!ConfigurationOfMetacello class methodsFor: 'accessing' stamp: 'dkh 10/31/2009 13:44'!project	^self new project! !!ConfigurationOfMetacello class methodsFor: 'metacello release process' stamp: 'DaleHenrichs 5/12/2010 12:12'!releaseMetacelloVersion	"self releaseMetacelloVersion"		self 		copyConfigToRepos;		backupToSqueakSource;		yourself! !!ConfigurationOfMetacello class methodsFor: 'unloading' stamp: 'DaleHenrichs 2/8/2010 14:55'!unloadMetacello	| gofer |	gofer := Gofer new.	MCWorkingCopy allManagers do: [:wc |		((wc packageName beginsWith: 'Metacello') or: [ wc packageName beginsWith: 'OB-Metacello' ])			ifTrue: [ gofer package: wc packageName ]].	gofer unload.! !!ConfigurationOfMetacello methodsFor: 'baselines' stamp: 'dkh 11/05/2009 11:26'!baseline10beta00: spec 	<version: '1.0-beta.0-baseline'>		spec for: #common do: [		spec blessing: #baseline.		spec description: 'Default configuration ... loads latest versions of all packages'.		spec repository: 'http://seaside.gemstone.com/ss/metacello'.		spec 			package: 'Gofer' with: [				spec repository: 'http://source.lukas-renggli.ch/flair' ];			package: 'Metacello-Core' with: [				spec includes: #('Metacello-MC' 'Metacello-Platform') ];			package: 'Metacello-MC' with: [				spec requires: #('Gofer') ];			package: 'Metacello-Platform' with: [				spec requires: #('Metacello-MC') ];			package: 'Metacello-ConfigTests' with: [				spec requires: #('Metacello-MC') ];			package: 'Metacello-Reference' with: [				spec requires: #('Metacello-MC') ];			package: 'Metacello-ReferenceTests' with: [				spec requires: #('Metacello-Reference') ];			package: 'OB-Metacello' with: [				spec requires: #('Metacello-Platform') ].		spec			group: 'default' with: #('Metacello-Core' 'Metacello-Reference');			group: 'UI' with: #('Metacello-Core' 'OB-Metacello'); 			group: 'Tests' with: #('Metacello-ConfigTests' 'Metacello-ReferenceTests') ].	spec for: #gemstone do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone'].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo'].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak' ].! !!ConfigurationOfMetacello methodsFor: 'baselines' stamp: 'DaleHenrichs 2/5/2010 21:28'!baseline10beta03: spec 	<version: '1.0-beta.3-baseline' imports: #('1.0-beta.0-baseline')>		spec for: #common do: [		spec blessing: #baseline.		spec description: 'Extensions to 1.0-beta.0-baseline: - ''default'' group is just the core ... class-side loaders load ''ALL'' by default- pull in some old tests that still apply- combine Metacello-ConfigTests into Metacello-TestsMC- rename Metacello-ReferenceTests to Metacello-TestsReference- recast tutorial to new API- add Samples group (Metacello-Configuration [duh] and Seaside-Metacello-Configuration'.		spec 			package: 'Metacello-Tutorial' with: [				spec requires:  #('Metacello-Core'). ];			package: 'Metacello-TestsCore' with: [				spec requires:  #('Metacello-Core'). ];			package: 'Metacello-TestsMC' with: [				spec requires:  #('Metacello-Core'). ];			package: 'Metacello-TestsReference' with: [				spec requires: #('Metacello-Reference') ];			package: 'Metacello-TestsTutorial' with: [				spec requires:  #('Metacello-Tutorial'). ];			removePackage: 'Metacello-ConfigTests';			removePackage: 'Metacello-ReferenceTests';			"SAMPLE"			package: 'ConfigurationOfMetacello' with: [				spec repository: 'http://seaside.gemstone.com/ss/metacello' ];			"SAMPLE"			package: 'Seaside-Metacello-Configuration' with: [				spec repository: 'http://seaside.gemstone.com/ss/Seaside30' ].		spec			group: 'default' overrides: #('Metacello-Core');			group: 'Samples' with: #('ConfigurationOfMetacello' 'Seaside-Metacello-Configuration');			group: 'Tests' overrides: 				#('Metacello-TestsCore' 'Metacello-TestsTutorial' 'Metacello-TestsMC'				  'Metacello-TestsReference'). ].! !!ConfigurationOfMetacello methodsFor: 'baselines' stamp: 'dkh 11/05/2009 11:26'!baseline10beta05: spec 	<version: '1.0-beta.5-baseline' imports: #('1.0-beta.3-baseline')>		spec for: #common do: [		spec blessing: #baseline.		spec description: 'Extensions to 1.0-beta.3-baseline: - Samples group includes Seaside-Metacello-Configuration and GemTools-Configuraton (Metacello-Configuration should not be included ... it is always present)'.		spec 			package: 'GemTools-Configuraton' with: [				spec repository: 'http://seaside.gemstone.com/ss/GLASSClient' ];			removePackage: 'ConfigurationOfMetacello'.		spec			group: 'Samples' overrides: 				#('Seaside-Metacello-Configuration' 'GemTools-Configuraton' ) ].! !!ConfigurationOfMetacello methodsFor: 'baselines' stamp: 'dkh 10/31/2009 21:16'!baseline10beta11: spec 	<version: '1.0-beta.11-baseline' imports: #('1.0-beta.3-baseline')>		spec for: #common do: [		spec blessing: #baseline.		spec description: 'Removing Samples completely... Confusing I think'.		spec 			removePackage: 'Seaside-Metacello-Configuration';			removePackage: 'GemTools-Configuraton';			removePackage: 'ConfigurationOfMetacello'.		spec			removeGroup: 'Samples'].! !!ConfigurationOfMetacello methodsFor: 'baselines' stamp: 'dkh 11/05/2009 11:35'!baseline10beta13: spec 	<version: '1.0-beta.13-baseline' imports: #('1.0-beta.11-baseline')>		spec for: #common do: [		spec blessing: #baseline.		spec description: 'fix Metacello-MC dependency'.		spec 			package: 'OB-Metacello' with: [				spec requires: #('Metacello-Platform' 'Metacello-Core') ];			yourself].! !!ConfigurationOfMetacello methodsFor: 'baselines' stamp: 'dkh 11/10/2009 10:15'!baseline10beta14: spec 	<version: '1.0-beta.14-baseline' imports: #('1.0-beta.13-baseline')>		spec for: #common do: [		spec blessing: #baseline.		spec description: 'switch gofer repositories'.		spec 			package: 'Gofer' with: [				spec repository: 'http://source.lukas-renggli.ch/gofer' ];			yourself].! !!ConfigurationOfMetacello methodsFor: 'baselines' stamp: 'dkh 12/01/2009 16:07'!baseline10beta16: spec 	<version: '1.0-beta.16-baseline' imports: #('1.0-beta.14-baseline')>		spec for: #common do: [		spec blessing: #baseline.		spec description: 'switch gofer repositories again ... use copy in Metacello going forward'.		spec 			package: 'Gofer' with: [				spec repository: 'http://seaside.gemstone.com/ss/metacello' ];			yourself].! !!ConfigurationOfMetacello methodsFor: 'baselines' stamp: 'dkh 12/8/2009 12:12'!baseline10beta17: spec 	<version: '1.0-beta.17-baseline' imports: #('1.0-beta.16-baseline')>		spec for: #squeakCommon do: [		spec 			package: 'Metacello-TestsPlatform' with: [				spec					requires: #('Metacello-Platform');					file: 'Metacello-TestsPlatform.squeakCommon'];			yourself.		spec			group: 'Tests' with: #('Metacello-TestsPlatform')].		! !!ConfigurationOfMetacello methodsFor: 'baselines' stamp: 'dkh 01/06/2010 11:35'!baseline10beta18: spec 	<version: '1.0-beta.18-baseline' imports: #('1.0-beta.17-baseline')>		spec for: #gemstone do: [		spec			project: 'Monticello' with: [				spec					className: 'ConfigurationOfGsMonticello';					file: 'ConfigurationOfGsMonticello';					repository: 'http://seaside.gemstone.com/ss/monticello' ];			yourself.		spec 			package: 'Gofer' with: [				spec requires: #('Monticello')];			yourself. ].		! !!ConfigurationOfMetacello methodsFor: 'baselines' stamp: 'dkh 1/6/2010 20:03'!baseline10beta19: spec 	<version: '1.0-beta.19-baseline' imports: #('1.0-beta.18-baseline')>	spec for: #'Gofer-Core' do: [		spec			removePackage: 'Gofer';			package: 'Gofer-Core'  with: [				spec repository: 'http://www.squeaksource.com/Pharo' ];			package: 'Gofer-Tests'  with: [				spec repository: 'http://www.squeaksource.com/Pharo' ];			package: 'Metacello-MC' overrides: [				spec requires: #('Gofer-Core') ];			package: 'Metacello-TestsMC' with: [				spec requires: #('Gofer-Tests') ];			yourself ].! !!ConfigurationOfMetacello methodsFor: 'baselines' stamp: 'DaleHenrichs 1/18/2010 12:04'!baseline10beta21: spec 	<version: '1.0-beta.21-baseline' imports: #('1.0-beta.19-baseline')>	spec for: #'Gofer-Core' do: [		spec			removePackage: 'Gofer';			package: 'Gofer-Core'  overrides: [				spec repository: 'http://seaside.gemstone.com/ss/metacello' ];			package: 'Gofer-Tests'  overrides: [				spec 					requires: 'Gofer-Core' ;					repository: 'http://seaside.gemstone.com/ss/metacello' ];			yourself ].! !!ConfigurationOfMetacello methodsFor: 'baselines' stamp: 'DaleHenrichs 03/12/2010 01:06'!baseline10beta22: spec	<version: '1.0-beta.22-baseline'>	spec for: #common do: [		spec blessing: #baseline.		spec repository: 'http://seaside.gemstone.com/ss/metacello'.		spec			project: 'Gofer Core' with: [				spec					className: 'ConfigurationOfGofer';					versionString: '1.0-baseline';					loads: #('Core' );					file: 'ConfigurationOfGofer';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			project: 'Gofer Tests' copyFrom: 'Gofer Core' with: [				spec loads: #('Tests' ) ];			yourself.		spec 			package: 'Metacello-Core' with: [				spec includes: #('Metacello-MC' 'Metacello-Platform' ). ];			package: 'Metacello-MC' with: [				spec requires: #('Metacello-Core' 'Gofer Core' ). ];			package: 'Metacello-Platform' with: [				spec requires: #('Metacello-MC' ). ];			package: 'Metacello-Reference' with: [				spec requires: #('Metacello-MC' ). ];			package: 'Metacello-Tutorial' with: [				spec requires: #('Metacello-Core' ). ];			package: 'Metacello-TestsCore' with: [				spec requires: #('Metacello-Core' ). ];			package: 'Metacello-TestsMC' with: [				spec requires: #('Metacello-MC' 'Gofer Tests' ). ];			package: 'Metacello-TestsReference' with: [				spec requires: #('Metacello-Reference' ). ];			package: 'Metacello-TestsTutorial' with: [				spec requires: #('Metacello-Tutorial' ). ];			package: 'OB-Metacello' with: [				spec requires: #('Metacello-Platform' 'Metacello-Core' ). ];			yourself.		spec 			group: 'default' with: #('Metacello-Core' );			group: 'Tutorial' with: #('Metacello-Tutorial' 'Metacello-Reference' );			group: 'UI' with: #('OB-Metacello' );			group: 'Tests' overrides: #('Metacello-TestsCore' 'Metacello-TestsTutorial' 'Metacello-TestsMC' 'Metacello-TestsReference' );			yourself.].	spec for: #squeakCommon do: [		spec			project: 'OB' with: [				spec					className: 'ConfigurationOfOmniBrowser';					versionString: '1.1-baseline';					loads: #('Core' );					file: 'ConfigurationOfOmniBrowser';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			yourself.		spec			package: 'Metacello-TestsPlatform' with: [				spec 					requires: #('Metacello-Platform' );					file: 'Metacello-TestsPlatform.squeakCommon'. ];			package: 'OB-Metacello' with: [				spec requires: #('OB' ). ];			yourself.		spec			group: 'Tests' with: #('Metacello-TestsPlatform' );			yourself.].	spec for: #pharo do: [		spec 			project: 'ProfStef' with: [				spec					className: 'ConfigurationOfProfStef';					versionString: '1.0-baseline';					file: 'ConfigurationOfProfStef';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			yourself.		spec			package: 'Metacello-ProfStef' with: [				spec requires: #('Metacello-Core' 'ProfStef' ). ];			package: 'Metacello-Platform' with: 'Metacello-Platform.pharo';			yourself.		spec			group: 'Tutorial' with: #('Metacello-ProfStef');			yourself.].	spec for: #squeak do: [		spec			package: 'Metacello-Platform' with: 'Metacello-Platform.squeak';			yourself.].	spec for: #gemstone do: [		spec			project: 'Monticello' with: [				spec					className: 'ConfigurationOfGsMonticello';					file: 'ConfigurationOfGsMonticello';					repository: 'http://seaside.gemstone.com/ss/monticello' ];			yourself.		spec 			package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone';			yourself. ].! !!ConfigurationOfMetacello methodsFor: 'baselines' stamp: 'DaleHenrichs 3/22/2010 10:18'!baseline10beta25: spec	<version: '1.0-beta.25-baseline'>	spec for: #common do: [		spec blessing: #baseline.		spec repository: 'http://seaside.gemstone.com/ss/metacello'.		spec			project: 'Gofer Core' with: [				spec					className: 'ConfigurationOfGofer';					versionString: '1.0-baseline';					loads: #('Core' );					file: 'ConfigurationOfGofer';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			project: 'Gofer Tests' copyFrom: 'Gofer Core' with: [				spec loads: #('Tests' ) ];			yourself.		spec 			package: 'Metacello-Core' with: [				spec includes: #('Metacello-MC' 'Metacello-Platform' ). ];			package: 'Metacello-MC' with: [				spec requires: #('Metacello-Core' 'Gofer Core' ). ];			package: 'Metacello-Platform' with: [				spec requires: #('Metacello-MC' ). ];			package: 'Metacello-Reference' with: [				spec requires: #('Metacello-MC' ). ];			package: 'Metacello-Tutorial' with: [				spec requires: #('Metacello-Core' ). ];			package: 'Metacello-TestsCore' with: [				spec requires: #('Metacello-Core' ). ];			package: 'Metacello-TestsMC' with: [				spec 					postLoadDoIt: #testsMC10beta25PostLoadDoIt;					requires: #('Metacello-MC' 'Gofer Tests' ). ];			package: 'Metacello-TestsReference' with: [				spec requires: #('Metacello-Reference' ). ];			package: 'Metacello-TestsTutorial' with: [				spec requires: #('Metacello-Tutorial' ). ];			package: 'OB-Metacello' with: [				spec requires: #('Metacello-Platform' 'Metacello-Core' ). ];			yourself.		spec 			group: 'default' with: #('Metacello-Core' );			group: 'Tutorial' with: #('Metacello-Tutorial' 'Metacello-Reference' );			group: 'UI' with: #('OB-Metacello' );			group: 'Tests' overrides: #('Metacello-TestsCore' 'Metacello-TestsTutorial' 'Metacello-TestsMC' 'Metacello-TestsReference' );			yourself.].	spec for: #squeakCommon do: [		spec			project: 'OB' with: [				spec					className: 'ConfigurationOfOmniBrowser';					versionString: '1.1-baseline';					loads: #('Core' );					file: 'ConfigurationOfOmniBrowser';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			yourself.		spec			package: 'Metacello-TestsPlatform' with: [				spec 					requires: #('Metacello-Platform' );					file: 'Metacello-TestsPlatform.squeakCommon'. ];			package: 'OB-Metacello' with: [				spec requires: #('OB' ). ];			yourself.		spec			group: 'Tests' with: #('Metacello-TestsPlatform' );			yourself.].	spec for: #pharo do: [		spec 			project: 'ProfStef' with: [				spec					className: 'ConfigurationOfProfStef';					versionString: '1.0-baseline';					file: 'ConfigurationOfProfStef';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			yourself.		spec			package: 'Metacello-ProfStef' with: [				spec requires: #('Metacello-Core' 'ProfStef' ). ];			package: 'Metacello-Platform' with: 'Metacello-Platform.pharo';			yourself.		spec			group: 'Tutorial' with: #('Metacello-ProfStef');			yourself.].	spec for: #squeak do: [		spec			package: 'Metacello-Platform' with: 'Metacello-Platform.squeak';			yourself.].	spec for: #gemstone do: [		spec			project: 'Monticello' with: [				spec					className: 'ConfigurationOfGsMonticello';					file: 'ConfigurationOfGsMonticello';					repository: 'http://seaside.gemstone.com/ss/monticello' ];			yourself.		spec 			package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone';			package: 'Metacello-TestsPlatform' with: [				spec 					requires: #('Metacello-Platform' );					file: 'Metacello-TestsPlatform.gemstone'. ];			yourself.		spec			group: 'Tests' with: #('Metacello-TestsPlatform' );			yourself. ].! !!ConfigurationOfMetacello methodsFor: 'baselines' stamp: 'DaleHenrichs 6/15/2010 10:43'!baseline10beta27: spec	<version: '1.0-beta.27-baseline'>	spec for: #common do: [		spec blessing: #baseline.		spec repository: 'http://seaside.gemstone.com/ss/metacello'.		spec repository: 'http://www.squeaksource.com/metacello'.		spec			project: 'Gofer Core' with: [				spec					className: 'ConfigurationOfGofer';					versionString: '1.0-baseline';					loads: #('Core' );					file: 'ConfigurationOfGofer';					repository: 'http://www.squeaksource.com/MetacelloRepository';					repository: 'http://seaside.gemstone.com/ss/metacello'. ];			project: 'Gofer Tests' copyFrom: 'Gofer Core' with: [				spec loads: #('Tests' ) ];			yourself.		spec 			package: 'Metacello-Core' with: [				spec includes: #('Metacello-MC' 'Metacello-Platform' ). ];			package: 'Metacello-MC' with: [				spec requires: #('Metacello-Core' 'Gofer Core' ). ];			package: 'Metacello-Platform' with: [				spec requires: #('Metacello-MC' ). ];			package: 'Metacello-Reference' with: [				spec requires: #('Metacello-MC' ). ];			package: 'Metacello-Tutorial' with: [				spec requires: #('Metacello-Core' ). ];			package: 'Metacello-TestsCore' with: [				spec requires: #('Metacello-Core' ). ];			package: 'Metacello-TestsMC' with: [				spec 					postLoadDoIt: #testsMC10beta25PostLoadDoIt;					requires: #('Metacello-MC' 'Gofer Tests' ). ];			package: 'Metacello-TestsReference' with: [				spec requires: #('Metacello-Reference' ). ];			package: 'Metacello-TestsTutorial' with: [				spec requires: #('Metacello-Tutorial' ). ];			package: 'OB-Metacello' with: [				spec requires: #('Metacello-Platform' 'Metacello-Core' ). ];			yourself.		spec 			group: 'default' with: #('Metacello-Core' );			group: 'Tutorial' with: #('Metacello-Tutorial' 'Metacello-Reference' );			group: 'UI' with: #('OB-Metacello' );			group: 'Tests' overrides: #('Metacello-TestsCore' 'Metacello-TestsTutorial' 'Metacello-TestsMC' 'Metacello-TestsReference' );			yourself.].	spec for: #squeakCommon do: [		spec			project: 'Help System' with: [				spec					className: 'ConfigurationOfHelpSystem';					versionString: '1.0-baseline';					loads: #('Core' );					file: 'ConfigurationOfHelpSystem';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			project: 'OB' with: [				spec					className: 'ConfigurationOfOmniBrowser';					versionString: '1.1-baseline';					loads: #('Core' );					file: 'ConfigurationOfOmniBrowser';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			yourself.		spec			package: 'Metacello-TestsPlatform' with: [				spec 					requires: #('Metacello-Platform' );					file: 'Metacello-TestsPlatform.squeakCommon'. ];			package: 'Metacello-Help' with: [				spec requires: 'Help System'. ];			package: 'OB-Metacello' with: [				spec requires: #('OB' ). ];			yourself.		spec			group: 'Tests' with: #('Metacello-TestsPlatform' );			group: 'Tutorial' with: #('Metacello-Help' );			yourself.].	spec for: #pharo do: [		spec 			project: 'ProfStef' with: [				spec					className: 'ConfigurationOfProfStef';					versionString: '1.0-baseline';					file: 'ConfigurationOfProfStef';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			yourself.		spec			package: 'Metacello-ProfStef' with: [				spec requires: #('Metacello-Core' 'ProfStef' ). ];			package: 'Metacello-Platform' with: 'Metacello-Platform.pharo';			yourself.		spec			group: 'Tutorial' with: #('Metacello-ProfStef');			yourself.].	spec for: #squeak do: [		spec			package: 'Metacello-Platform' with: 'Metacello-Platform.squeak';			yourself.].	spec for: #gemstone do: [		spec			project: 'Monticello' with: [				spec					className: 'ConfigurationOfGsMonticello';					file: 'ConfigurationOfGsMonticello';					repository: 'http://seaside.gemstone.com/ss/monticello' ];			yourself.		spec 			package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone';			package: 'Metacello-TestsPlatform' with: [				spec 					requires: #('Metacello-Platform' );					file: 'Metacello-TestsPlatform.gemstone'. ];			yourself.		spec			group: 'Tests' with: #('Metacello-TestsPlatform' );			yourself. ].! !!ConfigurationOfMetacello methodsFor: 'doits' stamp: 'DaleHenrichs 02/19/2010 12:38'!gemstone10beta24PreLoadDoIt	"MetacelloGoferLoad>>addVersion: references an IV that no longer exists after version 292 of Metacello-MC"		| wc ancestry versionNumber |	wc := [((Smalltalk at: #GoferPackageReference) name: 'Metacello-MC') workingCopy] 			on: Error 			do: [:ex | ^self ].	(ancestry := wc ancestry ancestors) isEmpty ifTrue: [ ^self ].	versionNumber := (ancestry first name copyAfterLast: $.) asNumber.	versionNumber > 292 ifTrue: [ ^self ].	(Smalltalk at: #MetacelloGoferLoad)		compileMethod: self gemstone10beta24PreLoadMethodString		category: 'accessing'! !!ConfigurationOfMetacello methodsFor: 'doits' stamp: 'DaleHenrichs 02/19/2010 12:03'!gemstone10beta24PreLoadMethodString	^'addVersion: aVersion	model addVersion: version'! !!ConfigurationOfMetacello methodsFor: 'accessing' stamp: 'DaleHenrichs 01/15/2010 17:25'!project	^ project ifNil: [ | attributes |		self class ensureMetacello.		project := (Smalltalk at: #MetacelloMCProject) new.		 attributes := #(#'Gofer-Core').		Smalltalk at: #SystemVersion ifPresent: [:cl |			(cl current version beginsWith: 'Pharo') 				ifTrue: [						(cl current perform:  #highestUpdate) <= 10504						ifTrue: [ attributes := #(#'Gofer') ]]].		project perform: #projectAttributes: with: attributes.		(Smalltalk at: #MetacelloVersionConstructor) perform: #on:project: withArguments: (Array with: self with: project).		project]! !!ConfigurationOfMetacello methodsFor: 'doits' stamp: 'DaleHenrichs 3/22/2010 10:21'!testsMC10beta25PostLoadDoIt	"reset test resources"		#( 		MetacelloAlternateResource		MetacelloAtomicConfigurationResource		MetacelloAtomicMonticelloResource		MetacelloConfigurationResource		MetacelloMonticelloResource	) do: [:className | Smalltalk at: className ifPresent: [:cls | cls reset ]]! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 10/31/2009 13:44'!version10beta0: spec	<version: '1.0-beta.0' imports: #('1.0-beta.0-baseline')>	spec for: #common do: [		spec blessing: #beta.		spec description: 'Beta release introducing the shiny new API'.		spec author: 'dkh'.		spec timestamp: '10/9/2009 14:13'.		spec 			package: 'Gofer' with: 'Gofer-lr.64';			package: 'Metacello-Core' with: 'Metacello-Core-dkh.266';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.194';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.11';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.24';			package: 'Metacello-ConfigTests' with: 'Metacello-ConfigTests-dkh.6';			package: 'Metacello-ReferenceTests' with: 'Metacello-ReferenceTests-dkh.1'.].	spec for: #gemstone do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.4'.].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.7'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.1'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 10/31/2009 13:44'!version10beta10: spec	<version: '1.0-beta.10' imports: #('1.0-beta.5-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- GemStone-specific mods- improve error message for missing import- fix a couple of bugs in spawn new version- if versionString is not specified in project reference, use #latestVersion of the project- ''Update Package Method'' command updates the versionString for project reference to #currentVersion of the project- ''Spawn New Version'' command spawns entry for proejct reference using #currentVersion of the project- latest version of configuration package is loaded if the project reference refers to a version whose blessing is #development- refactor #saveProject- add #transact: to platform to support GemStone optional transactions- define querying protocol (public access)- use literal arrays instead of array constructors _everywhere_- clean up printing- refine querying API- extend tutorial to cover querying API'.		spec author: 'dkh'.		spec timestamp: '10/25/2009 11:34'.		spec 			package: 'Gofer' with: 'Gofer-lr.70';			package: 'Metacello-Core' with: 'Metacello-Core-dkh.285';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.222';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.18';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-dkh.17';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.29';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.4';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.1';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-dkh.11';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.4'.].	spec for: #gemstone do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.7'.].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.7'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.3'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 10/31/2009 13:44'!version10beta11: spec	<version: '1.0-beta.11' imports: #('1.0-beta.11-baseline' )>	spec for: #'common' do: [		spec blessing: #'beta'.		spec description: '- pick up latest Gofer package- fix a project version loading bug- printing fix- fix an update packages bug- adjust working version package name calculation- fix current version package name calculation (http://code.google.com/p/metacello/issues/detail?id=4)- doits bugfix- fix a project reference project package bug- add ''Load Latest Packages'' OB command- remove Samples group- save packages fix- must be able to load packages that use directory repositories- GemStone/GLASS support'.		spec author: 'dkh'.		spec timestamp: '10/31/09 11:03:31'.		spec 			package: 'Gofer' with: 'Gofer-lr.76';			package: 'Metacello-Core' with: 'Metacello-Core-dkh.294';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.239';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.18';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-dkh.17';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.32';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.4';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.1';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-dkh.11';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.4'.].	spec for: #'gemstone' do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.7'.].	spec for: #'pharo' do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.7'.].	spec for: #'squeak' do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.3'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 11/3/2009 14:13'!version10beta12: spec	<version: '1.0-beta.12' imports: #('1.0-beta.11-baseline' )>	spec for: #'common' do: [		spec blessing: #'beta'.		spec description: '-convert to using ConfigurationOfMetacello convention- fix updateRepositories bug (update repository for loaded packages only)- #repositoryFor:from: ... more GLASS support- record last version loaded and list of packages loaded for each configuration (optional)- use last list of packages loaded last when loading packages using tools- improve promptForVersion algorithm to show current version and reduce version list to logical choices- fix version number bug when version is empty. add tests'.		spec author: 'dkh'.		spec timestamp: '11/03/09 11:07:27'.		spec 			package: 'Gofer' with: 'Gofer-lr.76';			package: 'Metacello-Core' with: 'Metacello-Core-dkh.295';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.245';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.18';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-dkh.17';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.37';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.4';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.2';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-dkh.11';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.4'.].	spec for: #'gemstone' do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.7'.].	spec for: #'pharo' do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.7'.].	spec for: #'squeak' do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.3'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 11/5/2009 15:47'!version10beta13: spec	<version: '1.0-beta.13' imports: #('1.0-beta.13-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- fix a bug in current version algorithm- improve current version algorithm- pick up latest Gofer'.		spec author: 'dkh'.		spec timestamp: '11/5/2009 15:46'.		spec 			package: 'Gofer' with: 'Gofer-lr.77';			package: 'Metacello-Core' with: 'Metacello-Core-dkh.300';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.249';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.18';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-dkh.17';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.37';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.4';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.2';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-dkh.11';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.4'.].	spec for: #gemstone do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.7'.].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.7'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.3'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 11/16/2009 15:02'!version10beta14: spec	<version: '1.0-beta.14' imports: #('1.0-beta.14-baseline' )>	spec for: #'common' do: [		spec blessing: #'beta'.		spec description: '- improve handling of #development project references. Loader is responsible for ensuring that #development projects have latest package loaded.- use latest Gofer- skip automatic loading of packages when working copy #needsSaving- better loop termination logic for packageSpecsInLoadOrder- fix logic for loading latest version of a project when versionString is not set (use latest, then last version)- collect repositories from just the packages (ignoring projects) ... affects load latest logic- fix #promptForVersion: ... include #development versions in listing- GemStone attributes, now may include: #gemstone #''gs2.x'' #''gs2.3.x'' #''gs2.4.x'' and #''gs3.x'' for finer grainded resolution of Stone version- fix a package loading logic bug found by Doru (loading latest)'.		spec author: 'dkh'.		spec timestamp: '11/16/2009 15:02'.		spec 			package: 'Gofer' with: 'Gofer-lr.83';			package: 'Metacello-Core' with: 'Metacello-Core-dkh.302';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.256';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.18';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-dkh.17';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.38';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.4';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.2';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-dkh.11';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.4'.].	spec for: #'gemstone' do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.9'.].	spec for: #'pharo' do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.7'.].	spec for: #'squeak' do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.3'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 11/21/2009 11:50'!version10beta15: spec	<version: '1.0-beta.15' imports: #('1.0-beta.14-baseline' )>	spec for: #common do: [		spec blessing: #development.		spec description: '- fix ''Spawn New Version'' command- tweak packageSpec shortcut printing - fine tune use of #overrides:'.		spec author: 'dkh'.		spec timestamp: '11/21/2009 11:49'.		spec 			package: 'Gofer' with: 'Gofer-lr.83';			package: 'Metacello-Core' with: 'Metacello-Core-dkh.302';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.258';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.18';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-dkh.17';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.37';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.4';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.2';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-dkh.11';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.4'.].	spec for: #gemstone do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.9'.].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.7'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.3'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 12/01/2009 16:23'!version10beta16: spec	<version: '1.0-beta.16' imports: #('1.0-beta.16-baseline' )>	spec for: #'common' do: [		spec blessing: #'beta'.		spec description: '- put Gofer package in Metacello repository'.		spec author: 'dkh'.		spec timestamp: '12/01/09 16:22:42'.		spec 			package: 'Gofer' with: 'Gofer-lr.83';			package: 'Metacello-Core' with: 'Metacello-Core-dkh.302';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.259';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.18';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-dkh.17';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.37';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.4';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.2';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-dkh.11';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.4'.].	spec for: #'gemstone' do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.9'.].	spec for: #'pharo' do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.7'.].	spec for: #'squeak' do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.3'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 12/9/2009 11:27'!version10beta17: spec	<version: '1.0-beta.17' imports: #('1.0-beta.17-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- fix a branch name problem for working copies- fine tune the ''Update Package Methods'' algorithm- fix Issue 3: http://code.google.com/p/metacello/issues/detail?id=3 ''Save Packages'' save new- fix Issue 12: http://code.google.com/p/metacello/issues/detail?id=12 Wait cursor during load- fix Issue 14: http://code.google.com/p/metacello/issues/detail?id=14 Ftp repository for Pharo & Squeak- fix Issue 19: http://code.google.com/p/metacello/issues/detail?id=19 Bug in Spawn New Version'.		spec author: 'dkh'.		spec timestamp: '12/9/2009 11:13'.		spec 			package: 'Gofer' with: 'Gofer-lr.83';			package: 'Metacello-Core' with: 'Metacello-Core-dkh.306';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.268';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.19';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-dkh.17';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.38';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.5';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.2';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-dkh.12';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.4'.].	spec for: #gemstone do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.9'.].	spec for: #squeakCommon do: [		spec package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2'.].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.9'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.3'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 12/29/2009 16:24'!version10beta18: spec	<version: '1.0-beta.18' imports: #('1.0-beta.18-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- implement MetacelloVersion>>isPossibleBaseline- fix currentVersion when no packages or projects are in play- fix a Spawn New Version bug- allow for a nil #versionString spec in projects- fix Issue 14: http://code.google.com/p/metacello/issues/detail?id=14 Ftp repository for Squeak only- fix Issue 18: http://code.google.com/p/metacello/issues/detail?id=18 #linear default loadType- fix Issue 21: http://code.google.com/p/metacello/issues/detail?id=21 optional blessing for Spawn New Version- fix Issue 22: http://code.google.com/p/metacello/issues/detail?id=22 Better filter for Branch blessing and lastVersion- fix Issue 23: http://code.google.com/p/metacello/issues/detail?id=23 Use Gofer batch commit for Save Packages- fix Issue 26: http://code.google.com/p/metacello/issues/detail?id=26 New version of Gofer breaks Metacello- port to latest version of Gofer (Gofer-lr.109)'.		spec author: 'dkh'.		spec timestamp: '12/29/2009 16:17'.		spec 			package: 'Gofer' with: 'Gofer-lr.109';			package: 'Metacello-Core' with: 'Metacello-Core-dkh.311';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.281';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.20';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-dkh.17';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.40';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.6';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.3';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-dkh.15';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.4'.].	spec for: #gemstone do: [		spec project: 'Monticello' with: '0.235'.		spec 			package: 'Gofer' with: 'Gofer-dkh.105';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.279';			package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.10'.].	spec for: #squeakCommon do: [		spec package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2'.].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.9'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.4'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 1/8/2010 14:49'!version10beta191: spec	<version: '1.0-beta.19.1' imports: #('1.0-beta.19-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- fix Issue 39: http://code.google.com/p/metacello/issues/detail?id=39 "WB at end of ConfigurationOfPharo load"'.		spec author: 'dkh'.		spec timestamp: '1/8/2010 14:45'.		spec 			package: 'Metacello-Core' with: 'Metacello-Core-dkh.319';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.292';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.26';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-dkh.17';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.40';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.11';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.3';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-dkh.26';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.5'.].	spec for: #'Gofer-Core' do: [		spec package: 'Gofer-Core' with: 'Gofer-Core-AdrianLienhard.114'.].	spec for: #Gofer do: [		spec package: 'Gofer' with: 'Gofer-lr.109'.].	spec for: #gemstone do: [		spec project: 'Monticello' with: '0.236'.		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.11'.].	spec for: #squeakCommon do: [		spec package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2'.].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.11'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.4'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 1/8/2010 11:12'!version10beta19: spec	<version: '1.0-beta.19' imports: #('1.0-beta.19-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- "Pure" Refactoring of MetacelloVersionConstructor>>on: (Danie Roux)- fix Issue 7: http://code.google.com/p/metacello/issues/detail?id=7 "#repositoryOverrides: should be in MetacelloMCVersion"- fix Issue 13: http://code.google.com/p/metacello/issues/detail?id=13 "more than one repository per package"- fix Issue 16: http://code.google.com/p/metacello/issues/detail?id=16 "version level predoit/postdoit"- fix Issue 20: http://code.google.com/p/metacello/issues/detail?id=20 "validation in #postLoadDoIt:/#preLoadDoit:"- fix Issue 28: http://code.google.com/p/metacello/issues/detail?id=28 "supplyingAnswers: attribute for packages"- fix Issue 30: http://code.google.com/p/metacello/issues/detail?id=30 "Imported version names"- fix Issue 33: http://code.google.com/p/metacello/issues/detail?id=33 "ensureMetacello should do full bootstrap"- fix Issue 38: http://code.google.com/p/metacello/issues/detail?id=38 "Metacello load fails on Squeak"- port Gofer-lr.109 to GemStone- stop caching packages in Pharo ... can cause trouble if repository off-line- fix problems with GemStone Metacello when runnng without OB- make error handler for #do:displaying: a little more specific - fix a problem when a second version of a package is being requested during atomic load. Must override with newer package.- run with pre and post 10504 Pharo images'.		spec author: 'dkh'.		spec timestamp: '1/8/2010 11:12'.		spec 			package: 'Metacello-Core' with: 'Metacello-Core-dkh.319';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.292';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.26';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-dkh.17';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.40';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.11';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.3';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-dkh.26';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.5'.].	spec for: #'Gofer-Core' do: [		spec package: 'Gofer-Core' with: 'Gofer-Core-AdrianLienhard.114'.].	spec for: #Gofer do: [		spec package: 'Gofer' with: 'Gofer-lr.109'.].	spec for: #gemstone do: [		spec project: 'Monticello' with: '0.236'.		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.11'.].	spec for: #squeakCommon do: [		spec package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2'.].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.10'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.4'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 10/31/2009 13:44'!version10beta1: spec	<version: '1.0-beta.1' imports: #('1.0-beta.0-baseline')>	spec for: #common do: [		spec blessing: #beta.		spec description: 'Bugfixes:- change base version name for spawn method- make sure author and timestamp included by spawn - fix file duplication for spawn method'.		spec author: 'dkh'.		spec timestamp: '10/10/2009 14:58'.		spec 			package: 'Gofer' with: 'Gofer-lr.64';			package: 'Metacello-Core' with: 'Metacello-Core-dkh.268';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.196';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.12';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.25';			package: 'Metacello-ConfigTests' with: 'Metacello-ConfigTests-dkh.7';			package: 'Metacello-ReferenceTests' with: 'Metacello-ReferenceTests-dkh.1'.].	spec for: #gemstone do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.4'.].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.7'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.1'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'DaleHenrichs 1/14/2010 09:46'!version10beta20: spec	<version: '1.0-beta.20' imports: #('1.0-beta.19-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- tests for nested #for:do: statements- fix Issue 40: http://code.google.com/p/metacello/issues/detail?id=40 "Tight package/repository coordination lost"- take full advantage of Gofer repository caching- more tests to ensure expected loading behavior- typos fixed in Tutorial (Torsten)'.		spec author: 'DaleHenrichs'.		spec timestamp: '1/14/2010 09:45'.		spec 			package: 'Metacello-Core' with: 'Metacello-Core-dkh.319';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.296';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.26';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-tbn.19';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.40';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.11';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.3';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-dkh.29';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.5'.].	spec for: #'Gofer-Core' do: [		spec package: 'Gofer-Core' with: 'Gofer-Core-AdrianLienhard.114'.].	spec for: #Gofer do: [		spec package: 'Gofer' with: 'Gofer-lr.109'.].	spec for: #gemstone do: [		spec project: 'Monticello' with: '0.236'.		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.11'.].	spec for: #squeakCommon do: [		spec package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2'.].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.11'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.4'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'DaleHenrichs 1/16/2010 12:47'!version10beta21: spec	<version: '1.0-beta.21' imports: #('1.0-beta.21-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- fix new tests so that they run on GemStone and don''t collide with existing packages- fix Issue 41: http://code.google.com/p/metacello/issues/detail?id=41 "Trouble with nested ProgressInitiationException in certain circumstances"- fix Issue 42: http://code.google.com/p/metacello/issues/detail?id=42 "ConfigurationOfSeaside* should use supplyingAnswers:"- fix Issue 43: http://code.google.com/p/metacello/issues/detail?id=43 "Eliminate use of #versionInfoFor:from:do: "- Metacello now uses Gofer for all of its interactions with Monticello (a few pockets of workingCopy still exist:)- pick up latest Gofer-Core-lr.115 and Gofer-Tests- some more version caching for speed- better workingCopy resolution for MetacelloCachingGoferResolvedReference- adjust tests - no longer inheriting pragmas ... too expensive- introduce valueSupplyingMetacelloAnswers: to work around Pharo Issue 1824 http://code.google.com/p/pharo/issues/detail?id=1824'.		spec author: 'DaleHenrichs'.		spec timestamp: '1/16/2010 12:47'.		spec 			package: 'Metacello-Core' with: 'Metacello-Core-DaleHenrichs.321';			package: 'Metacello-MC' with: 'Metacello-MC-DaleHenrichs.302';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.26';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-tbn.19';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.40';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.11';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.3';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-DaleHenrichs.34';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.5'.].	spec for: #'Gofer-Core' do: [		spec 			package: 'Gofer-Core' with: 'Gofer-Core-lr.115';			package: 'Gofer-Tests' with: 'Gofer-Tests-lr.113'.].	spec for: #Gofer do: [		spec package: 'Gofer' with: 'Gofer-lr.113'.].	spec for: #gemstone do: [		spec project: 'Monticello' with: '0.236'.		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-DaleHenrichs.12'.].	spec for: #squeakCommon do: [		spec package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2'.].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-DaleHenrichs.12'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.4'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'DaleHenrichs 1/25/2010 15:00'!version10beta22: spec	<version: '1.0-beta.22' imports: #('1.0-beta.22-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- fix Issue 36: http://code.google.com/p/metacello/issues/detail?id=36 "Use ConfigurationOfOB for Metacello"- fix Issue 49: http://code.google.com/p/metacello/issues/detail?id=49 "occassional load of older versions of projects"- fix Issue 52: http://code.google.com/p/metacello/issues/detail?id=52 "preload/postload for groups and projects"- MetacelloMCVersion>>resolveToLoadableSpecs: added to supplement query API- support for Metaceller- fix a bug in MetacelloMCProjectSpec>>resolveToAllPackagesIn:visited: when the project spec doesn''t have a versionString specified- ProfStef tutorial (MetacelloCreateConfigurationTutorial)- latest Gofer (Gofer-Core-lr.116 and Gofer-Tests-lr.115)'.		spec author: 'DaleHenrichs'.		spec timestamp: '1/25/2010 14:19'.		spec 			project: 'Gofer Core' with: '1.0';			project: 'Gofer Tests' with: '1.0'.		spec 			package: 'Metacello-Core' with: 'Metacello-Core-DaleHenrichs.328';			package: 'Metacello-MC' with: 'Metacello-MC-DaleHenrichs.312';			package: 'Metacello-Reference' with: 'Metacello-Reference-DaleHenrichs.28';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-tbn.19';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.40';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-DaleHenrichs.13';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.3';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-DaleHenrichs.43';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.5'.].	spec for: #gemstone do: [		spec project: 'Monticello' with: '0.236'.		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-DaleHenrichs.13'.].	spec for: #squeakCommon do: [		spec project: 'OB' with: '1.1'.		spec package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2'.].	spec for: #pharo do: [		spec project: 'ProfStef' with: '1.0'.		spec 			package: 'Metacello-ProfStef' with: 'Metacello-ProfStef-DaleHenrichs.2';			package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-DaleHenrichs.12'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.4'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'DaleHenrichs 02/10/2010 09:56'!version10beta23: spec	<version: '1.0-beta.23' imports: #('1.0-beta.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'beta'.		spec description: '- port to Squeak3.9.1-final-7075, Squeak3.10.2-7179-basic, Squeak3.10.2-Trunk-091128 and Squeak3.11-8931-alpha- add #unloadMetacello to MetacelloConfigTemplate- fix Issue25 : http://code.google.com/p/metacello/issues/detail?id=25 "currentVersion cache is too sticky ..."- full frontal assault on findCurrentVersion and currentVersion algorithms ... corner implementation with a brigage of tests- fix a bug in GoferResolvedReference>>compare:using: related to branch comparison found during frontal assault!!- version #versionStatus provides additional info for using currentVersion- deleted a bunch of methods (redundant,  confusing, not interesting and no longer used):  - MetacelloVersion>>isCurrentCovering:  - MetacelloProject>>currentVersionComparison:to:covering:  - MetacelloProject>>currentVersionCovering:  - MetacelloProject>>findCurrentVersion  - MetacelloMCVersionSpec>>isCurrentCovering:  - MetacelloMCVersionSpec>>isPartiallyCurrentAgainst:  - MetacelloMCProjectSpec>>isCurrent  - MetacelloProjectReferenceSpec>>compareVersionForLoad:using:  - MetacelloAbstractPackageSpec>>compareVersionForLoad:using:  - MetacelloMCVersionSpec>>isPartiallyCurrentFor:  - MetacelloProjectReferenceSpec>>isPartiallyCurrentUsing:  - MetacelloMCProjectSpec>>comparePartialVersion:using:  - MetacelloProject>>partialVersionComparison:to:covering:  - MetacelloMCProject>>projectPackage  - MetacelloMCVersionSpec>>currentVersionComparison:covering:  - MetacelloMCVersion>>currentVersionComparison:covering:  - MetacelloVersion>>currentVersionComparison:covering:  - MetacelloProjectReferenceSpec>>isPartiallyCurrentUsing:  - MetacelloMCProjectSpec>>compareVersionForLoad:using:  - MetacelloMCVersionSpec>>isCurrent  - MetacelloPackageSpec>>compareVersion:using:  - MetacelloPackageSpec>>isCurrentUsing:  - MetacelloMCProjectSpec>>compareVersion:using:  - MetacelloMCProjectSpec>>isCurrentUsing:  - MetacelloAbstractPackageSpec>>isCurrentUsing:  - MetacelloGroupSpec>>isCurrentUsing:  - MetacelloProjectReferenceSpec>>isCurrentUsing:  - MetacelloProject>>currentVersionComparison:to:  - MetacelloVersion>>isCurrent  - MetacelloVersionSpec>>isCurrent'.		spec author: 'DaleHenrichs'.		spec timestamp: '02/10/10 09:56:41'.		spec 			project: 'Gofer Core' with: '1.0';			project: 'Gofer Tests' with: '1.0'.		spec 			package: 'Metacello-Core' with: 'Metacello-Core-DaleHenrichs.348';			package: 'Metacello-MC' with: 'Metacello-MC-DaleHenrichs.332';			package: 'Metacello-Reference' with: 'Metacello-Reference-DaleHenrichs.28';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-tbn.19';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.40';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-DaleHenrichs.13';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-DaleHenrichs.8';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-DaleHenrichs.66';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.5'.].	spec for: #'gemstone' do: [		spec project: 'Monticello' with: '0.236'.		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-DaleHenrichs.14'.].	spec for: #'squeakCommon' do: [		spec project: 'OB' with: '1.1'.		spec package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2'.].	spec for: #'pharo' do: [		spec project: 'ProfStef' with: '1.0'.		spec 			package: 'Metacello-ProfStef' with: 'Metacello-ProfStef-DaleHenrichs.2';			package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-DaleHenrichs.13'.].	spec for: #'squeak' do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.5'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'DaleHenrichs 07/16/2010 13:09'!version10beta2401: spec	<version: '1.0-beta.24.0.1' imports: #('1.0-beta.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'patched'.		spec description: 'picked up from patched 1.0-beta.24 from allen for GLASS 1.0-beta.7.1 on GemStone 3.0'.		spec author: 'DaleHenrichs'.		spec timestamp: '7/16/2010 12:56'.		spec 			project: 'Gofer Core' with: '1.0.1';			project: 'Gofer Tests' with: '1.0.1'.		spec 			package: 'Metacello-Core' with: 'Metacello-Core-ao.350';			package: 'Metacello-MC' with: 'Metacello-MC-DaleHenrichs.334';			package: 'Metacello-Reference' with: 'Metacello-Reference-DaleHenrichs.28';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-tbn.19';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.40';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-DaleHenrichs.13';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-DaleHenrichs.8';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-DaleHenrichs.66';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.5'.].	spec for: #'gemstone' do: [		spec project: 'Monticello' with: '0.236'.		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-DaleHenrichs.15'.].	spec for: #'squeakCommon' do: [		spec project: 'OB' with: '1.1'.		spec package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2'.].	spec for: #'pharo' do: [		spec project: 'ProfStef' with: '1.0'.		spec 			package: 'Metacello-ProfStef' with: 'Metacello-ProfStef-DaleHenrichs.2';			package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-DaleHenrichs.13'.].	spec for: #'squeak' do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.5'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'DaleHenrichs 3/17/2010 11:27'!version10beta241: spec	<version: '1.0-beta.24.1' imports: #('1.0-beta.22-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- fix Issue 66: http://code.google.com/p/metacello/issues/detail?id=66 "loading latest broken by new code in 1.0-beta.24"'.		spec author: 'DaleHenrichs'.		spec timestamp: '3/17/2010 11:26'.		spec 			project: 'Gofer Core' with: '1.0.1';			project: 'Gofer Tests' with: '1.0.1'.		spec 			package: 'Metacello-Core' with: 'Metacello-Core-Dalehenrichs.349';			package: 'Metacello-MC' with: 'Metacello-MC-DaleHenrichs.Issue66.335';			package: 'Metacello-Reference' with: 'Metacello-Reference-DaleHenrichs.28';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-tbn.19';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.40';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-DaleHenrichs.13';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-DaleHenrichs.8';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-DaleHenrichs.66';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.5'.].	spec for: #gemstone do: [		spec project: 'Monticello' with: '0.236'.		spec 			package: 'Metacello-MC' with: [				spec preLoadDoIt: #gemstone10beta24PreLoadDoIt. ];			package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-DaleHenrichs.15'.].	spec for: #squeakCommon do: [		spec project: 'OB' with: '1.1'.		spec package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2'.].	spec for: #pharo do: [		spec project: 'ProfStef' with: '1.0'.		spec 			package: 'Metacello-ProfStef' with: 'Metacello-ProfStef-DaleHenrichs.2';			package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-DaleHenrichs.13'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.5'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'DaleHenrichs 02/19/2010 12:00'!version10beta24: spec	<version: '1.0-beta.24' imports: #('1.0-beta.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'beta'.		spec description: '- fix a bug in MetacelloMCProjectSpec>>compareCurrentVersion:targetVersionStatus:using: related when calculating current version against a non-standard loader- tweak the loader API a bit for GemStone (performance improvements)- tweak transcript info for atomic load- start using Gofer 1.0.1- adjust conditions that lead to a load conflict error'.		spec author: 'DaleHenrichs'.		spec timestamp: '02/12/10 14:44:01'.		spec 			project: 'Gofer Core' with: '1.0.1';			project: 'Gofer Tests' with: '1.0.1'.		spec 			package: 'Metacello-Core' with: 'Metacello-Core-Dalehenrichs.349';			package: 'Metacello-MC' with: 'Metacello-MC-DaleHenrichs.335';			package: 'Metacello-Reference' with: 'Metacello-Reference-DaleHenrichs.28';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-tbn.19';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.40';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-DaleHenrichs.13';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-DaleHenrichs.8';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-DaleHenrichs.66';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.5'.].	spec for: #'gemstone' do: [		spec project: 'Monticello' with: '0.236'.		spec 			package: 'Metacello-MC' with: [				spec preLoadDoIt: #gemstone10beta24PreLoadDoIt ];			package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-DaleHenrichs.15'.].	spec for: #'squeakCommon' do: [		spec project: 'OB' with: '1.1'.		spec package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2'.].	spec for: #'pharo' do: [		spec project: 'ProfStef' with: '1.0'.		spec 			package: 'Metacello-ProfStef' with: 'Metacello-ProfStef-DaleHenrichs.2';			package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-DaleHenrichs.13'.].	spec for: #'squeak' do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.5'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'DaleHenrichs 3/23/2010 19:16'!version10beta251: spec	<version: '1.0-beta.25.1' imports: #('1.0-beta.25-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- fix Issue 67: http://code.google.com/p/metacello/issues/detail?id=67 "blessing not generated by MetacelloVersionConstructor>>spawnPackageMethodIn: category: named: sourceVersion: targetVersion: blessing:"'.		spec author: 'DaleHenrichs'.		spec timestamp: '3/23/2010 19:16'.		spec 			project: 'Gofer Core' with: '1.0.2';			project: 'Gofer Tests' with: '1.0.2'.		spec 			package: 'Metacello-Core' with: 'Metacello-Core-DaleHenrichs.360';			package: 'Metacello-MC' with: 'Metacello-MC-DaleHenrichs.386';			package: 'Metacello-Reference' with: 'Metacello-Reference-DaleHenrichs.29';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-DaleHenrichs.20';			package: 'OB-Metacello' with: 'OB-Metacello-DaleHenrichs.55';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-DaleHenrichs.14';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-DaleHenrichs.8';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-DaleHenrichs.90';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-DaleHenrichs.7'.].	spec for: #gemstone do: [		spec project: 'Monticello' with: '0.236'.		spec 			package: 'Metacello-MC' with: [				spec preLoadDoIt: #gemstone10beta24PreLoadDoIt. ];			package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.gemstone-DaleHenrichs.1';			package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-DaleHenrichs.16'.].	spec for: #squeakCommon do: [		spec project: 'OB' with: '1.1.1'.		spec package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2'.].	spec for: #pharo do: [		spec project: 'ProfStef' with: '1.0'.		spec 			package: 'Metacello-ProfStef' with: 'Metacello-ProfStef-DaleHenrichs.2';			package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-DaleHenrichs.16'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.5'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'DaleHenrichs 3/23/2010 15:24'!version10beta25: spec	<version: '1.0-beta.25' imports: #('1.0-beta.25-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- pick up Gofer 1.0.2- fix Issue 10: http://code.google.com/p/metacello/issues/detail?id=10 "''save packages'' should recurse through projects"- fix Issue 24: http://code.google.com/p/metacello/issues/detail?id=24 "Gofer #fetch support"- fix Issue 31: http://code.google.com/p/metacello/issues/detail?id=31 "Handle boundary between #atomic and #linear loads ..."- fix Issue 32: http://code.google.com/p/metacello/issues/detail?id=32 "Connect repositories as MCServerDirectory rather than MCDirectory"- fix Issue 48: http://code.google.com/p/metacello/issues/detail?id=48 "Should have #loadReport message for loader..."- fix Issue 56: http://code.google.com/p/metacello/issues/detail?id=56 "save configurtion that uses Gofer>>commit:"- fix Issue 57: http://code.google.com/p/metacello/issues/detail?id=57 "specificy method category for version category in Metacello version constructor"- fix Issue 58: http://code.google.com/p/metacello/issues/detail?id=58 "make #file: optional in project reference specification"- fix Issue 59: http://code.google.com/p/metacello/issues/detail?id=59 "repository overrides should be used for MetacelloPackageSpec>>load"- fix Issue 60: http://code.google.com/p/metacello/issues/detail?id=60 "bypass progress bars...."- fix Issue 64: http://code.google.com/p/metacello/issues/detail?id=64 "update package methods has extra file entry"- fix Issue 66: http://code.google.com/p/metacello/issues/detail?id=66 "loading latest broken by new code in 1.0-beta.24" [MERGE]- #fetch and #fetch: added to MetacelloMcVersion. #fetch and #fetch: correspond to #load and #load: but only download the mcz files to a cacheRepository (controlled by version #loadPolicy)- #fetchProject, #fetchProject:, #updateProject: added to support direct fetch of a project (ala #updateProject)- implement version #record/#record:- implement version #silently: for Issue 60- implement non-interactive commit support using gofer: MetacelloMCProject>>goferCommitProject:, MetacelloPackageSpec>>goferCommitPackage:'.		spec author: 'DaleHenrichs'.		spec timestamp: '3/23/2010 15:24'.		spec 			project: 'Gofer Core' with: '1.0.2';			project: 'Gofer Tests' with: '1.0.2'.		spec 			package: 'Metacello-Core' with: 'Metacello-Core-DaleHenrichs.358';			package: 'Metacello-MC' with: 'Metacello-MC-DaleHenrichs.386';			package: 'Metacello-Reference' with: 'Metacello-Reference-DaleHenrichs.29';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-DaleHenrichs.20';			package: 'OB-Metacello' with: 'OB-Metacello-DaleHenrichs.55';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-DaleHenrichs.14';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-DaleHenrichs.8';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-DaleHenrichs.90';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-DaleHenrichs.7'.].	spec for: #gemstone do: [		spec project: 'Monticello' with: '0.236'.		spec 			package: 'Metacello-MC' with: [				spec preLoadDoIt: #gemstone10beta24PreLoadDoIt. ];			package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.gemstone-DaleHenrichs.1';			package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-DaleHenrichs.16'.].	spec for: #squeakCommon do: [		spec project: 'OB' with: '1.1.1'.		spec package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2'.].	spec for: #pharo do: [		spec project: 'ProfStef' with: '1.0'.		spec 			package: 'Metacello-ProfStef' with: 'Metacello-ProfStef-DaleHenrichs.2';			package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-DaleHenrichs.16'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.5'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'DaleHenrichs 5/12/2010 13:54'!version10beta261: spec	<version: '1.0-beta.26.1' imports: #('1.0-beta.25-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- fix and test coverage for bug involving a postload doit with linear load nested inside an atomic load- when loading a project reference, do not load mcz files that are older than the currently loaded mcz files (implicit version request). Older files will be loaded if directly referenced from the project being loaded (explicit version request).- add RETRY logic to handle HTTP droppage'.		spec author: 'DaleHenrichs'.		spec timestamp: '5/12/2010 12:19'.		spec 			project: 'Gofer Core' with: '1.0.2';			project: 'Gofer Tests' with: '1.0.2'.		spec 			package: 'Metacello-Core' with: 'Metacello-Core-DaleHenrichs.361';			package: 'Metacello-MC' with: 'Metacello-MC-DaleHenrichs.404';			package: 'Metacello-Reference' with: 'Metacello-Reference-DaleHenrichs.29';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-DaleHenrichs.20';			package: 'OB-Metacello' with: 'OB-Metacello-DaleHenrichs.55';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-DaleHenrichs.14';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-DaleHenrichs.8';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-DaleHenrichs.98';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-DaleHenrichs.7'.].	spec for: #gemstone do: [		spec project: 'Monticello' with: '0.236'.		spec 			package: 'Metacello-MC' with: [				spec preLoadDoIt: #gemstone10beta24PreLoadDoIt. ];			package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.gemstone-DaleHenrichs.1';			package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-DaleHenrichs.16'.].	spec for: #squeakCommon do: [		spec project: 'OB' with: '1.1.1'.		spec package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2'.].	spec for: #pharo do: [		spec project: 'ProfStef' with: '1.0'.		spec 			package: 'Metacello-ProfStef' with: 'Metacello-ProfStef-DaleHenrichs.2';			package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-DaleHenrichs.16'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.5'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'DaleHenrichs 5/21/2010 16:28'!version10beta262: spec	<version: '1.0-beta.26.2' imports: #('1.0-beta.25-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- Pharo1.1 compat for OB-Metacello- fix Issue 77: http://code.google.com/p/metacello/issues/detail?id=77 "later version of Project reference not loaded after old version already loaded"- add MetacelloFetchingMCSpecLoader>>printOn: that prints out loadDirective, thus restoring correct #printOn: behavior for MetacelloNullRecordingMCSpecLoader since tutorial depends upon it..'.		spec author: 'DaleHenrichs'.		spec timestamp: '5/21/2010 16:26 '.		spec 			project: 'Gofer Core' with: '1.0.2';			project: 'Gofer Tests' with: '1.0.2'.		spec 			package: 'Metacello-Core' with: 'Metacello-Core-DaleHenrichs.361';			package: 'Metacello-MC' with: 'Metacello-MC-DaleHenrichs.407';			package: 'Metacello-Reference' with: 'Metacello-Reference-DaleHenrichs.29';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-DaleHenrichs.20';			package: 'OB-Metacello' with: 'OB-Metacello-DaleHenrichs.56';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-DaleHenrichs.14';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-DaleHenrichs.8';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-DaleHenrichs.99';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-DaleHenrichs.7'.].	spec for: #gemstone do: [		spec project: 'Monticello' with: '0.236'.		spec 			package: 'Metacello-MC' with: [				spec preLoadDoIt: #gemstone10beta24PreLoadDoIt. ];			package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.gemstone-DaleHenrichs.1';			package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-DaleHenrichs.16'.].	spec for: #squeakCommon do: [		spec project: 'OB' with: '1.1.1'.		spec package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2'.].	spec for: #pharo do: [		spec project: 'ProfStef' with: '1.0'.		spec 			package: 'Metacello-ProfStef' with: 'Metacello-ProfStef-DaleHenrichs.2';			package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-DaleHenrichs.16'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.5'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'DaleHenrichs 6/11/2010 11:34'!version10beta263: spec	<version: '1.0-beta.26.3' imports: #('1.0-beta.25-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- fix Issue 81: http://code.google.com/p/metacello/issues/detail?id=81 "wrong mcz file can be loaded when mcz file has Monticello dependencies"- fix Issue 82: http://code.google.com/p/metacello/issues/detail?id=82 "Metacello and (Windows) file repositories"'.		spec author: 'DaleHenrichs'.		spec timestamp: '6/11/2010 11:26'.		spec 			project: 'Gofer Core' with: '1.0.2';			project: 'Gofer Tests' with: '1.0.2'.		spec 			package: 'Metacello-Core' with: 'Metacello-Core-tbn.362';			package: 'Metacello-MC' with: 'Metacello-MC-DaleHenrichs.409';			package: 'Metacello-Reference' with: 'Metacello-Reference-DaleHenrichs.30';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-DaleHenrichs.20';			package: 'OB-Metacello' with: 'OB-Metacello-DaleHenrichs.56';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-DaleHenrichs.15';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-DaleHenrichs.8';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-DaleHenrichs.102';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-DaleHenrichs.7'.].	spec for: #gemstone do: [		spec project: 'Monticello' with: '0.236'.		spec 			package: 'Metacello-MC' with: [				spec preLoadDoIt: #gemstone10beta24PreLoadDoIt. ];			package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.gemstone-DaleHenrichs.1';			package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-DaleHenrichs.16'.].	spec for: #squeakCommon do: [		spec project: 'OB' with: '1.1.1'.		spec package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2'.].	spec for: #pharo do: [		spec project: 'ProfStef' with: '1.0'.		spec 			package: 'Metacello-ProfStef' with: 'Metacello-ProfStef-DaleHenrichs.2';			package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-DaleHenrichs.16'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.5'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'DaleHenrichs 4/12/2010 14:55'!version10beta26: spec	<version: '1.0-beta.26' imports: #('1.0-beta.25-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- put comment in MetacelloMCProject>>#updateProject to warn about refreshing instance.- helper messages: #cacheRepository: and #ignoreImage: added to MetacelloMCVersion- refactor directive hierarchy for post/pre Load directives add #postLoadDo: and #preLoadDo: to round out API- clean up null recording loader with respect to fetch and post/pre load doits- directives weren''t being created correctly for post/pre load doits on packages .... now they are- ConfigurationOfMetacello class>>alternateEnsureMetacello to be used if GemSource repository is inaccessible- assorted tests- #fetchPackage: added to MetacelloPackageSpec taking a MetacelloLoaderPolicy like #fetchProject: for MetacelloMCProjectSpec'.		spec author: 'DaleHenrichs'.		spec timestamp: '4/12/2010 14:27'.		spec 			project: 'Gofer Core' with: '1.0.2';			project: 'Gofer Tests' with: '1.0.2'.		spec 			package: 'Metacello-Core' with: 'Metacello-Core-DaleHenrichs.361';			package: 'Metacello-MC' with: 'Metacello-MC-DaleHenrichs.393';			package: 'Metacello-Reference' with: 'Metacello-Reference-DaleHenrichs.29';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-DaleHenrichs.20';			package: 'OB-Metacello' with: 'OB-Metacello-DaleHenrichs.55';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-DaleHenrichs.14';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-DaleHenrichs.8';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-DaleHenrichs.92';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-DaleHenrichs.7'.].	spec for: #gemstone do: [		spec project: 'Monticello' with: '0.236'.		spec 			package: 'Metacello-MC' with: [				spec preLoadDoIt: #gemstone10beta24PreLoadDoIt. ];			package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.gemstone-DaleHenrichs.1';			package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-DaleHenrichs.16'.].	spec for: #squeakCommon do: [		spec project: 'OB' with: '1.1.1'.		spec package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2'.].	spec for: #pharo do: [		spec project: 'ProfStef' with: '1.0'.		spec 			package: 'Metacello-ProfStef' with: 'Metacello-ProfStef-DaleHenrichs.2';			package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-DaleHenrichs.16'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.5'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'DaleHenrichs 6/27/2010 09:28'!version10beta271: spec	<version: '1.0-beta.27.1' imports: #('1.0-beta.27-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- fix for Issue 86 (http://code.google.com/p/metacello/issues/detail?id=86) "project references that are supersets of a loaded project reference appear to be partially loaded"'.		spec author: 'DaleHenrichs'.		spec timestamp: '6/24/2010 20:06'.		spec 			project: 'Gofer Core' with: '1.0.2.1';			project: 'Gofer Tests' with: '1.0.2.1'.		spec 			package: 'Metacello-Core' with: 'Metacello-Core-DaleHenrichs.363';			package: 'Metacello-MC' with: 'Metacello-MC-DaleHenrichs.417';			package: 'Metacello-Reference' with: 'Metacello-Reference-DaleHenrichs.31';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-DaleHenrichs.20';			package: 'OB-Metacello' with: 'OB-Metacello-DaleHenrichs.56';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-DaleHenrichs.16';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-DaleHenrichs.8';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-DaleHenrichs.106';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-DaleHenrichs.7'.].	spec for: #gemstone do: [		spec project: 'Monticello' with: '0.236'.		spec 			package: 'Metacello-MC' with: [				spec preLoadDoIt: #gemstone10beta24PreLoadDoIt. ];			package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.gemstone-DaleHenrichs.1';			package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-DaleHenrichs.16'.].	spec for: #squeakCommon do: [		spec 			project: 'OB' with: '1.1.4';			project: 'Help System' with: '1.1'.		spec 			package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2';			package: 'Metacello-Help' with: 'Metacello-Help-tbn.3'.].	spec for: #pharo do: [		spec project: 'ProfStef' with: '1.0'.		spec 			package: 'Metacello-ProfStef' with: 'Metacello-ProfStef-DaleHenrichs.2';			package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-DaleHenrichs.16'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.5'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'DaleHenrichs 7/5/2010 09:39'!version10beta272: spec	<version: '1.0-beta.27.2' imports: #('1.0-beta.27-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- OBCmdMetacello >> isActive used #and:and which is deprecated in Pharo 1.1rc4'.		spec author: 'DaleHenrichs'.		spec timestamp: '7/5/2010 09:31'.		spec 			project: 'Gofer Core' with: '1.0.2.1';			project: 'Gofer Tests' with: '1.0.2.1'.		spec 			package: 'Metacello-Core' with: 'Metacello-Core-DaleHenrichs.363';			package: 'Metacello-MC' with: 'Metacello-MC-DaleHenrichs.417';			package: 'Metacello-Reference' with: 'Metacello-Reference-DaleHenrichs.31';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-DaleHenrichs.20';			package: 'OB-Metacello' with: 'OB-Metacello-DaleHenrichs.57';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-DaleHenrichs.16';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-DaleHenrichs.8';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-DaleHenrichs.106';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-DaleHenrichs.7'.].	spec for: #gemstone do: [		spec project: 'Monticello' with: '0.236'.		spec 			package: 'Metacello-MC' with: [				spec preLoadDoIt: #gemstone10beta24PreLoadDoIt. ];			package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.gemstone-DaleHenrichs.1';			package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-DaleHenrichs.16'.].	spec for: #squeakCommon do: [		spec 			project: 'OB' with: '1.1.4';			project: 'Help System' with: '1.1'.		spec 			package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2';			package: 'Metacello-Help' with: 'Metacello-Help-tbn.3'.].	spec for: #pharo do: [		spec project: 'ProfStef' with: '1.0'.		spec 			package: 'Metacello-ProfStef' with: 'Metacello-ProfStef-DaleHenrichs.2';			package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-DaleHenrichs.16'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.5'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'DaleHenrichs 6/15/2010 12:07'!version10beta27: spec	<version: '1.0-beta.27' imports: #('1.0-beta.27-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- include Metacello-Help from Torsten- test case confirming that group name can be used "anywhere that project/package name can be used"- fix Issue 85: http://code.google.com/p/metacello/issues/detail?id=85 "Metacello should load from alternate repository"- pick up OB 1.1.4 for Pharo 1.1 compat- redundant repository for Gofer too'.		spec author: 'DaleHenrichs'.		spec timestamp: '6/15/2010 11:02'.		spec 			project: 'Gofer Core' with: '1.0.2.1';			project: 'Gofer Tests' with: '1.0.2.1'.		spec 			package: 'Metacello-Core' with: 'Metacello-Core-DaleHenrichs.363';			package: 'Metacello-MC' with: 'Metacello-MC-DaleHenrichs.415';			package: 'Metacello-Reference' with: 'Metacello-Reference-DaleHenrichs.31';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-DaleHenrichs.20';			package: 'OB-Metacello' with: 'OB-Metacello-DaleHenrichs.56';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-DaleHenrichs.16';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-DaleHenrichs.8';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-DaleHenrichs.103';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-DaleHenrichs.7'.].	spec for: #gemstone do: [		spec project: 'Monticello' with: '0.236'.		spec 			package: 'Metacello-MC' with: [				spec preLoadDoIt: #gemstone10beta24PreLoadDoIt. ];			package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.gemstone-DaleHenrichs.1';			package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-DaleHenrichs.16'.].	spec for: #squeakCommon do: [		spec 			project: 'OB' with: '1.1.4';			project: 'Help System' with: '1.1'.		spec 			package: 'Metacello-TestsPlatform' with: 'Metacello-TestsPlatform.squeakCommon-dkh.2';			package: 'Metacello-Help' with: 'Metacello-Help-tbn.3'.].	spec for: #pharo do: [		spec project: 'ProfStef' with: '1.0'.		spec 			package: 'Metacello-ProfStef' with: 'Metacello-ProfStef-DaleHenrichs.2';			package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-DaleHenrichs.16'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.5'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 10/31/2009 13:44'!version10beta2: spec	<version: '1.0-beta.2' imports: #('1.0-beta.0-baseline')>	spec for: #common do: [		spec blessing: #beta.		spec description: 'Bugfixes:- change name of method used for bootstrapping to avoid confusion with methods actually used for loading.- port to Squeak (Squeak3..10.10.2-Trunk-090912)'.		spec author: 'dkh'.		spec timestamp: '10/12/2009 13:31'.		spec 			package: 'Gofer' with: 'Gofer-dkh.65';			package: 'Metacello-Core' with: [				spec					file: 'Metacello-Core-dkh.268';					includes: #('Metacello-Reference' ) ];			package: 'Metacello-MC' with: 'Metacello-MC-dkh.197';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.12';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.25';			package: 'Metacello-ConfigTests' with: 'Metacello-ConfigTests-dkh.7';			package: 'Metacello-ReferenceTests' with: 'Metacello-ReferenceTests-dkh.1'.].	spec for: #gemstone do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.4'.].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.7'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.3'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 10/31/2009 13:44'!version10beta3: spec	<version: '1.0-beta.3' imports: #('1.0-beta.3-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: 'Bugfixes:- update to latest Gofer (Gofer-lr.67)- fix a package overrides: bug- pull in some old tests that still apply- recast tutorial to new API plus tutorial tests- fix platform attribute bug- use strings instead of symbols for imports- class-side project- fix doit bug- tools load ''ALL''- deactive ''Update Repositories'' command'.		spec author: 'dkh'.		spec timestamp: '10/14/2009 10:06'.		spec 			package: 'Gofer' with: 'Gofer-lr.67';			package: 'Metacello-Core' with: 'Metacello-Core-dkh.271';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.201';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.13';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-dkh.12';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.27';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.1';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.1';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-dkh.2';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.1'.].	spec for: #gemstone do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.4'.].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.7'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.3'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 10/31/2009 13:44'!version10beta4: spec	<version: '1.0-beta.4' imports: #('1.0-beta.3-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: 'Bugfixes:- add platform attribute tests- fix bug in project reference- need to pass project into constructor (sometimes)- duplication of #projectAttributes- correct update package logic when package branches involved (<package name>.<branch name>-<author>.<version number>'.		spec author: 'dkh'.		spec timestamp: '10/15/2009 11:41'.		spec 			package: 'Gofer' with: 'Gofer-lr.67';			package: 'Metacello-Core' with: 'Metacello-Core-dkh.273';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.205';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.13';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-dkh.12';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.27';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.1';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.1';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-dkh.4';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.1'.].	spec for: #gemstone do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.4'.].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.7'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.3'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 10/31/2009 13:44'!version10beta5: spec	<version: '1.0-beta.5' imports: #('1.0-beta.5-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- GemStone port- fix a bug in #project:copyFrom:with:- rewrite null loader to use IVs for recording state- get started on project ref tutorial- ensure that imported versions exist- use Gofer for direct loading of packages like from pojects, since configuration must be loaded immediately whether or not w are doing atomic/linear loads- add project load test (coverage for Doru''s bug report)'.		spec author: 'dkh'.		spec timestamp: '10/18/2009 10:41'.		spec 			package: 'Gofer' with: 'Gofer-dkh.68';			package: 'Metacello-Core' with: 'Metacello-Core-dkh.276';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.208';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.15';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-dkh.13';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.27';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.2';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.1';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-dkh.7';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.2'.].	spec for: #gemstone do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.5'.].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.7'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.3'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 10/31/2009 13:44'!version10beta6: spec	<version: '1.0-beta.6' imports: #('1.0-beta.5' )>	spec for: #common do: [		spec blessing: #beta.		spec description: 'Bugfixes:- asNumber throws Error (as of 10487) and Errors are not resumable- bump up ensureMetacello methods to use versions from 1.0-beta.6- use latest version of Gofer'.		spec author: 'dkh'.		spec timestamp: '10/19/2009 10:50'.		spec 			package: 'Gofer' with: 'Gofer-lr.70';			package: 'Metacello-Core' with: 'Metacello-Core-dkh.277';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.209';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-dkh.14'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 10/31/2009 13:44'!version10beta7: spec	<version: '1.0-beta.7' imports: #('1.0-beta.5-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- finish project ref tutorial'.		spec author: 'dkh'.		spec timestamp: '10/19/2009 13:50'.		spec 			package: 'Gofer' with: 'Gofer-lr.70';			package: 'Metacello-Core' with: 'Metacello-Core-dkh.277';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.209';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.15';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-dkh.15';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.27';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.2';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.1';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-dkh.7';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.3'.].	spec for: #gemstone do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.5'.].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.7'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.3'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 10/31/2009 13:44'!version10beta8: spec	<version: '1.0-beta.8' imports: #('1.0-beta.5-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- protect senders of asNumber with error handler'.		spec author: 'dkh'.		spec timestamp: '10/20/2009 11:30'.		spec 			package: 'Gofer' with: 'Gofer-lr.70';			package: 'Metacello-Core' with: 'Metacello-Core-dkh.277';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.210';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.15';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-dkh.15';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.27';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.2';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.1';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-dkh.7';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.3'.].	spec for: #gemstone do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.5'.].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.7'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.3'.].! !!ConfigurationOfMetacello methodsFor: 'versions' stamp: 'dkh 10/31/2009 13:44'!version10beta9: spec	<version: '1.0-beta.9' imports: #('1.0-beta.5-baseline' )>	spec for: #common do: [		spec blessing: #beta.		spec description: '- second cut at package query api for MetacellMCVersion requested by Simon, Read the method comments for documentation:	- groups	- packages	- projects	- packagesForSpecNamed:	- allPackagesForSpecNamed:- add #repository:username:password: to configuration API in support of repositories that require authentication.'.		spec author: 'dkh'.		spec timestamp: '10/22/2009 10:38'.		spec 			package: 'Gofer' with: 'Gofer-lr.70';			package: 'Metacello-Core' with: 'Metacello-Core-dkh.279';			package: 'Metacello-MC' with: 'Metacello-MC-dkh.215';			package: 'Metacello-Reference' with: 'Metacello-Reference-dkh.16';			package: 'Metacello-Tutorial' with: 'Metacello-Tutorial-dkh.15';			package: 'OB-Metacello' with: 'OB-Metacello-dkh.27';			package: 'Metacello-TestsReference' with: 'Metacello-TestsReference-dkh.3';			package: 'Metacello-TestsCore' with: 'Metacello-TestsCore-dkh.1';			package: 'Metacello-TestsMC' with: 'Metacello-TestsMC-dkh.10';			package: 'Metacello-TestsTutorial' with: 'Metacello-TestsTutorial-dkh.3'.].	spec for: #gemstone do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.gemstone-dkh.5'.].	spec for: #pharo do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.pharo-dkh.7'.].	spec for: #squeak do: [		spec package: 'Metacello-Platform' with: 'Metacello-Platform.squeak-dkh.3'.].! !"ConfigurationOfMetacello"!!MetacelloConfigTemplate commentStamp: 'dkh 9/12/2009 09:02' prior: 0!Copy me to start a new project!!DateAndTime methodsFor: '*metacello-core' stamp: 'dkh 9/13/2009 07:49'!setTimestampInMetacelloVersion: aMetacelloVersionSpec	aMetacelloVersionSpec setTimestamp: 		(aMetacelloVersionSpec project valueHolderSpec			value: self printString;			yourself)! !!MetacelloMCVersion methodsFor: 'querying' stamp: 'dkh 10/21/2009 19:15'!allPackagesForSpecNamed: aStringOrArray	"resolves list of packages associated with the named spec.	   If the spec is a packages, answer a list including the package and the transitive closure on 			its #requires: and #includes: fields.	   If the spec is a project, answer a list of the packages associated with the project,			following the transitive closure on packages reachable starting with the #loads: field.	   If the spec is a group, answers the list of packages in the #includes: field of the group. 			Groups in the #includes: field are expanded following the transitive closure on groups"	"In essence, this query answers the list of all packages that would be loaded if the package 		named <aString> were loaded."	"If there is no spec named <aString>, answers an empty list"	^self allPackagesForSpecNamed: aStringOrArray ifAbsent: [ ^#() ]! !!MetacelloMCVersion methodsFor: 'querying' stamp: 'dkh 10/21/2009 19:16'!allPackagesForSpecNamed: aStringOrArray ifAbsent: aBlock	"resolves list of packages associated with the named spec.	   If the spec is a packages, answer a list including the package and the transitive closure on 			its #requires: and #includes: fields.	   If the spec is a project, answer a list of the packages associated with the project,			following the transitive closure on packages reachable starting with the #loads: field.	   If the spec is a group, answers the list of packages in the #includes: field of the group. 			Groups in the #includes: field are expanded following the transitive closure on groups"	"In essence, this query answers the list of all packages that would be loaded if the package 		named <aString> were loaded."	"If there is no spec named <aString>, aBlock is evaluated"	^aStringOrArray 		resolvePackageSpecsNamedForMetacelloMCVersion: self 		visited: MetacelloVisitedPackages new 		ifAbsent: aBlock ! !!MetacelloMCVersion methodsFor: 'private' stamp: 'dkh 10/21/2009 19:17'!allPackagesForSpecs: pkgSpecs visited: visited 	| coll |	coll := Dictionary new.	pkgSpecs		do: [:pkgSpec | (pkgSpec resolveToAllPackagesIn: self spec visited: visited)				do: [:pkg | coll at: pkg name put: pkg ]].	^ coll values asOrderedCollection! !!MetacelloMCVersion methodsFor: 'accessing' stamp: 'DaleHenrichs 3/29/2010 15:32'!cacheRepository: repository 	"by default cacheRepository is an MCDictionaryRepository"		self loaderPolicy cacheRepository: repository ! !!MetacelloMCVersion methodsFor: 'private' stamp: 'DaleHenrichs 4/9/2010 14:48'!doFetchRequiredFromArray: anArray	| oldPolicy oldBypassProgress displayString |	displayString := self versionNumber printString, ' of ', self spec projectLabel.	Transcript cr; show: 'Fetching ', displayString, '...'.	oldPolicy := loaderPolicy. 	oldBypassProgress := MetacelloPlatform current bypassProgressBars.	self loaderPolicy silently ifTrue: [ MetacelloPlatform current bypassProgressBars: true ].	[ 	| ans |		ans := self fetchRequiredFromArray: anArray.		Transcript cr; show: '...finished ', self versionNumber printString.		^ans ]			ensure: [ 				MetacelloPlatform current bypassProgressBars: oldBypassProgress.				loaderPolicy := oldPolicy ]	! !!MetacelloMCVersion methodsFor: 'private' stamp: 'DaleHenrichs 4/9/2010 14:48'!doLoadRequiredFromArray: anArray	| displayString oldPolicy oldBypassProgress |	displayString := self versionNumber printString, ' of ', self spec projectLabel.	Transcript cr; show: 'Loading ', displayString, '...'.	oldPolicy := loaderPolicy. 	oldBypassProgress := MetacelloPlatform current bypassProgressBars.	self loaderPolicy silently ifTrue: [ MetacelloPlatform current bypassProgressBars: true ].	[	| fetchLoader |		fetchLoader := self fetchRequiredFromArray: anArray.		MetacelloPlatform current			do:  [  fetchLoader doLoad ]			displaying: 'Loading ', displayString.		Transcript cr; show: '...finished ', self versionNumber printString.		^fetchLoader ]		ensure: [ 			MetacelloPlatform current bypassProgressBars: oldBypassProgress.			loaderPolicy := oldPolicy ]! !!MetacelloMCVersion methodsFor: 'private' stamp: 'DaleHenrichs 4/9/2010 14:48'!doRecordRequiredFromArray: anArray	| originalLoader oldPolicy displayString oldBypassProgress |	displayString := self versionNumber printString, ' of ', self spec projectLabel.	Transcript cr; show: 'Recording ', displayString, '...'.	originalLoader := self versionSpec loader.	oldPolicy := loaderPolicy. 	oldBypassProgress := MetacelloPlatform current bypassProgressBars.	self loaderPolicy silently ifTrue: [ MetacelloPlatform current bypassProgressBars: true ].	[	MetacelloPlatform current			do:  [ | ans |				self versionSpec loader: originalLoader recordingSpecLoader.				ans := (self executeLoadFromArray: anArray) copy.				Transcript cr; show: '...finished ', self versionNumber printString.				^ans ]			displaying: 'Recording ', displayString ]				ensure: [					MetacelloPlatform current bypassProgressBars: oldBypassProgress.					self versionSpec loader: originalLoader.					loaderPolicy := oldPolicy ]! !!MetacelloMCVersion methodsFor: 'private' stamp: 'DaleHenrichs 3/6/2010 08:35'!executeLoadFromArray: anArray	| loader mcLoader |	loader := MetacelloMCVersionSpecLoader on: self spec.	loader required: anArray.	loaderPolicy notNil ifTrue: [ loader loaderPolicy: loaderPolicy ].	mcLoader := loader load.	mcLoader doingLoads: [ self project configuration class metacelloVersion: self versionString loads: anArray ].	^mcLoader! !!MetacelloMCVersion methodsFor: 'querying' stamp: 'DaleHenrichs 2/4/2010 10:32'!expandToLoadableSpecNames: nameList	"Just like #resolveToLoadableSpecs:, but returns list of spec names instead of specs"		^self spec expandToLoadableSpecNames: nameList! !!MetacelloMCVersion methodsFor: 'actions' stamp: 'DaleHenrichs 3/7/2010 08:25'!fetch	^self doFetchRequiredFromArray: self spec defaultPackageNames! !!MetacelloMCVersion methodsFor: 'actions' stamp: 'DaleHenrichs 3/7/2010 08:25'!fetch: required	^required fetchRequiredForMetacelloMCVersion: self! !!MetacelloMCVersion methodsFor: 'private' stamp: 'DaleHenrichs 3/11/2010 16:34'!fetchRequiredFromArray: anArray	| originalLoader displayString newLoader |	originalLoader := self versionSpec loader.	newLoader := originalLoader fetchingSpecLoader.	displayString := newLoader actionLabel, self versionNumber printString, ' of ', self spec projectLabel.	MetacelloPlatform current		do:  [			[	self versionSpec loader: newLoader.				^self executeLoadFromArray: anArray ]					ensure: [ self versionSpec loader: originalLoader]]		displaying: displayString! !!MetacelloMCVersion methodsFor: 'querying' stamp: 'dkh 10/21/2009 14:37'!groups	"Answers the list of groups associated with this version"		| groups |	groups := OrderedCollection new.	self spec projectDo: [:ignored | ] packageDo: [:ignored | ] groupDo: [:grp | groups add: grp ].	^groups! !!MetacelloMCVersion methodsFor: 'accessing' stamp: 'DaleHenrichs 3/29/2010 15:31'!ignoreImage: aBool 	"by default ignoreImage is false"		self loaderPolicy ignoreImage: aBool ! !!MetacelloMCVersion methodsFor: 'actions' stamp: 'DaleHenrichs 3/4/2010 15:37'!load	^self doLoadRequiredFromArray: self spec defaultPackageNames! !!MetacelloMCVersion methodsFor: 'actions' stamp: 'dkh 6/15/2009 22:34'!load: required	^required loadRequiredForMetacelloMCVersion: self! !!MetacelloMCVersion methodsFor: 'private' stamp: 'DaleHenrichs 3/11/2010 14:06'!loadRequiredFromArray: anArray	| displayString |	displayString := 'Loading ', self versionNumber printString, ' of ', self spec projectLabel.	MetacelloPlatform current		do: [ ^self executeLoadFromArray: anArray ]		displaying: displayString! !!MetacelloMCVersion methodsFor: 'private' stamp: 'dkh 6/18/2009 10:12'!loader: aLoader	self versionSpec loader: aLoader! !!MetacelloMCVersion methodsFor: 'accessing' stamp: 'DaleHenrichs 3/6/2010 08:21'!loaderPolicy	loaderPolicy == nil ifTrue: [ loaderPolicy := MetacelloLoaderPolicy new ].	^ loaderPolicy! !!MetacelloMCVersion methodsFor: 'accessing' stamp: 'DaleHenrichs 3/6/2010 08:20'!loaderPolicy: anObject	loaderPolicy := anObject! !!MetacelloMCVersion methodsFor: 'querying' stamp: 'dkh 10/24/2009 20:02'!packageNamed: aString	^self packageNamed: aString ifAbsent: [ ^nil ].! !!MetacelloMCVersion methodsFor: 'querying' stamp: 'dkh 10/24/2009 20:04'!packageNamed: aString ifAbsent: aBlock	| pkg |	(pkg := self spec packageNamed: aString ifAbsent: []) == nil		ifTrue: [ ^aBlock value ].	^pkg referencedSpec! !!MetacelloMCVersion methodsFor: 'querying' stamp: 'dkh 10/21/2009 14:37'!packages	"Answers the list of packages associated with this version"	| packages |	packages := OrderedCollection new.	self spec projectDo: [:ignored | ] packageDo: [:pkg | packages add: pkg ] groupDo: [:ignored | ].	^packages! !!MetacelloMCVersion methodsFor: 'querying' stamp: 'dkh 10/21/2009 15:06'!packagesForSpecNamed: aString	"resolves list of packages associated with the named spec.	   If the spec is a packages, answer a list including only the package. #requires: and #includes:			fields in the package are ignored.	   If the spec is a project, answers an empty list.	   If the spec is a group, answers the list of packages in the #includes: field of the group. 			Groups in the #includes: field are expanded following the transitive closure on groups"	"If there is no spec named <aString>, answers an empty list"	^self packagesForSpecNamed: aString ifAbsent: [ ^#() ]! !!MetacelloMCVersion methodsFor: 'querying' stamp: 'dkh 10/21/2009 15:20'!packagesForSpecNamed: aString ifAbsent: aBlock	"resolves list of packages associated with the named spec.	   If the spec is a packages, answer a list including only the package. #requires: and #includes:			fields in the package are ignored.	   If the spec is a project, answers an empty list.	   If the spec is a group, answers the list of packages in the #includes: field of the group. 			Groups in the #includes: field are expanded following the transitive closure on groups"	"If there is no spec named <aString>, aBlock is evaluated"	| pkgSpec |	pkgSpec := self spec packageNamed: aString ifAbsent: aBlock.	^pkgSpec resolveToPackagesIn: self spec visited: MetacelloVisitedPackages new! !!MetacelloMCVersion methodsFor: 'querying' stamp: 'dkh 10/24/2009 19:45'!projects	"Answers the list of projects associated with this version"	| projects |	projects := OrderedCollection new.	self spec projectDo: [:prj | projects add: prj projectReference ] packageDo: [:ignored | ] groupDo: [:ignored | ].	^projects! !!MetacelloMCVersion methodsFor: 'actions' stamp: 'DaleHenrichs 3/11/2010 10:07'!record	^self doRecordRequiredFromArray: self spec defaultPackageNames! !!MetacelloMCVersion methodsFor: 'actions' stamp: 'DaleHenrichs 3/11/2010 10:06'!record: required	^required recordRequiredForMetacelloMCVersion: self! !!MetacelloMCVersion methodsFor: 'accessing' stamp: 'DaleHenrichs 3/7/2010 08:11'!repositoryOverrides: repositoriesCollection 	self loaderPolicy overrideRepositories: repositoriesCollection! !!MetacelloMCVersion methodsFor: 'querying' stamp: 'DaleHenrichs 2/3/2010 15:43'!resolveToLoadableSpecs: nameList	"Resolves names in namelist to the  list of packages and projects in the version that would be loaded. Projects are 	not traversed during the transitive closure. The scope is that of the version itself.	   If the spec is a package, answer a list including the package and the transitive closure on 			its #requires: and #includes: fields.	   If the spec is a project, answer the project.	   If the spec is a group, answers the list of packages in the #includes: field of the group. 			Groups in the #includes: field are expanded following the transitive closure on groups"	^self spec resolveToLoadableSpecs: nameList! !!MetacelloMCVersion methodsFor: 'accessing' stamp: 'DaleHenrichs 3/29/2010 15:32'!silently: aBool 	"by default silently is false"		self loaderPolicy silently: aBool! !!MetacelloVersion class methodsFor: 'instance creation' stamp: 'tg 8/30/2009 18:07'!fromSpec: aMetacelloVersionSpec	^(self fromString: aMetacelloVersionSpec versionString) 		spec: aMetacelloVersionSpec;		yourself! !!MetacelloVersion class methodsFor: 'instance creation' stamp: 'dkh 8/31/2009 05:13'!fromString: aString	^self new versionNumber: aString asMetacelloVersionNumber! !!MetacelloVersion methodsFor: 'comparing' stamp: 'dkh 6/14/2009 09:40'!< aMetacelloVersion	aMetacelloVersion species = self species ifFalse: [ ^false ].	^self versionNumber < aMetacelloVersion versionNumber! !!MetacelloVersion methodsFor: 'comparing' stamp: 'dkh 6/14/2009 09:41'!= aMetacelloVersion	aMetacelloVersion species = self species ifFalse: [ ^false ].	^self versionNumber = aMetacelloVersion versionNumber! !!MetacelloVersion methodsFor: 'querying' stamp: 'dkh 10/13/2009 13:00'!author	^self spec author value! !!MetacelloVersion methodsFor: 'querying' stamp: 'dkh 8/9/2009 11:48'!blessing	^self spec blessing value! !!MetacelloVersion methodsFor: 'private' stamp: 'DaleHenrichs 2/8/2010 11:33'!computeVersionStatus	"all projects and packages are loaded and match specification"	self isAllLoadedToSpec ifTrue: [ ^#allLoadedToSpec ].	"all loaded projects and packages match specifications (at least one package loaded)"	self isLoadedToSpec ifTrue: [ ^#loadedToSpec ].	"all loaded projects and packages match constraints (at least one package loaded)"	self isLoadedMatchConstraints ifTrue: [ ^#loadedMatchConstraints ].	"at least one package loaded"	self isSomethingLoaded ifTrue: [ ^#somethingLoaded ].	^#noStatus! !!MetacelloVersion methodsFor: 'querying' stamp: 'dkh 7/31/2009 11:48'!description	^self spec description value! !!MetacelloVersion methodsFor: 'comparing' stamp: 'dkh 6/14/2009 09:41'!hash	^self versionNumber hash! !!MetacelloVersion methodsFor: 'accessing' stamp: 'dkh 1/7/2010 18:48'!importedVersions	importedVersions == nil ifTrue: [ importedVersions := #() ].	^importedVersions! !!MetacelloVersion methodsFor: 'accessing' stamp: 'dkh 1/7/2010 18:57'!importedVersions: aCollection	importedVersions := aCollection! !!MetacelloVersion methodsFor: 'testing' stamp: 'DaleHenrichs 2/5/2010 10:56'!isAllLoadedToSpec	"all projects and packages are loaded and match specification"		^self spec isAllLoadedToSpec! !!MetacelloVersion methodsFor: 'testing' stamp: 'DaleHenrichs 2/5/2010 11:08'!isLoadedMatchConstraints	"all loaded projects and packages match constraints"		^self spec isLoadedMatchConstraints! !!MetacelloVersion methodsFor: 'testing' stamp: 'DaleHenrichs 2/5/2010 11:07'!isLoadedToSpec	"all loaded projects and packages match specifications"		^self spec isLoadedToSpec! !!MetacelloVersion methodsFor: 'testing' stamp: 'DaleHenrichs 2/4/2010 10:19'!isPossibleBaseline	^self spec isPossibleBaseline! !!MetacelloVersion methodsFor: 'testing' stamp: 'DaleHenrichs 2/5/2010 11:15'!isSomethingLoaded	"at least one project or package has been loaded"		^self spec isSomethingLoaded! !!MetacelloVersion methodsFor: 'actions' stamp: 'dkh 6/8/2009 17:45'!load	^self subclassResponsibility! !!MetacelloVersion methodsFor: 'actions' stamp: 'dkh 6/8/2009 17:45'!load: required	^self subclassResponsibility! !!MetacelloVersion methodsFor: 'testing' stamp: 'DaleHenrichs 2/8/2010 11:42'!name	^self versionString! !!MetacelloVersion methodsFor: 'printing' stamp: 'DaleHenrichs 3/9/2010 16:32'!printOn: aStream 	| label vs |	(vs := self versionStatus) == #somethingLoaded ifTrue: [ aStream nextPutAll: '<>' ].	vs == #loadedMatchConstraints ifTrue: [ aStream nextPutAll: '>=' ].	vs == #loadedToSpec ifTrue: [ aStream nextPut: $~ ].	self versionNumber printOn: aStream.	self spec ~~ nil		ifTrue: [(label := self spec projectLabel) isEmpty				ifFalse: [aStream nextPutAll: ' [' , label , ']']]! !!MetacelloVersion methodsFor: 'querying' stamp: 'dkh 6/8/2009 16:03'!project	^self spec project! !!MetacelloVersion methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 16:32'!projectLabel	^self spec projectLabel! !!MetacelloVersion methodsFor: 'accessing' stamp: 'dkh 05/04/2009 20:26'!spec	^spec! !!MetacelloVersion methodsFor: 'accessing' stamp: 'dkh 05/04/2009 20:26'!spec: aMetacellVersionSpec	spec := aMetacellVersionSpec! !!MetacelloVersion methodsFor: 'querying' stamp: 'dkh 10/13/2009 13:01'!timestamp	^self spec timestamp value! !!MetacelloVersion methodsFor: 'actions' stamp: 'dkh 05/04/2009 20:26'!unload	^self spec unload! !!MetacelloVersion methodsFor: 'querying' stamp: 'dkh 6/14/2009 09:39'!versionNumber	^versionNumber! !!MetacelloVersion methodsFor: 'accessing' stamp: 'dkh 6/14/2009 09:39'!versionNumber: aVersionNumber	versionNumber := aVersionNumber! !!MetacelloVersion methodsFor: 'accessing' stamp: 'dkh 6/15/2009 20:07'!versionSpec	^self spec! !!MetacelloVersion methodsFor: 'accessing' stamp: 'DaleHenrichs 2/6/2010 16:49'!versionStatus	versionStatus == nil ifTrue: [ versionStatus := self computeVersionStatus].	^versionStatus! !!MetacelloVersion methodsFor: 'accessing' stamp: 'DaleHenrichs 2/4/2010 10:10'!versionStatus: aSymbol	versionStatus := aSymbol! !!MetacelloVersion methodsFor: 'querying' stamp: 'dkh 8/31/2009 05:11'!versionString	^self versionNumber versionString ! !!MetacelloVersion methodsFor: 'comparing' stamp: 'dkh 6/14/2009 12:42'!~> aMetacelloVersion	aMetacelloVersion species = self species ifFalse: [ ^false ].	^self versionNumber ~> aMetacelloVersion versionNumber! !!MetacelloVersionNumber class methodsFor: 'private' stamp: 'TestRunner 10/19/2009 10:22'!extractNumericComponent: subString	"$. separated components are integers"	| number |	number := [subString asNumber] 						on: Error 						do: [:ex | ex return: subString ].	^number asString = subString		ifTrue: [ number ]		ifFalse: [ subString ]! !!MetacelloVersionNumber class methodsFor: 'instance creation' stamp: 'dkh 8/13/2009 12:20'!fromString: aString	| new components |	components := OrderedCollection new.	(aString findTokens: '.') do: [:subString | | strs |		strs := subString findTokens: '-'.		"first subString token could be an integer"		components add: (self extractNumericComponent: strs first).		strs size > 1			ifTrue: [				"remaining are uncoditionally Strings, because of leading $-"				components addAll: strs allButFirst ]].	new := self new: components size.	1 to: components size do: [:i | new at: i put: (components at: i) ].	^new! !!MetacelloVersionNumber methodsFor: 'comparing' stamp: 'dkh 11/3/2009 10:34'!< aMetacelloVersionNumber	| mySize aSize commonSize count more |	aMetacelloVersionNumber species = self species ifFalse: [ ^false ].	mySize := self size.	aSize := aMetacelloVersionNumber size.	commonSize :=  mySize min: aSize.	count := 0.	more := true.	[ more and: [ count < commonSize ]] whileTrue: [		(self at: count + 1) = (aMetacelloVersionNumber at: count + 1)			ifTrue: [ count := count + 1 ]			ifFalse: [ more := false ]].	count < commonSize		ifTrue: [ 			^(self at: count + 1) 				metacelloVersionComponentLessThan: (aMetacelloVersionNumber at: count + 1) ].	mySize < aSize		ifTrue: [ 			mySize = 0 ifTrue: [ ^true ].			"if the versions at commonSize are equal and the next version slot in aMetacelloVersionNumber 			 is a string, then it's considered that I'm > aMetacelloVersionNumber			 (i.e., '2.9.9' is greater than '2.9.9-alpha.2')"			(self at: commonSize) = (aMetacelloVersionNumber at: commonSize)				ifFalse: [ ^true ]. 			^(aMetacelloVersionNumber at: commonSize+1) isString not]		ifFalse: [ 			mySize = aSize ifTrue: [ ^false ].			aSize <= 0 ifTrue: [ ^false ].			"if the versions at commonSize are equal and the next version slot is a string, 			 then it's considered that I'm < aMetacelloVersionNumber			 (i.e., '2.9.9-alpha.2' is less than '2.9.9')"			(self at: commonSize) = (aMetacelloVersionNumber at: commonSize)				ifFalse: [ ^false ].			 ^(self at: commonSize+1) isString]! !!MetacelloVersionNumber methodsFor: 'comparing' stamp: 'dkh 6/14/2009 09:21'!= aMetacelloVersionNumber	| mySize |	aMetacelloVersionNumber species = self species ifFalse: [ ^false ].	mySize := self size.	mySize = aMetacelloVersionNumber size ifFalse: [ ^false ].	1 to: mySize do: [:i |		(self at: i) = (aMetacelloVersionNumber at: i) ifFalse: [ ^false ]].	^true! !!MetacelloVersionNumber methodsFor: 'accessing' stamp: 'dkh 6/14/2009 13:29'!approximateBase	| base |	base := self copyFrom: 1 to: self size - 1.	base at: base size put: (base at: base size) + 1.	^base! !!MetacelloVersionNumber methodsFor: 'converting' stamp: 'dkh 6/14/2009 09:29'!asMetacelloVersionNumber	^self! !!MetacelloVersionNumber methodsFor: 'copying' stamp: 'dkh 6/14/2009 12:53'!copyFrom: start to: stop 	"Answer a copy of a subset of the receiver, starting from element at 	index start until element at index stop."	| newSize new j |	newSize := stop - start + 1.	new := self species new: newSize.	j := 0.	start to: stop do: [:i |		new at: j + 1 put: (self at: i).		j := j + 1 ].	^new! !!MetacelloVersionNumber methodsFor: 'enumerating' stamp: 'dkh 6/14/2009 09:37'!do: aBlock 	"Refer to the comment in Collection|do:."	1 to: self size do:		[:index | aBlock value: (self at: index)]! !!MetacelloVersionNumber methodsFor: 'enumerating' stamp: 'dkh 6/14/2009 09:37'!do: elementBlock separatedBy: separatorBlock	"Evaluate the elementBlock for all elements in the receiver,	and evaluate the separatorBlock between."	| beforeFirst | 	beforeFirst := true.	self do:		[:each |		beforeFirst			ifTrue: [beforeFirst := false]			ifFalse: [separatorBlock value].		elementBlock value: each]! !!MetacelloVersionNumber methodsFor: 'comparing' stamp: 'dkh 06/15/2009 14:30'!hash"Returns a numeric hash key for the receiver."| mySize interval hashValue |(mySize := self size) == 0  ifTrue: [ ^15243 ]."Choose an interval so that we sample at most 5 elements of the receiver"interval := ((mySize - 1) // 4) max: 1.hashValue := 4459.1 to: mySize by: interval do: [ :i | | anElement |  anElement := self at: i.  (anElement isKindOf: SequenceableCollection)    ifTrue: [      hashValue := (hashValue bitShift: -1) bitXor: anElement size.      ]    ifFalse: [      hashValue := (hashValue bitShift: -1) bitXor: anElement hash.      ].  ].^ hashValue abs! !!MetacelloVersionNumber methodsFor: 'operations' stamp: 'dkh 10/7/2009 14:28'!incrementMinorVersionNumber	| int |	self size to: 1 by: -1 do: [:index | 		(int := self at: index) isString 			ifFalse: [ 				self at: index put: int + 1.				^self ]].! !!MetacelloVersionNumber methodsFor: 'comparing' stamp: 'dkh 12/21/2009 13:32'!match: aVersionPattern	"Answer whether the version number of the receiver matches the given pattern string.	 A Metacello version number is made up of version sequences delimited by the characters $. and $-.	 The $. introduces a numeric version sequence and $- introduces an alphanumeric version sequence.	 	 A version pattern is made up of version pattern match sequences. also delimited by the characters $. 	 and $-.. Each pattern match sequence is tested against the corresponding version sequence of the 	 receiver, using the 'standard' pattern matching rules. All sequences must answer true for a match.		 The special pattern sequence '?' is a match for the corresponding version sequence and all subsequent 	 version sequences. '?' as the version pattern matches all versions. No more version pattern 	 sequences are permitted once the '?' sequence is used. If used, it is the last version pattern	 sequence. "		| patternVersion mySize patternSize |	patternVersion := aVersionPattern asMetacelloVersionNumber.	mySize := self size.	patternSize := patternVersion size.	mySize = patternSize 		ifFalse: [ 			mySize < patternSize ifTrue: [ ^false ].			(patternVersion at: patternSize) ~= '?' ifTrue: [ ^false ].			mySize := patternSize ].	1 to: mySize do: [:i | | pattern |		pattern := (patternVersion at: i) asString.		pattern = '?'			ifTrue: [i = mySize ifFalse: [ ^self error: 'Invalid version match pattern: ', aVersionPattern printString ]]			ifFalse: [ (pattern match: (self at: i) asString)  ifFalse: [ ^false ]]].	^true"  '1.1.1' asMetacelloVersionNumber match: '*.*.*'. -> true  '1.1.1' asMetacelloVersionNumber match: '*.#.*'. -> true  '1.10.1' asMetacelloVersionNumber match: '*.#.*'. -> false  '1.1.1' asMetacelloVersionNumber match: '*.*'. -> false  '1.1.1' asMetacelloVersionNumber match: '*.?'. -> true  '1.0' asMetacelloVersionNumber match: '1.?'. -> true  '2.0' asMetacelloVersionNumber match: '1.?'. -> false  '1.1.1' asMetacelloVersionNumber match: '?'. -> true  '1' asMetacelloVersionNumber match: '*.?'. -> false  '1-alpha5.0' asMetacelloVersionNumber match: '1-alpha*.?'. -> true  '1-alpha15.0.1' asMetacelloVersionNumber match: '1-alpha*.?'. -> true  '1.1' asMetacelloVersionNumber match: '?.?'. -> ERROR: invalid version match pattern"! !!MetacelloVersionNumber methodsFor: 'printing' stamp: 'dkh 6/14/2009 09:59'!printOn: aStream	| beforeFirst | 	beforeFirst := true.	self do:		[:each |		beforeFirst			ifTrue: [beforeFirst := false]			ifFalse: [				each isString					ifTrue: [ aStream nextPut: $- ]					ifFalse: [ aStream nextPut: $. ] ].		aStream nextPutAll: each asString ]! !!MetacelloVersionNumber methodsFor: 'accessing' stamp: 'dkh 6/14/2009 09:57'!versionString	| strm |	strm := WriteStream on: String new.	self printOn: strm.	^strm contents! !!MetacelloVersionNumber methodsFor: 'comparing' stamp: 'dkh 6/14/2009 13:30'!~> aMetacelloVersionNumber	aMetacelloVersionNumber size == 1 ifTrue: [ ^false ].	^self >= aMetacelloVersionNumber and: [ self < aMetacelloVersionNumber approximateBase ]! !!MCRepository methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 3/5/2010 14:37'!asRepositorySpecFor: aMetacelloMCProject	self subclassResponsibility! !!Integer methodsFor: '*metacello-core' stamp: 'dkh 8/13/2009 10:38'!metacelloIntegerLessThanSelf: anInteger	^anInteger < self! !!Integer methodsFor: '*metacello-core' stamp: 'dkh 8/13/2009 12:04'!metacelloStringLessThanSelf: aString	"string version components are always '<' integer component"		^true! !!Integer methodsFor: '*metacello-core' stamp: 'dkh 8/13/2009 10:36'!metacelloVersionComponentLessThan: aMetacelloVersonComponent	^aMetacelloVersonComponent metacelloIntegerLessThanSelf: self! !!MetacelloGoferPackage class methodsFor: 'instance creation' stamp: 'dkh 12/15/2009 10:32'!name: aString packageFilename: packageFilename	^ self basicNew initializeName: aString packageFilename: packageFilename! !!MetacelloGoferPackage class methodsFor: 'package name matching' stamp: 'DaleHenrichs 3/18/2010 16:54'!packageFileName: pkgFileName matchesPackageName: wcPkgName	^(pkgFileName beginsWith: wcPkgName) 		ifTrue: [ 			(pkgFileName size = wcPkgName size) 			or: [ ((pkgFileName at: wcPkgName size + 1) = $-) 				or: [ ((pkgFileName at: wcPkgName size + 1) = $.) 					or: [ (pkgFileName at: wcPkgName size + 1) isDigit ]]]]		ifFalse: [			pkgFileName size >= wcPkgName size ifTrue: [ ^false ].			(wcPkgName beginsWith: pkgFileName) ifFalse: [ ^false ].			^(wcPkgName at: pkgFileName size + 1) = $. ]! !!MetacelloGoferPackage methodsFor: 'querying' stamp: 'dkh 9/25/2009 11:26'!currentVersionInfo	| wc |	(wc := self workingCopy) ~~ nil		ifTrue: [ 			wc ancestry ancestors isEmpty not				ifTrue: [ ^wc ancestry ancestors first ]].	^nil! !!MetacelloGoferPackage methodsFor: 'private' stamp: 'dkh 10/15/2009 10:48'!findWorkingCopy	"Answer a working copy, or nil if the package is not loaded."	| wcs |	wcs := MCWorkingCopy allManagers select: [ :each | self matchesWorkingCopy: each ].	wcs isEmpty ifTrue: [ ^nil ].	^wcs detectMax: [:ea | ea package name size ]! !!MetacelloGoferPackage methodsFor: 'initialization' stamp: 'dkh 12/15/2009 10:31'!initializeName: aString packageFilename: packagefilename	name := aString.	packageFilename := packagefilename! !!MetacelloGoferPackage methodsFor: 'private' stamp: 'DaleHenrichs 3/19/2010 10:04'!matches: aLoadableReference	"does Monticello-style #versionInfoFromVersionNamed: matching"		| pFilename |	(((pFilename := self packageFilename) == nil) or: [ self name = self packageFilename] ) ifTrue: [ ^super matches: aLoadableReference ].	^aLoadableReference name beginsWith: pFilename ! !!MetacelloGoferPackage methodsFor: 'private' stamp: 'dkh 12/15/2009 10:26'!matchesWorkingCopy: aWorkingCopy	"check that the working copy package name matches the package file name and that the first ancestor's package file name	 matches the packageName"		| pFilename |	(pFilename := self packageFilename) == nil ifTrue: [ ^super matchesWorkingCopy: aWorkingCopy ].	(self class 		packageFileName: pFilename 		matchesPackageName: aWorkingCopy package name)			ifTrue: [				aWorkingCopy ancestry ancestors isEmpty ifTrue: [ ^true ].				^self class 					packageFileName: aWorkingCopy ancestry ancestors first name 					matchesPackageName: self packageName ].	^false! !!MetacelloGoferPackage methodsFor: 'accessing' stamp: 'dkh 10/12/2009 16:25'!packageFilename	^packageFilename! !!MetacelloGoferPackage methodsFor: 'accessing' stamp: 'dkh 10/15/2009 10:00'!workingCopy		workingCopy == nil ifTrue: [ workingCopy := self findWorkingCopy ].	^workingCopy! !!BlockClosure methodsFor: '*metacello-core' stamp: 'dkh 10/7/2009 00:12'!setAuthorInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setAuthorWithBlock: self! !!BlockClosure methodsFor: '*metacello-core' stamp: 'dkh 10/7/2009 00:12'!setBlessingInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setBlessingWithBlock: self! !!BlockClosure methodsFor: '*metacello-core' stamp: 'dkh 10/7/2009 00:14'!setDescriptionInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setDescriptionWithBlock: self! !!BlockClosure methodsFor: '*metacello-core' stamp: 'dkh 10/9/2009 11:28'!setPackage: aString withInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setPackage: aString withBlock: self! !!BlockClosure methodsFor: '*metacello-core' stamp: 'dkh 10/9/2009 11:17'!setProject: aString withInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setProject: aString withBlock: self! !!BlockClosure methodsFor: '*metacello-core' stamp: 'dkh 10/7/2009 00:15'!setTimestampInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setTimestampWithBlock: self! !!BlockClosure methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 1/16/2010 11:42'!valueSupplyingMetacelloAnswers: aListOfPairs	"evaluate the block using a list of questions / answers that might be called upon to	automatically respond to Object>>confirm: or FillInTheBlank requests"	^ [self value] 		on: ProvideAnswerNotification		do: 			[:notify | | answer caption |						caption := notify messageText withSeparatorsCompacted. "to remove new lines"			answer := aListOfPairs				detect: 					[:each | caption = each first or:						[(caption includesSubstring: each first caseSensitive: false) or:						[(each first match: caption) or:						[(String includesSelector: #matchesRegex:) and: 						[ [ caption matchesRegex: each first ] on: Error do: [:ignored | false ]]]]]]					ifNone: [nil].			answer				ifNotNil: [notify resume: answer second]				ifNil: 					[ | outerAnswer |					outerAnswer := ProvideAnswerNotification signal: notify messageText.					outerAnswer 						ifNil: [notify resume] 						ifNotNil: [notify resume: outerAnswer]]]! !!Collection methodsFor: '*metacello-core' stamp: 'dkh 6/6/2009 11:45'!addToMetacelloPackages: aMetacelloPackagesSpec	self do: [:each | each addToMetacelloPackages: aMetacelloPackagesSpec ]! !!Collection methodsFor: '*metacello-mc' stamp: 'dkh 6/7/2009 10:16'!addToMetacelloRepositories: aMetacelloRepositoriesSpec	self do: [:each | each addToMetacelloRepositories: aMetacelloRepositoriesSpec ]! !!Collection methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 3/7/2010 08:26'!fetchRequiredForMetacelloMCVersion: aMetacelloMCVersion	^aMetacelloMCVersion doFetchRequiredFromArray: self.! !!Collection methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 3/4/2010 15:37'!loadRequiredForMetacelloMCVersion: aMetacelloMCVersion	^aMetacelloMCVersion doLoadRequiredFromArray: self.! !!Collection methodsFor: '*metacello-core' stamp: 'dkh 6/6/2009 11:46'!mergeIntoMetacelloPackages: aMetacelloPackagesSpec	self do: [:each | each mergeIntoMetacelloPackages: aMetacelloPackagesSpec ]! !!Collection methodsFor: '*metacello-mc' stamp: 'dkh 6/7/2009 10:19'!mergeIntoMetacelloRepositories: aMetacelloRepositoriesSpec	self do: [:each | each mergeIntoMetacelloRepositories: aMetacelloRepositoriesSpec ]! !!Collection methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 3/11/2010 10:06'!recordRequiredForMetacelloMCVersion: aMetacelloMCVersion	^aMetacelloMCVersion doRecordRequiredFromArray: self.! !!Collection methodsFor: '*metacello-core' stamp: 'dkh 6/6/2009 11:42'!removeFromMetacelloPackages: aMetacelloPackagesSpec	self do: [:each | each removeFromMetacelloPackages: aMetacelloPackagesSpec ]! !!Collection methodsFor: '*metacello-mc' stamp: 'dkh 6/7/2009 10:23'!removeFromMetacelloRepositories: aMetacelloRepositoriesSpec	self do: [:each | each removeFromMetacelloRepositories: aMetacelloRepositoriesSpec ]! !!Collection methodsFor: '*metacello-mc' stamp: 'dkh 10/21/2009 19:18'!resolvePackageSpecsNamedForMetacelloMCVersion: aMetacelloMCVersion visited: visited ifAbsent: aBlock 	^ aMetacelloMCVersion		allPackagesForSpecs: (self collect: [:ea | 			aMetacelloMCVersion spec packageNamed: ea ifAbsent: aBlock])		visited: visited! !!Collection methodsFor: '*metacello-core' stamp: 'dkh 9/23/2009 08:46'!setIncludesInMetacelloPackage: aMetacelloPackageSpec	aMetacelloPackageSpec setIncludes: self asArray.! !!Collection methodsFor: '*metacello-core' stamp: 'dkh 6/8/2009 19:02'!setLoadsInMetacelloProject: aMetacelloPackageSpec	aMetacelloPackageSpec setLoads: self asArray.! !!Collection methodsFor: '*metacello-core' stamp: 'dkh 6/6/2009 10:08'!setRequiresInMetacelloPackage: aMetacelloPackageSpec	aMetacelloPackageSpec setRequires: self asArray.! !!String methodsFor: '*metacello-core' stamp: 'dkh 06/03/2009 12:41'!addToMetacelloPackages: aMetacelloPackagesSpec	| spec |	spec := 		(aMetacelloPackagesSpec project packageSpec)			file: self;			yourself.	aMetacelloPackagesSpec addMember: 		(aMetacelloPackagesSpec addMember 			name: spec name;			spec: spec;			yourself)! !!String methodsFor: '*metacello-mc' stamp: 'dkh 6/7/2009 10:15'!addToMetacelloRepositories: aMetacelloRepositoriesSpec	| spec |	spec := 		(aMetacelloRepositoriesSpec project repositorySpec)			description: self;			yourself.	aMetacelloRepositoriesSpec addMember: 		(aMetacelloRepositoriesSpec addMember 			name: spec name;			spec: spec;			yourself)! !!String methodsFor: '*metacello-core' stamp: 'dkh 6/14/2009 09:31'!asMetacelloVersionNumber	^MetacelloVersionNumber fromString: self! !!String methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 3/7/2010 08:26'!fetchRequiredForMetacelloMCVersion: aMetacelloMCVersion	^aMetacelloMCVersion doFetchRequiredFromArray: (Array with: self).! !!String methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 3/7/2010 08:26'!loadRequiredForMetacelloMCVersion: aMetacelloMCVersion	^aMetacelloMCVersion doLoadRequiredFromArray: (Array with: self).! !!String methodsFor: '*metacello-core' stamp: 'dkh 6/6/2009 11:59'!mergeIntoMetacelloPackages: aMetacelloPackagesSpec	| spec |	spec := 		(aMetacelloPackagesSpec project packageSpec)			file: self;			yourself.	aMetacelloPackagesSpec addMember: 		(aMetacelloPackagesSpec mergeMember 			name: spec name;			spec: spec;			yourself)! !!String methodsFor: '*metacello-mc' stamp: 'dkh 6/7/2009 10:20'!mergeIntoMetacelloRepositories: aMetacelloRepositoriesSpec	| spec |	spec := 		(aMetacelloRepositoriesSpec project repositorySpec)			description: self;			yourself.	aMetacelloRepositoriesSpec addMember: 		(aMetacelloRepositoriesSpec mergeMember 			name: spec name;			spec: spec;			yourself)! !!String methodsFor: '*metacello-core-version comparison' stamp: 'dkh 8/13/2009 12:04'!metacelloIntegerLessThanSelf: anInteger	"integer version components are always '>' string component"	^false! !!String methodsFor: '*metacello-core-version comparison' stamp: 'dkh 8/13/2009 11:23'!metacelloStringLessThanSelf: aString	^aString < self! !!String methodsFor: '*metacello-core-version comparison' stamp: 'dkh 8/13/2009 11:22'!metacelloVersionComponentLessThan: aMetacelloVersonComponent	^aMetacelloVersonComponent metacelloStringLessThanSelf: self! !!String methodsFor: '*metacello-mc' stamp: 'dkh 9/23/2009 14:34'!packageFileSpecFor: aMetacelloPackagesSpec	^(aMetacelloPackagesSpec project packageSpec)			file: self;			yourself! !!String methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 3/11/2010 10:06'!recordRequiredForMetacelloMCVersion: aMetacelloMCVersion	^aMetacelloMCVersion doRecordRequiredFromArray: (Array with: self).! !!String methodsFor: '*metacello-core' stamp: 'dkh 6/6/2009 11:59'!removeFromMetacelloPackages: aMetacelloPackagesSpec	aMetacelloPackagesSpec addMember: 		(aMetacelloPackagesSpec removeMember 			name: self;			yourself)! !!String methodsFor: '*metacello-mc' stamp: 'dkh 6/7/2009 10:23'!removeFromMetacelloRepositories: aMetacelloRepositoriesSpec	aMetacelloRepositoriesSpec addMember: 		(aMetacelloRepositoriesSpec removeMember 			name: self;			yourself)! !!String methodsFor: '*metacello-mc' stamp: 'dkh 10/21/2009 19:18'!resolvePackageSpecsNamedForMetacelloMCVersion: aMetacelloMCVersion visited: visited ifAbsent: aBlock 	^ aMetacelloMCVersion 		allPackagesForSpecs:  {aMetacelloMCVersion spec packageNamed: self ifAbsent: aBlock}		visited: visited! !!String methodsFor: '*metacello-core' stamp: 'dkh 10/7/2009 00:13'!setAuthorInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setAuthorWithString: self! !!String methodsFor: '*metacello-core' stamp: 'dkh 9/13/2009 07:45'!setAuthorInMetacelloVersion: aMetacelloVersionSpec	aMetacelloVersionSpec setAuthor: 		(aMetacelloVersionSpec project valueHolderSpec			value: self;			yourself)! !!String methodsFor: '*metacello-core' stamp: 'dkh 10/7/2009 00:10'!setBlessingInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setBlessingWithString: self! !!String methodsFor: '*metacello-core' stamp: 'dkh 6/5/2009 11:48'!setBlessingInMetacelloVersion: aMetacelloVersionSpec	aMetacelloVersionSpec setBlessing: 		(aMetacelloVersionSpec project valueHolderSpec			value: self;			yourself)! !!String methodsFor: '*metacello-core' stamp: 'dkh 10/7/2009 00:14'!setDescriptionInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setDescriptionWithString: self! !!String methodsFor: '*metacello-core' stamp: 'dkh 6/5/2009 11:51'!setDescriptionInMetacelloVersion: aMetacelloVersionSpec	aMetacelloVersionSpec setDescription: 		(aMetacelloVersionSpec project valueHolderSpec			value: self;			yourself)! !!String methodsFor: '*metacello-core' stamp: 'dkh 9/23/2009 08:46'!setIncludesInMetacelloPackage: aMetacelloPackageSpec	aMetacelloPackageSpec setIncludes: { self }.! !!String methodsFor: '*metacello-core' stamp: 'dkh 6/8/2009 19:02'!setLoadsInMetacelloProject: aMetacelloPackageSpec	aMetacelloPackageSpec setLoads: { self }.! !!String methodsFor: '*metacello-core' stamp: 'dkh 10/9/2009 11:28'!setPackage: aString withInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setPackage: aString withString: self! !!String methodsFor: '*metacello-core' stamp: 'dkh 10/9/2009 11:16'!setProject: aString withInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setProject: aString withString: self! !!String methodsFor: '*metacello-core' stamp: 'dkh 6/6/2009 10:08'!setRequiresInMetacelloPackage: aMetacelloPackageSpec	aMetacelloPackageSpec setRequires: { self }.! !!String methodsFor: '*metacello-core' stamp: 'dkh 10/7/2009 00:15'!setTimestampInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setTimestampWithString: self! !!String methodsFor: '*metacello-core' stamp: 'dkh 9/13/2009 07:47'!setTimestampInMetacelloVersion: aMetacelloVersionSpec	aMetacelloVersionSpec setTimestamp: 		(aMetacelloVersionSpec project valueHolderSpec			value: self;			yourself)! !!MetacelloGoferLoad methodsFor: 'private' stamp: 'DaleHenrichs 3/5/2010 10:48'!updateRepositories	"Noop for Metacello...done by loader itself"! !!MCHttpRepository methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 3/5/2010 14:45'!asRepositorySpecFor: aMetacelloMCProject	^(aMetacelloMCProject repositorySpec)		description:  self description;	 	type: 'http';		yourself! !!MetacelloProjectSpecLoadConflict methodsFor: 'private' stamp: 'DaleHenrichs 2/5/2010 16:16'!isResumable	"Determine whether an exception is resumable."	^ true! !!MetacelloProjectSpecLoadError class methodsFor: 'instance creation' stamp: 'DaleHenrichs 1/19/2010 11:28'!projectSpec: aMetacelloMCProjectSpec	^self new		projectSpec: aMetacelloMCProjectSpec;		yourself! !!MetacelloProjectSpecLoadError methodsFor: 'private' stamp: 'DaleHenrichs 2/5/2010 16:18'!isResumable	"Determine whether an exception is resumable."	^ false! !!MetacelloProjectSpecLoadError methodsFor: 'accessing' stamp: 'DaleHenrichs 1/19/2010 11:29'!projectSpec	^projectSpec! !!MetacelloProjectSpecLoadError methodsFor: 'accessing' stamp: 'DaleHenrichs 1/19/2010 11:29'!projectSpec: aMetacelloMCProjectSpec	projectSpec := aMetacelloMCProjectSpec! !!MCDictionaryRepository methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 3/5/2010 14:45'!asRepositorySpecFor: aMetacelloMCProject	^(aMetacelloMCProject repositorySpec)		description:  'dictionary://Metacello_Dictionary';	 	type: 'dictionary';		yourself! !!MCDictionaryRepository methodsFor: '*metacello-mc' stamp: 'dkh 12/22/2009 12:06'!versionInfoFromVersionNamed: aString	| versions |	versions := self dictionary values select: [:version | version info name beginsWith: aString ].	versions isEmpty ifTrue: [ ^ nil ].	versions := versions asSortedCollection: [ :a :b |		([ (a info name copyAfterLast: $.) asNumber ] on: Error do: [:ex | ex return: 0 ]) <= 			([ (b info name copyAfterLast: $.) asNumber ] on: Error do: [:ex | ex return: 0 ]) ].	^ versions last info! !!MetacelloConfigTemplate class methodsFor: 'private' stamp: 'dkh 10/11/2009 10:08'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!MetacelloConfigTemplate class methodsFor: 'private' stamp: 'DaleHenrichs 6/14/2010 12:53'!ensureMetacello	"Bootstrap Gofer (if necessary), load latest mcz file for ConfigurationOfMetacello (using old 	 Gofer API), then load the latest version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [ | error |		"list of repositories to try, in case primary repository is not accessible"		(Array 			with: 'http://www.squeaksource.com/MetacelloRepository' 			with: 'http://seaside.gemstone.com/ss/metacello') do: [:repositoryUrl |				([					Smalltalk at: #Gofer ifAbsent: [					"Current version of Gofer from which to bootstrap - as of 1.0-beta.21"						self bootstrapPackage: 'Gofer-Core-lr.115' from: repositoryUrl ].					Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |						gofer := goferClass new							url: repositoryUrl;							yourself.						[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].						gofer load ]]							on: Error							do: [ :ex |								error := ex.								Transcript 									cr; 									show: 'failed ensureMetacello: ';									show: ex description printString;									show: '...retrying'.								"try again"								ex return: nil ]) ~~ nil					ifTrue: [						"load 'default' group of Metacello"						(Smalltalk at: #ConfigurationOfMetacello) perform: #load.						^self ]].		"shouldn't get here unless the load failed ... throw an error"		self error: 'retry with alternate repository failed: ', error description printString ]! !!MetacelloConfigTemplate class methodsFor: 'metacello tool support' stamp: 'dkh 10/7/2009 14:52'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!MetacelloConfigTemplate class methodsFor: 'metacello tool support' stamp: 'dkh 11/03/2009 11:04'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!MetacelloConfigTemplate class methodsFor: 'loading' stamp: 'dkh 1/8/2010 10:38'!load	"self load"	^self project latestVersion load! !!MetacelloConfigTemplate class methodsFor: 'metacello tool support' stamp: 'dkh 11/3/2009 10:12'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!MetacelloConfigTemplate class methodsFor: 'accessing' stamp: 'dkh 10/13/2009 10:36'!project	^self new project! !!MetacelloConfigTemplate class methodsFor: 'unloading Metacello' stamp: 'DaleHenrichs 1/27/2010 11:57'!unloadMetacello	Smalltalk at: #ConfigurationOfMetacello ifPresent: [:cls | cls unloadMetacello ]! !!MetacelloConfigTemplate methodsFor: 'accessing' stamp: 'dkh 12/10/2009 11:55'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!MetacelloDirective class methodsFor: 'instance creation' stamp: 'DaleHenrichs 3/9/2010 16:42'!loadPackage: aPackageSpec externalReference: externalReference loader: aLoader	^MetacelloPackageLoadDirective new		spec: aPackageSpec externalReference: externalReference  loader: aLoader ! !!MetacelloDirective class methodsFor: 'instance creation' stamp: 'DaleHenrichs 3/9/2010 12:19'!loader: aLoader	^self new		loader: aLoader! !!MetacelloDirective class methodsFor: 'instance creation' stamp: 'DaleHenrichs 3/9/2010 10:48'!postLoadSpec: packageOrVersionSpec loader: aLoader	^MetacelloPostLoadDirective new		spec: packageOrVersionSpec loader: aLoader! !!MetacelloDirective class methodsFor: 'instance creation' stamp: 'DaleHenrichs 3/9/2010 10:48'!preLoadSpec: packageOrVersionSpec loader: aLoader	^MetacelloPreLoadDirective new		spec: packageOrVersionSpec loader: aLoader! !!MetacelloDirective methodsFor: 'actions' stamp: 'DaleHenrichs 3/9/2010 12:11'!addTo: aLoaderDirective	aLoaderDirective add: self! !!MetacelloDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 3/10/2010 15:48'!directivesDo: aBlock	aBlock value: self! !!MetacelloDirective methodsFor: 'printing' stamp: 'DaleHenrichs 3/9/2010 16:36'!label	^self spec label! !!MetacelloDirective methodsFor: 'actions' stamp: 'DaleHenrichs 3/9/2010 14:53'!loadUsing: aLoaderDirective gofer: aGofer	self subclassResponsibility! !!MetacelloDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 10:44'!loader	^loader! !!MetacelloDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 12:19'!loader: aLoader	loader := aLoader! !!MetacelloDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 3/11/2010 13:40'!packageDirectivesDo: aBlock! !!MetacelloDirective methodsFor: 'actions' stamp: 'DaleHenrichs 3/11/2010 13:49'!packageDo: aBlock! !!MetacelloDirective methodsFor: 'actions' stamp: 'DaleHenrichs 4/8/2010 16:31'!postLoadDo: aBlock	! !!MetacelloDirective methodsFor: 'actions' stamp: 'DaleHenrichs 4/8/2010 16:31'!preLoadDo: aBlock! !!MetacelloDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 4/7/2010 12:25'!prepostLoadDirectivesDo: aBlock! !!MetacelloDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 4/7/2010 12:26'!prepostLoadDo: aBlock! !!MetacelloDirective methodsFor: 'printing' stamp: 'DaleHenrichs 3/9/2010 11:53'!printOn: aStream	self printOn: aStream indent: 0! !!MetacelloDirective methodsFor: 'printing' stamp: 'DaleHenrichs 3/9/2010 16:35'!printOn: aStream indent: indent	indent timesRepeat: [ aStream tab ].	aStream		nextPutAll: self title;		nextPutAll: ' : ';		nextPutAll: self label.! !!MetacelloDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 11:06'!spec	^spec! !!MetacelloDirective methodsFor: 'initialize-release' stamp: 'DaleHenrichs 3/9/2010 10:46'!spec: packageOrVersionSpec loader: aLoader	spec := packageOrVersionSpec.	loader := aLoader! !!MetacelloDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 16:35'!title	self subclassResponsibility! !!MetacelloDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 3/12/2010 10:27'!versionDirectivesDo: aBlock! !!MetacelloDirective methodsFor: 'actions' stamp: 'DaleHenrichs 4/7/2010 12:32'!versionDo: aBlock! !!MetacelloPackageLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 16:42'!externalReference	^ externalReference! !!MetacelloPackageLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 16:39'!file	^self externalReference name! !!MetacelloPackageLoadDirective methodsFor: 'printing' stamp: 'DaleHenrichs 3/9/2010 16:36'!label	^self file! !!MetacelloPackageLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 3/9/2010 14:58'!loadUsing: aLoaderDirective gofer: aGofer	aLoaderDirective loadPackageDirective: self gofer: aGofer! !!MetacelloPackageLoadDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 3/11/2010 21:09'!packageDirectivesDo: aBlock	aBlock value: self! !!MetacelloPackageLoadDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 3/11/2010 13:55'!packageDo: aBlock	aBlock value: self! !!MetacelloPackageLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/12/2010 09:29'!packageName	^self externalReference packageName! !!MetacelloPackageLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 16:39'!repository	^self externalReference repository! !!MetacelloPackageLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 15:24'!resolvedReference	^ resolvedReference! !!MetacelloPackageLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 15:24'!resolvedReference: anObject	resolvedReference := anObject! !!MetacelloPackageLoadDirective methodsFor: 'initialize-release' stamp: 'DaleHenrichs 3/9/2010 16:41'!spec: aPackageSpec externalReference: anExternalReference loader: aLoader	super spec: aPackageSpec loader: aLoader.	externalReference := anExternalReference! !!MetacelloPackageLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 16:35'!title	^'load'! !!MetacelloPostLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 4/14/2010 15:19'!addTo: aLoaderDirective	spec postLoadDoIt ~~ nil ifTrue: [ aLoaderDirective add: self ]! !!MetacelloPostLoadDirective methodsFor: 'printing' stamp: 'DaleHenrichs 4/14/2010 15:28'!label	^super label, ' >> ', self spec postLoadDoIt asString! !!MetacelloPostLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 4/14/2010 14:30'!loadUsing: aLoaderDirective gofer: aGofer	aLoaderDirective loadPostloadDirective: self.! !!MetacelloPostLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 4/8/2010 16:15'!postLoadDo: aBlock	aBlock value: self! !!MetacelloPostLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 16:35'!title	^'postload'! !!MetacelloPreLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 4/14/2010 15:19'!addTo: aLoaderDirective	spec preLoadDoIt ~~ nil ifTrue: [ aLoaderDirective add: self ]! !!MetacelloPreLoadDirective methodsFor: 'printing' stamp: 'DaleHenrichs 4/14/2010 15:28'!label	^super label, ' >> ', self spec preLoadDoIt asString! !!MetacelloPreLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 4/14/2010 14:30'!loadUsing: aLoaderDirective gofer: aGofer	aLoaderDirective loadPreloadDirective: self.	! !!MetacelloPreLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 4/8/2010 16:16'!preLoadDo: aBlock	aBlock value: self! !!MetacelloPreLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 16:35'!title	^'preload'! !!MetacelloPrePostLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 4/9/2010 12:45'!evaluateSupplyingAnswers: loadBlock	| answers |	(answers := self spec answers) notEmpty		ifTrue: [ loadBlock valueSupplyingMetacelloAnswers: answers ]		ifFalse: [ loadBlock value]! !!MetacelloPrePostLoadDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 4/8/2010 16:22'!prepostLoadDirectivesDo: aBlock	aBlock value: self! !!MetacelloPrePostLoadDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 4/8/2010 16:23'!prepostLoadDo: aBlock	aBlock value: self! !!MetacelloAtomicLoadDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 4/9/2010 13:01'!directivesDo: aBlock	aBlock value: self.	self preloads do: [:directive | directive directivesDo: aBlock ].	self loadDirectives do: [:directive | directive directivesDo: aBlock ].	self postloads do: [:directive | directive directivesDo: aBlock ].! !!MetacelloAtomicLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 4/14/2010 14:28'!finalizeLoad: aGofer	"load the accumulated packages (if any), reset the package list"	| pkgLoads |	self preloads do: [:directive | super loadPreloadDirective: directive ].	preloads := nil.	(pkgLoads := self packageloads) notEmpty 		ifTrue: [			self loader loadingSpecLoader 				loadPackageDirectives: pkgLoads 				gofer: aGofer.			self packageloads: nil ].	self postloads do: [:directive | super loadPostloadDirective: directive ].	postloads := nil! !!MetacelloAtomicLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 3/21/2010 16:20'!loadAtomicLoadDirective: aLoaderDirective gofer: aGofer	aLoaderDirective loadDirectives do: [:directive | directive loadUsing: self gofer: aGofer ].! !!MetacelloAtomicLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 4/13/2010 17:27'!loadLinearLoadDirective: aLoaderDirective gofer: aGofer	self finalizeLoad: aGofer.	super loadLinearLoadDirective: aLoaderDirective gofer: aGofer! !!MetacelloAtomicLoadDirective methodsFor: 'loading' stamp: 'DaleHenrichs 3/16/2010 01:53'!loadPackageDirective: aPackageLoadDirective gofer: aGofer	"accumulate packages"		self packageloads add: aPackageLoadDirective! !!MetacelloAtomicLoadDirective methodsFor: 'loading' stamp: 'DaleHenrichs 4/14/2010 14:23'!loadPostloadDirective: aPostloadDirective	"accumulate postloads"	self postloads add: aPostloadDirective! !!MetacelloAtomicLoadDirective methodsFor: 'loading' stamp: 'DaleHenrichs 4/14/2010 14:23'!loadPreloadDirective: aPreloadDirective 	"accumulate preloads"	self preloads add: aPreloadDirective! !!MetacelloAtomicLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 4/14/2010 14:21'!loadUsing: aLoaderDirective gofer: aGofer	self loadDirectives isEmpty ifTrue: [ ^self ].	aLoaderDirective loadAtomicLoadDirective: self gofer: aGofer.! !!MetacelloAtomicLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 15:05'!packageloads	packageloads == nil ifTrue: [ packageloads := OrderedCollection new ].	^ packageloads! !!MetacelloAtomicLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 15:04'!packageloads: anObject	packageloads := anObject! !!MetacelloAtomicLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 4/9/2010 13:00'!postloads	postloads == nil ifTrue: [ postloads := OrderedCollection new ].	^ postloads! !!MetacelloAtomicLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 4/9/2010 13:00'!preloads	preloads == nil ifTrue: [ preloads := OrderedCollection new ].	^ preloads! !!MetacelloAtomicLoadDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 4/9/2010 13:03'!prepostLoadDirectivesDo: aBlock	self preloads do: [:directive | directive prepostLoadDirectivesDo: aBlock ].	self loadDirectives do: [:directive | directive prepostLoadDirectivesDo: aBlock ].	self postloads do: [:directive | directive prepostLoadDirectivesDo: aBlock ].! !!MetacelloAtomicLoadDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 4/9/2010 13:03'!prepostLoadsDo: aBlock	self preloads do: [:directive | directive prepostLoadDo: aBlock ].	self loadDirectives do: [:directive | directive prepostLoadDo: aBlock ].	self postloads do: [:directive | directive prepostLoadDo: aBlock ].	! !!MetacelloAtomicLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 16:35'!title	^'atomic load'! !!MetacelloExplicitLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 3/21/2010 13:39'!explicitLoadUsing: aLoaderDirective gofer: aGofer	aLoaderDirective loadLinearLoadDirective: self gofer: aGofer.! !!MetacelloExplicitLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 3/21/2010 13:16'!explicitLoadWithPolicy: aLoadPolicy	| gofer |	gofer := Gofer new.	gofer disablePackageCache.	gofer repository: aLoadPolicy cacheRepository.	self explicitLoadUsing: self gofer: gofer! !!MetacelloExplicitLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 3/21/2010 13:38'!loadUsing: aLoaderDirective gofer: aGofer	aLoaderDirective loadExplicitLoadDirective: self gofer: aGofer.! !!MetacelloExplicitLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/18/2010 11:46'!title	^'explicit load'! !!MetacelloLinearLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 3/21/2010 13:40'!loadUsing: aLoaderDirective gofer: aGofer	self loadDirectives isEmpty ifTrue: [ ^self ].	aLoaderDirective loadLinearLoadDirective: self gofer: aGofer.! !!MetacelloLinearLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 16:35'!title	^'linear load'! !!MetacelloVersionLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 3/9/2010 12:14'!add: aDirective	self loadDirectives add: aDirective! !!MetacelloVersionLoadDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 4/7/2010 12:16'!directivesDo: aBlock	aBlock value: self.	self loadDirectives do: [:directive | directive directivesDo: aBlock ].! !!MetacelloVersionLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 3/16/2010 02:08'!finalizeLoad: aGofer	"nothing special for linear loads"! !!MetacelloVersionLoadDirective methodsFor: 'printing' stamp: 'DaleHenrichs 3/10/2010 11:07'!label	self spec == nil ifTrue: [ ^'' ].	^self spec label! !!MetacelloVersionLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 3/21/2010 13:37'!loadAtomicLoadDirective: aLoaderDirective gofer: aGofer	aLoaderDirective loadDirectives do: [:directive | directive loadUsing: aLoaderDirective gofer: aGofer ].	aLoaderDirective finalizeLoad: aGofer.! !!MetacelloVersionLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 12:13'!loadDirectives	loadDirectives == nil ifTrue: [ loadDirectives := OrderedCollection new ].	^ loadDirectives! !!MetacelloVersionLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 12:13'!loadDirectives: anObject	loadDirectives := anObject! !!MetacelloVersionLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 3/21/2010 13:38'!loadExplicitLoadDirective: aLoaderDirective gofer: aGofer	"load has already been performed, no need to load again"! !!MetacelloVersionLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 3/21/2010 13:39'!loadLinearLoadDirective: aLoaderDirective gofer: aGofer	aLoaderDirective loadDirectives do: [:directive | directive loadUsing: aLoaderDirective gofer: aGofer ].	aLoaderDirective finalizeLoad: aGofer.! !!MetacelloVersionLoadDirective methodsFor: 'loading' stamp: 'DaleHenrichs 4/9/2010 12:08'!loadPackageDirective: aPackageLoadDirective gofer: aGofer	aPackageLoadDirective loader loadingSpecLoader 		loadPackageDirective: aPackageLoadDirective 		gofer: aGofer! !!MetacelloVersionLoadDirective methodsFor: 'loading' stamp: 'DaleHenrichs 4/14/2010 14:30'!loadPostloadDirective: aPostloadDirective 	| block |	(block :=  aPostloadDirective spec postLoadDoItBlock) ~~ nil		ifTrue: [			aPostloadDirective evaluateSupplyingAnswers: [ block valueWithPossibleArgs: 					(Array 						with: aPostloadDirective loader 						with: aPostloadDirective spec) ].			Transcript cr; show: 'Evaluated -> ', aPostloadDirective spec label, ' >> ', aPostloadDirective spec postLoadDoIt asString]! !!MetacelloVersionLoadDirective methodsFor: 'loading' stamp: 'DaleHenrichs 4/14/2010 14:31'!loadPreloadDirective: aPreloadDirective 	| block |	(block :=  aPreloadDirective spec preLoadDoItBlock) ~~ nil		ifTrue: [			aPreloadDirective evaluateSupplyingAnswers: [ block valueWithPossibleArgs: 					(Array 						with: aPreloadDirective loader 						with: aPreloadDirective spec) ].			Transcript cr; show: 'Evaluated -> ', aPreloadDirective spec label, ' >> ', aPreloadDirective spec preLoadDoIt asString]! !!MetacelloVersionLoadDirective methodsFor: 'actions' stamp: 'DaleHenrichs 3/9/2010 16:37'!loadWithPolicy: aLoadPolicy	| gofer |	gofer := Gofer new.	gofer disablePackageCache.	gofer repository: aLoadPolicy cacheRepository.	self loadUsing: self gofer: gofer! !!MetacelloVersionLoadDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 3/11/2010 13:40'!packageDirectivesDo: aBlock	self loadDirectives do: [:directive | directive packageDirectivesDo: aBlock ].! !!MetacelloVersionLoadDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 3/11/2010 13:49'!packagesDo: aBlock	self loadDirectives do: [:directive | directive packageDo: aBlock ].! !!MetacelloVersionLoadDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 4/7/2010 12:26'!prepostLoadDirectivesDo: aBlock	self loadDirectives do: [:directive | directive prepostLoadDirectivesDo: aBlock ].! !!MetacelloVersionLoadDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 4/7/2010 12:28'!prepostLoadsDo: aBlock	self loadDirectives do: [:directive | directive prepostLoadDo: aBlock ].! !!MetacelloVersionLoadDirective methodsFor: 'printing' stamp: 'DaleHenrichs 4/9/2010 13:04'!printLoadDirectivesOn: aStream indent: indent	self loadDirectives do: [:each |		aStream cr. 		each printOn: aStream indent: indent + 1 ].! !!MetacelloVersionLoadDirective methodsFor: 'printing' stamp: 'DaleHenrichs 4/9/2010 13:04'!printOn: aStream indent: indent	super printOn: aStream indent: indent.	self printLoadDirectivesOn: aStream indent: indent! !!MetacelloVersionLoadDirective methodsFor: 'accessing' stamp: 'DaleHenrichs 3/12/2010 09:19'!spec	"Expected to be a MetacelloVersionSpec"		(spec == nil  and: [  self loader ~~ nil ]) ifTrue: [ ^self loader spec versionSpec ].	^spec! !!MetacelloVersionLoadDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 3/12/2010 10:27'!versionDirectivesDo: aBlock	aBlock value: self.	self loadDirectives do: [:directive | directive versionDirectivesDo: aBlock ].! !!MetacelloVersionLoadDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 4/7/2010 12:32'!versionDo: aBlock	aBlock value: self.! !!MetacelloVersionLoadDirective methodsFor: 'enumerating' stamp: 'DaleHenrichs 4/7/2010 12:32'!versionsDo: aBlock	self loadDirectives do: [:directive | directive versionDo: aBlock ].! !!MetacelloLoadData methodsFor: 'accessing' stamp: 'dkh 1/12/2010 16:32'!addVersion: version versionInfo: versionInfo resolvedReference: resolvedReference packageSpec: packageSpec	| vi |	"check for duplicates and use the one that is being added"	(vi := self packageNameMap at: packageSpec name ifAbsent: []) ~~ nil		ifTrue: [				"remove old references"						self dataMap removeKey: vi name.						self versionInfoMap removeKey: vi name].	self dataMap at: version info name put: {version. resolvedReference. packageSpec }.	self versionInfoMap at: versionInfo name put: versionInfo.	self packageNameMap		at: packageSpec name		put: versionInfo! !!MetacelloLoadData methodsFor: 'versionInfo' stamp: 'dkh 08/10/2009 16:37'!currentVersionInfoFor: packageSpec ifAbsent: aBlock	^self versionInfoMap 		at: packageSpec file 		ifAbsent: [ 			self  packageNameMap 				at: packageSpec name				ifAbsent: aBlock ]! !!MetacelloLoadData methodsFor: 'accessing' stamp: 'dkh 07/08/2009 12:34'!dataMap	dataMap == nil ifTrue: [ dataMap := Dictionary new ].	^dataMap! !!MetacelloLoadData methodsFor: 'enumerating' stamp: 'dkh 7/29/2009 19:53'!do: aBlock	self dataMap valuesDo: [:ar |		aBlock value: (ar at: 1) value: (ar at: 2) value: (ar at: 3) ]! !!MetacelloLoadData methodsFor: 'testing' stamp: 'dkh 07/08/2009 12:38'!isEmpty	^self dataMap isEmpty! !!MetacelloLoadData methodsFor: 'accessing' stamp: 'dkh 08/10/2009 16:17'!packageNameMap	packageNameMap == nil ifTrue: [ packageNameMap := Dictionary new ].	^packageNameMap! !!MetacelloLoadData methodsFor: 'accessing' stamp: 'dkh 07/08/2009 12:48'!versionInfoMap	versionInfoMap == nil ifTrue: [ versionInfoMap := Dictionary new ].	^versionInfoMap! !!MetacelloLoaderPolicy class methodsFor: 'instance creation' stamp: 'DaleHenrichs 3/7/2010 08:10'!overrideRepositories: aCollection	^self new overrideRepositories: aCollection! !!MetacelloLoaderPolicy methodsFor: 'accessing' stamp: 'DaleHenrichs 03/08/2010 16:20'!cacheGofer	cacheGofer == nil 		ifTrue: [ 			cacheGofer := Gofer new.			cacheGofer disablePackageCache.			cacheGofer repository: self cacheRepository. ].	^ cacheGofer! !!MetacelloLoaderPolicy methodsFor: 'accessing' stamp: 'DaleHenrichs 3/7/2010 08:34'!cacheRepository	cacheRepository == nil ifTrue: [ cacheRepository := MCDictionaryRepository new ].	^ cacheRepository! !!MetacelloLoaderPolicy methodsFor: 'accessing' stamp: 'DaleHenrichs 3/7/2010 08:34'!cacheRepository: anMCRepository	cacheRepository := anMCRepository! !!MetacelloLoaderPolicy methodsFor: 'accessing' stamp: 'DaleHenrichs 03/08/2010 14:47'!ensuredMap	ensuredMap == nil ifTrue: [ ensuredMap := Dictionary new ].	^ensuredMap! !!MetacelloLoaderPolicy methodsFor: 'accessing' stamp: 'DaleHenrichs 03/08/2010 14:47'!ensuredMap: anObject	ensuredMap := anObject! !!MetacelloLoaderPolicy methodsFor: 'testing' stamp: 'DaleHenrichs 3/7/2010 08:14'!hasRepositoryOverrides	^self overrideRepositories ~~ nil! !!MetacelloLoaderPolicy methodsFor: 'accessing' stamp: 'DaleHenrichs 3/8/2010 11:39'!ignoreImage	^ ignoreImage! !!MetacelloLoaderPolicy methodsFor: 'accessing' stamp: 'DaleHenrichs 3/8/2010 11:39'!ignoreImage: anObject	ignoreImage := anObject! !!MetacelloLoaderPolicy methodsFor: 'initialize-release' stamp: 'DaleHenrichs 03/08/2010 14:47'!initialize	self 		repositoryMap; 		cacheRepository;		ensuredMap.	ignoreImage := false! !!MetacelloLoaderPolicy methodsFor: 'actions' stamp: 'DaleHenrichs 3/10/2010 10:02'!load	overrideRepositories := Array with: self cacheRepository. "ensure that hasRepositoryOverrides is true"	self loadDirective loadWithPolicy: self! !!MetacelloLoaderPolicy methodsFor: 'accessing' stamp: 'DaleHenrichs 3/11/2010 12:59'!loadData 	loadData == nil ifTrue: [ loadData := MetacelloLoadData new ].	^loadData! !!MetacelloLoaderPolicy methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 11:11'!loadDirective	loadDirective == nil ifTrue: [ loadDirective := MetacelloLinearLoadDirective new ].	^ loadDirective! !!MetacelloLoaderPolicy methodsFor: 'accessing' stamp: 'DaleHenrichs 3/7/2010 08:09'!overrideRepositories	^ overrideRepositories! !!MetacelloLoaderPolicy methodsFor: 'accessing' stamp: 'DaleHenrichs 3/7/2010 08:09'!overrideRepositories: anObject	overrideRepositories := anObject! !!MetacelloLoaderPolicy methodsFor: 'actions' stamp: 'DaleHenrichs 3/9/2010 16:50'!pushAtomicLoadDirectivesDuring: aBlock for: aLoader	self pushLoadDirective: (MetacelloAtomicLoadDirective loader: aLoader) during: aBlock.! !!MetacelloLoaderPolicy methodsFor: 'actions' stamp: 'DaleHenrichs 3/21/2010 13:11'!pushExplicitLoadDirectivesDuring: aBlock for: aLoader	| directive |	directive := MetacelloExplicitLoadDirective loader: aLoader.	self pushLoadDirective: directive during: aBlock.	^directive! !!MetacelloLoaderPolicy methodsFor: 'actions' stamp: 'DaleHenrichs 3/9/2010 16:50'!pushLinearLoadDirectivesDuring: aBlock for: aLoader	self pushLoadDirective: (MetacelloLinearLoadDirective loader: aLoader) during: aBlock.! !!MetacelloLoaderPolicy methodsFor: 'private' stamp: 'DaleHenrichs 3/9/2010 15:33'!pushLoadDirective: aLoaderDirective during: aBlock	|  oldRoot |	self loadDirective add: aLoaderDirective.	oldRoot := loadDirective.	loadDirective := aLoaderDirective.	aBlock ensure: [ loadDirective := oldRoot ].! !!MetacelloLoaderPolicy methodsFor: 'accessing' stamp: 'DaleHenrichs 3/5/2010 15:11'!repositoryMap	repositoryMap == nil ifTrue: [ repositoryMap := Dictionary new ].	^repositoryMap! !!MetacelloLoaderPolicy methodsFor: 'accessing' stamp: 'DaleHenrichs 3/5/2010 10:51'!repositoryMap: anObject	repositoryMap := anObject! !!MetacelloLoaderPolicy methodsFor: 'accessing' stamp: 'DaleHenrichs 03/08/2010 16:23'!resetCacheGofer	cacheGofer := nil! !!MetacelloLoaderPolicy methodsFor: 'accessing' stamp: 'DaleHenrichs 3/11/2010 19:35'!silently	silently == nil ifTrue: [ silently := false ].	^ silently! !!MetacelloLoaderPolicy methodsFor: 'accessing' stamp: 'DaleHenrichs 3/11/2010 19:35'!silently: anObject	silently := anObject! !!MetacelloMCVersionSpecLoader class methodsFor: 'instance creation' stamp: 'dkh 6/18/2009 09:53'!on: aVersionSpec	^(self new) 		versionSpec: aVersionSpec;		yourself! !!MetacelloMCVersionSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 11:19'!label	^self versionSpec label! !!MetacelloMCVersionSpecLoader methodsFor: 'loading' stamp: 'DaleHenrichs 4/14/2010 17:17'!load	| mcLoader |	packages := Dictionary new.	self resolveToLoadableSpecs.	mcLoader := self loader.	mcLoader ignoreImage		ifFalse: [ 			packages values do: [:pkg | 				pkg ensureLoadedForDevelopmentUsing: mcLoader.				(pkg 					compareCurrentVersion: self operator 					targetVersionStatus: #(allLoadedToSpec) 					using: mcLoader) 						ifTrue: [ packages removeKey: pkg name ]]].	packages notEmpty		ifTrue: [			mcLoader preLoad: self versionSpec.			mcLoader load.			mcLoader postLoad: self versionSpec ].	^mcLoader! !!MetacelloMCVersionSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/6/2010 08:41'!loader	loader == nil 		ifTrue: [			loader := self versionSpec loader copy.			loader spec: self.			loaderPolicy notNil ifTrue: [ loader loaderPolicy: loaderPolicy] ].	^loader! !!MetacelloMCVersionSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/6/2010 08:41'!loaderPolicy	^ loaderPolicy! !!MetacelloMCVersionSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/6/2010 08:41'!loaderPolicy: anObject	loaderPolicy := anObject! !!MetacelloMCVersionSpecLoader methodsFor: 'accessing' stamp: 'dkh 07/03/2009 10:12'!name	^self versionSpec name! !!MetacelloMCVersionSpecLoader methodsFor: 'accessing' stamp: 'dkh 08/10/2009 15:13'!operator	^self loader operator! !!MetacelloMCVersionSpecLoader methodsFor: 'spec compatibility' stamp: 'dkh 8/13/2009 00:37'!packageSpecsInLoadOrder	| loadOrder packageNames |	loadOrder := self versionSpec packages ~~ nil		ifTrue: [ self versionSpec packages packageSpecsInLoadOrder ]		ifFalse: [ OrderedCollection new ].	packageNames := packages values collect: [:pkg | pkg name ].	^loadOrder select: [:pkg | packageNames includes: pkg name ]! !!MetacelloMCVersionSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/11/2010 23:46'!packages	^packages! !!MetacelloMCVersionSpecLoader methodsFor: 'accessing' stamp: 'dkh 6/12/2009 14:20'!project	^self versionSpec project! !!MetacelloMCVersionSpecLoader methodsFor: 'loading' stamp: 'dkh 6/18/2009 11:04'!repositories	^self repositorySpecs! !!MetacelloMCVersionSpecLoader methodsFor: 'spec compatibility' stamp: 'dkh 1/12/2010 17:25'!repositorySpecs	| repositoryMap |	repositoryMap := self versionSpec repositories ~~ nil		ifTrue: [ self versionSpec repositories map ]		ifFalse: [ Dictionary new ].	^repositoryMap values.! !!MetacelloMCVersionSpecLoader methodsFor: 'accessing' stamp: 'dkh 6/9/2009 11:13'!required	required == nil ifTrue: [ ^#() ].	^ required! !!MetacelloMCVersionSpecLoader methodsFor: 'accessing' stamp: 'dkh 6/8/2009 16:57'!required: anObject	required := anObject! !!MetacelloMCVersionSpecLoader methodsFor: 'loading' stamp: 'dkh 10/3/2009 19:54'!resolvePackageNames	packages := Dictionary new.	self resolveToLoadableSpecs.	^packages values collect: [:pkg | pkg name ]! !!MetacelloMCVersionSpecLoader methodsFor: 'private' stamp: 'DaleHenrichs 1/19/2010 11:57'!resolveToLoadableSpecs	self versionSpec resolveToLoadableSpecs: required map: packages! !!MetacelloMCVersionSpecLoader methodsFor: 'accessing' stamp: 'dkh 6/8/2009 16:55'!versionSpec	^ versionSpec! !!MetacelloMCVersionSpecLoader methodsFor: 'accessing' stamp: 'dkh 6/8/2009 16:55'!versionSpec: anObject	versionSpec := anObject! !!MetacelloMCVersionSpecLoader methodsFor: 'spec compatibility' stamp: 'DaleHenrichs 3/11/2010 17:49'!versionString	^self versionSpec versionString! !!MetacelloPlatform class methodsFor: 'accessing' stamp: 'dkh 7/24/2009 15:21'!current	Current		ifNil: [Current := MetacelloPlatform new].	^ Current! !!MetacelloPlatform class methodsFor: 'initialize-release' stamp: 'dkh 7/24/2009 15:29'!initialize	"MetacelloPlatform initialize"	"MetacelloGemStonePlatform initialize"	"MetacelloPharoPlatform initialize"	"MetacelloSqueakPlatform initialize"	Current := self new! !!MetacelloPlatform methodsFor: 'utilities' stamp: 'dkh 10/28/2009 10:53'!authorName	Smalltalk at: #Author ifPresent: [:cl | ^cl perform: #initials ].	^'no developer initials'! !!MetacelloPlatform methodsFor: 'accessing' stamp: 'DaleHenrichs 3/11/2010 19:24'!bypassProgressBars	bypassProgressBars == nil ifTrue: [ bypassProgressBars := false ].	^ bypassProgressBars! !!MetacelloPlatform methodsFor: 'accessing' stamp: 'DaleHenrichs 3/11/2010 19:24'!bypassProgressBars: anObject	bypassProgressBars := anObject! !!MetacelloPlatform methodsFor: 'caching' stamp: 'DaleHenrichs 3/5/2010 10:04'!clearCurrentVersionCache	MetacelloClearStackCacheNotification signal! !!MetacelloPlatform methodsFor: 'notification' stamp: 'DaleHenrichs 3/11/2010 19:26'!collection: aCollection do: aBlock displaying: aString	aCollection do: aBlock! !!MetacelloPlatform methodsFor: 'user interaction' stamp: 'dkh 8/12/2009 17:51'!confirm: aString		^(Smalltalk hasClassNamed: #UIManager)		ifTrue: [ (Smalltalk classNamed: #UIManager) default perform: #confirm: with: aString ]		ifFalse: [			"throw warning and answer true, if no way to announce"			Warning signal: aString.			true ]! !!MetacelloPlatform methodsFor: 'repository creation' stamp: 'TestRunner 12/22/2009 11:50'!createRepository: aRepositorySpec	| type |	type := aRepositorySpec type.	type = 'http'		ifTrue: [^ MCHttpRepository				location: aRepositorySpec description				user: aRepositorySpec username				password: aRepositorySpec password].	type = 'directory'		ifTrue: [^ MCDirectoryRepository new				directory: (FileDirectory on: aRepositorySpec description)].	type = 'dictionary'		ifTrue: [	| description headerSize globalName |				description := aRepositorySpec description.			headerSize := 'dictionary://' size.			globalName := (description copyFrom: headerSize + 1 to: description size) asSymbol. 			^Smalltalk at: globalName ifAbsent: [Smalltalk at: globalName put: MCDictionaryRepository new ]].	^ nil! !!MetacelloPlatform methodsFor: 'attributes' stamp: 'dkh 7/24/2009 15:24'!defaultPlatformAttributes	| versionString |	Smalltalk at: #SystemVersion ifPresent: [:cl |		versionString := cl current version.		(versionString beginsWith: 'Pharo')			ifTrue: [ ^ #(#squeakCommon #pharo ) ].		(versionString beginsWith: 'Squeak')			ifTrue: [^ #(#squeakCommon #squeak )]].	^ #(#gemstone )! !!MetacelloPlatform methodsFor: 'notification' stamp: 'DaleHenrichs 03/08/2010 13:31'!do: aBlock displaying: aString	aBlock value! !!MetacelloPlatform methodsFor: 'repository creation' stamp: 'tbn 6/9/2010 13:56'!extractTypeFromDescription: description	description == nil ifTrue: [ ^nil ].	((description beginsWith: '/') or: [ description second = $:]) ifTrue: [ ^'directory' ].	(description beginsWith: 'dictionary://') ifTrue: [ ^'dictionary' ].	^'http'! !!MetacelloPlatform methodsFor: 'caching' stamp: 'DaleHenrichs 2/8/2010 12:39'!stackCacheFor: cacheName at: key doing: aBlock	self 		useStackCacheDuring: [:dict | | cache |			cache := dict at: cacheName ifAbsent: [].			cache ~~ nil				ifTrue: [ | value hasEntry |					hasEntry := true.					value := cache at: key ifAbsent: [ hasEntry := false ].					hasEntry ifTrue: [ ^value ]]				ifFalse: [ 					cache := Dictionary new.					dict at: cacheName put: cache ].			^aBlock value: cache ] 		defaultDictionary: nil! !!MetacelloPlatform methodsFor: 'utilities' stamp: 'dkh 10/7/2009 10:51'!timestamp	^DateAndTime now printString! !!MetacelloPlatform methodsFor: 'transactions' stamp: 'dkh 10/23/2009 11:59'!transact: aBlock	"On GemStone, we want to optionally abort before command execution and commit after 	 common execution. Other plaforms don't need to do anything special.	 Returning out of block, skips commit."		aBlock value! !!MetacelloPlatform methodsFor: 'caching' stamp: 'DaleHenrichs 2/8/2010 13:01'!useStackCacheDuring: aBlock defaultDictionary: defaultDictionary	| dict |	dict := MetacelloStackCacheNotification signal.	dict == nil		ifTrue: [ 			dict := defaultDictionary == nil				ifTrue: [ Dictionary new ]				ifFalse: [ defaultDictionary ]].	[ ^aBlock value: dict ]			on: MetacelloStackCacheNotification, MetacelloClearStackCacheNotification			do: [:ex |  				(ex isKindOf: MetacelloStackCacheNotification) 					ifTrue: [ ex resume: dict ].				(ex isKindOf: MetacelloClearStackCacheNotification)					ifTrue: [ 						dict keys do: [:k | | c |							c := dict at: k.							c keys do: [:ck | c removeKey: ck ].							dict removeKey: k ].						ex resume ]]! !!MetacelloMCProject methodsFor: 'repository creation' stamp: 'dkh 10/22/2009 08:53'!createRepository: aRepositorySpec	^ MetacelloPlatform current createRepository: aRepositorySpec! !!MetacelloMCProject methodsFor: 'spec classes' stamp: 'DaleHenrichs 3/6/2010 07:46'!defaultLoaderClass	^MetacelloLoadingMCSpecLoader! !!MetacelloMCProject methodsFor: 'development support' stamp: 'DaleHenrichs 3/7/2010 09:51'!fetchProject	"fetch the latest version of the configuration package"		^self fetchProject: MetacelloLoaderPolicy new! !!MetacelloMCProject methodsFor: 'development support' stamp: 'DaleHenrichs 3/7/2010 09:49'!fetchProject: aLoaderPolicy	"fetch the latest version of the configuration package"		| mcLoader |	(mcLoader := self loader) == nil		ifTrue: [ mcLoader := self project loaderClass on: nil ].	mcLoader loaderPolicy: aLoaderPolicy.	mcLoader doingLoads: [ 		MCWorkingCopy			managersForClass: self configuration class			do: [:mgr | | pkg |				pkg := self packageSpec.				mgr repositoryGroup repositories do: [:repo | pkg repositories repository: (repo asRepositorySpecFor: self) ].				pkg name: mgr packageName.				pkg fetchUsing: mcLoader.				^true ]].	^true! !!MetacelloMCProject methodsFor: 'development support' stamp: 'DaleHenrichs 3/15/2010 11:37'!goferCommitProject: commitMessage	| pkgSpec |	(pkgSpec := self projectPackage) == nil ifTrue: [ ^false ].	^pkgSpec goferCommitPackage: commitMessage! !!MetacelloMCProject methodsFor: 'spec classes' stamp: 'dkh 06/01/2009 10:58'!packageSpec	^self packageSpecClass for: self! !!MetacelloMCProject methodsFor: 'spec classes' stamp: 'dkh 06/01/2009 10:24'!packageSpecClass	^MetacelloPackageSpec! !!MetacelloMCProject methodsFor: 'development support' stamp: 'dkh 12/22/2009 10:00'!packagesNeedSaving: aVersionString	"Answer a collection of associations (package -> repository) representing the packages 	 reachable from this project that need to be saved"	| packages |	packages := Set new.	(self version: aVersionString) spec 		packagesNeedSavingVisited: (Set with: self configuration class name asString)		into: packages.	^packages! !!MetacelloMCProject methodsFor: 'private' stamp: 'dkh 6/10/2009 10:56'!pragmaKeywords	^super pragmaKeywords, #(projectPackage:attribute: packages:attribute: repositories:attribute: )! !!MetacelloMCProject methodsFor: 'development support' stamp: 'DaleHenrichs 03/20/2010 12:48'!projectPackage	MCWorkingCopy		managersForClass: self configuration class		do: [:mgr | | pkgSpec repo |			pkgSpec := 				self packageSpec					name: mgr packageName;					yourself.			mgr ancestors notEmpty				ifTrue: [ pkgSpec file: mgr ancestors first name ].			repo := mgr repositoryGroup repositories 				detect: [:each | each ~~ MCCacheRepository default ] 				ifNone: [ 					Transcript cr; show: 'Using cache repository for ', self label, ' project package'.					MCCacheRepository default ].			pkgSpec repository: repo description.			^pkgSpec].	^nil! !!MetacelloMCProject methodsFor: 'spec classes' stamp: 'dkh 6/7/2009 10:11'!repositoriesSpec	^self repositoriesSpecClass for: self! !!MetacelloMCProject methodsFor: 'spec classes' stamp: 'dkh 6/7/2009 10:11'!repositoriesSpecClass	^MetacelloRepositoriesSpec! !!MetacelloMCProject methodsFor: 'spec classes' stamp: 'dkh 06/01/2009 10:59'!repositorySpec	^self repositorySpecClass for: self! !!MetacelloMCProject methodsFor: 'spec classes' stamp: 'dkh 06/01/2009 10:25'!repositorySpecClass	^MetacelloRepositorySpec! !!MetacelloMCProject methodsFor: 'development support' stamp: 'Dalehenrichs 02/10/2010 10:15'!saveProject	| pkgSpec |	(pkgSpec := self projectPackage) == nil ifTrue: [ ^false ].	^pkgSpec savePackage! !!MetacelloMCProject methodsFor: 'repository updating' stamp: 'dkh 9/2/2009 06:21'!updatePackageRepositoriesFor: versionString	| versionSpec |	(versionSpec := (self version: versionString) versionSpec) packageSpecsInLoadOrder do: [:pkgSpec |		pkgSpec updatePackageRepositoriesFor: versionSpec ].	^true! !!MetacelloMCProject methodsFor: 'development support' stamp: 'DaleHenrichs 3/24/2010 15:50'!updateProject	"load the latest version of the configuration package"	"WARNING: don't forget to refresh your project instance after doing an #updateProject, 	 otherwise your instance won't reflect the info in the freshly loaded configuration"		^self updateProject: MetacelloLoaderPolicy new! !!MetacelloMCProject methodsFor: 'development support' stamp: 'DaleHenrichs 3/24/2010 15:50'!updateProject: aLoaderPolicy	"load the latest version of the configuration package"	"WARNING: don't forget to refresh your project instance after doing an #updateProject, 	 otherwise your instance won't reflect the info in the freshly loaded configuration"		| mcLoader |	(mcLoader := self loader) == nil		ifTrue: [ mcLoader := self project loaderClass on: nil ].	mcLoader loaderPolicy: aLoaderPolicy.	mcLoader doingLoads: [ 		MCWorkingCopy			managersForClass: self configuration class			do: [:mgr | | pkg |				pkg := self packageSpec.				mgr repositoryGroup repositories do: [:repo | pkg repositories repository: (repo asRepositorySpecFor: self) ].				pkg name: mgr packageName.				pkg load.				^true ]].	^true! !!MetacelloMCProject methodsFor: 'spec classes' stamp: 'dkh 6/6/2009 12:19'!versionSpecClass	^MetacelloMCVersionSpec! !!MetacelloProject class methodsFor: 'instance creation' stamp: 'dkh 9/4/2009 01:43'!new	| inst |	inst := self basicNew.	^inst configuration: inst; yourself! !!MetacelloProject class methodsFor: 'instance creation' stamp: 'dkh 9/4/2009 01:43'!on: aConfig	^self basicNew configuration: aConfig; yourself! !!MetacelloProject methodsFor: 'private' stamp: 'dkh 10/14/2009 16:33'!attributes	^(OrderedCollection with: #common)		addAll: self platformAttributes;		yourself! !!MetacelloProject methodsFor: 'accessing' stamp: 'tg 8/30/2009 17:48'!configuration	^ configuration! !!MetacelloProject methodsFor: 'accessing' stamp: 'tg 8/30/2009 17:48'!configuration: anObject	configuration := anObject! !!MetacelloProject methodsFor: 'versions' stamp: 'DaleHenrichs 2/6/2010 09:42'!currentVersion	| cacheKey |	cacheKey := self configuration class.	^MetacelloPlatform current 		stackCacheFor: #currentVersion		at: cacheKey		doing: [:cache |	|  cv versions |			cv := nil.			versions := self sortedAndFilteredVersions.			versions do: [:vrsn |				vrsn isAllLoadedToSpec					ifTrue: [ 						cv := vrsn copy.						cv versionStatus: #allLoadedToSpec. "all projects and packages are loaded and match specification"						^cache at: cacheKey put: cv ]].			versions do: [:vrsn |				vrsn isLoadedToSpec					ifTrue: [ 						cv := vrsn copy.						cv versionStatus: #loadedToSpec. "all loaded projects and packages match specifications (at least one package loaded)"						^cache at: cacheKey put:  cv ]].			versions do: [:vrsn |				vrsn isLoadedMatchConstraints					ifTrue: [ 						cv := vrsn copy.						cv versionStatus: #loadedMatchConstraints. "all loaded projects and packages match constraints (at least one package loaded)"						^cache at: cacheKey put: cv ]].			versions do: [:vrsn |				vrsn isSomethingLoaded					ifTrue: [ 						cv := vrsn copy.						cv versionStatus: #somethingLoaded. "at least one package loaded"						^cache at: cacheKey put: cv ]].			^cache at: cacheKey put:  nil ].! !!MetacelloProject methodsFor: 'versions' stamp: 'DaleHenrichs 2/6/2010 09:43'!currentVersionAgainst: resolvedPackageAndProjectNames	| cacheKey |	cacheKey := Array 			with: self configuration class			with: (resolvedPackageAndProjectNames sort: [:a :b | a <= b ]).	^MetacelloPlatform current 		stackCacheFor: #currentVersionAgainst:		at: cacheKey		doing: [:cache |	|  cv versions |			cv := nil.			versions := self sortedAndFilteredVersions.			versions do: [:vrsn |				(vrsn spec isAllLoadedToSpecAgainst: resolvedPackageAndProjectNames)					ifTrue: [ 						cv := vrsn copy.						cv versionStatus: #allLoadedToSpec. "all projects and packages are loaded and match specification"						^cache at: cacheKey put: cv ]].			versions do: [:vrsn |				(vrsn spec isLoadedToSpecAgainst: resolvedPackageAndProjectNames)					ifTrue: [ 						cv := vrsn copy.						cv versionStatus: #loadedToSpec. "all loaded projects and packages match specifications (at least one package loaded)"						^cache at: cacheKey put:  cv ]].			versions do: [:vrsn |				(vrsn spec isLoadedMatchConstraintsAgainst: resolvedPackageAndProjectNames)					ifTrue: [ 						cv := vrsn copy.						cv versionStatus: #loadedMatchConstraints. "all loaded projects and packages match constraints (at least one package loaded)"						^cache at: cacheKey put: cv ]].			versions do: [:vrsn |				(vrsn spec isSomethingLoadedAgainst: resolvedPackageAndProjectNames)					ifTrue: [ 						cv := vrsn copy.						cv versionStatus: #somethingLoaded. "at least one package loaded"						^cache at: cacheKey put: cv ]].			^cache at: cacheKey put:  nil ].! !!MetacelloProject methodsFor: 'accessing' stamp: 'dkh 6/18/2009 12:52'!defaultBlessing	^#release! !!MetacelloProject methodsFor: 'spec classes' stamp: 'dkh 6/9/2009 16:03'!defaultLoaderClass	^MetacelloSpecLoader! !!MetacelloProject methodsFor: 'private' stamp: 'dkh 7/24/2009 15:37'!defaultPlatformAttributes	^ MetacelloPlatform current defaultPlatformAttributes! !!MetacelloProject methodsFor: 'private' stamp: 'dkh 10/7/2009 10:05'!excludeFromLatestVersion	^#(development broken baseline)! !!MetacelloProject methodsFor: 'spec classes' stamp: 'dkh 10/4/2009 12:17'!groupSpec	^self groupSpecClass for: self! !!MetacelloProject methodsFor: 'spec classes' stamp: 'dkh 10/4/2009 12:18'!groupSpecClass	^MetacelloGroupSpec! !!MetacelloProject methodsFor: 'accessing' stamp: 'dkh 9/10/2009 15:14'!label	^self configuration class name! !!MetacelloProject methodsFor: 'versions' stamp: 'dkh 7/15/2009 18:56'!lastVersion	| coll |	coll := (self map values asArray sortBy: [:a :b | a <= b ]) asOrderedCollection.	coll isEmpty ifTrue: [ ^nil ].	^coll last! !!MetacelloProject methodsFor: 'versions' stamp: 'dkh 10/7/2009 10:06'!latestVersion	| excluded |	excluded := self excludeFromLatestVersion.	^(self map values select: [:version |  		(excluded includes: version blessing) not ]) detectMax: [:version | version ]! !!MetacelloProject methodsFor: 'versions' stamp: 'dkh 8/26/2009 10:07'!latestVersion: blessing	^(self map values select: [:version | blessing = version blessing ]) detectMax: [:version | version ]! !!MetacelloProject methodsFor: 'versions' stamp: 'dkh 1/5/2010 10:43'!latestVersionMatching: versionPatternString	"Answer whether the version number of the receiver matches the given pattern string.	 A Metacello version number is made up of version sequences delimited by the characters $. and $-.	 The $. introduces a numeric version sequence and $- introduces an alphanumeric version sequence.	 	 A version pattern is made up of version pattern match sequences. also delimited by the characters $. 	 and $-.. Each pattern match sequence is tested against the corresponding version sequence of the 	 receiver, using the 'standard' pattern matching rules. All sequences must answer true for a match.		 The special pattern sequence '?' is a match for the corresponding version sequence and all subsequent 	 version sequences. '?' as the version pattern matches all versions. No more version pattern 	 sequences are permitted once the '?' sequence is used. If used, it is the last version pattern	 sequence."	^self 		latestVersionMatching: versionPatternString 		includedBlessings: #()		excludedBlessings: self excludeFromLatestVersion! !!MetacelloProject methodsFor: 'versions' stamp: 'dkh 12/21/2009 14:04'!latestVersionMatching: versionPatternString excludedBlessings: excluded	^self 		latestVersionMatching: versionPatternString 		includedBlessings: #()		excludedBlessings: excluded! !!MetacelloProject methodsFor: 'versions' stamp: 'dkh 12/21/2009 13:59'!latestVersionMatching: versionPatternString includedBlessings: included	^self 		latestVersionMatching: versionPatternString 		includedBlessings: included		excludedBlessings: self excludeFromLatestVersion! !!MetacelloProject methodsFor: 'versions' stamp: 'dkh 12/21/2009 14:41'!latestVersionMatching: versionPatternString includedBlessings: included excludedBlessings: excludedBlessings	| excluded |	excluded := excludedBlessings asSet copy.	excluded removeAllFoundIn: included.	^(self map values select: [:version |		(included isEmpty or: [ included includes: version blessing ]) 			and: [ (excluded includes: version blessing) not 				and: [ version versionNumber match: versionPatternString ]]])		detectMax: [:version | version ]! !!MetacelloProject methodsFor: 'loading' stamp: 'dkh 9/10/2009 15:09'!load: aVersionString	^(self version: aVersionString) load! !!MetacelloProject methodsFor: 'accessing' stamp: 'dkh 9/10/2009 13:27'!loadType	"#atomic or #linear"	loadType == nil ifTrue: [ ^#atomic ].	^loadType! !!MetacelloProject methodsFor: 'accessing' stamp: 'dkh 9/10/2009 13:27'!loadType: aSymbol	"#atomic or #linear"	loadType := aSymbol! !!MetacelloProject methodsFor: 'spec classes' stamp: 'dkh 6/18/2009 10:10'!loader	^loader! !!MetacelloProject methodsFor: 'spec classes' stamp: 'dkh 6/18/2009 10:10'!loader: aLoader	loader := aLoader! !!MetacelloProject methodsFor: 'spec classes' stamp: 'dkh 6/9/2009 16:04'!loaderClass	loaderClass == nil ifTrue: [ loaderClass := self defaultLoaderClass ].	^loaderClass! !!MetacelloProject methodsFor: 'spec classes' stamp: 'dkh 6/9/2009 16:05'!loaderClass: aMetacelloSpecLoader	loaderClass := aMetacelloSpecLoader! !!MetacelloProject methodsFor: 'accessing' stamp: 'dkh 10/28/2009 10:52'!map	^versionMap								! !!MetacelloProject methodsFor: 'accessing' stamp: 'dkh 10/3/2009 17:31'!map: aDictionary	versionMap := aDictionary! !!MetacelloProject methodsFor: 'spec classes' stamp: 'dkh 10/4/2009 12:18'!packagesSpec	^self packagesSpecClass for: self! !!MetacelloProject methodsFor: 'spec classes' stamp: 'dkh 10/4/2009 12:18'!packagesSpecClass	^MetacelloPackagesSpec! !!MetacelloProject methodsFor: 'private' stamp: 'dkh 10/17/2009 09:32'!platformAttributes	 ^self projectPlatformAttributes! !!MetacelloProject methodsFor: 'private' stamp: 'dkh 7/28/2009 16:42'!pragmaKeywords	^#(version:attribute: blessing:attribute: description:attribute: required:attribute: groups:attribute: doits:attribute:)! !!MetacelloProject methodsFor: 'printing' stamp: 'dkh 10/26/2009 16:07'!printOn: aStream	self configuration class printOn: aStream.	aStream nextPut: $(.	self versions do: [:vrsn | aStream nextPutAll: vrsn printString; nextPut: $,; space ].	aStream 		nextPut: $).	! !!MetacelloProject methodsFor: 'accessing' stamp: 'dkh 9/2/2009 06:02'!project	^self! !!MetacelloProject methodsFor: 'private' stamp: 'dkh 9/2/2009 08:31'!projectAttributes	projectAttributes ~~ nil ifTrue: [ ^projectAttributes ].	^#()! !!MetacelloProject methodsFor: 'private' stamp: 'dkh 9/2/2009 08:31'!projectAttributes: aList	projectAttributes := aList! !!MetacelloProject methodsFor: 'private' stamp: 'dkh 9/2/2009 07:38'!projectPlatformAttributes	| list aBlock |	list := OrderedCollection new.	(aBlock := self projectAttributes) ~~ nil 		ifTrue: [ list addAll: aBlock value ].	^self defaultPlatformAttributes, list! !!MetacelloProject methodsFor: 'spec classes' stamp: 'dkh 10/4/2009 12:18'!projectReferenceSpec	^self projectReferenceSpecClass for: self! !!MetacelloProject methodsFor: 'spec classes' stamp: 'dkh 10/4/2009 12:18'!projectReferenceSpecClass	^MetacelloProjectReferenceSpec! !!MetacelloProject methodsFor: 'spec classes' stamp: 'dkh 06/01/2009 14:54'!projectSpec	^self projectSpecClass for: self! !!MetacelloProject methodsFor: 'spec classes' stamp: 'dkh 10/4/2009 12:18'!projectSpecClass	^MetacelloMCProjectSpec! !!MetacelloProject methodsFor: 'private' stamp: 'DaleHenrichs 1/19/2010 15:31'!sortedAndFilteredVersions		^(self map values asArray sortBy: [:a :b | a >= b ]) select: [:vrsn | (#(broken baseline) includes: vrsn blessing) not ].! !!MetacelloProject methodsFor: 'spec classes' stamp: 'dkh 6/5/2009 11:47'!valueHolderSpec	^self valueHolderSpecClass for: self! !!MetacelloProject methodsFor: 'spec classes' stamp: 'dkh 6/5/2009 11:47'!valueHolderSpecClass	^MetacelloValueHolderSpec! !!MetacelloProject methodsFor: 'versions' stamp: 'dkh 8/9/2009 15:11'!version: aVersionString	^self version: aVersionString ifAbsent: [ ^nil ]! !!MetacelloProject methodsFor: 'versions' stamp: 'dkh 06/26/2009 09:28'!version: aVersionString ifAbsent: aBlock	^self map at: aVersionString  ifAbsent: aBlock! !!MetacelloProject methodsFor: 'spec classes' stamp: 'dkh 06/01/2009 11:00'!versionSpec	^self versionSpecClass for: self! !!MetacelloProject methodsFor: 'spec classes' stamp: 'dkh 6/4/2009 18:51'!versionSpecClass	^MetacelloVersionSpec! !!MetacelloProject methodsFor: 'versions' stamp: 'dkh 9/10/2009 15:07'!versions	^self map values asArray sortBy: [:a :b | a <= b ]! !!MetacelloAbstractPackageSpec methodsFor: 'adding' stamp: 'dkh 10/5/2009 12:07'!addToMetacelloPackages: aMetacelloPackagesSpec	aMetacelloPackagesSpec addMember: 		(aMetacelloPackagesSpec addMember 			name: self name;			spec: self;			yourself)! !!MetacelloAbstractPackageSpec methodsFor: 'querying' stamp: 'dkh 1/4/2010 18:54'!answers	answers == nil ifTrue: [ answers := #() ].	^answers! !!MetacelloAbstractPackageSpec methodsFor: 'accessing' stamp: 'dkh 1/4/2010 19:01'!answers: aListOfPairs	self setAnswers: aListOfPairs! !!MetacelloAbstractPackageSpec methodsFor: 'printing' stamp: 'dkh 01/07/2010 16:48'!configMethodBodyOn: aStream hasName: hasName cascading: cascading indent: indent	| hasCascading hasRequires hasIncludes hasAnswers |	hasCascading := cascading.	hasRequires := self requires isEmpty not.	hasIncludes := self includes isEmpty not.	hasAnswers := self answers isEmpty not.	hasRequires		ifTrue: [ 			hasName | hasCascading				ifTrue: [ aStream cr; tab: indent ].			aStream nextPutAll: 'requires: #('.			self requires do: [:str | aStream nextPutAll: str printString, ' ' ].			hasIncludes | hasAnswers | hasCascading				ifTrue: [ aStream nextPutAll: ');' ]				ifFalse: [ aStream nextPut: $) ]].	hasIncludes		ifTrue: [ 			hasName | hasRequires | hasCascading				ifTrue: [ aStream cr; tab: indent ].			aStream nextPutAll: 'includes: #('.			self includes do: [:str | aStream nextPutAll: str printString, ' ' ].			hasAnswers | hasCascading				ifTrue: [ aStream nextPutAll: ');' ]				ifFalse: [ aStream nextPut: $) ]].	hasAnswers		ifTrue: [ 			hasName | hasRequires | hasIncludes | hasCascading				ifTrue: [ aStream cr; tab: indent ].			aStream nextPutAll: 'supplyingAnswers #( '.			self answers do: [:ar | 				aStream nextPutAll: '#( '.				ar do: [:val | 					(val isString or: [ val isNumber or: [ val isSymbol or: [ val isCharacter ]]])						ifTrue: [  aStream nextPutAll: val printString, ' ' ].					val == true						ifTrue: [  aStream nextPutAll: 'true ' ].					val == false						ifTrue: [  aStream nextPutAll: 'false ' ]].				aStream nextPutAll: ') ' ].			hasCascading				ifTrue: [ aStream nextPutAll: ');' ]				ifFalse: [ aStream nextPut: $) ]].! !!MetacelloAbstractPackageSpec methodsFor: 'printing' stamp: 'dkh 10/5/2009 12:41'!configMethodCascadeOn: aStream member: aMember last: lastCascade indent: indent	self subclassResponsibility! !!MetacelloAbstractPackageSpec methodsFor: 'printing' stamp: 'DaleHenrichs 1/21/2010 16:01'!configMethodOn: aStream for: aValue selector: selector cascading: cascading cascade: cascade indent: indent	aValue == nil ifTrue: [ ^self ].	cascading ifTrue: [ aStream cr; tab: indent ].	aStream  nextPutAll: selector, aValue printString.	cascade ifTrue: [ aStream nextPut: $; ]! !!MetacelloAbstractPackageSpec methodsFor: '*metacello-mc-querying' stamp: 'dkh 8/18/2009 11:42'!file 	"MetacelloPackageSpec compatibility"		^nil! !!MetacelloAbstractPackageSpec methodsFor: 'querying' stamp: 'dkh 9/23/2009 08:45'!includes	includes == nil ifTrue: [ includes := #() ].	^includes! !!MetacelloAbstractPackageSpec methodsFor: 'accessing' stamp: 'dkh 9/23/2009 08:45'!includes: aCollection	aCollection setIncludesInMetacelloPackage: self! !!MetacelloAbstractPackageSpec methodsFor: 'private' stamp: 'dkh 10/10/2009 10:59'!includesForPackageOrdering	^#()! !!MetacelloAbstractPackageSpec methodsFor: '*metacello-mc-querying' stamp: 'DaleHenrichs 01/20/2010 13:40'!isPackageLoaded	^false! !!MetacelloAbstractPackageSpec methodsFor: 'printing' stamp: 'DaleHenrichs 3/9/2010 16:33'!label	^self name! !!MetacelloAbstractPackageSpec methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 3/5/2010 09:46'!loadUsing: aLoader gofer: gofer	^self subclassResponsibility! !!MetacelloAbstractPackageSpec methodsFor: 'merging' stamp: 'dkh 6/23/2009 11:22'!mergeIntoMetacelloPackages: aMetacelloPackagesSpec	aMetacelloPackagesSpec addMember: 		(aMetacelloPackagesSpec mergeMember 			name: self name;			spec: self;			yourself)! !!MetacelloAbstractPackageSpec methodsFor: 'merging' stamp: 'DaleHenrichs 1/21/2010 20:36'!mergeMap	| map |	map := super mergeMap.	map at: #requires put: requires.	map at: #includes put: includes.	map at: #answers put: answers.	^map! !!MetacelloAbstractPackageSpec methodsFor: 'merging' stamp: 'DaleHenrichs 1/21/2010 20:21'!mergeSpec: anotherSpec	| newSpec map anotherRequires anotherIncludes anotherAnswers |	newSpec := super mergeSpec: anotherSpec.	map := anotherSpec mergeMap.	anotherSpec name ~~ nil 		ifTrue: [ newSpec name: anotherSpec name ].	(anotherRequires := map at: #requires) ~~ nil		ifTrue: [ newSpec setRequires: self requires, anotherRequires ].	(anotherIncludes := map at: #includes) ~~ nil		ifTrue: [ newSpec setIncludes: self includes, anotherIncludes ].	(anotherAnswers := map at: #answers) ~~ nil		ifTrue: [ newSpec setAnswers: self answers, anotherAnswers ].	^newSpec	! !!MetacelloAbstractPackageSpec methodsFor: 'querying' stamp: 'dkh 6/23/2009 11:24'!name	^name! !!MetacelloAbstractPackageSpec methodsFor: 'accessing' stamp: 'dkh 6/23/2009 11:24'!name: aString	name := aString! !!MetacelloAbstractPackageSpec methodsFor: 'merging' stamp: 'DaleHenrichs 1/21/2010 20:21'!nonOverridable	^#( includes requires answers )! !!MetacelloAbstractPackageSpec methodsFor: '*metacello-mc' stamp: 'dkh 11/12/2009 16:57'!packageRepository		^nil! !!MetacelloAbstractPackageSpec methodsFor: '*metacello-mc' stamp: 'dkh 12/22/2009 09:56'!packagesNeedSavingVisited: visitedProjects using: repos into: aCollection	"noop by default"! !!MetacelloAbstractPackageSpec methodsFor: 'copying' stamp: 'dkh 1/4/2010 18:55'!postCopy	super postCopy.	requires := requires copy.	includes := includes copy.	answers := answers copy.! !!MetacelloAbstractPackageSpec methodsFor: 'visiting' stamp: 'dkh 10/5/2009 09:38'!projectDo: projectBlock packageDo: packageBlock groupDo: groupBlock	self subclassResponsibility! !!MetacelloAbstractPackageSpec methodsFor: 'accessing' stamp: 'dkh 10/24/2009 19:41'!referencedSpec	^self! !!MetacelloAbstractPackageSpec methodsFor: 'removing' stamp: 'dkh 6/23/2009 11:24'!removeFromMetacelloPackages: aMetacelloPackagesSpec	aMetacelloPackagesSpec addMember: 		(aMetacelloPackagesSpec removeMember 			name: self name;			spec: self;			yourself)! !!MetacelloAbstractPackageSpec methodsFor: '*metacello-mc-querying' stamp: 'dkh 6/23/2009 13:55'!repository		^nil! !!MetacelloAbstractPackageSpec methodsFor: '*metacello-mc' stamp: 'dkh 08/03/2009 12:40'!repositorySpecs	^#()! !!MetacelloAbstractPackageSpec methodsFor: 'querying' stamp: 'dkh 6/23/2009 11:25'!requires	requires == nil ifTrue: [ requires := #() ].	^requires! !!MetacelloAbstractPackageSpec methodsFor: 'accessing' stamp: 'dkh 6/23/2009 11:25'!requires: aCollection	aCollection setRequiresInMetacelloPackage: self! !!MetacelloAbstractPackageSpec methodsFor: '*metacello-mc' stamp: 'dkh 10/21/2009 15:50'!resolveToAllPackagesIn: aVersionSpec into: packages visited: visited	visited		visit: self		doing: [:spec |			self visitingWithPackages: packages.			(spec includes, spec requires) do: [:pkgName |				(aVersionSpec packageNamed: pkgName)					projectDo: [:prj | 						(prj resolveToAllPackagesIn: aVersionSpec visited: visited) do: [:pkg | 							packages at: pkg name put: pkg ]] 					packageDo: [:pkg | 						packages at: pkg name put: pkg.						(pkg resolveToAllPackagesIn: aVersionSpec visited: visited) do: [:rpkg | 							packages at: rpkg name put: rpkg ] ] 					groupDo: [:grp | grp resolveToAllPackagesIn: aVersionSpec into: packages  visited: visited ]]]! !!MetacelloAbstractPackageSpec methodsFor: '*metacello-mc' stamp: 'dkh 10/21/2009 15:37'!resolveToAllPackagesIn: aVersionSpec visited: visited	| packages |	packages := Dictionary new.	self resolveToAllPackagesIn: aVersionSpec into: packages visited: visited.	^packages values asOrderedCollection! !!MetacelloAbstractPackageSpec methodsFor: '*metacello-mc' stamp: 'dkh 10/6/2009 15:02'!resolveToLoadableSpec	^self! !!MetacelloAbstractPackageSpec methodsFor: '*metacello-mc' stamp: 'dkh 10/21/2009 15:22'!resolveToPackagesIn: aVersionSpec visited: visited	^self subclassResponsibility! !!MetacelloAbstractPackageSpec methodsFor: 'private' stamp: 'dkh 1/4/2010 18:54'!setAnswers: aCollection	answers := aCollection! !!MetacelloAbstractPackageSpec methodsFor: 'private' stamp: 'dkh 9/23/2009 08:45'!setIncludes: aCollection	includes := aCollection! !!MetacelloAbstractPackageSpec methodsFor: 'private' stamp: 'dkh 6/23/2009 11:25'!setRequires: aCollection	requires := aCollection! !!MetacelloAbstractPackageSpec methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 1/21/2010 21:03'!updateForSpawnMethod: sourceSpec	answers := name := requires := includes := nil! !!MetacelloAbstractPackageSpec methodsFor: '*metacello-mc' stamp: 'dkh 08/03/2009 13:19'!updatePackageRepositoriesFor: aVersionSpec	"noop by default"		^true! !!MetacelloAbstractPackageSpec methodsFor: '*metacello-mc' stamp: 'dkh 10/5/2009 16:16'!updatePackageSpec: updatedSpecs using: anMCLoader	"Add pkg copy to updatedSpecs if the file in current image is different from the receiver's file"! !!MetacelloAbstractPackageSpec methodsFor: '*metacello-mc-querying' stamp: 'dkh 10/24/2009 10:43'!version 	"MetacelloPackageSpec compatibility"		^nil! !!MetacelloAbstractPackageSpec methodsFor: '*metacello-mc' stamp: 'dkh 10/21/2009 15:50'!visitingWithPackages: packages	"noop"! !!MetacelloGroupSpec methodsFor: 'accessing' stamp: 'dkh 1/4/2010 19:02'!answers: aListOfPairs	self shouldNotImplement! !!MetacelloGroupSpec methodsFor: 'printing' stamp: 'dkh 10/24/2009 15:09'!configMethodCascadeOn: aStream member: aMember last: lastCascade indent: indent	aMember methodUpdateSelector == #remove:		ifTrue: [ aStream nextPutAll: 'removeGroup: ', self name printString. ]		ifFalse: [			aStream 				nextPutAll: 'group: ', self name printString;				space; 				nextPutAll: aMember methodUpdateSelector asString, ' #('.			self includes do: [:str | aStream nextPutAll: str printString, ' ' ].			aStream nextPut: $) ].	lastCascade		ifTrue: [ aStream nextPut: $. ]		ifFalse: [ aStream nextPut: $;; cr ].! !!MetacelloGroupSpec methodsFor: 'printing' stamp: 'dkh 1/6/2010 18:39'!configMethodOn: aStream indent: indent	aStream 		tab: indent;		nextPutAll: 'spec '; cr;		tab: indent + 1;		nextPutAll: 'name: ', self name printString, ';'.	self configMethodBodyOn: aStream hasName: true cascading: false indent: indent + 1.	aStream nextPut: $.! !!MetacelloGroupSpec methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 3/5/2010 09:46'!loadUsing: aLoader gofer: gofer	"noop"! !!MetacelloGroupSpec methodsFor: 'visiting' stamp: 'dkh 10/5/2009 09:39'!projectDo: projectBlock packageDo: packageBlock groupDo: groupBlock	groupBlock value: self! !!MetacelloGroupSpec methodsFor: 'accessing' stamp: 'dkh 10/4/2009 09:41'!requires: aCollection	self shouldNotImplement! !!MetacelloGroupSpec methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 1/19/2010 12:14'!resolveToLoadableSpec	^nil! !!MetacelloGroupSpec methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 1/21/2010 15:54'!resolveToPackagesIn: aVersionSpec into: packages visited: visited	visited 		visit: self 		doing: [:aSpec | | map |			map := aVersionSpec packages map.			aSpec includes do: [:pkgName | 				(aVersionSpec packageNamed: pkgName forMap: map ifAbsent: [])					projectDo: [:ignored | ] 					packageDo: [:pkg | packages at: pkg name put: pkg ] 					groupDo: [:grp | grp resolveToPackagesIn: aVersionSpec into: packages visited: visited ]]]! !!MetacelloGroupSpec methodsFor: '*metacello-mc' stamp: 'dkh 10/21/2009 15:23'!resolveToPackagesIn: aVersionSpec visited: visited	| packages |	packages := Dictionary new.	self resolveToPackagesIn: aVersionSpec into: packages visited: visited.	^packages values asOrderedCollection! !!MetacelloPackageSpec methodsFor: 'testing' stamp: 'DaleHenrichs 2/5/2010 11:36'!compareCurrentVersion: anOperator targetVersionStatus: statusIgnored using: anMCLoader	self 		currentPackageLoaded: [:bool | ^bool ] 		comparing: anOperator 		notLoaded: [:ignored | ^false ]		using: anMCLoader! !!MetacelloPackageSpec methodsFor: 'testing' stamp: 'DaleHenrichs 2/5/2010 14:03'!compareRelativeCurrentVersion: anOperator targetVersionStatus: statusIgnored using: anMCLoader	^self compareCurrentVersion: anOperator targetVersionStatus: statusIgnored using: anMCLoader! !!MetacelloPackageSpec methodsFor: 'printing' stamp: 'dkh 1/6/2010 18:39'!configMethodBodyOn: aStream hasName: hasName indent: indent	| hasFile hasRepositories hasPreLoadDoIt hasPostLoadDoIt hasRequiresOrIncludesOrAnswers |	hasFile := file ~~ nil.	hasRepositories := self repositorySpecs size > 0.	hasPreLoadDoIt := self preLoadDoIt ~~ nil.	hasPostLoadDoIt := self postLoadDoIt ~~ nil.	hasRequiresOrIncludesOrAnswers := (self requires isEmpty and: [ self includes isEmpty and: [self answers isEmpty ]]) not.	hasRequiresOrIncludesOrAnswers		ifTrue: [ 			self 				configMethodBodyOn: aStream 				hasName: hasName 				cascading: hasFile | hasRepositories | hasPreLoadDoIt | hasPostLoadDoIt				indent: indent ].	self 		configMethodOn: aStream 		for: file 		selector: 'file: ' 		cascading: hasName | hasRepositories | hasPreLoadDoIt | hasPostLoadDoIt | hasRequiresOrIncludesOrAnswers 		cascade: hasRepositories | hasPreLoadDoIt | hasPostLoadDoIt 		indent: indent.	hasRepositories		ifTrue: [ 			(self repositorySpecs size > 1)				ifTrue: [ 					hasName | hasFile | hasPreLoadDoIt | hasPostLoadDoIt | hasRequiresOrIncludesOrAnswers						ifTrue: [ aStream cr ]						ifFalse: [ 							aStream								tab: indent; 								nextPutAll: 'spec '].					aStream 						tab: indent; 						nextPutAll: 'repositories: ['; 						cr;						tab: indent + 1;						nextPutAll: 'spec'; 						cr.					self repositories configMethodCascadeOn: aStream indent: indent + 1.					aStream nextPutAll: ' ]' ]				ifFalse: [ 					hasName | hasFile | hasPreLoadDoIt | hasPostLoadDoIt | hasRequiresOrIncludesOrAnswers						ifTrue: [ aStream cr; tab: indent ].					self repositories configMethodCascadeOn: aStream indent: indent ].			hasPostLoadDoIt | hasPostLoadDoIt ifTrue: [ aStream nextPut: $; ] ].	self 		configMethodOn: aStream 		for: self preLoadDoIt 		selector: 'preLoadDoIt: '		cascading: hasName | hasFile | hasRepositories | hasPostLoadDoIt | hasRequiresOrIncludesOrAnswers 		cascade: hasPostLoadDoIt 		indent: indent.	self 		configMethodOn: aStream 		for: self postLoadDoIt 		selector: 'postLoadDoIt: ' 		cascading: hasName | hasFile | hasRepositories | hasPreLoadDoIt | hasRequiresOrIncludesOrAnswers 		cascade: false 		indent: indent.	aStream nextPut: $.! !!MetacelloPackageSpec methodsFor: 'printing' stamp: 'dkh 10/7/2009 09:36'!configMethodCascadeOn: aStream member: aMember last: lastCascade indent: indent	aMember methodUpdateSelector  == #remove:		ifTrue: [ aStream  nextPutAll: 'removePackage: ', self name printString ]		ifFalse: [ self configShortCutMethodBodyOn: aStream member: aMember indent: indent ].	lastCascade		ifTrue: [ aStream nextPut: $. ]		ifFalse: [ aStream nextPut: $;; cr ]! !!MetacelloPackageSpec methodsFor: 'printing' stamp: 'dkh 1/6/2010 18:05'!configMethodOn: aStream indent: indent	| hasRepositories hasPreLoadDoIt hasPostLoadDoIt hasRequiresOrIncludesOrAnswers hasFile |	hasFile := file ~~ nil.	hasRepositories := self repositorySpecs size > 0.	hasPreLoadDoIt := self preLoadDoIt ~~ nil.	hasPostLoadDoIt := self postLoadDoIt ~~ nil.	hasRequiresOrIncludesOrAnswers := (self requires isEmpty and: [ self includes isEmpty and: [self answers isEmpty ]]) not.	aStream tab: indent; nextPutAll: 'spec '.	hasFile | hasRepositories | hasPreLoadDoIt | hasPostLoadDoIt | hasRequiresOrIncludesOrAnswers		ifTrue: [			aStream cr; tab: indent + 1; nextPutAll: 'name: ', self name printString; nextPut: $;.			self configMethodBodyOn: aStream hasName: true indent: indent + 1 ]		ifFalse: [			aStream nextPutAll: 'name: ', self name printString ]! !!MetacelloPackageSpec methodsFor: 'printing' stamp: 'dkh 1/6/2010 18:05'!configShortCutMethodBodyOn: aStream member: aMember indent: indent	| hasFile hasRepositories hasPreLoadDoIt hasPostLoadDoIt hasRequiresOrIncludesOrAnswers |	hasFile := file ~~ nil.	hasRepositories := self repositorySpecs size > 0.	hasPreLoadDoIt := self preLoadDoIt ~~ nil.	hasPostLoadDoIt := self postLoadDoIt ~~ nil.	hasRequiresOrIncludesOrAnswers := (self requires isEmpty and: [ self includes isEmpty and: [self answers isEmpty ]]) not.	hasRepositories | hasPreLoadDoIt | hasPostLoadDoIt | hasRequiresOrIncludesOrAnswers		ifTrue: [			aStream 				nextPutAll: 'package: ', self name printString, ' ';				nextPutAll: aMember methodUpdateSelector asString, ' ['; cr.			aStream tab: indent + 1; nextPutAll: 'spec '.			self configMethodBodyOn: aStream hasName: false indent: indent + 2.			aStream nextPutAll: ' ]'.			^self ].	aStream nextPutAll: 'package: ', self name printString.	hasFile		ifTrue: [ aStream nextPutAll: ' with: ', file printString ]! !!MetacelloPackageSpec methodsFor: 'testing' stamp: 'DaleHenrichs 4/15/2010 11:47'!currentPackageLoaded: loadedBlock comparing: comarisonOperator notLoaded: notLoadedBlock using: anMCLoader		"Use currentVersionInfoFor: because it involves the loader and returns versionInfo for a planned load 	 (atomic loaders) or currently loaded package"	| vi wcName |	vi := anMCLoader currentVersionInfoFor: self.	vi notNil		ifTrue: [ | fileRef wcRef |			self getFile == nil ifTrue: [ ^loadedBlock value: false ].			wcName := vi name.			fileRef := GoferResolvedReference name: self file.			wcRef := GoferResolvedReference name: wcName.			^loadedBlock value: (wcRef compare: fileRef using: comarisonOperator) ].	^notLoadedBlock value: true! !!MetacelloPackageSpec methodsFor: 'gofer' stamp: 'dkh 9/25/2009 11:26'!currentVersionInfo	^self goferPackage currentVersionInfo! !!MetacelloPackageSpec methodsFor: 'loading' stamp: 'DaleHenrichs 3/5/2010 19:05'!ensureLoadedForDevelopmentUsing: mcLoader	"noop"		^true! !!MetacelloPackageSpec methodsFor: 'loading' stamp: 'DaleHenrichs 3/21/2010 13:22'!explicitLoadUsing: mcLoader	| wc fetchingSpecLoader |	((wc := self workingCopy) ~~ nil and: [ wc needsSaving ]) 		ifTrue: [ 			Transcript cr; show: 'Skipping load of modified package: ', self file.			^self ].	"fetch and explicitly load it"	fetchingSpecLoader := mcLoader fetchingSpecLoader.	fetchingSpecLoader		explicitLoadPackageSpecs: (Array with: self) 		repositories: (fetchingSpecLoader repositoriesFrom: self repositorySpecs).! !!MetacelloPackageSpec methodsFor: 'private' stamp: 'dkh 10/7/2009 01:09'!extractNameFromFile	file == nil ifTrue: [ ^nil ].	^(self loader nameComponentsFrom: self file) first! !!MetacelloPackageSpec methodsFor: 'loading' stamp: 'DaleHenrichs 3/7/2010 09:36'!fetch	self fetchUsing: self loader! !!MetacelloPackageSpec methodsFor: 'loading' stamp: 'DaleHenrichs 4/12/2010 13:57'!fetchPackage: aLoaderPolicy	self fetchUsing: 		(self loader			loaderPolicy: aLoaderPolicy;			yourself)! !!MetacelloPackageSpec methodsFor: 'loading' stamp: 'DaleHenrichs 3/7/2010 09:38'!fetchUsing: mcLoader	| fetchingSpecLoader |	fetchingSpecLoader := mcLoader fetchingSpecLoader.	fetchingSpecLoader		linearLoadPackageSpecs: (Array with: self) 		repositories: (fetchingSpecLoader repositoriesFrom: self repositorySpecs).! !!MetacelloPackageSpec methodsFor: 'querying' stamp: 'dkh 10/6/2009 15:12'!file	file == nil ifTrue: [ ^self name ].	^file! !!MetacelloPackageSpec methodsFor: 'accessing' stamp: 'dkh 06/03/2009 12:11'!file: aString	file := aString! !!MetacelloPackageSpec methodsFor: 'accessing' stamp: 'dkh 10/30/2009 10:37'!getFile	"raw access to iv"		^file! !!MetacelloPackageSpec methodsFor: 'development support' stamp: 'DaleHenrichs 3/15/2010 11:38'!goferCommitPackage: commitMessage	"uses gofer to do commit ... non-interactive"		| latestFile pkgSpec |	^(file notNil and: [ self name = self file ])		ifTrue: [			latestFile := self loader latestPackage: self name fromRepository: self repositorySpecs.			pkgSpec := self copy.			pkgSpec file: latestFile.			pkgSpec goferCommitPackage: commitMessage ]		ifFalse: [ self loader goferCommitPackageUsing: self repositorySpecs commitMessage: commitMessage ]! !!MetacelloPackageSpec methodsFor: 'accessing' stamp: 'dkh 1/13/2010 17:04'!goferLoaderReference	^file == nil 		ifTrue: [ GoferPackageReference name: self name ]		ifFalse: [ 			"does Monticello-style #versionInfoFromVersionNamed: matching"			MetacelloGoferPackage name: self name packageFilename: self file ]! !!MetacelloPackageSpec methodsFor: 'accessing' stamp: 'dkh 12/15/2009 10:32'!goferPackage	goferPackage == nil 		ifTrue: [ goferPackage := MetacelloGoferPackage name: self name packageFilename: self file ].	^goferPackage! !!MetacelloPackageSpec methodsFor: 'private' stamp: 'dkh 10/10/2009 11:00'!includesForPackageOrdering	^self includes! !!MetacelloPackageSpec methodsFor: 'accessing' stamp: 'dkh 1/6/2010 17:58'!info	"test compatibility method"	^self! !!MetacelloPackageSpec methodsFor: 'querying' stamp: 'dkh 5/14/2010 15:50'!isPackageLoaded	^self isPackageLoaded: self loader! !!MetacelloPackageSpec methodsFor: 'querying' stamp: 'dkh 5/14/2010 15:50'!isPackageLoaded: aLoader	^(self workingCopyNameFor: aLoader) ~~ nil! !!MetacelloPackageSpec methodsFor: 'loading' stamp: 'DaleHenrichs 3/6/2010 10:28'!load	self explicitLoadUsing: self loader! !!MetacelloPackageSpec methodsFor: 'loading' stamp: 'DaleHenrichs 3/10/2010 12:32'!loadUsing: mcLoader	self loader doingLoads: [ self explicitLoadUsing: mcLoader ]! !!MetacelloPackageSpec methodsFor: 'loading' stamp: 'DaleHenrichs 4/9/2010 12:29'!loadUsing: aLoader gofer: gofer	^aLoader linearLoadPackageSpec: self gofer: gofer! !!MetacelloPackageSpec methodsFor: 'merging' stamp: 'DaleHenrichs 1/21/2010 20:37'!mergeMap	| map |	map := super mergeMap.	map at: #file put: file.	map at: #repositories put: self repositories.	map at: #preLoadDoIt put: preLoadDoIt.	map at: #postLoadDoIt put: postLoadDoIt.	^map! !!MetacelloPackageSpec methodsFor: 'merging' stamp: 'Dalehenrichs 02/10/2010 10:54'!mergeSpec: anotherSpec	| newSpec map anotherPackages anotherRepositories |	newSpec := super mergeSpec: anotherSpec.	map := anotherSpec mergeMap.	(anotherRepositories := map at: #repositories) notEmpty		ifTrue: [ 			newSpec 				repositories: (self repositories isEmpty					ifTrue: [ anotherRepositories ]					ifFalse: [ self repositories mergeSpec: anotherRepositories ]) ].	^newSpec! !!MetacelloPackageSpec methodsFor: 'querying' stamp: 'dkh 06/03/2009 12:13'!name	name == nil ifTrue: [ name := self extractNameFromFile ].	^name! !!MetacelloPackageSpec methodsFor: 'merging' stamp: 'dkh 1/2/2010 16:29'!nonOverridable	^super nonOverridable, #( repositories)! !!MetacelloPackageSpec methodsFor: 'querying' stamp: 'dkh 1/2/2010 15:35'!packageRepository		self repositorySpecs isEmpty ifTrue: [ ^nil ].	^self repositorySpecs first! !!MetacelloPackageSpec methodsFor: 'loading' stamp: 'dkh 6/8/2009 16:16'!packageSpecsInLoadOrder	^{ self. }! !!MetacelloPackageSpec methodsFor: 'development support' stamp: 'dkh 12/22/2009 10:17'!packagesNeedSavingVisited: visitedProjects using: repos into: aCollection	^self loader packagesNeedSavingUsing: repos into: aCollection! !!MetacelloPackageSpec methodsFor: 'copying' stamp: 'dkh 1/2/2010 15:46'!postCopy	super postCopy.	goferPackage := nil.	repositories := repositories copy.! !!MetacelloPackageSpec methodsFor: 'querying' stamp: 'DaleHenrichs 1/21/2010 20:40'!postLoadDoIt	^postLoadDoIt! !!MetacelloPackageSpec methodsFor: 'accessing' stamp: 'DaleHenrichs 1/21/2010 20:40'!postLoadDoIt: aSymbol	postLoadDoIt := aSymbol! !!MetacelloPackageSpec methodsFor: 'querying' stamp: 'DaleHenrichs 1/21/2010 20:40'!preLoadDoIt	^preLoadDoIt! !!MetacelloPackageSpec methodsFor: 'accessing' stamp: 'DaleHenrichs 1/21/2010 20:40'!preLoadDoIt: aSymbol	preLoadDoIt := aSymbol! !!MetacelloPackageSpec methodsFor: 'visiting' stamp: 'dkh 10/5/2009 09:39'!projectDo: projectBlock packageDo: packageBlock groupDo: groupBlock	packageBlock value: self! !!MetacelloPackageSpec methodsFor: 'querying' stamp: 'dkh 1/2/2010 15:41'!repositories	repositories == nil ifTrue: [ repositories := self project repositoriesSpec ].	^ repositories! !!MetacelloPackageSpec methodsFor: 'querying' stamp: 'dkh 1/2/2010 15:41'!repositories: anObject	repositories := anObject! !!MetacelloPackageSpec methodsFor: 'querying' stamp: 'dkh 1/2/2010 15:46'!repository	self deprecated: 'Use repositories or repositorySpecs'.	^self packageRepository! !!MetacelloPackageSpec methodsFor: 'accessing' stamp: 'dkh 1/2/2010 15:44'!repository: aStringOrMetacelloRepositorySpec	self repositories repository: aStringOrMetacelloRepositorySpec! !!MetacelloPackageSpec methodsFor: 'accessing' stamp: 'dkh 1/2/2010 15:47'!repository: aString username: username password: password	self repositories repository: aString username: username password: password! !!MetacelloPackageSpec methodsFor: 'loading' stamp: 'dkh 1/2/2010 15:43'!repositorySpecs	^self repositories map values ! !!MetacelloPackageSpec methodsFor: 'private' stamp: 'dkh 10/21/2009 15:22'!resolveToPackagesIn: aVersionSpec visited: visited	^{ self }! !!MetacelloPackageSpec methodsFor: 'development support' stamp: 'DaleHenrichs 3/15/2010 11:35'!savePackage	"Interactive save ... prompted for commit message and package name unless MCVersionNameAndMessageRequest handled"	| latestFile pkgSpec |	^(file notNil and: [ self name = self file ])		ifTrue: [			latestFile := self loader latestPackage: self name fromRepository: self repositorySpecs.			pkgSpec := self copy.			pkgSpec file: latestFile.			pkgSpec savePackage ]		ifFalse: [ self loader savePackageUsing: self repositorySpecs ]! !!MetacelloPackageSpec methodsFor: 'development support' stamp: 'DaleHenrichs 1/21/2010 21:03'!updateForSpawnMethod: sourceSpec	| nm fl |	nm := name.	fl := file.	sourceSpec ~~ nil ifTrue: [ fl := sourceSpec file ].	super updateForSpawnMethod: sourceSpec.	file := repositories := goferPackage := preLoadDoIt := postLoadDoIt := nil.	name := nm.	file := fl.! !!MetacelloPackageSpec methodsFor: 'development support' stamp: 'dkh 01/14/2010 12:57'!updatePackageRepositories: repositorySpecs	| resolvedPackageRef |	Transcript cr; show: '  Looking up version -> ', self file.	resolvedPackageRef := self loader resolveSpec: self from: repositorySpecs.	Transcript cr; show: 'Update repositoryGroup -> ', resolvedPackageRef name, ' ' , resolvedPackageRef repository description.	resolvedPackageRef version workingCopy repositoryGroup addRepository: resolvedPackageRef repository! !!MetacelloPackageSpec methodsFor: 'development support' stamp: 'dkh 11/01/2009 11:15'!updatePackageRepositoriesFor: aVersionSpec	"Don't update the repository unless the package is loaded in the image"		self workingCopy == nil ifTrue: [ ^self ].	self updatePackageRepositories: self repositorySpecs, aVersionSpec repositorySpecs.	! !!MetacelloPackageSpec methodsFor: 'development support' stamp: 'DaleHenrichs 03/12/2010 12:01'!updatePackageSpec: updatedSpecs using: anMCLoader	"Add pkg copy to updatedSpecs if the file in current image is different from the receiver's file"		| viName |	(viName := self workingCopyNameFor: anMCLoader) == nil 		ifTrue: [ ^self ]. "no working copy"	self getFile == nil ifTrue: [ ^self ]. "no file explicitly specified in this spec"	(viName ~= self file)		ifTrue: [ | spec |			spec := self copy.			spec file: viName.			updatedSpecs at: spec name put: spec ]		ifFalse: [ updatedSpecs at: self name put: #uptodate ].! !!MetacelloPackageSpec methodsFor: 'visiting' stamp: 'dkh 10/21/2009 15:51'!visitingWithPackages: packages	packages at: self name put: self! !!MetacelloPackageSpec methodsFor: 'gofer' stamp: 'dkh 9/25/2009 10:53'!workingCopy	^self goferPackage workingCopy! !!MetacelloPackageSpec methodsFor: 'gofer' stamp: 'dkh 11/05/2009 13:58'!workingCopyName	| wc |	(wc := self workingCopy) == nil ifTrue: [ ^nil ].	wc ancestry ancestors isEmpty not		ifTrue: [ ^wc ancestry ancestors first name ].	^nil! !!MetacelloPackageSpec methodsFor: 'gofer' stamp: 'dkh 9/25/2009 10:52'!workingCopyNameFor: anMCLoader	| vi |	(vi := anMCLoader currentVersionInfoFor: self) == nil ifTrue: [ ^nil ].	^vi name! !!MetacelloProjectReferenceSpec methodsFor: 'accessing' stamp: 'dkh 1/4/2010 19:02'!answers: aListOfPairs	self shouldNotImplement! !!MetacelloProjectReferenceSpec methodsFor: 'printing' stamp: 'dkh 10/7/2009 16:35'!configMethodCascadeOn: aStream member: aMember last: lastCascade indent: indent	aMember methodUpdateSelector  == #remove:		ifTrue: [ aStream  nextPutAll: 'removeProject: ', self name printString ]		ifFalse: [			self projectReference == nil ifTrue: [ ^self ].			aStream nextPutAll: 'project: ', self projectName printString, ' '.			aMember methodUpdateSelector == #copy:				ifTrue: [ aStream nextPutAll: 'copyFrom: ', aMember sourceName printString, ' ' ].			self projectReference configShortCutMethodOn: aStream member: aMember indent: indent + 1 ].	lastCascade		ifTrue: [ aStream nextPut: $. ]		ifFalse: [ aStream nextPut: $;; cr ].! !!MetacelloProjectReferenceSpec methodsFor: 'printing' stamp: 'dkh 10/24/2009 19:53'!configMethodOn: aStream indent: indent	aStream 		tab: indent; nextPutAll: 'spec '; cr;		tab: indent + 1; nextPutAll: 'name: ', self name printString; nextPut: $;; cr;		tab: indent + 1; nextPutAll: 'projectReference: '; nextPut: $[; cr.	aStream 		tab: indent + 2; nextPutAll: 'spec'.	self projectReference configMethodBodyOn: aStream indent: indent + 2.	aStream nextPutAll: ' ].'! !!MetacelloProjectReferenceSpec methodsFor: 'accessing' stamp: 'dkh 10/5/2009 10:13'!includes: aCollection	self shouldNotImplement! !!MetacelloProjectReferenceSpec methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 3/5/2010 09:46'!loadUsing: aLoader gofer: ignored	| required |	required := self resolveToLoadableSpec.	required loader: aLoader.	^required load! !!MetacelloProjectReferenceSpec methodsFor: 'merging' stamp: 'dkh 10/5/2009 11:31'!mergeMap	| map |	map := super mergeMap.	map at: #projectReference put: projectReference.	^map! !!MetacelloProjectReferenceSpec methodsFor: 'merging' stamp: 'DaleHenrichs 1/21/2010 20:00'!mergeSpec: anotherSpec	| newSpec map anotherProjectReference |	newSpec := super mergeSpec: anotherSpec.	map := anotherSpec mergeMap.	(anotherProjectReference := map at: #projectReference) ~~ nil		ifTrue: [ 			newSpec projectReference: 				(newSpec projectReference == nil					ifTrue: [ anotherProjectReference ]					ifFalse: [ newSpec projectReference mergeSpec: anotherProjectReference ])].	^newSpec! !!MetacelloProjectReferenceSpec methodsFor: 'merging' stamp: 'dkh 10/8/2009 20:32'!nonOverridable	^super nonOverridable, #( projectReference )! !!MetacelloProjectReferenceSpec methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 2/4/2010 13:49'!packagesNeedSavingVisited: visitedProjects using: repos into: aCollection		| prjct clsName vrsn |	prjct := self resolveToLoadableSpec.	(visitedProjects includes: (clsName := prjct className)) ifTrue: [ ^self ].	visitedProjects add: clsName.	(vrsn := self version) == nil ifTrue: [ ^self ].	vrsn spec 		packagesNeedSavingVisited: visitedProjects 		into: aCollection! !!MetacelloProjectReferenceSpec methodsFor: 'visiting' stamp: 'dkh 10/24/2009 19:43'!projectDo: projectBlock packageDo: packageBlock groupDo: groupBlock	projectBlock value: self! !!MetacelloProjectReferenceSpec methodsFor: 'accessing' stamp: 'dkh 9/23/2009 10:51'!projectName	^self projectReference name! !!MetacelloProjectReferenceSpec methodsFor: 'querying' stamp: 'dkh 9/23/2009 10:51'!projectReference	^ projectReference! !!MetacelloProjectReferenceSpec methodsFor: 'accessing' stamp: 'dkh 9/23/2009 10:51'!projectReference: anObject	projectReference := anObject! !!MetacelloProjectReferenceSpec methodsFor: 'accessing' stamp: 'dkh 10/24/2009 19:42'!referencedSpec	^self projectReference! !!MetacelloProjectReferenceSpec methodsFor: 'querying' stamp: 'DaleHenrichs 2/5/2010 13:42'!relativeCurrentVersion	^self projectReference relativeCurrentVersion! !!MetacelloProjectReferenceSpec methodsFor: 'accessing' stamp: 'dkh 10/4/2009 11:40'!requires: aCollection	self shouldNotImplement! !!MetacelloProjectReferenceSpec methodsFor: '*metacello-mc' stamp: 'dkh 10/3/2009 19:14'!resolveProjectSpec	^self projectReference! !!MetacelloProjectReferenceSpec methodsFor: '*metacello-mc' stamp: 'dkh 10/21/2009 15:48'!resolveToAllPackagesIn: aVersionSpec into: packages visited: visited	(self resolveProjectSpec resolveToAllPackagesIn: aVersionSpec visited: visited) do: [:pkg |		packages at: pkg put: pkg ]! !!MetacelloProjectReferenceSpec methodsFor: '*metacello-mc' stamp: 'dkh 11/10/2009 09:48'!resolveToLoadableSpec	^self resolveProjectSpec resolveToLoadableSpec! !!MetacelloProjectReferenceSpec methodsFor: '*metacello-mc' stamp: 'dkh 10/21/2009 15:22'!resolveToPackagesIn: aVersionSpec visited: visited	^#()! !!MetacelloProjectReferenceSpec methodsFor: '*metacello-mc' stamp: 'dkh 11/21/2009 11:36'!updateForSpawnMethod: sourceSpec	| nm |	nm := name.	self projectReference updateForSpawnMethod: sourceSpec.	super updateForSpawnMethod: sourceSpec.	name := nm.! !!MetacelloProjectReferenceSpec methodsFor: '*metacello-mc' stamp: 'dkh 10/23/2009 10:20'!updatePackageSpec: updatedSpecs using: anMCLoader	"Add project copy to updatedSpecs if the current version of the project 	 is different from the receiver's version"		self projectReference updatePackageSpec: updatedSpecs! !!MetacelloProjectReferenceSpec methodsFor: 'querying' stamp: 'dkh 10/24/2009 10:38'!version	^self projectReference version! !!MetacelloProjectReferenceSpec methodsFor: '*metacello-mc' stamp: 'dkh 12/7/2009 16:24'!versionString	^self projectReference versionString! !!MetacelloMemberListSpec methodsFor: 'actions' stamp: 'dkh 10/4/2009 11:22'!add: aSpec	self subclassResponsibility! !!MetacelloMemberListSpec methodsFor: 'adding' stamp: 'dkh 10/4/2009 10:38'!addMember: aMember	self list add: aMember! !!MetacelloMemberListSpec methodsFor: 'actions' stamp: 'dkh 10/4/2009 10:59'!copy: aMemberSpec	self addMember: aMemberSpec! !!MetacelloMemberListSpec methodsFor: 'actions' stamp: 'dkh 10/4/2009 11:23'!copy: specNamed to: aSpec	self subclassResponsibility! !!MetacelloMemberListSpec methodsFor: 'enumeration' stamp: 'dkh 6/12/2009 13:38'!do: aBlock	self map values do: aBlock! !!MetacelloMemberListSpec methodsFor: 'testing' stamp: 'dkh 6/17/2009 16:12'!isEmpty	^self list isEmpty! !!MetacelloMemberListSpec methodsFor: 'accessing' stamp: 'dkh 06/02/2009 18:51'!list	list == nil ifTrue: [ list := OrderedCollection new ].	^list! !!MetacelloMemberListSpec methodsFor: 'accessing' stamp: 'dkh 06/02/2009 19:10'!list: aCollection	list := aCollection! !!MetacelloMemberListSpec methodsFor: 'accessing' stamp: 'dkh 10/4/2009 10:20'!map		| map |	map := Dictionary new.	self list do: [:member | 		member			applyAdd: [:memberSpec | self mapAdd: memberSpec into: map ] 			copy: [:memberSpec | self mapCopy: memberSpec into: map ]			merge: [:memberSpec | self mapMerge: memberSpec into: map ] 			remove: [:memberSpec | self mapRemove: memberSpec into: map ]].	^map! !!MetacelloMemberListSpec methodsFor: 'private' stamp: 'dkh 06/02/2009 19:33'!mapAdd: aMemberSpec into: map		map at: aMemberSpec name put: aMemberSpec spec! !!MetacelloMemberListSpec methodsFor: 'private' stamp: 'dkh 10/29/2009 15:43'!mapCopy: aMemberSpec into: map	| spec |	spec :=  map at: aMemberSpec sourceName ifAbsent: [].	spec == nil		ifTrue: [ ^self error: 'Source spec named ',  aMemberSpec sourceName printString, ' not found'. ]		ifFalse: [ map at: aMemberSpec name put: (spec copy mergeSpec: aMemberSpec spec)]! !!MetacelloMemberListSpec methodsFor: 'private' stamp: 'dkh 6/5/2009 16:08'!mapMerge: aMemberSpec into: map	| spec |	spec :=  map at: aMemberSpec name ifAbsent: [].	spec == nil		ifTrue: [ map at: aMemberSpec name put: aMemberSpec spec copy ]		ifFalse: [ map at: aMemberSpec name put: (spec mergeSpec: aMemberSpec spec)]! !!MetacelloMemberListSpec methodsFor: 'private' stamp: 'dkh 06/02/2009 19:58'!mapRemove: aMemberSpec into: map		map removeKey: aMemberSpec name ifAbsent: []! !!MetacelloMemberListSpec methodsFor: 'actions' stamp: 'dkh 10/4/2009 11:23'!merge: aSpec	self subclassResponsibility! !!MetacelloMemberListSpec methodsFor: 'merging' stamp: 'dkh 06/02/2009 19:26'!mergeSpec: anotherSpec	| newSpec val |	newSpec := super mergeSpec: anotherSpec.	newSpec list: self list copy.	anotherSpec list do: [:groupMember | groupMember applyToList: newSpec ].	^newSpec! !!MetacelloMemberListSpec methodsFor: 'testing' stamp: 'Dalehenrichs 02/10/2010 10:50'!notEmpty	^self list notEmpty! !!MetacelloMemberListSpec methodsFor: 'copying' stamp: 'dkh 8/9/2009 18:05'!postCopy	super postCopy.	list := list copy! !!MetacelloMemberListSpec methodsFor: 'actions' stamp: 'dkh 10/4/2009 11:23'!remove: aSpec	self subclassResponsibility! !!MetacelloPackagesSpec methodsFor: 'actions' stamp: 'dkh 10/4/2009 11:23'!add: aSpec	aSpec addToMetacelloPackages: self! !!MetacelloPackagesSpec methodsFor: 'accessing' stamp: 'dkh 11/12/2009 15:29'!applyIncludesTo: orderedSpecs for: pkgSpec 	| movedSpecs baseIndex includedSpec result |	movedSpecs := Set new.	baseIndex := orderedSpecs indexOf: pkgSpec.	pkgSpec includesForPackageOrdering		do: [:includedSpecName | 			includedSpec := orderedSpecs						detect: [:spec | spec name = includedSpecName ]						ifNone: [].			(self slideIn: orderedSpecs spec: includedSpec baseIndex: baseIndex seen: IdentitySet new)				ifTrue: [ movedSpecs add: includedSpec name ]].	^ movedSpecs! !!MetacelloPackagesSpec methodsFor: 'printing' stamp: 'dkh 10/22/2009 10:33'!configMethodOn: aStream indent: indent	| packageSpecs |	packageSpecs := self map values.	packageSpecs size = 0 ifTrue: [ ^aStream nextPutAll: 'spec add: []' ].	packageSpecs size = 1		ifTrue: [			aStream 				tab: indent; 				nextPutAll: 'spec add: ['; cr.			packageSpecs first configMethodOn: aStream indent: indent + 1.			aStream nextPut: $]; cr ]		ifFalse: [			aStream 				tab: indent; 				nextPutAll: 'spec'.			1 to: packageSpecs size do: [:index | | packageSpec |				packageSpec := packageSpecs at: index.				aStream 					tab: indent + 1;					nextPutAll: 'add: ['; cr.				packageSpec configMethodOn: aStream indent: indent + 2.				aStream nextPut: $].				index < packageSpecs size					ifTrue: [ aStream nextPut: $; ].				aStream cr ]]! !!MetacelloPackagesSpec methodsFor: 'actions' stamp: 'dkh 10/4/2009 11:22'!copy: specNamed to: spec	self addMember: 		(self copyMember 			name: spec name;			sourceName: specNamed;			spec: spec;			yourself)! !!MetacelloPackagesSpec methodsFor: 'actions' stamp: 'dkh 10/4/2009 11:23'!merge: aSpec	aSpec mergeIntoMetacelloPackages: self! !!MetacelloPackagesSpec methodsFor: 'accessing' stamp: 'dkh 10/9/2009 13:01'!packageNamed: aString ifAbsent: aBlock	^self map at: aString ifAbsent: aBlock! !!MetacelloPackagesSpec methodsFor: 'accessing' stamp: 'dkh 11/12/2009 15:30'!packageSpecsInLoadOrder	| orderedSpecs moved lastMovedSpecs count terminationLimit map specsWithIncludes |	"specification order is the default order"	map := self map.	orderedSpecs := OrderedCollection new.	self list do: [:member | | spec |		spec := map at: member name ifAbsent: [].		(spec == nil or: [ orderedSpecs includes: spec ])			ifFalse: [ orderedSpecs add: spec ]].	orderedSpecs isEmpty ifTrue: [ ^orderedSpecs ].	moved := true.	count := 0.	terminationLimit := orderedSpecs size * 2.	[ moved  ] whileTrue: [		count := count + 1.		count > terminationLimit 			ifTrue: [				"Cheap termination hack - an APPARENT loop"				self error: 'Apparent loop in before/after dependency definitions' ]. 		moved := false.		orderedSpecs do: [:packageSpec | 			moved := moved or: [ self sortPackageSpecs: orderedSpecs for: packageSpec ]]].	lastMovedSpecs := Set new.	moved := true.	count := 0.	specsWithIncludes := orderedSpecs select: [:pkgSpec | pkgSpec includesForPackageOrdering isEmpty not].	[ moved ] whileTrue: [ | result |		count := count + 1.		"count > terminationLimit"		count > 7			ifTrue: [				"Cheap termination hack - an APPARENT loop"				self error: 'Apparent loop in before/after dependency definitions' ]. 		moved := false.		result := Set new.		specsWithIncludes do: [:packageSpec |			result addAll: (self applyIncludesTo: orderedSpecs for: packageSpec) ].		result size = lastMovedSpecs size			ifTrue: [				result do: [:name | (lastMovedSpecs includes: name) ifFalse: [ moved := true ]]]			ifFalse: [ moved := true ].		lastMovedSpecs := result ].	^orderedSpecs! !!MetacelloPackagesSpec methodsFor: 'actions' stamp: 'dkh 10/4/2009 11:23'!remove: aSpec	aSpec removeFromMetacelloPackages: self! !!MetacelloPackagesSpec methodsFor: 'accessing' stamp: 'dkh 11/12/2009 15:29'!slideIn: orderedSpecs spec: targetSpec baseIndex: baseIndex seen: seen	| targetIndex requires targetRequires targetRequiresIndexes minIndex baseSpec required |	(seen includes: targetSpec) ifTrue: [ ^false ].	targetIndex := orderedSpecs indexOf: targetSpec.	baseIndex >= targetIndex ifTrue: [ ^false ].	required := false.	baseSpec := orderedSpecs at: baseIndex.	baseIndex + 1 to: targetIndex - 1 do: [:index | | spec |		spec := orderedSpecs at: index.		(spec requires includes: baseSpec name) ifTrue: [ required := true ]].	required ifFalse: [ ^false ].	requires := targetSpec requires.	targetRequires := orderedSpecs				select: [:spec | requires includes: spec name].	targetRequiresIndexes := targetRequires				collect: [:spec | orderedSpecs indexOf: spec].	targetRequiresIndexes add: baseIndex.	minIndex := targetRequiresIndexes				detectMax: [:each | each].	minIndex + 1 < targetIndex		ifTrue: [			orderedSpecs remove: targetSpec.			orderedSpecs add: targetSpec afterIndex: minIndex.			seen add: targetSpec ]		ifFalse: [ ^self slideIn: orderedSpecs spec: (orderedSpecs at: minIndex) baseIndex: 1 seen: seen ].	^true! !!MetacelloPackagesSpec methodsFor: 'private' stamp: 'dkh 10/10/2009 10:14'!sortPackageSpecs: orderedSpecs for: packageSpec	| packageIndex moved movePackage targetPackage targetIndex targetPackages |	packageIndex := orderedSpecs indexOf: packageSpec.	moved := movePackage := false.	targetPackages := packageSpec requires.	targetPackages do: [:targetPackageName |		targetPackage := orderedSpecs 			detect: [:each | each name = targetPackageName ] 			ifNone: [].		targetIndex := orderedSpecs indexOf: targetPackage.		movePackage := movePackage or: [ packageIndex <= targetIndex ]].	movePackage 		ifTrue: [			moved := true.			orderedSpecs remove: packageSpec ifAbsent: [ ^self error: 'unexpected error removing package' ].			targetIndex := 0.			targetPackages do: [:targetPackageName | 				(targetPackage := orderedSpecs detect: [:each | 					each name = targetPackageName ] ifNone: []) ~~ nil						ifTrue: [ targetIndex := targetIndex max: (orderedSpecs indexOf: targetPackage) ]].			targetIndex == 0				ifTrue: [ orderedSpecs add: packageSpec beforeIndex: packageIndex ]				ifFalse: [ orderedSpecs add: packageSpec afterIndex: targetIndex ]].	^moved! !!MetacelloRepositoriesSpec methodsFor: 'actions' stamp: 'dkh 10/3/2009 16:52'!add: aStringOrSpec	aStringOrSpec addToMetacelloRepositories: self! !!MetacelloRepositoriesSpec methodsFor: 'actions' stamp: 'dkh 6/7/2009 10:18'!add: description type: type	| spec |	spec := 		(self project repositorySpec)			description: description;			type: type;			yourself.	self addMember: 		(self addMember 			name: spec name;			spec: spec;			yourself)! !!MetacelloRepositoriesSpec methodsFor: 'printing' stamp: 'dkh 1/2/2010 16:05'!configMethodCascadeOn: aStream indent: indent	| repositorySpecs |	repositorySpecs := self map values sortBy: [:a :b | a description <= b description ].	repositorySpecs size = 1		ifTrue: [ repositorySpecs first configMethodCascadeOn: aStream lastCascade: true ]		ifFalse: [			1 to: repositorySpecs size do: [:index | | repositorySpec |				aStream tab: indent + 1.				(repositorySpecs at: index)					configMethodCascadeOn: aStream 					lastCascade: index >= repositorySpecs size ]]! !!MetacelloRepositoriesSpec methodsFor: 'printing' stamp: 'dkh 1/2/2010 17:11'!configMethodOn: aStream indent: indent	aStream 		tab: indent; 		nextPutAll: 'spec';		cr.	self configMethodCascadeOn: aStream indent: indent! !!MetacelloRepositoriesSpec methodsFor: 'actions' stamp: 'dkh 6/7/2009 10:18'!merge: aRepositorySpec	aRepositorySpec mergeIntoMetacelloRepositories: self! !!MetacelloRepositoriesSpec methodsFor: 'actions' stamp: 'dkh 6/7/2009 20:50'!merge: description type: type	| spec |	spec := 		(self project repositorySpec)			description: description;			type: type;			yourself.	self addMember: 		(self mergeMember 			name: spec name;			spec: spec;			yourself)! !!MetacelloRepositoriesSpec methodsFor: 'actions' stamp: 'dkh 6/7/2009 10:22'!remove: aRepositorySpec	aRepositorySpec removeFromMetacelloRepositories: self! !!MetacelloRepositoriesSpec methodsFor: 'actions' stamp: 'dkh 10/6/2009 23:59'!repository: aStringOrSpec	aStringOrSpec addToMetacelloRepositories: self! !!MetacelloRepositoriesSpec methodsFor: 'actions' stamp: 'dkh 10/22/2009 09:01'!repository: description username: username password: password	| spec |	spec := 		(self project repositorySpec)			description: description;			username: username;			password: password;			yourself.	self addMember: 		(self addMember 			name: spec name;			spec: spec;			yourself)! !!MetacelloAddMemberSpec methodsFor: 'actions' stamp: 'dkh 10/4/2009 10:16'!applyAdd: addBlock copy: copyBlock merge: mergeBlock remove: removeBlock	addBlock value: self! !!MetacelloAddMemberSpec methodsFor: 'actions' stamp: 'dkh 06/02/2009 18:26'!applyToList: aListSpec	aListSpec add: self! !!MetacelloAddMemberSpec methodsFor: 'accessing' stamp: 'dkh 10/9/2009 11:43'!methodUpdateSelector	^#overrides:! !!MetacelloCopyMemberSpec methodsFor: 'actions' stamp: 'dkh 10/4/2009 10:18'!applyAdd: addBlock copy: copyBlock merge: mergeBlock remove: removeBlock	copyBlock value: self! !!MetacelloCopyMemberSpec methodsFor: 'actions' stamp: 'dkh 10/4/2009 10:19'!applyToList: aListSpec	aListSpec copy: self! !!MetacelloCopyMemberSpec methodsFor: 'accessing' stamp: 'dkh 10/4/2009 10:19'!methodUpdateSelector	^#copy:! !!MetacelloCopyMemberSpec methodsFor: 'accessing' stamp: 'dkh 10/4/2009 10:35'!sourceName	^sourceName! !!MetacelloCopyMemberSpec methodsFor: 'accessing' stamp: 'dkh 10/4/2009 10:36'!sourceName: aString	sourceName := aString! !!MetacelloMemberSpec methodsFor: '*metacello-mc' stamp: 'dkh 6/7/2009 18:14'!addToMetacelloPackages: aMetacelloPackagesSpec	aMetacelloPackagesSpec addMember: self! !!MetacelloMemberSpec methodsFor: '*metacello-mc' stamp: 'dkh 6/7/2009 20:40'!addToMetacelloRepositories: aMetacelloRepositoriesSpec	aMetacelloRepositoriesSpec addMember: self! !!MetacelloMemberSpec methodsFor: 'actions' stamp: 'dkh 10/4/2009 10:15'!applyAdd: addBlock copy: copyBlock merge: mergeBlock remove: removeBlock	self subclassResponsibility! !!MetacelloMemberSpec methodsFor: 'actions' stamp: 'dkh 06/02/2009 18:25'!applyToList: aListSpec	self subclassResponsibility! !!MetacelloMemberSpec methodsFor: 'printing' stamp: 'dkh 10/5/2009 12:39'!configMethodCascadeOn: aStream last: lastCascade indent: indent	self spec 		configMethodCascadeOn: aStream 		member: self 		last: lastCascade 		indent: indent! !!MetacelloMemberSpec methodsFor: 'printing' stamp: 'dkh 10/26/2009 13:34'!configMethodOn: aStream indent: indent	aStream nextPutAll: self class name asString, ' member: ('.	self spec configMethodOn: aStream indent: indent.	aStream nextPutAll: ')'.! !!MetacelloMemberSpec methodsFor: '*metacello-mc' stamp: 'dkh 6/7/2009 18:31'!mergeIntoMetacelloPackages: aMetacelloPackagesSpec	aMetacelloPackagesSpec addMember: self! !!MetacelloMemberSpec methodsFor: '*metacello-mc' stamp: 'dkh 6/7/2009 20:41'!mergeIntoMetacelloRepositories: aMetacelloRepositoriesSpec	aMetacelloRepositoriesSpec addMember: self! !!MetacelloMemberSpec methodsFor: 'accessing' stamp: 'dkh 6/15/2009 10:27'!methodUpdateSelector	^self subclassResponsibility! !!MetacelloMemberSpec methodsFor: 'accessing' stamp: 'dkh 06/02/2009 16:36'!name	^name! !!MetacelloMemberSpec methodsFor: 'accessing' stamp: 'dkh 06/02/2009 16:36'!name: aString	name := aString! !!MetacelloMemberSpec methodsFor: '*metacello-mc' stamp: 'dkh 6/7/2009 18:18'!removeFromMetacelloPackages: aMetacelloPackagesSpec	aMetacelloPackagesSpec addMember: self! !!MetacelloMemberSpec methodsFor: '*metacello-mc' stamp: 'dkh 6/7/2009 20:41'!removeFromMetacelloRepositories: aMetacelloRepositoriesSpec	aMetacelloRepositoriesSpec addMember: self! !!MetacelloMemberSpec methodsFor: 'accessing' stamp: 'dkh 10/4/2009 10:35'!sourceName	^self name! !!MetacelloMemberSpec methodsFor: 'accessing' stamp: 'dkh 06/02/2009 16:50'!spec	^spec! !!MetacelloMemberSpec methodsFor: 'accessing' stamp: 'dkh 06/02/2009 16:50'!spec: aMetacelloSpec	spec := aMetacelloSpec! !!MetacelloMergeMemberSpec methodsFor: 'actions' stamp: 'dkh 10/4/2009 10:16'!applyAdd: addBlock copy: copyBlock merge: mergeBlock remove: removeBlock	mergeBlock value: self! !!MetacelloMergeMemberSpec methodsFor: 'actions' stamp: 'dkh 6/5/2009 16:06'!applyToList: aListSpec	aListSpec merge: self! !!MetacelloMergeMemberSpec methodsFor: 'accessing' stamp: 'dkh 10/9/2009 11:43'!methodUpdateSelector	^#with:! !!MetacelloRemoveMemberSpec methodsFor: 'actions' stamp: 'dkh 10/4/2009 10:16'!applyAdd: addBlock copy: copyBlock merge: mergeBlock remove: removeBlock	removeBlock value: self! !!MetacelloRemoveMemberSpec methodsFor: 'actions' stamp: 'dkh 06/02/2009 18:27'!applyToList: aListSpec	aListSpec remove: self! !!MetacelloRemoveMemberSpec methodsFor: 'accessing' stamp: 'dkh 6/15/2009 10:27'!methodUpdateSelector	^#remove:! !!MetacelloMCProjectSpec methodsFor: 'accessing' stamp: 'DaleHenrichs 3/11/2010 23:10'!className: aString	super className: aString.	(projectPackage ~~ nil and: [ projectPackage getFile == nil ])		ifTrue: [ projectPackage file: aString ]! !!MetacelloMCProjectSpec methodsFor: 'testing' stamp: 'Dalehenrichs 02/10/2010 11:52'!compareCurrentVersion: anOperator targetVersionStatus: targetVersionStatus using: anMCLoader	| cv vrsn prjct |	(vrsn := self version) == nil ifTrue: [ ^false ].	prjct := self projectClassProject.	prjct loader: anMCLoader.	(cv := prjct currentVersion) == nil ifTrue: [ ^false ].	(targetVersionStatus includes: cv versionStatus)		ifTrue: [ ^cv perform: anOperator with: vrsn ].	^false	 ! !!MetacelloMCProjectSpec methodsFor: 'testing' stamp: 'DaleHenrichs 2/5/2010 14:02'!compareRelativeCurrentVersion: anOperator targetVersionStatus: targetVersionStatus using: anMCLoader	| cv vrsn |	(vrsn := self version) == nil ifTrue: [ ^false ].	(cv := self relativeCurrentVersion) == nil ifTrue: [ ^false ].	(targetVersionStatus includes: cv versionStatus)		ifTrue: [ ^cv perform: anOperator with: vrsn ].	^false	 ! !!MetacelloMCProjectSpec methodsFor: 'loading' stamp: 'DaleHenrichs 3/17/2010 10:52'!determineCurrentVersionForLoad	"don't use self currentVersion, because we are interested in the currentVersion of the project as loaded in image, not the current version relative to our load list"		| prjct version currentVersion packageAndProjectNames cvs |	self projectClass == nil ifTrue: [ ^nil ].	(version := self version) == nil ifTrue: [ ^nil ].	version blessing == #baseline ifTrue: [ ^version ].	prjct := self projectClass new project.	prjct loader: self loader.	(currentVersion := prjct currentVersion) == nil ifTrue: [ ^nil ].	(cvs := currentVersion versionStatus) == #somethingLoaded ifTrue: [ ^nil ].	(#(allLoadedToSpec loadedToSpec loadedMatchConstraints) includes: (cvs := currentVersion versionStatus)) 		ifTrue: [ 			(currentVersion perform: self operator with: version)				ifTrue: [ "load currentVersion" ^currentVersion ].			"load version" ^nil ].	version = currentVersion ifTrue: [ ^currentVersion ].	(MetacelloProjectSpecLoadConflict projectSpec: self) 		signal: 			'Project load conflict for', 			prjct label printString,  			' between current version ',			currentVersion printString, 			'(', 			cvs asString, 			') and specified version ', 			version printString,			'. Press resume to continue with load anyway'.	^nil! !!MetacelloMCProjectSpec methodsFor: 'loading' stamp: 'DaleHenrichs 3/11/2010 17:27'!ensureLoadedForDevelopmentUsing: mcLoader	"for #development projects, always need latest version of package when contemplating a load"	| ensured |	ensured := mcLoader ensuredMap at: self name ifAbsent: [ nil ].	self projectClass ~~ nil		ifTrue: [  | vrsn |			vrsn := self version.			(vrsn ~~ nil and: [ vrsn blessing == #development ])				ifTrue: [ 					ensured ~~ #latest						ifTrue: [							mcLoader ensureForDevelopment								ifTrue: [ self projectPackage loadUsing: mcLoader ]								ifFalse: [ self projectPackage fetchUsing: mcLoader ].							mcLoader ensuredMap at: self name put: #latest ].					^self]].	ensured == nil		ifTrue:  [ 			mcLoader ensureForDevelopment				ifTrue: [ self projectPackage loadUsing: mcLoader ]				ifFalse: [ self projectPackage fetchUsing: mcLoader ].			mcLoader ensuredMap at: self name put: #present ]! !!MetacelloMCProjectSpec methodsFor: 'loading' stamp: 'DaleHenrichs 3/6/2010 10:28'!ensureProjectLoaded	"Ensure that the MetacelloProject is loaded in image. 	 projectClass == nil or requested version non-existent warrants a project package load."	(self projectClass == nil or: [self version == nil])		ifTrue: [ 			self projectPackage load.			^true ].	^false! !!MetacelloMCProjectSpec methodsFor: 'querying' stamp: 'dkh 10/24/2009 20:19'!file		^self projectPackage file! !!MetacelloMCProjectSpec methodsFor: 'accessing' stamp: 'dkh 10/7/2009 01:01'!file: aString	self projectPackage name: aString! !!MetacelloMCProjectSpec methodsFor: 'testing' stamp: 'dkh 5/14/2010 16:09'!isPartiallyLoaded: aLoader	| vrsn |	(vrsn := self version) == nil ifTrue: [ ^false ].	(self loadListForVersion: vrsn) do: [:nm |		(vrsn packagesForSpecNamed: nm ) do: [:pkg |			(pkg isPackageLoaded: aLoader) ifTrue: [ ^true ]]].	^false! !!MetacelloMCProjectSpec methodsFor: 'testing' stamp: 'dkh 12/14/2009 12:06'!isPossibleBaseline	| vrsn |	(vrsn := self version) == nil ifTrue: [ ^false ].	(vrsn allPackagesForSpecNamed: (self loadListForVersion: vrsn)) do: [:pkg |		pkg workingCopy == nil ifTrue: [ ^false ]].	^true! !!MetacelloMCProjectSpec methodsFor: 'loading' stamp: 'DaleHenrichs 03/08/2010 17:21'!load	| displayString |	displayString := 'Project: ', self name.	self versionString ~~ nil ifTrue: [ displayString := displayString, ' ', self versionString ].	Transcript cr; show: displayString.	self ensureProjectLoaded.	self loadVersion: self determineCurrentVersionForLoad! !!MetacelloMCProjectSpec methodsFor: 'private' stamp: 'dkh 10/21/2009 19:20'!loadListForVersion: vrsn 	^ (self loads == nil			or: [self loads isEmpty])		ifTrue: [vrsn spec defaultPackageNames]		ifFalse: [self loads]! !!MetacelloMCProjectSpec methodsFor: 'loading' stamp: 'dkh 5/14/2010 16:56'!loadVersion: aVersionOrNil	"Load the correct version of the project"	| vrsn mcLoader loadedPackageNames loadedProjectNames list |	vrsn := aVersionOrNil .	vrsn == nil		ifTrue: [ 			(vrsn := self version) == nil				ifTrue: [					 ^(MetacelloProjectSpecLoadError projectSpec: self) 						signal: 'No version found for ', 									self versionString printString, 									' of ', 									self className asString ]].	mcLoader := self loader copy.	mcLoader operator: self operator.	vrsn loader: mcLoader.	loadedPackageNames := (vrsn packages select: [:pkg | pkg isPackageLoaded: mcLoader ]) 		collect: [:pkg | pkg name ].	loadedProjectNames := (vrsn projects select: [:prj | prj isPartiallyLoaded: mcLoader ]) 		collect: [:prj | prj name ].	list := loadedPackageNames, loadedProjectNames, (self loadListForVersion: vrsn).	mcLoader preLoad: self.	vrsn fetchRequiredFromArray: list.	mcLoader postLoad: self.! !!MetacelloMCProjectSpec methodsFor: 'merging' stamp: 'dkh 10/4/2009 12:05'!mergeMap	| map |	map := super mergeMap.	map at: #projectPackage put: projectPackage.	^map! !!MetacelloMCProjectSpec methodsFor: 'merging' stamp: 'dkh 10/9/2009 06:28'!mergeSpec: anotherSpec	| newSpec anotherProjectPackage map |	newSpec := super mergeSpec: anotherSpec.	map := anotherSpec mergeMap.	(anotherProjectPackage := map at: #projectPackage) ~~ nil		ifTrue: [ 			newSpec projectPackage: 				(newSpec projectPackage == nil					ifTrue: [ anotherProjectPackage ]					ifFalse: [ newSpec projectPackage mergeSpec: anotherProjectPackage ])].	^newSpec! !!MetacelloMCProjectSpec methodsFor: 'merging' stamp: 'dkh 10/8/2009 20:34'!nonOverridable	^super nonOverridable, #( projectPackage )! !!MetacelloMCProjectSpec methodsFor: 'accessing' stamp: 'dkh 10/4/2009 11:44'!packageFileSpecFor: aMetacelloPackagesSpec	^(aMetacelloPackagesSpec project projectReferenceSpec)			name: self name;			projectReference: self copy;			yourself.! !!MetacelloMCProjectSpec methodsFor: 'querying' stamp: 'dkh 11/12/2009 16:56'!packageRepository		^nil! !!MetacelloMCProjectSpec methodsFor: 'querying' stamp: 'dkh 06/17/2009 15:35'!projectClass	^Smalltalk at: self className asSymbol  ifAbsent: []! !!MetacelloMCProjectSpec methodsFor: 'querying' stamp: 'dkh 9/10/2009 13:18'!projectClassProject	"indirection needed when projectClass is _not_ a subclass of MetacelloProject"		^self projectClass new project! !!MetacelloMCProjectSpec methodsFor: 'visiting' stamp: 'dkh 10/21/2009 15:53'!projectDo: projectBlock packageDo: packageBlock groupDo: groupBlock	projectBlock value: self! !!MetacelloMCProjectSpec methodsFor: 'querying' stamp: 'dkh 6/7/2009 09:19'!projectPackage	^ projectPackage! !!MetacelloMCProjectSpec methodsFor: 'accessing' stamp: 'dkh 6/7/2009 09:19'!projectPackage: anObject	projectPackage := anObject! !!MetacelloMCProjectSpec methodsFor: 'querying' stamp: 'DaleHenrichs 2/5/2010 13:38'!relativeCurrentVersion	"currentVersion calculated relative to the loadList"		| vrsn |	(vrsn := self version) == nil ifTrue: [ ^nil ].	^self projectClassProject currentVersionAgainst: 		(vrsn expandToLoadableSpecNames:  			(self loadListForVersion: vrsn))! !!MetacelloMCProjectSpec methodsFor: 'querying' stamp: 'dkh 1/2/2010 15:36'!repository		^self projectPackage packageRepository! !!MetacelloMCProjectSpec methodsFor: 'accessing' stamp: 'dkh 10/7/2009 01:02'!repository: aString	self projectPackage repository: aString! !!MetacelloMCProjectSpec methodsFor: 'accessing' stamp: 'dkh 10/22/2009 09:39'!repository: aString username: username password: password	self projectPackage repository: aString username: username password: password! !!MetacelloMCProjectSpec methodsFor: 'private' stamp: 'DaleHenrichs 1/22/2010 11:32'!resolveToAllPackagesIn: aVersionSpec visited: visited	| vrsn |	visited pushProject: [		visited			visit: self			doing: [:spec |				spec ensureProjectLoaded.				(vrsn := spec version) == nil ifTrue: [ ^#() ].				^vrsn					allPackagesForSpecNamed: (self loadListForVersion: vrsn)							ifAbsent: [ self error: 'invalid loads: spec' ]]].	^#()! !!MetacelloMCProjectSpec methodsFor: 'private' stamp: 'dkh 11/12/2009 10:12'!resolveToLoadableSpec	^self copy! !!MetacelloMCProjectSpec methodsFor: 'development support' stamp: 'dkh 11/21/2009 11:37'!updateForSpawnMethod: sourceSpec	"just pick up the versionString from the sourceSpec"		className := operator := loads := projectPackage := nil.	sourceSpec ~~ nil ifTrue: [ versionString := sourceSpec versionString ].! !!MetacelloMCProjectSpec methodsFor: 'development support' stamp: 'dkh 11/21/2009 09:58'!updatePackageSpec: updatedSpecs	"Add project copy to updatedSpecs if the current version of the project 	 is different from the receiver's version"		|  prj currentVersion spec |	self className == nil ifTrue: [ ^self ].	prj := self projectClassProject.	(currentVersion := prj currentVersion) = self version		ifTrue: [ ^self ].	currentVersion == nil ifTrue: [ ^self ].	spec := self copy.	spec versionString: currentVersion versionString.	updatedSpecs at: spec name put: spec! !!MetacelloMCProjectSpec methodsFor: 'querying' stamp: 'dkh 11/12/2009 16:32'!version	"Empty version string means use latestVersion or lastVersion"	self projectClass == nil ifTrue: [ ^nil ].	^self versionString == nil		ifTrue: [ | vrsn |			(vrsn := self projectClassProject latestVersion) == nil				ifTrue: [ self projectClassProject lastVersion ]				ifFalse: [ vrsn ]]		ifFalse: [ self projectClassProject version: self versionString ]! !!MetacelloProjectSpec methodsFor: 'adding' stamp: 'dkh 10/4/2009 11:51'!addToMetacelloPackages: aMetacelloPackagesSpec	| spec |	spec := (aMetacelloPackagesSpec project projectReferenceSpec)			name: self name;			projectReference: self copy;			yourself.	aMetacelloPackagesSpec addMember: 		(aMetacelloPackagesSpec addMember 			name: spec name;			spec: spec;			yourself)			! !!MetacelloProjectSpec methodsFor: 'querying' stamp: 'dkh 06/02/2009 20:27'!className	^className! !!MetacelloProjectSpec methodsFor: 'accessing' stamp: 'dkh 06/02/2009 20:31'!className: aString	className := aString! !!MetacelloProjectSpec methodsFor: 'printing' stamp: 'DaleHenrichs 6/14/2010 15:18'!configMethodBodyOn: aStream indent: indent	| hasVersionString hasOperator hasProjectPackage hasLoads hasClassName hasPreLoadDoIt hasPostLoadDoIt |	hasClassName := self className ~~ nil.	hasVersionString := self versionString ~~ nil.	hasOperator := operator ~~ nil.	hasProjectPackage := self projectPackage ~~ nil and: [self projectPackage name ~~ nil or: [ self projectPackage packageRepository ~~ nil ]].	hasLoads := self loads ~~ nil.	hasPreLoadDoIt := self preLoadDoIt ~~ nil.	hasPostLoadDoIt := self postLoadDoIt ~~ nil.	hasClassName		ifTrue: [			hasVersionString | hasOperator | hasProjectPackage | hasLoads				ifTrue: [ aStream cr; tab: indent + 1 ]				ifFalse: [ aStream space ].			aStream nextPutAll: 'className: ', self className printString.			hasVersionString | hasPreLoadDoIt | hasPostLoadDoIt | hasOperator | hasProjectPackage | hasLoads				ifTrue: [ aStream nextPut: $; ]].	hasVersionString		ifTrue: [ 			hasClassName | hasOperator | hasProjectPackage | hasLoads | hasPreLoadDoIt | hasPostLoadDoIt				ifTrue: [ aStream cr; tab: indent + 1 ]				ifFalse: [ aStream space ].			aStream nextPutAll: 'versionString: ', self versionString printString.			 hasPreLoadDoIt | hasPostLoadDoIt | hasOperator | hasProjectPackage | hasLoads				ifTrue: [ aStream nextPut: $; ]].	hasPreLoadDoIt		ifTrue: [ 			hasClassName | hasOperator | hasProjectPackage | hasLoads  | hasPreLoadDoIt				ifTrue: [ aStream cr; tab: indent + 1 ]				ifFalse: [ aStream space ].			aStream nextPutAll: 'preLoadDoIt: ', self preLoadDoIt printString.			hasPostLoadDoIt | hasOperator | hasProjectPackage | hasLoads				ifTrue: [ aStream nextPut: $; ]].	hasPostLoadDoIt		ifTrue: [ 			hasClassName | hasOperator | hasProjectPackage | hasLoads | hasPostLoadDoIt				ifTrue: [ aStream cr; tab: indent + 1 ]				ifFalse: [ aStream space ].			aStream nextPutAll: 'postLoadDoIt: ', self postLoadDoIt printString.			hasOperator | hasProjectPackage | hasLoads				ifTrue: [ aStream nextPut: $; ]].	hasOperator		ifTrue: [ 			hasClassName | hasVersionString | hasProjectPackage | hasLoads | hasPreLoadDoIt | hasPostLoadDoIt				ifTrue: [ aStream cr; tab: indent + 1 ]				ifFalse: [ aStream space ].			aStream nextPutAll: 'operator: ', self operator printString.			hasProjectPackage | hasLoads				ifTrue: [ aStream nextPut: $; ]].	hasLoads		ifTrue: [ 			hasClassName | hasVersionString | hasOperator | hasProjectPackage | hasPreLoadDoIt | hasPostLoadDoIt				ifTrue: [ aStream cr; tab: indent + 1 ]				ifFalse: [ aStream space ].			aStream nextPutAll: 'loads: #('.			self loads do: [:str | aStream nextPutAll: str printString, ' ' ].			aStream nextPut: $).			hasProjectPackage				ifTrue: [ aStream nextPut: $; ]].	hasProjectPackage		ifTrue: [ | hasName hasRepo |			hasClassName | hasVersionString | hasOperator | hasLoads | hasPreLoadDoIt | hasPostLoadDoIt				ifTrue: [ aStream cr; tab: indent + 1 ]				ifFalse: [ aStream space ].			hasName := self projectPackage name ~~ nil.			hasRepo := self projectPackage packageRepository ~~ nil.			hasName				ifTrue: [					aStream nextPutAll: 'file: ', self projectPackage name printString.					hasRepo ifTrue: [ aStream nextPut: $; ]].			hasRepo				ifTrue: [  | repos |					repos := self projectPackage repositories.					repos map values size = 1						ifTrue: [ 							hasName 								ifTrue: [ aStream cr; tab: indent + 1 ].							self projectPackage packageRepository 								configMethodCascadeOn: aStream 								lastCascade: true ]						ifFalse: [							hasName ifTrue: [ aStream cr ].							self projectPackage repositories 								configMethodCascadeOn: aStream 								indent: indent]]].! !!MetacelloProjectSpec methodsFor: 'printing' stamp: 'dkh 10/24/2009 19:56'!configMethodOn: aStream indent: indent	aStream 		tab: indent;		nextPutAll: 'spec '; cr;		tab: indent + 1;		nextPutAll: 'name: ', self name printString, ';'.	self configMethodBodyOn: aStream indent: indent.	aStream nextPut: $.! !!MetacelloProjectSpec methodsFor: 'printing' stamp: 'DaleHenrichs 1/21/2010 18:22'!configShortCutMethodOn: aStream member: aMember indent: indent	| hasVersionString hasOperator hasProjectPackage hasLoads hasClassName hasPreLoadDoIt hasPostLoadDoIt |	hasClassName := self className ~~ nil.	hasVersionString := self versionString ~~ nil.	hasOperator := operator ~~ nil.	hasProjectPackage := self projectPackage ~~ nil and: [self projectPackage name ~~ nil or: [ self projectPackage packageRepository ~~ nil ]].	hasLoads := self loads ~~ nil.	hasPreLoadDoIt := self preLoadDoIt ~~ nil.	hasPostLoadDoIt := self postLoadDoIt ~~ nil.	hasClassName | hasOperator | hasProjectPackage | hasLoads | hasPreLoadDoIt | hasPostLoadDoIt		ifTrue: [ 			(aMember methodUpdateSelector == #copy: or: [ aMember methodUpdateSelector == #with: ])				ifTrue: [ aStream nextPutAll: 'with: ['; cr ]				ifFalse: [ aStream nextPutAll: 'overrides: ['; cr ].			aStream 				tab: indent; nextPutAll: 'spec'.			self configMethodBodyOn: aStream indent: indent.			aStream nextPutAll: ' ]'.			^self ].	hasVersionString		ifTrue: [ aStream nextPutAll: 'with: ', self versionString printString ]! !!MetacelloProjectSpec methodsFor: 'printing' stamp: 'DaleHenrichs 3/9/2010 16:33'!label	^self name! !!MetacelloProjectSpec methodsFor: 'loading' stamp: 'dkh 6/9/2009 10:16'!load	self subclassResponsibility! !!MetacelloProjectSpec methodsFor: 'querying' stamp: 'dkh 10/4/2009 12:04'!loads	^ loads! !!MetacelloProjectSpec methodsFor: 'accessing' stamp: 'dkh 10/4/2009 12:05'!loads: aCollection	aCollection setLoadsInMetacelloProject: self! !!MetacelloProjectSpec methodsFor: 'merging' stamp: 'DaleHenrichs 1/21/2010 19:34'!mergeMap	| map |	map := super mergeMap.	map at: #name put: name.	map at: #className put: className.	map at: #versionString put: versionString.	map at: #operator put: operator.	map at: #loads put: loads.	map at: #preLoadDoIt put: preLoadDoIt.	map at: #postLoadDoIt put: postLoadDoIt.	^map! !!MetacelloProjectSpec methodsFor: 'querying' stamp: 'dkh 06/02/2009 20:32'!name	^name! !!MetacelloProjectSpec methodsFor: 'accessing' stamp: 'dkh 06/02/2009 20:32'!name: aString	name := aString! !!MetacelloProjectSpec methodsFor: 'querying' stamp: 'dkh 10/6/2009 15:39'!operator	operator == nil ifTrue: [ ^#>= ].	^ operator! !!MetacelloProjectSpec methodsFor: 'accessing' stamp: 'dkh 6/14/2009 13:37'!operator: anObject	" #= #~= #> #< #>= #<= #~> "		operator := anObject! !!MetacelloProjectSpec methodsFor: 'querying' stamp: 'DaleHenrichs 1/21/2010 18:15'!postLoadDoIt	^postLoadDoIt! !!MetacelloProjectSpec methodsFor: 'accessing' stamp: 'DaleHenrichs 1/21/2010 18:15'!postLoadDoIt: aSymbol	postLoadDoIt := aSymbol! !!MetacelloProjectSpec methodsFor: 'querying' stamp: 'DaleHenrichs 1/21/2010 18:16'!preLoadDoIt	^preLoadDoIt! !!MetacelloProjectSpec methodsFor: 'accessing' stamp: 'DaleHenrichs 1/21/2010 18:16'!preLoadDoIt: aSymbol	preLoadDoIt := aSymbol! !!MetacelloProjectSpec methodsFor: 'querying' stamp: 'dkh 10/5/2009 11:47'!projectPackage	^nil! !!MetacelloProjectSpec methodsFor: 'private' stamp: 'dkh 10/4/2009 12:04'!setLoads: aCollection	loads := aCollection! !!MetacelloProjectSpec methodsFor: 'querying' stamp: 'dkh 6/7/2009 09:20'!versionString	^ versionString! !!MetacelloProjectSpec methodsFor: 'accessing' stamp: 'dkh 6/7/2009 09:20'!versionString: anObject	versionString := anObject! !!MetacelloRepositorySpec methodsFor: 'adding' stamp: 'dkh 6/7/2009 10:13'!addToMetacelloRepositories: aMetacelloRepositoriesSpec	aMetacelloRepositoriesSpec addMember: 		(aMetacelloRepositoriesSpec addMember 			name: self name;			spec: self;			yourself)! !!MetacelloRepositorySpec methodsFor: 'printing' stamp: 'dkh 10/22/2009 09:54'!configMethodCascadeOn: aStream lastCascade: lastCascade	aStream nextPutAll: 'repository: ', self description printString.	(self username isEmpty not or: [ self password isEmpty not ])		ifTrue: [ aStream nextPutAll: ' username: ', self username printString, ' password: ', self password printString ].	lastCascade ifFalse: [ aStream nextPut: $;; cr ].! !!MetacelloRepositorySpec methodsFor: 'printing' stamp: 'dkh 10/22/2009 09:54'!configMethodOn: aStream indent: indent	aStream 		tab: indent; 		nextPutAll: 'spec '.	self configMethodCascadeOn: aStream lastCascade: true! !!MetacelloRepositorySpec methodsFor: 'mc support' stamp: 'dkh 10/22/2009 08:52'!createRepository	^self project createRepository: self ! !!MetacelloRepositorySpec methodsFor: 'querying' stamp: 'dkh 06/03/2009 12:16'!description	^description! !!MetacelloRepositorySpec methodsFor: 'accessing' stamp: 'dkh 06/03/2009 12:15'!description: aString	description := aString! !!MetacelloRepositorySpec methodsFor: 'private' stamp: 'TestRunner 12/7/2009 14:30'!extractTypeFromDescription	^MetacelloPlatform current extractTypeFromDescription: self description! !!MetacelloRepositorySpec methodsFor: 'private' stamp: 'dkh 6/7/2009 10:21'!mergeIntoMetacelloRepositories: aMetacelloRepositoriesSpec	aMetacelloRepositoriesSpec addMember: 		(aMetacelloRepositoriesSpec mergeMember 			name: self name;			spec: self;			yourself)! !!MetacelloRepositorySpec methodsFor: 'merging' stamp: 'dkh 10/22/2009 09:11'!mergeMap	| map |	map := super mergeMap.	map at: #description put: description.	map at: #type put: type.	map at: #username put: username.	map at: #password put: password.	^map! !!MetacelloRepositorySpec methodsFor: 'querying' stamp: 'dkh 6/7/2009 10:33'!name	^self description! !!MetacelloRepositorySpec methodsFor: 'querying' stamp: 'dkh 10/22/2009 08:49'!password	password == nil ifTrue: [ password := '' ].	^password! !!MetacelloRepositorySpec methodsFor: 'accessing' stamp: 'dkh 10/22/2009 08:49'!password: aString	password := aString! !!MetacelloRepositorySpec methodsFor: 'private' stamp: 'dkh 6/7/2009 10:24'!removeFromMetacelloRepositories: aMetacelloRepositoriesSpec	aMetacelloRepositoriesSpec addMember: 		(aMetacelloRepositoriesSpec removeMember 			name: self name;			spec: self;			yourself)! !!MetacelloRepositorySpec methodsFor: 'querying' stamp: 'dkh 06/03/2009 12:16'!type	type == nil ifTrue: [ type := self extractTypeFromDescription ].	^type! !!MetacelloRepositorySpec methodsFor: 'accessing' stamp: 'dkh 06/03/2009 12:15'!type: aString	type := aString! !!MetacelloRepositorySpec methodsFor: 'querying' stamp: 'dkh 10/22/2009 08:49'!username	username == nil ifTrue: [ username := '' ].	^username! !!MetacelloRepositorySpec methodsFor: 'accessing' stamp: 'dkh 10/22/2009 08:49'!username: aString	username := aString! !!MetacelloSpec class methodsFor: 'instance creation' stamp: 'dkh 05/01/2009 12:22'!for: aVersionMap	^(self platformClass new)		for: aVersionMap;		yourself! !!MetacelloSpec class methodsFor: 'accessing' stamp: 'dkh 04/22/2009 12:22'!platformClass	^self! !!MetacelloSpec methodsFor: 'spec creation' stamp: 'dkh 06/02/2009 16:54'!addMember	^MetacelloAddMemberSpec for: self project! !!MetacelloSpec methodsFor: 'querying' stamp: 'DaleHenrichs 4/9/2010 12:47'!answers	^#()! !!MetacelloSpec methodsFor: 'printing' stamp: 'dkh 10/5/2009 09:14'!configMethodOn: aStream	self configMethodOn: aStream indent: 0! !!MetacelloSpec methodsFor: 'printing' stamp: 'dkh 10/5/2009 09:14'!configMethodOn: aStream indent: indent	self subclassResponsibility! !!MetacelloSpec methodsFor: 'spec creation' stamp: 'dkh 10/4/2009 10:44'!copyMember	^MetacelloCopyMemberSpec for: self project! !!MetacelloSpec methodsFor: 'doits' stamp: 'dkh 12/30/2009 13:17'!doItBlock: selector	selector == nil ifTrue: [ ^nil ].	selector numArgs = 0		ifTrue: [ ^[ self project configuration perform: selector ] ].	selector numArgs = 1		ifTrue: [ ^[:aLoader | self project configuration perform: selector with: aLoader ] ].	selector numArgs = 2		ifTrue: [ ^[:aLoader :pkgSpec | self project configuration perform: selector with: aLoader with: pkgSpec ] ].	^nil! !!MetacelloSpec methodsFor: 'initialization' stamp: 'dkh 06/02/2009 18:05'!for: aProject	project := aProject! !!MetacelloSpec methodsFor: 'printing' stamp: 'DaleHenrichs 3/9/2010 16:33'!label	^self printString! !!MetacelloSpec methodsFor: 'accessing' stamp: 'dkh 6/18/2009 10:30'!loader	loader == nil 		ifTrue: [ | prjctLoader |			(prjctLoader := self project loader) == nil				ifTrue: [ self loader: (self project loaderClass on: self) ]				ifFalse: [ self loader: prjctLoader ]].	^loader! !!MetacelloSpec methodsFor: 'accessing' stamp: 'dkh 6/18/2009 09:46'!loader: aLoader	"We're interested in propogating the loader state, _except_ for the spec"	loader := aLoader copy.	loader spec: self! !!MetacelloSpec methodsFor: 'merging' stamp: 'dkh 06/04/2009 14:40'!mergeMap	^Dictionary new.! !!MetacelloSpec methodsFor: 'spec creation' stamp: 'dkh 06/02/2009 16:54'!mergeMember	^MetacelloMergeMemberSpec for: self project! !!MetacelloSpec methodsFor: 'merging' stamp: 'dkh 9/23/2009 11:40'!mergeSpec: aSpec	| newSpec nonOverridable |	newSpec := self copy.	nonOverridable := self nonOverridable.	aSpec mergeMap keysAndValuesDo: [:key :value |		(nonOverridable includes: key)			ifFalse: [ value ~~ nil ifTrue: [ newSpec instVarNamed: key asString put: value ]]].	^newSpec! !!MetacelloSpec methodsFor: 'merging' stamp: 'dkh 9/23/2009 11:41'!nonOverridable	^#()! !!MetacelloSpec methodsFor: 'copying' stamp: 'dkh 10/4/2009 18:56'!postCopy	super postCopy.	loader ~~ nil  ifTrue: [ self loader: loader ]! !!MetacelloSpec methodsFor: 'doits' stamp: 'dkh 12/30/2009 13:20'!postLoadDoIt	"noop unless non-nil value returned"	^nil! !!MetacelloSpec methodsFor: 'doits' stamp: 'dkh 12/30/2009 13:17'!postLoadDoItBlock	^self doItBlock: self postLoadDoIt! !!MetacelloSpec methodsFor: 'doits' stamp: 'dkh 12/30/2009 13:20'!preLoadDoIt	"noop unless non-nil value returned"		^nil! !!MetacelloSpec methodsFor: 'doits' stamp: 'dkh 12/30/2009 13:17'!preLoadDoItBlock	^self doItBlock: self preLoadDoIt! !!MetacelloSpec methodsFor: 'printing' stamp: 'dkh 10/5/2009 11:08'!printOn: aStream	self configMethodOn: aStream indent: 0! !!MetacelloSpec methodsFor: 'querying' stamp: 'dkh 06/02/2009 14:42'!project	^project! !!MetacelloSpec methodsFor: 'spec creation' stamp: 'dkh 06/02/2009 16:54'!removeMember	^MetacelloRemoveMemberSpec for: self project! !!MetacelloValueHolderSpec methodsFor: 'printing' stamp: 'dkh 10/5/2009 12:23'!configMethodOn: aStream indent: indent	aStream tab: indent; nextPutAll: 'spec value: ', self value printString! !!MetacelloValueHolderSpec methodsFor: 'merging' stamp: 'dkh 6/5/2009 11:46'!mergeMap	| map |	map := super mergeMap.	map at: #value put: value.	^map! !!MetacelloValueHolderSpec methodsFor: 'private' stamp: 'dkh 9/13/2009 07:46'!setAuthorInMetacelloVersion: aMetacelloVersionSpec	aMetacelloVersionSpec setAuthor: self! !!MetacelloValueHolderSpec methodsFor: 'private' stamp: 'dkh 6/5/2009 10:49'!setBlessingInMetacelloVersion: aMetacelloVersionSpec	aMetacelloVersionSpec setBlessing: self! !!MetacelloValueHolderSpec methodsFor: 'private' stamp: 'dkh 6/5/2009 11:54'!setDescriptionInMetacelloVersion: aMetacelloVersionSpec	aMetacelloVersionSpec setDescription: self! !!MetacelloValueHolderSpec methodsFor: 'private' stamp: 'dkh 9/13/2009 07:47'!setTimestampInMetacelloVersion: aMetacelloVersionSpec	aMetacelloVersionSpec setTimestamp: self! !!MetacelloValueHolderSpec methodsFor: 'querying' stamp: 'dkh 6/5/2009 11:46'!value	^ value! !!MetacelloValueHolderSpec methodsFor: 'accessing' stamp: 'dkh 6/5/2009 11:46'!value: anObject	value := anObject! !!MetacelloMCVersionSpec methodsFor: 'printing' stamp: 'dkh 10/9/2009 07:35'!configMethodOn: aStream indent: indent	| spec |	super configMethodOn: aStream indent: indent.	(((spec := self repositoriesSpec) ~~ nil)  and: [ spec list isEmpty not ])		ifTrue: [			spec map values size = 1				ifTrue: [					aStream 						tab: indent; 						nextPutAll: 'spec repository: '; 						nextPutAll: spec map values first description printString, '.';						cr ]				ifFalse: [ self configMethodOn: aStream for: spec selector: 'repositories:' indent: indent ]].	self configPackagesSpecMethodOn: aStream indent: indent! !!MetacelloMCVersionSpec methodsFor: 'printing' stamp: 'dkh 10/6/2009 14:26'!configPackagesSpecMethodOn: aStream indent: indent	| projectSpecs packageSpecs groupSpecs |	projectSpecs := OrderedCollection new.	packageSpecs := OrderedCollection new.	groupSpecs := OrderedCollection new.	self packagesSpec list do: [:member |		member spec 			projectDo: [:proj | member spec name ~~ nil ifTrue: [ projectSpecs add: member ]]			packageDo: [:package | member spec name ~~ nil ifTrue: [ packageSpecs add: member ]]			groupDo: [:group | member spec name ~~ nil ifTrue: [ groupSpecs add: member ]]].	projectSpecs isEmpty not		ifTrue: [			aStream tab: indent; nextPutAll: 'spec '.			projectSpecs size > 1 ifTrue: [ aStream cr; tab: indent + 1 ].			1 to: projectSpecs size  do: [:index | 				(projectSpecs at: index) configMethodCascadeOn: aStream last: index == projectSpecs size indent: indent + 1.				index ~= projectSpecs size ifTrue: [ aStream tab: indent + 1 ]]].	packageSpecs isEmpty not		ifTrue: [			projectSpecs isEmpty not ifTrue: [ aStream cr ].			aStream tab: indent; nextPutAll: 'spec '.			packageSpecs size > 1 ifTrue: [ aStream cr; tab: indent + 1 ].			1 to: packageSpecs size  do: [:index | 				(packageSpecs at: index) configMethodCascadeOn: aStream last: index == packageSpecs size indent: indent + 1.				index ~= packageSpecs size ifTrue: [ aStream tab: indent + 1 ]]].	groupSpecs isEmpty not		ifTrue: [			projectSpecs isEmpty not | packageSpecs isEmpty not ifTrue: [ aStream cr ].			aStream tab: indent; nextPutAll: 'spec '.			groupSpecs size > 1 ifTrue: [ aStream cr; tab: indent + 1 ].			1 to: groupSpecs size  do: [:index | 				(groupSpecs at: index) configMethodCascadeOn: aStream last: index == groupSpecs size indent: indent + 1.				index ~= groupSpecs size ifTrue: [ aStream tab: indent + 1 ]]].! !!MetacelloMCVersionSpec methodsFor: 'printing' stamp: 'dkh 10/9/2009 20:40'!configSpawnMethodOn: aStream indent: indent	super configSpawnMethodOn: aStream indent: indent.	self configPackagesSpecMethodOn: aStream indent: indent.! !!MetacelloMCVersionSpec methodsFor: 'loading' stamp: 'dkh 10/9/2009 13:03'!defaultPackageNames	"if there is a package named 'default' (a group) then it defines the default package names,	 otherwise answer a list of all of the package names in this version"	self packages packageNamed: 'default' ifAbsent: [ ^self packageNames ].	^#('default')! !!MetacelloMCVersionSpec methodsFor: 'loading' stamp: 'DaleHenrichs 2/3/2010 16:12'!expandToLoadableSpecNames: nameList	^(self resolveToLoadableSpecs: nameList) collect: [:spec | spec name ]! !!MetacelloMCVersionSpec methodsFor: 'testing' stamp: 'DaleHenrichs 2/5/2010 11:16'!isAllLoadedToSpec	"all projects and packages are loaded and match specification"	^self 		isPartiallyCurrent: true 		useEquality: true 		targetVersionStatus: #(allLoadedToSpec)! !!MetacelloMCVersionSpec methodsFor: 'testing' stamp: 'DaleHenrichs 2/5/2010 13:27'!isAllLoadedToSpecAgainst: resolvedPackageAndProjectNames	"all projects and packages are loaded and match specification"	^self 		isPartiallyCurrent: true 		singleMatch: false 		operator: #= 		targetVersionStatus: #(allLoadedToSpec) 		against: resolvedPackageAndProjectNames! !!MetacelloMCVersionSpec methodsFor: 'testing' stamp: 'DaleHenrichs 2/6/2010 09:40'!isLoadedMatchConstraints	"all loaded projects and packages match constraints (at least one package loaded)"		^self 		isPartiallyCurrent: false 		useEquality: false 		targetVersionStatus: #(allLoadedToSpec loadedToSpec loadedMatchConstraints)! !!MetacelloMCVersionSpec methodsFor: 'testing' stamp: 'DaleHenrichs 2/6/2010 09:41'!isLoadedMatchConstraintsAgainst: resolvedPackageAndProjectNames	"all loaded projects and packages match constraints (at least one package loaded)"	^self 		isPartiallyCurrent: false 		singleMatch: false 		operator: nil		targetVersionStatus: #(allLoadedToSpec loadedToSpec loadedMatchConstraints) 		against: resolvedPackageAndProjectNames! !!MetacelloMCVersionSpec methodsFor: 'testing' stamp: 'DaleHenrichs 2/6/2010 09:41'!isLoadedToSpec	"all loaded projects and packages match specifications (at least one package loaded)"		^self 		isPartiallyCurrent: false 		useEquality: true 		targetVersionStatus: #(allLoadedToSpec loadedToSpec)! !!MetacelloMCVersionSpec methodsFor: 'testing' stamp: 'DaleHenrichs 2/6/2010 09:41'!isLoadedToSpecAgainst: resolvedPackageAndProjectNames	"all loaded projects and packages match specifications (at least one package loaded)"	^self 		isPartiallyCurrent: false 		singleMatch: false 		operator: #= 		targetVersionStatus: #(allLoadedToSpec loadedToSpec) 		against: resolvedPackageAndProjectNames! !!MetacelloMCVersionSpec methodsFor: 'testing' stamp: 'DaleHenrichs 2/8/2010 17:10'!isPartiallyCurrent: notLoadedMatters singleMatch: singleMatch operator: operator targetVersionStatus: targetVersionStatus against: resolvedPackageAndProjectNames	| hasNoPackage hasNoProject aProjectIsLoaded aPackageIsLoaded mcLoader  aLoadedProjectIsCurrent aLoadedPackageIsCurrent aLoadedProjectIsNotCurrent aLoadedPackageIsNotCurrent aProjectNotLoaded aPackageNotLoaded |	hasNoPackage := hasNoProject := true.	aProjectIsLoaded := aPackageIsLoaded := false.	aLoadedProjectIsCurrent := aLoadedPackageIsCurrent := false.	aLoadedProjectIsNotCurrent := aLoadedPackageIsNotCurrent := false.	aProjectNotLoaded := aPackageNotLoaded := false.	mcLoader := self loader.	self 		specsNamed: resolvedPackageAndProjectNames		projectDo: [:prj | | vrsn currentVersion |			hasNoProject := false.			vrsn := prj version.			vrsn ~~ nil				ifTrue: [ 					(currentVersion := prj relativeCurrentVersion) ~~ nil						ifTrue: [ (targetVersionStatus includes: currentVersion versionStatus) ifFalse: [ ^false ]]].			currentVersion ~~ nil				ifTrue: [					 aProjectIsLoaded := true.					(operator ~~ nil						ifTrue: [ currentVersion perform: operator with: vrsn ]						ifFalse: [ currentVersion perform: prj projectReference operator with: vrsn])							ifTrue: [ aLoadedProjectIsCurrent := true. ]							ifFalse: [ aLoadedProjectIsNotCurrent := true ]]				ifFalse: [ aProjectNotLoaded := true ]] 		packageDo: [:pkg | 			hasNoPackage := false.			pkg 				currentPackageLoaded: [:isCurrent | 					singleMatch ifTrue: [ ^true ].					aPackageIsLoaded := true.					isCurrent 						ifTrue: [ aLoadedPackageIsCurrent := true ]						ifFalse: [ aLoadedPackageIsNotCurrent := true ]] 				comparing: (operator ~~ nil ifTrue: [ operator ] ifFalse: [ #>= ])				notLoaded: [:ignored | aPackageNotLoaded := true ] 				using: mcLoader ] 		groupDo: [:ignoredGroup | 			"if we encounter a group, return false"			^false ].	hasNoPackage & hasNoProject ifTrue: [ ^false ].	^notLoadedMatters		ifTrue: [ 			(hasNoPackage or: [ aPackageIsLoaded & (aPackageNotLoaded not) & aLoadedPackageIsCurrent & (aLoadedPackageIsNotCurrent not) ]) and: [				hasNoProject or: [ aProjectIsLoaded & (aProjectNotLoaded not) & aLoadedProjectIsCurrent & (aLoadedProjectIsNotCurrent not) ]]]		ifFalse: [ 			singleMatch ifTrue: [ ^false ]. "no single match for projects and packages exit early"			aPackageIsLoaded & aProjectIsLoaded				ifTrue: [					^(aLoadedPackageIsCurrent & (aLoadedPackageIsNotCurrent not)) and: [				 		aLoadedProjectIsCurrent & (aLoadedProjectIsNotCurrent not) ]].			aPackageIsLoaded				ifTrue: [					^aLoadedPackageIsCurrent & (aLoadedPackageIsNotCurrent not) ].			"aProjectIsLoaded == true"			^hasNoPackage & aLoadedProjectIsCurrent & (aLoadedProjectIsNotCurrent not) ]! !!MetacelloMCVersionSpec methodsFor: 'testing' stamp: 'DaleHenrichs 2/5/2010 12:51'!isPartiallyCurrent: notLoadedMatters useEquality: useEquality singleMatch: singleMatch targetVersionStatus: targetVersionStatus	^self 		isPartiallyCurrent: notLoadedMatters 		singleMatch: singleMatch		operator: (useEquality ifTrue: [ #= ] ifFalse: [ nil ])		targetVersionStatus: targetVersionStatus 		against: (self expandToLoadableSpecNames: #('ALL'))! !!MetacelloMCVersionSpec methodsFor: 'testing' stamp: 'DaleHenrichs 2/5/2010 12:49'!isPartiallyCurrent: notLoadedMatters useEquality: useEquality targetVersionStatus: targetVersionStatus	^self 		isPartiallyCurrent: notLoadedMatters 		useEquality: useEquality 		targetVersionStatus: targetVersionStatus 		against: (self expandToLoadableSpecNames: #('ALL'))! !!MetacelloMCVersionSpec methodsFor: 'testing' stamp: 'DaleHenrichs 2/4/2010 16:01'!isPartiallyCurrent: notLoadedMatters useEquality: useEquality targetVersionStatus: targetVersionStatus against: resolvedPackageAndProjectNames	^ self 		isPartiallyCurrent: notLoadedMatters 		singleMatch: false		operator: (useEquality ifTrue: [ #= ] ifFalse: [ nil ]) 		targetVersionStatus: targetVersionStatus 		against: resolvedPackageAndProjectNames! !!MetacelloMCVersionSpec methodsFor: 'testing' stamp: 'DaleHenrichs 1/21/2010 13:26'!isPossibleBaseline	self 		projectDo: [:prj | prj isPossibleBaseline ifFalse: [ ^false ]] 		packageDo: [:pkg | pkg isPackageLoaded ifFalse: [ ^false ]] 		groupDo: [:ignored | ].	^true! !!MetacelloMCVersionSpec methodsFor: 'testing' stamp: 'DaleHenrichs 2/6/2010 09:44'!isSomethingLoaded	"at least one package loaded"		^self 		isPartiallyCurrent: false 		useEquality: false 		singleMatch: true 		targetVersionStatus: #(allLoadedToSpec loadedToSpec loadedMatchConstraints somethingLoaded)! !!MetacelloMCVersionSpec methodsFor: 'testing' stamp: 'DaleHenrichs 2/6/2010 09:44'!isSomethingLoadedAgainst: resolvedPackageAndProjectNames	"at least one package loaded"	^self 		isPartiallyCurrent: false 		singleMatch: true 		operator: nil		targetVersionStatus: #(allLoadedToSpec loadedToSpec loadedMatchConstraints somethingLoaded) 		against: resolvedPackageAndProjectNames! !!MetacelloMCVersionSpec methodsFor: 'merging' stamp: 'dkh 10/9/2009 07:34'!mergeMap	| map |	map := super mergeMap.	map at: #packages put: self packages.	map at: #repositories put: self repositories.	^map! !!MetacelloMCVersionSpec methodsFor: 'merging' stamp: 'dkh 9/23/2009 11:54'!mergeSpec: anotherSpec	| newSpec map anotherPackages anotherRepositories |	newSpec := super mergeSpec: anotherSpec.	map := anotherSpec mergeMap.	(anotherPackages := map at: #packages) isEmpty not 		ifTrue: [ 			newSpec 				packages: (self packages isEmpty					ifTrue: [ anotherPackages ]					ifFalse: [ self packages mergeSpec: anotherPackages ]) ].	(anotherRepositories := map at: #repositories) isEmpty not		ifTrue: [ 			newSpec 				repositories: (self repositories isEmpty					ifTrue: [ anotherRepositories ]					ifFalse: [ self repositories mergeSpec: anotherRepositories ]) ].	^newSpec! !!MetacelloMCVersionSpec methodsFor: 'merging' stamp: 'dkh 9/23/2009 11:54'!nonOverridable	^super nonOverridable, #( packages repositories)! !!MetacelloMCVersionSpec methodsFor: 'querying' stamp: 'dkh 10/21/2009 13:55'!packageNamed: aString	^self packageNamed: aString ifAbsent: [ nil ]! !!MetacelloMCVersionSpec methodsFor: 'querying' stamp: 'DaleHenrichs 1/21/2010 15:52'!packageNamed: aString forMap: map ifAbsent: aBlock	| package |	package := map				at: aString				ifAbsent: [].	package == nil		ifTrue: [			(aString = 'default' or: [ aString = 'ALL'])				ifTrue: [ 					package := self project groupSpec name: aString;				 		includes: self packageNames;					 						yourself ]				ifFalse: [ ^aBlock value ]].	^package! !!MetacelloMCVersionSpec methodsFor: 'querying' stamp: 'DaleHenrichs 1/21/2010 15:52'!packageNamed: aString ifAbsent: aBlock	^self packageNamed: aString forMap: self packages map ifAbsent: aBlock! !!MetacelloMCVersionSpec methodsFor: 'querying' stamp: 'dkh 10/9/2009 12:59'!packageNames	packages == nil ifTrue: [ ^#() ].	^self packageSpecsInLoadOrder collect: [:pkg | pkg name ]! !!MetacelloMCVersionSpec methodsFor: 'querying' stamp: 'dkh 6/17/2009 16:06'!packageSpecsInLoadOrder	^self packages packageSpecsInLoadOrder! !!MetacelloMCVersionSpec methodsFor: 'accessing' stamp: 'dkh 6/17/2009 16:05'!packages	packages == nil ifTrue: [ packages := self project packagesSpec ].	^ packages! !!MetacelloMCVersionSpec methodsFor: 'accessing' stamp: 'dkh 6/7/2009 08:19'!packages: anObject	packages := anObject! !!MetacelloMCVersionSpec methodsFor: 'development support' stamp: 'dkh 12/22/2009 09:56'!packagesNeedSavingVisited: visitedProjects into: aCollection	self packages map valuesDo: [:pkg | pkg packagesNeedSavingVisited: visitedProjects using: self repositories map values into: aCollection ].! !!MetacelloMCVersionSpec methodsFor: 'accessing' stamp: 'dkh 9/23/2009 17:16'!packagesSpec	^self packages! !!MetacelloMCVersionSpec methodsFor: 'copying' stamp: 'dkh 10/9/2009 07:34'!postCopy	super postCopy.	packages := packages copy.	repositories := repositories copy.	! !!MetacelloMCVersionSpec methodsFor: 'enumerating' stamp: 'dkh 10/20/2009 17:16'!projectDo: projectBlock packageDo: packageBlock groupDo: groupBlock	self packageSpecsInLoadOrder do: [:pkgSpec |		pkgSpec projectDo: projectBlock packageDo: packageBlock groupDo: groupBlock ]! !!MetacelloMCVersionSpec methodsFor: 'accessing' stamp: 'dkh 6/17/2009 16:05'!repositories	repositories == nil ifTrue: [ repositories := self project repositoriesSpec ].	^ repositories! !!MetacelloMCVersionSpec methodsFor: 'accessing' stamp: 'dkh 6/7/2009 08:20'!repositories: anObject	repositories := anObject! !!MetacelloMCVersionSpec methodsFor: 'accessing' stamp: 'dkh 9/23/2009 17:18'!repositoriesSpec	^self repositories! !!MetacelloMCVersionSpec methodsFor: 'accessing' stamp: 'dkh 10/7/2009 16:27'!repository: aString	self repositoriesSpec add: aString! !!MetacelloMCVersionSpec methodsFor: 'accessing' stamp: 'dkh 10/22/2009 14:24'!repository: aString username: username password: password	self repositoriesSpec repository: aString username: username password: password! !!MetacelloMCVersionSpec methodsFor: 'loading' stamp: 'dkh 6/18/2009 10:13'!repositorySpecs	^self repositories map values! !!MetacelloMCVersionSpec methodsFor: 'loading' stamp: 'DaleHenrichs 2/5/2010 22:24'!resolveToLoadableSpec: aString forMap: map packages: packageMap 	| package |	package := self packageNamed: aString forMap: map ifAbsent: [ ^self error: 'Name not found: ' , aString ].	packageMap at: package name put: package.	^ {package}! !!MetacelloMCVersionSpec methodsFor: 'loading' stamp: 'DaleHenrichs 2/3/2010 15:42'!resolveToLoadableSpecs: nameList	"Resolves names in namelist to the  list of packages and projects in the version that would be loaded. Projects are 	not traversed during the transitive closure. The scope is that of the version itself.	   If the spec is a package, answer a list including the package and the transitive closure on 			its #requires: and #includes: fields.	   If the spec is a project, answer the project.	   If the spec is a group, answers the list of packages in the #includes: field of the group. 			Groups in the #includes: field are expanded following the transitive closure on groups"	| map |	map := Dictionary new.	self resolveToLoadableSpecs: nameList map: map.	^map values! !!MetacelloMCVersionSpec methodsFor: 'loading' stamp: 'DaleHenrichs 2/5/2010 22:25'!resolveToLoadableSpecs: required map: packageMap 	| reqd allReqd map |	reqd := required copy.	allReqd := Set new.	map := self packages map.	[ reqd isEmpty ] whileFalse: [ | newReqd |		newReqd := Set new.		reqd do: [:req | 			(self resolveToLoadableSpec: req forMap: map packages: packageMap) 				do: [:loadableSpec | 					newReqd addAll: loadableSpec requires.					newReqd addAll: loadableSpec includes ]].		allReqd addAll: reqd.		newReqd removeAllFoundIn: allReqd.		reqd := newReqd ].	packageMap keys do: [:pkgName | | spec |		(spec := (packageMap at: pkgName) resolveToLoadableSpec) == nil			ifTrue: [ packageMap removeKey: pkgName ]			ifFalse: [ packageMap at: pkgName put: (packageMap at: pkgName) resolveToLoadableSpec ]]! !!MetacelloMCVersionSpec methodsFor: 'enumerating' stamp: 'DaleHenrichs 01/20/2010 15:50'!specsNamed: packageAndProjectNames projectDo: projectBlock packageDo: packageBlock groupDo: groupBlock	| map |	map := self packages map.	packageAndProjectNames do: [:name | | pkgSpec |		(pkgSpec := map at: name ifAbsent: [ ]) ~~ nil			ifTrue: [ pkgSpec projectDo: projectBlock packageDo: packageBlock groupDo: groupBlock ]]! !!MetacelloMCVersionSpec methodsFor: 'development support' stamp: 'dkh 10/5/2009 16:15'!updatedPackageSpecs	| updatedSpecs mcLoader |	updatedSpecs := Dictionary new.	mcLoader := self loader.	self packages map valuesDo: [:pkg | pkg updatePackageSpec: updatedSpecs using: mcLoader].	^updatedSpecs! !!MetacelloMCVersionSpec methodsFor: 'private' stamp: 'dkh 10/7/2009 14:45'!versionClass	^MetacelloMCVersion! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 9/13/2009 07:42'!author	author == nil 		ifTrue: [			^self project valueHolderSpec				value: '';				yourself].	^ author! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 9/13/2009 07:43'!author: anObject	anObject setAuthorInMetacelloVersion: self! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 8/26/2009 10:10'!blessing	blessing == nil 		ifTrue: [			^self project valueHolderSpec				value: self project defaultBlessing;				yourself].	^ blessing! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 6/5/2009 10:44'!blessing: anObject	anObject setBlessingInMetacelloVersion: self! !!MetacelloVersionSpec methodsFor: 'printing' stamp: 'dkh 10/5/2009 13:22'!configMethodOn: aStream for: spec selector: selector indent: indent	spec == nil ifTrue: [ ^self ].	aStream tab: indent; nextPutAll: 'spec ', selector, ' ['; cr.	spec configMethodOn: aStream indent: indent + 1.	aStream nextPutAll: ' ].'; cr! !!MetacelloVersionSpec methodsFor: 'printing' stamp: 'dkh 12/30/2009 13:26'!configMethodOn: aStream indent: indent	self configMethodValueOn: aStream for: self getBlessing selector: 'blessing:' indent: indent.	self configMethodValueOn: aStream for: self getDescription selector: 'description:' indent: indent.	self configMethodValueOn: aStream for: self getPreLoadDoIt selector: 'preLoadDoIt:' indent: indent.	self configMethodValueOn: aStream for: self getPostLoadDoIt selector: 'postLoadDoIt:' indent: indent.	self configMethodValueOn: aStream for: self getAuthor selector: 'author:' indent: indent.	self configMethodValueOn: aStream for: self getTimestamp selector: 'timestamp:' indent: indent.! !!MetacelloVersionSpec methodsFor: 'printing' stamp: 'dkh 10/7/2009 01:15'!configMethodValueOn: aStream for: spec selector: selector indent: indent	spec == nil ifTrue: [ ^self ].	aStream tab: indent; nextPutAll: 'spec ', selector, ' ', spec value printString, '.'; cr! !!MetacelloVersionSpec methodsFor: 'printing' stamp: 'DaleHenrichs 3/23/2010 19:08'!configSpawnMethodOn: aStream indent: indent	self configMethodValueOn: aStream for: self getAuthor selector: 'author:' indent: indent.	self configMethodValueOn: aStream for: self getTimestamp selector: 'timestamp:' indent: indent.	self configMethodValueOn: aStream for: self getBlessing selector: 'blessing:' indent: indent.! !!MetacelloVersionSpec methodsFor: 'private' stamp: 'dkh 10/7/2009 14:45'!createVersion	^self versionClass fromSpec: self! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 8/26/2009 10:35'!description	description == nil 		ifTrue: [			^self project valueHolderSpec				value: '';				yourself].	^ description! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 6/5/2009 11:40'!description: anObject	anObject setDescriptionInMetacelloVersion: self! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 10/3/2009 16:42'!getAuthor	^author! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 10/3/2009 16:41'!getBlessing	^blessing! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 10/3/2009 16:41'!getDescription	^description! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 12/30/2009 13:25'!getPostLoadDoIt	^postLoadDoIt! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 12/30/2009 13:25'!getPreLoadDoIt	^preLoadDoIt! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 10/3/2009 16:42'!getTimestamp	^timestamp! !!MetacelloVersionSpec methodsFor: 'testing' stamp: 'dkh 12/14/2009 10:20'!isPartiallyCurrent: notLoadedMatters useEquality: useEquality	self subclassResponsibility! !!MetacelloVersionSpec methodsFor: 'testing' stamp: 'dkh 12/14/2009 10:20'!isPossibleBaseline	self subclassResponsibility! !!MetacelloVersionSpec methodsFor: 'printing' stamp: 'DaleHenrichs 3/9/2010 16:34'!label	^self versionString, ' [', self projectLabel, ']'! !!MetacelloVersionSpec methodsFor: 'merging' stamp: 'dkh 12/30/2009 14:17'!mergeMap	| map |	map := super mergeMap.	map at: #versionString put: versionString.	map at: #blessing put: blessing.	map at: #description put: description.	map at: #author put: author.	map at: #timestamp put: timestamp.	map at: #preLoadDoIt put: preLoadDoIt.	map at: #postLoadDoIt put: postLoadDoIt.	^map! !!MetacelloVersionSpec methodsFor: 'copying' stamp: 'dkh 10/4/2009 19:10'!postCopy	super postCopy.	blessing := blessing copy.	description := description copy.	author := author copy.	timestamp := timestamp copy.	! !!MetacelloVersionSpec methodsFor: 'querying' stamp: 'dkh 12/30/2009 13:14'!postLoadDoIt	^postLoadDoIt! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 12/30/2009 13:15'!postLoadDoIt: aSymbol	postLoadDoIt := aSymbol! !!MetacelloVersionSpec methodsFor: 'querying' stamp: 'dkh 12/30/2009 13:15'!preLoadDoIt	^preLoadDoIt! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 12/30/2009 13:15'!preLoadDoIt: aSymbol	preLoadDoIt := aSymbol! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'DaleHenrichs 3/9/2010 16:31'!projectLabel	^self project label! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 9/13/2009 07:44'!setAuthor: anObject	author := anObject! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 6/5/2009 10:44'!setBlessing: anObject	blessing := anObject! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 6/5/2009 11:40'!setDescription: anObject	description := anObject! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 9/13/2009 07:44'!setTimestamp: anObject	timestamp := anObject! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 9/13/2009 07:42'!timestamp	timestamp == nil 		ifTrue: [			^self project valueHolderSpec				value: '';				yourself].	^ timestamp! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 9/13/2009 07:44'!timestamp: anObject	anObject setTimestampInMetacelloVersion: self! !!MetacelloVersionSpec methodsFor: 'private' stamp: 'dkh 10/7/2009 14:44'!versionClass	^MetacelloVersion! !!MetacelloVersionSpec methodsFor: 'querying' stamp: 'dkh 8/31/2009 05:10'!versionString	versionString == nil ifTrue: [ ^'' ].	^ versionString! !!MetacelloVersionSpec methodsFor: 'accessing' stamp: 'dkh 6/4/2009 18:50'!versionString: anObject	versionString := anObject! !!MetacelloCommonMCSpecLoader class methodsFor: 'utilities' stamp: 'dkh 9/10/2009 17:23'!nameComponentsFrom: aVersionName	| ar |	ar := (aVersionName last isDigit and: [ (aVersionName indexOf: $.) > 0 ])ifFalse: [Array with: aVersionName with: '' with: 0 with: aVersionName with: self]		ifTrue: [ | vrsn str |			str := ((aVersionName copyAfterLast: $-) copyAfterLast: $.).			vrsn := str isEmpty				ifTrue: [0]				ifFalse: [str asInteger].			Array				with: (aVersionName copyUpToLast:  $-)								"base pkg name"				with: ((aVersionName copyAfterLast: $-) copyUpTo: $.)				"user"				with:  vrsn "version"				with: aVersionName				with: self ].	^ar! !!MetacelloCommonMCSpecLoader methodsFor: 'versionInfo' stamp: 'dkh 9/25/2009 11:27'!currentVersionInfoFor: packageSpec	^packageSpec currentVersionInfo! !!MetacelloCommonMCSpecLoader methodsFor: 'actions' stamp: 'DaleHenrichs 3/10/2010 15:16'!doLoad	self subclassResponsibility! !!MetacelloCommonMCSpecLoader methodsFor: 'actions' stamp: 'TestRunner 10/23/2009 11:33'!doingLoads: aBlock	"escape mechanism for recording and null loaders to skip doing loaderlike things"		aBlock value! !!MetacelloCommonMCSpecLoader methodsFor: 'testing' stamp: 'DaleHenrichs 3/11/2010 20:48'!ensureForDevelopment	^true! !!MetacelloCommonMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 14:29'!fetchingSpecLoader	^self! !!MetacelloCommonMCSpecLoader methodsFor: 'testing' stamp: 'DaleHenrichs 3/10/2010 14:40'!hasRepositoryOverrides	^self loaderPolicy hasRepositoryOverrides! !!MetacelloCommonMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 4/12/2010 11:30'!ignoreImage	^self loaderPolicy ignoreImage! !!MetacelloCommonMCSpecLoader methodsFor: 'initialize-release' stamp: 'DaleHenrichs 3/10/2010 14:41'!initialize	self loaderPolicy! !!MetacelloCommonMCSpecLoader methodsFor: 'actions' stamp: 'DaleHenrichs 4/9/2010 12:17'!linearLoadPackageSpec: packageSpec gofer: gofer	self subclassResponsibility! !!MetacelloCommonMCSpecLoader methodsFor: 'private' stamp: 'DaleHenrichs 3/5/2010 09:45'!linearLoadPackageSpecs: packageSpecs repositories: repositories		| gofer |	gofer := Gofer new.	repositories do: [:repo | gofer repository: repo ].	packageSpecs do: [:pkg | pkg loadUsing: self gofer: gofer ].! !!MetacelloCommonMCSpecLoader methodsFor: 'actions' stamp: 'DaleHenrichs 3/10/2010 14:33'!load	| repos |	repos := self repositoriesFrom: self spec repositorySpecs.	^ self loadType == #atomic		ifTrue: [self atomicLoadPackageSpecs: self spec packageSpecsInLoadOrder repositories: repos]		ifFalse: ["assume #linear"			self linearLoadPackageSpecs: self spec packageSpecsInLoadOrder repositories: repos ]! !!MetacelloCommonMCSpecLoader methodsFor: 'actions' stamp: 'DaleHenrichs 4/9/2010 12:07'!loadPackageDirective: aPackageLoadDirective gofer: aGofer	| packageSpec |	packageSpec := aPackageLoadDirective spec.	MetacelloPlatform current		do:  [ | loadBlock goferLoad answers resolvedReference |			aGofer disablePackageCache. "for good luck:)"			resolvedReference := self resolvePackageSpec: packageSpec gofer: aGofer.			resolvedReference isNil ifTrue: [ "Package version already loaded into image" ^self ].			loadBlock := [				"mcLoader preLoad: packageSpec."				goferLoad := MetacelloGoferLoad on: Gofer new.				goferLoad addResolved: resolvedReference.				goferLoad execute.				MetacelloPlatform current clearCurrentVersionCache.				"mcLoader postLoad: packageSpec" ].			(answers := packageSpec answers) notEmpty				ifTrue: [ loadBlock valueSupplyingMetacelloAnswers: answers ]				ifFalse: [ loadBlock value].			resolvedReference workingCopy repositoryGroup addRepository:  aPackageLoadDirective repository.			Transcript cr; show: 'Loaded -> ', resolvedReference name, ' --- ', aPackageLoadDirective repository description, ' --- ', resolvedReference repository description  ]		displaying: 'Loading ', packageSpec file! !!MetacelloCommonMCSpecLoader methodsFor: 'actions' stamp: 'DaleHenrichs 4/9/2010 12:12'!loadPackageDirectives: pkgLoads gofer: aGofer	MetacelloPlatform current		do:  [ | goferLoad loadBlock answers |			goferLoad := MetacelloGoferLoad on: aGofer.			answers := OrderedCollection new.			pkgLoads do: [:packageLoadDirective | | resolvedReference |				aGofer disablePackageCache. "for good luck:)"				(resolvedReference := self 						resolvePackageSpec: packageLoadDirective spec 						gofer: aGofer) ~~ nil					ifTrue: [ 						goferLoad addResolved: resolvedReference.						answers addAll: packageLoadDirective spec answers.						packageLoadDirective resolvedReference:  resolvedReference ]].			Transcript cr; show: 'Starting atomic load'.			loadBlock := [				"pkgLoads do: [:packageLoadDirective |  mcLoader preLoad: packageLoadDirective spec ]."				goferLoad execute.				pkgLoads do: [:packageLoadDirective |					packageLoadDirective resolvedReference == nil						ifTrue: [ Transcript cr; tab; show: 'Already Loaded -> ', packageLoadDirective file ]						ifFalse: [ Transcript cr; tab; show: 'Loaded -> ', packageLoadDirective file, ' --- ',  packageLoadDirective repository description, ' --- ', packageLoadDirective resolvedReference repository description.					packageLoadDirective resolvedReference workingCopy repositoryGroup addRepository: packageLoadDirective repository ]].				MetacelloPlatform current clearCurrentVersionCache.				"pkgLoads do: [:packageLoadDirective | 					packageLoadDirective resolvedReference ~~ nil						ifTrue: [mcLoader postLoad: packageLoadDirective spec ]]"].			answers notEmpty				ifTrue: [ loadBlock valueSupplyingMetacelloAnswers: answers ]				ifFalse: [ loadBlock value].			Transcript cr; show: 'Finished atomic load' ]		displaying: 'Atomic Load...'.! !!MetacelloCommonMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 14:35'!loaderPolicy	loaderPolicy == nil ifTrue: [ loaderPolicy := MetacelloLoaderPolicy new ].	^loaderPolicy! !!MetacelloCommonMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 14:35'!loaderPolicy: anObject	loaderPolicy := anObject! !!MetacelloCommonMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/6/2010 07:43'!loadingSpecLoader	^self! !!MetacelloCommonMCSpecLoader methodsFor: 'packages' stamp: 'dkh 07/22/2009 14:50'!nameComponentsFrom: aVersionName	^self class nameComponentsFrom: aVersionName! !!MetacelloCommonMCSpecLoader methodsFor: 'accessing' stamp: 'dkh 08/10/2009 15:06'!operator	operator == nil ifTrue: [ ^#= ].	^operator! !!MetacelloCommonMCSpecLoader methodsFor: 'accessing' stamp: 'dkh 08/10/2009 15:06'!operator: aSymbol	operator := aSymbol! !!MetacelloCommonMCSpecLoader methodsFor: 'doits' stamp: 'DaleHenrichs 03/12/2010 16:43'!postLoad: packageOrVersionSpec	"subclassResponsibility, but it gets called during an upgrade, so leave it as NOOP"! !!MetacelloCommonMCSpecLoader methodsFor: 'doits' stamp: 'DaleHenrichs 3/10/2010 14:32'!preLoad: packageOrVersionSpec	self subclassResponsibility! !!MetacelloCommonMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/11/2010 16:37'!recordingSpecLoader	^(MetacelloNullRecordingMCSpecLoader on: self spec)		shouldDisablePackageCache: self shouldDisablePackageCache;		loaderPolicy: self loaderPolicy copy;		yourself! !!MetacelloCommonMCSpecLoader methodsFor: 'repositories' stamp: 'DaleHenrichs 3/10/2010 14:42'!repositoriesFrom: aMetacelloMVRepositorySpecs	^self repositoriesFrom: aMetacelloMVRepositorySpecs ignoreOverrides: false! !!MetacelloCommonMCSpecLoader methodsFor: 'repositories' stamp: 'DaleHenrichs 3/10/2010 14:42'!repositoriesFrom: aMetacelloMVRepositorySpecs ignoreOverrides: ignoreOverrides	| repositories repos |	(ignoreOverrides not and: [self hasRepositoryOverrides]) ifTrue: [ ^self loaderPolicy overrideRepositories ].	repositories := MCRepositoryGroup default repositories.	repos := OrderedCollection new.	aMetacelloMVRepositorySpecs do: [:aSpec | | description repo |		description := aSpec description.		(repo := repositories detect: [:rep | rep description = description ] ifNone: [ aSpec createRepository ]) ~~ nil			ifTrue: [ repos add: repo ]].	^repos! !!MetacelloCommonMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 14:43'!repositoryMap	^self loaderPolicy repositoryMap! !!MetacelloCommonMCSpecLoader methodsFor: 'private' stamp: 'DaleHenrichs 6/15/2010 10:29'!resolvePackageSpec: packageSpec gofer: gofer	|  references resolvedReference loadedVersionInfo mcVersion |	references := self retryingResolvePackageSpecReferences: packageSpec gofer: gofer.	resolvedReference := references last asMetacelloCachingResolvedReference.	mcVersion := resolvedReference version.	(loadedVersionInfo := self currentVersionInfoFor: packageSpec) ~~ nil		ifTrue: [ 			loadedVersionInfo name = mcVersion info name 				ifTrue: [ 					"package already loaded, don't load again"					^nil ]].	^resolvedReference! !!MetacelloCommonMCSpecLoader methodsFor: 'private' stamp: 'DaleHenrichs 3/10/2010 14:43'!resolvePackageSpecReferences: packageSpec gofer: gofer	|  versionReference references localGofer |	localGofer := gofer.	self hasRepositoryOverrides not		ifTrue: [			packageSpec repositorySpecs notEmpty				ifTrue: [ 					localGofer := Gofer new.					(self repositoriesFrom: packageSpec repositorySpecs) do: [:repo | localGofer repository: repo ]]].	(packageSpec getFile == nil or: [ self shouldDisablePackageCache ])		ifTrue: [ 			"don't use package-cache when trying to get latest version"			localGofer disablePackageCache ].	versionReference := packageSpec goferLoaderReference.	references := versionReference resolveAllWith: localGofer.	localGofer enablePackageCache.	^references! !!MetacelloCommonMCSpecLoader methodsFor: 'private' stamp: 'DaleHenrichs 6/15/2010 11:00'!retryingResolvePackageSpecReferences: packageSpec gofer: gofer	| retryCount references repositoryError |	retryCount := 0.	references := #().	[references isEmpty		and: [retryCount < 3]]		whileTrue: [retryCount > 0				ifTrue: [Transcript cr; show: '...RETRY'].			references := [self resolvePackageSpecReferences: packageSpec gofer: gofer]						on: Error , GoferRepositoryError						do: [:ex | 							retryCount >= 2								ifTrue: [(ex isKindOf: GoferRepositoryError)										ifTrue: [											"ignore repository errors at this point, in case an alternate repository is in the list "											Transcript cr; show: 'gofer repository error: ', ex description printString, '...ignoring'. 											repositoryError := ex.											ex resume: #()]										ifFalse: [ex pass]].							ex return: #()].			retryCount := retryCount + 1].	references isEmpty 		ifTrue: [ 			self error: 'Could not resolve: ', packageSpec name,				(repositoryError == nil 					ifTrue: [''] 					ifFalse: [						"report repository error to user here, since failure here is likely to be due to earlier repository error"						' ERROR: ', repositoryError description printString ]) ].	^references! !!MetacelloCommonMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 14:34'!shouldDisablePackageCache	disablePackageCache == nil ifTrue: [ disablePackageCache := false ].	^ disablePackageCache! !!MetacelloCommonMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 14:34'!shouldDisablePackageCache: anObject	disablePackageCache := anObject! !!MetacelloFetchingMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/11/2010 16:33'!actionLabel	^'Fetching '! !!MetacelloFetchingMCSpecLoader methodsFor: 'private' stamp: 'DaleHenrichs 3/9/2010 12:23'!atomicLoadPackageSpecs: packageSpecs repositories: repositories	self loaderPolicy 		pushAtomicLoadDirectivesDuring: [ super linearLoadPackageSpecs: packageSpecs repositories: repositories ]		for: self! !!MetacelloFetchingMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 14:39'!cacheRepository	^self loaderPolicy cacheRepository! !!MetacelloFetchingMCSpecLoader methodsFor: 'versionInfo' stamp: 'DaleHenrichs 3/10/2010 11:59'!currentVersionInfoFor: packageSpec	^self loadData		currentVersionInfoFor: packageSpec 		ifAbsent: [ super currentVersionInfoFor: packageSpec ]! !!MetacelloFetchingMCSpecLoader methodsFor: 'actions' stamp: 'DaleHenrichs 3/10/2010 16:42'!doLoad	self loaderPolicy copy load! !!MetacelloFetchingMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 14:40'!ensuredMap	^self loaderPolicy ensuredMap! !!MetacelloFetchingMCSpecLoader methodsFor: 'private' stamp: 'DaleHenrichs 3/21/2010 13:21'!explicitLoadPackageSpecs: packageSpecs repositories: repositories		| directive |	directive := self loaderPolicy 		pushExplicitLoadDirectivesDuring: [ super linearLoadPackageSpecs: packageSpecs repositories: repositories ]		for: self.	directive explicitLoadWithPolicy: self loaderPolicy.! !!MetacelloFetchingMCSpecLoader methodsFor: 'actions' stamp: 'DaleHenrichs 6/15/2010 10:57'!linearLoadPackageSpec: packageSpec gofer: gofer	MetacelloPlatform current		do:  [ | references nearestReference cachedReference loadedVersionInfo externalReference mcVersion |			"check to see if mcz file is already in cacheRepository"			cachedReference := self resolvePackageSpec: packageSpec cachedGofer: self loaderPolicy cacheGofer.			(cachedReference ~~ nil and: [ packageSpec getFile ~~ nil ])				ifTrue: [	 cachedReference name = packageSpec file ifTrue: [ ^self ]].			"look up mcz file"			references := self retryingResolvePackageSpecReferences: packageSpec gofer: gofer.			nearestReference := references last asMetacelloCachingResolvedReference.			"If the mcz is already in the cacheRepository, no need to copy"			(cachedReference ~~ nil and: [ cachedReference name = nearestReference name ])				ifTrue: [ ^self ].			"If the mcz is already loaded into the image, no need to copy"			(self ignoreImage not 				and: [ (loadedVersionInfo := self currentVersionInfoFor: packageSpec) ~~ nil ])					ifTrue: [ loadedVersionInfo name = nearestReference name ifTrue: [ ^self ]].			externalReference := (references select: [:ref | ref name = nearestReference name]) first asMetacelloCachingResolvedReference.			self repositoryMap at: externalReference name put: externalReference repository.			(self resolveDependencies: externalReference into: (OrderedCollection with: nearestReference)) do: [:reference | | pSpec |				mcVersion := reference version.				self cacheRepository storeVersion: mcVersion.				reference == nearestReference					ifTrue: [ pSpec := packageSpec ]					ifFalse: [ 						pSpec :=  packageSpec project packageSpec.						pSpec name: mcVersion info ].				self loadData 					addVersion: mcVersion 					versionInfo: mcVersion info 					resolvedReference: reference 					packageSpec: pSpec ].			self loaderPolicy resetCacheGofer.			self preLoad: packageSpec.			(MetacelloDirective loadPackage: packageSpec externalReference: externalReference loader: self) addTo: self loadDirective.			self postLoad: packageSpec.			Transcript cr; show: 'Fetched -> ', externalReference name, ' --- ', externalReference repository description, ' --- ', nearestReference repository description ]		displaying: 'Fetching ', packageSpec file! !!MetacelloFetchingMCSpecLoader methodsFor: 'private' stamp: 'DaleHenrichs 3/9/2010 12:39'!linearLoadPackageSpecs: packageSpecs repositories: repositories		self loaderPolicy 		pushLinearLoadDirectivesDuring: [ super linearLoadPackageSpecs: packageSpecs repositories: repositories ]		 for: self! !!MetacelloFetchingMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 11:58'!loadData	^self loaderPolicy loadData! !!MetacelloFetchingMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 14:36'!loadDirective	^self loaderPolicy loadDirective! !!MetacelloFetchingMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 10:25'!loadingSpecLoader	^(MetacelloLoadingMCSpecLoader on: self spec)		shouldDisablePackageCache: self shouldDisablePackageCache;		loaderPolicy: self loaderPolicy copy;		yourself! !!MetacelloFetchingMCSpecLoader methodsFor: 'doits' stamp: 'DaleHenrichs 3/11/2010 13:43'!postLoad: packageOrVersionSpec	(MetacelloDirective postLoadSpec: packageOrVersionSpec loader: self)  addTo: self loadDirective! !!MetacelloFetchingMCSpecLoader methodsFor: 'doits' stamp: 'DaleHenrichs 3/11/2010 13:43'!preLoad: packageOrVersionSpec	(MetacelloDirective preLoadSpec: packageOrVersionSpec loader: self) addTo: self loadDirective! !!MetacelloFetchingMCSpecLoader methodsFor: 'printing' stamp: 'DaleHenrichs 5/17/2010 16:42'!printOn: aStream	super printOn: aStream.	aStream nextPut: $(.	self loadDirective printOn: aStream.	aStream nextPut: $)! !!MetacelloFetchingMCSpecLoader methodsFor: 'private' stamp: 'DaleHenrichs 4/21/2010 13:17'!resolveDependencies: aResolvedReference into: aCollection	| block retryCount coll notDone |	block := [ :dependency | | reference |		reference := MetacelloCachingGoferResolvedReference			name: dependency versionInfo name			repository: aResolvedReference repository.		coll add: reference.		Transcript cr; show: 'Fetched dependency -> ', reference name, ' --- ', reference repository description.		self resolveDependencies: reference into: coll].	retryCount := 0.	notDone := true.	coll := OrderedCollection new.	[ notDone and: [ retryCount < 3 ]]		whileTrue: [			retryCount > 0 ifTrue: [ Transcript cr; show: '...RETRY' ].			[ 					"ensure that all resolved references have cached their version while wrapped by error handler"				aCollection do: [:each | each version ]. 				aResolvedReference version dependencies do: block.				notDone := false ]					on: Error 					do: [:ex | 						retryCount := retryCount + 1.						retryCount >= 3 ifTrue: [ ex pass ].						coll := OrderedCollection new ]].	aCollection addAll: coll.	^aCollection! !!MetacelloFetchingMCSpecLoader methodsFor: 'private' stamp: 'DaleHenrichs 3/4/2010 19:29'!resolvePackageSpec: packageSpec cachedGofer: gofer	|  versionReference references |	versionReference := packageSpec goferLoaderReference.	(references := versionReference resolveAllWith: gofer) isEmpty 		ifTrue: [ ^nil ].	^references last asMetacelloCachingResolvedReference.! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/11/2010 16:33'!actionLabel	^'Recording '! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 14:50'!afterLoads	afterLoads == nil ifTrue: [ afterLoads := OrderedCollection new ].	^afterLoads! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 14:50'!beforeLoads	beforeLoads == nil ifTrue: [ beforeLoads := OrderedCollection new ].	^beforeLoads! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'versionInfo' stamp: 'dkh 08/10/2009 16:39'!currentVersionInfoFor: packageSpec	^self loadData		currentVersionInfoFor: packageSpec 		ifAbsent: [ nil ]! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'actions' stamp: 'DaleHenrichs 3/10/2010 14:46'!doingLoads: aBlock	"escape mechanism for recording and null loaders to skip doing loaderlike things"! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'testing' stamp: 'DaleHenrichs 3/11/2010 17:18'!ensureForDevelopment	^false! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 15:43'!evalDoits	evalDoits == nil ifTrue: [ evalDoits := false ].	^evalDoits ! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 14:46'!evalDoits: aBool	evalDoits := aBool! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'actions' stamp: 'DaleHenrichs 4/9/2010 12:33'!linearLoadPackageSpec: packageSpec gofer: gofer	MetacelloPlatform current		do:  [ | externalReference loadBlock answers fake |			externalReference := self resolveRecordingPackageSpecReference: packageSpec gofer: gofer.			loadBlock := [					self preLoad: packageSpec.					(MetacelloDirective 						loadPackage: packageSpec 						externalReference: externalReference 						loader: self) addTo: self loadDirective.					self postLoad: packageSpec ].			(answers := packageSpec answers) notEmpty				ifTrue: [ loadBlock valueSupplyingMetacelloAnswers: answers ]				ifFalse: [ loadBlock value ].			fake := packageSpec copy.			fake name: fake file.			self loadData 				addVersion: fake				versionInfo: fake				resolvedReference: externalReference 				packageSpec: packageSpec ]		displaying: 'Recording ', packageSpec file! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'actions' stamp: 'DaleHenrichs 4/9/2010 12:08'!loadPackageDirective: aPackageLoadDirective gofer: aGofer	"Noop"! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'actions' stamp: 'DaleHenrichs 4/9/2010 12:12'!loadPackageDirectives: pkgLoads gofer: aGofer	"Noop"! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/11/2010 13:45'!loadedPackages	| packages |	packages := OrderedCollection new.	self loadDirective packageDirectivesDo: [:directive | packages add: directive file ].	^packages! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 4/21/2010 11:56'!loadedRepositories	| repos |	repos := OrderedCollection new.	self repositoryMap values collect: [:coll | repos addAll: coll ].	^repos! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 4/9/2010 12:23'!loadingSpecLoader	^self! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/11/2010 13:46'!packages	| packages |	packages := OrderedCollection new.	self loadDirective packageDirectivesDo: [:directive | packages add: directive spec ].	^packages! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'doits' stamp: 'DaleHenrichs 4/8/2010 16:11'!postLoad: packageOrVersionSpec	self evalDoits ifFalse: [ ^self ].	packageOrVersionSpec postLoadDoItBlock ~~ nil		ifTrue: [ self afterLoads add: packageOrVersionSpec name, ' load' ].	super postLoad: packageOrVersionSpec! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'doits' stamp: 'DaleHenrichs 4/8/2010 16:10'!preLoad: packageOrVersionSpec	self evalDoits ifFalse: [ ^self ].	packageOrVersionSpec preLoadDoItBlock ~~ nil		ifTrue: [ self beforeLoads add: packageOrVersionSpec name, ' load' ].	super preLoad: packageOrVersionSpec! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/11/2010 10:01'!recordingSpecLoader	^self! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'private' stamp: 'DaleHenrichs 3/11/2010 16:49'!resolvePackageSpecReferences: packageSpec gofer: gofer	|  versionReference references localGofer |	localGofer := gofer.	self hasRepositoryOverrides not		ifTrue: [			packageSpec repositorySpecs notEmpty				ifTrue: [ 					localGofer := Gofer new.					(self repositoriesFrom: packageSpec repositorySpecs) do: [:repo | localGofer repository: repo ]]].	(packageSpec getFile == nil or: [ self shouldDisablePackageCache ])		ifTrue: [ 			"don't use package-cache when trying to get latest version"			localGofer disablePackageCache ].	versionReference := packageSpec goferLoaderReference.	references := versionReference resolveAllWith: localGofer.	localGofer enablePackageCache.	^references! !!MetacelloNullRecordingMCSpecLoader methodsFor: 'private' stamp: 'DaleHenrichs 03/12/2010 15:01'!resolveRecordingPackageSpecReference: packageSpec gofer: gofer	| externalPackageReference |	externalPackageReference := packageSpec file == nil				ifTrue: [ GoferPackageReference name: packageSpec name ]				ifFalse: [ GoferResolvedReference name: packageSpec file repository: nil ].	packageSpec repositorySpecs isEmpty		ifTrue: [  self repositoryMap at: externalPackageReference packageName put: (gofer repositories reject: [:repo | repo = MCCacheRepository default ]) ]		ifFalse: [  self repositoryMap at: externalPackageReference packageName put: (packageSpec repositorySpecs collect: [:repoSpec | repoSpec createRepository ]) ].	^externalPackageReference! !!MetacelloLoadingMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/11/2010 16:33'!actionLabel	^'Loading '! !!MetacelloLoadingMCSpecLoader methodsFor: 'development support' stamp: 'DaleHenrichs 3/10/2010 14:39'!copySpec: pkgSpec from: repositorySpecs to: repository	| gofer |	gofer := Gofer new.	(self repositoriesFrom: repositorySpecs) do: [:repo | gofer repository: repo ].	^self copySpec: pkgSpec with: gofer to: repository! !!MetacelloLoadingMCSpecLoader methodsFor: 'development support' stamp: 'DaleHenrichs 3/10/2010 14:39'!copySpec: pkgSpec with: gofer to: repository	| resolvedReference |	[resolvedReference := pkgSpec goferLoaderReference resolveWith: gofer]		on: Error		do: [:ignored | ^nil ].	repository storeVersion: resolvedReference version.	^resolvedReference repository! !!MetacelloLoadingMCSpecLoader methodsFor: 'actions' stamp: 'DaleHenrichs 3/10/2010 15:16'!doLoad	"NOOP"! !!MetacelloLoadingMCSpecLoader methodsFor: 'accessing' stamp: 'DaleHenrichs 3/10/2010 14:28'!fetchingSpecLoader	^(MetacelloFetchingMCSpecLoader on: self spec)		shouldDisablePackageCache: self shouldDisablePackageCache;		loaderPolicy: self loaderPolicy copy;		yourself! !!MetacelloLoadingMCSpecLoader methodsFor: 'development support' stamp: 'DaleHenrichs 3/15/2010 11:36'!goferCommitPackageUsing: repositorySpecs commitMessage: commitMessage	| gofer repoSpecs |	repoSpecs := self spec repositorySpecs notEmpty				ifTrue: [ self spec repositorySpecs ]				ifFalse: [ repositorySpecs ].	gofer := Gofer new.	gofer disablePackageCache.	repositorySpecs do: [:repoSpec | gofer repository: repoSpec createRepository].	gofer package: self spec name.	gofer commit: commitMessage.	^true! !!MetacelloLoadingMCSpecLoader methodsFor: 'packages' stamp: 'DaleHenrichs 3/10/2010 14:28'!latestPackage: aString fromRepository: repositorySpecs	| gofer |	gofer := Gofer new.	gofer disablePackageCache.	(self repositoriesFrom: repositorySpecs) do: [:repo | gofer repository: repo ].	^([(GoferPackageReference name: aString) resolveWith: gofer]		on: Error		do: [:ignored | ^ nil ]) name! !!MetacelloLoadingMCSpecLoader methodsFor: 'private' stamp: 'DaleHenrichs 4/9/2010 12:30'!linearLoadPackageSpec: packageSpec gofer: gofer	MetacelloPlatform current		do:  [ | loadBlock goferLoad answers resolvedReference repo |			resolvedReference := self resolvePackageSpec: packageSpec gofer: gofer.			resolvedReference isNil ifTrue: [ "Package version already loaded into image" ^self ].			loadBlock := [				self preLoad: packageSpec.				goferLoad := MetacelloGoferLoad on: Gofer new.				goferLoad addResolved: resolvedReference.				goferLoad execute.				MetacelloPlatform current clearCurrentVersionCache.				self postLoad: packageSpec ].			(answers := packageSpec answers) notEmpty				ifTrue: [ loadBlock valueSupplyingMetacelloAnswers: answers ]				ifFalse: [ loadBlock value].			repo := resolvedReference repository.			self hasRepositoryOverrides				ifTrue: [					repo := self loaderPolicy repositoryMap 								at: resolvedReference name 								ifAbsent: [ resolvedReference repository ].					resolvedReference workingCopy repositoryGroup addRepository:  repo ]				ifFalse: [ resolvedReference workingCopy repositoryGroup addRepository: resolvedReference repository ].			Transcript cr; show: 'Loaded -> ', resolvedReference name, ' --- ', repo description, ' --- ', resolvedReference repository description  ]		displaying: 'Loading ', packageSpec file! !!MetacelloLoadingMCSpecLoader methodsFor: 'development support' stamp: 'DaleHenrichs 3/6/2010 09:04'!packagesNeedSavingUsing: repositorySpecs into: aCollection	| wc repoSpecs repo |	(wc := self spec workingCopy) == nil ifTrue: [ ^self ].	(wc ancestry ancestors notEmpty and: [ wc modified not])		ifTrue: [ ^self ].	repoSpecs := self spec repositorySpecs notEmpty				ifTrue: [ self spec repositorySpecs ]				ifFalse: [ repositorySpecs ].	repo := (self spec getFile == nil or: [ wc ancestry ancestors isEmpty ])		ifTrue: [ (self repositoriesFrom: repoSpecs ignoreOverrides: true) first ]		ifFalse: [			([ self resolveSpec: self spec from: repoSpecs ] 				on: Error 				do: [:ignored | ^self ]) repository ].	aCollection add: self spec -> repo! !!MetacelloLoadingMCSpecLoader methodsFor: 'doits' stamp: 'DaleHenrichs 3/10/2010 14:31'!postLoad: packageOrVersionSpec	| block |	(block := packageOrVersionSpec postLoadDoItBlock) ~~ nil		ifTrue: [ block valueWithPossibleArgs: { self. packageOrVersionSpec. } ]! !!MetacelloLoadingMCSpecLoader methodsFor: 'doits' stamp: 'DaleHenrichs 3/10/2010 14:31'!preLoad: packageOrVersionSpec	| block |	(block := packageOrVersionSpec preLoadDoItBlock) ~~ nil		ifTrue: [ block valueWithPossibleArgs: { self. packageOrVersionSpec. } ]! !!MetacelloLoadingMCSpecLoader methodsFor: 'development support' stamp: 'DaleHenrichs 3/10/2010 14:42'!repositoryFor: pkgSpec from: repositorySpecs	^([self resolveSpec: pkgSpec from: repositorySpecs]		on: Error		do: [:ignored | ^nil ]) repository! !!MetacelloLoadingMCSpecLoader methodsFor: 'development support' stamp: 'DaleHenrichs 3/10/2010 14:42'!repositoryFor: pkgSpec with: gofer	^([self resolveSpec: pkgSpec with: gofer]		on: Error		do: [:ignored | ^nil ]) repository! !!MetacelloLoadingMCSpecLoader methodsFor: 'development support' stamp: 'DaleHenrichs 3/10/2010 14:43'!resolveSpec: pkgSpec from: repositorySpecs	| gofer |	gofer := Gofer new.	gofer disablePackageCache.	(self repositoriesFrom: repositorySpecs ignoreOverrides: true) 		do: [:repo | gofer repository: repo ].	^self resolveSpec: pkgSpec with: gofer! !!MetacelloLoadingMCSpecLoader methodsFor: 'development support' stamp: 'DaleHenrichs 3/10/2010 14:44'!resolveSpec: pkgSpec with: gofer	^pkgSpec goferLoaderReference resolveWith: gofer! !!MetacelloLoadingMCSpecLoader methodsFor: 'development support' stamp: 'DaleHenrichs 3/6/2010 09:04'!savePackageUsing: repositorySpecs	| wc repo repoSpecs newVersion |	(wc := self spec workingCopy) == nil ifTrue: [ ^false ].	(wc ancestry ancestors notEmpty and: [ wc modified not])		ifTrue: [ ^false ].	repoSpecs := self spec repositorySpecs notEmpty				ifTrue: [ self spec repositorySpecs ]				ifFalse: [ repositorySpecs ].	(self spec getFile == nil or: [ wc ancestry ancestors isEmpty ])		ifTrue: [ repo := (self repositoriesFrom: repoSpecs ignoreOverrides: true) first ]		ifFalse: [			[ 	| newer |				repo := (self resolveSpec: self spec from: repoSpecs) repository.				newer := wc possiblyNewerVersionsIn: repo.				newer isEmpty not 					ifTrue: [						(MetacelloPlatform current confirm: 'CAUTION!! These versions in the repository may be newer:', 							String cr, newer printString, String cr,							'Do you really want to save this version?') ifFalse: [ ^false ]] ] 				on: Error 				do: [:ignored | ^false ] ].	(newVersion :=  wc newVersion) == nil ifTrue: [ ^false ].	repo storeVersion: newVersion.	^true! !!MetacelloSpecLoader class methodsFor: 'instance creation' stamp: 'dkh 04/23/2009 11:24'!on: aMetacelloPackagesSpec	^(self new) 		spec: aMetacelloPackagesSpec;		yourself! !!MetacelloSpecLoader methodsFor: 'actions' stamp: 'dkh 04/23/2009 11:21'!load	self subclassResponsibility! !!MetacelloSpecLoader methodsFor: 'accessing' stamp: 'dkh 6/12/2009 14:17'!loadType	"#atomic or #linear"		^self project loadType! !!MetacelloSpecLoader methodsFor: 'accessing' stamp: 'dkh 6/12/2009 14:17'!project	^self spec project! !!MetacelloSpecLoader methodsFor: 'accessing' stamp: 'dkh 04/23/2009 11:20'!spec	^spec! !!MetacelloSpecLoader methodsFor: 'accessing' stamp: 'dkh 04/23/2009 11:20'!spec: aMetacelloPackagesSpec	spec := aMetacelloPackagesSpec! !!MetacelloSpecLoader methodsFor: 'actions' stamp: 'dkh 04/23/2009 11:48'!unload	self subclassResponsibility! !!MetacelloVersionConstructor class methodsFor: 'instance creation' stamp: 'dkh 10/3/2009 17:27'!on: aConfig	^(self new)		on: aConfig;		yourself! !!MetacelloVersionConstructor class methodsFor: 'instance creation' stamp: 'dkh 10/14/2009 16:52'!on: aConfig project: aProject	^(self new)		project: aProject;		on: aConfig;		yourself! !!MetacelloVersionConstructor class methodsFor: 'instance creation' stamp: 'DaleHenrichs 3/12/2010 00:13'!spawnPackageMethodIn: aConfig category: methodCategory named: newSelector sourceVersion: sourceVersionString targetVersion: targetVersionString blessing: blessing	^self new		spawnPackageMethodIn: aConfig 		category: methodCategory 		named: newSelector		sourceVersion: sourceVersionString 		targetVersion: targetVersionString		blessing: blessing! !!MetacelloVersionConstructor class methodsFor: 'instance creation' stamp: 'DaleHenrichs 3/23/2010 19:14'!spawnPackageMethodIn: aConfig named: newSelector sourceVersion: sourceVersionString targetVersion: targetVersionString	^self 		spawnPackageMethodIn: aConfig 		category: 'versions'		named: newSelector 		sourceVersion: sourceVersionString 		targetVersion: targetVersionString 		blessing: #development! !!MetacelloVersionConstructor class methodsFor: 'instance creation' stamp: 'DaleHenrichs 3/12/2010 00:15'!spawnPackageMethodIn: aConfig named: newSelector sourceVersion: sourceVersionString targetVersion: targetVersionString blessing: blessing	^self new		spawnPackageMethodIn: aConfig 		category: 'versions'		named: newSelector 		sourceVersion: sourceVersionString 		targetVersion: targetVersionString		blessing: blessing! !!MetacelloVersionConstructor class methodsFor: 'instance creation' stamp: 'dkh 10/7/2009 13:57'!updatePackageMethodIn: aConfig sourceVersion: sourceVersionString	^self new		updatePackageMethodIn: aConfig 		sourceVersion: sourceVersionString! !!MetacelloVersionConstructor methodsFor: 'accessing' stamp: 'dkh 10/3/2009 16:28'!attributeMap	attributeMap == nil ifTrue: [ attributeMap := Dictionary new ].	^attributeMap! !!MetacelloVersionConstructor methodsFor: 'accessing' stamp: 'dkh 10/5/2009 16:41'!attributeOrder	attributeOrder == nil ifTrue: [ attributeOrder := OrderedCollection new ].	^attributeOrder! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/7/2009 00:13'!author: aBlockOrString	aBlockOrString setAuthorInMetacelloConfig: self! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/7/2009 00:12'!blessing: aBlockOrString	aBlockOrString setBlessingInMetacelloConfig: self! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/3/2009 17:03'!className: anObject	self root className: anObject! !!MetacelloVersionConstructor methodsFor: 'private' stamp: 'dkh 1/7/2010 18:57'!collectAllVersionsFromVersionImportPragmasInto: versionMap using: executionBlock satisfiedPragmas: pragmaDict 	| defined done completed |	done := false.	completed := IdentitySet new.	[done]		whileFalse: [done := true.			pragmaDict				keysAndValuesDo: [:versionString :pragmaColl | 					| versionSpec |					versionSpec := nil.					defined := false.					pragmaColl						do: [:pragma | (completed includes: pragma)								ifFalse: [done := false.									(pragma argumentAt: 2)										do: [:importedVersion | | version | (version := versionMap															at: importedVersion															ifAbsent: []) ~~ nil												ifTrue: [defined := true.													versionSpec == nil														ifTrue: [versionSpec := version spec copy]														ifFalse: [versionSpec := versionSpec mergeSpec: version spec copy].													versionSpec versionString: versionString.													executionBlock value: versionSpec value: pragma]].									defined										ifTrue: [completed add: pragma]]].					defined						ifTrue: [ | version importedVersions |							importedVersions := OrderedCollection new.							version := versionSpec createVersion.							pragmaColl do: [:pragma | importedVersions addAll: (pragma argumentAt: 2) ].							version importedVersions: importedVersions.							versionMap at: versionSpec versionString put: version ].					self reset]]! !!MetacelloVersionConstructor methodsFor: 'private' stamp: 'djr 12/29/2009 18:01'!collectAllVersionsFromVersionPragmasInto: versionMap using: executionBlock 	| defined versionPragmaDict |	versionPragmaDict := self extractVersionPragmas.	versionPragmaDict		keysAndValuesDo: [:versionString :pragmaColl | 			| versionSpec |			versionSpec := self project versionSpec.			versionSpec versionString: versionString.			defined := false.			pragmaColl				do: [:pragma | 					defined := true.					executionBlock value: versionSpec value: pragma].			defined				ifTrue: [versionMap at: versionSpec versionString put: versionSpec createVersion].			self reset]! !!MetacelloVersionConstructor methodsFor: 'accessing' stamp: 'dkh 10/3/2009 16:26'!configuration	^configuration! !!MetacelloVersionConstructor methodsFor: 'accessing' stamp: 'dkh 10/3/2009 16:26'!configuration: aConfig	configuration := aConfig! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/7/2009 00:13'!description: aBlockOrString	aBlockOrString setDescriptionInMetacelloConfig: self! !!MetacelloVersionConstructor methodsFor: 'private' stamp: 'dkh 10/7/2009 00:53'!extractAllPragmas	| aDict |	aDict := Dictionary new.	self extractPragmas: #version: into: aDict.	self extractPragmas: #version:imports: into: aDict.	^aDict! !!MetacelloVersionConstructor methodsFor: 'private' stamp: 'DaleHenrichs 01/15/2010 14:18'!extractPragmas: pragmaKeyword into: versionDict	| versionString  pragmas |	(Pragma 		allNamed: pragmaKeyword		in: self configuration class) do: [:pragma |			versionString := pragma argumentAt: 1.			pragmas := versionDict 				at: versionString 				ifAbsent: [ | list |					list := OrderedCollection new.					versionDict at: versionString put: list.					list ].			pragmas add: pragma ].! !!MetacelloVersionConstructor methodsFor: 'private' stamp: 'dkh 10/7/2009 00:52'!extractVersionImportPragmas	| aDict |	aDict := Dictionary new.	self extractPragmas: #version:imports: into: aDict.	^aDict! !!MetacelloVersionConstructor methodsFor: 'private' stamp: 'dkh 10/7/2009 00:53'!extractVersionPragmas	| aDict |	aDict := Dictionary new.	self extractPragmas: #version: into: aDict.	^aDict! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/3/2009 17:24'!file: anObject	self root file: anObject! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/5/2009 16:42'!for: attribute do: aBlock	self attributeMap at: attribute put: aBlock.	self attributeOrder add: attribute! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/9/2009 11:30'!group: aString overrides: aStringOrCollection	| spec |	spec := 		(self project groupSpec)			name: aString;			includes: aStringOrCollection;			yourself.	self root packages add: spec.! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/9/2009 11:30'!group: aString with: aStringOrCollection	| spec |	spec := 		(self project groupSpec)			name: aString;			includes: aStringOrCollection;			yourself.	self root packages merge: spec.! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/3/2009 17:11'!includes: anObject	self root includes: anObject! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/4/2009 11:11'!loads: anObject	self root loads: anObject! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/3/2009 17:04'!name: anObject	self root name: anObject! !!MetacelloVersionConstructor methodsFor: 'initialization' stamp: 'djr 12/29/2009 18:01'!on: aConfig 	| versionMap executionBlock |	self configuration: aConfig.	versionMap := Dictionary new.	executionBlock := self specResolverBlock.	self collectAllVersionsFromVersionPragmasInto: versionMap using: executionBlock.	self		collectAllVersionsFromVersionImportPragmasInto: versionMap		using: executionBlock		satisfiedPragmas: (self versionImportPragmasVerifiedDefinedIn: versionMap).	self project map: versionMap.	self project configuration: aConfig! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/8/2009 20:58'!operator: anObject	self root operator: anObject! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/7/2009 16:39'!package: aString	| spec |	spec := 		(self project packageSpec)			name: aString;			yourself.	self root packages add: spec.! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/9/2009 11:22'!package: aString overrides: aBlock	| spec |	spec := 		(self project packageSpec)			name: aString;			yourself.	self root packages add: spec.	self with: spec during: aBlock! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/9/2009 11:22'!package: aString with: aBlockOrString	aBlockOrString setPackage: aString withInMetacelloConfig: self! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 12/30/2009 13:08'!postLoadDoIt: aSymbol	self validateDoItSelector: aSymbol.	self root postLoadDoIt: aSymbol! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 12/30/2009 13:08'!preLoadDoIt: aSymbol	self validateDoItSelector: aSymbol.	self root preLoadDoIt: aSymbol! !!MetacelloVersionConstructor methodsFor: 'private' stamp: 'DaleHenrichs 03/12/2010 01:52'!prepareForMethodUpdate: aConfig sourceVersion: sourceVersionString generating: generateBlock	| pragmaDict versionSpecs pragmaMap updatedPackageSpecs updatedPackageSpecsMap reversed pragmaColl seenUpdatedPackageSpecs |	self configuration: aConfig.	versionSpecs := Dictionary new.	pragmaMap := Dictionary new.	pragmaDict := self extractAllPragmas.	pragmaColl := pragmaDict at: sourceVersionString ifAbsent: [ ^self ].	pragmaColl do: [:pragma | | specs versionSpec |		specs := Dictionary new.		self configuration perform: pragma selector with: self.		self attributeMap keysAndValuesDo: [:attribute :block | 			versionSpec := self project versionSpec.			versionSpec versionString: sourceVersionString.			specs at: attribute put: versionSpec.			self 				with: versionSpec				during: block ].		versionSpecs at: pragma selector put: { specs. self attributeOrder. nil. }.		pragmaMap at: pragma selector put: pragma.		self reset ].	versionSpecs keysAndValuesDo: [:selector :ar |		updatedPackageSpecsMap := Dictionary new.		seenUpdatedPackageSpecs := Dictionary new.		ar at: 3 put: updatedPackageSpecsMap.		reversed := aConfig project attributes reverse.		reversed do: [:attribute | | vs |			(vs := (ar at: 1) at: attribute ifAbsent: []) ~~ nil				ifTrue: [ 					updatedPackageSpecs := vs updatedPackageSpecs.					updatedPackageSpecs associations do: [:assoc | | filename |						(filename := seenUpdatedPackageSpecs at: assoc key ifAbsent:[]) == nil							ifTrue: [ 								assoc value == #uptodate									ifTrue: [ 										"#uptodate means that the spec is up-to-date and we mark it as										 seen so that the spec is not update for a 'later' spec"										seenUpdatedPackageSpecs at: assoc key put: #uptodate ]									ifFalse: [ seenUpdatedPackageSpecs at: assoc key put: assoc value file ]]							ifFalse: [								"if the spec was already seen as up-to-date or the file is the same as 								 the one already seen don't propogate the file"								(filename == #uptodate or: [ assoc value == #uptodate or: [ filename = assoc value file ]])									ifTrue: [ updatedPackageSpecs removeKey: assoc key ]]].					updatedPackageSpecsMap at: attribute put: updatedPackageSpecs ]].		"clear out #uptodate markers"		updatedPackageSpecsMap valuesDo: [:d |			d associations do: [:assoc |				assoc value == #uptodate ifTrue: [ d removeKey: assoc key ]]].		"remove shadowed packages"		1 to: reversed size do: [:index | | attribute d |			attribute := reversed at: index.			((d := updatedPackageSpecsMap at: attribute ifAbsent: []) ~~ nil and: [ d keys size > 0 ])				ifTrue: [					index + 1 to: reversed size do: [:shadowIndex |						d keysDo: [:key | | dict |							(dict := updatedPackageSpecsMap at: (reversed at: shadowIndex) ifAbsent: []) ~~ nil								ifTrue: [ dict removeKey: key ifAbsent: []]]]]].		updatedPackageSpecsMap keys do: [:key | | d |			d := updatedPackageSpecsMap at: key.			d isEmpty ifTrue: [ updatedPackageSpecsMap removeKey: key ]].		"ready to generate source for method"		generateBlock value:selector value: pragmaMap value: ar value: updatedPackageSpecsMap]! !!MetacelloVersionConstructor methodsFor: 'accessing' stamp: 'dkh 10/3/2009 17:36'!project	project == nil ifTrue: [ project := MetacelloMCProject new].	^project! !!MetacelloVersionConstructor methodsFor: 'accessing' stamp: 'dkh 10/14/2009 16:55'!project: aProject	project := aProject! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/9/2009 11:38'!project: aString copyFrom: oldSpecName with: aBlock	| spec projectSpec |	projectSpec := 		(self project projectSpec)			name: aString;			projectPackage: self project packageSpec;			yourself.	spec := 		(self project projectReferenceSpec)			name: aString;			projectReference: projectSpec;			yourself.	self root packages copy: oldSpecName to: spec.	self with: projectSpec during: aBlock! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/9/2009 11:15'!project: aString overrides: aBlock	| spec projectSpec |	projectSpec := 		(self project projectSpec)			name: aString;			projectPackage: self project packageSpec;			yourself.	projectSpec projectPackage: self project packageSpec.	spec := 		(self project projectReferenceSpec)			name: aString;			projectReference: projectSpec;			yourself.	self root packages add: spec.	self with: projectSpec during: aBlock	! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/9/2009 11:16'!project: aString with: aBlockOrString	aBlockOrString setProject: aString withInMetacelloConfig: self! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/3/2009 16:54'!projectPackage: aBlock	| spec |	(spec := self root projectPackage) == nil		ifTrue: [ 			spec := self project packageSpec.			self root projectPackage: spec ].	self with: spec during: aBlock! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/7/2009 00:39'!removeGroup: aString	| spec |	spec := 		(self project groupSpec)			name: aString;			yourself.	self root packages remove: spec.! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/7/2009 00:39'!removePackage: aString	| spec |	spec := 		(self project packageSpec)			name: aString;			yourself.	self root packages remove: spec.! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/7/2009 00:40'!removeProject: aString	| spec |	spec := 		(self project projectReferenceSpec)			name: aString;			yourself.	self root packages remove: spec.! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/3/2009 16:50'!repositories: aBlock	self with: self root repositories during: aBlock! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/6/2009 13:36'!repository: anObject	self root repository: anObject! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/22/2009 09:02'!repository: description username: username password: password	self root repository: description username: username password: password! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/3/2009 17:10'!requires: anObject	self root requires: anObject! !!MetacelloVersionConstructor methodsFor: 'initialization' stamp: 'dkh 10/5/2009 16:42'!reset	attributeMap := attributeOrder := nil! !!MetacelloVersionConstructor methodsFor: 'accessing' stamp: 'dkh 10/3/2009 16:36'!root	^root! !!MetacelloVersionConstructor methodsFor: 'accessing' stamp: 'dkh 10/3/2009 16:37'!root: aMetacelloSpec	root := aMetacelloSpec! !!MetacelloVersionConstructor methodsFor: 'api callbacks' stamp: 'dkh 10/7/2009 00:10'!setAuthorWithBlock: aBlock	| spec |	(spec := self root getAuthor) == nil		ifTrue: [ 			spec := self project valueHolderSpec.			self root setAuthor: spec ].	self with: spec during: aBlock! !!MetacelloVersionConstructor methodsFor: 'api callbacks' stamp: 'dkh 10/7/2009 00:10'!setAuthorWithString: aString	self root author: aString! !!MetacelloVersionConstructor methodsFor: 'api callbacks' stamp: 'dkh 10/7/2009 00:10'!setBlessingWithBlock: aBlock	| spec |	(spec := self root getBlessing) == nil		ifTrue: [ 			spec := self project valueHolderSpec.			self root setBlessing: spec ].	self with: spec during: aBlock! !!MetacelloVersionConstructor methodsFor: 'api callbacks' stamp: 'dkh 10/7/2009 00:10'!setBlessingWithString: aString	self root blessing: aString! !!MetacelloVersionConstructor methodsFor: 'api callbacks' stamp: 'dkh 10/7/2009 00:10'!setDescriptionWithBlock: aBlock	| spec |	(spec := self root getDescription) == nil		ifTrue: [ 			spec := self project valueHolderSpec.			self root setDescription: spec ].	self with: spec during: aBlock! !!MetacelloVersionConstructor methodsFor: 'api callbacks' stamp: 'dkh 10/7/2009 00:11'!setDescriptionWithString: aString	self root description: aString! !!MetacelloVersionConstructor methodsFor: 'api callbacks' stamp: 'dkh 10/9/2009 11:21'!setPackage: aString withBlock: aBlock	| spec |	spec := 		(self project packageSpec)			name: aString;			yourself.	self root packages merge: spec.	self with: spec during: aBlock! !!MetacelloVersionConstructor methodsFor: 'api callbacks' stamp: 'dkh 10/9/2009 11:21'!setPackage: aString withString: aFile	| spec |	spec := 		(self project packageSpec)			name: aString;			file: aFile;			yourself.	self root packages merge: spec.! !!MetacelloVersionConstructor methodsFor: 'api callbacks' stamp: 'dkh 10/9/2009 11:14'!setProject: aString withBlock: aBlock	| spec projectSpec |	projectSpec := 		(self project projectSpec)			name: aString;			projectPackage: self project packageSpec;			yourself.	projectSpec projectPackage: self project packageSpec.	spec := 		(self project projectReferenceSpec)			name: aString;			projectReference: projectSpec;			yourself.	self root packages merge: spec.	self with: projectSpec during: aBlock! !!MetacelloVersionConstructor methodsFor: 'api callbacks' stamp: 'dkh 10/9/2009 11:14'!setProject: aString withString: versionString	| spec projectSpec |	projectSpec := 		(self project projectSpec)			name: aString;			versionString: versionString;			yourself.	spec := 		(self project projectReferenceSpec)			name: aString;			projectReference: projectSpec;			yourself.	self root packages merge: spec.! !!MetacelloVersionConstructor methodsFor: 'api callbacks' stamp: 'dkh 10/7/2009 00:11'!setTimestampWithBlock: aBlock	| spec |	(spec := self root getTimestamp) == nil		ifTrue: [ 			spec := self project valueHolderSpec.			self root setTimestamp: spec ].	self with: spec during: aBlock! !!MetacelloVersionConstructor methodsFor: 'api callbacks' stamp: 'dkh 10/7/2009 00:11'!setTimestampWithString: aString	self root timestamp: aString! !!MetacelloVersionConstructor methodsFor: 'initialization' stamp: 'DaleHenrichs 3/12/2010 00:12'!spawnPackageMethodIn: aConfig category: methodCategory named: newSelector sourceVersion: sourceVersionString targetVersion: targetVersionString blessing: blessing	self 		prepareForMethodUpdate: aConfig 		sourceVersion: sourceVersionString 		generating: [:selector :pragmaMap :ar :updatedPackageSpecsMap | | strm |			strm := WriteStream on: String new.			strm 				nextPutAll: newSelector asString, ' spec'; cr;				tab; nextPutAll: 						'<version: ', 						targetVersionString printString, 						' imports: #(', sourceVersionString printString, 						')>';cr.			(ar at: 2) do: [:attribute | | vs d |				vs := (ar at: 1) at: attribute.				(d := updatedPackageSpecsMap at: attribute ifAbsent: []) ~~ nil					ifTrue: [ 						vs packagesSpec list do: [:member | | x |							x := d at: member spec name ifAbsent: [].						 	member spec updateForSpawnMethod: x ]]					ifFalse: [						vs packagesSpec list do: [:member |							member spec updateForSpawnMethod: member spec copy ]].				strm cr; tab; nextPutAll: 'spec for: ', attribute printString, ' do: ['; cr.				attribute == #common					ifTrue: [						vs 							author: MetacelloPlatform current authorName;							timestamp: MetacelloPlatform current timestamp.						blessing ~~ nil							ifTrue: [ vs blessing: blessing ]].				vs configSpawnMethodOn: strm indent: 2.				strm nextPutAll: '].'].				(aConfig class						compile: strm contents					classified: methodCategory) == nil 						ifTrue: [ self error: 'Error compiling the method' ]].	^true! !!MetacelloVersionConstructor methodsFor: 'private' stamp: 'djr 12/29/2009 18:02'!specResolverBlock	^ [:versionSpec :pragma | (pragma argumentAt: 1)			= versionSpec versionString		ifTrue: [self configuration perform: pragma selector with: self.			self project attributes				do: [:attribute | | block | (block := self attributeMap									at: attribute									ifAbsent: []) ~~ nil						ifTrue: [self with: versionSpec during: block]]]]! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 1/4/2010 18:56'!supplyingAnswers: aCollection	self root answers: aCollection! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/7/2009 00:14'!timestamp: aBlockOrString	aBlockOrString setTimestampInMetacelloConfig: self! !!MetacelloVersionConstructor methodsFor: 'initialization' stamp: 'dkh 12/9/2009 10:27'!updatePackageMethodIn: aConfig sourceVersion: sourceVersionString	self 		prepareForMethodUpdate: aConfig 		sourceVersion: sourceVersionString 		generating: [:selector :pragmaMap :ar :updatedPackageSpecsMap | | strm pragma |			updatedPackageSpecsMap isEmpty ifTrue: [ ^false ].			strm := WriteStream on: String new.			strm 				nextPutAll: selector asString, ' spec'; cr;				tab; nextPutAll: '<version: ', sourceVersionString printString.			pragma := pragmaMap at: selector.			pragma numArgs = 2				ifTrue: [					strm nextPutAll: ' imports: #('.					(pragma argumentAt: 2) do: [:versionString |						strm nextPutAll: versionString printString; space ]].			strm nextPutAll: ')>';cr.			(ar at: 2) do: [:attribute | | vs d |				vs := (ar at: 1) at: attribute.				(d := updatedPackageSpecsMap at: attribute ifAbsent: []) ~~ nil					ifTrue: [ 						vs packagesSpec list do: [:member | 							member spec file ~~ nil								ifTrue: [ | x |									(((x := d at: member spec name ifAbsent: []) ~~ nil) and: [ x ~~ #uptodate ])						 				ifTrue: [ member spec file: x file ]]]].				strm cr; tab; nextPutAll: 'spec for: ', attribute printString, ' do: ['; cr.				attribute == #common					ifTrue: [ 						vs 							author: MetacelloPlatform current authorName;							timestamp: MetacelloPlatform current timestamp ].				vs configMethodOn: strm indent: 2.				strm nextPutAll: '].'].			(aConfig class						compile: strm contents					classified: (aConfig class whichCategoryIncludesSelector: pragma selector)) == nil						ifTrue: [ self error: 'Error compiling the method' ]].	^true! !!MetacelloVersionConstructor methodsFor: 'validation' stamp: 'dkh 12/30/2009 14:23'!validateDoItSelector: anObject	anObject == nil ifTrue: [ ^ self ].	anObject isSymbol ifFalse: [ self error: 'Invalid message selector for doit: ', anObject printString ].! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/3/2009 16:47'!value: anObject	self root value: anObject! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/7/2009 01:11'!version: anObject	self root versionString: anObject! !!MetacelloVersionConstructor methodsFor: 'private' stamp: 'djr 12/29/2009 18:02'!versionImportPragmasVerifiedDefinedIn: versionMap 	| pragmaDict |	pragmaDict := self extractVersionImportPragmas.	pragmaDict		keysAndValuesDo: [:versionString :pragmaColl | pragmaColl				do: [:pragma | (pragma argumentAt: 2)						do: [:importedVersion | versionMap								at: importedVersion								ifAbsent: [pragmaDict										at: importedVersion										ifAbsent: [^ self error: 'The imported version:' , importedVersion printString , ' referenced from the method: ' , pragma selector printString , ' in configuration ' , configuration class printString , ' has not been defined.']]]]].	^ pragmaDict! !!MetacelloVersionConstructor methodsFor: 'api' stamp: 'dkh 10/3/2009 17:03'!versionString: anObject	self root versionString: anObject! !!MetacelloVersionConstructor methodsFor: 'private' stamp: 'dkh 10/3/2009 16:31'!with: aMetacelloSpec during: aBlock 	| previousRoot |	previousRoot := self root.	self root: aMetacelloSpec.	aBlock		ensure: [self root: previousRoot]! !!MetacelloVisitedPackages methodsFor: 'initialize-release' stamp: 'dkh 10/21/2009 15:17'!initialize	groups := Set new.	packages := Set new.	projects := Set new.! !!MetacelloVisitedPackages methodsFor: 'visiting' stamp: 'dkh 10/22/2009 08:31'!pushProject: aBlock	| oldGroups oldPackages oldProjects |	oldGroups := groups.	oldPackages := packages.	oldProjects := projects.	groups := Set new.	packages := Set new.	^aBlock ensure: [		groups := oldGroups.		packages := oldPackages.		projects := oldProjects ]! !!MetacelloVisitedPackages methodsFor: 'visiting' stamp: 'dkh 10/21/2009 15:26'!visit: aSpec doing: aBlock	aSpec		projectDo: [:spec | 			(projects includes: spec name) ifTrue: [ ^self ].			projects add: spec name ] 		packageDo: [:spec | 			(packages includes: spec name) ifTrue: [ ^self ].			packages add: spec name ] 		groupDo: [:spec | 			(groups includes: spec name) ifTrue: [ ^self ].			groups add: spec name ].	aBlock value: aSpec! !!Object class methodsFor: '*metacello-mc' stamp: 'dkh 11/03/2009 11:05'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version.	 See MetacelloConfigTemplate."	^nil -> 'default'! !!Object class methodsFor: '*metacello-mc' stamp: 'dkh 11/3/2009 10:12'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'.	See MetacelloConfigTemplate for example"		"noop by default"! !!Object methodsFor: '*metacello-core' stamp: 'dkh 8/13/2009 10:37'!metacelloIntegerLessThanSelf: anInteger	^self error: 'Invalid Metacello verson component - should be String or Integer.'! !!Object methodsFor: '*metacello-core' stamp: 'dkh 8/13/2009 11:22'!metacelloStringLessThanSelf: anInteger	^self error: 'Invalid Metacello verson component - should be String or Integer.'! !!Object methodsFor: '*metacello-core' stamp: 'dkh 8/13/2009 10:20'!metacelloVersionComponentLessThan: aMetacelloVersonComponent	^self error: 'Invalid Metacello verson component - should be String or Integer.'! !!MCDirectoryRepository methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 3/5/2010 14:44'!asRepositorySpecFor: aMetacelloMCProject	^(aMetacelloMCProject repositorySpec)		description:  directory fullName;	 	type: 'directory';		yourself! !!GoferResolvedReference methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 1/12/2010 20:38'!asMetacelloCachingResolvedReference	^MetacelloCachingGoferResolvedReference name: self name repository: self repository! !!GoferResolvedReference methodsFor: '*metacello-mc' stamp: 'DaleHenrichs 4/16/2010 14:10'!compare: aLoadableReference using: aComparisonOperator	"Compare versions using <aComparisonOperator>. package names #= then compare based upon:		1. branch name, list versions without branch last		2. version number		3. author name	 Otherwise compare based on versionNumber (package names assumed to be 'comparable').		"			self packageName = aLoadableReference packageName		ifFalse: [ ^self versionNumber perform: aComparisonOperator with: aLoadableReference versionNumber ].	self branch = aLoadableReference branch ifFalse: [ 		^ (self branch isEmpty or: [ aLoadableReference branch isEmpty ])			ifTrue: [ aLoadableReference branch size perform: aComparisonOperator with: self branch size ]			ifFalse: [ self branch perform: aComparisonOperator with: aLoadableReference branch ] ].	self versionNumber = aLoadableReference versionNumber		ifFalse: [ ^ self versionNumber perform: aComparisonOperator with: aLoadableReference versionNumber ].	^ self author perform: aComparisonOperator with: aLoadableReference author! !!MetacelloCachingGoferResolvedReference methodsFor: 'accessing' stamp: 'DaleHenrichs 1/12/2010 20:40'!version	"Answer a Monticello version of the receiver."	cachedVersion == nil ifTrue: [ cachedVersion := super version ].	^cachedVersion! !!MetacelloCachingGoferResolvedReference methodsFor: 'querying' stamp: 'DaleHenrichs 01/15/2010 17:15'!workingCopy	"Answer a working copy or throw an error if not present."	| pName |	cachedVersion == nil ifTrue: [ ^super workingCopy ].	pName := cachedVersion package name.	^MCWorkingCopy allManagers		detect: [ :each | pName = each packageName ]		ifNone: [ self error: 'Working copy for ' , self name , ' not found' ]! !!MCFileBasedRepository methodsFor: '*metacello-mc' stamp: 'dkh 10/20/2009 11:25'!versionInfoFromVersionNamed: aString	| versions |	versions := self allVersionNames		select: [ :each | each beginsWith: aString ].	versions isEmpty ifTrue: [ ^ nil ].	versions := versions asSortedCollection: [ :a :b |		([ (a copyAfterLast: $.) asNumber ] on: Error do: [:ex | ex return: 0 ]) <= 			([ (b copyAfterLast: $.) asNumber ] on: Error do: [:ex | ex return: 0 ]) ].	^ self versionInfoFromFileNamed: versions last , '.mcz'! !!MCVersionLoader methodsFor: '*metacello-mc' stamp: 'dkh 9/9/2009 14:51'!versions	^versions! !!UndefinedObject methodsFor: '*metacello-core' stamp: 'dkh 11/3/2009 10:28'!asMetacelloVersionNumber	^MetacelloVersionNumber fromString: ''! !!UndefinedObject methodsFor: '*metacello-core' stamp: 'dkh 9/13/2009 07:46'!setAuthorInMetacelloVersion: aMetacelloVersionSpec	aMetacelloVersionSpec setAuthor: self! !!UndefinedObject methodsFor: '*metacello-core' stamp: 'dkh 6/5/2009 10:56'!setBlessingInMetacelloVersion: aMetacelloVersionSpec	aMetacelloVersionSpec setBlessing: self! !!UndefinedObject methodsFor: '*metacello-core' stamp: 'dkh 6/5/2009 11:52'!setDescriptionInMetacelloVersion: aMetacelloVersionSpec	aMetacelloVersionSpec setDescription: self! !!UndefinedObject methodsFor: '*metacello-core' stamp: 'dkh 12/11/2009 13:29'!setProject: aString withInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setProject: aString withString: self! !!UndefinedObject methodsFor: '*metacello-core' stamp: 'dkh 9/13/2009 07:47'!setTimestampInMetacelloVersion: aMetacelloVersionSpec	aMetacelloVersionSpec setTimestamp: self! !"Metacello-Core"!"Metacello-MC"!!ConfigurationOfGofer class methodsFor: 'private' stamp: 'DaleHenrichs 1/25/2010 13:14'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfGofer class methodsFor: 'private' stamp: 'DaleHenrichs 1/25/2010 13:14'!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.21"			self bootstrapPackage: 'Gofer-Core-lr.115' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfGofer class methodsFor: 'metacello tool support' stamp: 'DaleHenrichs 1/25/2010 13:14'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfGofer class methodsFor: 'metacello tool support' stamp: 'DaleHenrichs 1/25/2010 13:14'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfGofer class methodsFor: 'loading' stamp: 'DaleHenrichs 1/25/2010 13:14'!load	"self load"	^self project latestVersion load! !!ConfigurationOfGofer class methodsFor: 'metacello tool support' stamp: 'DaleHenrichs 1/25/2010 13:14'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfGofer class methodsFor: 'accessing' stamp: 'DaleHenrichs 1/25/2010 13:14'!project	^self new project! !!ConfigurationOfGofer methodsFor: 'baselines' stamp: 'DaleHenrichs 02/11/2010 10:21'!baseline100: spec 	<version: '1.0-baseline'>		spec for: #common do: [		spec blessing: #baseline.		spec 			package: 'Gofer-Core';			package: 'Gofer-Tests' with: [ spec requires: 'Gofer-Core' ].		spec			group: 'default' with: #('Core');			group: 'Core' with: #('Gofer-Core');			group: 'Tests' with: #('Gofer-Tests'). ].	spec for: #pharo do: [		spec 			repository: 'http://www.squeaksource.com/Pharo';			repository: 'http://seaside.gemstone.com/ss/metacello'. ].	spec for: #squeak do: [		spec repository: 'http://seaside.gemstone.com/ss/metacello'. ].	spec for: #gemstone do: [		spec repository: 'http://seaside.gemstone.com/ss/metacello'. ].! !!ConfigurationOfGofer methodsFor: 'baselines' stamp: 'DaleHenrichs 6/15/2010 10:47'!baseline1021: spec 	<version: '1.0.2.1-baseline'>		spec for: #common do: [		spec blessing: #baseline.		spec			repository: 'http://www.squeaksource.com/metacello';			repository: 'http://seaside.gemstone.com/ss/metacello'.		spec 			package: 'Gofer-Core';			package: 'Gofer-Tests' with: [ spec requires: 'Gofer-Core' ].		spec			group: 'default' with: #('Core');			group: 'Core' with: #('Gofer-Core');			group: 'Tests' with: #('Gofer-Tests'). ].! !!ConfigurationOfGofer methodsFor: 'accessing' stamp: 'DaleHenrichs 02/19/2010 12:41'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear.		"use atomic load on GemStone to resolve some loading issues"		Smalltalk at: #SystemVersion ifAbsent: [ project loadType: #atomic ]. 		project ]! !!ConfigurationOfGofer methodsFor: 'versions' stamp: 'DaleHenrichs 1/26/2010 09:58'!version100: spec 	<version: '1.0' imports: #('1.0-baseline') >		spec for: #common do: [		spec blessing: #release.		spec author: 'DaleHenrichs'.		spec timestamp: '1/25/2010 14:19'.		spec 			package: 'Gofer-Core' with: 'Gofer-Core-lr.116';			package: 'Gofer-Tests' with: 'Gofer-Tests-lr.115' ].	spec for: #pharo do: [].! !!ConfigurationOfGofer methodsFor: 'versions' stamp: 'DaleHenrichs 2/19/2010 11:48'!version101: spec	<version: '1.0.1' imports: #('1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '- use MethodReference>>methodSymbol for portability'.		spec author: 'DaleHenrichs'.		spec timestamp: '02/11/10 10:22:48'.		spec 			package: 'Gofer-Core' with: 'Gofer-Core-DaleHenrichs.117';			package: 'Gofer-Tests' with: 'Gofer-Tests-lr.115'.].! !!ConfigurationOfGofer methodsFor: 'versions' stamp: 'DaleHenrichs 6/15/2010 12:05'!version1021: spec	<version: '1.0.2.1' imports: #('1.0.2.1-baseline' )>	spec for: #common do: [		spec blessing: #release.		spec description: '- add secondary repository'.		spec author: 'DaleHenrichs'.		spec timestamp: '6/15/2010 10:47'.		spec 			package: 'Gofer-Core' with: 'Gofer-Core-dkh.121';			package: 'Gofer-Tests' with: 'Gofer-Tests-lr.116'.].! !!ConfigurationOfGofer methodsFor: 'versions' stamp: 'DaleHenrichs 3/23/2010 14:47'!version102: spec	<version: '1.0.2' imports: #('1.0-baseline' )>	spec for: #common do: [		spec blessing: #release.		spec description: '- pick up most recent gofer code  - updated class comments  - another comment fix  - added http://squeaksource.blueplane.jp/ as a well known repository  - repository priorities were used in the wrong order (thanks to Dale Henrichs)'.		spec author: 'DaleHenrichs'.		spec timestamp: '3/5/2010 09:32'.		spec 			package: 'Gofer-Core' with: 'Gofer-Core-dkh.121';			package: 'Gofer-Tests' with: 'Gofer-Tests-lr.116'.].! !!ConfigurationOfGofer methodsFor: 'versions' stamp: 'DaleHenrichs 5/14/2010 14:03'!version103: spec	<version: '1.0.3' imports: #('1.0-baseline' )>	spec for: #common do: [		spec blessing: #release.		spec description: '- pick up most recent gofer (5/14/2010 13:54)  - improved the method comments  - made parser more robust  - made tests run faster'.		spec author: 'DaleHenrichs'.		spec timestamp: '5/14/2010 14:03'.		spec 			package: 'Gofer-Core' with: 'Gofer-Core-StephaneDucasse.125';			package: 'Gofer-Tests' with: 'Gofer-Tests-MarcusDenker.124'.].	spec for: #gemstone do: [		spec blessing: #development.		spec description: 'not ported to GemStone, yet' ].! !"ConfigurationOfGofer"!!GoferRepositoryError commentStamp: 'lr 1/30/2010 14:39' prior: 0!A GoferRepositoryError is the error thrown when a repository cannot be accessed.!!Gofer commentStamp: 'lr 1/30/2010 14:42' prior: 33628709!: Gofer, a person who runs errands. Origin 1960s: from go for, i.e. go and fetch.: ''The New Oxford American Dictionary''!! SynopsisGofer is a small tool on top of Monticello that loads, updates, merges, diffs, reverts, commits, recompiles and unloads groups of Monticello packages. Contrary to existing tools Gofer makes sure that these operations are performed as clean as possible:- Gofer treats packages from one or more repository in one operation.- Gofer works with fixed versions or tries to find the "latest" version using a given package name.- Gofer automatically assigns repositories to all packages, so that the other tools are ready to be used on individual packages.- Gofer makes sure that there is only one repository instance registered for a single physical location.- Gofer works with Monticello dependencies and uniformly treats them like the primary package.- Gofer prefers to work with faster repositories if there is a choice.- Gofer cleans up after Monticello, no empty class categories and no empty method protocols are to be expected.- Gofer supports operations to sync remote and local repositories with each other.!! InstallationGofer is included with the latest Pharo and GemStone distributions. To update to the latest version you can use Gofer itself:== Gofer upgradeIn case you are missing Gofer in your image, grab it from *http://source.lukas-renggli.ch/gofer.html*.!! DescriptionGofer is very simple by design, the basic useage scenario is always the same and consists of three steps:# You specify one or more Monticello repository URLs. You can do this using the methods ==url:==, ==url:username:password:== (HTTP, FTP), ==directory:==, or ==repository:== if you need full control. You might also use the convenience methods like ==squeaksource:==, ==wiresong:==, or ==gemsource:== for well known repositories. Additionally the following settings are available:#- Gofer implicitly declares the local package cache as a repository. To disable the local package cache use the method ==disablePackageCache==, to re-enable use ==enablePackageCache==.#- Gofer throws an error if a repository is not reachable. To silently ignore repository erros use the message ==disableRepositoryErrors==, to re-enable use ==enableRepositoryErrors==.# You specify one or more Monticello packages you want to work with, by adding them to the Gofer instance. Use ==version:== to add a specific version, or use ==package:== to add the "latest" version in the given repository. Furthermore there is ==package:constraint:== that allows you to further constraint the version to be loaded in a block passed in as the second argument.# You specify one or more actions to be performed on the specified packages:| ==load==	| Load the specified packages.| ==update==	| Update the specified packages.| ==merge==	| Merge the specified packages into their working copies.| ==localChanges==	| Answer the changes between the base version and the working copy.| ==browseLocalChanges==	| Browse the changes between the base version and the working copy.| ==remoteChanges==	| Answer the changes between the working copy and the remote changes.| ==browseRemoteChanges==	| Browse the changes between the working copy and the remote changes.| ==cleanup==	| Cleans the specified packages.| ==commit==	| Commit the modified specified packages.| ==commit:==	| Commit the modified specified packages with the given commit message.| ==revert==	| Revert the specified packages to the currently loaded version.| ==recompile==	| Recompile the specified packages.| ==reinitialize==	| Call the class side initializers on the specified packages.| ==unload==	| Unload the specified packages.| ==fetch==     | Download versions from remote repositories into the local cache.| ==push==      | Upload local versions from local cache into remote repositories.!! ExampleTo use Gofer to update to exact versions of the Kom Server, the 'latest' code of Seaside 2.8 and the 'latest' code of the Scriptaculous package that is committed by the author with the initials 'lr' one could evaluate:== Gofer new==     squeaksource: 'KomHttpServer';==     version: 'DynamicBindings-gc.7';==     version: 'KomServices-gc.19';==     version: 'KomHttpServer-gc.32';==     update.== Gofer new==     squeaksource: 'Seaside';==     package: 'Seaside2.8a';==     package: 'Scriptaculous' constraint: [ :version | version author = 'lr' ];==     load!!GoferReference commentStamp: 'lr 1/30/2010 14:38' prior: 0!A GoferReference is an abstract superclass for various kinds of references to Monticello packages and versions.!!GoferConstraintReference commentStamp: 'lr 1/30/2010 14:37' prior: 33632981!A GoferPackageReference refers to the latest version of a Monticello package satisfying an additional constraint.!!GoferResolvedReference commentStamp: 'lr 1/30/2010 14:38' prior: 33633319!A GoferVersionReference refers to a specific version of a Monticello package in a particular repository. This class is the only one that can actually load the version, because it is the only one knowing where to find it.!!GoferReinitialize methodsFor: 'running' stamp: 'DaleHenrichs 3/5/2010 09:25' prior: 33656524!execute: aWorkingCopy	aWorkingCopy packageInfo methods do: [ :each |		(each classIsMeta and: [ each methodSymbol = #initialize ])			ifTrue: [ each actualClass theNonMetaClass initialize ] ]! !!GoferUnload methodsFor: 'unloading' stamp: 'DaleHenrichs 3/5/2010 09:25' prior: 33657333!unloadClasses: aWorkingCopy	aWorkingCopy packageInfo methods do: [ :each |		(each classIsMeta and: [ each methodSymbol = #unload ])			ifTrue: [ each actualClass theNonMetaClass unload ] ]! !!Gofer methodsFor: 'repositories-places' stamp: 'lr 2/7/2010 15:11'!blueplane: aString	self url: 'http://squeaksource.blueplane.jp/' , aString! !!GoferReference methodsFor: 'private' stamp: 'lr 1/21/2010 00:16' prior: 33662459!matches: aResolvedReference	"Answer true if the receiver matches aResolvedReference."	self subclassResponsibility! !!GoferConstraintReference methodsFor: 'private' stamp: 'lr 1/21/2010 00:17' prior: 33661356!matches: aResolvedReference	^ (super matches: aResolvedReference) and: [ constraintBlock value: aResolvedReference ]! !!GoferPackageReference methodsFor: 'private' stamp: 'lr 1/21/2010 00:16' prior: 33661552!matches: aResolvedReference	^ self packageName = aResolvedReference packageName! !!GoferResolvedReference methodsFor: 'comparing' stamp: 'lr 3/5/2010 07:19' prior: 33664197!<= aResolvedReference	"Sort versions according to:		1. package name		2. branch name, list versions without branch last		3. version number		4. author name		5. repository priority"		self packageName = aResolvedReference packageName		ifFalse: [ ^ self packageName <= aResolvedReference packageName ].	self branch = aResolvedReference branch ifFalse: [ 		^ (self branch isEmpty or: [ aResolvedReference branch isEmpty ])			ifTrue: [ self branch size > aResolvedReference branch size ]			ifFalse: [ self branch <= aResolvedReference branch ] ].	self versionNumber = aResolvedReference versionNumber		ifFalse: [ ^ self versionNumber <= aResolvedReference versionNumber ].	self author = aResolvedReference author		ifFalse: [ ^ self author <= aResolvedReference author ].	self repository goferPriority = aResolvedReference repository goferPriority		ifFalse: [ ^ self repository goferPriority <= aResolvedReference repository goferPriority ].	^ true! !!GoferVersionReference methodsFor: 'private' stamp: 'lr 1/21/2010 00:17' prior: 33666197!matches: aResolvedReference	^ self name = aResolvedReference name! !"Gofer-Core"!!BlockContext methodsFor: '*metacello-platform' stamp: 'dkh 2/5/2010 16:39'!setAuthorInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setAuthorWithBlock: self! !!BlockContext methodsFor: '*metacello-platform' stamp: 'dkh 2/5/2010 16:39'!setBlessingInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setBlessingWithBlock: self! !!BlockContext methodsFor: '*metacello-platform' stamp: 'dkh 2/5/2010 16:39'!setDescriptionInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setDescriptionWithBlock: self! !!BlockContext methodsFor: '*metacello-platform' stamp: 'dkh 2/5/2010 16:39'!setPackage: aString withInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setPackage: aString withBlock: self! !!BlockContext methodsFor: '*metacello-platform' stamp: 'dkh 2/5/2010 16:39'!setProject: aString withInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setProject: aString withBlock: self! !!BlockContext methodsFor: '*metacello-platform' stamp: 'dkh 2/5/2010 16:40'!setTimestampInMetacelloConfig: aMetacelloConfig	aMetacelloConfig setTimestampWithBlock: self! !!BlockContext methodsFor: '*metacello-platform' stamp: 'dkh 2/5/2010 16:40'!valueSupplyingMetacelloAnswers: aListOfPairs	"evaluate the block using a list of questions / answers that might be called upon to	automatically respond to Object>>confirm: or FillInTheBlank requests"	^ [self value] 		on: ProvideAnswerNotification		do: 			[:notify | | answer caption |						caption := notify messageText withSeparatorsCompacted. "to remove new lines"			answer := aListOfPairs				detect: 					[:each | caption = each first or:						[(caption includesSubstring: each first caseSensitive: false) or:						[(each first match: caption) or:						[(String includesSelector: #matchesRegex:) and: 						[ [ caption matchesRegex: each first ] on: Error do: [:ignored | false ]]]]]]					ifNone: [nil].			answer				ifNotNil: [notify resume: answer second]				ifNil: 					[ | outerAnswer |					outerAnswer := ProvideAnswerNotification signal: notify messageText.					outerAnswer 						ifNil: [notify resume] 						ifNotNil: [notify resume: outerAnswer]]]! !!MetacelloSqueakPlatform class methodsFor: 'initialize-release' stamp: 'dkh 10/12/2009 13:30'!initialize	"implmented to force initialize on load"	super initialize! !!MetacelloSqueakPlatform methodsFor: 'utilities' stamp: 'dkh 10/12/2009 13:26'!authorName	^Utilities authorInitials! !!MetacelloSqueakPlatform methodsFor: 'repository creation' stamp: 'dkh 12/29/2009 16:12'!createRepository: aRepositorySpec 	| type |	type := aRepositorySpec type.	type = 'ftp'		ifTrue: [| description headerSize index host directory |			description := aRepositorySpec description.			headerSize := 'ftp://' size.			index := description indexOf: $/ startingAt: headerSize + 1.			host := description copyFrom: headerSize + 1 to: index - 1.			directory := description copyFrom: index + 1 to: description size.			^ MCFtpRepository				host: host				directory: directory				user: aRepositorySpec username				password: aRepositorySpec password].	^ super createRepository: aRepositorySpec! !!MetacelloSqueakPlatform methodsFor: 'attributes' stamp: 'dkh 7/24/2009 15:40'!defaultPlatformAttributes	^ #(#squeakCommon #squeak )! !!MetacelloSqueakPlatform methodsFor: 'repository creation' stamp: 'dkh 12/29/2009 16:11'!extractTypeFromDescription: description 	(description beginsWith: 'ftp://')		ifTrue: [^ 'ftp'].	^ super extractTypeFromDescription: description! !!MetacelloSqueakPlatform methodsFor: 'utilities' stamp: 'dkh 10/12/2009 13:27'!timestamp	^Date today mmddyyyy, ' ',			((String streamContents: [:s | Time now print24: true on: s]) copyFrom: 1 to: 5)! !!MetacelloMCProjectSpec methodsFor: 'accessing' stamp: 'DaleHenrichs 6/24/2010 13:45'!loadPackageList	| vrsn pkgs |	(vrsn := self version) == nil ifTrue: [ ^#() ].	pkgs := OrderedCollection new.	(self loadListForVersion: vrsn) do: [:nm |		pkgs addAll: ((vrsn packagesForSpecNamed: nm ) collect: [:each | each name ])].	^pkgs! !!MetacelloMCProjectSpec methodsFor: 'loading' stamp: 'DaleHenrichs 6/24/2010 17:23' prior: 33926377!loadVersion: aVersionOrNil	"Load the correct version of the project"	| vrsn mcLoader loadedPackageNames loadedProjectNames list projectMap |	vrsn := aVersionOrNil .	vrsn == nil		ifTrue: [ 			(vrsn := self version) == nil				ifTrue: [					 ^(MetacelloProjectSpecLoadError projectSpec: self) 						signal: 'No version found for ', 									self versionString printString, 									' of ', 									self className asString ]].	mcLoader := self loader copy.	mcLoader operator: self operator.	vrsn loader: mcLoader.	loadedPackageNames := (vrsn packages select: [:pkg | pkg isPackageLoaded: mcLoader ]) 		collect: [:pkg | pkg name ].	projectMap := Dictionary new.	vrsn projects do: [:prj | 		prj className ~~ nil			ifTrue: [ | coll loaded |				coll := projectMap at: prj className ifAbsent: [					coll := OrderedCollection new.					projectMap at: prj className put: coll.					coll].				(loaded := prj loadedPackageNames: mcLoader) isEmpty 					ifFalse: [  coll add: prj -> (loaded -> prj loadPackageList) ]]].	loadedProjectNames := OrderedCollection new.	projectMap keysAndValuesDo: [:prjClass :coll |		coll size <= 1			ifTrue: [ coll do: [:assoc | loadedProjectNames add: assoc key name ]]			ifFalse: [ 				"multiple project references against the same configuration ... only count project as loaded				 if there is an exact match for loaded projects...				 See http://code.google.com/p/metacello/issues/detail?id=86"				coll do: [:assoc | | loaded packageList |					loaded := assoc value key. "loaded packages from project"					packageList := assoc value value. "loadlist for project"					(packageList difference: loaded) isEmpty						ifTrue: [ loadedProjectNames add: assoc key name ]]]].	list := loadedPackageNames, loadedProjectNames, (self loadListForVersion: vrsn).	mcLoader preLoad: self.	vrsn fetchRequiredFromArray: list.	mcLoader postLoad: self.! !!MetacelloMCProjectSpec methodsFor: 'accessing' stamp: 'DaleHenrichs 6/24/2010 13:46'!loadedPackageNames: aLoader	| vrsn pkgs |	(vrsn := self version) == nil ifTrue: [ ^#() ].	pkgs := OrderedCollection new.	(self loadListForVersion: vrsn) do: [:nm |		(vrsn packagesForSpecNamed: nm ) do: [:pkg |			(pkg isPackageLoaded: aLoader) ifTrue: [ pkgs add: pkg name ]]].	^pkgs! !"Metacello-MC"!"Metacello-Platform"!!ConfigurationOfKomHttpServer class methodsFor: 'private' stamp: 'dkh 12/8/2009 16:17'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfKomHttpServer class methodsFor: 'private' stamp: 'DaleHenrichs 1/6/2010 16:47'!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.15"			self bootstrapPackage: 'Gofer-lr.83' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfKomHttpServer class methodsFor: 'metacello tool support' stamp: 'dkh 12/8/2009 16:17'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfKomHttpServer class methodsFor: 'metacello tool support' stamp: 'dkh 12/8/2009 16:17'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfKomHttpServer class methodsFor: 'metacello tool support' stamp: 'dkh 12/8/2009 16:17'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfKomHttpServer class methodsFor: 'accessing' stamp: 'dkh 12/8/2009 16:17'!project	^self new project! !!ConfigurationOfKomHttpServer methodsFor: 'baselines' stamp: 'DaleHenrichs 12/19/2009 09:48'!baseline100: spec 	<version: '1.0-baseline'>	spec for: #common do: [		spec blessing: #baseline.		spec description: 'Initial baseline for KomHttpServer'.		spec repository: 'http://www.squeaksource.com/KomHttpServer'.].		spec for: #squeakCommon do: [		spec			package: 'DynamicBindings'  				with: [ spec repository: 'http://www.squeaksource.com/KomHttpServer' ];			package: 'KomServices'  				with: [ spec repository: 'http://www.squeaksource.com/KomHttpServer' ];			package: 'KomHttpServer'  				with: [ spec repository: 'http://www.squeaksource.com/KomHttpServer' ];			yourself.].! !!ConfigurationOfKomHttpServer methodsFor: 'accessing' stamp: 'dkh 12/8/2009 16:17'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear ]! !!ConfigurationOfKomHttpServer methodsFor: 'versions' stamp: 'dkh 12/8/2009 16:24'!version100: spec	<version: '1.0' imports: #('1.0-baseline' )>	spec for: #common do: [		spec blessing: #release.		spec description: 'initial release'.		spec author: 'dkh'.		spec timestamp: '12/8/2009 16:23'.].	spec for: #squeakCommon do: [		spec 			package: 'DynamicBindings' with: 'DynamicBindings-lr.11';			package: 'KomServices' with: 'KomServices-gc.19';			package: 'KomHttpServer' with: 'KomHttpServer-lr.51';			yourself.].! !!ConfigurationOfKomHttpServer methodsFor: 'versions' stamp: 'DaleHenrichs 2/7/2010 08:52'!version101: spec	<version: '1.0.1' imports: #('1.0-baseline' )>	spec for: #common do: [		spec blessing: #release.		spec description: '- DynamicBindings (ul)  - don''t send #findElementOrNil:, because it''s not in squeak anymore  - a bit faster DynamicBindings >> #root'.		spec author: 'DaleHenrichs'.		spec timestamp: '1/31/2010 10:52'.].	spec for: #squeakCommon do: [		spec 			package: 'DynamicBindings' with: 'DynamicBindings-ul.12';			package: 'KomServices' with: 'KomServices-gc.19';			package: 'KomHttpServer' with: 'KomHttpServer-lr.51';			yourself.].! !!ConfigurationOfKomHttpServer methodsFor: 'versions' stamp: 'DaleHenrichs 5/27/2010 14:08'!version102: spec	<version: '1.0.2' imports: #('1.0-baseline' )>	spec for: #common do: [		spec blessing: #release.		spec description: '- DynamicBindings:  - replace some ''== nil'' with #isNil  - removed unused variable  - remove class DynamicBindingsInfo- KomHttpServer  - two minor performance improvements - KomServices  - replace some ''== nil'' with #isNil'.		spec author: 'DaleHenrichs'.		spec timestamp: '5/27/2010 12:45'.].	spec for: #squeakCommon do: [		spec 			package: 'DynamicBindings' with: 'DynamicBindings-lr.13';			package: 'KomServices' with: 'KomServices-lr.20';			package: 'KomHttpServer' with: 'KomHttpServer-pmm.53'.].! !!ConfigurationOfKomHttpServer methodsFor: 'versions' stamp: 'pmm 7/18/2010 13:44'!version103: spec	<version: '1.0.3' imports: #('1.0-baseline' )>	spec for: #common do: [		spec blessing: #release.		spec description: 'Add HttpRequest>>rawPutContents to provide access to the body of a PUT request.Add HttpRequest>>rawRequestContents to provide an HTTP-method-agnostic way to access the request contents (POST and PUT only).Roll the version to 7.1.3'.		spec author: 'pm'.		spec timestamp: '7/18/2010 13:45'.].	spec for: #squeakCommon do: [		spec 			package: 'DynamicBindings' with: 'DynamicBindings-lr.13';			package: 'KomServices' with: 'KomServices-lr.20';			package: 'KomHttpServer' with: 'GiovanniCorriga.54'.].! !"ConfigurationOfKomHttpServer"!!DynamicBindings commentStamp: 'svp 5/7/2003 10:36' prior: 0!DynamicBindings for Squeakby Stephen Pair <spair@pairhome.net>I am a dictionary with an added property that I can inherit associations from other instances (via the parent inst var).  I am intended to be used as a set of variable bindings that can be local to a process or shared among a group of processes.  I am an abstract class and should never be instantiated.  Here's how DynamicBindings work:You may create a hierarchy of DynamicBindings and directly manipulate the keys and values of those instances (just as you would any dictionary).  There is a root DynamicBindings that you may use to create new children if you like (but you can also create entirely separate hierarchies).  You can access this root with "DynamicBindings root".  To force a process to use one of your sets of DynamicBindings, you write code as follows (note, I only use 'PATH' to highlight the similarity with normal OS environment variables):	myBindings _ DynamicBindings root newChild.	myBindings at: #PATH put: '/bin:/usr/bin'.	myBindings bindDuring: 		[Bindings at: #PATH.  				"-> '/bin:/usr/bin'"		Bindings at: #PATH put: ('/usr/local/bin:', (Bindings at: #PATH)).		Bindings at: #PATH].  				"-> '/usr/local/bin:/bin:/usr/bin'"For convenience, two methods have been added to Object that enable more direct access to bindings.  The following exampel is equivalent to the first:	myBindings _ DynamicBindings root newChild.	myBindings at: #PATH put: '/bin:/usr/bin'.	myBindings bindDuring: 		[#PATH binding.  				"-> '/bin:/usr/bin'"		#PATH binding: ('/usr/local/bin:', (#PATH binding)).		#PATH binding].  				"-> '/usr/local/bin:/bin:/usr/bin'"The first line creates a new set of bindings that is a child of the root bindings.  Any variables set in the root bindings are also visible in this new child environment.The second line sets the dynamic variable "PATH".The third line uses the evaluates the argument block in the context of our new set of bindings.The fourth line gets the value for the variable "PATH" (which we just set).The fifth line in the above example modifies the environment variable "PATH", but only for the duration that the enclosing block is active.Here is another example:	#PATH binding: '/bin'.	Bindings clamp:		[#PATH binding: '/usr/bin'.		#PATH binding]. 						"-> '/usr/bin'"	#PATH binding.								"-> '/bin'"This example shows the use of the #clamp: method to isolate a our dynamic bindings only for the duration of a block.  After the block finishes execution, the original set of bindings is restored.Scoping semantics:A dynamic variables' scope is defined at runtime by an enclosing activation context.  To locate the active lexicon of dynamic variables, the system follows the activation stack until a context is encountered that defines the active DynamicBindings (this lookup is implemented using the exception handling system).  Any changes to the active DynamicBindings are visible in all activation contexts where that set of DynamicBindings are being used (which may include contexts in more than one activation stack).A bit about how it's implemented:The bindings for a given method activation context are located using the exception handling mechanism (see BindingsLocator).  If a given stack does not have a handler that answers a set of bindings, then dummy contexts will be added to the top of the stack that will answer the global root set of bindings.Unlike other implementations, DynamicBindings do not use the activation stack to define the hierarchy of bindings.  Instances of DynamicBindings have their own parent instance variable and will locate enclosing variable scopes by following the chain of parents (*not* by looking for enclosing handlers of BindingsLocator).  Using this design, we are able to accomodate a broader range of usage scenarios.If you need to isolate the bindings of a given context stack such that future changes in the bindings are not visible to users of the current set of dynamic bindings (ie. if you use continuations), you can send the message #isolate to the BindingsAccessor (ie. use "Bindings isolate").!!DynamicBindingTests commentStamp: 'svp 3/5/2003 10:58' prior: 0!I test the DynamicBindings subsystem.!!BindingsAccessor commentStamp: 'svp 3/5/2003 10:55' prior: 0!I enable access to the current dynamic bindings.  My class initialization adds my default instance to the system dictionary as #Bindings.  This enables access to the active runtime environment using syntax like the following:   Bindings at: #AProcessLocalVariable put: aValue   Bindings at: #AProcessLocalVariableI also allow for the creation of new DynamicBindings as follows:   Bindings new.   "Creates a new empty DynamicBindings instance"   Bindings clamp: [].  "Creates new bindings that inherit from the current bindings"!!BindingsLocator commentStamp: 'svp 3/5/2003 10:58' prior: 0!I am used to find the runtime environment of a given ContextPart.  If no suitable handler is found, then I will install dummy contexts at the top of the stack that include a handler that returns the default bindings for the system (ie. "DynamicBindings root").!!DynamicBindings class methodsFor: 'class initialization' stamp: 'gk 4/27/2006 10:34'!clear	"self clear"	Root := DynamicBindings new! !!DynamicBindings class methodsFor: 'accessing' stamp: 'svp 2/4/2003 16:04'!example	" DynamicBindings example "	| sem1 sem2 proc1 proc2 |	sem1 := Semaphore new.	sem2 := Semaphore new.	proc1 := [		Bindings clamp: [			#Test binding: 'Test #1'.			"Wait here to demonstrate that we indeed have two			different sets of bindings with two different 			and concurrent values for #Test."			sem1 wait.			Transcript show: ('Proc1: ', #Test binding); cr.		].	] newProcess.	proc2 := [		Bindings clamp: [			#Test binding: 'Test #2'.			"Wait here to demonstrate that we indeed have two			different sets of bindings with two different 			and concurrent values for #Test."			sem2 wait.			Transcript show: ('Proc2: ', #Test binding); cr.		]	] newProcess.	proc1 resume.	proc2 resume.	sem1 signal.	sem2 signal.! !!DynamicBindings class methodsFor: 'class initialization' stamp: 'lr 12/4/2009 15:25'!initialize	"self initialize"	Root 		ifNil: [Root := DynamicBindings new]		ifNotNil: [Root := DynamicBindings newFrom: Root].! !!DynamicBindings class methodsFor: 'instance creation' stamp: 'lr 12/4/2009 15:25'!newFrom: anotherRuntimeEnvironment	| answer |	answer := self new.	anotherRuntimeEnvironment associationsDo: [ :assn | answer add: assn].	^answer! !!DynamicBindings class methodsFor: 'accessing' stamp: 'svp 12/18/2002 14:48'!root	^Root! !!DynamicBindings methodsFor: 'accessing' stamp: 'lr 4/15/2010 08:55'!at: key ifAbsent: aBlock	| assoc tmp |	tmp := self.	[ (assoc := tmp associationAt: key ifAbsent: nil) isNil ] whileTrue: [ (tmp := tmp parent) ifNil: [ ^ aBlock value ] ].	^ assoc value! !!DynamicBindings methodsFor: 'accessing' stamp: 'svp 8/8/2002 09:21'!atThisLevel: key ifAbsent: aBlock	^super at: key ifAbsent: aBlock! !!DynamicBindings methodsFor: 'accessing' stamp: 'svp 2/6/2003 22:41'!bind: anObject to: anotherObject	^self at: anObject put: anotherObject! !!DynamicBindings methodsFor: 'scheduling' stamp: 'svp 2/4/2003 16:43'!bindDuring: aBlock	^aBlock valueWithBindings: self! !!DynamicBindings methodsFor: 'accessing' stamp: 'svp 2/4/2003 16:53'!bindingFor: anObject	^self at: anObject ifAbsent: [self error: 'binding not found']! !!DynamicBindings methodsFor: 'accessing' stamp: 'svp 3/6/2003 14:35'!bindingFor: anObject ifNotBound: aBlock	^self at: anObject ifAbsent: aBlock! !!DynamicBindings methodsFor: 'scheduling' stamp: 'svp 2/4/2003 16:23'!fork: aBlock	^aBlock forkWithBindings: self! !!DynamicBindings methodsFor: 'scheduling' stamp: 'svp 2/4/2003 16:24'!forkClamped: aBlock	^aBlock forkWithClampedBindings: self! !!DynamicBindings methodsFor: 'scheduling' stamp: 'svp 2/4/2003 16:23'!forkIsolated: aBlock	^aBlock forkWithIsolatedBindings: self! !!DynamicBindings methodsFor: 'scheduling' stamp: 'svp 2/4/2003 16:57'!isBound: anObject	^self includesKey: anObject! !!DynamicBindings methodsFor: 'accessing' stamp: 'lr 4/15/2010 08:55'!level	| tmp level |	tmp := self.	level := 0.	[ tmp isNil ]		whileFalse:			[ tmp := tmp parent.			level := level + 1 ].	^ level! !!DynamicBindings methodsFor: 'isolation' stamp: 'svp 2/4/2003 13:36'!newChild	^self species new		parent: self;		yourself! !!DynamicBindings methodsFor: 'accessing' stamp: 'svp 8/8/2002 09:19'!parent	^parent! !!DynamicBindings methodsFor: 'accessing' stamp: 'svp 5/6/2003 10:43'!parent: aDynamicBindings	parent := aDynamicBindings! !!DynamicBindings methodsFor: 'accessing' stamp: 'lr 4/15/2010 08:55'!root	| tmp tmpParent |	tmp := self.	[ (tmpParent := tmp parent) isNil ] whileFalse: [ tmp := tmpParent ].	^ tmp! !!BlockContext methodsFor: '*DynamicBindings' stamp: 'svp 3/6/2003 16:10'!forkWithBindings	"Create and schedule a new process that has the same 	dynamic bindings as the active process"	^self newProcessWithBindings resume! !!BlockContext methodsFor: '*DynamicBindings' stamp: 'svp 3/6/2003 16:11'!forkWithBindings: dynamicBindings	"Create and schedule a new process with the given dynamic bindings"	^(self newProcessWithBindings: dynamicBindings) resume! !!BlockContext methodsFor: '*DynamicBindings' stamp: 'svp 2/4/2003 15:13'!forkWithClampedBindings	^self newProcessWithClampedBindings resume! !!BlockContext methodsFor: '*DynamicBindings' stamp: 'svp 2/4/2003 15:13'!forkWithClampedBindings: dynamicBindings	^(self newProcessWithClampedBindings: dynamicBindings) resume! !!BlockContext methodsFor: '*DynamicBindings' stamp: 'svp 2/4/2003 11:52'!forkWithIsolatedBindings	^self newProcessWithIsolatedBindings resume! !!BlockContext methodsFor: '*DynamicBindings' stamp: 'svp 2/4/2003 11:51'!forkWithIsolatedBindings: dynamicBindings	^(self newProcessWithIsolatedBindings: dynamicBindings) resume! !!BlockContext methodsFor: '*DynamicBindings' stamp: 'svp 3/6/2003 16:10'!newProcessWithBindings	"Create a new process that has the same dynamic bindings	as the active process"	^self newProcessWithBindings: Bindings get! !!BlockContext methodsFor: '*DynamicBindings' stamp: 'svp 3/6/2003 16:11'!newProcessWithBindings: dynamicBindings	"Create a new process with the given dynamic bindings"	^[self valueWithBindings: dynamicBindings] newProcess! !!BlockContext methodsFor: '*DynamicBindings' stamp: 'svp 3/6/2003 16:18'!newProcessWithClampedBindings	"Create a new process with a nested set of the dynamicBindings of 	the active process"	^self newProcessWithClampedBindings: Bindings get! !!BlockContext methodsFor: '*DynamicBindings' stamp: 'svp 3/6/2003 16:16'!newProcessWithClampedBindings: dynamicBindings	"Create a new process with a nested set of the given dynamicBindings"	^[Bindings clamp: self] newProcessWithBindings: dynamicBindings! !!BlockContext methodsFor: '*DynamicBindings' stamp: 'svp 3/6/2003 16:15'!newProcessWithIsolatedBindings	"Create a new process with a copy of the dynamicBindings of the 	acitve process"	^self newProcessWithIsolatedBindings: Bindings get! !!BlockContext methodsFor: '*DynamicBindings' stamp: 'svp 3/6/2003 16:14'!newProcessWithIsolatedBindings: dynamicBindings	"Create a new process with a copy of the given dynamicBindings"	^[Bindings isolate: self] newProcessWithBindings: dynamicBindings! !!BlockContext methodsFor: '*DynamicBindings' stamp: 'svp 5/7/2003 02:37'!valueWithBindings: dynamicBindings	"Evaluate the receiver in the context of the given dynamicBindings"	^self valueWithBindingsContext: thisContext! !!BlockContext methodsFor: '*DynamicBindings' stamp: 'svp 5/7/2003 02:37'!valueWithBindingsContext: aContext	"Private. Evaluate the receiver in the context of the 	given dynamicBindings context"	^self		on: BindingsLocator		do: [ :n | n resume: aContext]! !!DynamicBindingTests methodsFor: 'as yet unclassified' stamp: 'svp 5/6/2003 11:27'!testAccessor1	| val test1 |	Bindings clamp:		[#test binding: (val := 'Test Value').		test1 := (#test binding == val).		#test removeBinding].	self assert: test1.! !!DynamicBindingTests methodsFor: 'as yet unclassified' stamp: 'lr 12/4/2009 15:25'!testAccessor2	| val test1 test2 |	Bindings clamp:		[#test binding: (val := 'Test Value').		test1 := (#test binding == val).		#test removeBinding.		test2 := ((Bindings at: #test ifAbsent: [ 'absent' ]) = 'absent')].	self assert: test1.	self assert: test2.! !!DynamicBindingTests methodsFor: 'as yet unclassified' stamp: 'svp 5/6/2003 11:28'!testFork	"In this test, we examine the isolation behavior when forking a process.  We are	checking to ensure that changes made to the environment in the forked process do	not impact the calling process.  We also check to make sure that the forked process	gets the current environment from the calling process at the time of the fork."	| sem test1 test2 test3 |	Bindings clamp:		[#test binding: 'Testing'.		sem := Semaphore new.			[#test2 binding: 'Testing2'.			test1 := (#test binding = 'Testing').			test2 := (#test2 binding = 'Testing2').			#test binding: 'Testing3'.			test3 := #test binding = 'Testing3'.			sem signal] forkWithIsolatedBindings.		sem wait.		self assert: test1.		self assert: test2.		self assert: test3.		self assert: (#test binding = 'Testing').		self assert: (#test2 hasBinding not)].	self assert: (#test hasBinding not).	self assert: (#test2 hasBinding not).! !!DynamicBindingTests methodsFor: 'as yet unclassified' stamp: 'svp 5/6/2003 11:29'!testSharedRuntimeEnvironment	"In this test, we examine the isolation behavior when forking processes and when those	processes share a runtime environment.  We are checking to ensure that both forked	processes see the changes made to the shared runtime environment even when their	own environments are isoldated from each other by a modification."	| test1 test2 test3 bindings sem1 sem2 isolateSem1 isolateSem2 modSem1 modSem2 test4 |	bindings := DynamicBindings root newChild.	bindings at: #sharedVar put: 'Shared Value'.	sem1 := Semaphore new.	sem2 := Semaphore new.	isolateSem1 := Semaphore new.	isolateSem2 := Semaphore new.	modSem1 := Semaphore new.	modSem2 := Semaphore new.	bindings forkClamped: 		[test1 := #sharedVar binding = 'Shared Value'.		#forceIsolation binding: 'testing'.		isolateSem1 signal.		modSem1 wait.		test2 := #sharedVar binding = 'Shared Value 2'.		sem1 signal].	bindings forkClamped:		[test3 := #sharedVar binding = 'Shared Value'.		#forceIsolation binding: 'testing'.		isolateSem2 signal.		modSem2 wait.		test4 := #sharedVar binding = 'Shared Value 2'.		sem2 signal].	isolateSem1 wait.	isolateSem2 wait.	bindings at: #sharedVar put: 'Shared Value 2'.	modSem1 signal.	modSem2 signal.	sem1 wait.	sem2 wait.	self assert: test1.	self assert: test2.	self assert: test3.	self assert: test4.! !!BlockClosure methodsFor: '*DynamicBindings' stamp: 'damiencassou 4/5/2009 18:49'!bindings	"Answers the Dynamic Bindings that are currently visible in the receiver's context.  This is kind of a hack...we could do a better job of this if we used the exception handling primitives directly, however, this implementation has the benefit of being slightly more portable."		| oldSender answer |	oldSender := thisContext swapSender: self.	answer := BindingsLocator signal.	thisContext swapSender: oldSender.	^answer 	! !!BlockClosure methodsFor: '*DynamicBindings' stamp: 'damiencassou 4/5/2009 18:38'!forkWithBindings	"Create and schedule a new process that has the same 	dynamic bindings as the active process"	^self newProcessWithBindings resume! !!BlockClosure methodsFor: '*DynamicBindings' stamp: 'damiencassou 4/5/2009 18:38'!forkWithBindings: dynamicBindings	"Create and schedule a new process with the given dynamic bindings"	^(self newProcessWithBindings: dynamicBindings) resume! !!BlockClosure methodsFor: '*DynamicBindings' stamp: 'damiencassou 4/5/2009 18:38'!forkWithClampedBindings	^self newProcessWithClampedBindings resume! !!BlockClosure methodsFor: '*DynamicBindings' stamp: 'damiencassou 4/5/2009 18:38'!forkWithClampedBindings: dynamicBindings	^(self newProcessWithClampedBindings: dynamicBindings) resume! !!BlockClosure methodsFor: '*DynamicBindings' stamp: 'damiencassou 4/5/2009 18:38'!forkWithIsolatedBindings	^self newProcessWithIsolatedBindings resume! !!BlockClosure methodsFor: '*DynamicBindings' stamp: 'damiencassou 4/5/2009 18:38'!forkWithIsolatedBindings: dynamicBindings	^(self newProcessWithIsolatedBindings: dynamicBindings) resume! !!BlockClosure methodsFor: '*DynamicBindings' stamp: 'damiencassou 4/5/2009 18:38'!newProcessWithBindings	"Create a new process that has the same dynamic bindings	as the active process"	^self newProcessWithBindings: Bindings get! !!BlockClosure methodsFor: '*DynamicBindings' stamp: 'damiencassou 4/5/2009 18:38'!newProcessWithBindings: dynamicBindings	"Create a new process with the given dynamic bindings"	^[self valueWithBindings: dynamicBindings] newProcess! !!BlockClosure methodsFor: '*DynamicBindings' stamp: 'damiencassou 4/5/2009 18:39'!newProcessWithClampedBindings	"Create a new process with a nested set of the dynamicBindings of 	the active process"	^self newProcessWithClampedBindings: Bindings get! !!BlockClosure methodsFor: '*DynamicBindings' stamp: 'damiencassou 4/5/2009 18:39'!newProcessWithClampedBindings: dynamicBindings	"Create a new process with a nested set of the given dynamicBindings"	^[Bindings clamp: self] newProcessWithBindings: dynamicBindings! !!BlockClosure methodsFor: '*DynamicBindings' stamp: 'damiencassou 4/5/2009 18:39'!newProcessWithIsolatedBindings	"Create a new process with a copy of the dynamicBindings of the 	acitve process"	^self newProcessWithIsolatedBindings: Bindings get! !!BlockClosure methodsFor: '*DynamicBindings' stamp: 'damiencassou 4/5/2009 18:39'!newProcessWithIsolatedBindings: dynamicBindings	"Create a new process with a copy of the given dynamicBindings"	^[Bindings isolate: self] newProcessWithBindings: dynamicBindings! !!BlockClosure methodsFor: '*DynamicBindings' stamp: 'damiencassou 4/5/2009 18:39'!valueWithBindings: dynamicBindings	"Evaluate the receiver in the context of the given dynamicBindings"	^self valueWithBindingsContext: thisContext! !!BlockClosure methodsFor: '*DynamicBindings' stamp: 'damiencassou 4/5/2009 18:39'!valueWithBindingsContext: aContext	"Private. Evaluate the receiver in the context of the 	given dynamicBindings context"	^self		on: BindingsLocator		do: [ :n | n resume: aContext]! !!BindingsAccessor class methodsFor: 'class initialization' stamp: 'lr 12/4/2009 15:25'!default	^Default ifNil: [Default := self new]! !!BindingsAccessor class methodsFor: 'class initialization' stamp: 'svp 2/1/2003 01:46'!initialize	"self initialize"	Smalltalk at: #Bindings put: self default.! !!BindingsAccessor methodsFor: 'variable accessing' stamp: 'svp 2/1/2003 02:31'!associationsDo: aBlock	^self pvtBindings associationsDo: aBlock! !!BindingsAccessor methodsFor: 'variable accessing' stamp: 'svp 2/1/2003 02:31'!at: aSymbol	^self pvtBindings at: aSymbol! !!BindingsAccessor methodsFor: 'variable accessing' stamp: 'svp 2/1/2003 02:31'!at: aSymbol ifAbsent: absBlock	^self pvtBindings at: aSymbol ifAbsent: absBlock! !!BindingsAccessor methodsFor: 'variable accessing' stamp: 'svp 2/1/2003 02:31'!at: aSymbol ifAbsentPut: absBlock	^self pvtBindings at: aSymbol ifAbsentPut: absBlock value! !!BindingsAccessor methodsFor: 'variable accessing' stamp: 'svp 2/1/2003 02:31'!at: aSymbol ifPresent: presentBlock	^self pvtBindings at: aSymbol ifPresent: presentBlock! !!BindingsAccessor methodsFor: 'variable accessing' stamp: 'svp 2/1/2003 02:31'!at: aSymbol put: obj	^self pvtBindings at: aSymbol put: obj! !!BindingsAccessor methodsFor: 'variable accessing' stamp: 'svp 2/4/2003 16:56'!bind: anObject to: anotherObject	^self pvtBindings bind: anObject to: anotherObject! !!BindingsAccessor methodsFor: 'variable accessing' stamp: 'svp 2/4/2003 16:54'!bindingFor: anObject ifNotBound: absBlock	^self pvtBindings at: anObject ifAbsent: absBlock! !!BindingsAccessor methodsFor: 'environment control' stamp: 'svp 2/4/2003 13:42'!clamp: aBlock"Ensures that any environment modifications that occur during the evaluation of aBlock will happen in an isolated environment and that the original environment will be restored after evaluation completes.  Concurrent changes in the parent bindings are visible while executing aBlock."	^aBlock valueWithBindings: self pvtBindings newChild! !!BindingsAccessor methodsFor: 'variable accessing' stamp: 'svp 2/1/2003 02:31'!do: aBlock	^self pvtBindings do: aBlock! !!BindingsAccessor methodsFor: 'environment accessing' stamp: 'svp 2/4/2003 13:48'!explore	"This is just a handy way to allow you to directly explore the 	global symbol 'Bindings'"	self get explore! !!BindingsAccessor methodsFor: 'environment accessing' stamp: 'svp 2/1/2003 02:31'!get	^self pvtBindings! !!BindingsAccessor methodsFor: 'variable accessing' stamp: 'svp 2/1/2003 02:31'!includesKey: anObject	^self pvtBindings includesKey: anObject! !!BindingsAccessor methodsFor: 'environment accessing' stamp: 'svp 2/4/2003 13:49'!inspect	"This is just a handy way to allow you to directly inspect the 	global symbol 'Bindings'"	self get inspect! !!BindingsAccessor methodsFor: 'variable accessing' stamp: 'svp 2/4/2003 16:57'!isBound: anObject	^self pvtBindings isBound: anObject! !!BindingsAccessor methodsFor: 'environment control' stamp: 'svp 5/6/2003 10:49'!isolate	"Isolates the bindings of the active context such that changes to the 	active bindings are not visible anywhere except that portion of the active	stack for which the active bindings are assigned."	| ctx |	ctx := self pvtContext.	ctx tempAt: 1 put: (ctx tempAt: 1) copy.! !!BindingsAccessor methodsFor: 'environment control' stamp: 'svp 2/4/2003 13:42'!isolate: aBlock"Ensures that any environment modifications that occur during the evaluation of aBlock will happen in an isolated environment and that the original environment will be restored after evaluation completes.  Concurrent changes in the parent bindings are visible while executing aBlock."	^aBlock valueWithBindings: self pvtBindings copy! !!BindingsAccessor methodsFor: 'variable accessing' stamp: 'svp 2/1/2003 02:31'!keys	^self pvtBindings keys! !!BindingsAccessor methodsFor: 'environment creation' stamp: 'svp 2/1/2003 02:04'!new	"Creates a new runtime environment that is empty."	^DynamicBindings new.! !!BindingsAccessor methodsFor: 'environment creation' stamp: 'svp 7/31/2002 10:46'!newChild	"Creates a new runtime environment that inherits from the current environment."	^self get newChild! !!BindingsAccessor methodsFor: 'environment accessing' stamp: 'svp 2/4/2003 13:49'!parent	^self get parent! !!BindingsAccessor methodsFor: 'private' stamp: 'svp 2/1/2003 02:30'!pvtBindings	^self pvtContext tempAt: 1! !!BindingsAccessor methodsFor: 'private' stamp: 'svp 2/1/2003 01:33'!pvtContext	^BindingsLocator signal! !!BindingsAccessor methodsFor: 'variable accessing' stamp: 'svp 2/1/2003 02:32'!removeKey: aSymbol	^self pvtBindings removeKey: aSymbol! !!BindingsAccessor methodsFor: 'variable accessing' stamp: 'svp 2/4/2003 16:19'!removeKey: aSymbol ifAbsent: absBlock	^self pvtBindings removeKey: aSymbol ifAbsent: absBlock! !!BindingsAccessor methodsFor: 'environment accessing' stamp: 'svp 7/31/2002 10:46'!root	^self get root! !!BindingsAccessor methodsFor: 'variable accessing' stamp: 'svp 2/1/2003 02:32'!values	^self pvtBindings values! !!Object methodsFor: '*DynamicBindings' stamp: 'svp 3/6/2003 16:08'!binding	"Answer the DynamicBinding for the receiver (if any)"	^Bindings bindingFor: self ifNotBound: [nil]! !!Object methodsFor: '*DynamicBindings' stamp: 'svp 4/29/2003 00:35'!binding: anObject	"Set the dynamic binding for the receiver, if anObject is nil, then 	remove the receiver's dynamic binding (if any)"	^anObject 		ifNil: [self removeBinding]		ifNotNil: [Bindings bind: self to: anObject]! !!Object methodsFor: '*DynamicBindings' stamp: 'svp 3/6/2003 16:09'!hasBinding	"Answer whether or not the receiver has a dynamic binding"	^Bindings includesKey: self! !!Object methodsFor: '*DynamicBindings' stamp: 'svp 3/6/2003 16:09'!removeBinding	"Remove the dynamic binding associated with the receiver"	^Bindings removeKey: self ifAbsent: []! !!BindingsLocator methodsFor: 'exceptionDescription' stamp: 'lr 12/4/2009 15:25'!defaultAction	"Finds the root context for the active stack, then installs a new	handler context that will answer the context containing the root 	environment.  This method depends on the implementation of	#valueWithBindings:."	| tmp defaultActionCtx |	tmp := thisContext.	[tmp sender notNil] whileTrue: [tmp := tmp sender].	defaultActionCtx := thisContext.	[			tmp swapSender: thisContext sender.		thisContext sender sender sender swapSender: nil.		thisContext swapSender: defaultActionCtx.	] valueWithBindings: DynamicBindings root.	^tmp sender sender sender! !!ContextPart methodsFor: '*DynamicBindings' stamp: 'lr 12/4/2009 15:25'!bindings	"Answers the Dynamic Bindings that are currently visible in the receiver's context.  This is kind of a hack...we could do a better job of this if we used the exception handling primitives directly, however, this implementation has the benefit of being slightly more portable."		| oldSender answer |	oldSender := thisContext swapSender: self.	answer := BindingsLocator signal.	thisContext swapSender: oldSender.	^answer 	! !"DynamicBindings"!!ApplicationService commentStamp: 'klc 12/6/2007 16:29' prior: 0!I am an abstract superclass.  Subclass me to create your own service classes whose instances can be started and stopped.  Subclasses should override the #runWhile: method to do something useful.An instance of an ApplicationService will have a Process associated with it while it is running.  An ApplicationService can be in one of three states that are determined by the process and condiction instance variables:	running: condition == #run & process notNil	stopping: condition ~~ #run & process notNil 	stopped: process isNilInstance Variables:name <String | nil> - An optional name for the given serviceprocess <Process | nil> - The Process instance for a running service condition <#run | #stop> - Indicates whether the associated process should continue to run or whether it should stop runningdynamicBindings <DynamicBindings | nil> - A set of dynamic bindings that are active for the associated process; if used instead of global variables, then multiple services can run simultaneously and be bound to different sets of "globals"; see the class comments for DynamicBindings for more detailspriority <Number> - The priority at which the associated process will run!!TcpService commentStamp: 'klc 12/6/2007 16:33' prior: 0!I am a KomHttpServer service that listens for inbound TCP connections on a given port.Instance Variables:	portNumber - the TCP port number on which to listen for inbound connectionsUsage:Subclasses should override the #serve: method to process incoming TCP connections (a connected socket is passed as the sole argument to this method).  Starting and stopping instances of this class will start and stop listening on the given port number.!!TcpListener commentStamp: 'klc 12/6/2007 16:32' prior: 0!I listen for TCP connections on a given port number.  Instance variables:	portNumber - the number of the port on which to listen for incoming connections	handler - an object that is sent the #value: message whenever an incoming connection is established; the argument to this message is a connected socket	socketsToDestroy - a list of sockets that need to be destroyed (usually a listening socket that is no longer needed)Usage:In the following example, a TcpListener is established on port 8123.  After evaluating the following example, if you open a transcript window and point a web browser to port 8123 of this machine (ie. http://localhost:8123/), you should see several http requests appear in the transcript.	| count listener |	count _ 0.	listener _ TcpListener		on: 8123		handler: 			[ :socket |			count _ count + 1.			Transcript show: socket getData.			socket closeAndDestroy].	listener forkAndListenWhile: [count < 5].For an additional example of using TcpListener, see TcpService.!!Collection methodsFor: '*KomServices' stamp: 'gc 8/29/2008 15:25'!asIpByteArray	(self size = 4)		ifFalse: [^self error: 'Invalid IP Address'].	^ self asByteArray! !!Process class methodsFor: '*KomServices' stamp: 'svp 5/6/2003 13:44'!termMethod	^Process class methodDictionary at: #terminationOkDuring:! !!Process class methodsFor: '*KomServices' stamp: 'svp 4/25/2003 18:03'!terminationOkDuring: aBlock	^aBlock value! !!Process methodsFor: '*KomServices' stamp: 'svp 4/25/2003 18:05'!okToTerminate	self suspendedContext ifNotNilDo: 		[ :suspendedCtx |		suspendedCtx stackDo: 			[ :ctx |			ctx method == self class termMethod				ifTrue: [^true]]].	^false! !!ApplicationService class methodsFor: 'registration' stamp: 'gc 7/8/2005 09:26'!addService: aService	self allServices add: aService! !!ApplicationService class methodsFor: 'accessing' stamp: 'gc 10/24/2007 00:03'!allServices	"Return all registered services.	Do not override this method, override #services instead."	^Services! !!ApplicationService class methodsFor: 'accessing' stamp: 'svp 9/19/2003 00:55'!defaultPriority	^Processor userBackgroundPriority! !!ApplicationService class methodsFor: 'initialization' stamp: 'gc 10/23/2007 23:48'!initialize	"self initialize"	Services := Set new.	Smalltalk addToStartUpList: self.	Smalltalk addToShutDownList: self! !!ApplicationService class methodsFor: 'instance creation' stamp: 'svp 1/17/2003 16:10'!newNamed: aString	^self new name: aString; yourself! !!ApplicationService class methodsFor: 'registration' stamp: 'gc 7/8/2005 09:27'!removeService: aService	self allServices remove: aService ifAbsent: []! !!ApplicationService class methodsFor: 'accessing' stamp: 'gc 10/23/2007 23:47'!serviceNamed: aString	^self 		serviceNamed: aString		ifAbsent: [self error: 'No service by that name']! !!ApplicationService class methodsFor: 'accessing' stamp: 'gc 7/8/2005 09:09'!serviceNamed: aString ifAbsent: aBlock	^self services 		detect: [ :ea | ea name = aString ] 		ifNone: aBlock! !!ApplicationService class methodsFor: 'accessing' stamp: 'gk 12/6/2005 23:07'!services	"Return all registered services. Override this method	in subclasses to provide specialized or partial lists	of services."	^ self allServices! !!ApplicationService class methodsFor: 'accessing' stamp: 'svp 1/17/2003 16:05'!servicesNamed: aString	^self services select: [ :ea | ea name = aString ]! !!ApplicationService class methodsFor: 'snapshots' stamp: 'svp 1/20/2003 22:43'!shutDown	self services do: 		[ :ea | ea prepareForShutdown]! !!ApplicationService class methodsFor: 'private' stamp: 'brp 10/14/2004 22:16'!sleepMethod	"This method is used to detect whether or not the 	service is currently sleeping"	^ self methodDict at: #sleepFor:! !!ApplicationService class methodsFor: 'snapshots' stamp: 'svp 1/17/2003 16:10'!startUp	self services do: 		[ :ea | ea prepareForStartup].! !!ApplicationService methodsFor: 'private' stamp: 'gc 10/23/2007 23:49'!addStopSignal	stopSignal ifNil: [stopSignal := OrderedCollection new].	^stopSignal add: Semaphore new.! !!ApplicationService methodsFor: 'accessing' stamp: 'svp 5/7/2003 04:53'!bindings	^bindings! !!ApplicationService methodsFor: 'accessing' stamp: 'svp 5/7/2003 04:56'!bindings: aDynamicBindings	bindings := aDynamicBindings! !!ApplicationService methodsFor: 'starting and stopping' stamp: 'svp 5/6/2003 13:08'!cancelStopRequest	"If the service is currently in a state of stopping, this method	will return the service to a state of running"	self releaseProcessesWaitingForStop.	stopSignal := nil.! !!ApplicationService methodsFor: 'private' stamp: 'brp 10/2/2004 15:29'!checkRequiredBindings	| missingBindings |	missingBindings := self requiredBindings reject: [ :ea | self bindings includesKey: ea ].	missingBindings notEmpty 		ifTrue: 			[self error: 'service is missing one or more required bindings'.			^false].	^true! !!ApplicationService methodsFor: 'accessing' stamp: 'svp 5/6/2003 12:57'!defaultName	| title |	title := self class name.	^(title first isVowel ifTrue: ['an '] ifFalse: ['a ']), title! !!ApplicationService methodsFor: 'accessing' stamp: 'svp 2/26/2003 10:32'!defaultPriority	^self class defaultPriority! !!ApplicationService methodsFor: 'initialize-release' stamp: 'brp 10/2/2004 14:34'!initialize	super initialize.	self register.	self initializeBindings! !!ApplicationService methodsFor: 'initialize-release' stamp: 'svp 5/7/2003 04:54'!initializeBindings	"Subclasses may wish to establish an isolated set of dynamic	bindings by overriding this method.  A subclass may also want	to go ahead and set some dynamic variables.  For example:		dynamicBindings := DynamicBindings root newChild.		dynamicBindings at: #example put: 'a value'.	In this example, the service is assigned a new set of dynamic bindings	that inherits the bindings of root set of bindings and the variable #example	is assigned a value. Code that is running in the context of this service can	then access this variable using the expressions:		#example binding		#example binding: aNewValue	"	bindings := DynamicBindings root newChild.! !!ApplicationService methodsFor: 'queries' stamp: 'svp 4/26/2003 01:50'!isRunning	^process notNil and: [stopSignal isNil]! !!ApplicationService methodsFor: 'queries' stamp: 'svp 4/24/2003 10:49'!isSleeping	process ifNil: [^false].	process suspendedContext ifNotNilDo: 		[ :suspendedCtx |		suspendedCtx stackDo: 			[ :ctx |			ctx method == self class sleepMethod				ifTrue: [^true]]].	^false! !!ApplicationService methodsFor: 'queries' stamp: 'svp 4/25/2003 16:12'!isStopped	^process isNil! !!ApplicationService methodsFor: 'queries' stamp: 'svp 4/26/2003 01:50'!isStopping	^process notNil and: [stopSignal notNil]! !!ApplicationService methodsFor: 'starting and stopping' stamp: 'svp 4/26/2003 01:47'!kill	"Forcibly kill the service regardless of whether it is in a state where it is 	safe to do so.  Use stop unless the service is not responding."	process ifNotNil: [process terminate].	self processTerminated.! !!ApplicationService methodsFor: 'accessing' stamp: 'svp 1/17/2003 16:30'!name	^name ifNil: [self defaultName]! !!ApplicationService methodsFor: 'accessing' stamp: 'svp 5/6/2003 12:57'!name: aString	name := aString.	process ifNotNil: [process name: aString].! !!ApplicationService methodsFor: 'startup and shutdown' stamp: 'svp 5/6/2003 13:37'!prepareForShutdown	"The system is about to shutdown"! !!ApplicationService methodsFor: 'startup and shutdown' stamp: 'svp 5/6/2003 13:37'!prepareForStartup	"The system just started up"! !!ApplicationService methodsFor: 'printing' stamp: 'svp 4/25/2003 16:13'!printOn: aStream	aStream nextPutAll: self name.	self isRunning ifTrue: [aStream nextPutAll: ' [running]'].	self isStopping ifTrue: [aStream nextPutAll: ' [stopping]'].	self isStopped ifTrue: [aStream nextPutAll: ' [stopped]']! !!ApplicationService methodsFor: 'accessing' stamp: 'svp 1/17/2003 22:29'!priority	^priority ifNil: [self defaultPriority]! !!ApplicationService methodsFor: 'accessing' stamp: 'svp 5/6/2003 12:58'!priority: aNumber	priority := aNumber.	process ifNotNil: [process priority: aNumber].! !!ApplicationService methodsFor: 'accessing' stamp: 'svp 1/17/2003 13:49'!process	^process! !!ApplicationService methodsFor: 'private' stamp: 'svp 5/6/2003 13:38'!processTerminated	"Private.  Nils out the process inst var (indication that the service is	stopped and signals any processes that are waiting on the service to 	stop."	process := nil.	self releaseProcessesWaitingForStop.! !!ApplicationService methodsFor: 'registration' stamp: 'svp 1/17/2003 16:06'!register	self class addService: self! !!ApplicationService methodsFor: 'private' stamp: 'svp 5/6/2003 13:39'!releaseProcessesWaitingForStop	"Private.  Signals any processes that are waiting on the service to stop."	| tmp |	stopSignal ifNotNil: 		[tmp := stopSignal.		stopSignal := nil.		tmp do: [ :ea | ea signal]].! !!ApplicationService methodsFor: 'accessing' stamp: 'svp 3/6/2003 17:49'!requiredBindings	"Subclasses may wish to override this method to provide a list of objects 	that the service requires to be registered in its dynamic bindings.  When	attempting to start a service that has required bindings, if any of the 	required bindings are missing, an exception will be signaled and the	service will not start."	^#()! !!ApplicationService methodsFor: 'running' stamp: 'brp 10/14/2004 22:22'!runWhile: aBlock	"subclasses should perform whatever service they provide	in a loop that doesn't return until aBlock evaluates to true"	"In this abstract class, we do nothing except wait on a 	timer.  This is useful during development where we might	want to create some do nothing services for testing purposes."	"The two examples below illustrate the difference in using	the #sleepFor: method and directly using a Delay.  If you 	use the #sleepFor: method, then stopping the service will	happen immediately while the service is sleeping; if you	just use a Delay directly, then graceful shutdown cannot	happen until after the delay completes.  To test this behavior	start a service using Service newNamed: 'sleep test' 	and then use the Star Browser interface to start and stop the service	(note: you can allow graceful termination during any block of 	code using Process class>>terminationOkDuring:)."	[aBlock value] whileTrue: [self sleepFor: 1000]	"[aBlock value] whileTrue: [(Delay forSeconds: 10) wait]"! !!ApplicationService methodsFor: 'utility' stamp: 'svp 4/25/2003 18:09'!sleepFor: milliseconds	"If your service sleeps, use this method as it will indicate that it is	safe to immediately terminate the process while it is sleeping."	Process terminationOkDuring:		[(Delay forMilliseconds: milliseconds) wait].! !!ApplicationService methodsFor: 'starting and stopping' stamp: 'brp 10/2/2004 16:07'!start	self verifyOkToStart ifFalse: [^self].	process := 			[			[self 				runWhile: [stopSignal isNil and: [process == Processor activeProcess]]] 					ensure: [self processTerminated]] 					newProcessWithBindings: self bindings.	process 		name: self name;		priority: self priority;		resume! !!ApplicationService methodsFor: 'starting and stopping' stamp: 'svp 5/6/2003 13:09'!stop	"Gracefully request the service to stop.  This method returns immediately.  If	you wish to wait until the service has stopped, follow this method with #waitForStop	or #waitForStopUntil:."	stopSignal := OrderedCollection new.	process ifNotNil: [process okToTerminate ifTrue: [process terminate]].	process ifNil: [stopSignal := nil].! !!ApplicationService methodsFor: 'private' stamp: 'svp 4/25/2003 17:29'!stopSignal	"<Semaphore | nil> Indicates whether the associated process should 	be in the process of shutting down.  The semaphore will be signaled	for all waiting process when the service thinks it has stopped (note,	you should not rely solely on the semaphore signal to determine that	the service is actually stopped, instead, wait then ask the service	#isStopped)."	^stopSignal! !!ApplicationService methodsFor: 'registration' stamp: 'svp 1/17/2003 16:07'!unregister	self stop.	self class removeService: self! !!ApplicationService methodsFor: 'private' stamp: 'brp 10/2/2004 15:31'!verifyOkToStart	self isRunning ifTrue: [^false].	self isStopping 		ifTrue: 			[self error: 'Service is in the process of stopping'.			^false].	^ self checkRequiredBindings! !!ApplicationService methodsFor: 'starting and stopping' stamp: 'svp 4/26/2003 01:45'!waitForStop	"Wait until the service is stopped"	self isStopped ifTrue: [^self].	self isStopping 		ifFalse: [^self error: 'service is not in the process of stopping'].	[self isStopping] whileTrue: [self addStopSignal wait]! !!ApplicationService methodsFor: 'starting and stopping' stamp: 'svp 4/26/2003 01:46'!waitForStopUntil: deadline 	"Wait until the service is stopped or the deadline is reached"	self isStopped ifTrue: [^self].	self isStopping 		ifFalse: [^self error: 'service is not in the process of stopping'].	[self isStopping and: [Time millisecondClockValue < deadline]] whileTrue:		[self addStopSignal waitTimeoutMSecs: deadline - Time millisecondClockValue]! !!ApplicationService methodsFor: 'utility' stamp: 'svp 5/7/2003 04:55'!withBindingsDo: aBlock	^aBlock valueWithBindings: self bindings! !!TcpService class methodsFor: 'class initialization' stamp: 'svp 5/6/2003 14:51'!initialize	"self initialize"	PortAssignments := Dictionary new.! !!TcpService class methodsFor: 'instance creation' stamp: 'gc 8/29/2008 17:15'!on: portNumber	^self new		portNumber: portNumber;		yourself! !!TcpService class methodsFor: 'instance creation' stamp: 'gc 9/2/2008 23:35'!on: portNumber named: processName	^(self on: portNumber)		name: processName;		yourself! !!TcpService class methodsFor: 'accessing' stamp: 'gc 7/8/2005 09:45'!serviceOnPort: portNumber	^ self serviceOnPort: portNumber		ifAbsent: [self error: 'No service on that port']! !!TcpService class methodsFor: 'accessing' stamp: 'gc 7/8/2005 09:45'!serviceOnPort: portNumber ifAbsent: aBlock	^ self services		detect: [:service | service portNumber = portNumber]		ifNone: aBlock! !!TcpService class methodsFor: 'accessing' stamp: 'gk 12/6/2005 23:07'!services	"Return all registered TcpServices."	^ super services select: [:service | service isKindOf: TcpService]! !!TcpService class methodsFor: 'instance creation' stamp: 'svp 1/17/2003 14:16'!startOn: portNumber	^(self on: portNumber) start; yourself! !!TcpService class methodsFor: 'instance creation' stamp: 'gc 9/2/2008 23:36'!startOn: portNumber named: aString	^(self on: portNumber		named: aString)		start;		yourself! !!TcpService methodsFor: 'accessing' stamp: 'gc 8/29/2008 17:27'!address	^ address! !!TcpService methodsFor: 'accessing' stamp: 'gc 8/29/2008 17:27'!address: anObject	address := anObject! !!TcpService methodsFor: 'running' stamp: 'svp 1/21/2003 14:37'!assignPort	self verifyPortAvailability: self portNumber.	PortAssignments at: self portNumber put: self.! !!TcpService methodsFor: 'initialization' stamp: 'gc 8/29/2008 15:48'!initializeOnPort: portNum address: anAddress priority: priorityLevel	portNumber := portNum.	address := anAddress.	priority := priorityLevel.! !!TcpService methodsFor: 'initialization' stamp: 'svp 5/6/2003 14:54'!initializeOnPort: portNum priority: priorityLevel	portNumber := portNum.	priority := priorityLevel.! !!TcpService methodsFor: 'accessing' stamp: 'svp 1/17/2003 16:14'!portNumber	^portNumber! !!TcpService methodsFor: 'accessing' stamp: 'svp 5/6/2003 14:53'!portNumber: aNumber	self isRunning 		ifTrue: 			[self verifyPortAvailability: aNumber.			self stop.			portNumber := aNumber.			self start.]		ifFalse: 			[portNumber := aNumber].! !!TcpService methodsFor: 'startup and shutdown' stamp: 'svp 1/17/2003 16:31'!prepareForStartup	"The squeak system just started up"	Socket initializeNetwork.! !!TcpService methodsFor: 'printing' stamp: 'bolot 1/11/2001 15:00'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' port: ', self portNumber asString! !!TcpService methodsFor: 'running' stamp: 'gc 8/29/2008 15:47'!runWhile: aBlock 	| listener |	[listener := TcpListener 		on: self portNumber		address: self address		handler: self.	listener listenWhile: aBlock ]		ensure: [ self unassignPort ]! !!TcpService methodsFor: 'conversation' stamp: 'svp 8/20/2003 00:30'!serve: aSocket	"Subclasses should override this method to provide socket based 	communications services.  Each new socket connection is handed to	this method."	self subclassResponsibility! !!TcpService methodsFor: 'starting and stopping' stamp: 'svp 4/25/2003 16:27'!start	self verifyOkToStart ifFalse: [^self].	self assignPort.	[super start] on: Error do: 		[ :ex | self unassignPort. ex pass]! !!TcpService methodsFor: 'starting and stopping' stamp: 'svp 1/17/2003 16:14'!startOn: portNum	(self portNumber ~= portNum) ifTrue: [self stop].	self portNumber: portNum.	self start.! !!TcpService methodsFor: 'running' stamp: 'svp 1/17/2003 15:26'!unassignPort	PortAssignments at: self portNumber ifPresent: 		[ :srv |		srv == self ifTrue: 			[PortAssignments removeKey: self portNumber]]! !!TcpService methodsFor: 'conversation' stamp: 'gk 12/6/2005 22:57'!value: aSocket	"This method is invoked by the TcpListener"	[self serve: aSocket] newProcessWithClampedBindings		name: (self name, ' connection');		resume! !!TcpService methodsFor: 'running' stamp: 'svp 1/21/2003 14:37'!verifyPortAvailability: aNumber	PortAssignments at: aNumber ifPresent: 		[ :otherService | 		self error: ('a service is already running on port ', self portNumber asString)].! !!TcpListener class methodsFor: 'preferences' stamp: 'svp 5/7/2003 02:44'!acceptTimeout	^#'TcpListener-acceptTimeout' binding ifNil: [10]! !!TcpListener class methodsFor: 'preferences' stamp: 'svp 5/7/2003 03:26'!acceptTimeout: seconds	^#'TcpListener-acceptTimeout' binding: seconds! !!TcpListener class methodsFor: 'preferences' stamp: 'svp 5/7/2003 02:46'!backlogSize	^#'TcpListener-backlogSize' binding ifNil: [10]! !!TcpListener class methodsFor: 'preferences' stamp: 'svp 5/7/2003 03:26'!backlogSize: anInteger	^#'TcpListener-backlogSize' binding: anInteger! !!TcpListener class methodsFor: 'preferences' stamp: 'svp 5/7/2003 03:29'!listenerDestroyDelay	^#'TcpListener-listenerDestroyDelay' binding ifNil: [10]! !!TcpListener class methodsFor: 'preferences' stamp: 'svp 5/7/2003 03:30'!listenerDestroyDelay: milliseconds	^#'TcpListener-listenerDestroyDelay' binding: milliseconds! !!TcpListener class methodsFor: 'instance creation' stamp: 'gc 8/29/2008 15:47'!on: aPort address: anAddress handler: aBlock	^self new initializeOnPort: aPort address: anAddress handler: aBlock ! !!TcpListener class methodsFor: 'instance creation' stamp: 'svp 1/17/2003 14:26'!on: portNumber handler: aValuable	^self new		initializeOnPort: portNumber		handler: aValuable! !!TcpListener methodsFor: 'accessing' stamp: 'jf 8/18/2003 01:08'!acceptTimeout	^self class acceptTimeout! !!TcpListener methodsFor: 'accessing' stamp: 'gc 8/29/2008 15:27'!address	^ address! !!TcpListener methodsFor: 'accessing' stamp: 'gc 8/29/2008 15:52'!address: aStringOrCollection	address := aStringOrCollection asIpByteArray! !!TcpListener methodsFor: 'accessing' stamp: 'svp 5/7/2003 03:28'!backlogSize	^self class backlogSize! !!TcpListener methodsFor: 'private' stamp: 'gc 8/29/2008 15:41'!bind: listener withBacklogSize: backlogSize 	address 		ifNil: 			[ listener 				listenOn: portNumber				backlogSize: backlogSize ]		ifNotNil: 			[ listener 				listenOn: portNumber				backlogSize: backlogSize				interface: address ]! !!TcpListener methodsFor: 'initialize-release' stamp: 'lr 4/15/2010 08:55'!destroySockets	socketsToDestroy notNil		ifTrue: [ socketsToDestroy do: [ :ea | ea destroy ] ].	socketsToDestroy := OrderedCollection new! !!TcpListener methodsFor: 'private' stamp: 'svp 3/4/2003 14:11'!forkAndListenWhile: aBlock	[self listenWhile: aBlock] fork! !!TcpListener methodsFor: 'initialize-release' stamp: 'gc 8/29/2008 15:00'!initialize	socketsToDestroy := OrderedCollection new! !!TcpListener methodsFor: 'initialization' stamp: 'gc 8/30/2008 16:48'!initializeOnPort: aPort address: anAddress handler: aValuableObject 	self 		initializeOnPort: aPort		handler: aValuableObject.	anAddress ifNotNil: [self address: anAddress]! !!TcpListener methodsFor: 'initialize-release' stamp: 'gc 8/29/2008 15:01'!initializeOnPort: aNumber handler: aValuableObject 	portNumber := aNumber.	handler := aValuableObject! !!TcpListener methodsFor: 'private' stamp: 'svp 1/17/2003 13:45'!listen	"This is the listening loop.  It runs forever accepting	inbound sockect connections."	self listenWhile: [true]! !!TcpListener methodsFor: 'private' stamp: 'svp 4/25/2003 18:08'!listenWhile: aBlock	"This is the listening loop.  It runs while aBlock evaluates	to true.  When the loop terminates or when the process running	the loop is terminated, any listening sockets will be destroyed."	self socketClass initializeNetwork.	[self pvtListenLoop: aBlock] ensure: [self destroySockets]! !!TcpListener methodsFor: 'accessing' stamp: 'svp 5/7/2003 03:29'!listenerDestroyDelay	^self class listenerDestroyDelay! !!TcpListener methodsFor: 'private' stamp: 'svp 4/15/2003 23:25'!newListener: backlogSize	"Create a new socket that listens on our port.  The backlog is how many simultaneous 	connections to accept at the same time"	[^self pvtNewListener: backlogSize] on: Error do: [].	"Try one more time after initializing the network"	Socket initializeNetwork.	^self pvtNewListener: backlogSize.! !!TcpListener methodsFor: 'accessing' stamp: 'svp 1/17/2003 13:39'!portNumber	^portNumber! !!TcpListener methodsFor: 'printing' stamp: 'svp 1/17/2003 11:29'!printOn: aStream	aStream nextPutAll: (self class name asString, ' port: ', self portNumber asString).! !!TcpListener methodsFor: 'private' stamp: 'svp 8/19/2003 23:48'!pvtListenLoop: aBlock	| socket listener |	listener := self newListener: self backlogSize.	"If the listener is not valid then the we cannot use the	BSD style accept() mechanism."	listener isValid ifFalse: [^self pvtOldListenLoop: aBlock].	aBlock whileTrue: 		[Process terminationOkDuring: 			[[socket := listener waitForAcceptFor: self acceptTimeout ifTimedOut: [nil]]				ifCurtailed: [listener destroy]].		socket ifNotNil:			[socket isConnected				ifTrue: [handler value: socket]				ifFalse: [socket destroy].			socket := nil].		listener isValid ifFalse: 			[(Delay forMilliseconds: self listenerDestroyDelay) wait.			listener destroy.			listener := self newListener: self backlogSize]]! !!TcpListener methodsFor: 'private' stamp: 'gc 8/29/2008 15:41'!pvtNewListener: backlogSize 	"Create a new socket that listens on our port.  The backlog is how many simultaneous 	connections to accept at the same time"	| listener |	listener := self socketClass newTCP.	self socketsToDestroy add: listener.	self 		bind: listener		withBacklogSize: backlogSize.	^ listener! !!TcpListener methodsFor: 'private' stamp: 'gc 8/30/2008 14:29'!pvtOldListenLoop: aBlock	"see comment on ConnectionQueue>>oldStyleListenLoop"	| socket |	socket := nil.	aBlock whileTrue:		[socket ifNil:			["try to create a new socket for listening"			socket := Socket createIfFail: [nil]].		socket 			ifNil: [Process terminationOkDuring: [(Delay forMilliseconds: 100) wait]]			ifNotNil:				[socket isUnconnected ifTrue: 					[self bind: socket withBacklogSize: self backlogSize.					self socketsToDestroy add: socket].				Process terminationOkDuring: 					[[socket waitForConnectionUntil: (Socket deadlineSecs: 10)]						ensure: [socket destroy]].				socket isConnected					ifTrue: 						["connection established"						handler value: socket.						socket := nil]					ifFalse:						[socket isWaitingForConnection							ifFalse: [socket destroy. socket := nil]]]]! !!TcpListener methodsFor: 'accessing' stamp: 'svp 1/17/2003 11:32'!socketClass	^Socket! !!TcpListener methodsFor: 'accessing' stamp: 'svp 5/6/2003 14:08'!socketsToDestroy	^socketsToDestroy ifNil: 		[socketsToDestroy := OrderedCollection new].! !!String methodsFor: '*KomServices' stamp: 'svp 5/15/2003 12:23'!asIpByteArray	| ip tmp |	ip := self findTokens: '.'.	(ip size = 4) ifFalse: [ ^self error: 'Invalid IP Address' ].	ip detect: [ :ea | ea isPositiveInteger and: [ (ea asNumber <= 255) and: [ ea asNumber >= 0 ]]]		ifNone: [ ^self error: 'Invalid IP Address' ].	tmp := ByteArray new: 4.	1 to: 4 do: [ :in | tmp at: in put: (ip at: in) asNumber ].	^tmp! !!String methodsFor: '*KomServices' stamp: 'svp 1/21/2003 21:21'!isPositiveInteger	self isEmpty ifTrue: [^false].	self detect: [ :letter | letter isDigit not] ifNone: [^true].	^false! !!ContextPart methodsFor: '*KomServices' stamp: 'svp 5/6/2003 13:42'!stackDo: aBlock	"Iterates the sender chain, evaluating aBlock for each context"	| thisCtx |	thisCtx := self.	[thisCtx notNil] whileTrue:		[aBlock value: thisCtx.		thisCtx := thisCtx sender]! !"KomServices"!!HttpService commentStamp: 'svp 5/7/2003 05:21' prior: 0!I am a comanche service that listens for inbound HTTP connectinos on a given port.Usage:Subclasses should override the #processHttpRequest: method to process incoming HTTP requests (an HttpRequest is passed as the sole argument to this method).  The #processHttpRequest: method should always answer an instance of an HttpResponse.  Starting and stopping instances of this class will start and stop listening on the given port number.  You may also use instances of this class in a pluggable manner rather than subclassing (see examples below).Instance Variables:plug - An object that responds to the message #threadSafeValue: (typically a BlockContext or a MessageSend).  If this variable is not nil, then the default implementation of #processHttpRequest: will send #threadSafeValue: to this object and answer the result.  This enables ComancheHttpService to be used in a pluggable manner.  Pluggable Examples (MessageSend):	(HttpService on: 8080 named: 'Example Http Service')		onRequestDispatch: #processRequest: to: SomeGlobal;		startPluggable Examples (BlockContext):	(HttpService on: 8080 named: 'Example Http Service')		onRequestDo: [ :httpRequest | SomeGlobal processRequest: httpRequest ];		start!!HttpFormDictionary commentStamp: '<historical>' prior: 0!kom/4.10 (Comanche beta 4.10)HttpFormDictionarybolot 6/22/2001 12:09- use this instead of plain Dictionary for GET and POST forms- maintains multiple values for the same field-- but is backwards compatible, #at: returns the first value (?)-- so do #booleanAt:, #numberAt:- to access the actual value at key, use #rawAt:-- returns an OrderedCollectionTODO:- file upload support-- idea: first value is file name, second is FileStream?Koubo 3/19/2002 12:25fixed #at: and #at:ifAbsent: returns a String when the value had only one item. however, they returns a copied Collection of the value when it had multiple items.!!KomLogger commentStamp: 'svp 5/16/2003 12:03' prior: 0!I am a very simple http logging facility.  I implement a writable stream interface and expect to recieve arrays containing an HttpRequest (first element) and an HttpResponse (second element).  I then translate the request and response pair into a textual log format and write that onto each stream in my streams instance variable.  Other loggers may choose to write different log formats, or they could simply store the HttpRequest and HttpResponse objects (in an object DB for example).  For convenience, a transcript window can be opened on a logger using #openTranscript.  You Can also use the method #attachTheTranscript to copy the log entries onto the system Transcript.  Use #detachTranscripts to remove all instances of TranscriptStream from the set of streams.Currently I only support the Commog Log Format (CLF), which many log analysis tools can interpret.  For more information on this format, see:  http://www.w3.org/Daemon/User/Config/Logging.html#common-logfile-formatFor examples, see the class comments for ModLog.Enhancement ideas:- support a flexible logging format that uses some type of template string (ala Apache's logging facility) for producing each line in the log file - implement a "multi-streamer" that implements a writable stream interface and will copy the output to multiple output streams- implement a unix like tail tool that implement a writable stream interface and will "follow" everything that's written to it (similar to the Transcript, but designed to only show the most recent N number of lines or characters)!!KomTracer commentStamp: 'svp 5/15/2003 13:18' prior: 0!I am a KomLogger, but instead of writing a log file format, I write out a detailed trace of the http request and response pairs.  The following example will dump a trace on the transcript.	| ma |	ma _ ModuleAssembly core.	ma logTo: (KomTracer on: Transcript).	ma addPlug: [ :request | HttpResponse fromString: 'Hello World!!'].	(HttpService startOn: 8080 named: 'Example') plug: ma rootModule!!ComancheModule commentStamp: 'svp 5/15/2003 01:28' prior: 0!Comanche modules response to the message #processHttp and are responsible for examining the http serving environment and possibly altering that environment.  They can act a filters on both the inbound request and the outbound response.  They may also produce content (and even filter content).  Modules for any given server are arranged in a hierarchy that is formed by following the path of subModules.  Any given module may or may not process its subModules.  The method #processHttp answers a boolean to indicate whether or not a response has been made available.  It is up to the parent module to decide whether or not to continue processing other modules if a response is available.  The default behavior is to stop processing and return once a response is made available.!!ModAlias commentStamp: 'svp 5/15/2003 01:21' prior: 0!This module will attempt to match a prefix to the URL of a request.  If a match is made, its subModules will be processed.  If not, then its subModules are not processed.  The following is an example:	| ma |	ma _ ModuleAssembly core.	ma alias: '/hello' to: 		[ma addPlug: 			[ :request |			HttpResponse fromString: 'This is the aliased content']].	ma addPlug: 		[ :request |		HttpResponse fromString: 'This is the default content'].	(HttpService startOn: 8080 named: 'Example') plug: ma rootModuleIn this example, the urls http://localhost:8080/hello and http://localhost:8080/hello/some/more/path will show the aliased content while any url where the path does not begin with '/hello' will show the default content.!!ModAuth commentStamp: 'svp 5/15/2003 17:40' prior: 0!This module, when present, requires that a request has user authentication info.  It does not authenticate the supplied user id and password.  I send the message #verifyPassword:forUser: to my authDb instance variable to validate user ids and passwords.  You may supply your own user management object.  A very simple authentication database is provided by the KomAuthDb class.  Currently, this module only supports Basic authentication.Here is an example of a simple configuration that authentications users:	| ma authdb |	authdb := KomAuthDb new.	authdb addUser: 'admin' withPassword: 'password'.	ma := ModuleAssembly core.	ma authenticate: authdb realm: 'Demo'.	ma addPlug:		[ :request |		HttpResponse fromString: 'Hello world!!'].	(HttpService startOn: 8080 named: 'Example') plug: ma rootModule. Future enhancement ideas:- add support for more types of authentication!!ModAutoIndex commentStamp: 'svp 5/15/2003 01:15' prior: 0!This module provides automatically generated listings of directory contents.Required Bindings:	HttpRequest current	ModDir serverDirectoryExported Bindings:	<none>The following is an example:	| ma |	ma := ModuleAssembly core.	ma documentRoot: FileDirectory default fullName.	ma directoryIndex: 'index.html index.htm'.	ma serveFiles.	(HttpService startOn: 8080 named: 'Example') plug: ma rootModuleThis example just starts a file server on your default directory.  Any directories (that don't have an index file) will be rendered as listings by ModAutoIndex.!!ModCore commentStamp: 'svp 5/15/2003 01:13' prior: 0!The is the Core module.  It extracts a few things from a request and can establish a server root directory (which is not required).  It will also process TRACE and OPTIONS requests.!!ModDir commentStamp: 'svp 5/15/2003 16:40' prior: 0!This module provides basic directory handling (including redirects to handle the trailing slash problem).Required Bindings:	HttpRequest current	ModDoc fullFilePathExported Bindings:	ModDir serverDirectoryThe following is an example:	| ma |	ma := ModuleAssembly core.	ma documentRoot: FileDirectory default fullName.	ma directoryIndex: 'index.html index.htm'.	ma serveFiles.	(HttpService startOn: 8080 named: 'Example') plug: ma rootModuleThis example just starts a file server on your default directory.  Any directories (that don't have an index file) will be rendered as listings by ModAutoIndex.!!ModDoc commentStamp: 'svp 5/15/2003 16:40' prior: 0!The core module for handling traditional web server dutiesRequired Bindings: 	ModCore pathExported Bindings:	ModDoc documentRoot	ModDoc relativeFilePathThe following is an example:	| ma |	ma := ModuleAssembly core.	ma documentRoot: FileDirectory default fullName.	ma directoryIndex: 'index.html index.htm'.	ma serveFiles.	(HttpService startOn: 8080 named: 'Example') plug: ma rootModuleThis example just starts a file server on your default directory.  Any directories (that don't have an index file) will be rendered as listings by ModAutoIndex.!!ModVhostDoc commentStamp: 'svp 5/15/2003 00:20' prior: 0!Used for determining the document root for mass virtual hosting (where the virtual server name is incorporated into the document root).  See the class comments for ModVhost for an example of virtual hosting.!!ModFile commentStamp: 'svp 5/15/2003 16:40' prior: 0!This module serves a file based on the setting of ModCore fullFilePath.Required Bindings:	ModDoc documentRoot	ModDoc relativeFilePathExported Bindings:	<none>The following is an example:	| ma |	ma := ModuleAssembly core.	ma documentRoot: FileDirectory default fullName.	ma directoryIndex: 'index.html index.htm'.	ma serveFiles.	(HttpService startOn: 8080 named: 'Example') plug: ma rootModuleThis example just starts a file server on your default directory.  Any directories (that don't have an index file) will be rendered as listings by ModAutoIndex.!!ModLog commentStamp: 'svp 5/16/2003 12:06' prior: 0!Instance Variable:logger <Stream> - a stream for writing out request/response pairs Examples:The following example will log requests to the Transcript:	| ma |	ma _ ModuleAssembly core.	ma logTo: (KomLogger on: Transcript).	ma addPlug: [ :request | HttpResponse fromString: 'Hello World!!'].	(HttpService startOn: 8080 named: 'Example') plug: ma rootModuleIt is possible to segregate logging by inserting #logTo: messages a different places in the module assembly...one example using ModAlias follows:	| ma |	Smalltalk at: #MyHttpLog put: (WriteStream on: '').	ma _ ModuleAssembly core.	ma alias: '/log1' to: [ma logTo: (KomLogger on: Transcript)].	ma alias: '/log2' to: [ma logTo: (KomLogger on: (Smalltalk at: #MyHttpLog))].	ma addPlug: [ :request | HttpResponse fromString: 'Hello World!!'].	(HttpService startOn: 8080 named: 'Example') plug: ma rootModuleIn this example, all requests will respond with 'Hello World!!', but requests whose url begins with '/log1' will be logged to the transcript and requests whose url begins with '/log2' will be logged to MyHttpLog.  Other requests will not be logged.In the next example, we illustrate how to start enable logging, and also how to open a transcript window on that log.  Output sent to the logger will be concurrently written to the WriteStream "MyHttpLog" and to the TranscriptStream opened by the #openTranscript message.	| ma logger |	Smalltalk at: #MyHttpLog put: (WriteStream on: '').	ma _ ModuleAssembly core.	ma logTo: (logger := KomLogger on: (Smalltalk at: #MyHttpLog)).	ma addPlug: [ :request | HttpResponse fromString: 'Hello World!!'].	(HttpService startOn: 8080 named: 'Example') plug: ma rootModule.	logger openTranscript.Tip: With the SharedStreams package (on SqueakMap), a number of asynchronous logging configurations can be constructed.!!ModMulti commentStamp: 'svp 5/15/2003 17:13' prior: 0!This module simply processes its subModules.  It is handy when you'd like to wrap some modules together a work with them as a unit.Example:In the following example, a ModuleAssembly instantiated with #new will have a ModMulti instance as the root of the module stack.  Adding further modules to the assembly results in those modules being added to the ModMulti instance.  In this example, we create an assembly that could be used as the standard document server in a number of places in our main module assembly.  In this manner, we can reuse module assemblies.  Changes to our standard document server assembly would affect the behavior every where we refer to that assembly (also, direct manipulation of the module instances after construction will affect the behavior everywhere an assembly is refered...this may even eliminate the need to rebuild your module assembly).	| stdDocs ma |	"Create a stdDocs assembly"	stdDocs := ModuleAssembly new.	stdDocs directoryIndex: 'index.html index.htm'.	stdDocs serveFiles.	stdDocs notFound.	"Now create our main assembly"	ma := ModuleAssembly core.	ma alias: '/one' to: 		[ma documentRoot: (FileDirectory default directoryNamed: 'one').		ma addAssembly: stdDocs].	ma alias: '/two' to:		[ma documentRoot: (FileDirectory default directoryNamed: 'two').		ma addAssembly: stdDocs].	ma addPlug: 		[:request | HttpResponse fromString: 			'<a href="one">go to one</a> <a href="two">go to two</a>'].	(HttpService startOn: 8080 named: 'Example') module: ma rootModule.!!ModNotFound commentStamp: 'svp 5/15/2003 17:20' prior: 0!I am a simple module that if reached will generate a not found response.  This is useful if you do not wish to continue processing modules add some point in your module assembly.The following is a simple example using the #notFound message of ModuleAssembly:	| ma |	ma := ModuleAssembly core.	ma alias: '/one' to: 		[ma documentRoot: (FileDirectory default directoryNamed: 'one').		ma directoryIndex: 'index.html index.htm'.		ma serveFiles.		ma notFound].	ma addPlug: 		[:request | HttpResponse fromString: 			('<a href="one">go to one</a> If the path begins with',			' "/one" we should never end up here')].	(HttpService startOn: 8080 named: 'Example') module: ma rootModule.By contrast, the following example will end up in our default response if no matching file is found.	| ma |	ma := ModuleAssembly core.	ma alias: '/one' to: 		[ma documentRoot: (FileDirectory default directoryNamed: 'one').		ma directoryIndex: 'index.html index.htm'.		ma serveFiles].	ma addPlug: 		[:request | HttpResponse fromString: '<a href="one">go to one</a>'].	(HttpService startOn: 8080 named: 'Example') module: ma rootModule.!!ModSession commentStamp: 'svp 5/15/2003 16:15' prior: 0!I add provide a session context to sub modules.  To access the current session, use "KomSession current"...all requests passing through this module will be assigned a session, and responses from its subModules (if any) will be given a cookie to assign the session id.Notes:  This is basically a straight translation of the old Comanche session handling.  Ideas for the future include:- add the ability to use post/query fields instead of cookies- add methods to assist in building Urls with session query parameters added- be able to specify the cookie/field name that is used to store the session- be able to tie sessions to a specific IP address (to minimize risk of man in the middle attacks)Required Bindings:	HttpRequest currentExported Bindings:	KomSession currentExample:In the following example, we enable session tracking, set the session timeout to 30 minutes, and show the session id in the web browser.	| ma |	ma _ ModuleAssembly core.	ma trackSessions.	ma sessionTimeout: 30.  "Sets the session timeout to 30 minutes"	ma addPlug:		[:request | 		HttpResponse fromString: 			('Your session id is: ', KomSession current id)].	(HttpService startOn: 8080 named: 'Example') plug: ma rootModule.!!ModVhost commentStamp: 'svp 5/15/2003 17:37' prior: 0!This module exports a string that is created based on a template.  Other modules may access and use the resulting string as they see fit (using "ModVhost string").  ModVhostDoc uses the ModVhost string to establish a document root based on the virtual host name.  ModVhostAlias uses the ModVhost string to look for a match when deciding whether or not to process its subModules.  See the examples below for more details.The format of the template string is designed to be compatible with Apache's virtual hosting support.  The following is adapted from the Apache documentation:-----%% inserts a percent%p inserts the socket port number (as it is known to the client)%N.M inserts parts of the fully qualified domain name (FQDN, as it is know to the client)N and M are used to specify substrings of the FQDN. N selects from the dot-separated components of the FQDN, and M selects characters within whatever N has selected. M is optional and defaults to zero if it isn't present; the dot must be present if and only if M  is present. The interpretation is as follows:0 	the whole name1 	the first part2 	the second part-1 	the last part-2 	the penultimate part2+ 	the second and all subsequent parts-2+ 	the penultimate and all preceding parts1+ and -1+ 	the same as 0If N or M is greater than the number of parts available a single underscore is interpolated.-----The following is an example configuration for mass virtual hosting of file based content (it uses ModVhostDoc to interpret the host string produced by ModVhost):	| ma |	ma _ ModuleAssembly core.	ma virtualDocumentRoot: (FileDirectory default fullNameFor: '%0') do:		[ma directoryIndex: 'index.html index.htm'.		ma serveFiles].	(HttpService startOn: 8080 named: 'Example') module: ma rootModule.In this example, the document root for the web server will be determined using the entire FQDN as the final element in the document root.Of course, virtual hosting does not need to be restricted to file serving.  Similar to ModAlias, you can use the virtual host name to control which modules get processed.  The following is another example (it uses makes use of ModVhostAlias):	| ma |	ma _ ModuleAssembly core.	ma virtualHost: 'localhost' do:		[ma addPlug: 			[ :request |			HttpResponse fromString: 'You are seeing content for localhost']].	ma addPlug:		[ :request |		HttpResponse fromString: 'You are seeing default content'].	(HttpService startOn: 8080 named: 'Example') module: ma rootModule.In this example, you will see different content depending on whether you access the server using http://localhost:8080 or http://127.0.0.1:8080.  Another example might be hosting Seaside (see http://www.beta4.com/seaside2 for information) applications on a separate host name.!!ModVhostAlias commentStamp: 'svp 5/15/2003 00:54' prior: 0!See the class comments for ModVhost for using Comanche's virtual hosting features.!!HttpAdaptor commentStamp: 'svp 5/15/2003 10:27' prior: 0!kom/4.12 (Comanche/4.12)HTTPAdaptor (kom/4.8; bolot 4/2/2001 18:48)- logging is removed from kom46 core- so is Process>>contextAt:ifAbsent:- kom48 adds rudimentary persistent connections-- see keepAliveConnection senders (also in Preferences)Comment from kom46:I encapsulate the HTTP protocol from my clients (who must support the HttpPlug interface).  I use an HttpRequest to pick apart a request and I use an HttpResponse to formulate a response.  Mainly, I broker the conversation, turning a request into a message send (to an HttpPlug) and converting the answer to an HttpResponse.  Thus, my clients must simply implement a message based protocol (eliminating the need for them to be concerned with HTTP syntax).Instance Variables:stream <Stream> - A bidirectional stream for reading and writing request (note: previously Comanche separated the readStream and writeStream, if you need to separate the read stream from the write stream you can create a new bidirectional stream class that uses two separate streams for reading and writing)httpService <HttpService> - an instance of an HttpService or a protocol compatible substitute; this object is used as the error handler and the target of http request dispatchingpostProcessors <OrderedCollection | nil> - this is a list of objects that are sent post processing messages (after the response has been written); this enables objects to request that they get called after the HttpAdaptor has actually written the response onto the write stream!!HttpRequest commentStamp: '<historical>' prior: 0!kom/4.12 (Comanche/4.12)bolot 2/20/2002 13:53- rawUrl = the entire request string- url = rawUrl up to ?- queryString = rawUrl after the first ?- rawUrl == url?queryStringHttpRequest (bolot 4/2/2001 18:51)- HTTP request object wrapper- handles details of HTTP-- headers, formats, etc.- as of kom47, handles multipart posts- in kom49 (or kom50) a minor refactoring will happen!!HttpResponse commentStamp: '<historical>' prior: 0!kom/4.12 (Comanche/4.12)bolot 2/20/2002 13:55- cookies support- defaultChunkSize delegates to Kom5PreferencesHttpResponse (bolot 4/2/2001 18:52)Comment from kom46:I am a response to an HttpRequest.  I can formulate an HTTP response and send it out over a socket.  An HttpAdapter will accept an HttpRequest, dispatch a method call to an HttpPlug (which will result in a stream or an error), and then formulat an instance of me to deliver the response to the client.!!HttpPartialResponse commentStamp: '<historical>' prior: 0!kom/4.12 (Comanche/4.12)HttpPartialResponse (bolot 4/2/2001 18:49)- not a very accurate name- a subclass of HttpResponse-- allows for long-execution modules to write directly to the client!!KomAuthDb commentStamp: 'svp 5/14/2003 22:56' prior: 0!I am a very basic authentication database.  My passwords instvar is a dictionary whose keys are user names and values are hexadecimal encodings of passwords.  Subclasses could override the encode: and decode:using: methods to provide a better "encryption" of the passwords.  That wasn't done in this class because it would add a dependency on the cryptography package.  I am designed to be used with ModAuth, which sends us the message #verifyPassword:forUser: to validate user ids and passwords.!!KomSession commentStamp: 'svp 5/15/2003 16:38' prior: 0!I am a session and am used by ModSession to associate sessions with incoming http requests.  After a period of inactivity, sessions are expired.Notes: This class is a hold over from the old HttpSession class.  This class was renamed because it is not part of the HTTP protocol.  See ModSession for details on how to establish sessions.  You may use the attributes instance variable to hold additional state (such as user object for your application).  Alternatively, other modules may use the session to assign additional dynamic bindings.For examples see the class comments for ModSession.!!ModuleAssembly commentStamp: 'svp 5/15/2003 17:31' prior: 0!I am a module assembly.  I provide a convienient mechanism for assembling modules into a module hierarchy for use by an HttpService.  The following is a very simple example of how to use a ModuleAssembly:	| ma |	ma _ ModuleAssembly core.	ma addPlug:		[ :request |		HttpResponse fromString: 'Hello World!!!!!!'].	(HttpService startOn: 8080 named: 'Example') module: ma rootModule.!!MultipartChunk commentStamp: '<historical>' prior: 0!kom/4.12 (Comanche/4.12)MultipartChunkHeader (kom/4.8; bolot 4/2/2001 18:52)- in kom49 (or kom50) this will be used only for internal purposes-- applications will access multipart form fields through regular fieldAt: techniqueComment from kom46:- this is a hack (bolot 10/25/2000 17:17)- store a part's (from a multipart message) header information:-- header (raw)-- properties (extracted and converted info, such as file-name, content-length, etc.)!!NetworkHost commentStamp: 'svp 3/5/2003 10:25' prior: 0!I am an abstaction of a network host (in DNS parlance) and port number.  I can abstract named or numbered host names (as allowed in a URI for example).	NetworkHost fromString: 'www.yahoo.com:8080'	NetworkHost fromString: '192.168.1.1:80'!!Color methodsFor: '*KomHttpServer' stamp: 'cwp 6/10/2004 21:53'!hex	^ (rgb hex allButFirst: 3) asLowercase! !!HttpService class methodsFor: 'bindings' stamp: 'svp 4/15/2003 15:00'!current	^#'ComancheHttpService-Current' binding! !!HttpService class methodsFor: 'bindings' stamp: 'svp 4/15/2003 15:00'!current: anInstance	#'ComancheHttpService-Current' binding: anInstance! !!HttpService class methodsFor: 'accessing' stamp: 'svp 4/22/2003 09:58'!initialize	self initializeServerType! !!HttpService class methodsFor: 'accessing' stamp: 'gc 8/23/2008 17:57'!initializeServerType	"self initializeServerType"	ServerType := String streamContents: 					[:s | 					s nextPutAll: self serviceName.					s nextPutAll: '/'.					s nextPutAll: self version.					s nextPutAll: ' ('.					s nextPutAll: self platform.					s nextPutAll: ') '.					ComancheModule withAllSubclassesDo: 							[:modClass | 							modClass version isEmpty 								ifFalse: 									[s nextPutAll: modClass version.									s nextPut: $ ]]]! !!HttpService class methodsFor: 'accessing' stamp: 'ab 11/13/2003 12:31'!platform	^SmalltalkImage current platformName! !!HttpService class methodsFor: 'accessing' stamp: 'svp 4/22/2003 09:53'!serverType	^ServerType! !!HttpService class methodsFor: 'accessing' stamp: 'gc 8/23/2008 17:56'!serviceName	^ 'KomHttpServer'! !!HttpService class methodsFor: 'accessing' stamp: 'GiovanniCorriga 8/30/2009 15:10'!version	^'7.1.2'! !!HttpService methodsFor: 'error handling' stamp: 'brp 10/2/2004 15:51'!detailedErrorResponseStatus: aSymbol exception: anException 	^self errorResponseStatus: aSymbol		description: '<pre><b>' , anException description , '</b><br><br>' 				, anException signalerContext longStack , '</pre>'! !!HttpService methodsFor: 'error handling' stamp: 'svp 5/16/2003 23:08'!errorResponseStatus: aSymbol description: aString	^HttpResponse		status: aSymbol		contents: '<!!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"><html><head><title>', (HttpResponse statusCodeFor: aSymbol), ' ', (HttpResponse statusDescriptionFor: aSymbol), '</title></head><body><h1>', (HttpResponse statusDescriptionFor: aSymbol),'</h1>', aString, '<p><hr><address>', self serverDescription,'</address></body></html>'! !!HttpService methodsFor: 'error handling' stamp: 'svp 5/12/2003 16:27'!handleDispatchErrorsIn: aBlock	"Note: We could break the error handling out into a separate	object to allow more sophisticated error handling scenarios, however	you can achieve the same result by writing a module that traps 	errors and provides special handling.  So, here, we just provide three	simple and common possibilities for handling dispatch errors."	"Debug mode doesn't handle the error (you'll get a walkbalk)"	self isDebugMode ifTrue: [^aBlock value].	"Verbose mode will send a long stack dump to the browser"	self isVerboseMode ifTrue: 		[^aBlock on: Error do: 			[ :ex | 			self				detailedErrorResponseStatus: #serverError				exception: ex]].	"By default, operate in deployment mode (just the exception description is	displayed in the browser)"	^aBlock on: Error do: 		[ :ex | 		self			errorResponseStatus: #serverError			description: ex description]! !!HttpService methodsFor: 'error handling' stamp: 'svp 5/12/2003 16:45'!handleResponseWritingError: anException	"Handle errors that occur when trying to write out a response."	"Debug mode doesn't handle the error (you'll get a walkbalk)"	self isDebugMode ifTrue: [^anException pass].	"Verbose mode will send a long stack dump to the browser"	self isVerboseMode ifTrue: 		[^self			detailedErrorResponseStatus: #serverError			exception: anException].	"By default, operate in deployment mode (just the exception description is	displayed in the browser)"	^self		errorResponseStatus: #serverError		description: anException description! !!HttpService methodsFor: 'initialize-release' stamp: 'svp 5/7/2003 04:18'!initialize	super initialize.	mode := #deployment.! !!HttpService methodsFor: 'error handling' stamp: 'svp 5/7/2003 04:18'!isDebugMode	^self mode == #debug! !!HttpService methodsFor: 'error handling' stamp: 'svp 4/15/2003 22:36'!isDeploymentMode	^self isVerboseMode not and: [self isDebugMode not]! !!HttpService methodsFor: 'error handling' stamp: 'svp 5/7/2003 04:18'!isVerboseMode	^self mode == #verbose! !!HttpService methodsFor: 'configuration' stamp: 'svp 5/7/2003 04:56'!keepAlive	^self withBindingsDo: [HttpAdaptor keepAlive]! !!HttpService methodsFor: 'configuration' stamp: 'svp 5/7/2003 04:56'!keepAlive: aBool	self withBindingsDo: [HttpAdaptor keepAlive: aBool]! !!HttpService methodsFor: 'error handling' stamp: 'svp 5/7/2003 04:21'!mode	"<#deployment | #debug | #verbose > - Answers the debugging	mode of the receiver."	^mode! !!HttpService methodsFor: 'error handling' stamp: 'svp 5/7/2003 04:21'!mode: aSymbol	"aSymbol <#deployment | #debug | #verbose > - Sets the debugging	mode of the receiver."	mode := aSymbol! !!HttpService methodsFor: 'pluggable' stamp: 'svp 5/15/2003 16:49'!module: aComancheModule	"This message is useful if you wish to 	validate your module."	aComancheModule validate.	self plug: aComancheModule! !!HttpService methodsFor: 'pluggable' stamp: 'svp 4/9/2003 00:20'!onRequestDispatch: aSelector to: anObject	self plug: 		(MessageSend 			receiver: anObject 			selector: aSelector 			arguments: #(nil))! !!HttpService methodsFor: 'pluggable' stamp: 'svp 4/9/2003 00:32'!onRequestDo: plugBlock	self plug: plugBlock! !!HttpService methodsFor: 'configuration' stamp: 'svp 4/16/2003 13:46'!perceivedHostName	"Answer the host name as perceived by the client.  If there	is no current HttpRequest, fall back on the name as determined	on the server."	| request |	(request := HttpRequest current) ifNotNil: 		[^request networkHost nameString].	^self serverHostName! !!HttpService methodsFor: 'configuration' stamp: 'svp 4/16/2003 13:48'!perceivedPortNumber	"Answer the port number as it is perceived by the client (which could	be different from the port we are listening on if for example you are 	using port forwarding rules to reach your server).  If there is no 	current http request, fall back on the real port number that we are 	listening on."	| request |	(request := HttpRequest current) ifNotNil: 		[^request networkHost port].	^self portNumber! !!HttpService methodsFor: 'pluggable' stamp: 'svp 4/9/2003 00:21'!plug	^plug! !!HttpService methodsFor: 'pluggable' stamp: 'svp 4/9/2003 00:21'!plug: aMonadicValuable	plug := aMonadicValuable! !!HttpService methodsFor: 'startup and shutdown' stamp: 'svp 4/22/2003 09:59'!prepareForStartup	ServerHostName := nil.	self class initializeServerType.! !!HttpService methodsFor: 'serving' stamp: 'svp 5/12/2003 17:26'!processHttpRequest: anHttpRequest	"Subclasses can override this method and answer an instance of an 	HttpResponse.  Alternatively, if we have a plug (typically a BlockContext	or a MessageSend), then invoke it."	plug ifNotNil: [^plug processHttpRequest: anHttpRequest].	^self subclassResponsibility! !!HttpService methodsFor: 'serving' stamp: 'brp 10/2/2004 15:17'!serve: aSocket 	self class current: self.	HttpAdaptor readAndWriteToSocket: aSocket service: self! !!HttpService methodsFor: 'configuration' stamp: 'svp 4/15/2003 09:38'!serverDescription	^String streamContents: [ :strm | self serverDescriptionOn: strm]! !!HttpService methodsFor: 'configuration' stamp: 'svp 4/16/2003 13:44'!serverDescriptionOn: strm	strm nextPutAll: self serverType.	strm nextPutAll: ' Server at '.	strm nextPutAll: self perceivedHostName.	strm nextPutAll: ' Port '.	strm nextPutAll: self perceivedPortNumber asString.! !!HttpService methodsFor: 'configuration' stamp: 'svp 4/16/2003 13:45'!serverHostName	"Cache the host name (it can take several milliseconds to make this call	on some platforms.  The cache value will be reset every time the image	is started"	^ServerHostName ifNil:		[ServerHostName := NetNameResolver 								nameForAddress: NetNameResolver localHostAddress 								timeout: 5]! !!HttpService methodsFor: 'configuration' stamp: 'svp 4/22/2003 09:57'!serverType	^self class serverType! !!HttpService methodsFor: 'error handling' stamp: 'svp 5/7/2003 04:18'!setDebugMode	self mode: #debug! !!HttpService methodsFor: 'error handling' stamp: 'svp 5/7/2003 04:19'!setDeploymentMode	self mode: #deployment! !!HttpService methodsFor: 'error handling' stamp: 'svp 5/7/2003 04:19'!setVerboseMode	self mode: #verbose! !!HttpService methodsFor: 'starting and stopping' stamp: 'svp 4/22/2003 10:00'!start	self class initializeServerType.	^super start! !!ReadWriteStream methodsFor: '*KomHttpServer' stamp: 'SVP 8/23/1999 19:07'!asHttpResponseTo: request	^HttpResponse fromStream: self! !!SocketStream methodsFor: '*KomHttpServer' stamp: 'lr 12/4/2009 15:25'!upToAll: aStringOrByteArray bufferSize: maxSize do: aBlock	"A variant of #upToAll: that executes a block chunk wise for the result instead of	returning the result as a collection. See #upToAll: for details."	| index sz result lastRecentlyRead searchedSoFar insz |	sz := aStringOrByteArray size.	searchedSoFar := 0.	lastRecentlyRead := 0.	index := 0.	[self atEnd not and: [		insz := self inBufferSize.		((lastRecentlyRead = 0 and: [self isInBufferEmpty not]) or: [insz > maxSize]) ifTrue: [			"Data begins at lastRead + 1."			index := inBuffer indexOfSubCollection: aStringOrByteArray startingAt: lastRead + 1.			searchedSoFar := insz.			(index > 0 and: [(index + sz) > inNextToWrite]) ifTrue: [				"Oops, hit partially or completely in dead buffer area.				This is probably due to old data, so we ignore it.				No point in cleaning the dead area to avoid hits - it will still search it."				index := 0].			index = 0 ifTrue: ["Just searched and did not find it, we only consume most of inBuffer to create overlap"				aBlock value: (self nextInBuffer: (searchedSoFar - sz)) ].			].		index = 0]]				whileTrue: [					recentlyRead = 0						ifTrue: ["blocking call for now, we don't want to poll"							self receiveData]						ifFalse: [							self receiveAvailableData].					lastRecentlyRead := recentlyRead].	index > 0		ifTrue: ["found it"			result := self nextInBuffer: index - lastRead - 1.			self skip: sz.			^aBlock value: result]		ifFalse: ["atEnd"			^aBlock value: self nextAllInBuffer]! !!Form methodsFor: '*KomHttpServer' stamp: 'bolot 2/14/2000 15:59'!asHttpResponseTo: request	^HttpResponse fromMIMEDocument: self asWebImage! !!Form methodsFor: '*KomHttpServer' stamp: 'gc 10/24/2007 10:06'!asWebImage	"return a MIMEDocument"	| aStream |	aStream := (RWBinaryOrTextStream on: String new).	GIFReadWriter putForm: (self asFormOfDepth: 8) onStream: aStream.	aStream reset.	^MIMEDocument contentType: MIMEDocument contentTypeGif content: aStream! !!TextMorph methodsFor: '*KomHttpServer' stamp: 'bolot 10/16/2001 21:45'!asHttpResponseTo: request	^self asText asHttpResponseTo: request! !!Time class methodsFor: '*KomHttpServer' stamp: 'svp 4/25/2003 17:35'!deadlineSecs: secs	"Return a deadline time the given number of seconds from now."	"SVP: copied here from Socket because I think it's more appropriate here"	^ self millisecondClockValue + (secs * 1000)! !!StandardFileStream methodsFor: '*KomHttpServer' stamp: 'francoisstephany 7/21/2009 23:21'!contentType	^self mimeType! !!StandardFileStream methodsFor: '*KomHttpServer' stamp: 'SVP 8/24/1999 15:47'!mimeType	^MIMEDocument guessTypeFromName: self name.! !!TextURL methodsFor: '*KomHttpServer' stamp: 'bolot 3/17/2001 22:40'!printHtmlCloseTagOn: strm	strm		nextPutAll: '</A>'! !!TextURL methodsFor: '*KomHttpServer' stamp: 'bolot 3/17/2001 22:40'!printHtmlOpenTagOn: strm	strm		nextPutAll: '<A HREF="';		nextPutAll: self info;		nextPutAll: '">'! !!TimeStamp methodsFor: '*KomHttpServer' stamp: 'svp 5/15/2003 12:40'!printCLFFormatOn: aStream	| d t |	d := self date.	t := self time.	aStream nextPut: $[.	d printOn: aStream format: #(1 2 3 $/ 2 1 2).	aStream nextPut: $:.	t print24: true on: aStream.	aStream nextPut: $].! !!TimeStamp methodsFor: '*KomHttpServer' stamp: 'brp 10/2/2004 17:07'!printCLFFormatOn: aStream timezoneOffset: zoneOffset 	| d t |	d := self date.	t := self time.	aStream nextPut: $[.	d printOn: aStream format: #(1 2 3 $/ 2 1 2).	aStream nextPut: $:.	t print24: true on: aStream.	aStream nextPut: $ .	zoneOffset  < 0 		ifTrue: [aStream nextPut: $-]		ifFalse: [aStream nextPut: $+].	zoneOffset abs < 10 ifTrue: [aStream nextPut: $0].	zoneOffset abs printOn: aStream.	aStream nextPutAll: '00'.	aStream nextPut: $].! !!TimeStamp methodsFor: '*KomHttpServer' stamp: 'svp 4/22/2003 00:41'!printHttpFormat	^String streamContents: [ :strm | self printHttpFormatOn: strm]! !!TimeStamp methodsFor: '*KomHttpServer' stamp: 'gk 11/4/2004 13:18'!printHttpFormatOn: aStream	"Print receiver's date and time on aStream in HTTP format;	'<day>, DD <mth> YYYY HH:MM:SS GMT' ->	'Thu, 01 Dec 1994 16:00:00 GMT'	"		| d t |	d := self date.	t := self time.	aStream nextPutAll: (d weekday copyFrom: 1 to: 3).	aStream nextPutAll: ', '.	d printOn: aStream format: #(1 2 3 $  2 1 2).	aStream nextPut: $ .	t print24: true on: aStream.	aStream nextPutAll: ' GMT'.! !!HttpFormDictionary methodsFor: 'accessing' stamp: 'gc 10/24/2007 10:09'!at: key	^ self at: key ifAbsent: [self errorKeyNotFound]! !!HttpFormDictionary methodsFor: 'accessing' stamp: 'brp 10/2/2004 14:53'!at: key ifAbsent: aBlock 	| value valueSize |	value := super at: key ifAbsent: [^aBlock value].	valueSize := value size.	0 = valueSize 		ifTrue: 			["is this not absent?"			value := aBlock value].	value := (1 = valueSize) ifTrue: [value first] ifFalse: [value copy].	^value! !!HttpFormDictionary methodsFor: 'accessing' stamp: 'Koubo 3/17/2002 11:55'!at: key put: value	(self includesKey: key)		ifFalse: [super at: key put: (OrderedCollection new)].	(self rawAt: key) add: value.	^value! !!HttpFormDictionary methodsFor: 'accessing' stamp: 'Koubo 3/17/2002 11:55'!booleanAt: key	^(self rawAt: key) first = 'true'! !!HttpFormDictionary methodsFor: 'accessing' stamp: 'bolot 6/22/2001 12:34'!booleansAt: key	^(self rawAt: key) collect: [:value | value == 'true']! !!HttpFormDictionary methodsFor: 'accessing' stamp: 'Koubo 3/17/2002 11:55'!numberAt: key	^[(self rawAt: key) first asNumber]		ifError: [:err :rcvr | Float nan]! !!HttpFormDictionary methodsFor: 'accessing' stamp: 'bolot 6/22/2001 12:34'!numbersAt: key	^(self rawAt: key) collect: [:value |		[value asNumber] ifError: [:err :rcvr | Float nan]]! !!HttpFormDictionary methodsFor: 'printing' stamp: 'Koubo 3/17/2002 11:55'!printElementsOn: aStream	aStream nextPut: $(.	self keysSortedSafely do:		[:key | aStream print: key; nextPutAll: '->'; print: (self rawAt: key); space].	aStream nextPut: $)! !!HttpFormDictionary methodsFor: 'accessing' stamp: 'Koubo 3/17/2002 11:55'!rawAt: key	^super at: key ifAbsent: [self errorKeyNotFound]! !!HttpFormDictionary methodsFor: 'accessing' stamp: 'bolot 5/2/2002 17:46'!rawAt: key ifAbsent: aBlock	^super at: key ifAbsent: aBlock! !!HttpFormDictionary methodsFor: 'accessing' stamp: 'Koubo 3/17/2002 11:55'!stringAt: key	^(self rawAt: key) first! !!HttpFormDictionary methodsFor: 'accessing' stamp: 'bolot 6/22/2001 12:35'!stringsAt: key	^(self rawAt: key) copy! !!Morph methodsFor: '*KomHttpServer' stamp: 'bolot 10/16/2001 21:33'!asHttpResponseTo: request	^self imageForm asHttpResponseTo: request! !!BlockClosure methodsFor: '*KomHttpServer' stamp: 'damiencassou 4/5/2009 18:58'!doPostProcessingFor: request response: response	"The method is to provide compatibility with HttpAdaptor's post processing.	The receiver is expected to accept two arguments."	^self value: request value: response! !!BlockClosure methodsFor: '*KomHttpServer' stamp: 'damiencassou 4/5/2009 18:58'!processHttp	"<Boolean> The receiver should answer a boolean to indicate whether 	there is an HttpResponse available (accessed by HttpResponse current).	If the receiver takes no arguments, then assume that it answers a Boolean	and uses dyanmic bindings to access the current request/response, otherwise	pass in the current request and set the current response."	| response |	self numArgs = 0		ifTrue: [^self copy fixTemps value].	self numArgs = 1		ifTrue: 			[response := self copy fixTemps value: HttpRequest current.			response ifNotNil:				[HttpResponse current: response.				^true].			^false].! !!BlockClosure methodsFor: '*KomHttpServer' stamp: 'damiencassou 4/5/2009 18:58'!processHttpRequest: request	"<HttpResponse> The receiver should answer an HttpResponse for sending 	to the client."	self numArgs = 1		ifTrue: [^self copy fixTemps value: request].	self numArgs = 0		ifTrue: [^self copy fixTemps value].! !!BlockClosure methodsFor: '*KomHttpServer' stamp: 'damiencassou 4/5/2009 18:58'!processVisitor: aKomModuleVisitor	^aKomModuleVisitor doBlock: self! !!BlockClosure methodsFor: '*KomHttpServer' stamp: 'damiencassou 4/5/2009 18:58'!validateForStack: anArray	"Do nothing, provided to provide compatibility with ComancheModule"! !!BlockClosure methodsFor: '*KomHttpServer' stamp: 'damiencassou 4/5/2009 18:58'!visitWithValuable: aMonadicValuable	aMonadicValuable value: self.! !!String methodsFor: '*KomHttpServer' stamp: 'bolot 2/5/2001 20:01'!asHttpResponseTo: request	^HttpResponse fromString: self! !!TextEmphasis methodsFor: '*KomHttpServer' stamp: 'bolot 3/17/2001 22:39'!printHtmlCloseTagOn: strm	emphasisCode = 1 ifTrue: [strm nextPutAll: '</B>'].	emphasisCode = 2 ifTrue: [strm nextPutAll: '</I>'].	emphasisCode = 4 ifTrue: [strm nextPutAll: '</U>'].	emphasisCode = 16 ifTrue: [strm nextPutAll: '</S>']! !!TextEmphasis methodsFor: '*KomHttpServer' stamp: 'bolot 3/17/2001 22:39'!printHtmlOpenTagOn: strm	emphasisCode = 1 ifTrue: [strm nextPutAll: '<B>'].	emphasisCode = 2 ifTrue: [strm nextPutAll: '<I>'].	emphasisCode = 4 ifTrue: [strm nextPutAll: '<U>'].	emphasisCode = 16 ifTrue: [strm nextPutAll: '<S>']! !!MIMEDocument class methodsFor: '*KomHttpServer' stamp: 'svp 12/16/1999 10:35'!contentTypeGif	^'image/gif'! !!MIMEDocument class methodsFor: '*KomHttpServer' stamp: 'gh 8/30/2002 10:21'!contentTypeTextCSS	^'text/css'! !!MessageSend methodsFor: '*KomHttpServer' stamp: 'svp 5/15/2003 10:10'!doPostProcessingFor: request response: response	"The method is to provide compatibility with HttpAdaptor's post processing.	The receiver is expected to accept two arguments."	^self value: request value: response! !!MessageSend methodsFor: '*KomHttpServer' stamp: 'svp 5/13/2003 09:53'!processHttp	"<Boolean> The receiver should answer a boolean to indicate whether 	there is an HttpResponse available (accessed by HttpResponse current).	If the receiver takes no arguments, then assume that it answers a Boolean	and uses dyanmic bindings to access the current request/response, otherwise	pass in the current request and set the current response."	| response |	arguments size = 0		ifTrue: [^self value].	arguments size = 1		ifTrue: 			[response := self value: HttpRequest current.			response ifNotNil:				[HttpResponse current: response.				^true].			^false]	! !!MessageSend methodsFor: '*KomHttpServer' stamp: 'svp 4/17/2003 09:00'!processHttpRequest: request	"<HttpResponse> The receiver should answer an HttpResponse for sending 	to the client."	arguments size = 1		ifTrue: [^self value: HttpRequest current].	arguments size = 0		ifTrue: [^self value].	! !!MessageSend methodsFor: '*KomHttpServer' stamp: 'svp 5/16/2003 12:34'!processVisitor: aKomModuleVisitor	^aKomModuleVisitor doMessageSend: self! !!MessageSend methodsFor: '*KomHttpServer' stamp: 'svp 5/16/2003 23:44'!validateForStack: anArray	"Do nothing, provided to provide compatibility with ComancheModule"! !!MessageSend methodsFor: '*KomHttpServer' stamp: 'svp 5/16/2003 13:22'!visitWithValuable: aMonadicValuable	aMonadicValuable value: self.! !!ByteArray methodsFor: '*KomHttpServer' stamp: 'svp 5/15/2003 12:23'!asIpString	^String streamContents: 		[ :strm |		self do: 			[ :ea |			strm nextPutAll: ea asString.			strm nextPut: $.].		strm skip: -1]! !!TextFontChange methodsFor: '*KomHttpServer' stamp: 'bolot 3/17/2001 22:40'!printHtmlCloseTagOn: strm	strm		nextPutAll: '</FONT>'! !!TextFontChange methodsFor: '*KomHttpServer' stamp: 'bolot 3/17/2001 22:40'!printHtmlOpenTagOn: strm	strm		nextPutAll: '<FONT SIZE="';		nextPutAll: (self fontNumber + 2) asString;		nextPutAll: '">'! !!KomLogger class methodsFor: 'as yet unclassified' stamp: 'svp 5/16/2003 11:35'!on: aStream	^self basicNew		streams: (Set new add: aStream; yourself);		yourself! !!KomLogger methodsFor: 'as yet unclassified' stamp: 'svp 5/16/2003 11:47'!addStream: aStream	"Add a new output stream to the logger"	self streams add: aStream.	^aStream! !!KomLogger methodsFor: 'as yet unclassified' stamp: 'svp 5/16/2003 11:47'!attachTheTranscript	^self addStream: Transcript.! !!KomLogger methodsFor: 'as yet unclassified' stamp: 'brp 10/2/2004 16:23'!attachTranscript	self detachTheTranscript.	^(self streams detect: [:ea | ea isTranscriptStream] ifNone: [nil]) 		ifNil: [self addStream: TranscriptStream new]! !!KomLogger methodsFor: 'as yet unclassified' stamp: 'svp 5/16/2003 11:49'!detachTheTranscript	self removeStream: Transcript.	^Transcript! !!KomLogger methodsFor: 'as yet unclassified' stamp: 'brp 10/2/2004 16:23'!detachTranscripts	(self streams select: [:ea | ea isTranscriptStream]) 		do: [:ea | self removeStream: ea]! !!KomLogger methodsFor: 'as yet unclassified' stamp: 'svp 5/16/2003 11:36'!logEntryFor: request response: response	"This is the Common Log Format (CLF)"	^String streamContents: 		[ :strm |		strm			nextPutAll: request remoteAddress asIpString;			nextPutAll: ' - ';  "We don't bother with the ident string"			nextPutAll: (ModAuth user ifNil: ['-']);			nextPut: $ .		(TimeStamp fromSeconds: request timestamp)			printCLFFormatOn: strm.		strm nextPutAll: ' "'.		request firstLineOn: strm.		strm nextPutAll: '" '.		strm nextPutAll: response statusCode.		strm nextPut: $ .		strm nextPutAll: (response contentLength ifNil: ['-']) asString.		strm nextPut: Character cr].! !!KomLogger methodsFor: 'as yet unclassified' stamp: 'svp 5/15/2003 11:57'!next	self shouldNotImplement! !!KomLogger methodsFor: 'as yet unclassified' stamp: 'brp 10/2/2004 16:50'!nextPut: anArray 	| logEntry |	logEntry := self logEntryFor: anArray first response: anArray second.	self streams do: 	[:strm | strm nextPutAll: logEntry; endEntry]! !!KomLogger methodsFor: 'as yet unclassified' stamp: 'svp 5/16/2003 11:50'!openTranscript	self attachTranscript openLabel: 'Comanche Logger'! !!KomLogger methodsFor: 'as yet unclassified' stamp: 'svp 5/16/2003 11:49'!removeStream: aStream	"Remove an output stream to the logger"	self streams remove: aStream ifAbsent: [].	^aStream! !!KomLogger methodsFor: 'as yet unclassified' stamp: 'svp 5/16/2003 11:35'!streams	^streams! !!KomLogger methodsFor: 'as yet unclassified' stamp: 'svp 5/16/2003 11:35'!streams: aStream	streams := aStream! !!KomTracer methodsFor: 'as yet unclassified' stamp: 'brp 10/2/2004 16:58'!logEntryFor: request response: response	"This is the Common Log Format (CLF) - the stream is a TranscriptStream"	| aStream |	aStream := self streams anyOne.	aStream		nextPutAll: '-----';		nextPut: Character cr.	request writeOn: aStream.	response writeHeadersOn: aStream.	aStream endEntry.! !!Stream methodsFor: '*KomHttpServer' stamp: 'SVP 8/23/1999 19:07'!asHttpResponseTo: request	^HttpResponse fromStream: self! !!Stream methodsFor: '*KomHttpServer' stamp: 'brp 10/2/2004 16:21'!isTranscriptStream	^ false! !!ComancheModule class methodsFor: 'as yet unclassified' stamp: 'svp 4/16/2003 12:39'!new	^super new initialize! !!ComancheModule class methodsFor: 'accessing' stamp: 'svp 4/22/2003 09:49'!version	"Answer a version string...subclasses that override this method will	have their answers appended to the 'Server' header in HTTP responses."	^''! !!ComancheModule methodsFor: 'accessing' stamp: 'svp 4/15/2003 15:56'!addSubModule: aComancheModule	^self subModules add: aComancheModule! !!ComancheModule methodsFor: 'logging' stamp: 'svp 5/16/2003 13:30'!attachAllLoggersToTheTranscript	self loggers do: [ :ea | ea attachTheTranscript ]! !!ComancheModule methodsFor: 'logging' stamp: 'svp 5/16/2003 13:28'!detachAllLoggersFromTranscripts	self loggers do: [ :ea | ea detachTranscripts]! !!ComancheModule methodsFor: 'error handling' stamp: 'svp 5/2/2003 23:09'!errorResponseStatus: aSymbol description: aString	^HttpService current		errorResponseStatus: aSymbol		description: aString.! !!ComancheModule methodsFor: 'testing' stamp: 'svp 5/16/2003 12:47'!isComancheModule	^true! !!ComancheModule methodsFor: 'testing' stamp: 'svp 4/18/2003 11:58'!isCore	^false! !!ComancheModule methodsFor: 'testing' stamp: 'svp 5/15/2003 17:27'!isDir	^false! !!ComancheModule methodsFor: 'testing' stamp: 'svp 5/15/2003 15:54'!isDoc	^false! !!ComancheModule methodsFor: 'testing' stamp: 'svp 5/16/2003 12:10'!isLog	^false! !!ComancheModule methodsFor: 'testing' stamp: 'svp 5/15/2003 16:13'!isSession	^false! !!ComancheModule methodsFor: 'testing' stamp: 'svp 5/15/2003 17:24'!isVhost	^false! !!ComancheModule methodsFor: 'logging' stamp: 'svp 5/16/2003 13:23'!loggers	| answer |	answer := OrderedCollection new.	self visitWithValuable: 		[ :mod |		(mod isComancheModule and: [mod isLog]) 			ifTrue: [answer add: mod logger]].	^answer! !!ComancheModule methodsFor: 'validation' stamp: 'svp 5/16/2003 12:57'!modulesOnStack	| tmp answer |	answer := OrderedCollection new.	tmp := thisContext.	[tmp notNil] whileTrue:		[tmp receiver isComancheModule			ifTrue: [answer add: tmp receiver].		tmp := tmp sender].	^answer asArray! !!ComancheModule methodsFor: 'logging' stamp: 'svp 5/16/2003 13:25'!openTranscriptsOnAllLoggers	self loggers do: [ :ea | ea openTranscript]! !!ComancheModule methodsFor: 'accessing' stamp: 'svp 4/23/2003 21:57'!options	^'GET,HEAD,POST,OPTIONS,TRACE'! !!ComancheModule methodsFor: 'processing' stamp: 'svp 4/15/2003 17:57'!processHttp	"<Boolean> Subclasses should override this method to process	the current http request (accessed via HttpRequest current).	Answer true if a response has been made available (via 	HttpResponse current:) and false if no response was generated."	self subclassResponsibility! !!ComancheModule methodsFor: 'processing' stamp: 'svp 4/17/2003 08:45'!processHttpRequest: request	"<HttpResponse>"	self processHttp.	^HttpResponse current! !!ComancheModule methodsFor: 'processing' stamp: 'svp 4/15/2003 15:58'!processSubModules	self subModulesDo: 		[ :module |		module processHttp ifTrue: [^true]].	^false! !!ComancheModule methodsFor: 'visitor' stamp: 'svp 5/16/2003 12:25'!processVisitor: aKomModuleVisitor	^aKomModuleVisitor doComancheModule: self! !!ComancheModule methodsFor: 'accessing' stamp: 'svp 4/15/2003 15:58'!subModules	^subModules ifNil: [subModules := OrderedCollection new]! !!ComancheModule methodsFor: 'processing' stamp: 'svp 4/15/2003 15:57'!subModulesDo: aBlock	subModules ifNotNil: 		[subModules do: aBlock]! !!ComancheModule methodsFor: 'validation' stamp: 'svp 5/16/2003 12:52'!validate	| validator |	validator := KomModuleValidator new.	self visitModules: validator.	validator problems isEmpty 		ifFalse: [self error: 'validate of the module hierarchy failed']	! !!ComancheModule methodsFor: 'validation' stamp: 'svp 5/16/2003 13:08'!validateContext: problems	"Validation is successful by default, subclass to check the 	context stack for the the presence of required modules and add	to the list of problems"	self validateForStack: self modulesOnStack problems: problems! !!ComancheModule methodsFor: 'validation' stamp: 'svp 5/16/2003 15:41'!validateForStack: anArray	| probs |	probs := OrderedCollection new.	self validateForStack: anArray problems: probs.	probs isEmpty ifFalse: [self error: 'invalid context for module']! !!ComancheModule methodsFor: 'validation' stamp: 'svp 5/16/2003 12:58'!validateForStack: anArray problems: problems	"Subclasses may wish to override this method to check that	prerequisite modules are on the stack above them"! !!ComancheModule methodsFor: 'visitor' stamp: 'svp 5/16/2003 13:21'!visitModules: aKomModuleVisitor	self visitWithValuable: [ :ea | ea processVisitor: aKomModuleVisitor ].! !!ComancheModule methodsFor: 'visitor' stamp: 'svp 5/16/2003 13:21'!visitWithValuable: aMonadicValuable	aMonadicValuable value: self.	self subModules do: [ :ea | ea visitWithValuable: aMonadicValuable]! !!ModAlias methodsFor: 'as yet unclassified' stamp: 'svp 4/16/2003 21:22'!pathPrefix	^pathPrefix! !!ModAlias methodsFor: 'as yet unclassified' stamp: 'svp 4/16/2003 21:22'!pathPrefix: aString	pathPrefix := aString! !!ModAlias methodsFor: 'as yet unclassified' stamp: 'svp 5/15/2003 17:05'!processHttp	| path |	path := ModCore path.	"check if our prefix matches"	((path beginsWith: pathPrefix) and: 	[path size = pathPrefix size or: [(path at: (pathPrefix size + 1)) = $/]])		ifTrue: 			[ModCore path: (path copyFrom: pathPrefix size + 1 to: path size).			self processSubModules ifTrue: 				[ModCore path: path.				^true]].	"otherwise, reset the path to it's original setting and indicate 	to the caller that we have no response and ."	ModCore path: path.	^false! !!ModAuth class methodsFor: 'bindings' stamp: 'svp 5/15/2003 12:32'!user	^#'ModAuth-user' binding! !!ModAuth class methodsFor: 'bindings' stamp: 'svp 5/15/2003 12:33'!user: userName	^#'ModAuth-user' binding: userName! !!ModAuth methodsFor: 'accessing' stamp: 'svp 5/14/2003 17:37'!authDb	^authDb! !!ModAuth methodsFor: 'accessing' stamp: 'svp 5/14/2003 17:39'!authDb: anAuthDb	authDb := anAuthDb! !!ModAuth methodsFor: 'accessing' stamp: 'svp 5/16/2003 23:08'!authorizationResponse	| answer |	answer := HttpResponse		status: #unauthorized		contents: 'Authentication Required'.	answer fieldAt: 'WWW-Authenticate' put: 'Basic realm="', self realm,'"'.	^answer! !!ModAuth methodsFor: 'processing' stamp: 'svp 4/18/2003 09:22'!decodeAuthorization: aString	^(Base64MimeConverter mimeDecodeToChars:		(ReadStream on: (aString findTokens: ' ') last))			contents! !!ModAuth methodsFor: 'processing' stamp: 'svp 4/18/2003 09:34'!extractAuthInfo: request andDo: aBlock 	| authHeader user pass |	(authHeader := self extractAuthorization: request) ifNil: [^self].	user := self extractUser: authHeader.	pass := self extractPassword: authHeader.	(user isNil or: [pass isNil]) ifTrue: [^self].	^aBlock value: user value: pass! !!ModAuth methodsFor: 'processing' stamp: 'svp 4/18/2003 10:46'!extractAuthorization: request	^(request headerAt: 'Authorization' ifAbsent: [request headerAt: 'authorization' ifAbsent: []])		ifNotNilDo: [:auth | self decodeAuthorization: auth]! !!ModAuth methodsFor: 'processing' stamp: 'svp 4/18/2003 09:29'!extractPassword: auth	^auth ifNotNil: [auth copyAfter: $:]! !!ModAuth methodsFor: 'processing' stamp: 'svp 4/18/2003 09:28'!extractUser: auth	^auth ifNotNil: [auth copyUpTo: $:]! !!ModAuth methodsFor: 'processing' stamp: 'brp 10/2/2004 15:21'!processHttp	| request |	request := HttpRequest current.	self extractAuthInfo: request		andDo: 			[:user :password | 			(self verifyPassword: password forUser: user) 				ifTrue: 					[self class user: user.					^self processSubModules]].	HttpResponse current: self authorizationResponse.	^true! !!ModAuth methodsFor: 'accessing' stamp: 'svp 5/14/2003 23:08'!realm	^realm ifNil: ['/']! !!ModAuth methodsFor: 'accessing' stamp: 'svp 4/18/2003 09:45'!realm: aString	realm := aString! !!ModAuth methodsFor: 'as yet unclassified' stamp: 'svp 5/14/2003 17:37'!verifyPassword: aPassword forUser: userName	^self authDb verifyPassword: aPassword forUser: userName! !!ModAutoIndex class methodsFor: 'as yet unclassified' stamp: 'svp 6/27/2003 16:43'!splitPath: fullName to: pathAndNameBlock	"Take the file name and convert it to the path name of a directory and a local file name within that directory. FileName must be of the form: <dirPath><delimiter><localName>, where <dirPath><delimiter> is optional. The <dirPath> part may contain delimiters."	| delimiter i dirName localName tmpName |	fullName last = $/		ifTrue: [tmpName := fullName copyFrom: 1 to: fullName size - 1]		ifFalse: [tmpName := fullName].	delimiter := $/.	(i := tmpName findLast: [:c | c = delimiter]) = 0		ifTrue:			[dirName := String new.			localName := tmpName]		ifFalse:			[dirName := tmpName copyFrom: 1 to: (i - 1 max: 1).			localName := tmpName copyFrom: i + 1 to: tmpName size].	^ pathAndNameBlock value: dirName value: localName! !!ModAutoIndex methodsFor: 'directory listing' stamp: 'svp 4/16/2003 08:38'!dirEntries: entries request: request on: strm padNamesTo: namePad padSizesTo: sizePad	request url ~= '/' ifTrue: [self parentEntry: request on: strm].	entries do: 		[ :entry |		self entry: entry on: strm padNamesTo: namePad padSizesTo: sizePad].! !!ModAutoIndex methodsFor: 'directory listing' stamp: 'svp 5/2/2003 23:09'!directoryListing: request directory: dir	| entries namePad sizePad |	entries := dir entries.	(request fields includesKey: 'S') ifTrue: 		[entries := entries sortBy: [ :a :b | a fileSize <= b fileSize ]].	(request fields includesKey: 'M') ifTrue: 		[entries := entries sortBy: [ :a :b | a modificationTime <= b modificationTime ]].	(request fields includesKey: 'N') ifTrue: 		[entries := entries sortBy: [ :a :b | a name <= b name ]].	namePad := (entries inject: 16 into: [ :max :ea | ea name size max: max ]) + 1.	sizePad := (entries inject: 4 into: [ :max :ea | ea fileSize printString size max: max ]) + 1.	^String streamContents: [ :strm |		strm nextPutAll: '<!!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">'.		strm nextPutAll: '<html><head><title>Index of '.		strm nextPutAll: request url.		strm nextPutAll: '</title></head><body><h1>Index of '.		strm nextPutAll: request url.		strm nextPutAll: '</h1><pre>      <a HREF="?N=A">Name</a>'.		strm nextPutAll: ((String new: (namePad - 4)) atAllPut: $ ; yourself).		strm nextPutAll: '<a HREF="?M=A">Last modified</a>    '.		strm nextPutAll: ((String new: (sizePad - 4)) atAllPut: $ ; yourself).		strm nextPutAll: '<a HREF="?S=A">Size</a><hr><br>'.		self 			dirEntries: entries 			request: request 			on: strm 			padNamesTo: namePad 			padSizesTo: sizePad.		strm nextPutAll: '</pre><hr><address>'.		strm nextPutAll: HttpService current serverDescription.		strm nextPutAll: '</address></body></html>'].! !!ModAutoIndex methodsFor: 'directory listing' stamp: 'svp 6/27/2003 16:39'!entry: entry on: strm padNamesTo: namePad padSizesTo: sizePad	| sizeString |	sizeString := entry fileSize printString.	entry isDirectory 		ifTrue: [strm nextPutAll: '[DIR]']		ifFalse: [strm nextPutAll: '     '].	strm nextPutAll: ' <a HREF="'.	strm nextPutAll: entry name.	entry isDirectory ifTrue: [strm nextPut: $/].	strm nextPutAll: '">'.	strm nextPutAll: entry name.	strm nextPutAll: '</a>'.	strm nextPutAll: ((String new: (namePad - entry name size)) atAllPut: $ ; yourself).	(Date fromSeconds: (entry modificationTime))		printOn: strm format: #(1 2 3 $- 2 1 2).	strm nextPut: $ .	(Time fromSeconds: (entry modificationTime))		print24: true showSeconds: false on: strm.	strm nextPutAll: ((String new: (sizePad - sizeString size)) atAllPut: $ ; yourself).	strm nextPutAll: sizeString.	strm nextPutAll: String crlf.! !!ModAutoIndex methodsFor: 'directory listing' stamp: 'svp 6/27/2003 16:48'!parentEntry: request on: strm	| tmp parentPath |	tmp := request url copyFrom: 1 to: (request url size - 1).	parentPath := self class splitPath: tmp to: [ :path :nm | path].	parentPath last = $/ ifFalse: [parentPath := parentPath, '/'].	strm nextPutAll: '[DIR] <a HREF="'.	strm nextPutAll: parentPath.	strm nextPutAll: '">Parent Directory</a>'.	strm nextPutAll: '<br>'.! !!ModAutoIndex methodsFor: 'processing' stamp: 'brp 10/2/2004 14:44'!processHttp	| dir request |	request := HttpRequest current.	(#(#GET #POST) includes: request method) ifFalse: [^false].	dir := ModDir serverDirectory.	HttpResponse current: (HttpResponse 				fromString: (self directoryListing: request directory: dir)).	^true! !!ModAutoIndex methodsFor: 'validation' stamp: 'svp 5/16/2003 13:01'!validateForStack: anArray problems: problems	super validateForStack: anArray problems: problems.	anArray 		detect: [ :ea | ea isDir ] 		ifNone: [problems add: 'AutoIndex module requires Dir module']! !!ModCore class methodsFor: 'bindings' stamp: 'svp 4/16/2003 13:28'!host	^#'ModCore-Host' binding! !!ModCore class methodsFor: 'bindings' stamp: 'svp 4/16/2003 13:28'!host: aString	^#'ModCore-Host' binding: aString! !!ModCore class methodsFor: 'bindings' stamp: 'svp 4/23/2003 21:39'!method	^#'ModCore-Method' binding! !!ModCore class methodsFor: 'bindings' stamp: 'svp 4/23/2003 21:40'!method: methodString	#'ModCore-Method' binding: methodString! !!ModCore class methodsFor: 'bindings' stamp: 'svp 4/23/2003 22:22'!options	^#'ModCore-Options' binding! !!ModCore class methodsFor: 'bindings' stamp: 'svp 4/23/2003 22:22'!options: methodsString	^#'ModCore-Options' binding: methodsString! !!ModCore class methodsFor: 'bindings' stamp: 'svp 4/16/2003 11:28'!path	^#'ModCore-Path' binding! !!ModCore class methodsFor: 'bindings' stamp: 'svp 4/16/2003 11:28'!path: aString	^#'ModCore-Path' binding: aString! !!ModCore class methodsFor: 'bindings' stamp: 'svp 4/18/2003 11:51'!serverRoot	^#'ModCore-ServerRoot' binding! !!ModCore class methodsFor: 'bindings' stamp: 'svp 4/18/2003 11:51'!serverRoot: aFileDirectory	^#'ModCore-ServerRoot' binding: aFileDirectory! !!ModCore methodsFor: 'as yet unclassified' stamp: 'svp 4/18/2003 11:58'!isCore	^true! !!ModCore methodsFor: 'as yet unclassified' stamp: 'brp 10/2/2004 15:18'!optionsResponse	| opts |	opts := self class options ifNil: ['GET,HEAD,POST,OPTIONS,TRACE'].	^(HttpResponse fromString: '')		fieldAt: 'Allow' put: opts;		yourself! !!ModCore methodsFor: 'as yet unclassified' stamp: 'brp 10/2/2004 16:08'!processHttp	| request method |	request := HttpRequest current.	self class		method: (method := request method);		path: request url;		host: request networkHost;		serverRoot: self serverRoot.	method = 'TRACE' 		ifTrue: 			[HttpResponse current: (self traceResponse: request).			^true].	self processSubModules ifTrue: [^true].	method = 'OPTIONS' 		ifTrue: 			[HttpResponse current: self optionsResponse.			^true].	^false! !!ModCore methodsFor: 'as yet unclassified' stamp: 'svp 4/18/2003 11:49'!serverRoot	^serverRoot! !!ModCore methodsFor: 'as yet unclassified' stamp: 'brp 10/2/2004 14:53'!serverRoot: aDirOrString 	serverRoot := aDirOrString isString 		ifTrue: [FileDirectory on: aDirOrString]		ifFalse: [aDirOrString]! !!ModCore methodsFor: 'as yet unclassified' stamp: 'svp 4/23/2003 22:33'!traceResponse: request	^HttpResponse fromString:		(String streamContents: [ :strm | request writeOn: strm ])! !!ModDir class methodsFor: 'tests' stamp: 'ab 11/13/2003 12:31'!directoryExists: aFileDirectory	"The Mac implementation of FileDirectory>>exists answers true,	even when the path specified is a file (not a directory) (as of	22 May 2003)...this differs from the Unix and Windows VMs...so 	this is a little hack that should work on all platforms...when the	Mac VM is correct, we should change this code to simply use	FileDirectory>>exists"	"Ordinarily, just do:"	SmalltalkImage current platformName ~= 'Mac OS' ifTrue: [^aFileDirectory exists].	"But!! Because of Mac idiosyncracies, do:"	^aFileDirectory exists and: 		[aFileDirectory containingDirectory directoryNames 			includes: aFileDirectory localName].	! !!ModDir class methodsFor: 'accessing' stamp: 'tbn 11/10/2004 11:38'!fullFilePath	^ModDoc fullFilePath! !!ModDir class methodsFor: 'bindings' stamp: 'svp 4/15/2003 15:42'!serverDirectory	^#'ModDir-ServerDirectory' binding! !!ModDir class methodsFor: 'bindings' stamp: 'svp 4/15/2003 15:42'!serverDirectory: aFileDirectory	#'ModDir-ServerDirectory' binding: aFileDirectory! !!ModDir methodsFor: 'as yet unclassified' stamp: 'svp 4/15/2003 17:06'!directoryIndex	^directoryIndex ifNil: [directoryIndex := OrderedCollection new]! !!ModDir methodsFor: 'as yet unclassified' stamp: 'brp 10/2/2004 14:52'!directoryIndex: aCollectionOrString 	directoryIndex := aCollectionOrString isString 		ifTrue: [aCollectionOrString findTokens: ' ']		ifFalse: [aCollectionOrString]! !!ModDir methodsFor: 'as yet unclassified' stamp: 'brp 10/2/2004 15:45'!directoryIndexExists: dir 	| fname |		fname := self directoryIndex detect: [:ea | dir fileExists: ea]				ifNone: [^false].	"Our directory exists, set the full file name so that	ModFile will detect and serve the index file (note, if no ModFile	gets processed after this module, then a doc not found will be returned)"		ModDoc relativeFilePath: ModDoc relativeFilePath , fname.	^true! !!ModDir methodsFor: 'testing' stamp: 'svp 5/15/2003 17:27'!isDir	^true! !!ModDir methodsFor: 'as yet unclassified' stamp: 'brp 10/2/2004 15:30'!processHttp	| filePath dir request |	request := HttpRequest current.	filePath := self class fullFilePath.	(self class directoryExists: (dir := FileDirectory on: filePath)) 		ifFalse: [^false].	"If the url does not end in a slash, then redirect to add the slash"	request url last ~= $/ 		ifTrue: 			[self redirectWithTrailingSlash: request.			^true].	(self directoryIndexExists: dir) ifTrue: [^false].	self class serverDirectory: dir.	^ self processSubModules ! !!ModDir methodsFor: 'as yet unclassified' stamp: 'svp 5/16/2003 23:09'!redirectWithTrailingSlash: request	| location |	location := request url, '/'.	HttpResponse current: 		((HttpResponse			status: #tempMoved			contents: 'Temporarily moved to: <A HREF="', location, '">', location, '</A>')		fieldAt: 'Location' put: location;		fieldAt: 'URI' put: location;		yourself)! !!ModDir methodsFor: 'validation' stamp: 'svp 5/16/2003 13:02'!validateForStack: anArray problems: problems	super validateForStack: anArray problems: problems.	anArray 		detect: [ :ea | ea isDoc ] 		ifNone: [problems add: 'Dir module requires a Doc module']! !!ModDoc class methodsFor: 'bindings' stamp: 'svp 4/15/2003 18:02'!documentRoot	"<FileDirectory> The root of the document tree for the current request"	^#'ModCore-DocumentRoot' binding! !!ModDoc class methodsFor: 'bindings' stamp: 'svp 4/15/2003 16:02'!documentRoot: aFileDirectory	#'ModCore-DocumentRoot' binding: aFileDirectory! !!ModDoc class methodsFor: 'bindings' stamp: 'ab 11/13/2003 12:31'!fullFilePath	"<String> The full path name to the file or directory on the server	indicated by the current HttpRequest."	"Ordinarily, just use the following:"	(SmalltalkImage current platformName ~= 'Mac OS')		ifTrue: [^self documentRoot fullNameFor: self relativeFilePath].	"But!! Because of Mac idiosyncracies, we must do:"	^((self relativeFilePath findTokens: FileDirectory pathNameDelimiter asString)		inject: self documentRoot into: 			[ :dir :pathPart |			FileDirectory on: (dir fullNameFor: pathPart)]) fullName			! !!ModDoc class methodsFor: 'initialization' stamp: 'svp 4/15/2003 16:19'!initialize	"self initialize"	DelimiterTranslation := (0 to: 255) as: ByteArray.	DelimiterTranslation 		at: ($/ asciiValue + 1) 		put: FileDirectory pathNameDelimiter asciiValue.	"Register this class for startUp notification (in case we are started on a	platform with a differen path name delimiter"	Smalltalk addToStartUpList: self.! !!ModDoc class methodsFor: 'bindings' stamp: 'svp 4/16/2003 11:12'!relativeFilePath	"<String> The relative path name to the file or directory on the server	indicated by the current HttpRequest"	^#'ModCore-RelativeFilePath' binding ! !!ModDoc class methodsFor: 'bindings' stamp: 'svp 4/16/2003 11:13'!relativeFilePath: aPathName	^#'ModCore-RelativeFilePath' binding: aPathName! !!ModDoc class methodsFor: 'initialization' stamp: 'svp 4/15/2003 16:19'!startUp	"When we start up, force the rebuilding of the DelimiterTranslation	array (in case we are started on a platform with a different delimiter)."	self initialize! !!ModDoc methodsFor: 'accessing' stamp: 'svp 4/15/2003 16:00'!documentRoot	^documentRoot! !!ModDoc methodsFor: 'accessing' stamp: 'brp 10/2/2004 14:52'!documentRoot: aDirectoryOrString 	documentRoot := aDirectoryOrString isString 		ifTrue: [FileDirectory on: aDirectoryOrString]		ifFalse: [aDirectoryOrString]! !!ModDoc methodsFor: 'testing' stamp: 'svp 5/15/2003 15:54'!isDoc	^true! !!ModDoc methodsFor: 'error handling' stamp: 'svp 4/15/2003 16:32'!notFoundResponseFor: request	^self		errorResponseStatus: #notFound		description: ('The requested URL ', request url, ' was not found on this server').! !!ModDoc methodsFor: 'printing' stamp: 'svp 4/15/2003 16:27'!printOn: strm	super printOn: strm.	strm nextPut: $(.	self documentRoot pathName printOn: strm.	strm nextPut: $).! !!ModDoc methodsFor: 'accessing' stamp: 'brp 10/2/2004 15:21'!processHttp	"Examine the path from ModCore and set the bindings for	document root and relative file path"	| relativeFilePath path |	path := ModCore path.	relativeFilePath := self relativeFilePathFrom: path.	self class		documentRoot: self documentRoot;		relativeFilePath: relativeFilePath.	^ self processSubModules.! !!ModDoc methodsFor: 'accessing' stamp: 'brp 10/2/2004 15:40'!relativeFilePathFrom: path 	^((path notEmpty and: [path first = $/]) 		ifTrue: [path copyFrom: 2 to: path size]		ifFalse: ['']) translateWith: DelimiterTranslation! !!ModDoc methodsFor: 'validation' stamp: 'svp 5/16/2003 13:02'!validateForStack: anArray problems: problems	super validateForStack: anArray problems: problems.	anArray 		detect: [ :module | module isCore ]		ifNone: [problems add: 'Doc module requires a Core module']! !!ModVhostDoc methodsFor: 'as yet unclassified' stamp: 'svp 4/17/2003 16:53'!documentRoot	^super documentRoot directoryNamed: ModVhost string! !!ModVhostDoc methodsFor: 'validation' stamp: 'svp 5/16/2003 13:04'!validateForStack: anArray problems: problems	super validateForStack: anArray problems: problems.	anArray 		detect: [ :module | module isVhost ]		ifNone: [self error: 'VhostDoc module requires a Vhost module']! !!ModFile methodsFor: 'processing' stamp: 'gk 8/17/2005 23:52'!processHttp	"This method uses StandardFileStream explicitly instead	of relying on FileStream class>>concreteStream, since in this	case we just need to return the file 'as is' binary."	| fullFilePath method |	method := ModCore method.	(#(#GET #POST) includes: method) ifFalse: [^false].	fullFilePath := ModDoc fullFilePath.	(FileStream isAFileNamed: fullFilePath) ifFalse: [^false].	self processSubModules ifTrue: [^true].	HttpResponse current: (HttpResponse 				fromStream: (StandardFileStream readOnlyFileNamed: fullFilePath)).	^true! !!ModFile methodsFor: 'validation' stamp: 'svp 5/16/2003 13:03'!validateForStack: anArray problems: problems	super validateForStack: anArray problems: problems.	anArray 		detect: [ :ea | ea isDoc ] 		ifNone: [problems add: 'File module requires a Doc module']! !!ModLog methodsFor: 'as yet unclassified' stamp: 'svp 5/15/2003 10:30'!doPostProcessingFor: request response: response	"This method is called after the response has been written, we need 	to log the request/response pair"	self logger nextPut: (Array with: request with: response)! !!ModLog methodsFor: 'testing' stamp: 'svp 5/16/2003 12:10'!isLog	^true! !!ModLog methodsFor: 'as yet unclassified' stamp: 'svp 5/15/2003 10:30'!logger	^logger! !!ModLog methodsFor: 'as yet unclassified' stamp: 'svp 5/15/2003 10:30'!logger: aStream	logger := aStream! !!ModLog methodsFor: 'as yet unclassified' stamp: 'svp 5/15/2003 10:15'!processHttp	HttpAdaptor current addPostProcessor: self.	^self processSubModules! !!ModMulti methodsFor: 'processing' stamp: 'svp 4/16/2003 21:10'!processHttp	^self processSubModules! !!ModNotFound methodsFor: 'as yet unclassified' stamp: 'svp 5/15/2003 17:08'!processHttp	HttpResponse current: 		(HttpAdaptor current notFoundResponseFor: HttpRequest current).	^true! !!ModSession methodsFor: 'private' stamp: 'svp 5/14/2003 01:11'!basicExtractSession: aRequest ifAbsent: absentBlock	"PRIVATE: answer the current session based on the 'SessionID' cookie"	aRequest cookies		at: #SessionID		ifPresent: [ :sid | ^sessions at: sid ifAbsent: absentBlock].	^absentBlock value! !!ModSession methodsFor: 'private' stamp: 'svp 5/14/2003 01:18'!checkForCleanup	"PRIVATE: run the cleanup if the last cleanup was more than	1 minute ago"	lastCleanup + 60 < Time totalSeconds		ifTrue: [self cleanup]! !!ModSession methodsFor: 'private' stamp: 'svp 5/14/2003 01:05'!cleanup	"PRIVATE: iterate over all sessions and remove stale ones"	| session cutoff |	lastCleanup := Time totalSeconds.	cutoff := lastCleanup - secondsToLive.	sessions keys do: 		[:key | 		session := sessions at: key.		(session lastAccess < cutoff) ifTrue: 			[sessions removeKey: key]]! !!ModSession methodsFor: 'private' stamp: 'svp 5/14/2003 01:10'!extractSession: aRequest 	"<KomSession> extract or create a session for aRequest"	| session |	mutex critical: 		[self checkForCleanup.		session := self 					basicExtractSession: aRequest 					ifAbsent: [self newSession].		session touch].	^ session! !!ModSession methodsFor: 'initialization' stamp: 'brp 10/2/2004 14:34'!initialize	super initialize.		sessions := Dictionary new.	mutex := Semaphore forMutualExclusion.	lastCleanup := Time totalSeconds.	"30 minutes"	secondsToLive := 30 * 60! !!ModSession methodsFor: 'testing' stamp: 'svp 5/15/2003 16:05'!isSession	^true! !!ModSession methodsFor: 'private' stamp: 'svp 5/14/2003 01:11'!newSession	"PRIVATE: creates a new Session and stores it"	| session |	session := KomSession new.	sessions at: session id put: session.	^ session! !!ModSession methodsFor: 'processing' stamp: 'svp 5/14/2003 01:14'!processHttp	| session |	session := self extractSession: HttpRequest current.	KomSession current: session.	self processSubModules ifFalse: [^false].	HttpResponse current		setCookieName: #SessionID		value: session id		path: '/'.	^ true! !!ModSession methodsFor: 'accessing' stamp: 'svp 5/14/2003 01:12'!secondsToLive: anInteger	secondsToLive := anInteger! !!ModSession methodsFor: 'enumeration' stamp: 'gk 11/6/2003 17:12'!sessionsDo: aBlock	"Iterate over sessions."	^ sessions valuesDo: aBlock! !!ModVhost class methodsFor: 'instance creation' stamp: 'svp 4/16/2003 21:06'!pathTemplate: aString	^self new 		pathTemplate: aString; 		yourself! !!ModVhost class methodsFor: 'bindings' stamp: 'svp 4/17/2003 16:51'!string	^#'ModVhost-String' binding! !!ModVhost class methodsFor: 'bindings' stamp: 'svp 4/17/2003 16:51'!string: aString	#'ModVhost-String' binding: aString! !!ModVhost methodsFor: 'as yet unclassified' stamp: 'lr 4/15/2010 08:52'!getOffsetAt: pos	| temp end val |	temp := self template.	end := pos.	(temp at: end) == $- ifTrue: [end := end + 1].	[val := temp at: end.	((val >= $0) and: [val <= $9 and: [temp size > end]])] whileTrue: [end := end + 1].	((val >= $0) and: [val <= $9]) ifTrue: [end := end + 1].	((end <= temp size) and: [(temp at: end) = $+])		ifTrue: [^temp copyFrom: pos to: end]		ifFalse: [^temp copyFrom: pos to: (end - 1)]! !!ModVhost methodsFor: 'as yet unclassified' stamp: 'svp 4/17/2003 16:50'!getSubstituteAt: percentPosition host: aHost andDo: aBlock	| temp nameIndex nextPos letterIndex sub |	temp := self template.	temp size <= percentPosition ifTrue: 		[aBlock value: '%'. 		^percentPosition + 1].	(temp at: (percentPosition + 1)) = $% ifTrue: 		[aBlock value: '%'. 		^percentPosition + 2].	(temp at: (percentPosition + 1)) = $p ifTrue: 		[aBlock value: aHost port asString. 		^percentPosition + 2].	nameIndex := self getOffsetAt: (percentPosition + 1).	nextPos := percentPosition + 1 + nameIndex size.	((temp size >= nextPos) and: [(temp at: nextPos) = $.])		ifTrue: 			[letterIndex := self getOffsetAt: (nextPos + 1).			nextPos := nextPos + letterIndex size + 1]		ifFalse: 			[letterIndex := '0'].	[sub := aHost vhostName: nameIndex letter: letterIndex]		on: Error do: [ :ex | aBlock value: '%'. ^percentPosition + 1].	aBlock value: sub.	^nextPos! !!ModVhost methodsFor: 'testing' stamp: 'svp 5/15/2003 17:24'!isVhost	^true! !!ModVhost methodsFor: 'as yet unclassified' stamp: 'brp 10/2/2004 15:17'!processHttp	self class string: (self stringFromHost: ModCore host).	^self processSubModules! !!ModVhost methodsFor: 'as yet unclassified' stamp: 'svp 4/17/2003 16:50'!stringFromHost: aHost	| pos temp done nextPercent |	pos := 1.	temp := self template.	done := false.	^String streamContents: [ :strm |		[done] whileFalse: 			[nextPercent := temp indexOf: $% startingAt: pos.			nextPercent = 0 				ifTrue:					[strm nextPutAll: (temp copyFrom: pos to: temp size).					done := true.]				ifFalse: 					[strm nextPutAll: (temp copyFrom: pos to: (nextPercent - 1)).					pos := self 						getSubstituteAt: nextPercent 						host: aHost						andDo: [ :sub | strm nextPutAll: sub ].					pos > temp size ifTrue: [done := true]]]].! !!ModVhost methodsFor: 'as yet unclassified' stamp: 'svp 4/17/2003 16:48'!template	^template ifNil: [template := '%0']! !!ModVhost methodsFor: 'as yet unclassified' stamp: 'svp 4/17/2003 16:49'!template: aString	template := aString! !!ModVhost methodsFor: 'validation' stamp: 'svp 5/16/2003 13:03'!validateForStack: anArray problems: problems	super validateForStack: anArray problems: problems.	anArray 		detect: [ :module | module isCore ]		ifNone: [problems add: 'Vhost module requires a Core module']! !!ModVhostAlias methodsFor: 'accessing' stamp: 'svp 5/15/2003 00:44'!host	^host! !!ModVhostAlias methodsFor: 'accessing' stamp: 'svp 5/15/2003 00:44'!host: aString	host := aString! !!ModVhostAlias methodsFor: 'accessing' stamp: 'svp 5/15/2003 00:47'!processHttp	"Get the host string and if we match, then process	our subModules."	| hostString |	hostString := ModVhost string.	host = hostString ifTrue:		[self processSubModules ifTrue: [^true]].	^false! !!ModVhostAlias methodsFor: 'accessing' stamp: 'svp 5/16/2003 13:04'!validateForStack: anArray problems: problems	super validateForStack: anArray problems: problems.	anArray 		detect: [ :module | module isVhost ]		ifNone: [self error: 'VhostAlias module requires a Vhost module']! !!HttpAdaptor class methodsFor: 'timestamp' stamp: 'svp 5/7/2003 03:01'!buildTimeStamp: seconds	^((TimeStamp fromSeconds: seconds) minusSeconds: self timezoneOffset) printHttpFormat! !!HttpAdaptor class methodsFor: 'bindings' stamp: 'svp 5/15/2003 10:15'!current	^#'HttpAdaptor-current' binding! !!HttpAdaptor class methodsFor: 'bindings' stamp: 'svp 5/15/2003 10:15'!current: anInstance	^#'HttpAdaptor-current' binding: anInstance! !!HttpAdaptor class methodsFor: 'preferences' stamp: 'svp 5/7/2003 02:43'!dataTimeout	"The number of seconds to wait for data to be received on a	given socket."	^#'HttpAdaptor-dataTimeout' binding ifNil: [10]! !!HttpAdaptor class methodsFor: 'preferences' stamp: 'svp 5/7/2003 02:42'!dataTimeout: seconds	^#'HttpAdaptor-dataTimeout' binding: seconds! !!HttpAdaptor class methodsFor: 'preferences' stamp: 'RJT 6/15/2007 10:54'!keepAlive	^#'HttpAdaptor-keepAlive' binding ifNil: [false]! !!HttpAdaptor class methodsFor: 'preferences' stamp: 'svp 5/7/2003 02:42'!keepAlive: aBoolean	^#'HttpAdaptor-keepAlive' binding: aBoolean! !!HttpAdaptor class methodsFor: 'preferences' stamp: 'svp 5/7/2003 02:43'!maxKeepAliveRequests	"This is the maximum number of requests to allow	during a persistent connection. (zero means unlimited)."	^#'HttpAdaptor-maxKeepAliveRequests' binding ifNil: [100]! !!HttpAdaptor class methodsFor: 'preferences' stamp: 'svp 5/7/2003 02:43'!maxKeepAliveRequests: anInteger	^#'HttpAdaptor-maxKeepAliveRequests' binding: anInteger! !!HttpAdaptor class methodsFor: 'instance creation' stamp: 'svp 5/15/2003 10:22'!readAndWriteTo: aStream service: httpService	^self new		initializeOn: aStream httpService: httpService;		beginConversation;		yourself! !!HttpAdaptor class methodsFor: 'instance creation' stamp: 'gk 2/22/2006 17:01'!readAndWriteToSocket: aSocket service: httpService	"Wrap the socket in a suitable SocketStream implementation	using appropriate options for timeout etc and start the conversation."	^self 		readAndWriteTo: 			((self socketStream on: aSocket)				timeout: self dataTimeout;				autoFlush: false;				yourself)		service: httpService! !!HttpAdaptor class methodsFor: 'socketstream' stamp: 'gk 2/23/2006 10:07'!socketStream	"Returns the correct class to use. If FastSocketStream is available we use it,	otherwise we use SocketStream."	^Smalltalk at: #FastSocketStream ifAbsent: [SocketStream] ! !!HttpAdaptor class methodsFor: 'timestamp' stamp: 'svp 5/7/2003 03:00'!timeStamp	| seconds |	seconds := Time totalSeconds.	^seconds ~= LastTimeStampTime		ifTrue: 			[LastTimeStamp := self buildTimeStamp: (LastTimeStampTime := seconds)]		ifFalse: 			[LastTimeStamp]! !!HttpAdaptor class methodsFor: 'preferences' stamp: 'svp 5/7/2003 03:23'!timezoneOffset	"The offset (in seconds) of the server's timezone relative to GMT."	^TimezoneOffset ifNil: [0]! !!HttpAdaptor class methodsFor: 'preferences' stamp: 'svp 5/7/2003 03:23'!timezoneOffset: aNumber	^TimezoneOffset := aNumber! !!HttpAdaptor methodsFor: 'processing' stamp: 'svp 4/23/2003 00:13'!addConnectionHeaders: response request: request count: count	response fieldAt: 'Server' put: self serverType.	response fieldAt: 'Date' put: self timeStamp.	(request isPersistent and: [self keepAlive])		ifTrue: 			[response fieldAt: 'Connection' put: 'Keep-Alive'.			response fieldAt: 'Keep-Alive' put: 				(String streamContents: 					[ :s |					s nextPutAll: 'timeout='.					s nextPutAll: self dataTimeout asString.					s nextPutAll: ', max='.					s nextPutAll: (self maxKeepAliveRequests - count) asString])]		ifFalse: 			[response fieldAt: 'Connection' put: 'close'].! !!HttpAdaptor methodsFor: 'post processing' stamp: 'svp 5/15/2003 10:13'!addPostProcessor: anObject	"Add anObject to my list of postProcessor, anObject must respond to	the message #doPostProcessingFor:response:"	(postProcessors ifNil: [postProcessors := OrderedCollection new])		add: anObject! !!HttpAdaptor methodsFor: 'processing' stamp: 'jf 2/20/2009 14:15'!beginConversation	| response request count limit continue |	"note: there is a lot of effort in this method to ensure that we don't have	and explicit method returns.  For some reason (bugs in exception handling?) we	can get errors if we have explicit returns...this behavior seems to	only happen when Seaside is also loaded (though it doesn't look like Seaside code	is being invoked when the problems happen."	count := 0.	continue := true.	limit := self maxKeepAliveRequests.	[[		[request := self readRequest] on: Error do: [ :ex | continue := false].		continue ifTrue:					[Bindings clamp:				[response := self dispatchRequest: request.				self addConnectionHeaders: response request: request count: count.				(self writeResponse: response for: request) ifFalse: [^self].				self doPostProcessingFor: request response: response].			count := count + 1.			continue := response isPersistent and: [count < limit]].		continue.	] whileTrue]		ensure: [self destroy]! !!HttpAdaptor methodsFor: 'accessing' stamp: 'svp 5/7/2003 02:55'!dataTimeout	^self class dataTimeout! !!HttpAdaptor methodsFor: 'processing' stamp: 'svp 5/15/2003 17:07'!destroy	[self stream close] 		on: Error do: [ :ex | "ignore" ].! !!HttpAdaptor methodsFor: 'dispatching' stamp: 'brp 10/2/2004 15:18'!dispatchRequest: request 	"<HttpResponse> Dispatches an HttpRequest as a method to the target and	answers an HttpResponse to be transferred to the client"	| response |	response := self errorHandler handleDispatchErrorsIn: 					[self class current: self.					HttpRequest current: request.					self target processHttpRequest: request].	response ifNil: [response := self notFoundResponseFor: request].	response addCookies: request responseCookies.	^response! !!HttpAdaptor methodsFor: 'post processing' stamp: 'svp 5/15/2003 10:14'!doPostProcessingFor: request response: response	"Do the post processing for the given request/response pair and	then reset our list of post processors."	self postProcessorsDo: 		[ :ea |		ea doPostProcessingFor: request response: response].	postProcessors := nil.! !!HttpAdaptor methodsFor: 'accessing' stamp: 'svp 4/22/2003 10:09'!errorHandler	^self httpService! !!HttpAdaptor methodsFor: 'accessing' stamp: 'svp 4/22/2003 10:09'!httpService	^httpService! !!HttpAdaptor methodsFor: 'accessing' stamp: 'svp 4/22/2003 10:04'!httpService: aComancheHttpService	httpService := aComancheHttpService! !!HttpAdaptor methodsFor: 'initialize-release' stamp: 'svp 5/15/2003 10:21'!initializeOn: aStream httpService: anHttpService 	stream := aStream.	httpService := anHttpService.! !!HttpAdaptor methodsFor: 'accessing' stamp: 'svp 5/6/2003 17:09'!keepAlive	^self class keepAlive! !!HttpAdaptor methodsFor: 'accessing' stamp: 'svp 5/7/2003 02:57'!maxKeepAliveRequests	^self class maxKeepAliveRequests! !!HttpAdaptor methodsFor: 'dispatching' stamp: 'svp 4/22/2003 10:03'!notFoundResponseFor: request	^self httpService		errorResponseStatus: #notFound		description: ('The requested URL ', request url, ' was not found on this server').! !!HttpAdaptor methodsFor: 'post processing' stamp: 'svp 5/15/2003 10:04'!postProcessorsDo: aBlock	postProcessors ifNotNil: [postProcessors do: aBlock]! !!HttpAdaptor methodsFor: 'processing' stamp: 'svp 4/17/2003 08:49'!readRequest	^HttpRequest readFromStream: self readStream.! !!HttpAdaptor methodsFor: 'accessing' stamp: 'svp 5/15/2003 10:22'!readStream	^self stream! !!HttpAdaptor methodsFor: 'accessing' stamp: 'svp 4/22/2003 10:14'!serverType	^self httpService serverType! !!HttpAdaptor methodsFor: 'accessing' stamp: 'svp 5/15/2003 10:22'!stream	^stream! !!HttpAdaptor methodsFor: 'accessing' stamp: 'svp 4/22/2003 10:05'!target	^self httpService! !!HttpAdaptor methodsFor: 'accessing' stamp: 'svp 5/7/2003 02:58'!timeStamp	^self class timeStamp! !!HttpAdaptor methodsFor: 'processing' stamp: 'svp 5/12/2003 17:13'!writeResponse: response for: request	"<Boolean> Answer whether or not we succeeded in writing out the	response.  If we did not, the caller may want to shut down this Http	conversation.  We try to handle errors in writing the response by 	getting and writing another response (note: this might not always work	since the error could have occurred after some data has been written	on the response stream).  For debugging, the method #handleResponseWritingError:	can #pass on the exception to allow a walkback to appear."	| errorResponse |	[[request method = 'HEAD'		ifTrue: [response writeHeadersOn: self writeStream]		ifFalse: [response writeOn: self writeStream]]			on: Error			do: 				[ :ex |				errorResponse := self errorHandler handleResponseWritingError: ex.				[errorResponse writeOn: self writeStream] on: Error do: [^false]].	] ensure: [response destroy].	^true! !!HttpAdaptor methodsFor: 'accessing' stamp: 'svp 5/15/2003 10:22'!writeStream	^self stream! !!HttpRequest class methodsFor: 'parsing' stamp: 'svp 5/13/2003 15:30'!addKey: key value: value toForm: dict multipleValues: boolean	boolean		ifTrue: [dict at: key put: value]		ifFalse: [(dict includesKey: key)			ifFalse: [dict at: key put: value]			ifTrue: [dict at: key modify: [:oldValue | oldValue, value]]]! !!HttpRequest class methodsFor: 'bindings' stamp: 'svp 4/15/2003 15:06'!current	^#'HttpRequest-Current' binding! !!HttpRequest class methodsFor: 'bindings' stamp: 'svp 4/15/2003 15:06'!current: anHttpRequest	#'HttpRequest-Current' binding: anHttpRequest! !!HttpRequest class methodsFor: 'parsing' stamp: 'svp 5/13/2003 15:29'!decodeUrlEncodedForm: string	^self decodeUrlEncodedForm: string multipleValues: false! !!HttpRequest class methodsFor: 'parsing' stamp: 'pmm 5/29/2007 07:31'!decodeUrlEncodedForm: string multipleValues: boolean	| dict key value start end eqSignPos more |	dict := boolean ifTrue: [HttpFormDictionary new] ifFalse: [Dictionary new].	string isEmptyOrNil ifTrue: [^dict].	more := true.	start := 1.	[end := string indexOf: $& startingAt: start.	end == 0		ifTrue: [end := string size. more := false]		ifFalse: [end := end - 1].	eqSignPos := string indexOf: $= startingAt: start.	(eqSignPos > end or: [eqSignPos == 0])		ifTrue: [key := (key := string copyFrom: start to: end) unescapePercentsWithTextEncoding: nil.			value := '']		ifFalse: [key := (key := string copyFrom: start to: eqSignPos-1) unescapePercentsWithTextEncoding: nil.			value := (value := string copyFrom: eqSignPos+1 to: end) unescapePercentsWithTextEncoding: nil].	self addKey: key value: value toForm: dict multipleValues: boolean.	start := end + 2.	more] whileTrue.	^dict! !!HttpRequest class methodsFor: 'defaults' stamp: 'SVP 8/12/1999 11:39'!defaultContentType	^MIMEDocument defaultContentType! !!HttpRequest class methodsFor: 'defaults' stamp: 'SVP 8/11/1999 11:51'!defaultMethod	^'GET'! !!HttpRequest class methodsFor: 'defaults' stamp: 'SVP 8/11/1999 11:50'!defaultProtocol	^'HTTP/1.0'! !!HttpRequest class methodsFor: 'defaults' stamp: 'SVP 8/11/1999 11:51'!defaultUrl	^''! !!HttpRequest class methodsFor: 'accessing' stamp: 'bolot 12/16/2000 03:23'!endOfRequestHeaderMarker	"This marks the end of an HTTP request (two consecutive CR-LFs)"	^EndOfRequestHeaderMarker! !!HttpRequest class methodsFor: 'authentication' stamp: 'bolot 3/11/2002 14:22'!hashPassword: aPassword	^SecureHashAlgorithm new hashMessage:		(aPassword, ':', self secretWord)! !!HttpRequest class methodsFor: 'initialize-release' stamp: 'bolot 12/16/2000 09:35'!initialize	EndOfRequestHeaderMarker := String crlf, String crlf! !!HttpRequest class methodsFor: 'instance creation' stamp: 'gc 10/24/2007 10:11'!new	"Kept for backwards compatibility"	^super new initialize! !!HttpRequest class methodsFor: 'parsing' stamp: 'gk 12/6/2005 21:08'!parseHttpHeader: string	| dict key value start end more colonPos fieldDelims lastKey keyValueDelim crlf |	dict := Dictionary new.	crlf := String crlf.	string isEmptyOrNil ifTrue: [^dict].	fieldDelims := crlf asCharacterSet.	keyValueDelim := $:.	more := true.	start := end := 1.	lastKey := ''.	[end := string indexOfAnyOf: fieldDelims startingAt: start.	end == 0		ifTrue: [end := string size. more := false]		ifFalse: [end := end - 1].	(end >= start and: [start < string size])		ifTrue: [			(string at: start) isSeparator				ifTrue:					[dict						at: lastKey						modify: [:item | item, (string copyFrom: start to: end)]]				ifFalse:					[colonPos := string indexOf: keyValueDelim startingAt: start.					(colonPos > end or: [colonPos == 0])						ifTrue:							[key := (string copyFrom: start to: end) translateToLowercase.							value := '']						ifFalse:							[key := (string copyFrom: start to: colonPos-1) translateToLowercase.							value := (string copyFrom: colonPos+1 to: end) withBlanksTrimmed]].			key isEmpty				ifFalse: [dict at: key put: value.					lastKey := key.					key := ''].			start := string skipDelimiters: crlf startingAt: end+1].	more] whileTrue.	^dict! !!HttpRequest class methodsFor: 'instance creation' stamp: 'bolot 12/16/2000 03:08'!readFromStream: aStream	^self new initializeFromStream: aStream! !!HttpRequest class methodsFor: 'authentication' stamp: 'bolot 3/11/2002 14:21'!secretWord	"a string used in hashing passwords"	^'ab74uihagAS'! !!HttpRequest methodsFor: 'user authentication' stamp: 'bolot 3/11/2002 17:26'!clearPassword	self setCookieName: #ComanchePassword		value: 'x'		path: '/'! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 12/16/2000 01:03'!contentLength	^self propertyAt: #contentLength ifAbsentPut: [		(header at: 'content-length' ifAbsent: [0]) asNumber	]! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 1/4/2000 18:49'!contentType	| i contentType |	^self propertyAt: #contentType ifAbsentPut: [		contentType := self header at: 'content-type' ifAbsent: [self defaultContentType].		contentType ifNotNil: [i := contentType indexOf: $;. "get rid of charset field"			i > 0 ifTrue: [contentType := contentType copyFrom: 1 to: i-1]].		contentType asLowercase]! !!HttpRequest methodsFor: 'accessing' stamp: 'DGD 7/22/2001 23:41'!cookies	"answer a dictionary with the cookies in the request"	^ self		propertyAt: #cookies		ifAbsentPut: [self				parseCookies: (self header						at: 'cookie'						ifAbsent: [''])]! !!HttpRequest methodsFor: 'defaults' stamp: 'SVP 8/12/1999 11:40'!defaultContentType	^self class defaultContentType! !!HttpRequest methodsFor: 'defaults' stamp: 'SVP 8/11/1999 11:52'!defaultMethod	^self class defaultMethod! !!HttpRequest methodsFor: 'defaults' stamp: 'SVP 8/11/1999 11:52'!defaultProtocol	^self class defaultProtocol! !!HttpRequest methodsFor: 'defaults' stamp: 'SVP 8/12/1999 11:40'!defaultUrl	^self class defaultUrl! !!HttpRequest methodsFor: 'initialize-release' stamp: 'bolot 12/16/2000 01:04'!destroy	stream close.	stream := nil! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 12/16/2000 01:08'!endOfRequestHeaderMarker	^self class endOfRequestHeaderMarker! !!HttpRequest methodsFor: 'accessing' stamp: 'svp 1/17/2003 10:36'!fields	"Answer the fields (post or get) for the given request"	| tmp |	^self propertyAt: #fields ifAbsentPut:		[tmp := self getFields copy.		self postFields associationsDo: [ :assn | tmp add: assn].		tmp]! !!HttpRequest methodsFor: 'accessing' stamp: 'svp 5/15/2003 12:48'!firstLineOn: strm	strm nextPutAll: self method.	strm nextPut: $ .	strm nextPutAll: self rawUrl.	strm nextPut: $ .	strm nextPutAll: self protocol.! !!HttpRequest methodsFor: 'accessing' stamp: 'svp 5/13/2003 15:31'!getFields	"retrieve fields encoded in the URL: http://aha/ha?a=1&b=2"	| in |	^self propertyAt: #getFields ifAbsentPut: [		((in := rawUrl indexOf: $?) > 0) ifTrue: [			self class decodeUrlEncodedForm: 				(rawUrl copyFrom: (in + 1) to: rawUrl size)				multipleValues: self multiValueFormFields		] ifFalse: [			self multiValueFormFields				ifTrue: [HttpFormDictionary new]				ifFalse: [Dictionary new].		].	]! !!HttpRequest methodsFor: 'user authentication' stamp: 'bolot 3/11/2002 14:19'!getUsername	^self cookies at: #ComancheUsername ifAbsent: []! !!HttpRequest methodsFor: 'user authentication' stamp: 'brp 10/2/2004 14:21'!hashPassword: aPassword 	^ self class hashPassword: aPassword! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 12/16/2000 01:13'!header	^header! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 12/16/2000 09:18'!header: aDict	header := aDict! !!HttpRequest methodsFor: 'accessing' stamp: 'svp 4/18/2003 09:27'!headerAt: aKey	^ header at: aKey! !!HttpRequest methodsFor: 'accessing' stamp: 'svp 4/18/2003 09:27'!headerAt: aKey ifAbsent: aBlock	^ header at: aKey ifAbsent: aBlock! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 2/11/2001 01:23'!host	^self propertyAt: #host ifAbsentPut: [self header at: 'host' ifAbsent: []]! !!HttpRequest methodsFor: 'initialize-release' stamp: 'pmm 5/29/2007 07:30'!initStatusString: aString 	| statusLine |	statusLine := aString findTokens: ' '.	(statusLine size between: 2 and: 3) 		ifTrue: 			[self method: statusLine first.			rawUrl := statusLine second.			url := (rawUrl copyUpTo: $?) unescapePercentsWithTextEncoding: nil.			url size + 1 < rawUrl size 				ifTrue: [self queryString: (rawUrl copyFrom: url size + 2 to: rawUrl size)].			self protocol: statusLine third asUppercase]		ifFalse: [^self error: 'invalid http status line']! !!HttpRequest methodsFor: 'initialize-release' stamp: 'brp 10/2/2004 14:34'!initialize	super initialize.	properties := IdentityDictionary new! !!HttpRequest methodsFor: 'initialize-release' stamp: 'gc 8/24/2008 10:35'!initializeFromStream: aStream	stream := aStream.	self timestamp: Time totalSeconds.	self readRequestHeaderFrom: stream.! !!HttpRequest methodsFor: 'testing' stamp: 'gc 10/22/2007 23:57'!isDeleteRequest	^self method = 'DELETE'! !!HttpRequest methodsFor: 'testing' stamp: 'SVP 8/25/1999 08:55'!isGetRequest	^self method = 'GET'! !!HttpRequest methodsFor: 'testing' stamp: 'SVP 8/25/1999 08:55'!isHeaderRequest	^self method = 'HEAD'! !!HttpRequest methodsFor: 'testing' stamp: 'svp 4/15/2003 00:51'!isPersistent	| proto answer |	self propertyAt: #persistentConnection ifPresent: [ :x | ^x ].	proto := self protocol.	"If we can't figure out the protocol, default to non-persistent connections"	answer := false.	"For HTTP/1.0, the default is non-persistent connections"	proto = 'HTTP/1.0' ifTrue:		[answer := (self header at: 'connection' ifAbsent: ['']) 			asLowercase = 'keep-alive'].	"For HTTP/1.1, the default is persistent connections"	proto = 'HTTP/1.1' ifTrue:		[answer := (self header at: 'connection' ifAbsent: ['']) 			asLowercase ~= 'close'].	self propertyAt: #persistentConnection put: answer.	^answer! !!HttpRequest methodsFor: 'testing' stamp: 'gk 11/3/2003 13:14'!isPostMultipart	"Is this request a POST with multipart form data?"	^self isPostRequest and: [self contentType = MIMEDocument contentTypeMultipart]! !!HttpRequest methodsFor: 'testing' stamp: 'SVP 8/25/1999 08:55'!isPostRequest	^self method = 'POST'! !!HttpRequest methodsFor: 'testing' stamp: 'gc 10/22/2007 23:57'!isPutRequest	^self method = 'PUT'! !!HttpRequest methodsFor: 'user authentication' stamp: 'bolot 3/11/2002 17:46'!isUsername: aUsername password: aPassword	| pwHash cookieUsername cookiePassword |	cookieUsername := self cookies at: #ComancheUsername ifAbsent: [^false].	cookieUsername = aUsername ifFalse: [^false].	cookiePassword := self cookies at: #ComanchePassword ifAbsent: [^false].	pwHash := self hashPassword: aPassword.	^cookiePassword = pwHash asString! !!HttpRequest methodsFor: 'accessing' stamp: 'brp 10/2/2004 16:18'!localAddress	"Answer the address of the request originator"	^self propertyAt: #localAddress		ifAbsentPut: 			[stream socket localAddress]! !!HttpRequest methodsFor: 'accessing' stamp: 'brp 10/2/2004 16:18'!localPort	"Answer the address of the request originator"	^self propertyAt: #localPort		ifAbsentPut: 			[stream socket localPort]! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 12/16/2000 01:14'!method	^self propertyAt: #method ifAbsent: ['GET']! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 12/19/2000 00:16'!method: aString	self propertyAt: #method put: aString! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 5/2/2002 17:30'!multiValueFormFields	^self propertyAt: #multiValueFormFields ifAbsent: [false]! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 5/2/2002 18:01'!multiValueFormFieldsDisable	"disable use of multi-value form fields"	"thus, if the status changed, need to expunge GET/POST fields if already parsed"	self multiValueFormFields		ifTrue: [self propertyAt: #multiValueFormFields put: false.			self removePropertyAt: #getFields ifAbsent: [].			self removePropertyAt: #postFields ifAbsent: [].						]! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 5/2/2002 18:00'!multiValueFormFieldsEnable	"enable use of multi-value form fields"	"thus, if the status changed, need to expunge GET/POST fields if already parsed"	self multiValueFormFields		ifFalse: [self propertyAt: #multiValueFormFields put: true.			self removePropertyAt: #getFields ifAbsent: [].			self removePropertyAt: #postFields ifAbsent: [].						]! !!HttpRequest methodsFor: 'multipart forms' stamp: 'gc 8/24/2008 14:58'!multipartBoundary	| str idx boundary |	"boundary specification in the HTTP header looks like:	Content-Type: multipart/form-data; boundary=BOUNDARY "	boundary := 'boundary='.	^self propertyAt: #multipartBoundary ifAbsentPut:		[(self contentType beginsWith: MIMEDocument contentTypeMultipart)			ifTrue: ["contentType gets lowercased, so access the raw header"				str := header at: 'content-type' ifAbsent: [ '' ].				idx := str indexOfSubCollection: boundary.				'--', (str copyFrom: idx + boundary size to: str size)]			ifFalse: [ nil ]]! !!HttpRequest methodsFor: 'multipart forms' stamp: 'gk 12/6/2005 21:56'!multipartFormFieldsDo: aBlock	"USAGE:	request multipartFormFieldsDo: 		[:chunk |		chunk saveToStream: aStream]."	"NOTE: if the chunk is not saved, save it after aBlock"	| mChunk aFieldValue |	(self method = 'POST' and: [self contentType = MIMEDocument contentTypeMultipart])		ifFalse: [^nil].	stream peekForAll: self multipartBoundary.	[stream atEnd or: [stream peekForAll: '--']] whileFalse:		[stream next: 2.  "Advance over CRLF"		mChunk := self nextChunkHeader.		aBlock value: mChunk.		mChunk isSaved ifFalse: 			[mChunk fileName isEmptyOrNil			ifFalse: [mChunk saveToStream: (DummyStream on: String new)]			ifTrue:				[aFieldValue := String streamContents: 					[:aStream |					mChunk saveToStream: aStream].				self postFields at: mChunk fieldName put: aFieldValue]]].	stream next: 2 "Advance over CRLF"! !!HttpRequest methodsFor: 'accessing' stamp: 'svp 1/21/2003 21:40'!networkHost	^self propertyAt: #networkHost ifAbsentPut: 		[NetworkHost fromString: self host].! !!HttpRequest methodsFor: 'multipart forms' stamp: 'svp 10/28/2003 12:16'!nextChunkHeader	"Read the next multipart data chunk's header"	| string dict mChunk |	string := stream upToAll: self endOfRequestHeaderMarker.	dict := self class parseHttpHeader: string.	mChunk := MultipartChunk from: dict.	mChunk stream: self stream.	mChunk multipartBoundary: self multipartBoundary.	^mChunk! !!HttpRequest methodsFor: 'private' stamp: 'lr 5/9/2007 09:22'!parseCookies: aString 	"PRIVATE: Parse a string in the format:  	Cookie: NAME1=OPAQUE_STRING1; NAME2=OPAQUE_STRING2 ..."	| dict |	dict := Dictionary new.	(aString findTokens: ';') do: 			[:pairStr | 			| pair |			pair := pairStr findTokens: '='.			pair size > 0 				ifTrue: 					[| key value |					key := pair first withBlanksTrimmed asSymbol.					value := pair size > 1 						ifTrue:							[pair second withBlanksTrimmed]						ifFalse:							[nil].					dict at: key put: value]				ifFalse: 					["self log: 'Cookie invalid pair format: ''' , pairStr , ''''"					]].	^dict! !!HttpRequest methodsFor: 'accessing' stamp: 'svp 2/6/2003 22:38'!pathParts	^self url findTokens: '/'! !!HttpRequest methodsFor: 'accessing' stamp: 'svp 5/13/2003 15:31'!postFields	"Answer the multipart fields for a post request (if in fact this is a	POST request"	^self propertyAt: #postFields ifAbsentPut: [		" parse POST fields in the body of request, if it's standard form data "		(self isPostRequest and: [ 			self contentType = MIMEDocument contentTypeFormData 		]) ifTrue: [			self class				decodeUrlEncodedForm: self rawPostFields				multipleValues: true.		] ifFalse: [			Dictionary new		].	]! !!HttpRequest methodsFor: 'printing' stamp: 'bolot 12/16/2000 02:09'!printOn: printStream	printStream nextPutAll: self class name;		nextPutAll: ' (URL=', self url asString;		nextPutAll: '; protocol=', self protocol asString;		nextPutAll: '; header=', self header asString;		nextPutAll: '; getFields=', self getFields asString;		nextPutAll: '; postFields=', self postFields asString;		nextPutAll: ')'! !!HttpRequest methodsFor: 'properties' stamp: 'svp 4/15/2003 00:21'!propertyAt: aSymbol	^properties at: aSymbol! !!HttpRequest methodsFor: 'properties' stamp: 'svp 4/15/2003 00:21'!propertyAt: aSymbol ifAbsent: absentBlock	^properties at: aSymbol ifAbsent: absentBlock! !!HttpRequest methodsFor: 'properties' stamp: 'svp 4/15/2003 00:21'!propertyAt: aSymbol ifAbsentPut: absentBlock	^properties at: aSymbol ifAbsentPut: absentBlock! !!HttpRequest methodsFor: 'properties' stamp: 'svp 4/15/2003 00:21'!propertyAt: aSymbol ifPresent: presentBlock	^properties at: aSymbol ifPresent: presentBlock! !!HttpRequest methodsFor: 'properties' stamp: 'svp 4/15/2003 00:21'!propertyAt: aSymbol put: anObject	properties at: aSymbol put: anObject! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 12/16/2000 01:57'!protocol	^self propertyAt: #protocol ifAbsent: [self defaultProtocol]! !!HttpRequest methodsFor: 'accessing' stamp: 'svp 4/14/2003 22:18'!protocol: aString	^self propertyAt: #protocol put: aString! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 2/20/2002 13:51'!queryString	^self propertyAt: #queryString ifAbsent: [ nil ]! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 2/20/2002 13:51'!queryString: aString	^self propertyAt: #queryString put: aString! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 5/2/2002 17:34'!rawPostFields	"save the POST form fields as is, for future processing, see #postFields"	"reasons: 1) lazy form processing;		2) allow the app to specify whether it wants multiple values for fields"	^self propertyAt: #rawPostFields ifAbsentPut: [		(self isPostRequest and: [ 			self contentType = MIMEDocument contentTypeFormData 		]) ifTrue: [			stream next: self contentLength		] ifFalse: [			''		].	]! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 12/16/2000 01:58'!rawUrl	^rawUrl! !!HttpRequest methodsFor: 'initialize-release' stamp: 'jf 3/6/2004 20:04'!readRequestHeaderFrom: aStream	| reqHeader |	reqHeader := ReadStream on: 		(aStream upToAll: self endOfRequestHeaderMarker).	self initStatusString: (self readStatusStringFrom: reqHeader).	self header: (self class parseHttpHeader: reqHeader upToEnd).	self rawPostFields. "force reading/parsing post fields"! !!HttpRequest methodsFor: 'initialize-release' stamp: 'jf 3/6/2004 20:09'!readStatusStringFrom: aStream	"RFC 2068 says in section 4.1 (Message Types) that 'In the interest of	robustness, servers SHOULD ignore any empty line(s) received where	a Request-Line is expected', so we ignore any leading CR/LF's"		| status |	status := ''.	[status isEmpty and: [aStream atEnd not]]		whileTrue: [status := aStream upToAll: String crlf].			^ status! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 12/16/2000 01:57'!referer	^self propertyAt: #referer ifAbsentPut: [		header at: 'referer' ifAbsent: [ nil ]	]! !!HttpRequest methodsFor: 'accessing' stamp: 'gc 8/24/2008 10:24'!remoteAddress	^self		propertyAt: #remoteAddress		ifAbsentPut:			[[stream socket remoteAddress]				on: MessageNotUnderstood				do: [:exc | nil]]! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 12/16/2000 09:18'!remoteAddress: aRemoteAddress	self propertyAt: #remoteAddress put: aRemoteAddress! !!HttpRequest methodsFor: 'properties' stamp: 'svp 4/15/2003 00:21'!removePropertyAt: aSymbol	properties removeKey: aSymbol! !!HttpRequest methodsFor: 'properties' stamp: 'svp 4/15/2003 00:21'!removePropertyAt: aSymbol ifAbsent: aBlock	^properties removeKey: aSymbol ifAbsent: aBlock! !!HttpRequest methodsFor: 'response cookies' stamp: 'bolot 3/11/2002 14:39'!responseCookies	"cookies that need to be set"	^self propertyAt: #responseCookies ifAbsentPut: [OrderedCollection new]! !!HttpRequest methodsFor: 'user authentication' stamp: 'brp 10/2/2004 14:21'!secretWord	^ self class secretWord! !!HttpRequest methodsFor: 'user authentication' stamp: 'brp 10/2/2004 17:02'!session	^ KomSession current! !!HttpRequest methodsFor: 'response cookies' stamp: 'bolot 3/11/2002 14:39'!setCookieName: nameString value: valueString expiresDate: expiresDate expiresTime: expiresTime path: pathString domain: domainString secure: secureBoolean 	"set a cookie in the Response"	| temp |	temp := String new writeStream.	"NAME=VALUE"	temp nextPutAll: nameString;		 nextPut: $=;		 nextPutAll: valueString.	"; expires=Wdy, DD-Mon-YYYY HH:MM:SS GMT"	(expiresDate notNil and:[ expiresTime notNil])		ifTrue: [temp nextPutAll: '; expires=';				 nextPutAll: expiresDate weekday;				 nextPutAll: ', '.			expiresDate printOn: temp format: #(1 2 3 $- 2 2 2 ).			temp nextPutAll: ' ';				 nextPutAll: expiresTime print24;				 nextPutAll: ' GMT'].	"; path=PATH"	pathString notNil		ifTrue: [temp nextPutAll: '; path=';				 nextPutAll: pathString].	"; domain=DOMAIN"	domainString notNil		ifTrue: [temp nextPutAll: '; domain=';				 nextPutAll: domainString].	"; secure"	(secureBoolean notNil			and: [secureBoolean])		ifTrue: [temp nextPutAll: '; secure'].	""	self responseCookies add: temp contents! !!HttpRequest methodsFor: 'response cookies' stamp: 'bolot 3/11/2002 14:40'!setCookieName: nameString value: valueString path: pathString 	"set a cookie in the Response"	self		setCookieName: nameString		value: valueString		expiresDate: nil		expiresTime: nil		path: pathString		domain: nil		secure: nil! !!HttpRequest methodsFor: 'user authentication' stamp: 'bolot 3/11/2002 17:35'!setUsername: aUsername	"save the username in a cookie"	"make it expire very far into the future"	self		setCookieName: #ComancheUsername		value: aUsername		expiresDate: (Date today addDays: 1000)		expiresTime: Time now		path: '/'		domain: nil		secure: nil.	self flag: #todo.	"allow for multiple usernames"! !!HttpRequest methodsFor: 'user authentication' stamp: 'bolot 3/11/2002 17:35'!setUsername: aUsername password: aPassword	"save the username/password in cookies"	| pwHash |	self setUsername: aUsername.	pwHash := self hashPassword: aPassword.	self		setCookieName: #ComanchePassword		value: pwHash asString		expiresDate: (Date today addDays: 1000)		expiresTime: Time now		path: '/'		domain: nil		secure: nil.	self flag: #todo.	"allow for multiple usernames"! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 12/16/2000 01:59'!stream	^stream! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 12/16/2000 02:00'!timestamp	^self propertyAt: #timestamp ifAbsent: [ nil ]! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 12/16/2000 02:00'!timestamp: aTimestamp	self propertyAt: #timestamp put: aTimestamp! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 12/16/2000 01:58'!url	^url! !!HttpRequest methodsFor: 'accessing' stamp: 'bolot 6/21/2001 04:03'!url: aUrl	url := aUrl! !!HttpRequest methodsFor: 'accessing' stamp: 'brp 10/2/2004 14:56'!user	"currently, only basic authentication is supported"	| userID i |	userID := self header at: 'authorization' ifAbsent: [^nil].	userID := (userID notNil and: [(i := userID findString: 'Basic ') > 0]) 		ifTrue: [userID copyFrom: i + 6 to: userID size]		ifFalse: [nil].	^userID! !!HttpRequest methodsFor: 'user authentication' stamp: 'bolot 2/18/2002 19:24'!userObject: anObject	^self session ifNotNil: [self session userObject: anObject]! !!HttpRequest methodsFor: 'printing' stamp: 'lr 4/15/2010 08:56'!writeOn: aStream	"this can be used to form a client-side request and send it over network"	aStream nextPutAll: self method; nextPut: $ ; nextPutAll: self url; nextPut: $ ; nextPutAll: self protocol; nextPutAll: String crlf.	self header keysAndValuesDo: [:key :value |		aStream nextPutAll: key, ': ', value, String crlf].	aStream nextPutAll: String crlf.	"aStream nextPutAll: self body asString"! !!HttpPartialResponse methodsFor: 'accessing' stamp: 'bolot 1/11/2001 17:49'!producerBlock: aBlock	producerBlock := aBlock! !!HttpPartialResponse methodsFor: 'responding' stamp: 'bolot 1/11/2001 17:50'!pvtWriteContentLengthOn: aStream	"do nothing, since the length is not known yet"	self flag: #todo. "in HTTP/1.1, can set chunking"! !!HttpPartialResponse methodsFor: 'responding' stamp: 'bolot 1/11/2001 17:49'!pvtWriteContentsOn: aStream	producerBlock value: aStream! !!HttpResponse class methodsFor: 'bindings' stamp: 'svp 4/15/2003 15:06'!current	^#'HttpResponse-Current' binding! !!HttpResponse class methodsFor: 'bindings' stamp: 'svp 4/15/2003 15:07'!current: anHttpResponse	#'HttpResponse-Current' binding: anHttpResponse! !!HttpResponse class methodsFor: 'instance creation' stamp: 'michael.rueger 2/25/2009 12:42'!fromFileStream: aStream	^self basicNew		status: #ok;		"fieldAt: 'Expires' put: 'Thu, 15 Apr 2010 20:00:00 GMT';"		"fieldAt: 'Cache-Control' put: 'max-age=86400';"		contentType: aStream contentType;		contents: aStream;		yourself	! !!HttpResponse class methodsFor: 'instance creation' stamp: 'francoisstephany 7/21/2009 23:26'!fromMIMEDocument: aMIMEDoc	| content |	content := aMIMEDoc content.	content isString ifTrue:		[content := ReadStream on: content].	^self basicNew		status: #ok;		"fieldAt: 'Cache-Control' put: 'max-age=86400';"		contentType: aMIMEDoc contentType;		contents: content;		yourself	! !!HttpResponse class methodsFor: 'instance creation' stamp: 'francoisstephany 7/21/2009 23:24'!fromStream: aStream	^self basicNew		status: #ok;		"fieldAt: 'Expires' put: 'Thu, 15 Apr 2010 20:00:00 GMT';"		"fieldAt: 'Cache-Control' put: 'max-age=86400';"		contentType: aStream contentType;		contents: aStream;		yourself	! !!HttpResponse class methodsFor: 'instance creation' stamp: 'svp 5/13/2003 17:11'!fromStream: aStream contentType: mimeTypeString	^self basicNew		status: #ok;		"fieldAt: 'Expires' put: 'Thu, 15 Apr 2010 20:00:00 GMT';"		"fieldAt: 'Cache-Control' put: 'max-age=86400';"		contentType: mimeTypeString;		contents: aStream;		yourself	! !!HttpResponse class methodsFor: 'instance creation' stamp: 'svp 5/12/2003 16:10'!fromString: aString	^self basicNew		status: #ok;		"fieldAt: 'Cache-Control' put: 'max-age=86400';"		contentType: MIMEDocument contentTypeHtml;		contents: (ReadStream on: aString);		yourself! !!HttpResponse class methodsFor: 'instance creation' stamp: 'svp 5/13/2003 17:13'!fromString: aString contentType: contentTypeString	^self basicNew		status: #ok;		"fieldAt: 'Cache-Control' put: 'max-age=86400';"		contentType: contentTypeString;		contents: (ReadStream on: aString);		yourself! !!HttpResponse class methodsFor: 'instance creation' stamp: 'svp 5/12/2003 16:10'!fromUrl: aUrl	^self basicNew		status: #tempMoved;		fieldAt: 'Location' put: aUrl asString;		contentType: MIMEDocument contentTypeHtml;		contents: (ReadStream on: '<head><title>Object moved</title></head><body><h1>Object Moved</h1>This object may be found <a HREF="', aUrl asString,'">here</a>.</body>');		yourself! !!HttpResponse class methodsFor: 'initialization' stamp: 'SVP 8/16/1999 16:43'!initialize	"  HttpResponse initialize  "	self initializeStatusCodes.! !!HttpResponse class methodsFor: 'initialization' stamp: 'gc 8/28/2008 13:12'!initializeStatusCodes	"  HttpResponse initializeStatusCodes  "	StatusCodes := IdentityDictionary new		"1xx: Meta status codes"		at: #continue				put: ('100' -> 'Continue');		at: #switchingProtocols	put: ('101' -> 'Switching Protocols');		at: #processing			put: ('102' -> 'Processing'); "WebDav RFC: 2518"		"2xx: Success status codes"		at: #ok								put: ('200' -> 'OK');		at: #created							put: ('201' -> 'Created');		at: #accepted							put: ('202' -> 'Accepted');		at: #nonAuthoritativeInformation 	put: ('203' -> 'Non-Authoritative Information');		at: #noContent						put: ('204' -> 'No Content');		at: #resetContent	 					put: ('205' -> 'Reset Content');		at: #partialContent					put: ('206' -> 'Partial Content');		at: #multiStatus						put: ('207' -> 'Multi-Status'); "WebDav RFC: 2518"		"3xx: Redirection status codes"		at: #multipleChoices		put: ('300' -> 'Multiple Choices');		at: #permMoved			put: ('301' -> 'Moved Permanently'); "kept for compatibility"		at: #permanentlyMoved	put: ('301' -> 'Moved Permanently');		at: #found					put: ('302' -> 'Found');		at: #seeOther				put: ('303' -> 'See Other');										at: #notModified			put: ('304' -> 'Not Modified');		at: #useProxy				put: ('305' -> 'Use Proxy');		at: #temporaryRedirect	put: ('307' -> 'Temporary Redirect');		at: #tempMoved			put: ('307' -> 'Temporary Redirect'); "kept for compatibility"		"4xx: Client-Side Error status code"		at: #badRequest				put: ('400' -> 'Bad Request');		at: #unauthorized				put: ('401' -> 'Unauthorized');		at: #payment					put: ('402' -> 'Payment Required');		at: #forbidden				put: ('403' -> 'Forbidden');		at: #notFound					put: ('404' -> 'Not Found');		at: #notAllowed				put: ('405' -> 'Method Not Allowed');		at: #notAcceptable			put: ('406' -> 'Not Acceptable');		at: #proxyAuthRequired		put: ('407' -> 'Proxy Authentication Required');		at: #requestTimeout			put: ('408' -> 'Request Timeout');		at: #conflict					put: ('409' -> 'Conflict');		at: #gone						put: ('410' -> 'Gone');		at: #lenghtRequired			put: ('411' -> 'Lenght Required');		at: #preconditionFailed		put: ('412' -> 'Precondition Failed');		at: #entityTooLarge			put: ('413' -> 'Request Entity Too Large');		at: #uriTooLong				put: ('414' -> 'Request-URI Too Long');		at: #unsupportedMediaType	put: ('415' -> 'Unsupported Media Type');		at: #rangeNotSatisfiable	put: ('416' -> 'Requested Range Not Satisfiable');		at: #expectationFailed		put: ('417' -> 'Expectation Failed');		at: #unprocessableEntity	put: ('422' -> 'Unprocessable Entity'); "WebDav RFC: 2518"		at: #locked					put: ('423' -> 'Locked'); "WebDav RFC: 2518"		at: #failedDependency		put: ('424' -> 'Failed Dependency'); "WebDav RFC: 2518"		"5xx: Server-Side Error status codes"		at: #serverError				put: ('500' -> 'Internal Server Error');		at: #notImplemented			put: ('501' -> 'Not Implemented');		at: #badGateway				put: ('502' -> 'Bad Gateway');		at: #serviceUnavailable		put: ('503' -> 'Service Unavailable');		at: #gatewayTimeout			put: ('504' -> 'Gateway Timeout');		at: #versionNotSupported	put: ('505' -> 'HTTP Version Not Supported');		at: #InsufficientStorage	put: ('507' -> 'Insufficient Storage'); 	"WebDav RFC: 2518" 		yourself.	"Initialize an inverse mapping to lookup a symbol based on the numeric code"	StatusSymbols := Dictionary new.	StatusCodes associationsDo: 		[ :assn |		StatusSymbols at: assn value key asNumber put: assn key].! !!HttpResponse class methodsFor: 'instance creation' stamp: 'svp 5/12/2003 16:28'!new	^self basicNew		status: #ok;		"fieldAt: 'Cache-Control' put: 'max-age=86400';"		contentType: MIMEDocument contentTypeHtml;		contents: (ReadStream on: 'This is a simple HttpResponse');		yourself! !!HttpResponse class methodsFor: 'instance creation' stamp: 'gc 8/28/2008 14:28'!redirectTo: url	"Create a redirection response."	^(HttpResponse			status: #seeOther			contents: 'Temporarily moved to: <A HREF="', url, '">', url, '</A>')		fieldAt: 'Location' put: url;		fieldAt: 'URI' put: url; yourself! !!HttpResponse class methodsFor: 'preferences' stamp: 'svp 5/7/2003 04:13'!responseChunkSize	"This is the maximum number of bytes of the content stream that are written 	to the output stream during each iteration of the writing loop."	^#'HttpResponse-responseChunkSize' binding ifNil: [131072]! !!HttpResponse class methodsFor: 'preferences' stamp: 'svp 5/7/2003 04:10'!responseChunkSize: anInteger	^#'HttpResponse-responseChunkSize' binding: anInteger! !!HttpResponse class methodsFor: 'instance creation' stamp: 'svp 5/16/2003 23:08'!status: aSymbol contents: aString	^self basicNew		status: aSymbol;		contentType: MIMEDocument contentTypeHtml;		contents: (ReadStream on: aString);		yourself! !!HttpResponse class methodsFor: 'accessing' stamp: 'svp 4/15/2003 09:20'!statusCodeFor: aSymbol	^(StatusCodes at: aSymbol) key! !!HttpResponse class methodsFor: 'accessing' stamp: 'svp 4/15/2003 09:21'!statusDescriptionFor: aSymbol	^(StatusCodes at: aSymbol) value! !!HttpResponse class methodsFor: 'accessing' stamp: 'svp 10/28/2003 13:14'!statusSymbolFor: aCode	^StatusSymbols at: aCode asNumber ifAbsent: [#serverError]! !!HttpResponse methodsFor: 'accessing-cookies' stamp: 'svp 4/15/2003 01:08'!addCookies: newCookies		self cookies addAll: newCookies.! !!HttpResponse methodsFor: 'comanche processing' stamp: 'bolot 1/11/2001 17:51'!asHttpPartialResponseBlock: aBlock	^(self as: HttpPartialResponse)		producerBlock: aBlock;		yourself! !!HttpResponse methodsFor: 'comanche processing'!asHttpResponseTo: aRequest	^self! !!HttpResponse methodsFor: 'accessing' stamp: 'svp 5/16/2003 23:54'!contentLength	^contentLength! !!HttpResponse methodsFor: 'accessing' stamp: 'SVP 8/16/1999 11:54'!contentType	^contentType! !!HttpResponse methodsFor: 'accessing' stamp: 'SVP 8/16/1999 11:54'!contentType: aMimeType	contentType := aMimeType! !!HttpResponse methodsFor: 'accessing' stamp: 'SVP 8/16/1999 11:53'!contents	^contents! !!HttpResponse methodsFor: 'accessing' stamp: 'svp 5/16/2003 23:54'!contents: aStream	contents := aStream.	contentLength := aStream size.! !!HttpResponse methodsFor: 'accessing-cookies' stamp: 'DGD 7/20/2001 00:25'!cookies^ cookies ifNil:[cookies := OrderedCollection new]! !!HttpResponse methodsFor: 'defaults' stamp: 'SVP 8/12/1999 14:08'!defaultContentType	^MIMEDocument contentTypeHtml! !!HttpResponse methodsFor: 'initialize-release' stamp: 'SVP 8/26/1999 08:06'!destroy	self contents close.! !!HttpResponse methodsFor: 'accessing' stamp: 'svp 11/17/1999 11:08'!fieldAt: aString	^self fields at: aString! !!HttpResponse methodsFor: 'accessing' stamp: 'svp 11/17/1999 11:08'!fieldAt: aString ifAbsent: absBlock	^self fields at: aString ifAbsent: absBlock! !!HttpResponse methodsFor: 'accessing' stamp: 'svp 11/17/1999 11:08'!fieldAt: aString ifAbsentPut: absBlock	^self fields at: aString ifAbsentPut: absBlock! !!HttpResponse methodsFor: 'accessing' stamp: 'svp 11/17/1999 11:07'!fieldAt: aString put: aValue	self fields at: aString put: aValue! !!HttpResponse methodsFor: 'accessing' stamp: 'svp 4/22/2003 00:12'!fields	^fields ifNil: [fields := Dictionary new]! !!HttpResponse methodsFor: 'authentication' stamp: 'bolot 3/11/2002 14:22'!hashPassword: aPassword	^HttpRequest hashPassword: aPassword! !!HttpResponse methodsFor: 'accessing' stamp: 'svp 12/16/1999 11:33'!httpVersion	^'HTTP/1.1'! !!HttpResponse methodsFor: 'accessing' stamp: 'svp 4/15/2003 01:00'!isPersistent	^(self fieldAt: 'Connection') = 'Keep-Alive'! !!HttpResponse methodsFor: 'responding' stamp: 'svp 5/16/2003 23:56'!pvtWriteContentLengthOn: aStream	self contentLength ifNotNilDo:		[ :length |		aStream			nextPutAll: 'Content-length: ';			nextPutAll: length asString;			nextPutAll: String crlf]! !!HttpResponse methodsFor: 'responding' stamp: 'francoisstephany 7/21/2009 23:28'!pvtWriteContentTypeOn: aStream	aStream		nextPutAll: 'Content-type: ';		nextPutAll: self contentType asString;		nextPutAll: String crlf! !!HttpResponse methodsFor: 'responding' stamp: 'pmm 5/20/2010 22:29'!pvtWriteContentsOn: aStream	| chunkSize cnts |	chunkSize := self responseChunkSize.	cnts := self contents.	(contents isBinary and: [ aStream isBinary not ])		ifTrue: [ aStream binary ].	[cnts atEnd] whileFalse: 		[aStream nextPutAll: (cnts next: chunkSize); flush]! !!HttpResponse methodsFor: 'responding' stamp: 'svp 4/15/2003 01:10'!pvtWriteCookiesOn: aStream 	self cookies		do: [:cookie | aStream nextPutAll: 'Set-Cookie: ';				 nextPutAll: cookie;				 nextPutAll: String crlf]! !!HttpResponse methodsFor: 'responding' stamp: 'svp 4/22/2003 00:19'!pvtWriteFieldsOn: aStream	fields isEmptyOrNil ifTrue: [ ^self ].	fields keysAndValuesDo: [ :k :v |		aStream			nextPutAll: k;			nextPutAll: ': ';			nextPutAll: v;			nextPutAll: String crlf	]! !!HttpResponse methodsFor: 'responding' stamp: 'bolot 12/16/2000 09:29'!pvtWriteStatusOn: aStream	aStream		nextPutAll: self httpVersion;		nextPut: $ ;		nextPutAll: self statusCodeAndReason;		nextPutAll: String crlf! !!HttpResponse methodsFor: 'accessing' stamp: 'svp 5/7/2003 04:13'!responseChunkSize	^self class responseChunkSize! !!HttpResponse methodsFor: 'authentication' stamp: 'bolot 3/11/2002 14:22'!secretWord	^HttpRequest secretWord! !!HttpResponse methodsFor: 'accessing-cookies' stamp: 'DGD 7/20/2001 00:30'!setCookieName: nameString value: valueString expiresDate: expiresDate expiresTime: expiresTime path: pathString domain: domainString secure: secureBoolean 	"set a cookie in the Response"	| temp |	temp := String new writeStream.	"NAME=VALUE"	temp nextPutAll: nameString;		 nextPut: $=;		 nextPutAll: valueString.	"; expires=Wdy, DD-Mon-YYYY HH:MM:SS GMT"	(expiresDate notNil and:[ expiresTime notNil])		ifTrue: [temp nextPutAll: '; expires=';				 nextPutAll: expiresDate weekday;				 nextPutAll: ', '.			expiresDate printOn: temp format: #(1 2 3 $- 2 2 2 ).			temp nextPutAll: ' ';				 nextPutAll: expiresTime print24;				 nextPutAll: ' GMT'].	"; path=PATH"	pathString notNil		ifTrue: [temp nextPutAll: '; path=';				 nextPutAll: pathString].	"; domain=DOMAIN"	domainString notNil		ifTrue: [temp nextPutAll: '; domain=';				 nextPutAll: domainString].	"; secure"	(secureBoolean notNil			and: [secureBoolean])		ifTrue: [temp nextPutAll: '; secure'].	""	self cookies add: temp contents! !!HttpResponse methodsFor: 'accessing-cookies' stamp: 'DGD 7/20/2001 00:24'!setCookieName: nameString value: valueString path: pathString 	"set a cookie in the Response"	self		setCookieName: nameString		value: valueString		expiresDate: nil		expiresTime: nil		path: pathString		domain: nil		secure: nil! !!HttpResponse methodsFor: 'authentication' stamp: 'bolot 3/11/2002 14:12'!setUsername: aUsername	"save the username in a cookie"	self		setCookieName: #ComancheUsername		value: aUsername		path: '/'.	self flag: #todo.	"allow for multiple usernames"! !!HttpResponse methodsFor: 'authentication' stamp: 'bolot 3/11/2002 17:30'!setUsername: aUsername password: aPassword	"save the username/password in cookies"	| pwHash |	self setUsername: aUsername.	pwHash := self hashPassword: aPassword.	self		setCookieName: #ComanchePassword		value: pwHash asString		path: '/'.	self flag: #todo.	"allow for multiple usernames"! !!HttpResponse methodsFor: 'accessing' stamp: 'SVP 8/16/1999 11:53'!status	^status! !!HttpResponse methodsFor: 'accessing' stamp: 'gc 8/28/2008 14:29'!status: aSymbol	status := aSymbol! !!HttpResponse methodsFor: 'accessing' stamp: 'svp 11/18/1999 13:03'!statusCode	^(StatusCodes at: self status) key.! !!HttpResponse methodsFor: 'accessing' stamp: 'SVP 8/26/1999 10:41'!statusCodeAndReason	| tmp |	tmp := StatusCodes at: self status.	^tmp key, ' ', tmp value.! !!HttpResponse methodsFor: 'responding' stamp: 'svp 5/15/2003 12:50'!writeHeadersOn: aStream	| tmp |	"Header"	tmp := WriteStream on: ''.	self pvtWriteStatusOn: tmp.	self pvtWriteFieldsOn: tmp.	self pvtWriteCookiesOn: tmp.	self pvtWriteContentTypeOn: tmp.	self pvtWriteContentLengthOn: tmp.	tmp nextPutAll: String crlf.	aStream nextPutAll: tmp contents; flush.! !!HttpResponse methodsFor: 'responding' stamp: 'gc 8/23/2008 17:54'!writeOn: aStream	self writeHeadersOn: aStream.	self pvtWriteContentsOn: aStream.! !!KomAuthDb class methodsFor: 'instance creation' stamp: 'svp 5/14/2003 17:35'!new	^super new initialize! !!KomAuthDb methodsFor: 'accessing' stamp: 'svp 5/14/2003 17:20'!addUser: aString withPassword: password	self passwords at: aString put: (self encode: password)! !!KomAuthDb methodsFor: 'encode-decode' stamp: 'svp 5/14/2003 17:31'!decode: encodedPassword using: aPassword	^String streamContents: 		[ :strm |		1 to: encodedPassword size by: 2 do: 			[ :in |			strm nextPut: 				(Character value: 					(((('0123456789ABCDEF' indexOf: (encodedPassword at: in)) - 1) * 16) +					(('0123456789ABCDEF' indexOf: (encodedPassword at: (in + 1))) - 1)))]]! !!KomAuthDb methodsFor: 'encode-decode' stamp: 'svp 5/14/2003 17:30'!encode: password	^String streamContents: 		[ :strm |		password do: [ :ea | strm nextPutAll: ea hex]]! !!KomAuthDb methodsFor: 'accessing' stamp: 'svp 5/14/2003 17:36'!includesUser: userName	^self passwords includesKey: userName! !!KomAuthDb methodsFor: 'initialize-release' stamp: 'brp 10/2/2004 14:34'!initialize	super initialize.	passwords := Dictionary new! !!KomAuthDb methodsFor: 'accessing' stamp: 'svp 5/14/2003 17:32'!passwords	^passwords! !!KomAuthDb methodsFor: 'accessing' stamp: 'svp 5/14/2003 17:36'!removeUser: userName	^self passwords removeKey: userName! !!KomAuthDb methodsFor: 'password verification' stamp: 'svp 5/14/2003 17:37'!verifyPassword: aPassword forUser: userName	(self includesUser: userName) ifFalse: [^false].	^(self decode: (self passwords at: userName) using: aPassword) = aPassword! !!KomModuleValidator methodsFor: 'as yet unclassified' stamp: 'svp 5/16/2003 13:10'!doComancheModule: aComancheModule	"This method assumes that module traversal happens in depth first order"	aComancheModule validateContext: self problems! !!KomModuleValidator methodsFor: 'as yet unclassified' stamp: 'svp 5/16/2003 12:50'!problems	^problems ifNil: [problems := OrderedCollection new]! !!KomModuleVisitor methodsFor: 'as yet unclassified' stamp: 'svp 5/16/2003 12:30'!doBlock: aBlock	aBlock numArgs = 1 ifTrue: [self doMonadicValuable: aBlock].	aBlock numArgs = 1 ifTrue: [self doDyadicValuable: aBlock]! !!KomModuleVisitor methodsFor: 'as yet unclassified' stamp: 'svp 5/16/2003 12:31'!doComancheModule: aComancheModule	"For visiting a module hierarchy"! !!KomModuleVisitor methodsFor: 'as yet unclassified' stamp: 'svp 5/16/2003 12:32'!doDyadicValuable: aDyadicValuable	"By default, do nothing since these aren't really modules"! !!KomModuleVisitor methodsFor: 'as yet unclassified' stamp: 'svp 5/16/2003 12:32'!doMessageSend: aMessageSend	aMessageSend arguments size = 1 ifTrue: [^self doMonadicValuable: aMessageSend].	aMessageSend arguments size = 2 ifTrue: [^self doDyadicValuable: aMessageSend]! !!KomModuleVisitor methodsFor: 'as yet unclassified' stamp: 'svp 5/16/2003 12:28'!doMonadicValuable: aMonadicValuable	"By default, do nothing since these aren't really modules"! !!KomSession class methodsFor: 'bindings' stamp: 'svp 5/14/2003 00:49'!current	^#'KomSession-current' binding! !!KomSession class methodsFor: 'bindings' stamp: 'svp 5/14/2003 00:49'!current: aKomSession	^#'KomSession-current' binding: aKomSession! !!KomSession class methodsFor: 'class initialization' stamp: 'svp 5/14/2003 00:44'!initialize	LastSessionID := Time totalSeconds.! !!KomSession class methodsFor: 'instance creation' stamp: 'svp 5/14/2003 00:44'!new	^ super new initialize! !!KomSession class methodsFor: 'session id' stamp: 'DGD 7/24/2001 20:59'!nextSessionID	self flag: #TODO.	"more robust unique number"	LastSessionID := LastSessionID + 1.	^ (65535 atRandom hex allButFirst: 3)		, (LastSessionID hex allButFirst: 3)		, (65535 atRandom hex allButFirst: 3)! !!KomSession methodsFor: 'accessing' stamp: 'svp 5/14/2003 00:44'!attributes	"answer the attributes stored in Session"	^ attributes! !!KomSession methodsFor: 'accessing' stamp: 'svp 5/14/2003 00:44'!id	^id! !!KomSession methodsFor: 'initialization' stamp: 'brp 10/2/2004 14:34'!initialize	super initialize.	attributes := Dictionary new.	id := self class nextSessionID! !!KomSession methodsFor: 'accessing' stamp: 'svp 5/14/2003 01:01'!lastAccess	^lastAccess! !!KomSession methodsFor: 'accessing' stamp: 'svp 5/14/2003 01:01'!lastAccess: secondCount	lastAccess := secondCount! !!KomSession methodsFor: 'printing' stamp: 'svp 5/14/2003 01:01'!printOn: aStream 	aStream 		nextPutAll: self class name;		nextPutAll: ' id:';		nextPutAll: id asString;		nextPutAll: ' attributes:';		nextPutAll: attributes asString;		nextPutAll: ' lastAccess:';		nextPutAll: lastAccess asString! !!KomSession methodsFor: 'accessing' stamp: 'svp 5/14/2003 01:00'!touch	lastAccess := Time totalSeconds.! !!ModuleAssembly class methodsFor: 'as yet unclassified' stamp: 'svp 4/18/2003 10:16'!core	^super new 		initialize;		basicPushModule: ModCore new;		yourself! !!ModuleAssembly class methodsFor: 'as yet unclassified' stamp: 'svp 4/18/2003 10:16'!new	^super new 		initialize;		basicPushModule: ModMulti new;		yourself! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 4/18/2003 10:03'!addAssembly: aModuleAssembly	self addModule: aModuleAssembly rootModule! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 5/16/2003 15:37'!addModule: aComancheModule	aComancheModule validateForStack: self moduleStack.	self currentModule addSubModule: aComancheModule! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 5/13/2003 09:59'!addPlug: aBlockOrMessageSend	"Blocks and MessageSends are compatible with the ComancheModule	protocol, so just add it as a module"	self addModule: aBlockOrMessageSend! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 4/18/2003 10:22'!alias: pathPrefix to: aBlock	self 		pushModule: (ModAlias new pathPrefix: pathPrefix; yourself)		andDo: aBlock! !!ModuleAssembly methodsFor: 'construction' stamp: 'brp 10/2/2004 14:35'!authenticate: anAuthDb realm: realmString 	self addModule: ((ModAuth new)				authDb: anAuthDb;				realm: realmString; yourself)! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 4/18/2003 10:16'!basicPushModule: aModule	^self moduleStack addLast: aModule.! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 4/17/2003 17:12'!currentModule	^self moduleStack last! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 5/16/2003 15:45'!directoryIndex: indexFileString	self 		pushModule: (ModDir new directoryIndex: indexFileString; yourself)		andDo: [self addModule: ModAutoIndex new].! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 5/15/2003 16:29'!documentRoot: docRoot	self pushModule: (ModDoc new documentRoot: docRoot; yourself).! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 4/18/2003 10:22'!documentRoot: docRoot do: aBlock	self 		pushModule: (ModDoc new documentRoot: docRoot; yourself)		andDo: aBlock! !!ModuleAssembly methodsFor: 'construction' stamp: 'brp 10/2/2004 14:34'!initialize	super initialize.		moduleStack := OrderedCollection new! !!ModuleAssembly methodsFor: 'error handling' stamp: 'svp 4/18/2003 12:00'!invalidContext: message	^self error: ('Invalid Context: ', message)! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 5/15/2003 11:41'!logTo: aLogger	self addModule: (ModLog new logger: aLogger; yourself)! !!ModuleAssembly methodsFor: 'private' stamp: 'svp 4/18/2003 11:57'!lookupMod: testBlock ifFound: foundBlock ifNotFound: notFoundBlock	| thisMod |	moduleStack size to: 1 by: -1 do: 		[ :i |		thisMod := moduleStack at: i.		(testBlock value: thisMod)			ifTrue: [^foundBlock value: thisMod]].	^notFoundBlock value! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 4/17/2003 17:10'!moduleStack	^moduleStack! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 5/15/2003 16:59'!notFound	self addModule: (ModNotFound new)! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 4/18/2003 09:50'!popModule	self moduleStack removeLast! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 4/18/2003 10:16'!pushModule: aModule	self addModule: aModule.	^self basicPushModule: aModule.! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 5/15/2003 16:10'!pushModule: aModule andDo: aBlock	"Push aModule on our stack and evaluate aBlock, note, this directive 	protects against an unbalanced stack because certain directives just	push a new module on the stack without popping it"	| stackSize |	stackSize := moduleStack size.	self pushModule: aModule.	aBlock value.	moduleStack := moduleStack copyFrom: 1 to: stackSize.! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 4/18/2003 10:03'!rootModule	^self moduleStack first! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 5/15/2003 16:45'!serveFiles	self addModule: ModFile new! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 5/15/2003 15:52'!serverRoot: aDirectoryPath	self lookupMod: [ :mod | mod isCore ]		ifFound: [ :mod | mod serverRoot: aDirectoryPath ]		ifNotFound: [ self invalidContext: 'serverRoot directive requires ModCore' ]! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 5/15/2003 16:07'!sessionTimeout: minutes	self lookupMod: [ :ea | ea isSession ]		ifFound: [ :module | module secondsToLive: (minutes * 60)]		ifNotFound: [ self invalidContext: 'sessionTimeout directive requires ModSession']! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 5/15/2003 16:07'!sessionTimeoutSeconds: seconds	self lookupMod: [ :ea | ea isSession ]		ifFound: [ :module | module secondsToLive: seconds]		ifNotFound: [ self invalidContext: 'sessionTimeout directive requires ModSession']! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 5/15/2003 16:03'!trackSessions	self pushModule: ModSession new! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 5/15/2003 16:10'!trackSessions: aBlock	self pushModule: ModSession new andDo: aBlock! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 4/18/2003 10:24'!virtualDocumentRoot: aTemplateString do: aBlock	self pushModule: (ModVhost new template: aTemplateString; yourself) andDo:		[self pushModule: (ModVhostDoc new documentRoot: ''; yourself) andDo: aBlock]! !!ModuleAssembly methodsFor: 'construction' stamp: 'svp 5/15/2003 00:48'!virtualHost: hostString do: aBlock	self pushModule: (ModVhost new template: '%0'; yourself) andDo:		[self pushModule: (ModVhostAlias new host: hostString; yourself) andDo: aBlock]! !!MultipartChunk class methodsFor: 'instance creation' stamp: 'bolot 12/16/2000 02:41'!from: aDictionary	aDictionary isEmptyOrNil		ifTrue: [^nil].	^self new initializeFrom: aDictionary! !!MultipartChunk methodsFor: 'accessing' stamp: 'bolot 12/16/2000 02:36'!contentType	^properties at: #contentType! !!MultipartChunk methodsFor: 'accessing' stamp: 'bolot 12/16/2000 02:36'!fieldName	^properties at: #fieldName! !!MultipartChunk methodsFor: 'accessing' stamp: 'bolot 12/16/2000 02:36'!fileName	^properties at: #fileName! !!MultipartChunk methodsFor: 'accessing' stamp: 'bolot 12/16/2000 02:36'!fileName: aString	properties at: #fileName put: aString! !!MultipartChunk methodsFor: 'initialize-release' stamp: 'brp 10/2/2004 16:03'!initializeFrom: aDictionary	| header str fileName fieldName idx contentType |	"PRE: all keys in aDictionary are low-case"	header := aDictionary.	properties := Dictionary new.self flag: #todo.	"parse the header, pick out: filename, etc."	str := (header at: 'content-disposition' ifAbsent: ['']).	fileName := fieldName := ''.	idx := str findString: 'filename='.	idx > 0 ifTrue:		[fileName := str copyFrom: idx + 10 to: (str indexOf: $" startingAt: idx+10) - 1].	properties at: #fileName put: fileName.	idx := str findString: 'name='.	idx > 0 ifTrue:		[fieldName := str copyFrom: idx + 6 to: (str indexOf: $" startingAt: idx+6) - 1].	properties at: #fieldName put: fieldName.	contentType := header at: 'content-type' ifAbsent: [MIMEDocument defaultContentType].	properties at: #contentType put: contentType."Transcript show: 'field=', fieldName; cr; show: 'file=', fileName; cr;	show: 'content-type=', contentType; cr."! !!MultipartChunk methodsFor: 'testing' stamp: 'brp 10/2/2004 14:24'!isSaved	^(properties at: #isSaved ifAbsent: [false])! !!MultipartChunk methodsFor: 'accessing' stamp: 'bolot 12/16/2000 02:38'!multipartBoundary	^multipartBoundary! !!MultipartChunk methodsFor: 'initialize-release' stamp: 'bolot 12/16/2000 02:39'!multipartBoundary: aString	multipartBoundary := aString! !!MultipartChunk methodsFor: 'accessing' stamp: 'gk 4/7/2008 01:19'!saveToStream: outStream	"This method is no longer dumb. It streams data chunk wise so it doesn't have to fit	into memory all at once. Answers the number of bytes written to the stream.	The logic for stripping 128 bytes from IE4/Mac is what makes it look complex."	| boundary size firstBuffer origFileName |	self setSavedFlag.	origFileName := self fileName.	boundary := String crlf, self multipartBoundary.	size := 0.	firstBuffer := ''.		self stream 		upToAll: boundary		bufferSize: 1000000 do: [:buffer |			firstBuffer				ifNil: [					size := size + buffer size.					outStream nextPutAll: buffer]				ifNotNil: [					"IE4 for Mac appends 128 bytes of Mac file system info - must remove"					firstBuffer := firstBuffer, buffer.					firstBuffer size >= 128 ifTrue: [						(firstBuffer first asciiValue = 0 and: 							[firstBuffer second asciiValue = origFileName size 								and: [(firstBuffer copyFrom: 3 to: origFileName size + 2) = origFileName]]) 							ifTrue: [								firstBuffer := firstBuffer copyFrom: 129 to: firstBuffer size].						size := size + firstBuffer size.						outStream nextPutAll: firstBuffer.						firstBuffer := nil]]].	firstBuffer ifNotNil: [		size := size + firstBuffer size.		outStream nextPutAll: firstBuffer].		^ size! !!MultipartChunk methodsFor: 'accessing' stamp: 'bolot 12/16/2000 02:37'!setSavedFlag	properties at: #isSaved put: true! !!MultipartChunk methodsFor: 'accessing' stamp: 'svp 10/28/2003 12:18'!stream	^stream! !!MultipartChunk methodsFor: 'accessing' stamp: 'svp 10/28/2003 12:19'!stream: aReadableStream	stream := aReadableStream! !!NetworkHost class methodsFor: 'instance creation' stamp: 'svp 9/11/2000 11:28'!fromNamePath: namePath	^self new		initializeFromNamePath: namePath;		yourself! !!NetworkHost class methodsFor: 'instance creation' stamp: 'svp 11/5/1999 13:15'!fromString: aString	^self new		initializeFromString: aString;		yourself! !!NetworkHost methodsFor: 'accessing' stamp: 'svp 11/18/1999 19:59'!domainString	| sz |	^self isNamedHost ifTrue: [		((sz := self name size) >= 2) ifTrue: [			(self name at: (sz - 1)), '.', self name last.		] ifFalse: [			''		]	] ifFalse: [		self nameString	]! !!NetworkHost methodsFor: 'accessing' stamp: 'svp 4/16/2003 13:50'!fileSystemPath	| delim |	delim := FileDirectory pathNameDelimiter.	^String streamContents: 		[ :strm |		self isNamedHost			ifTrue: [strm nextPutAll: 'hostname']			ifFalse: [strm nextPutAll: 'ipaddress'].		strm nextPut: delim.		self name reversed 			do:				[ :part | strm nextPutAll: part asString ]			separatedBy: 				[ strm nextPut: delim ]]! !!NetworkHost methodsFor: 'accessing' stamp: 'svp 11/5/1999 13:43'!fullName	^fullName! !!NetworkHost methodsFor: 'accessing' stamp: 'svp 12/9/1999 17:12'!httpReference	^'http://', self fullName! !!NetworkHost methodsFor: 'initialization' stamp: 'svp 11/5/1999 13:32'!initializeFromIPAddress: str	| nums |	((str occurrencesOf: $.) = 3) ifTrue: [		nums := (str findTokens: '.') collect: [ :ea | 			ea isPositiveInteger ifTrue: [				ea asNumber			] ifFalse: [ ^self ]		].		name := nums.		type := #address.	].			! !!NetworkHost methodsFor: 'initialization' stamp: 'svp 9/11/2000 11:28'!initializeFromNamePath: namePath	name := namePath.	type := #name.	! !!NetworkHost methodsFor: 'initialization' stamp: 'svp 11/5/1999 13:36'!initializeFromString: aString	^self initializeFromString: aString defaultPort: 80	! !!NetworkHost methodsFor: 'initialization' stamp: 'svp 11/5/1999 13:43'!initializeFromString: aString defaultPort: dPort	| tmp |	fullName := aString.	tmp := self initializePortFromString: aString defaultPort: dPort.	self initializeFromIPAddress: tmp.	name ifNil: [		name := tmp findTokens: '.'.		type := #name.	].	! !!NetworkHost methodsFor: 'initialization' stamp: 'brp 10/2/2004 14:53'!initializePortFromString: aString defaultPort: dPort 	| in tmp |	^(in := aString indexOf: $:) > 0 		ifTrue: 			[tmp := aString copyFrom: in + 1 to: aString size.			port := tmp isPositiveInteger 				ifTrue: [tmp asNumber]				ifFalse: [dPort].			aString copyFrom: 1 to: in - 1]		ifFalse: 			[port := dPort.			aString]! !!NetworkHost methodsFor: 'testing' stamp: 'svp 11/5/1999 13:37'!isNamedHost	^self type == #name! !!NetworkHost methodsFor: 'accessing' stamp: 'brp 10/2/2004 14:39'!machineName	^(self isNamedHost and: [self name size >= 3]) 		ifTrue: [self name first]		ifFalse: [nil]! !!NetworkHost methodsFor: 'accessing' stamp: 'svp 11/5/1999 13:37'!name	^name! !!NetworkHost methodsFor: 'accessing' stamp: 'CdG 11/4/2005 23:43'!nameString	^ String streamContents: [ :str |			self name do: [:nm | str nextPutAll: nm printString] separatedBy: [str nextPut: $.] ]! !!NetworkHost methodsFor: 'accessing' stamp: 'svp 11/5/1999 13:37'!port	^port! !!NetworkHost methodsFor: 'accessing' stamp: 'svp 11/5/1999 13:37'!type	^type! !!NetworkHost methodsFor: 'accessing' stamp: 'brp 10/2/2004 15:11'!vhostName: nameIndex letter: letterIndex 	"First get the name component"	| ni word nStart nEnd li |	ni := nameIndex asNumber.	word := ni = 0 				ifTrue: [self nameString]				ifFalse: 					[nStart := ni < 0 ifTrue: [name size + 1 + ni] ifFalse: [ni].					nEnd := nStart.					(nameIndex endsWith: '+') ifTrue: [nStart := 1].					(nStart < 1 or: [nStart > name size]) 						ifTrue: ['_']						ifFalse: 							[String streamContents: 									[:strm | 									(nStart to: nEnd) do: [:in | strm nextPutAll: (name at: in)]										separatedBy: [strm nextPut: $.]]]].	"Now get the letters"	li := letterIndex asNumber.	li = 0 		ifTrue: [^word]		ifFalse: 			[li < 0 				ifTrue: 					[nStart := word size + 1 + li.					nEnd := nStart.					(letterIndex endsWith: '+') ifTrue: [nStart := 1]]				ifFalse: 					[nStart := li.					nEnd := (letterIndex endsWith: '+') ifTrue: [word size] ifFalse: [nStart]].			(nStart < 1 or: [nStart > name size]) 				ifTrue: [^'_']				ifFalse: [^word copyFrom: nStart to: nEnd]]! !!Object methodsFor: '*KomHttpServer' stamp: 'SVP 8/23/1999 19:17'!asHtmlDocumentForRequest: aNetworkRequest	self error: 		('The requested object (', 		self asString, 		'), could not be converted into HTML for your browser.')! !!Object methodsFor: '*KomHttpServer' stamp: 'SVP 8/23/1999 19:23'!asHttpResponseTo: anHttpRequest	^(self asHtmlDocumentForRequest: anHttpRequest) 		asHttpResponseTo: anHttpRequest! !!Object methodsFor: '*KomHttpServer' stamp: 'gc 3/4/2009 00:34'!contentType	^MIMEDocument defaultContentType! !!Object methodsFor: '*KomHttpServer' stamp: 'svp 5/16/2003 12:47'!isComancheModule	^false! !!Transcripter methodsFor: '*KomHttpServer' stamp: 'brp 10/2/2004 16:22'!isTranscriptStream	^ true! !!TextAnchor methodsFor: '*KomHttpServer' stamp: 'bolot 3/17/2001 22:45'!printHtmlOpenTagOn: strm	"do nothing for now"	"save the embedded image in a file to be served by Comanche"! !!BlockContext methodsFor: '*KomHttpServer' stamp: 'svp 5/15/2003 10:10'!doPostProcessingFor: request response: response	"The method is to provide compatibility with HttpAdaptor's post processing.	The receiver is expected to accept two arguments."	^self value: request value: response! !!BlockContext methodsFor: '*KomHttpServer' stamp: 'svp 5/13/2003 09:53'!processHttp	"<Boolean> The receiver should answer a boolean to indicate whether 	there is an HttpResponse available (accessed by HttpResponse current).	If the receiver takes no arguments, then assume that it answers a Boolean	and uses dyanmic bindings to access the current request/response, otherwise	pass in the current request and set the current response."	| response |	self numArgs = 0		ifTrue: [^self copy fixTemps value].	self numArgs = 1		ifTrue: 			[response := self copy fixTemps value: HttpRequest current.			response ifNotNil:				[HttpResponse current: response.				^true].			^false].! !!BlockContext methodsFor: '*KomHttpServer' stamp: 'svp 4/17/2003 09:00'!processHttpRequest: request	"<HttpResponse> The receiver should answer an HttpResponse for sending 	to the client."	self numArgs = 1		ifTrue: [^self copy fixTemps value: request].	self numArgs = 0		ifTrue: [^self copy fixTemps value].! !!BlockContext methodsFor: '*KomHttpServer' stamp: 'svp 5/16/2003 12:34'!processVisitor: aKomModuleVisitor	^aKomModuleVisitor doBlock: self! !!BlockContext methodsFor: '*KomHttpServer' stamp: 'svp 5/16/2003 23:44'!validateForStack: anArray	"Do nothing, provided to provide compatibility with ComancheModule"! !!BlockContext methodsFor: '*KomHttpServer' stamp: 'svp 5/16/2003 13:22'!visitWithValuable: aMonadicValuable	aMonadicValuable value: self.! !!WriteStream methodsFor: '*KomHttpServer' stamp: 'gc 3/4/2009 00:36'!asHttpResponseTo: request	^HttpResponse fromMIMEDocument: 		(MIMEDocument contentType: self contentType content: self contents)! !!WriteStream methodsFor: '*KomHttpServer' stamp: 'gc 3/4/2009 00:35'!contentType	self flag: #svp.	"SVP: We should not be assuming that all write streams contain html content.  This needs to be fixed."	^'text/html' asMIMEType! !!WriteStream methodsFor: '*KomHttpServer' stamp: 'cmm 11/10/2002 20:35'!endEntry	"No-op for compatibility with TranscriptStream."! !!TranscriptStream methodsFor: '*KomHttpServer' stamp: 'brp 10/2/2004 16:21'!isTranscriptStream	^ true! !!TextColor methodsFor: '*KomHttpServer' stamp: 'bolot 3/17/2001 22:40'!printHtmlCloseTagOn: strm	strm		nextPutAll: '</FONT>'! !!TextColor methodsFor: '*KomHttpServer' stamp: 'bolot 3/17/2001 22:53'!printHtmlOpenTagOn: strm	strm		nextPutAll: '<FONT COLOR="#';		nextPutAll: self color hex;		nextPutAll: '">'! !!UndefinedObject methodsFor: '*KomHttpServer' stamp: 'svp 5/16/2003 23:09'!asHttpResponseTo: request	^HttpResponse 		status: #notFound 		contents: 'The object you requested was not found on this server.'! !"KomHttpServer"!!WADeprecatedApi commentStamp: 'pmm 4/17/2007 00:16' prior: 0!WADeprecatedApi is a notification that gets signaled if someone used a deprecated Seaside method.see #deprecatedApi!!WADynamicVariable commentStamp: 'pmm 4/17/2007 00:14' prior: 0!A WADynamicVariable is a variable that is visible only in the stackframes outgoing from this one.Example:WADynamicVariable	use: 'Seaside'	during: [ self compilcatedCalculation ]	WheneverWADynamicVariable valuegets evaluated somewhere inside [ self compilcatedCalculation ] or a method invoked directly or indirectly by it, its value will be 'Seaside'. If no #use:during: handler is around the current stack frame, then the value will be the return value of #defaultValue.Do not use WADynamicVariable directly, instead create a subclass for each variable you want to use.!!WACurrentSession commentStamp: 'pmm 4/17/2007 00:15' prior: 0!A WACurrentSession is the dynamic variable for the current Seaside session. See superclass comment for what a dynamic variable is.!!WAValidationNotification commentStamp: 'cds 7/25/2005 10:17' prior: 0!I am signaled to indicate that a validation has occurred.  See: Object>>validationError:, WAComponent>>validateWith: and WAValidationDecoration.!!WAExternalID commentStamp: 'pmm 4/22/2007 12:55' prior: 0!I am a session or conticuation key.!!WABug0073Test commentStamp: 'pmm 5/31/2008 10:40' prior: 0!http://code.google.com/p/seaside/issues/detail?id=73!!WAPlatformTest commentStamp: 'pmm 9/15/2007 08:57' prior: 0!A WAPlatformTest is a test to make sure the platform (= the Smalltalk dialect we are running on) implements the protocol we need for system classes like Collection. An example would be to make sure Collection implements #count: with the sementics we need.!!WABrush commentStamp: 'lr 3/27/2007 11:18' prior: 0!I represent a brush to be used on a *WACanvas*.Instance Variables	canvas:		The canvas instance I am used with.	parent:		The parent brush I am used within.	closed:		Wether I have been closed/flushed yet.!!WACompound commentStamp: 'pmm 9/22/2007 22:22' prior: 0!I am the superclass for stuff that is not html element but you still want to access via the canvas API.!!WADateInput commentStamp: 'pmm 4/30/2007 23:41' prior: 0!I am a composition of three input fields that allow the user to select year, month and day. #options: can be used to toggle them individually.The argument for my callback blocks is an instance of Date.See WADateTimeTest >> #renderDateTimeOn:!!WATimeInput commentStamp: 'pmm 4/30/2007 23:41' prior: 0!I am a composition of three input fields that allows the user to select hour, minute and optionally second.#withSeconds and #withoutSeconds can be used to toggle seconds.The argument for my callback blocks is an instance of Time.See WADateTimeTest >> #renderDateTimeOn:!!WATagBrush commentStamp: 'pmm 4/15/2007 22:14' prior: 0!This is the superclass for all XML element classes. Its main addtions are- element name (#tag)- attributes (instance of WAHtmlAttributes)- common events (onXXX), this is a hack and would better be solved with traits!!WAAnchorTag commentStamp: 'lr 7/4/2007 20:42' prior: 0!I'm the class responsible for adding anchors (links) to your webpage. There are multiple ways of using me.1. In the following case, the method #doSomethingOnClick will be sent to self when the user click on the anchor 'Click here to do something':	html anchor		callback: [ self doSomethingOnClick ];		with: 'Click here to do something'.		The following code is a shortcut to create an anchor. The executed action is #doSomethingOnClick and the text is 'Do Something On Click':	html anchor		on: #doSomethingOnClick of: self2. In the following case, a link to an external resource will be generated:	html anchor		url: 'http://www.seaside.st';		with: 'Visit the Seaside'!!WAImageMapTag commentStamp: 'lr 8/17/2007 18:56' prior: 0!A WAImageMapTag is supposed to be used like this:	html map		callback: [ :point | self click: point ];		with: [ html image url: 'foo.gif' ]			An example can be found in WAScreenshot.Technincal:http://www.w3.org/TR/html4/struct/objects.html#include-mapsThe location clicked is passed to the server as follows. The user agent derives a new URI from the URI specified by the href attribute of the A element, by appending `?' followed by the x and y coordinates, separated by a comma. The link is then followed using the new URI. For instance, in the given example, if the user clicks at the location x=10, y=27 then the derived URI is "http://www.acme.com/cgi-bin/competition?10,27".!!WAPopupAnchorTag commentStamp: 'lr 7/4/2007 20:46' prior: 0!I am used to create a link that opens in a new window. A name can be specified using #name: and many features can be configured. Note, that not all features are supported on all web browser platforms. If Javascript is disabled the link will behave like any other anchor.Most of the time a popup-anchor is created like this:	html popupAnchor		callback: [ WARenderLoop new call: WACounter new ];		with: 'Open the counter within a new window'This code creates a new render-loop and displays a new instance of WACounter within the new browser window.		!!WABreakTag commentStamp: 'pmm 9/22/2007 22:22' prior: 0!The BR element forcibly breaks (ends) the current line of text. Authors are advised to use style sheets to control text flow around floating images and other objects.Prohibiting a line break Sometimes authors may want to prevent a line break from occurring between two words. The &nbsp; entity (&#160; or &#xA0;) acts as a space where user agents should not cause a line break.!!WACollectionTag commentStamp: 'pmm 4/23/2007 20:59' prior: 0!This element allows the use to select one (in single selection mode) or multiple (in single selection mode) elements. Multiple selection can be triggered with #beMultiple, single selection can be triggered with #beSingle .Default is single selection.The general idea is that you pass the colletion of options to #list: and use #labels: to customize their rendering. The selected option(s) can be set with: #selected:.This whole class is kind of an akward hack, but noone needs MI anyway. You can always get a way with composition and delegation!!WAListTag commentStamp: 'pmm 6/30/2007 00:46' prior: 0!Abstract base class for ordered and unordered list tags.Ordered and unordered lists are rendered in an identical manner except that visual user agents number ordered list items. User agents may present those numbers in a variety of ways. Unordered list items are not numbered.Both types of lists are made up of sequences of list items defined by the LI element (whose end tag may be omitted).Lists may also be nested.!!WAOrderedListTag commentStamp: 'pmm 6/30/2007 00:47' prior: 0!See superclass comment.!!WAUnorderedListTag commentStamp: 'pmm 6/30/2007 00:47' prior: 0!See superclass comment.!!WASelectTag commentStamp: 'pmm 4/24/2007 11:12' prior: 0!This element allows the use to select one (in single selection mode) or multiple (in single selection mode) elements. Default is single selection. Multiple selection can be triggered with #beMultiple.Single selection is in general a drop-down list, so make sure the list of options is not too big.Multiple selection has in general crappy browser support and a list of checkboxes is in general the better option.If in single selection mode and you want enable "no selection" see #beOptional.If you absolutely need to you can render the options yourself with 'html option' inside #with:Make sure to check the superclass for more methods.See WAInputTest >> #renderSingleSelectionOn: and WAInputTest >> #renderMultiSelectionOn: for examples.!!WAFieldSetTag commentStamp: 'pmm 5/10/2007 10:12' prior: 0!The FIELDSET element allows authors to group thematically related controls and labels. Grouping controls makes it easier for users to understand their purpose while simultaneously facilitating tabbing navigation for visual user agents and speech navigation for speech-oriented user agents. The proper use of this element makes documents more accessible.The LEGEND element allows authors to assign a caption to a FIELDSET. The legend improves accessibility when the FIELDSET is rendered non-visually.!!WAAbstractTextAreaTag commentStamp: 'pmm 4/23/2007 21:10' prior: 0!An abstract class to describe the HTML elements that allow the user to enter text.!!WATextAreaTag commentStamp: 'pmm 4/24/2007 11:13' prior: 0!I am a multi line text input widget. See WAInputTest >> #renderTextAreaWithExampleOn: for examples.!!WATextInputTag commentStamp: 'pmm 4/24/2007 11:13' prior: 0!I am a single line text input widget. See WAInputTest >> #renderTextInputWithExampleOn: for examples.!!WAPasswordInputTag commentStamp: 'pmm 4/23/2007 21:12' prior: 0!I am a password input widget that does not display the entered text.!!WAButtonTag commentStamp: 'pmm 7/28/2007 08:54' prior: 0!Buttons created with the BUTTON element function just like buttons created with the INPUT element, but they offer richer rendering possibilities: the BUTTON element may have content. For example, a BUTTON element that contains an image functions like and may resemble an INPUT element whose type is set to "image", but the BUTTON element type allows content.!!WAFileUploadTag commentStamp: 'pmm 4/15/2007 22:22' prior: 0!I represent a file input element (<input type="file"). My callbacks will be evaluated with an instance of WAFile as an argument.!!WAHiddenInputTag commentStamp: 'pmm 9/22/2007 22:23' prior: 0!Authors may create controls that are not rendered but whose values are submitted with a form. Authors generally use this control type to store information between client/server exchanges that would otherwise be lost due to the stateless nature of HTTP (see [RFC2616]). The INPUT element is used to create a hidden control.!!WAImageButtonTag commentStamp: 'pmm 7/28/2007 08:56' prior: 0!Creates a graphical submit button. The value of the src attribute specifies the URI of the image that will decorate the button. For accessibility reasons, authors should provide alternate text for the image via the alt attribute. When a pointing device is used to click on the image, the form is submitted and the click coordinates passed to the server. The x value is measured in pixels from the left of the image, and the y value in pixels from the top of the image. The submitted data includes name.x=x-value and name.y=y-value where "name" is the value of the name attribute, and x-value and y-value are the x and y coordinate values, respectively.!!WAFormTag commentStamp: 'pmm 9/15/2007 08:23' prior: 0!The FORM element acts as a container for input elements and buttons.Evaluation order:The input fields callbacks will be evaluated in the order theyappear in the XHTML. Buttons will always be evaluated last, no matterwhere they are positioned.!!WAEditTag commentStamp: 'pmm 3/28/2007 10:40' prior: 0!INS and DEL are used to markup sections of the document that have been inserted or deleted with respect to a different version of a document (e.g., in draft legislation where lawmakers need to view the changes).These two elements are unusual for HTML in that they may serve as either block-level or inline elements (but not both). They may contain one or more words within a paragraph or contain one or more block-level elements such as paragraphs, lists and tables.This example could be from a bill to change the legislation for how many deputies a County Sheriff can employ from 3 to 5.<P>  A Sheriff can employ <DEL>3</DEL><INS>5</INS> deputies.</P>The INS and DEL elements must not contain block-level content when these elements behave as inline elements.!!WAHeadingTag commentStamp: 'pmm 6/30/2007 00:44' prior: 0!A heading element briefly describes the topic of the section it introduces. Heading information may be used by user agents, for example, to construct a table of contents for a document automatically.There are six levels of headings in HTML with H1 as the most important and H6 as the least. Visual browsers usually render more important headings in larger fonts than less important ones.!!WAHorizontalRuleTag commentStamp: 'pmm 9/22/2007 22:24' prior: 0!The HR element causes a horizontal rule to be rendered by visual user agents.The amount of vertical space inserted between a rule and the content that surrounds it depends on the user agent.!!WAIframeTag commentStamp: 'pmm 9/22/2007 22:25' prior: 0!The IFRAME element allows authors to insert a frame within a block of text. Inserting an inline frame within a section of text is much like inserting an object via the OBJECT element: they both allow you to insert an HTML document in the middle of another, they may both be aligned with surrounding text, etc. The information to be inserted inline is designated by the src attribute of this element. The contents of the IFRAME element, on the other hand, should only be displayed by user agents that do not support frames or are configured not to display frames.Inline frames may not be resized.!!WAImageTag commentStamp: 'pmm 9/22/2007 22:28' prior: 0!The IMG element embeds an image in the current document at the location of the element's definition. The IMG element has no content; it is usually replaced inline by the image designated by the src attribute, the exception being for left or right-aligned images that are "floated" out of line.The alt attribute specifies alternate text that is rendered when the image cannot be displayed (see below for information on how to specify alternate text ). User agents must render alternate text when they cannot support images, they cannot support a certain image type or when they are configured not to display images.Seaside per default sets the alternate text to an empty string. This helps validation of the page.!!WAOptionGroupTag commentStamp: 'pmm 4/24/2007 10:53' prior: 0!The OPTGROUP element allows authors to group choices logically. This is particularly helpful when the user must choose from a long list of options; groups of related choices are easier to grasp and remember than a single long list of options.It has crappy browser support and noone as ever used it. See WAInputTest >> #renderOptionGroupOn: for examples.!!WACachedDocument commentStamp: '<historical>' prior: 0!This class is for serving smallish files like PNG images etc using WADocumentHandler. Using the Canvas API for HTML generation you simply do this:	html image fileName: 'myimage.png'or:	html image fileName: 'myimage.blurp' mimeType: 'blurp'This will create a request handler in your WAApplication registry that is accessible on a unique URL and does not expire.The actual contents of the file will only be read upon first access, we could augment this class with smarter caching, like checking the modification time on disk.The class has a Cache class var holding a Dictionary of created instances so you can clear and preload files into the image using:	WACachedDocument		clearCache;		fileName: 'myimage.png';		fileName: 'another.gif'; "etc"		preloadCache!!WACanvas commentStamp: 'pmm 4/15/2007 22:05' prior: 0!This is the superclass of all canvas. It's a rendering interfact that generates brushes (see WABrush).Subclass this class, if you want to generate an XML dialect.!!WAHtmlCanvas commentStamp: 'pmm 4/15/2007 22:10' prior: 0!This canvas knows about HTML but nothing about callbacks.!!WARenderCanvas commentStamp: 'pmm 4/20/2007 11:35' prior: 0!This canvas knows about callbacks and is intertwined with the rest of the framework.!!WAStaticHtmlCanvas commentStamp: 'pmm 4/15/2007 22:10' prior: 0!This canvas can be used to generate static/RESTful HTML pages.!!WAConditionalComment commentStamp: 'pmm 11/25/2007 21:49' prior: 0!A WAConditionalComment is an implementation of Downlevel-hidden Conditional Comments:http://msdn2.microsoft.com/en-us/library/ms537512.aspxThese are only visible for the IE family of browsers.!!WARevealedConditionalComment commentStamp: 'pmm 11/25/2007 21:50' prior: 0!A WAConditionalComment is an implementation of Downlevel-revealed Conditional Comments:http://msdn2.microsoft.com/en-us/library/ms537512.aspxNon-IE family browsers see them always.!!WAConfiguration commentStamp: 'rew 10/7/2007 12:50' prior: 0!A configuration for a Seaside application contains attributes which can be used by Seaside and the application. WAConfiguration hierarchy uses the composite pattern. Subclasses of WASystemConfiguration define related groups of attributes. A WASystemConfiguration subclass defines the name and optionally default values for attributes. See WASystemConfiguration class comment for information on defining your own group of attributes. WAUserConfiguration is a composite of configurations. The set of configurations contained in WAUserConfiguration is called the ancestors. Attribute values in a configuration override the attribute values in the ancestors. WAUserConfiguration also holds the non-default values of attributes.Seaside applications start with a WAUserConfiguration (see WAApplication>>configuration) that start with three configurations (WARenderLoopConfiguration, WAGlobalConfiguration and WASessionConfiguration). Other configurations can be added to an application on the Seaside configuration page for the application or in your application. Values for the attributes can be given in either location. See Seaside documentation (http://www.seaside.st/documentation) on configuration and preferences (http://www.seaside.st/documentation/Configuration%20and%20Preferences) for more information.Example of setting attributes and adding configurations in codeASubclassOfWAComponent class>>initialize	"self initialize"	| application |	application := self registerAsApplication: 'GlorpExample'.	"set a standard attribute"	application preferenceAt: #sessionClass put: Glorp.WAGlorpSession. 	"add a configuration"	application configuration addAncestor: GlorpConfiguration new.	application preferenceAt: #databaseLogin put: 'foo'. "set attribute defined in GlorpConfiguration"Subclasses must implement the following messages:	name		return the name of the configuration	localValueAt:ifAbsent:		return the value of the attribute given as first argument!!WASystemConfiguration commentStamp: 'rew 10/19/2007 10:54' prior: 0!Subclass WASystemConfiguration to define a group of attributes for a Seaside application. The method "attributes" returns a collection of attributes in this configuration. If a configuration requires other configurations then implement the method "ancestors", which returns a collection of configuration classes. Subclasses can define default values for attributes. If you define an attribute named "useSessionCookie" you can provide a default value by implementing a method "useSessionCookie" that returns the default value. See existing subclasses for examples. Non-default values for attributes are not stored in WASystemConfiguration subclasses, but are stored in WAUserConfiguration.WAUserConfiguration is a singleton class to avoid implementing = and hash. Only need one instance of WAUserConfiguration and its subclasses.Subclasses must implement the following messages:	attributes		return a collection of attribute objects!!WAGlobalConfiguration commentStamp: 'rew 10/19/2007 10:43' prior: 0!WAGlobalConfiguration defines attributes (properties) about the Seaside server. It defines 	server protocol (http, https) 	host name	port number 	server path (first part of URL path, default "seaside" in Squeak "seaside/go" in WV, maps to 		top level WADispatcher, if you change value make sure WADispatcher is configured correctly)	deployment mode (false = development mode)Note setting these attributes does not change the values the server using. Changing the first four changes how Seaside generates the URLs in pages returned to the client. By default all applications contain this configuration.!!WASessionConfiguration commentStamp: 'pmm 10/20/2007 23:33' prior: 0!WASessionConfiguration defines attributes with default values about the Seaside session used by an application. It defines 	sessionClass (WASession or subclass)		mainClass   (a subclass of WAMain)	errorHandler	(a subclass of WAErrorHander)		renderContinuationClass (WARenderContinuation or subclass)	redirectContinuationClass (WARedirectContinuation or subclass)	useSessionCookie (		true:			put session id in cookie if client supports cookies		false:			put session id in all urls returned in the _s parameter		default:			false)This configuration is added to all applications by default.!!WAUserConfiguration commentStamp: 'rew 10/7/2007 12:55' prior: 0!WAUserConfiguration is a composite of configurations.  This composite of configurations is stored in the field "ancestors". WAUserConfiguration also contains all the non-default values of attributes for an application. WAUserConfiguration inherits attribute values defined in its ancestors. If WAUserConfiguration does not have a value for an attribute it will search its ancestors for a value, stopping when it finds a value.WAUserConfiguration is the first configuration added to a Seaside application (WAApplication). All other configurations added to the application are added as ancestors to WAUserConfiguration. When a value for an attribute is set either by the standard Seaside component configuration page or in code the value is added to the "values" dictionary in WAUserConfiguration.Instance Variables:	ancestors	<Collection of: WAConfiguration>	 hierarchy of configurations defining all attributes for this instance of WAUserConfiguration	values	<Dictionary>	the dictionary key is an attribute key, dictionary value is value of that attribute !!WAConfigurationAttribute commentStamp: 'rew 10/7/2007 12:50' prior: 0!WAConfigurationAttribute represents a value of a specified type in a Seaside application configuration. Some attributes are used are needed by Seaside for your application like deployment Mode and session timeout. Attributes like a database login may be used internally by the application.  Each subclass of WAConfigurationAttribute handles one type (Number, Boolean, etc) of attribute. The "group" of the attribute is used to place all attributes in the same group together on the Seaside configuration page. The "key" of the attribute identifies the attribute. See WAConfiguration for example of accessing a configuration attribute. Subclasses must implement the following messages:	valueFromString: aString		convert "aString" into type represented by the class, return result of the conversion		accept: aVisitor with: anObject		Typical implementation is:			aVisitor visitXXXAttribute: self with: anObject		where XXX is the type of this attribute. The method visitXXXAttribute:with: must be implemented in all visitors, in particular WAConfigurationEditor which creates the configuration page for Seaside applications.Instance Variables:	group	<Symbol>	name of the group the attribute belongs to	key	<Symbol>	key or name of the attribute, used to look up the attribute!!WABooleanAttribute commentStamp: 'rew 10/7/2007 12:49' prior: 0!WABooleanAttribute  represents a boolean attribute. It converts between text entered on the configuration page and boolean values.!!WAListAttribute commentStamp: 'rew 10/7/2007 12:51' prior: 0!WAListAttribute is an attribute that is restricted to a list of values. Instance Variables:	options	<Collection of: (Object | String | Symbol)>	list of possible values for the attribute!!WANumberAttribute commentStamp: 'rew 10/7/2007 12:51' prior: 0!WANumberAttribute represents a number attribute. It converts between text entered on the configuration page and numbers.!!WAStringAttribute commentStamp: 'rew 10/7/2007 12:52' prior: 0!WAStringAttribute represents a string attribute. It does the trivial conversion between text entered on the Seaside configuration page and a string.!!WAPasswordAttribute commentStamp: 'rew 10/7/2007 12:52' prior: 0!WAPasswordAttribute represents a password attribute. On the Seaside configuration page it displays the attribute differently than WAStringAttribute.!!WACookie commentStamp: 'pmm 4/15/2007 22:26' prior: 0!I represent a cookie, a piece of information that is stored on the client and read and writable by the server. I am basically a key/value pair of strings.You can never trust information in a cookie, the client is free to edit it.I model only a part of the full cookie specification.For more information see  RFC2965 (http://tools.ietf.org/html/rfc2965)!!WAEncoder commentStamp: 'lr 4/8/2007 15:49' prior: 0!I encode everything that is written to myself using #nextPut: and #nextPutAll: onto the wrapped stream. To be efficient I use an encoding table to be able to transform the most used characters from the UTF Basic Multilingual Plane as efficiently as possible. The convertion of a single character is defined in #encode:on: on the class-side of my subclasses.!!WAHtmlEncoder commentStamp: 'lr 4/6/2007 19:45' prior: 0!I encode XHTML text.!!WAUrlEncoder commentStamp: 'lr 4/6/2007 19:45' prior: 0!I encode path segments and arguments of an URL.!!WAErrorHandler commentStamp: 'pmm 5/27/2007 21:46' prior: 0!Error handlers are invoked when an error in a Seaside application occurs. They handle- errors- warnings- internal errors in the Seaside coreI am the base class for all error handlers and handle only internal errors which which I display a code 500 error with a short stackframe.See WAWalkbackErrorHandler for examples of how to do rendering with the canvas API.!!WADebugErrorHandler commentStamp: 'pmm 5/27/2007 21:47' prior: 0!I am like WAErrorHandler except that I open a debugger in the image for errors and warnings (not for internal errors).!!WAWalkbackErrorHandler commentStamp: 'pmm 5/27/2007 21:44' prior: 0!I am the default development error handler that displays the stack frames and adds the option to display a debugger.I delegate the rendering to WAWalkback.!!WASimpleErrorHandler commentStamp: 'pmm 5/27/2007 21:48' prior: 0!I am like WAErrorHandler except that I display the code 500 error with a short stackframe for errors and warnings too.!!WAFile commentStamp: 'pmm 4/15/2007 22:22' prior: 0!I represent a file that was uploaded by the user via #fileInput.!!WATemporaryFile commentStamp: 'pmm 4/18/2008 22:52' prior: 0!I represent a file that was uploaded by the user via #fileInput. Compared to WAFile my contents are not stored in memory on disk in a temporary file. I support the same protocol as WAFile.Instance Variables	fileSize:		<Integer>	temporaryFileName:		<String>fileSize	- the file size in bytestemporaryFileName	- the name of the file in which my contents are stored on disk!!WAHtmlBuilder commentStamp: 'pmm 8/18/2007 12:40' prior: 0!A WAHtmlBuilder is a convenience class to render html. I am supposed to be used like this.WARenderCanvas builder render: [ :html |	html anchor		url: 'htttp://www.seaside.st';		with: 'Seaside Homepage' ]See WAHtmlBuilderTest for more examples.Instance Variables	callbackOwner:		<Object>	canvasClass:		<WACanvas class>	documentRoot:		<WARoot>	fullDocument:		<Boolean>	rootBlock:			<BlockContext>callbackOwner	- optional, the owner of the callbackscanvasClass	- the canvas class to use, on the class side it must implement #context:callbacks: as an object construction methoddocumentRoot	- for private use only, the instantiated root of the documentfullDocument	- whether a full html document including the head section should be renderedrootBlock	- a one argement block to customize the document root. The argument of the block is the root!!WALinkElement commentStamp: 'pmm 4/7/2007 00:32' prior: 0!This element defines a link. Unlike A, it may only appear in the HEAD section of a document, although it may appear any number of times. Although LINK has no content, it conveys relationship information that may be rendered by user agents in a variety of ways (e.g., a tool-bar with a drop-down menu of links).!!WAKom commentStamp: 'pmm 4/27/2007 00:44' prior: 0!I provide an adapter between Seaside and the Comanche web server. To start a new server on port 8080, evaluate	WAKom startOn: 8080.	and to stop it, evaluate	WAKom stop.I don't do any input conversion at all in Squeak <= 3.8, you will get the input in whatever encoding the client sent and are expected to deliver it in the same.I don't work on Squeak 3.9 for non-ASCII characters.	The state of the service (running or stopped) is automatically restored when quitting and reopening an image.If you want to reset the password of the config application (reachable at /seaside/config) evaluate	WADispatcherEditor initialize.!!WAKomEncoded39 commentStamp: 'pmm 4/8/2008 07:00' prior: 0!I have the same resposibility like WAKomEncoded except that I'm for Squeak 3.9 and old version of KomHttpServer. See class comment of WAKomEncoded for more details. In general I should not be used anymore.!!WAKomEncoded commentStamp: 'pmm 4/8/2008 06:59' prior: 0!I provide an adapter between Seaside and the Comanche web server with response/request conversion from UTF-8 to WideString and back in Squeak 3.8 or later.see WAKomUse me if you have either Squeak 3.8 and an old version of KomHttpServer or Squeak 3.9 and a new version of KomHttpServer. Squeak 3.8 and an new version of KomHttpServer are likely to cause problems. If you use Squeak 3.9 or later and an earlier version of KomHttpServer se WAKomEncoded39.definition of a new version of Kom:- SqueakMap: KomHttpServer 7.0.5 or later- Monticello: KomHttpServer KomHttpServer-RJT.23 or later, especially KomHttpServer-gc.27 or laterimages in which you should use WAKomEncoded- the Seaside One-Click image- a recent squeak-web image from Damien!!WALRUCache commentStamp: 'pmm 10/20/2007 23:23' prior: 0!WALRUCache implements at Least Recently Used cache. Items are removed from the cache when they reach "max" age. The age of an item is the number of additions to the cache done since the item itself was added. WALRUCache does not worry about the size of the cache. The "capacity:" method is misleading, it sets how long items will remain in the cache.Instance Variables:	ageTable	<Dictionary>	The age each time in the cache	max	<SmallInteger>	The age at which items are removed from the cache	table	<Dictionary>	Items in the cache, each item has key			WALRUCache is used to store the last n continutations of a session.!!WALibrary commentStamp: 'pmm 4/22/2007 12:56' prior: 0!I'm the common superclass of file and string libraries.!!WAFileLibrary commentStamp: 'pmm 8/17/2007 06:58' prior: 0!What does FileLibrary do=============================It allows to serve static files directly from seaside without the need for a standalone server like Apache or to configure Kom. These files can reference each other (say a CSS references an image) and can be distrubuted the same way as normal Smalltalk code (Monticello, SqueakMap, ...).Each file in a file library is represented by a method. The method name is created from the file name, the dot is removed and the first letter of the suffix in capitalized. This puts certain limitations to the allowed filenames. Eg. 'main.css' becomes #mainCss.Like Script- and StyleLibraries FileLibraries can be added to an application so that they automatically include themselves in the document root. Implement #selectorsToInclude and return the selectors you whish to be added to the document root.How to create a FileLibrary================================- First create the static files and put them in some directory. From there they can reference the other files in the same directory normally with their filenames.- Make sure you have a "Files" entry that serves your files. This is a normal entry point type that you can find in your /seaside/config application. If you don't already have one, you can create it if you select "Files" in the type field of the "add entry point" dialog. For the rest of this text we assume you chose "files" as the path.- Create a subclass of WAFileLibrary, for the rest of this text I assume its name is MyFileLibrary.- To add the files to your file library there are two ways.1. Programmatically with MyFileLibrary class >> #addAllFilesIn: / #addFileNamed:. For example MyFileLibrary addAllFilesIn: '/path/to/directory/with/files' or MyFileLibrary addFileNamed: '/path/to/background.png'.2. Via the web interface. Go to your /seaside/config application and there click configure for your "Files". Click "configure" behind MyFileLibrary. There you can add a file by uploading it (select the file, then click "Add")Note that a "Files" can consist of several file libraries and can even have tradional script or style libraries.How to integrate a FileLibrary into your application=============================================================Files from a FileLibrary are ingetrated the same way other static files are integrated. They have a constant path that is '/seaside/<Static File Library>/<FileLibrary class name>/<filename>' so for example '/seaside/files/MyFileLibrary/background.png'. These can be conveniently generated by 'MyFileLibrary / #aSelector' where #aSelector is the name of the method representing that file. For example 'MyFileLibrary / #backgroundPng'.How to get back the files in a FileLibrary=================================================The contents of a file library can be written out to disk. Writing out a file library first makes a folder with the name of the file library in the folder of your Smallatlk image. Then a file for each file in the file library is created in this folder. Writing out to disk can happen in three ways1. MyFileLibrary default deployFiles2. Via the configuration interface of the file library. On the same page where you can add files to your file library there is also a button 'write to disk' which will write out all the files in this library.3. Via the configuration interface of your application. In the section where you can add libraries to your application there is a a button 'write to disk' which will write out all the libraries of this application.Examples:==========The following code uses WAFileLibrary to add a CSS file to a page.updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot stylesheet 		url: WAFileLibraryDemo / #mainCss		The folllowing code uses WAFileLibrary to display an image.renderContentOn: html	html image		url: WAFileLibraryDemo / #mainJpg!!WAStandardFiles commentStamp: 'lr 6/5/2007 19:29' prior: 0!A collection of standard scripts, styles, and images. They are needed for the configuration application and some basic look-and-feel in Seaside. The icons are from the Tango Desktop Project (tango.freedesktop.org), they are licensed under the Creative Commons Attribution Share-Alike license.!!WAStandardScripts commentStamp: 'pmm 4/20/2007 22:58' prior: 0!Deprecated, replaced by WAStandardFiles.!!WAStandardStyles commentStamp: 'pmm 4/20/2007 22:58' prior: 0!Deprecated, replaced by WAStandardFiles.!!WAListener commentStamp: 'lr 5/23/2007 11:22' prior: 0!I am a streaming server that directly writes the resulting data onto the socket. I use the request parsing of Kom, otherwise I am a web server on my own.Note that the WAListener is not supposed to support redirects during the rendering phase, like it is done in WATask and WABasicAuthentication. It might work in the case the buffers of the socket stream haven't been flushed yet, but in most cases it doesn't. This is not a bug and will never be changed.!!WAMain commentStamp: 'rew 10/19/2007 10:49' prior: 0!WAMain subclasses are used to initialize applications when a new session is started.Subclasses must implement the following messages:	start:		Does the initializing !!WARenderLoopMain commentStamp: 'rew 10/19/2007 10:50' prior: 0!When a new session on a WAApplication is started WARenderLoopMain initializes the application, that is it: 	creates the top level component of the application, 	informs each component(WAPresenter) of the application that the session started (via WAPresenter>>initialRequest:)	starts a WARenderLoop to handle the request!!WAModelProxy commentStamp: '<historical>' prior: 0!I am a fake object that can be interposed between the real model object and the client, so that the data can be validated or collected before commiting to the real model.If you have a model instance like	model := WAStoreAddress new.	model street: 'Rathausgasse 34'.create a model proxy by evaluating the following code:	proxy := WAModelProxy on: model.	Then use the accessors of the proxy as you would do with your model:	proxy country: 'Switzerland'.	proxy street -> 'Rathausgasse 34'	...	To propagate the values into your model send #commit :	proxy commit.	model country -> 'Switzerland'!!WAPlugin commentStamp: 'lr 5/30/2007 22:18' prior: 0!I am an abstract root class for all plugins. Plugins are an easy way to add or remove additional tools without changing the codebase. To add a new plugin make sure you choose the right superclass so that the tool can detect your code.The appearance of all plugins, such as icons, has to be configured using CSS.!!WADispatcherPlugin commentStamp: 'pmm 5/27/2007 07:34' prior: 0!Abstract root class for all plugins that add an action for an application to the dispatcher editor.!!WAConfigureDispatcherPlugin commentStamp: 'pmm 5/28/2007 23:07' prior: 0!I display the configuration dialog of an application. See WAApplication >> #configurationComponent!!WACopyDispatcherPlugin commentStamp: 'pmm 5/28/2007 23:06' prior: 0!I make a copy of an application.!!WARemoveDispatcherPlugin commentStamp: 'pmm 5/28/2007 23:06' prior: 0!I remove an application.!!WAHaloPlugin commentStamp: 'pmm 5/27/2007 07:47' prior: 0!Abstract root class for all halo tools. They add functionality to the halo toolbar.!!WABrowserHaloPlugin commentStamp: 'pmm 5/27/2007 17:34' prior: 0!I open a browser on the component class.!!WAClassnameHaloPlugin commentStamp: 'pmm 5/27/2007 17:34' prior: 0!I display the class name of the component class.!!WAInspectorPlugin commentStamp: 'pmm 5/27/2007 17:35' prior: 0!I open an inspector on the component class.!!WAModeHaloPlugin commentStamp: 'pmm 5/27/2007 17:35' prior: 0!I control the rendering modes of the halo.!!WAStylesHaloPlugin commentStamp: 'pmm 5/27/2007 17:35' prior: 0!I open the style editor on the component class.!!WAToolPlugin commentStamp: 'pmm 5/27/2007 07:47' prior: 0!Abstract root class for all development tool bar tools.!!WAConfigureToolPlugin commentStamp: 'pmm 5/27/2007 18:33' prior: 0!I display the configuration dialog for the currently active application!!WADeprecationToolPlugin commentStamp: 'pmm 5/27/2007 18:33' prior: 0!I display deprecation warnings.!!WAMemoryToolPlugin commentStamp: 'pmm 5/27/2007 18:32' prior: 0!I display the memory usage tool.!!WANewSessionToolPlugin commentStamp: 'pmm 5/27/2007 18:32' prior: 0!I create a new session.!!WAProfilerToolPlugin commentStamp: 'pmm 5/27/2007 18:32' prior: 0!I display the rendering profiler.!!WATerminateToolPlugin commentStamp: 'pmm 5/27/2007 18:32' prior: 0!I try to terminate the process handling this session. This can work of you're at 100% CPU.!!WATimeingToolPlugin commentStamp: 'pmm 5/27/2007 18:31' prior: 0!I display render and callback times.!!WAToggleHalosToolPlugin commentStamp: 'pmm 5/27/2007 18:31' prior: 0!I toggle halos on and off.!!WAValidateToolPlugin commentStamp: 'pmm 5/27/2007 18:31' prior: 0!I validate and XHTML page by sending it to the W3C validator. I only work if the website is publically available.!!WAComponent commentStamp: 'pmm 8/27/2007 12:55' prior: 0!I am a class representing a graphical element of a seaside application. A component has state (instance variables, that might be backtracked using #states), behavior decorations, children and an appearance that is specified in #renderContentOn:. A component might chose to display another component with #call:.Child Components:It is common for a component to display instances of other components while rendering itself.  It does this by passing them into the #render: method of WACanvas.  For example, this #renderContentOn: method simply renders a heading and then displays a counter component immediately below it:	renderContentOn: html		html heading level3; with: 'My Counter'.		html render: myCounter.It's important that you use #render:, rather than directly calling the #renderContentOn: method of the subcomponent. The following is *not* correct:	renderContentOn: html		html heading level3; with: 'My Counter'.		myCounter renderContentOn: html.   "DON'T DO THIS".These subcomponents are usually instance variables of the component that is "embedding" them.  They are commonly created as part of the components #initialize method:	initialize		myCounter := WACounter new.They may also be stored in a collection. One fairly common pattern is to keep a lazily initialized dictionary of subcomponents that match a collection of model items. For example, if you wanted a BudgetItemRow subcomponent for each member of budgetItems, you might do something like this:	initialize		budgetRows := Dictionary new.	rowForItem: anItem		^budgetRows at: anItem ifAbsentPut: [ BudgetItemRow item: anItem ].	renderContentOn: html		self budgetItems			do: [ :each | html render: (self rowForItem: each) ]			separatedBy: [ html horizontalLine ].Each parent component *must* implement a #children method that returns a collection of all of the subcomponents that it might display on the next render. For the above two examples, #children might look like this:	children		^Array with: myCounteror this:	children		^self budgetItems collect: [ :each | self rowForItem: each ].		Call/Answer:If a subcomponent makes a #call: to another component, that component will appear in place of the subcomponent.  In the first example, if myCounter made a #call: to DateSelector, that DateSelector would appear in the context of the counter's parent, with the 'My Counter' heading above it.Since a subcomponent has not been #call:'d, in general #answer: is a no-op.  However, the parent may attach an #onAnswer: block to the subcomponent to be notified if it sends #answer:. This allows one component to be used both from #call: and through embedding. For example:	initialize		dateSelector := WADateSelector new 			onAnswer: [ :date | self dateChosen: date ].			Visibility:A component is visible if- it is the root component of an application- a child of of a visible component (returned by #children) that has not been #call:'d- passed as an argument to #call: on a visible component!!WAAllTests commentStamp: 'sd 11/28/2004 14:42' prior: 0!If you want to see these examples:/seaside/config app:- add a new application named "tests"- choose WAAllTests as the root component!!WAAlphabeticBatchedList commentStamp: 'mb 2/20/2008 10:50' prior: 0!WAAlphabeticBatchedList organizes a collection of items into pages for display. A page contains all items whose string representation (item displayString) starts with the same character. WAAlphabeticBatchedList only displays the navigation (alphabet with links) for the list. Your code needs to display the current page.Use WAAlphabeticBatchedList>>items: to set the collections of items.Use WAAlphabeticBatchedList>>batch to get the items to display on the current pageSee WABatchTest for example of usage.Select "Batch" tab of the Functional Seaside Test Suite to run an example  (http://127.0.0.1:xxxx/seaside/tests/alltests)Instance Variables:	currentPage	<Character>	the character of the curent page	items	<(Collection of: (Object ))> collection of the items managed by WAAlphabeticBatchedList. Collection is sorted before items are displayed.!!WABatchSelection commentStamp: 'rew 9/24/2007 20:22' prior: 0!WABatchSelection displays a list of objects. The list is show N (currently 8) items per page, with links to navigate to other pages if needed. Objects in the list must implement one method that returns text description of the item and one method that returns a name or label used as the link users click to select the item. The text description is displayed below the link.Example	items := OrderedCollection new.	1 to: 20 do: [:each | items add: (Contact new name: each; phoneNumber: '54321';yourself)].	selection := WABatchSelection items: items link: #name text: #phoneNumber.	result := self call: selection.	where the Contact class has methodsinstance vars "phoneNumber" and "name", with	setter & getter methods.Instance Variables:	batcher	<WABatchedList>	description of batcher	linkSelector	<Symbol>	method sent to items in list for link text	textSelector	<Symbol>	method sent to items in list for text description!!WABatchedList commentStamp: 'mb 2/20/2008 10:50' prior: 0!WABatchedList helps display a collection of items across multiple pages. WABatchedList organizes a collection into pages (or batches) of batchSize items each and renders navigation links for a user to moved between pages. WABatchedList>>batch returns the items to display in the current page or batch. Your code has to display the items.See WABatchSelection for example of usage.Instance Variables:	batchSize	<Integer>	number of items to display on a single page	currentPage	<Integer>	 index of current page, starts a 1	items	<SequenceableCollection of Objects>	objects organized into pages for display!!WACounter commentStamp: 'pmm 4/17/2007 00:00' prior: 0!A WACounter is component that displays a number. Additionally it has two links that allow the user to increase or decrease this number by 1. The lesson to learn here is how the Seaside callback mechanism is used, how anchors can be used to trigger actions.Instance Variables	count:		<Integer>count	- the number to display, default 0!!WADateSelector commentStamp: 'mb 2/20/2008 10:51' prior: 0!WADateSelector displays dropdown menus (html select) allowing a user to delect a date within a range. "startYear" and "endYear" define the range of selectable dates. Date displayed in month, day, year format. WADateSelector>>date returns date user selected as a Date object.See WADateSelectorTest for sample of usage.Select "Date Selector" tab of the Functional Seaside Test Suite to run an example  (http://127.0.0.1:xxxx/seaside/tests/alltests)Instance Variables:	day	<Integer 1-31> selected day	endYear	<Integer>	end of range of dates user is allowed to select, not required to use 4 digits	month	<Integer 1-12>	selected month	startYear	<Integer>	 start of range of dates user is allowed to select, not required to use 4 digits	year	<Integer>	selected year!!WADateTable commentStamp: 'mb 2/20/2008 10:51' prior: 0!WADateTable renders a table containing dates from startDate to endDate. The table contains one column for each date from startDate to endDate. The top row of the table groups columns by month and labels each month (January 2008). The second row contains the date of each month (1-31) in the date range. The table also contains "rows size" rows. The first column of these rows contains the contents of the instance variable "rows". Rest of the cells are empty.Basically this is an abstract superclass for WASelectionDateTableInstance Variables:	datesCache	<(SequenceableCollection of: Date>	contains a date object for each date in the range startDate-endDate	endDate	<Date>	end date of the range displayed in the table	rows	<SequenceableCollection>	labels of the rows	startDate	<Date>	start date of the range displayed in the table!!WASelectionDateTable commentStamp: 'mb 2/20/2008 10:53' prior: 0!WASelectionDateTable renders a table containing dates and rows. A user can select a continuous block of cells in the table.  The table contains one column for each date from startDate to endDate. The top row of the table groups columns by month and labels each month (January 2008). The second row contains the date of each month  (1-30) in the date range. The table also contains "rows size" rows. The first column of these rows contains the contents of the instance variable "rows". Rest of the cells contents are given by "cellBlock". Instance Variables:	cellBlock	<BlockClosure [:rowIndex :date | ]>	returns text for the cell in row "rowIndex" and column for "date"	dateSelectionEnd	<Date>	last selected date	dateSelectionStart	<Date>	first selected date	rowSelectionEnd	<Integer>	index of last selected row	rowSelectionStart	<Integer>	index of first selected row!!WADateTimeSelector commentStamp: 'mb 2/20/2008 10:51' prior: 0!WADateTimeSelector allows the user to select a date and time in a given range dropdown menus (html select). Actual work done by WADateSelector and WATimeSelector. Date range is default range of WADateSelector.See WADateSelectorTest for sample of usage.Select "Date Selector" tab of the Functional Seaside Test Suite to run an example  (http://127.0.0.1:xxxx/seaside/tests/alltests)Instance Variables:	dateSelector	<WADateSelector>	presents date selection to user	timeSelector	<WATimeSelector>	presents time selection to user!!WAExampleBrowser commentStamp: '<historical>' prior: 0!I browse all the examples available in the system ie all the results of class methods beginning with #example... point your browser to localhost:xxx/seaside/examplesIf you want to see these examples/seaside/config app:- add a new application named "examples"- choose WAExampleBrowser as the root component!!WAFormDialog commentStamp: 'rew 9/24/2007 20:23' prior: 0!WAFormDialog is an empty html form. Used in WAComponent>>inform: to create a dialog component that displays text and an "Ok" button to close the component. See subclasses for sample usage & more functionality.Instance Variables:	form	<WAFormDecoration> Decorator that generates form tags	validationError	<String>	Text descriping invalid data entered by user. Displayed when not nil. Set to nil when user submits form.!!WAChoiceDialog commentStamp: 'pmm 9/25/2007 20:24' prior: 0!WAChoiceDialog produces a form with select tag (dropdown menu) on a collection of options and "Ok" and "Cancel" buttons. Options can be any object. Returns actual object selected or nil if user select "Cancel". WAChoiceDialog is used to implement the chooseFrom:caption: convenience method in WAComponent.	| selection |	selection := WAChoiceDialog options: #('Smalltalk' 'Perl' 'Python' 'Ruby' 9).	result := self call: selection.	self inform: result printStringInstance Variables:	options	<Collection of Objects> objects in list	selection	<Object>	object selected by user or nil if user cancels!!WALabelledFormDialog commentStamp: 'rew 9/24/2007 20:24' prior: 0!WALabelledFormDialog is an abstract class for generating html forms. Given a data model WALabelledFormDialog displays a label and input field for each instance variable of interest. User supplied data is placed in the data model.Subclasses need to implment the methods labelForSelector:, model, and rows. The "model" method just returns the object whose fields we wish to populate with date. The "rows" method returns a collections of symbols. One symbol for each row of data in the dialog. The symbol is used generate the accessor methods for the data in the model. The method "labelForSelector:" returns the labels for each row and each submit button in the form.A standard text input field is used for each row of data. To use other html widgets for input for = a datum implement the method renderXXXOn: where XXX is the symbol for the row. See "renderNameOn:" in example below.The default form has one button "Ok". Override the "buttons" method to change the text or number of submit buttons on the form. Override the "defaultButton" method to indicate which button is the default. For each button in the form the subclass needs a method with the same name as the button, which is called when the user clicks that button. See example below.LabelledFormDialogExample subclass of WALabelledFormDialog instance methods	initialize		super initialize.		contact := Contact new. "contact is an inst var"		self addMessage: 'Please enter the followning information'.	model		^ contact	ok		self answer: contact	cancel		self answer	rows		^ #(name phoneNumber)	buttons		#(ok cancel)	labelForSelector: aSymbol		aSymbol == #name ifTrue: [^'Your Name'].		aSymbol == #phoneNumber ifTrue: [^'Phone Number'].		aSymbol == #ok ifTrue: [^'Ok'].		aSymbol == #cancel ifTrue: [^'Cancel'].		^ super labelForSelector: aSymbol	renderNameOn: html 		"Show how to specily special input instead of using simple text field."		(html select)				list: #('Roger' 'Pete');				selected: 'Roger';				callback: [:v | contact name: v]Contact Class used above has instance variables name, phoneNumber with standard getter and setter methods!!WAYesOrNoDialog commentStamp: 'rew 9/24/2007 20:25' prior: 0!WAYesOrNoDialog displays a yes/no dialog. Returns boolean indicating user selection. See WAComponent>>confirm: for sample usage and easy way to use WAYesOrNoDialog.!!WADecorationTest commentStamp: 'lr 5/31/2008 10:58' prior: 0!http://code.google.com/p/seaside/issues/detail?id=71!!WAEncodingTest commentStamp: 'pmm 6/22/2007 20:35' prior: 0!A WAEncodingTest test whether Seaside correctly handles non-ASCII strings. Unfortunately due to differences in server setup and source code encodings this test requires manual interaction.!!WARubyTest commentStamp: 'pmm 9/18/2006 19:11' prior: 0!Examples taken directly from spec:http://www.w3.org/TR/2001/REC-ruby-20010531/!!WATransactionTest commentStamp: 'pmm 9/2/2007 00:08' prior: 0!A WATransactionTest runs a WANestedTransaction with a description!!WAInputDialog commentStamp: 'rew 9/24/2007 20:24' prior: 0!WAInputDialog generates a simple form with a text input field and a submit button. The instance variable "value" is used for initial value of the text field and hold the text entered by user. WAInputDialog answers with text entered by user (value of "value"). See WAComponent>>request:label:default: for sample use and easy way to use WAInputDialog.Instance Variables:	label	<String>	label of submit button	value	<Object | String>	!!WAMiniCalendar commentStamp: 'mb 2/20/2008 10:52' prior: 0!WAMiniCalendar renders a monthly calendar. Users can navigate by month, year, or select a year and a month. Users can select a date in the calendar. Set canSelectBlock to control which dates a user can select. Use selectBlock to perform an action when a user selects a date. WAMiniCalendar>>date returns the selected date.Select "Mini Calendar" tab of the Functional Seaside Test Suite to run an example  (http://127.0.0.1:xxxx/seaside/tests/alltests)Instance Variables:	canSelectBlock	<BlockClosure with date argument>	return true if date argument should be rendered with a link, ie user can select that date	date	<WAValueHolder on a date>	Selected date	month	<WAValueHolder on a Month>	Currently displayed month	selectBlock	<BlockClosure with date argument> called when user selects a date!!WAMultiCounter commentStamp: 'lr 4/18/2007 00:26' prior: 0!A WAMultiCounter is a component that consits of several instances of WACounter. Be sure to understand WACounter.The lesson to learn here is how Seaside components can be composed of other components.Instance Variables	counters:		<Collection<WACounter>>counters	- a Collection of components (instances of WACounter) !!WASimpleNavigation commentStamp: 'lr 11/29/2004 16:30' prior: 0!I'm a simple tab panel, that can be styled with stylesheets. New tabs can be added using #add:label:!!WAPath commentStamp: 'mb 2/20/2008 10:53' prior: 0!WAPath represents a path navigation (breadcrumbs) for a web page and displays standard breadcrumbs(xxx >> yyy >> zzz). WAPath maintains a stack of associations, one for each "location" or "page" in the path. The association key is the text that is displayed in the breadcrimb. The association value is an object of your choosing, which your code uses to restore that "page". To add to the path use the method WAPath>>pushSegment: anObject name: 'lulu'. The name: arguement is the association key, the segment: argument is the association value.The method WAPath>>currentSegment returns object associated with the current "page". Your code is not notified when the user clicks on a link in the WAPath object. So when you render a page call WAPath>>currentSegment to get the current object, and generate the page accordingly.See WAInspector for example use.Use WATrail to handle breadcrumbs for sequences of call: and answers:.Instance Variables:	stack	<Array of associations(String->Object) > History of the page. Keys -> display string, values -> object used in helping generating page.!!WAReport commentStamp: 'mb 2/20/2008 10:53' prior: 0!WAReport is an abstract super class for WATableReport. Just defines the rows for WATableReport. This class should be combined with WATableReport.Instance Variables:	rows	<SequenceableCollection>	rows for the WATableReport!!WASelection commentStamp: 'rew 9/24/2007 20:25' prior: 0!WASelection creates a selectable list. Items can be any object. If optional labelBlock is not given the string versions of the items are displayed to user, otherwise labelBlock is used to generate the text to display for each item. Returns the item selected by user, (not the index nor the text shown the user). 	| selection |	selection := WASelection new.	selection items: #(1 'cat' 'rat').	selection 		labelBlock: [:item | item = 1 ifTrue: ['First'] ifFalse: [item asUppercase]].	result := self call: selection.	self inform: result printStringInstance Variables:	items	<Array of Objects> 		labelBlock	<One arg Block>	!!WATask commentStamp: 'pmm 6/30/2007 19:02' prior: 0!I am a subclass of WAComponent, specialized for defining workflow.  The difference between a task and a component is the following:Both of them are reusable, embeddable, callable pieces of user interface. A component has state (instance variables), behavior (it may change its state, and it may also choose to display other components with #call:), and appearance (it renders HTML). A Task has only the first two - it doesn't render any HTML directly, but only through the components it calls. This is useful when what you want to encapsulate/embed/call is purely a process (show this component, then this one, then this one).The key method for WATask is #go - as soon as a task is displayed, this method will get invoked, and will presumably #call: other components.In terms of implementation, you can think of a WATask in the following way: it is a component which renders two things:- a link whose callback invokes the #go method- a header that immediately redirects to the URL of that linkSubclasses must not implement #renderContentOn:An example can be found in WAConvenienceTest.!!WANestedTransaction commentStamp: 'pmm 9/2/2007 00:08' prior: 0!A WANestedTransaction is a test that uses two nested #isolate: blocks!!WATimeSelector commentStamp: 'mb 2/20/2008 10:54' prior: 0!WATimeSelector displays dropdown menus (html select) allowing a user to delect a time within a range. "startHour" and "endHour" define the range of selectable times. Time is displayed in 24 hour format. WATimeSelector>>time returns time user selected as a Time object.See WADateSelectorTest for sample of usage.Select "Date Selector" tab of the Functional Seaside Test Suite to run an example  (http://127.0.0.1:xxxx/seaside/tests/alltests)Instance Variables:	endHour	<Integer 0-23>	end of time interval for selectable times	hour	<Integer 0-23>	selected hour	minute	<Integer 0-59>	selected minute	second	<Integer 0-59>	selected second	startHour	<Integer 0-23>	start of time interval for selectable times!!WATrail commentStamp: 'mb 2/20/2008 10:54' prior: 0!WATrail implements breadcrumbs for pages generated using a sequence of WAComponent>>call: methods. Each component in the call sequence that is to appear in the breadcrumb must implement the method "trailName", which returns the text displayed in the breadcrumb. Instantiate (WATrail on: rootComponent) an WATrail object on the first component (root) of the breadcrumb. When the root component, or subsequent component, transfers control via "self call:" the WATrail object is automatically updated and will display the correct call sequence in the breadcrumb. When a user clicks on a link in the breadcrumb the call sequence is automatically updated.Uses CSS and lists to display the ">>" in breadcrumbs. As a result the breadcrumb starts with ">>" rather than the first elementInstance Variables:	root	<WAComponent>	first component in the breadcrumb and in the call sequence.!!WATree commentStamp: 'mb 2/20/2008 10:54' prior: 0!WATree implements a tree menu, which supports nesting, collapsing and expanding. Prefixes items with "+/-" to indicate items that can be expanded/collapsed.See class methods for simple example.Instance Variables:	canSelectBlock	<BlockClosure [:nodeInTree | ]>	returns true if user can select the argument of the block, if true node is an anchor	childrenBlock	<BlockClosure [:nodeInTree | ]>	returns children (or subnodes) of the given node in the tree, sent to all nodes	expanded	<IdentitySet>	Collection of all nodes that are currently expanded	labelBlock	<[:nodeInTree | ]> returns text to display for given node	root	<Object>	root or top level node in tree, childrenBlock is used to determine roots subnodes	selectBlock	<BlockClosure [:selectedNode | ]>	called when an node is selected, put a callback to your code here	selected	<Object>	currently selected node!!WAWalkback commentStamp: 'lr 6/5/2007 21:21' prior: 0!I am a component that renders an exeception stack with temporary variables. Per default I renders the top stack frames only, but I offers the option to render all. I also offers the option to open a debugger in the image or to proceed with the execution.!!WADecoration commentStamp: '<historical>' prior: 0!I am an abstract decoration around instances of WAComponent. I can be added to aComponent by calling #addDecoration: and I change the basic behaviour or look of a component. There are several methods that can be overriden to archive this:- #renderContentOn: to emit xhtml around the decorated component. Call #renderOwnerOn: to let the owner emit its output.- #processChildCallbacks: to intercept the callback processing of the owner.- #handleAnswer: to intercept the answer processing.!!WABasicAuthentication commentStamp: 'rew 9/24/2007 20:28' prior: 0!WABasicAuthentication password protects its component using the standard Http basic authentication, which passes usernames & passwords in clear text. You must set the authenticator, which validates usernames and passwords.Seaside has a number of ways to authenticate a user: WAComponent>>registerAsAuthenticatedApplication:, WAAuthMain, WAAuthConfiguration. One can also use a task or a session to authenticate. These methods can be used to authenicate a session or application rather than a single component.Instance Variables:	authenticator	<Authenticator>	Any object that implements the method verifyPassword:forUser:	realm	<String>	An http realm is a string used to identify a set of pages that are convered by the same login!!WADelayedAnswerDecoration commentStamp: 'mb 2/20/2008 10:52' prior: 0!WADelayedAnswerDecoration adds a delay in displaying a component. See WADelayTest for sample usage.Select 'Delay" tab of the Functional Seaside Test Suite to run an example  (http://127.0.0.1:xxxx/seaside/tests/alltests)Instance Variables:	delay	<Integer>	delay length in seconds!!WAFormDecoration commentStamp: 'rew 9/13/2007 21:21' prior: 0!A WAFormDecoration places its component inside an html form tag. The buttons inst var must be set. The component that a WAFormDecoration decorates must implement the method "defaultButton", which returns the string/symbol of the default button (one selected by default) of the form. Don't place any decorators between WAFormDecoration and its component otherwise "defaultButton" method fails. For each string/symbol in the buttons inst var the decorated component must implement a method of the same name, which is called when the button is selected.Instance Variables	buttons:		<Collection of strings or symbols>buttons	- list of strings or symbols, each string/symbol is the label (first letter capitalized) for a button and the name of the callback method on component when button is pressed, !!WAMessageDecoration commentStamp: 'rew 9/13/2007 16:57' prior: 0!I add a string message on top of the WAComponent I decorate. For example if change WACounter>>initialize as below the text "Counter Example" will appear on above the counter when rendered.WACounter>>initialize	super initialize.	self count: 0.	self addMessage: 'Counter Example'	"added line"!!WASessionProtector commentStamp: 'pmm 5/2/2007 21:46' prior: 0!I bind a session to an IP address.The problem I solve is when you navigate from a Seaside "page" to a different page then this page will have enough information to hijack your old session. This can happen for example with blogs that display the referer.I don't work for users that have the same IP. This is the case if they are NATed (universities, companies, ...). I can be circumvened if the application is not behind an Apache proxy.An alternative to solve the same problem is to use a session cookie.Usage:In your root component class implementinitialize	super initialize.	self addDecoration: WASessionProtector new!!WATransaction commentStamp: 'pmm 9/25/2007 20:27' prior: 0!WATransaction ensures that the component it decorates is not repeated once the "transaction" is completed. For example once a user has submitted an order you don't want them to use the web browser's back button to accidentally resubmit the order. WATransaction does not support rollbacks.Normally you will not use this class directly. Instead use WAComponent>>isolate: in a task.Instance Variables:	active	<Boolean>	false indicates the transaction is over.!!WAValidationDecoration commentStamp: 'rew 9/13/2007 22:16' prior: 0!A WAValidationDecoration validates its component form data when the component returns using "answer" or "answer:". A WAValidationDecoration can be added to component via the method "validateWith:" as below.	SampleLoginComponent>>intialize		form := WAFormDecoration new buttons: self buttons.		self addDecoration: form.		self validateWith: [:answerArgOrSelf | answerArgOrSelf validate].		self addMessage: 'Please enter the following information'.If component returns via "answer:" the answer: argument is passed to the validate block. If the component returns using "answer" the sender of "answer" is passed to the validate block.Instance Variables	exceptionClass:		<Notification>	message:		<String>	validationBlock:		<one arg block>exceptionClass	- Type of notication that is raised by validation code when validation fails. Default value is WAValidationNotificationmessage	- String message displayed on validation failure. Obtained from the notificationvalidationBlock	- One arg block, !!WAWindowDecoration commentStamp: 'pmm 10/3/2007 21:11' prior: 0!WAWindowDecoration adds a simple title and close button in a bordered area at the top of the page. When closed button is selected nil is "answer"ed. Useful for a quick & dirty dialog window. Used by WAPlugin and SCTestRunner.Instance Variables:	cssClass	<String>	String added to "window-title " to generate cssClass for the title	title	<String>	title of page!!WAProcessMonitor commentStamp: 'rew 10/19/2007 10:49' prior: 0!WAProcessMonitor executes a block in a new process. Ensures that only one such block is executed at a time. See method critical:ifError:Instance Variables:	mutex	<Semaphore>	Used to sure that only one block is executed at a time	process	<Process>	New process used to execute block	semaphore	<Semaphore>	Used to signal when process is done!!WARequest commentStamp: 'pmm 5/27/2007 21:54' prior: 0!I am a server independent http request object. Instance of me can be aquired through WASession >> #currentRequest!!WARequestHandler commentStamp: 'rew 10/19/2007 10:44' prior: 0!WARequestHandler is an abstract class whose subclasses handle http requests. Most of the methods are either empty or return a default value. Subclasses must implement the following messages:	handleRequest:	process the requestInstance Variables:	parent	<WADispatcher | WAApplication | nil> What owns or manages the handler. WADispatchers manage WADispatchers & WAApplications, WAApplications own WASessions!!WADocumentHandler commentStamp: 'pmm 10/20/2007 23:22' prior: 0!WADocumentHandler handles requests for images, text documents and binary files (byte arrays). This class is not normally used directly. A number of WA*Tag classes implement document:mimeType:fileName: which use WADocumentHandler. Given a document document:mimeType:fileName: creates a WADocumentHandler on the document, registers the handler with a dispatcher, and adds the correct url in the tag for the document.Instance Variables:	document	<ByteArray | GIFImage | Image | String | WACachedDocument | any class that understands #asMIMEDocumentType:>	contents of the document	fileName	<String>	file containing the document to be sent as an attachment, nil if no such file	mimeDocument	<MIMEDocument>	MIMEDocument object representing this document and mimeType, generates stream used to write document for the response. 	mimeType	<String>	standard HTTP mime type!!WAEntryPoint commentStamp: 'rew 10/19/2007 10:45' prior: 0!WAEntryPoint represents a named entry point to a request handler.Given a seaside application URL, http://localhost:8008/seaside/tests/alltests, the path parts of the url are mapped to WARequestHandlers. "seaside" & "tests" map to WADispatchers, "alltests" maps to a WAApplication. These individual path parts are used as the names of the WARequestHandlers. WAEntryPoint is an abstract class that handles the name of WARequestHandlers. WAEntryPoint constructs the proper url path for this handler.Instance Variables:	name	<String>	the name or path part of this handler!!WADispatcher commentStamp: 'rew 10/19/2007 10:46' prior: 0!WADispatcher takes http requests and dispatches them to the correct handler (WAApplication, WAFileHandler, WANotFoundHandler, etc). WADispatcher class>>default is the top level dispatcher. When a Seaside application is registered as "foo" the application is added to the top level dispatcher. The application is added to the entryPoints of the dispatcher at the key "foo". If a Seaside application is registered as "bar/foo" then the application isadded to a  dispatcher's entryPoints at the key "foo". That dispatcher is in the top level dispatcher's  entryPoints at the key "bar".   When a http request is received it is sent to WADispatcher class>>default to find the correct handler for the request. If a handler exists for the request is sent to that handler. Otherwise the request is sent to WANotFoundHandler.The VW port maintains multiple copies of the tree of dispatchers rooted at WADispatcher class>>default. One copy is for each different URL that can reach Seaside (http://..../seaside/go/counter - normal, http://..../counter - SeasideShortPath, http://..../seaside/stream/counter - streaming). Instance Variables:	defaultName	<String>	entryPoints	<(Dictionary of: (WAApplication | WADispatcher | WAFileHandler))>	 the keys are strings, which are the names and URL path segments for the handler at that key	lastUpdate	<TimeStamp>	Time the dispatcher was last changed	version	<SmallInteger>	Each time the dispatcher is changed the version is increased by 1!!WAFileHandler commentStamp: 'rew 10/19/2007 10:48' prior: 0!Seaside serves static files using WALibrary subclasses. WAFileHandler handles all requests for WALibrary files (or methods) for all applications on the Seaside server. WAFileHandler is registered with the default WADispatcher automatically.!!WARegistry commentStamp: 'rew 10/19/2007 10:46' prior: 0!WARegistry maintains sessions for a Seaside application. Each session has a key, which is the _s part of Seaside URLs and is embedded in links on pages generated by Seaside. WARegistry checks requests for session keys. If one exists, the request is sent to the proper session. If not the request is a new request so handleDefaultRequest: is called so subclasses can handle the request.Subclasses must implement the following messages:	handleDefaultRequest:		Handle a request without a session key, ie a new request.Instance Variables:	handlersByKey	<Dictionary of <session key(string),WASession>>	provides easy access to the session for a session key	keysByHandler	<Dictionary of <WASession, session key(string)>>	provides easy access to the session key of a session	mutex	<Semaphore>	Used to insure keysByHandler & handlersByKey are updated atomically!!WAApplication commentStamp: 'rew 10/19/2007 10:47' prior: 0!WAApplication is the starting point for a Seaside application. When a WAComponent is registered as a top level component a WAApplication object is added to a WADispatcher. The dispatcher forwards all requests to the WAApplication, which in turn forwards them to the correct WASession object. WAApplication's parent class WARegistry maintains a list of all active sessions to the application. "configuration" contains a chain of WAConfituration classes that define attributes of the application. The attribute "rootComponent", for example, defines the top level WAComponent class for the application. The configuration chain includes WAUserConfiguration, WAGlobalConfiguration, WARenderLoopConfiguration and WASessionConfiguration. Other configurations can be added to the chain when the top level application is registered with a dispatcher. (See below)"libraries" is a collection of WALibrary classes, which are used to serve css, javascript and images used by the application. These may be in methods or in files. Sometimes these libraries are replaced by static files served by Apache. See WAFileLibrary class comment for more information.Registering an Application.	An application can be registered with a dispatcher by using the Seaside configuration page or via code. Below MyComponent is a subclass of WAComponent. The following registers the component as an application, gives some values to attributes (or preferences) and adds a library and a configuration. MyComponent class>>initialize	"self initialize"	| application |	application := self registerAsApplication: 'sample'.	application preferenceAt: #sessionClass put: Glorp.WAGlorpSession.	application addLibrary: SampleLibrary.	application configuration addAncestor: GlorpConfiguration new.	application preferenceAt: #glorpDatabasePlatform put: Glorp.PostgreSQLPlatform.	application preferenceAt: #databaseServer put: '127.0.0.1'.	application preferenceAt: #databaseConnectString put: 'glorptests'.MyComponent>>someInstanceMethod	"example of how to access attributes (preferences)"	self session application preferenceAt: #glorpDatabasePlatform!!WAExpiringHandler commentStamp: 'rew 10/19/2007 10:47' prior: 0!WAExpiringHandler is an abstract class that times out when the time between requests is longer than the value of "timeout"Subclasses must implement the following messages:	incomingRequest:		subclass handles the request in this methodInstance Variables:	expired	<Boolean>	True if handler has times out	lastAccess	<Time>	Time the handler was last accessed	timeout	<Integer>	Length of time in seconds handler will timeout without a request!!WASession commentStamp: 'lr 5/10/2007 22:41' prior: 0!I am a Seaside session. A new instance of me gets created when an user accesses an application for the first time and is persistent as long as the user is interacting with it.This class is intended to be subclasses by applications that need global state, like a user. Custom state can be added by creating instance variables and storing it there. The session can be retrieved by #session if inside a component or task or by evaluating: WACurrentSession valueIf the session has not been used for #defaultTimeoutSeconds, it is garbage collected by the system. To manually expire a session call #expire.A good way to clear all sessions is the following code:WARegistry clearAllHandlers.Smalltalk garbageCollect!!WANotFoundHandler commentStamp: 'pmm 10/20/2007 23:18' prior: 0!WANotFoundHandler handles requests whose urls don't map to a Seaside application.!!WAResponse commentStamp: 'pmm 5/27/2007 21:52' prior: 0!I am a server independent http response object. I am used in conjunction with WASession >> returnResponse:!!WASmallDictionary commentStamp: 'lr 7/12/2007 13:15' prior: 0!I am an implementation of a dictionary. Compared to other dictionaries I am very efficient for small sizes, speed- and space-wise. I also remember the order in which elements are added, some of my users might depend on that. My implementation features some ideas from the RefactoringBrowser.!!WAHtmlAttributes commentStamp: 'lr 7/12/2007 13:30' prior: 0!I represent the attributes of a XHTML tag. Compared to my superclass I ignore requests to add a nil-values. I also don't throw an exception when accessing a key that doesn't exist, but instead return nil.!!WAUrl commentStamp: 'lr 7/9/2007 21:43' prior: 0!I represent all portions of an URL as described by the RFC 1738. I include scheme, username, password, hostname, port, path, parameters, and fragment.Portions of this code are based on code of Kazuki Yasumatsu and Paolo Bonzini.Instance Variables	scheme:			<String> or nil	username:		<String> or nil	password:		<String> or nil	hostname:		<String> or nil	port:			<Integer> or nil	path:			<OrderedCollection> or nil	parameters:		<Dictionary>	fragment:		<String> or nil!!WAUtf8EncodingStream commentStamp: 'pmm 10/14/2006 14:37' prior: 0!I wrap a SocketStream and encode the input to utf-8.Unfortunately such hacks are needed because of the Squeak Stream hierarchy.!!WAValueHolder commentStamp: 'pmm 9/5/2007 19:01' prior: 0!I wrap a single object. I am like value holder except that I am portable and don't include the Model cruft in Squeak.!!WAStateHolder commentStamp: 'pmm 9/5/2007 19:03' prior: 0!I am only where for migration purposes. Don't use WAStateHolder anymore. Backtracking is now done using #states. If you need an object that wraps a single value use WAValueHolder.!!Exception class methodsFor: '*seaside2-squeak' stamp: 'ab 7/10/2003 11:42'!raiseSignal	^ self signal! !!Exception class methodsFor: '*seaside2-squeak' stamp: 'mb 3/23/2006 17:53'!raiseSignal: aString	^ self signal: aString! !!Exception methodsFor: '*seaside2' stamp: 'lr 6/5/2007 21:42'!possibleCauses	^ #()! !!Date class methodsFor: '*seaside2-squeak' stamp: 'ab 7/10/2003 11:29'!newDay: dayNumber monthNumber: monthNumber year: yearNumber	^ self newDay: dayNumber month: monthNumber year: yearNumber! !!Integer methodsFor: '*seaside2' stamp: 'mbany 4/14/2005 12:09'!printStringAsCents	^ '$', (self // 100) displayString, '.', (self \\ 100) asTwoCharacterString! !!Form methodsFor: '*seaside2-squeak' stamp: 'lr 10/28/2007 14:42'!asMIMEDocument	^self asMIMEDocumentType: self defaultMimeType! !!Form methodsFor: '*seaside2-squeak' stamp: 'lr 10/28/2007 14:42'!asMIMEDocumentType: mimeType	| aStream |	aStream := (RWBinaryOrTextStream on: '').	(self writerForMimeType: mimeType)		putForm: (self asFormOfDepth: 32) onStream: aStream.	^MIMEDocument contentType: mimeType content: aStream contents! !!Form methodsFor: '*seaside2-squeak' stamp: 'mb 6/12/2006 14:00'!defaultMimeType	^'image/gif'! !!Form methodsFor: '*seaside2-squeak' stamp: 'mb 6/12/2006 14:01'!mimeType	^ self defaultMimeType! !!Form methodsFor: '*seaside2-squeak' stamp: 'mb 6/12/2006 14:02'!writerForMimeType: mimeTypeString	| mimeType tokens type |	mimeType := mimeTypeString isString		ifTrue: [mimeTypeString]		ifFalse: [self mimeType].	[tokens := mimeType findTokens: '/'.	tokens size < 2] whileTrue: [mimeType := self defaultMimeType].	"First token is assumed to be 'image'"	type := tokens second.	type = 'jpg' ifTrue: [^JPEGReadWriter2].	type = 'jpeg' ifTrue: [^JPEGReadWriter2].	type = 'png' ifTrue: [^PNGReadWriter].	type = 'pcx' ifTrue: [^PCXReadWriter].	type = 'bmp' ifTrue: [^BMPReadWriter].	type = 'gif' ifTrue: [^GIFReadWriter].	^nil! !!WADemoVariable class methodsFor: 'defaults' stamp: 'pmm 10/10/2007 21:27'!defaultValue	^'default'! !!WADynamicVariable class methodsFor: 'defaults' stamp: 'avi 3/29/2004 14:12'!defaultValue	^ nil! !!WADynamicVariable class methodsFor: 'evaluating' stamp: 'lr 4/18/2007 00:25'!use: anObject during: aBlock	^ aBlock on: self do: [ :notification | notification resume: anObject ]! !!WADynamicVariable class methodsFor: 'evaluating' stamp: 'avi 4/27/2004 14:25'!value	^ self raiseSignal! !!WADynamicVariable methodsFor: 'defaults' stamp: 'dkh 07/06/2007 23:13'!defaultAction	^self class defaultValue! !!MessageNotUnderstood methodsFor: '*seaside2' stamp: 'pmm 7/7/2007 18:25'!possibleCauses	| causes |	self receiver isNil ifFalse: [		^ #('you sent a message this type of object doesn''t understand' )].	causes := #(		'the receiver of the message is nil'		'a class extension hasn''t been loaded correctly'		'you sent the wrong message' ) asOrderedCollection.	self message selector = #contents ifTrue: [		causes addFirst: 'you forgot to send "super initialize" in a initialize method of a component or task' ].	^causes! !!ContextPart methodsFor: '*seaside2-squeak' stamp: 'avi 4/24/2004 12:27'!localAt: aNumber	^ self at: aNumber! !!ContextPart methodsFor: '*seaside2-squeak' stamp: 'avi 4/24/2004 12:27'!localAt: aNumber put: anObject	^ self at: aNumber put: anObject! !!ContextPart methodsFor: '*seaside2-squeak' stamp: 'avi 4/24/2004 12:27'!localSize	^ self size! !!Morph methodsFor: '*seaside2-squeak' stamp: 'mb 6/2/2006 10:47'!asMIMEDocument	^self imageForm asMIMEDocument! !!Morph methodsFor: '*seaside2-squeak' stamp: 'mb 6/2/2006 10:53'!asMIMEDocumentType: mimeType	^self imageForm asMIMEDocumentType: mimeType! !!Dictionary methodsFor: '*seaside2' stamp: 'ab 10/1/2002 13:48'!inspectorFields	^ self! !!Dictionary methodsFor: '*seaside2' stamp: 'pmm 7/3/2010 10:42'!restoreFromSnapshot: anObject	super restoreFromSnapshot: anObject snapshotCopy! !!Dictionary methodsFor: '*seaside2' stamp: 'pmm 7/3/2010 10:26'!snapshotCopy	^ self copy! !!Dictionary methodsFor: '*seaside2' stamp: 'lr 2/16/2007 15:11'!valuesCollect: aBlock	| result |	result := self species new: self size.	self keysAndValuesDo: [ :key :value |		result at: key put: (aBlock value: value) ].	^ result! !!BlockClosure methodsFor: '*seaside2-squeak' stamp: 'damiencassou 4/5/2009 18:54'!fixCallbackTemps	^ self "From Damien Cassou: I just guess that returning self is enough. Please verify"! !!BlockClosure methodsFor: '*seaside2' stamp: 'damiencassou 4/5/2009 18:53'!handleRequest: aRequest	^ self value: aRequest! !!BlockClosure methodsFor: '*seaside2' stamp: 'damiencassou 4/5/2009 18:53'!renderOn: aRenderer	self numArgs = 0		ifTrue: [self value]		ifFalse: [self value: aRenderer]! !!String methodsFor: '*seaside2' stamp: 'lr 10/28/2007 14:42'!asCapitalizedPhrase	|read words currentWord capitalizedWord|	(self noneSatisfy: [:ea | ea isLowercase] ) ifTrue: [^ self].	words := WriteStream on: String new.	read := ReadStream on: self.	[read atEnd] whileFalse:		[currentWord := WriteStream on: String new.		currentWord nextPut: read next.		[|x| x := read peek. x isNil or: [x isUppercase]] whileFalse:			[currentWord nextPut: read next].		capitalizedWord := currentWord contents capitalized.			(#(Of In At A Or To By) includes: capitalizedWord)				ifTrue: [capitalizedWord := capitalizedWord asLowercase].		words nextPutAll: capitalizedWord.		words nextPutAll: ' '].	words skip: -1.	^ words contents! !!String methodsFor: '*seaside2' stamp: 'lr 10/28/2007 14:42'!asMIMEDocument	^self asMIMEDocumentType: 'text/plain'! !!String methodsFor: '*seaside2' stamp: 'mb 6/2/2006 10:54'!asMIMEDocumentType: mimeType	^SeasidePlatformSupport mimeDocumentClass contentType: mimeType content: self! !!String methodsFor: '*seaside2-encoding' stamp: 'lr 3/26/2007 20:22'!encodeOn: aDocument	aDocument htmlEncoder nextPutAll: self! !!String methodsFor: '*seaside2' stamp: 'lr 6/13/2006 16:06'!renderOn: aRenderer	aRenderer text: self! !!String methodsFor: '*seaside2-squeak' stamp: 'mb 3/23/2006 11:46'!trimBlanks	^self withBlanksTrimmed! !!Collection methodsFor: '*seaside2' stamp: 'lr 5/9/2007 08:47'!inspectorFields	| i |	i := 0.	^ self asArray collect: [ :each | i := i + 1. i -> each ]! !!Collection methodsFor: '*seaside2' stamp: 'lr 3/8/2006 08:43'!renderOn: html	self do: [ :each | each renderOn: html ]! !!MIMEDocument methodsFor: '*seaside2-squeak' stamp: 'pmm 4/18/2006 20:09'!asMIMEDocument	^self! !!MIMEDocument methodsFor: '*seaside2-squeak' stamp: 'mb 6/2/2006 10:44'!asMIMEDocumentType: mimeType	^self! !!Seaside2Info class methodsFor: 'initialization' stamp: 'avi 3/24/2004 12:19'!initialize	[self new register] on: MessageNotUnderstood do: ["must be an old version of PackageInfo"]! !!Seaside2Info methodsFor: 'naming' stamp: 'ab 10/26/2002 15:41'!packageName	^ 'Seaside2'! !!Seaside2Info methodsFor: 'naming' stamp: 'cwp 4/25/2004 18:40'!systemCategoryPrefix	^ 'Seaside'! !!SeasideAddonVWInfo methodsFor: 'accessing' stamp: 'mb 10/6/2006 19:31'!ignoredCategories	^ #('Platform')! !!SeasideAddonVWInfo methodsFor: 'accessing' stamp: 'mb 10/6/2006 19:33'!name	^ self addonName! !!SeasideAddonVWInfo methodsFor: 'accessing' stamp: 'mb 10/6/2006 19:33'!namespace	^ 'Seaside'! !!SeasideAddonVWInfo methodsFor: 'accessing' stamp: 'mb 10/6/2006 19:33'!needsNamespace	^false! !!SeasideDolphinInfo class methodsFor: 'accessing' stamp: 'EAM 10/31/2007 11:48'!addonName	^'Seaside'! !!SeasideDolphinInfo methodsFor: 'accessing' stamp: 'lr 6/5/2009 17:26'!classes	"Answer aCollection containing all the classes of receiver."	| ignored |	ignored := self ignoredClasses.	^super classes reject: [:each | ignored includes: each ]! !!SeasideDolphinInfo methodsFor: 'naming' stamp: 'EAM 10/31/2007 11:50'!ignoredCategories	"Answer a collection of the categories ignored by receiver."	^ #('Platform' 'Base-Connections' 'Rendering-Buttons' 'Components-Tools-Squeak' 'Utilities-Squeak')! !!SeasideDolphinInfo methodsFor: 'accessing' stamp: 'lr 6/5/2009 17:26'!ignoredClasses	"Answer a collection of the receiver ignored classes."	^Set new		addAll: Continuation withAllSubclasses;		add: WASnapshot;		yourself! !!SeasideDolphinInfo methodsFor: 'naming' stamp: 'EAM 10/31/2007 11:47'!methodCategoryPrefix	^ methodCategoryPrefix		ifNil: [methodCategoryPrefix := '*' , self name asLowercase]! !!SeasideDolphinInfo methodsFor: 'naming' stamp: 'lr 6/5/2009 17:26'!name	"Answer the name of the receiver package."	^ 'Seaside2'! !!SeasideDolphinInfo methodsFor: 'naming' stamp: 'lr 6/5/2009 17:26'!needsNamespace	"Answer whether receiver needs a namespace during fileout."	^false! !!SeasideDolphinInfo methodsFor: 'accessing' stamp: 'EAM 10/31/2007 12:02'!prerequisites	"Answer a collection with the names of the prerrequisite packages."	#()! !!SeasideVWInfo class methodsFor: 'accessing' stamp: 'pmm 5/23/2007 18:48'!addonName	^'Seaside'! !!SeasideVWInfo methodsFor: 'accessing' stamp: 'mb 3/21/2006 17:40'!ignoredCategories	^ #('Platform' 'Base-Connections' 'Rendering-Buttons' 'Components-Tools-Squeak' 'Utilities-Squeak')! !!SeasideVWInfo methodsFor: 'naming' stamp: 'mb 6/7/2007 17:56'!methodCategoryPrefix	^ methodCategoryPrefix		ifNil: [methodCategoryPrefix := '*' , self name asLowercase]! !!SeasideVWInfo methodsFor: 'naming' stamp: 'mb 5/30/2006 13:52'!name	^ 'Seaside2'! !!SeasideVWInfo methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!needsNamespace	^true! !!WAPackageInfo class methodsFor: 'accessing' stamp: 'pmm 5/23/2007 18:48'!addonName	self subclassResponsibility! !!WAPackageInfo class methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!fileOutUsing: anExporter suffix: aString	anExporter		fileOutPackage: self default		on: (FileStream forceNewFileNamed: self addonName, aString)! !!WAPackageInfo class methodsFor: 'actions' stamp: 'pmm 5/23/2007 18:54'!fileOutVW3	(Smalltalk classNamed: #VW3PackageExporter)		ifNotNilDo: [ :class | self fileOutUsing: class suffix: 'VW3.st' ]! !!WAPackageInfo class methodsFor: 'actions' stamp: 'pmm 5/23/2007 18:54'!fileOutVW5	(Smalltalk classNamed: #VW5PackageExporter)		ifNotNilDo: [ :class | self fileOutUsing: class suffix: 'VW5.st' ]! !!WAPackageInfo methodsFor: 'accessing' stamp: 'pmm 5/23/2007 18:49'!addonName	^self class addonName! !!WAPackageInfo methodsFor: 'accessing' stamp: 'pmm 5/23/2007 18:50'!externalName	^ self addonName! !!WAPackageInfo methodsFor: 'accessing' stamp: 'pmm 5/23/2007 18:56'!ignoredCategories	self subclassResponsibility! !!WAPackageInfo methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!includesSystemCategory: aString	^ (aString beginsWith: self addonName , '-')		and: [(self ignoredCategories includes: (aString copyAfter: $-)) not]! !!WAPackageInfo methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!isYourClassExtension: aString	^ (super isYourClassExtension: aString)		and: [((aString asLowercase findTokens: '-')				includes: 'squeak') not]! !!WAPackageInfo methodsFor: 'accessing' stamp: 'pmm 5/23/2007 18:58'!packageName	^ self addonName , 'VW'! !!WAPackageInfo methodsFor: 'registering' stamp: 'pmm 12/14/2007 07:06'!register	"no nothing, we're for export only"! !!WAPackageInfo methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!versionString	| ancestor ancestors |	ancestors := (MCPackage named: self name) workingCopy ancestry ancestors.	ancestors isEmpty ifTrue: [ ^'unknown' ].	ancestor := ancestors first.	^ancestor name , '.mcz      ' , ancestor date printString, ' ', ancestor time printString! !!MessageSend methodsFor: '*seaside2-squeak' stamp: 'ab 7/10/2003 11:40'!evaluateWithArguments: anArray	^ self valueWithArguments: anArray! !!MessageSend methodsFor: '*seaside2' stamp: 'pmm 4/23/2007 20:02'!fixCallbackTemps	"for polymorphism with BlockContext >> #fixCallbackTemps"! !!MessageSend methodsFor: '*seaside2' stamp: 'ab 3/5/2003 18:30' prior: 51682539!numArgs	^ selector numArgs! !!MessageSend methodsFor: '*seaside2' stamp: 'lr 8/4/2006 09:18'!renderOn: html	self value: html! !!MessageSend methodsFor: '*seaside2' stamp: 'ab 7/10/2003 11:40'!value: anObject	^ self evaluateWithArguments: (Array with: anObject)! !!MessageSend methodsFor: '*seaside2' stamp: 'lr 10/28/2007 14:42'!valueWithPossibleArgument: anArg     "Evaluate the block represented by the receiver.     If the block requires one argument, use anArg, if it requires more than one,     fill up the rest with nils."	self numArgs = 0		ifTrue: [^self value].	self numArgs = 1		ifTrue: [^self value: anArg].	self numArgs  > 1 ifTrue: [		^self valueWithArguments: (Array with: anArg), (Array new: self numArgs  - 1)]! !!ByteArray methodsFor: '*seaside2' stamp: 'mb 6/2/2006 10:46'!asMIMEDocument	^self asMIMEDocumentType: 'application/octet-stream'! !!ByteArray methodsFor: '*seaside2' stamp: 'mb 6/2/2006 10:53'!asMIMEDocumentType: mimeType	^SeasidePlatformSupport mimeDocumentClass contentType: mimeType content: self! !!ByteArray methodsFor: '*seaside2' stamp: 'mb 9/22/2006 12:17'!renderOn: aRenderer	aRenderer text: self! !!WAExternalID class methodsFor: 'private' stamp: 'ab 5/28/2003 23:34'!defaultSize	^ 8! !!WAExternalID class methodsFor: 'instance-creation' stamp: 'pmm 2/23/2008 18:25'!fromString: aString	| id |	id := self new: aString size.	aString keysAndValuesDo: [ :index :each |		id at: index put: each asInteger ].	^ id! !!WAExternalID class methodsFor: 'initialization' stamp: 'lr 1/17/2008 11:43'!initialize	self startUp.	SeasidePlatformSupport addToStartUpList: self.	GeneratorSpace := ($a to: $z) , ($A to: $Z) , ($0 to: $9) , (Array with: $_ with: $-)		collect: [ :each | each asInteger ].	GeneratorMutex := SeasidePlatformSupport semaphoreClass forMutualExclusion! !!WAExternalID class methodsFor: 'instance-creation' stamp: 'ab 5/28/2003 23:53'!new	^ self new: self defaultSize! !!WAExternalID class methodsFor: 'instance-creation' stamp: 'pmm 11/2/2005 23:19'!new: aNumber	^ (self basicNew: aNumber) initialize! !!WAExternalID class methodsFor: 'initialization' stamp: 'lr 1/17/2008 11:42'!startUp	Generator := SeasidePlatformSupport randomClass new! !!WAExternalID methodsFor: 'private' stamp: 'lr 1/17/2008 11:35'!initialize	GeneratorMutex critical: [		1 to: self size do: [ :index |			self at: index put: (GeneratorSpace atRandom: Generator) ] ]! !!WAExternalID methodsFor: 'private' stamp: 'lr 1/17/2008 11:36'!printOn: aStream	self do: [ :each | aStream nextPut: (Character value: each) ]! !!Bag methodsFor: '*seaside2-squeak' stamp: 'lr 4/20/2007 20:43'!snapshotCopy	^ self copy! !!WAComponentsNotFoundError methodsFor: 'accessing' stamp: 'pmm 7/11/2007 22:19'!possibleCauses	^#(		'you do not implement #children correctly'		'you do not backtrack #children correctly'		'you do not implement #states correctly'	)! !!AmbTest methodsFor: 'utilities' stamp: 'ab 12/6/2002 12:20'!pickANumber	^ self pickANumberGreaterThan: 0! !!AmbTest methodsFor: 'utilities' stamp: 'ab 12/6/2002 12:20'!pickANumberGreaterThan: aNumber	^ amb valueOf: [aNumber + 1] or: [self pickANumberGreaterThan: aNumber + 1]! !!AmbTest methodsFor: 'running' stamp: 'ab 12/13/2002 01:15'!setUp	amb := Amb new! !!AmbTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testAllValuesAboveFive	|x results|	results := amb allValues:				[x := amb oneOf: (1 to: 10).				amb assert: (x > 5).				x].	self assert: results = #(6 7 8 9 10)! !!AmbTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testMaybe	|x y z|	x := amb maybe.	y := amb maybe.	z := amb maybe not.	amb deny: x = y.	amb deny: x = z.	self assert: x.	self deny: y.	self deny: z! !!AmbTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testPickANumber	self assert: self pickANumber = 1! !!AmbTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testPickANumberAboveFive	|x|	x := self pickANumber.	amb assert: (x > 5).	self assert: x = 6! !!AmbTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testSicpLogicProblem	"Baker, Cooper, Fletcher, Miller, and Smith live on different floors of an apartment house that contains only five floors. Baker does not live on the top floor. Cooper does not live on the bottom floor. Fletcher does not live on either the top or the bottom floor. Miller lives on a higher floor than does Cooper. Smith does not live on a floor adjacent to Fletcher's. Fletcher does not live on a floor adjacent to Cooper's. Where does everyone live?""This implementation is too slow - uncomment to actually run it.""	|baker cooper fletcher miller smith|	baker := amb oneOf: (1 to: 5).	cooper := amb oneOf: (1 to: 5).	fletcher := amb oneOf: (1 to: 5).	miller := amb oneOf: (1 to: 5).	smith := amb oneOf: (1 to: 5).	amb assert: (Set new add: baker; add: cooper; add: fletcher; add: miller; add: smith; size) = 5.	amb deny: baker = 5.	amb deny: cooper = 1.	amb deny: fletcher = 5.	amb deny: fletcher = 1.	amb assert: miller > cooper.	amb deny: (smith - fletcher) abs = 1.	amb deny: (fletcher - cooper) abs = 1.	self assert: baker = 3.	self assert: cooper = 2.	self assert: fletcher = 4.	self assert: miller = 5.	self assert: smith = 1."! !!AmbTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testSicpLogicProblemFaster	"Baker, Cooper, Fletcher, Miller, and Smith live on different floors of an apartment house that contains only five floors. Baker does not live on the top floor. Cooper does not live on the bottom floor. Fletcher does not live on either the top or the bottom floor. Miller lives on a higher floor than does Cooper. Smith does not live on a floor adjacent to Fletcher's. Fletcher does not live on a floor adjacent to Cooper's. Where does everyone live?"	|baker cooper fletcher miller smith|	fletcher := amb oneOf: (1 to: 5).	amb deny: fletcher = 5.	amb deny: fletcher = 1.	smith := amb oneOf: (1 to: 5).	amb deny: (smith - fletcher) abs = 1.	cooper := amb oneOf: (1 to: 5).	amb deny: cooper = 1.	amb deny: (fletcher - cooper) abs = 1.	miller := amb oneOf: (1 to: 5).	amb assert: miller > cooper.	baker := amb oneOf: (1 to: 5).	amb deny: baker = 5.	amb assert: (Set new add: baker; add: cooper; add: fletcher; add: miller; add: smith; size) = 5.	self assert: baker = 3.	self assert: cooper = 2.	self assert: fletcher = 4.	self assert: miller = 5.	self assert: smith = 1! !!AmbTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testSolveAnEquation	|x y|	x := amb oneOf: (1 to: 10).	y := amb oneOf: (1 to: 10).	amb assert: (y * x) = 42.	self assert: x = 6.	self assert: y = 7! !!ContinuationTest methodsFor: 'utilities' stamp: 'ab 6/15/2003 19:23'!callcc: aBlock	^ Continuation currentDo: aBlock! !!ContinuationTest methodsFor: 'tests' stamp: 'lr 1/5/2007 17:26'!testBlockEscape	| x |	tmp := 0.	x := [ tmp := tmp + 1. tmp2 value ].	self callcc: [ :cc | tmp2 := cc. x value ].	tmp2 := [ ].	x value.	self assert: tmp = 2! !!ContinuationTest methodsFor: 'tests' stamp: 'dkh 7/5/2007 12:27'!testBlockTemps	| y |	#(1 2 3) do: [ :i |		| x |		x := i.		tmp ifNil: [ tmp2 := (self callcc: [ :cc | tmp := cc. [ :q | ] ]) ].		tmp2 value: x.		x := 17 ].	y := (self callcc: [ :cc | tmp value: cc. 42 ]).	self assert: y = 1! !!ContinuationTest methodsFor: 'tests' stamp: 'lr 10/28/2007 14:42'!testBlockVars	| continuation |	tmp := 0.	tmp := (self callcc: [ :cc | continuation := cc. 0 ]) + tmp.	tmp2		ifNotNil: [ tmp2 value ]		ifNil: [			#(1 2 3) do: [ :i |				self callcc: [ :cc | tmp2 := cc. continuation value: i ] ] ].	self assert: tmp = 6! !!ContinuationTest methodsFor: 'tests' stamp: 'lr 10/28/2007 14:42'!testComprehension	"What should this print out?	| yin yang |	yin := [ :x | Transcript cr. x ] value: Continuation current.	yang := [ :x | Transcript nextPut: $*. x ] value: Continuation current.	yin value: yang"! !!ContinuationTest methodsFor: 'tests' stamp: 'lr 1/5/2007 17:27'!testMethodTemps	| i continuation |	i := 0.	i := i + (self callcc: [:cc | continuation := cc. 1]).	self assert: i ~= 3.	i = 2 ifFalse: [ continuation value: 2 ]! !!ContinuationTest methodsFor: 'tests' stamp: 'lr 1/5/2007 18:22'!testReentrant	| assoc |	assoc := self callcc: [ :cc | cc -> 0 ].	assoc value: assoc value + 1.	self assert: assoc value ~= 5.	assoc value = 4		ifFalse: [ assoc key value: assoc ]! !!ContinuationTest methodsFor: 'tests' stamp: 'lr 1/5/2007 17:28'!testSimpleCallCC	| x continuation |	x := self callcc: [ :cc | continuation := cc. false ].	x ifFalse: [ continuation value: true ].	self assert: x! !!ContinuationTest methodsFor: 'tests' stamp: 'lr 1/5/2007 17:28'!testSimplestCallCC	| x |	x := self callcc: [ :cc | cc value: true ].	self assert: x! !!WAAttributesTest methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!assert: aBlock gives: aString	| stream |	aBlock value: (attributes := WAHtmlAttributes new).	WAHtmlStreamDocument new		stream: (stream := String new writeStream);		print: attributes.	self		assert: stream contents = aString		description: 'Expected ' , aString printString ,			', but got ' , stream contents printString		resumable: true! !!WAAttributesTest methodsFor: 'running' stamp: 'lr 7/12/2007 13:28'!setUp	attributes := WAHtmlAttributes new! !!WAAttributesTest methodsFor: 'testing-convenience' stamp: 'lr 10/28/2007 14:42'!testAddClass	self		assert: [ :attr | attr addClass: 'foo' ]		gives: ' class="foo"'.	self		assert: [ :attr | attr addClass: 'foo'; addClass: 'bar' ]		gives: ' class="foo bar"'! !!WAAttributesTest methodsFor: 'testing-convenience' stamp: 'lr 10/28/2007 14:42'!testAddStyle	self		assert: [ :attr | attr addStyle: 'display: hidden' ]		gives: ' style="display: hidden"'.	self		assert: [ :attr | attr addStyle: 'display: hidden'; addStyle: 'position: absolute' ]		gives: ' style="display: hidden;position: absolute"'! !!WAAttributesTest methodsFor: 'testing' stamp: 'lr 7/12/2007 13:29'!testAt	attributes at: 'foo' put: 'bar'.	self assert: (attributes at: 'foo') = 'bar'.	self assert: (attributes at: 'bar') isNil! !!WAAttributesTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testAtAppend	self		assert: [ :attr | attr at: 'onclick' append: 'this' separator: ';' ]		gives: ' onclick="this"'.	self		assert: [ :attr |			attr				at: 'onclick' append: 'this' separator: ';';				at: 'onclick' append: 'that' separator: ';' ]		gives: ' onclick="this;that"'.	self		assert: [ :attr |			attr				at: 'onclick' append: 'this' separator: ';';				at: 'onclick' append: nil separator: ';' ]		gives: ' onclick="this"'.	self		assert: [ :attr |			attr				at: 'onclick' append: 1 separator: ';';				at: 'onclick' append: 2 separator: ';' ]		gives: ' onclick="1;2"'! !!WAAttributesTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testAtPut	self		assert: [ :attr | attr at: 'id' put: 'foo' ]		gives: ' id="foo"'.	self		assert: [ :attr | attr at: 'tabindex' put: 6 ]		gives: ' tabindex="6"'.	self		assert: [ :attr | attr at: 'checked' put: true ]		gives: ' checked="checked"'.	self		assert: [ :attr | attr at: 'readonly' put: false ]		gives: ''.	self		assert: [ :attr | attr at: 'disabled' put: nil ]		gives: ''! !!WAAttributesTest methodsFor: 'testing-fixtures' stamp: 'lr 4/6/2007 21:18'!testCaseSensititve	self		assert: [ :attr | attr at: 'lastBuildDate' put: 'Sat, 07 Sep 2002 09:42:31 GMT' ]		gives: ' lastBuildDate="Sat, 07 Sep 2002 09:42:31 GMT"'! !!WAAttributesTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testOrder	self		assert: [ :attr | attr at: 'a' put: 1; at: 'b' put: 2; at: 'c' put: 3 ]		gives: ' a="1" b="2" c="3"'.	self		assert: [ :attr | attr at: 'a' put: 1; at: 'b' put: 2; at: 'c' put: 3; at: 'b' put: 4 ]		gives: ' a="1" b="4" c="3"'! !!WAAttributesTest methodsFor: 'testing' stamp: 'lr 7/12/2007 13:29'!testRemoveKey	attributes at: 'id' put: 'foo'.	self assert: (attributes removeKey: 'id') = 'foo'.	self assert: (attributes removeKey: 'id') isNil! !!WABacktrackingTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testArray	| original snapshot1 snapshot2 snapshot3 |	original := #( 1 2 3 ) copy.	snapshot1 := original snapshotCopy.	original at: 1 put: #a.	snapshot2 := original snapshotCopy.	original at: 2 put: #b.	snapshot3 := original snapshotCopy.	original restoreFromSnapshot: snapshot1.	self assert: original = #( 1 2 3 ).	original restoreFromSnapshot: snapshot2.	self assert: original = #( a 2 3 ).	original restoreFromSnapshot: snapshot3.	self assert: original = #( a b 3 )! !!WABacktrackingTest methodsFor: 'testing' stamp: 'pmm 7/3/2010 10:23'!testDictionary	| original snapshot1 snapshot2 snapshot3 snapshot4 |	original := Dictionary new.	original at: 1 put: #a; at: 2 put: #b.	snapshot1 := original snapshotCopy.	original at: 3 put: #c.	snapshot2 := original snapshotCopy.	original at: 3 put: #d.	snapshot3 := original snapshotCopy.	original removeKey: 1.	snapshot4 := original snapshotCopy.	original restoreFromSnapshot: snapshot1.	self assert: original size = 2.	self assert: (original at: 1 ifAbsent: []) = #a.	self assert: (original at: 2 ifAbsent: []) = #b.	self assert: (original at: 3 ifAbsent: []) isNil.	self assert: (original at: 4 ifAbsent: []) isNil.	original restoreFromSnapshot: snapshot2.	self assert: (original at: 1 ifAbsent: []) = #a.	self assert: (original at: 2 ifAbsent: []) = #b.	self assert: (original at: 3 ifAbsent: []) = #c.	self assert: (original at: 4 ifAbsent: []) isNil.	original restoreFromSnapshot: snapshot3.	self assert: (original at: 1 ifAbsent: []) = #a.	self assert: (original at: 2 ifAbsent: []) = #b.	self assert: (original at: 3 ifAbsent: []) = #d.	self assert: (original at: 4 ifAbsent: []) isNil.	original restoreFromSnapshot: snapshot4.	self assert: (original at: 1 ifAbsent: []) isNil.	self assert: (original at: 2 ifAbsent: []) = #b.	self assert: (original at: 3 ifAbsent: []) = #d.	self assert: (original at: 4 ifAbsent: []) isNil.	original at: 2 put: #!!.	original restoreFromSnapshot: snapshot4.	self assert: (original at: 1 ifAbsent: []) isNil.	self assert: (original at: 2 ifAbsent: []) = #b.	self assert: (original at: 3 ifAbsent: []) = #d.	self assert: (original at: 4 ifAbsent: []) isNil! !!WABacktrackingTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testHolder	| original snapshot1 snapshot2 snapshot3 |	original := WAValueHolder new.	snapshot1 := original snapshotCopy.	original contents: 1.	snapshot2 := original snapshotCopy.	original contents: 2.	snapshot3 := original snapshotCopy.	original restoreFromSnapshot: snapshot1.	self assert: original contents = nil.	original restoreFromSnapshot: snapshot2.	self assert: original contents = 1.	original restoreFromSnapshot: snapshot3.	self assert: original contents = 2! !!WABacktrackingTest methodsFor: 'testing' stamp: 'pmm 7/3/2010 10:24'!testOrderedCollection	| original snapshot |	original := OrderedCollection with: 1 with: 2.	snapshot := original snapshotCopy.		original restoreFromSnapshot: snapshot.	self assert: original asArray = #(1 2).		original removeLast.		original restoreFromSnapshot: snapshot.	self assert: original asArray = #(1 2)! !!WABacktrackingTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testSet	| original snapshot1 snapshot2 snapshot3 |	original := Set with: 1 with: 2.	snapshot1 := original snapshotCopy.	original add: 3.	snapshot2 := original snapshotCopy.	original remove: 1.	snapshot3 := original snapshotCopy.	original restoreFromSnapshot: snapshot1.	self assert: original size = 2.	self assert: (original includes: 1).	self assert: (original includes: 2).	self deny: (original includes: 3).	original restoreFromSnapshot: snapshot2.	self assert: original size = 3.	self assert: (original includes: 1).	self assert: (original includes: 2).	self assert: (original includes: 3).	original restoreFromSnapshot: snapshot3.	self assert: original size = 2.	self deny: (original includes: 1).	self assert: (original includes: 2).	self assert: (original includes: 3).	original add: 4.	original restoreFromSnapshot: snapshot3.	self assert: original size = 2.	self deny: (original includes: 1).	self assert: (original includes: 2).	self assert: (original includes: 3).	self deny: (original includes: 4)! !!WABug0073Test methodsFor: 'testing' stamp: 'pmm 5/31/2008 10:42'!testNoRootComponent	| application |	application := WAApplication new.	self assert: '' = application description! !!WABug0073Test methodsFor: 'testing' stamp: 'pmm 5/31/2008 10:44'!testWithRootComponent	| application |	application := WAApplication new.	application preferenceAt: #rootComponent put: WAAllTests.	self assert: WAAllTests description = application description! !!WACanvasBrushTest methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!assert: aBlock gives: aString	| html |	html := WARenderCanvas builder		callbackOwner: self;		render: aBlock.	self		assert: html = aString		description:	'Expected: ' , aString printString , ', Actual: ' , html printString		resumable: true! !!WACanvasBrushTest methodsFor: 'testing-tags-anchors' stamp: 'lr 10/28/2007 14:42'!testAnchorTag	self		assert: [ :html | html anchor ]		gives: '<a href="javascript:void(0)"></a>'.	self		assert: [ :html | html anchor name: 'foo' ]		gives: '<a name="foo"></a>'.	self		assert: [ :html | html anchor callback: [ ]; with: 'foo' ]		gives: '<a href="?1">foo</a>'.	self		assert: [ :html |			html anchor callback: [ ]; with: 'foo'.			html anchor callback: [ ]; with: 'bar' ]		gives: '<a href="?1">foo</a><a href="?2">bar</a>'.	self		assert: [ :html |			html anchor				extraPath: 'zork';				callback: [ ];				with: 'foo'. ]		gives: '<a href="/zork?1">foo</a>'.	self		assert: [ :html |			html anchor				extraParameters: 'zork';				callback: [ ];				with: 'foo'. ]		gives: '<a href="?zork&amp;1">foo</a>'! !!WACanvasBrushTest methodsFor: 'testing-tags-anchors' stamp: 'lr 5/9/2009 10:16'!testAnchorTagWithUrl	| url string |	url := WAUrl new.	url		hostname: 'www.seaside.st';		addToPath: 'foo bar&zork<blah';		addParameter: '1' value: nil;		addParameter: '2' value: 123;		addParameter: '3' value: 'foo bar&zork'.	string := 'http://www.seaside.st/foo%20bar%26zork%3Cblah?1&amp;2=123&amp;3=foo%20bar%26zork'.	self		assert: [ :html | html anchor url: url; with: url ]		gives: '<a href="' , string , '">' , string , '</a>'! !!WACanvasBrushTest methodsFor: 'testing' stamp: 'lr 4/9/2007 18:28'!testBasicNesting	self assert: [ :html | html div ] gives: '<div></div>'.	self assert: [ :html | html div: 1 ] gives: '<div>1</div>'.	self assert: [ :html | html div: 'foo' ] gives: '<div>foo</div>'! !!WACanvasBrushTest methodsFor: 'testing-tags' stamp: 'lr 5/23/2007 12:09'!testBreakTag	self		assert: [ :html | html break ]		gives: '<br/>'! !!WACanvasBrushTest methodsFor: 'testing-tags-forms' stamp: 'lr 4/11/2008 08:55'!testButton	self		assert: [ :html | html button ]		gives: '<button type="submit" class="submit"></button>'.	self		assert: [ :html | html button text: 'foo' ]		gives: '<button type="submit" class="submit">foo</button>'.	self		assert: [ :html | html button with: 'foo' ]		gives: '<button type="submit" class="submit">foo</button>'.	self		assert: [ :html | html button beSubmit ]		gives: '<button type="submit" class="submit"></button>'.	self		assert: [ :html | html button bePush ]		gives: '<button type="button" class="button"></button>'.	self		assert: [ :html | html button beReset ]		gives: '<button type="reset" class="reset"></button>'! !!WACanvasBrushTest methodsFor: 'testing-tags-forms' stamp: 'lr 4/11/2008 09:03'!testCancelButton	self		assert: [ :html | html cancelButton ]		gives: '<input type="submit" class="submit"/>'.	self		assert: [ :html | html cancelButton callback: [ ] ]		gives: '<input name="1" type="submit" class="submit"/>'.	self		assert: [ :html | html cancelButton on: #value of: self ]		gives: '<input value="Value" name="1" type="submit" class="submit"/>'.	self		assert: [ :html | html cancelButton: 'foo' ]		gives: '<input value="foo" type="submit" class="submit"/>'.	self		assert: [ :html | html cancelButton text: 'bar' ]		gives: '<input value="bar" type="submit" class="submit"/>'.	self		assert: [ :html | html cancelButton with: 'zork' ]		gives: '<input value="zork" type="submit" class="submit"/>'! !!WACanvasBrushTest methodsFor: 'testing-encoding' stamp: 'lr 10/28/2007 14:42'!testCanvasHtml	self assert: [ :html | html html: '<' ] gives: '<'.	self assert: [ :html | html html: '>' ] gives: '>'.	self assert: [ :html | html html: '"' ] gives: '"'.	self assert: [ :html | html html: '&' ] gives: '&'.	self		assert: [ :html | html html: '<div title="&amp;">' ]		gives: '<div title="&amp;">'! !!WACanvasBrushTest methodsFor: 'testing-encoding' stamp: 'pmm 10/20/2007 22:06'!testCanvasNil	self assert: [ :html | html text: nil ] gives: ''.	self assert: [ :html | html render: nil ] gives: ''! !!WACanvasBrushTest methodsFor: 'testing-encoding' stamp: 'lr 10/28/2007 14:42'!testCanvasText	self assert: [ :html | html text: '<' ] gives: '&lt;'.	self assert: [ :html | html text: '>' ] gives: '&gt;'.	self assert: [ :html | html text: '"' ] gives: '&quot;'.	self assert: [ :html | html text: '&' ] gives: '&amp;'.	self		assert: [ :html | html text: '<div title="&amp;">' ]		gives: '&lt;div title=&quot;&amp;amp;&quot;&gt;'! !!WACanvasBrushTest methodsFor: 'testing-encoding' stamp: 'lr 10/28/2007 14:42'!testCanvasWithLineBreaks	self		assert: [ :html | html withLineBreaks: 'abc' ] gives: 'a<br/>b<br/>c'! !!WACanvasBrushTest methodsFor: 'testing-encoding' stamp: 'lr 10/28/2007 14:42'!testCanvasWithLineBreaksAndUrls	self		assert: [ :html | html withLineBreaksAndUrls: '1. This is http://www.seaside.st online.2. This is http://www.squeak.org online.' ]		gives: '1. This is <a href="http://www.seaside.st">http://www.seaside.st</a> online.<br/>2. This is <a href="http://www.squeak.org">http://www.squeak.org</a> online.'! !!WACanvasBrushTest methodsFor: 'testing-encoding' stamp: 'lr 10/28/2007 14:42'!testCanvasWithUrls	self		assert: [ :html | html withUrls: 'This is http://www.seaside.st online.' ]		gives: 'This is <a href="http://www.seaside.st">http://www.seaside.st</a> online.'! !!WACanvasBrushTest methodsFor: 'testing-tags-forms' stamp: 'lr 10/28/2007 14:42'!testCheckboxTag	self		assert: [ :html | html checkbox ]		gives: '<input type="checkbox" class="checkbox"/><input name="1" type="hidden" class="hidden"/>'.	self		assert: [ :html | html checkbox value: true ]		gives: '<input checked="checked" type="checkbox" class="checkbox"/><input name="1" type="hidden" class="hidden"/>'.	self		assert: [ :html | html checkbox value: false; callback: [ :value | ] ]		gives: '<input name="1" type="checkbox" class="checkbox"/><input name="2" type="hidden" class="hidden"/>'.	self		assert: [ :html | html checkbox value: true; callback: [ :value | ] ]		gives: '<input checked="checked" name="1" type="checkbox" class="checkbox"/><input name="2" type="hidden" class="hidden"/>'! !!WACanvasBrushTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testClosingTimes	self assert: [ :html | html div; div ] gives: '<div></div><div></div>'.	self assert: [ :html | html break; div ] gives: '<br/><div></div>'.	self assert: [ :html | html div; break ] gives: '<div></div><br/>'.	self assert: [ :html | html break; break ] gives: '<br/><br/>'.	self assert: [ :html | html div: [ html div ]; div ] gives: '<div><div></div></div><div></div>'.	self assert: [ :html | html div: [ html break ]; div ] gives: '<div><br/></div><div></div>'.	self assert: [ :html | html div: [ html div ]; break ] gives: '<div><div></div></div><br/>'.	self assert: [ :html | html div: [ html break ]; break ] gives: '<div><br/></div><br/>'! !!WACanvasBrushTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testComplexTable	self		assert: [ :html |			html table: [				html tableHead: [					html tableRow: [						html tableHeading: 'h1'.						html tableHeading: 'h2' ] ].				html tableBody: [					html tableRow: [						html tableData: 'd1'.						html tableData: 'd2' ] ].				html tableFoot.				html tableCaption: 'cap' ] ]		gives: '<table><thead><tr><th>h1</th><th>h2</th></tr></thead><tbody><tr><td>d1</td><td>d2</td></tr></tbody><tfoot></tfoot><caption>cap</caption></table>'! !!WACanvasBrushTest methodsFor: 'testing-attributes' stamp: 'lr 10/28/2007 14:42'!testCoreAttributesClass	self		assert: [ :html | html div class: 'foo' ]		gives: '<div class="foo"></div>'.	self		assert: [ :html | html div class: 'foo'; class: 'bar' ]		gives: '<div class="foo bar"></div>'! !!WACanvasBrushTest methodsFor: 'testing-attributes' stamp: 'lr 10/28/2007 14:42'!testCoreAttributesId	self		assert: [ :html | html div id: 'foo' ]		gives: '<div id="foo"></div>'.	self		assert: [ :html | html div id: 'foo'; id: 'bar' ]		gives: '<div id="bar"></div>'.	self		assert: [ :html | self assert: (html div ensureId = 'id1') ]		gives: '<div id="id1"></div>'.	self		assert: [ :html | self assert: (html div id: 'foo'; ensureId) = 'foo' ]		gives: '<div id="foo"></div>'.	self		assert: [ :html | self assert: (html div id: 'foo'; id) = 'foo' ]		gives: '<div id="foo"></div>'.	self		assert: [ :html | self assert: (html div id) isNil ]		gives: '<div></div>'! !!WACanvasBrushTest methodsFor: 'testing-attributes' stamp: 'lr 4/9/2007 18:18'!testCoreAttributesStyle	self		assert: [ :html | html div style: 'left: 0' ]		gives: '<div style="left: 0"></div>'.	self		assert: [ :html | html div style: 'left: 0'; style: 'top: 2' ]		gives: '<div style="left: 0;top: 2"></div>'! !!WACanvasBrushTest methodsFor: 'testing-attributes' stamp: 'lr 4/9/2007 18:18'!testCoreAttributesTitle	self		assert: [ :html | html div title: 'Seaside' ]		gives: '<div title="Seaside"></div>'! !!WACanvasBrushTest methodsFor: 'testing-tags' stamp: 'lr 4/28/2007 18:58'!testEditTag	self		assert: [ :html | html inserted: 'foo' ]		gives: '<ins>foo</ins>'.	self		assert: [ :html | html deleted: 'bar' ]		gives: '<del>bar</del>'! !!WACanvasBrushTest methodsFor: 'testing-attributes' stamp: 'lr 4/9/2007 18:23'!testEventAttributes	self		assert: [ :html | html div onBlur: 1; onBlur: 2 ]		gives: '<div onblur="1;2"></div>'.	self		assert: [ :html | html div onChange: 1; onChange: 2 ]		gives: '<div onchange="1;2"></div>'.	self		assert: [ :html | html div onClick: 1; onClick: 2 ]		gives: '<div onclick="1;2"></div>'.	self		assert: [ :html | html div onDoubleClick: 1; onDoubleClick: 2 ]		gives: '<div ondblclick="1;2"></div>'! !!WACanvasBrushTest methodsFor: 'testing' stamp: 'lr 4/9/2007 18:28'!testExtendedNesting	self assert: [ :html | html div: nil ] gives: '<div></div>'.	self assert: [ :html | html div: #( 1 $a ) ] gives: '<div>1a</div>'.	self assert: [ :html | html div: [ html span ] ] gives: '<div><span></span></div>'! !!WACanvasBrushTest methodsFor: 'testing-tags' stamp: 'lr 4/28/2007 19:01'!testFieldSetTag	self		assert: [ :html | html fieldSet: 'foo' ]		gives: '<fieldset>foo</fieldset>'.	self		assert: [ :html | html fieldSet legend: 'bar'; with: 'zork' ]		gives: '<fieldset><legend>bar</legend>zork</fieldset>'! !!WACanvasBrushTest methodsFor: 'testing-tags' stamp: 'lr 6/6/2007 14:00'!testHeadingTag	self		assert: [ :html | html heading ]		gives: '<h1></h1>'.	self		assert: [ :html | html heading level: 2; with: 'foo' ]		gives: '<h2>foo</h2>'.	self		assert: [ :html | html heading level: 0; with: 'foo' ]		gives: '<h1>foo</h1>'.	self		assert: [ :html | html heading level: 7; with: 'foo' ]		gives: '<h6>foo</h6>'! !!WACanvasBrushTest methodsFor: 'testing-tags' stamp: 'lr 5/23/2007 12:10'!testHorizontalRuleTag	self		assert: [ :html | html horizontalRule ]		gives: '<hr/>'! !!WACanvasBrushTest methodsFor: 'testing-tags-forms' stamp: 'lr 10/28/2007 14:42'!testImageButton	self		assert: [ :html | html imageButton ]		gives: '<input type="image" class="image"/>'! !!WACanvasBrushTest methodsFor: 'testing-attributes' stamp: 'lr 10/28/2007 14:42'!testKeyboardAttributes	self		assert: [ :html | html anchor accessKey: $a ]		gives: '<a accesskey="a" href="javascript:void(0)"></a>'.	self		assert: [ :html | html anchor tabIndex: 3 ]		gives: '<a tabindex="3" href="javascript:void(0)"></a>'! !!WACanvasBrushTest methodsFor: 'testing-tags' stamp: 'lr 4/28/2007 19:03'!testLabelTag	self		assert: [ :html | html label: 'foo' ]		gives: '<label>foo</label>'.	self		assert: [ :html | html label for: 'bar'; with: 'zork' ]		gives: '<label for="bar">zork</label>'! !!WACanvasBrushTest methodsFor: 'testing-tags-forms' stamp: 'lr 6/6/2007 19:31'!testMultiSelectTag	self		assert: [ :html | html multiSelect ]		gives: '<select multiple="multiple" name="1"></select>'.	self		assert: [ :html | html multiSelect list: #(1 2) ]		gives: '<select multiple="multiple" name="1"><option>1</option><option>2</option></select>'.	self		assert: [ :html | html multiSelect list: #(1 2); labels: [ :v | 2 * v ] ]		gives: '<select multiple="multiple" name="1"><option>2</option><option>4</option></select>'.	self		assert: [ :html | html multiSelect list: #(1 2); enabled: [ :v | v even ] ]		gives: '<select multiple="multiple" name="1"><option disabled="disabled">1</option><option>2</option></select>'.	self		assert: [ :html | html multiSelect list: #(1 2); callback: [ :v | ] ]		gives: '<input name="1" type="hidden" class="hidden"/><select multiple="multiple" name="2"><option value="3">1</option><option value="4">2</option></select><input name="5" type="hidden" class="hidden"/>'! !!WACanvasBrushTest methodsFor: 'testing-tags' stamp: 'lr 6/6/2007 13:54'!testOrderedListTag	self		assert: [ :html | html orderedList ]		gives: '<ol></ol>'.	self		assert: [ :html | html orderedList add: 1 ]		gives: '<ol><li>1</li></ol>'.	self		assert: [ :html | html orderedList addAll: #( 1 2 ) ]		gives: '<ol><li>1</li><li>2</li></ol>'.	self		assert: [ :html | html orderedList list: #( 1 2 ) ]		gives: '<ol><li>1</li><li>2</li></ol>'.	self		assert: [ :html | html orderedList list: #( 1 2 ); with: [ html listItem: 3 ] ]		gives: '<ol><li>1</li><li>2</li><li>3</li></ol>'.	self		assert: [ :html | html orderedList add: 2; labels: [ :e | 2 * e ] ]		gives: '<ol><li>4</li></ol>'.	self		assert: [ :html | html orderedList add: 2; labels: [ :e | 2 * e ]; with: [ html listItem: 5 ] ]		gives: '<ol><li>4</li><li>5</li></ol>'! !!WACanvasBrushTest methodsFor: 'testing-tags' stamp: 'lr 4/28/2007 18:55'!testParagraphTag	self		assert: [ :html | html paragraph ]		gives: '<p></p>'.	self		assert: [ :html | html paragraph: 'foo' ]		gives: '<p>foo</p>'! !!WACanvasBrushTest methodsFor: 'testing-tags' stamp: 'lr 6/5/2009 17:26'!testParameterTag	self		assert: [ :html | html parameter ]		gives: '<param></param>'.	self		assert: [ :html | html parameter name: 'sea' ]		gives: '<param name="sea"></param>'.	self		assert: [ :html | html parameter value: 'side' ]		gives: '<param value="side"></param>'.	self		assert: [ :html | html parameter name: 'sea'; value: 'side' ]		gives: '<param name="sea" value="side"></param>'! !!WACanvasBrushTest methodsFor: 'testing-tags-forms' stamp: 'lr 4/11/2008 09:15'!testPasswordInput	self		assert: [ :html | html passwordInput ]		gives: '<input type="password" class="password"/>'.	self		assert: [ :html | html passwordInput callback: [ :value | ] ]		gives: '<input name="1" type="password" class="password"/>'.	self		assert: [ :html | html passwordInput: 'foo' ]		gives: '<input value="foo" type="password" class="password"/>'.	self		assert: [ :html | html passwordInput value: 'bar' ]		gives: '<input value="bar" type="password" class="password"/>'.	self		assert: [ :html | html passwordInput text: 'zork' ]		gives: '<input value="zork" type="password" class="password"/>'.	self		assert: [ :html | html passwordInput callback: [ :value | ]; value: 'foo bar&zork' ]		gives: '<input name="1" value="foo bar&amp;zork" type="password" class="password"/>'! !!WACanvasBrushTest methodsFor: 'testing-tags' stamp: 'pmm 9/22/2007 07:40'!testScriptTag	self		assert: [ :html | html script: 'alert("<foo>")' ]		gives: '<script type="text/javascript">/*<!![CDATA[*/alert("<foo>")/*]]>*/</script>'.	self		assert: [ :html | html script defer; with: 'alert("<foo>")' ]		gives: '<script defer="defer" type="text/javascript">/*<!![CDATA[*/alert("<foo>")/*]]>*/</script>'! !!WACanvasBrushTest methodsFor: 'testing-tags-forms' stamp: 'lr 6/6/2007 18:52'!testSelectTag	self		assert: [ :html | html select ]		gives: '<select name="1"></select>'.	self		assert: [ :html | html select list: #(1 2) ]		gives: '<select name="1"><option>1</option><option>2</option></select>'.	self		assert: [ :html | html select list: #(1 2); labels: [ :v | 2 * v ] ]		gives: '<select name="1"><option>2</option><option>4</option></select>'.	self		assert: [ :html | html select list: #(1 2); enabled: [ :v | v even ] ]		gives: '<select name="1"><option disabled="disabled">1</option><option>2</option></select>'.	self		assert: [ :html | html select list: #(1 2); callback: [ :v | ] ]		gives: '<select name="1"><option value="2">1</option><option value="3">2</option></select>'! !!WACanvasBrushTest methodsFor: 'testing-tags-forms' stamp: 'lr 4/11/2008 09:07'!testSubmitButton	self		assert: [ :html | html submitButton ]		gives: '<input type="submit" class="submit"/>'.	self		assert: [ :html | html submitButton callback: [ ] ]		gives: '<input name="1" type="submit" class="submit"/>'.	self		assert: [ :html | html submitButton on: #value of: self ]		gives: '<input value="Value" name="1" type="submit" class="submit"/>'.	self		assert: [ :html | html submitButton: 'foo' ]		gives: '<input value="foo" type="submit" class="submit"/>'.	self		assert: [ :html | html submitButton text: 'bar' ]		gives: '<input value="bar" type="submit" class="submit"/>'.	self		assert: [ :html | html submitButton with: 'zork' ]		gives: '<input value="zork" type="submit" class="submit"/>'! !!WACanvasBrushTest methodsFor: 'testing-tags-forms' stamp: 'pmm 10/2/2007 06:53'!testSymbolRendering	self		assert: [ :html | html div id: #aSymbol; with: #aSecondSymbol ]		gives: '<div id="aSymbol">aSecondSymbol</div>'.	self		assert: [ :html | html div: [ html text: #aSecondSymbol ] ]		gives: '<div>aSecondSymbol</div>'.	self		assert: [ :html | html div: [ html render: #aSecondSymbol ] ]		gives: '<div>aSecondSymbol</div>'! !!WACanvasBrushTest methodsFor: 'testing-tags-forms' stamp: 'lr 4/14/2008 21:38'!testTextArea	self		assert: [ :html | html textArea ]		gives: '<textarea></textarea>'.	self		assert: [ :html | html textArea columns: 4 ]		gives: '<textarea cols="4"></textarea>'.	self		assert: [ :html | html textArea rows: 40 ]		gives: '<textarea rows="40"></textarea>'.	self		assert: [ :html | html textArea callback: [ :value | ] ]		gives: '<textarea name="1"></textarea>'.	self		assert: [ :html | html textArea: 'foo bar&zork' ]		gives: '<textarea>foo bar&amp;zork</textarea>'.	self		assert: [ :html | html textArea text: 'foo bar&zork' ]		gives: '<textarea>foo bar&amp;zork</textarea>'.	self		assert: [ :html | html textArea value: 'foo bar&zork' ]		gives: '<textarea>foo bar&amp;zork</textarea>'.	self		assert: [ :html | html textArea with: 'foo bar&zork' ]		gives: '<textarea>foo bar&amp;zork</textarea>'.	self		assert: [ :html | html textArea callback: [ :value | ]; with: 'foo bar&zork' ]		gives: '<textarea name="1">foo bar&amp;zork</textarea>'! !!WACanvasBrushTest methodsFor: 'testing-tags-forms' stamp: 'lr 4/11/2008 09:14'!testTextInput	self		assert: [ :html | html textInput ]		gives: '<input type="text" class="text"/>'.	self		assert: [ :html | html textInput callback: [ :value | ] ]		gives: '<input name="1" type="text" class="text"/>'.	self		assert: [ :html | html textInput: 'foo' ]		gives: '<input value="foo" type="text" class="text"/>'.	self		assert: [ :html | html textInput value: 'bar' ]		gives: '<input value="bar" type="text" class="text"/>'.	self		assert: [ :html | html textInput text: 'zork' ]		gives: '<input value="zork" type="text" class="text"/>'.	self		assert: [ :html | html textInput callback: [ :value | ]; value: 'foo bar&zork' ]		gives: '<input name="1" value="foo bar&amp;zork" type="text" class="text"/>'! !!WACanvasBrushTest methodsFor: 'testing-tags' stamp: 'lr 6/6/2007 13:55'!testUnorderedListTag	self		assert: [ :html | html unorderedList ]		gives: '<ul></ul>'.	self		assert: [ :html | html unorderedList add: 1 ]		gives: '<ul><li>1</li></ul>'.	self		assert: [ :html | html unorderedList addAll: #( 1 2 ) ]		gives: '<ul><li>1</li><li>2</li></ul>'.	self		assert: [ :html | html unorderedList list: #( 1 2 ) ]		gives: '<ul><li>1</li><li>2</li></ul>'.	self		assert: [ :html | html unorderedList list: #( 1 2 ); with: [ html listItem: 3 ] ]		gives: '<ul><li>1</li><li>2</li><li>3</li></ul>'.	self		assert: [ :html | html unorderedList add: 2; labels: [ :e | 2 * e ] ]		gives: '<ul><li>4</li></ul>'.	self		assert: [ :html | html unorderedList add: 2; labels: [ :e | 2 * e ]; with: [ html listItem: 5 ] ]		gives: '<ul><li>4</li><li>5</li></ul>'! !!WAConfigurationTest methodsFor: 'tests' stamp: 'lr 10/28/2007 14:42'!testLinearization	"from http://www.webcom.com/haahr/dylan/linearization-oopsla96.html"	| root boat dayBoat wheelBoat engineLess pedalWheelBoat smallMultihull smallCatamaran pedalo |	root := WAUserConfiguration new.	boat := WAUserConfiguration new addAncestor: root; yourself.	dayBoat := WAUserConfiguration new addAncestor: boat; yourself.	wheelBoat := WAUserConfiguration new addAncestor: boat; yourself.	engineLess := WAUserConfiguration new addAncestor: dayBoat; yourself.	pedalWheelBoat := WAUserConfiguration new addAncestor: engineLess; addAncestor: wheelBoat; yourself.	smallMultihull := WAUserConfiguration new addAncestor: dayBoat; yourself.	smallCatamaran := WAUserConfiguration new addAncestor: smallMultihull; yourself.	pedalo := WAUserConfiguration new addAncestor: pedalWheelBoat; addAncestor: smallCatamaran; yourself.	self assert: pedalWheelBoat allAncestors = (Array with: engineLess with: dayBoat with: wheelBoat with: boat with: root).	self assert: smallCatamaran allAncestors = (Array with: smallMultihull with: dayBoat with: boat with: root).	self assert: pedalo allAncestors = ((Array with: pedalWheelBoat with: engineLess with: smallCatamaran with: smallMultihull), (Array with: dayBoat with: wheelBoat with: boat with: root))! !!WADictionaryTest methodsFor: 'running' stamp: 'lr 7/12/2007 13:21'!setUp	super setUp.	dictionary := WASmallDictionary new! !!WADictionaryTest methodsFor: 'testing-enumerating' stamp: 'lr 8/20/2007 13:47'!testAssociations	dictionary at: '1' put: 'foo'; at: '2' put: 'bar'.	self assert: dictionary associations = (Array with: '1' -> 'foo' with: '2' -> 'bar')! !!WADictionaryTest methodsFor: 'testing-enumerating' stamp: 'lr 10/28/2007 14:42'!testAssociationsDo	dictionary associationsDo: [ :key :valye |		self assert: false ].	dictionary at: '1' put: 'foo'; at: '2' put: 'bar'.	dictionary associationsDo: [ :assoc |		self assert: ((assoc key = '1' and: [ assoc value = 'foo'])			or: [ assoc key = '2' and: [ assoc value = 'bar' ] ]) ]! !!WADictionaryTest methodsFor: 'testing' stamp: 'lr 7/12/2007 13:19'!testAt	self should: [ dictionary at: '1' ] raise: Error.	dictionary at: '1' put: 'foo'.	self assert: (dictionary at: '1') = 'foo'! !!WADictionaryTest methodsFor: 'testing' stamp: 'lr 7/9/2007 10:47'!testAtIfAbsent	self assert: (dictionary at: '1' ifAbsent: [ 'foo' ]) = 'foo'.	dictionary at: '1' put: 'bar'.	self assert: (dictionary at: '1' ifAbsent: [ 'foo' ]) = 'bar'! !!WADictionaryTest methodsFor: 'testing' stamp: 'lr 7/9/2007 10:50'!testAtIfAbsentPut	self assert: (dictionary at: '1' ifAbsentPut: [ 'foo' ]) = 'foo'.	self assert: (dictionary at: '1' ifAbsentPut: [ 'bar' ]) = 'foo'! !!WADictionaryTest methodsFor: 'testing' stamp: 'lr 7/9/2007 10:51'!testAtIfPresent	dictionary at: '1' put: 'foo'.	self assert: (dictionary at: '1' ifPresent: [ :v | v , 'bar' ]) = 'foobar'.	self assert: (dictionary at: '2' ifPresent: [ :v | v , 'bar' ]) isNil! !!WADictionaryTest methodsFor: 'testing' stamp: 'lr 7/9/2007 10:48'!testAtPut	dictionary at: '1' put: 'foo'.	self assert: (dictionary at: '1') = 'foo'.	dictionary at: '1' put: 'bar'.	self assert: (dictionary at: '1') = 'bar'! !!WADictionaryTest methodsFor: 'testing-testing' stamp: 'lr 8/17/2007 11:55'!testIncludesKey	self deny: (dictionary includesKey: '1').	dictionary at: '1' put: 'foo'.	self assert: (dictionary includesKey: '1')! !!WADictionaryTest methodsFor: 'testing-testing' stamp: 'lr 7/9/2007 10:53'!testIsEmpty	self assert: dictionary isEmpty.	dictionary at: '1' put: 'foo'.	self deny: dictionary isEmpty! !!WADictionaryTest methodsFor: 'testing-enumerating' stamp: 'lr 7/9/2007 10:52'!testKeys	dictionary at: '1' put: 'foo'; at: '2' put: 'bar'.	self assert: dictionary keys = #( '1' '2' )! !!WADictionaryTest methodsFor: 'testing-enumerating' stamp: 'lr 10/28/2007 14:42'!testKeysAndValuesDo	dictionary keysAndValuesDo: [ :key :valye |		self assert: false ].	dictionary at: '1' put: 'foo'; at: '2' put: 'bar'.	dictionary keysAndValuesDo: [ :key :value |		self assert: ((key = '1' and: [ value = 'foo'])			or: [ key = '2' and: [ value = 'bar' ] ]) ]! !!WADictionaryTest methodsFor: 'testing-enumerating' stamp: 'lr 8/17/2007 11:54'!testKeysDo	| result |	result := OrderedCollection new.	dictionary at: '1' put: 'foo'; at: '2' put: 'bar'.	dictionary keysDo: [ :each | result add: each ].	self assert: result asArray = #( '1' '2' )! !!WADictionaryTest methodsFor: 'testing' stamp: 'lr 7/12/2007 13:20'!testRemoveKey	dictionary at: '1' put: 'foo'.	self assert: (dictionary removeKey: '1') = 'foo'.	self should: [ dictionary removeKey: '1' ] raise: Error! !!WADictionaryTest methodsFor: 'testing' stamp: 'lr 7/9/2007 10:51'!testRemoveKeyIfAbsent	dictionary at: '1' put: 'foo'.	self assert: (dictionary removeKey: '1' ifAbsent: [ 'bar' ]) = 'foo'.	self assert: (dictionary removeKey: '1' ifAbsent: [ 'bar' ]) = 'bar'! !!WADictionaryTest methodsFor: 'testing' stamp: 'lr 7/9/2007 10:53'!testSize	self assert: dictionary size = 0.	dictionary at: '1' put: 'foo'.	self assert: dictionary size = 1.	dictionary at: '2' put: 'bar'.	self assert: dictionary size = 2! !!WADictionaryTest methodsFor: 'testing-enumerating' stamp: 'lr 7/9/2007 10:54'!testValues	dictionary at: '1' put: 'foo'; at: '2' put: 'bar'.	self assert: dictionary values = #( 'foo' 'bar' )! !!WADictionaryTest methodsFor: 'testing-enumerating' stamp: 'lr 8/17/2007 11:54'!testValuesDo	| result |	result := OrderedCollection new.	dictionary at: '1' put: 'foo'; at: '2' put: 'bar'.	dictionary valuesDo: [ :each | result add: each ].	self assert: result asArray = #( 'foo' 'bar' )! !!WADispatcherTest methodsFor: 'private' stamp: 'pmm 4/6/2007 13:33'!dispatcher: aDispatcher hasSameEntryPointsAs: anotherDispatcher	"VW does not have Set >> #=	OMFG!! SRSLY? wtf...?"	| aSet anotherSet |	aSet := aDispatcher entryPoints keys.	anotherSet := anotherDispatcher entryPoints keys.	aSet == anotherSet ifTrue: [^ true].	(aSet class == anotherSet class) ifFalse: [^ false]. "not sure this is really clever but ..."	aSet size = anotherSet size ifFalse: [^ false].	^aSet allSatisfy: [ :each | (anotherSet includes: each) ]! !!WADispatcherTest methodsFor: 'running' stamp: 'lr 10/28/2007 14:42'!setUp	"The statement below makes sure that the 'files' entry is registered	into the default dispatcher before starting this test.	This may be needed after loading Seaside in a stock VW image	depending on the order the unit tests are executed.	Without it, the WADispatcher tests that need the 'files' entry may fail in VW	namely #testAlternateFiles and #testDefaultFiles "	WAFileHandler default.	baseName := SeasidePlatformSupport defaultDispatcherName.	alternateName := 'seaside/stream'.	defaultDispatcher := WADispatcher default.	alternateDispatcher := defaultDispatcher copy setName: alternateName.	shortDispatcher := defaultDispatcher copy setName: ''.	defaultDispatcher addDependent: self! !!WADispatcherTest methodsFor: 'running' stamp: 'lr 10/28/2007 14:42'!tearDown	defaultDispatcher removeDependent: self! !!WADispatcherTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testAlternateCloning	| originalHandler |	self deny: alternateDispatcher == defaultDispatcher.	self		assert: (self dispatcher: alternateDispatcher hasSameEntryPointsAs: defaultDispatcher).	alternateDispatcher entryPoints		do: [:handler |			originalHandler := defaultDispatcher entryPointAt: handler name.			self assert: handler class == originalHandler class.			self deny: handler == originalHandler.			handler isDispatcher				ifTrue: [self						assert: (self dispatcher: handler hasSameEntryPointsAs: originalHandler)]]! !!WADispatcherTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testAlternateConfig	| app originalApp |	app := alternateDispatcher entryPointAt: 'config'.	originalApp := defaultDispatcher entryPointAt: 'config'.	self assert: app class == WAApplication.	self assert: app isApplication.	self deny: app isDispatcher.	self deny: app parent isNil.	self assert: app name = 'config'.	self assert: app basePath = ('/' , alternateDispatcher name , '/config').	self deny: app == originalApp.	self assert: app name = originalApp name.	self assert: app parent == alternateDispatcher.	self assert: originalApp parent == defaultDispatcher! !!WADispatcherTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testAlternateCounterDirect	| app originalApp |	app := alternateDispatcher entryPointAt: 'examples/counter'.	originalApp := defaultDispatcher entryPointAt: 'examples/counter'.	self assert: app name = 'counter'.	self assert: app parent name = 'examples'.	self assert: app basePath = ('/' , alternateDispatcher name , '/examples/counter').	self deny: app == originalApp.	self assert: app name = originalApp name.	self deny: app parent == originalApp parent.	self assert: app parent name = originalApp parent name.	self deny: app parent parent == originalApp parent parent.	self deny: app parent parent name = originalApp parent parent name.	self assert: app parent parent == alternateDispatcher.	self assert: originalApp parent parent == defaultDispatcher! !!WADispatcherTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testAlternateFiles	| app originalApp |	app := alternateDispatcher entryPointAt: 'files'.	originalApp := defaultDispatcher entryPointAt: 'files'.	self assert: app class == WAFileHandler.	self deny: app isApplication.	self deny: app isDispatcher.	self deny: app parent isNil.	self assert: app name = 'files'.	self assert: app basePath = ('/' , alternateDispatcher name , '/files').	self deny: app == originalApp.	self deny: app libraries == originalApp libraries.	self assert: app name = originalApp name.	self assert: app parent == alternateDispatcher.	self assert: originalApp parent == defaultDispatcher! !!WADispatcherTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testAlternateRoot	| app |	app := alternateDispatcher.	self assert: app class == WADispatcher.	self deny: app isApplication.	self assert: app isDispatcher.	self assert: app isRoot.	self assert: app parent isNil.	self assert: app name = alternateName! !!WADispatcherTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testAlternateTests	| app originalApp |	app := alternateDispatcher entryPointAt: 'tests'.	originalApp := defaultDispatcher entryPointAt: 'tests'.	self assert: app class == WADispatcher.	self deny: app isApplication.	self assert: app isDispatcher.	self deny: app isRoot.	self deny: app parent isNil.	self assert: app name = 'tests'.	self assert: app basePath = ('/' , alternateDispatcher name , '/tests').	self deny: app == originalApp.	self assert: app name = originalApp name.	self assert: app parent == alternateDispatcher.	self assert: originalApp parent == defaultDispatcher! !!WADispatcherTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testDefaultConfig	| app |	app := defaultDispatcher entryPointAt: 'config'.	self assert: app class == WAApplication.	self assert: app isApplication.	self deny: app isDispatcher.	self deny: app parent isNil.	self assert: app name = 'config'.	self assert: app basePath = ('/' , baseName , '/config')! !!WADispatcherTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testDefaultCounterDirect	| app |	app := defaultDispatcher entryPointAt: 'examples/counter'.	self assert: app class == WAApplication.	self assert: app isApplication.	self deny: app isDispatcher.	self deny: app parent isNil.	self assert: app name = 'counter'.	self assert: app parent name = 'examples'.	self assert: app basePath = ('/' , baseName , '/examples/counter')! !!WADispatcherTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testDefaultCounterNavigate	| app |	app := defaultDispatcher entryPointAt: 'examples'.	self assert: app class == WADispatcher.	self assert: app isDispatcher.	self deny: app isRoot.	self deny: app isApplication.	self deny: app parent isNil.	self assert: app name = 'examples'.	self assert: app basePath = ('/' , baseName , '/examples').	app := app entryPointAt: 'counter'.	self assert: app class == WAApplication.	self assert: app isApplication.	self deny: app isDispatcher.	self deny: app parent isNil.	self assert: app name = 'counter'.	self assert: app parent name = 'examples'.	self assert: app basePath = ('/' , baseName , '/examples/counter')! !!WADispatcherTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testDefaultFiles	| app |	app := defaultDispatcher entryPointAt: 'files'.	self assert: app class == WAFileHandler.	self deny: app isDispatcher.	self deny: app isApplication.	self deny: app parent isNil.	self assert: app name = 'files'.	self assert: app basePath = ('/' , baseName , '/files')! !!WADispatcherTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testDefaultRoot	| app |	app := defaultDispatcher.	self assert: app == WADispatcher default.	self assert: app class == WADispatcher.	self assert: app isDispatcher.	self assert: app isRoot.	self deny: app isApplication.	self assert: app parent isNil.	self assert: app name = baseName.	self assert: app basePath = ('/' , baseName)! !!WADispatcherTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testDefaultTests	| app |	app := defaultDispatcher entryPointAt: 'tests'.	self assert: app class == WADispatcher.	self assert: app isDispatcher.	self deny: app isRoot.	self deny: app isApplication.	self deny: app parent isNil.	self assert: app name = 'tests'.	self assert: app basePath = ('/' , baseName , '/tests')! !!WADispatcherTest methodsFor: 'testing' stamp: 'mb 2/17/2007 23:49'!testRootDispatcher	| app |	app := defaultDispatcher entryPointAt: 'examples/counter'.	self deny: app isRoot.	self deny: app parent isRoot.	self assert: app parent parent isRoot.	self assert: app rootDispatcher == defaultDispatcher! !!WADispatcherTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testRootDispatcherChange	| app before old |	before := defaultDispatcher version.	app := defaultDispatcher entryPointAt: 'examples/counter'.	old := app preferenceAt: #sessionExpirySeconds.	app preferenceAt: #sessionExpirySeconds put: old.	self deny: defaultDispatcher version = before.	before := defaultDispatcher version.	app := defaultDispatcher entryPointAt: 'examples/counter'.	app addLibrary: Object.	app removeLibrary: Object.	self deny: defaultDispatcher version = before.	before := defaultDispatcher version.	app := defaultDispatcher defaultName: defaultDispatcher defaultName.	self deny: defaultDispatcher version = before! !!WADispatcherTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testRootDispatcherDependency	| app old |	lastUpdate := nil.	app := defaultDispatcher entryPointAt: 'examples/counter'.	old := app preferenceAt: #sessionExpirySeconds.	app preferenceAt: #sessionExpirySeconds put: old.	self deny: lastUpdate isNil.	self assert: lastUpdate class == TimeStamp.	defaultDispatcher removeDependent: self! !!WADispatcherTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testShortTests	| app |	app := shortDispatcher entryPointAt: 'tests'.	self assert: shortDispatcher basePath = ''.	self assert: app basePath = ('/tests')! !!WADispatcherTest methodsFor: 'changing' stamp: 'mb 2/17/2007 23:48'!update: anAspectSymbol	lastUpdate := defaultDispatcher lastUpdate! !!WADocumentHandlerTest methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!assertHttpResponseFrom: aResponse matches: aHandler	self assert: aResponse status = 200.	self assert: aResponse contents contents = aHandler document.	self assert: aResponse contentType = aHandler mimeType.	self assert: aResponse contents contents size = aHandler document size.	self assert: aResponse cookies isEmpty! !!WADocumentHandlerTest methodsFor: 'private' stamp: 'pmm 10/20/2007 22:34'!createAndVerifyBinaryDocumentNamed: aFilename hasAttachement: aHttpHeaderValue	self		createAndVerifyDocumentNamed: aFilename		content: WADispatcherFiles default logoPng		mimeType: 'image/jpeg'		hasAttachement: aHttpHeaderValue! !!WADocumentHandlerTest methodsFor: 'private' stamp: 'pmm 10/31/2007 20:28'!createAndVerifyDocumentNamed: aFilename content: anObject mimeType: aMimeTypeString hasAttachement: aHttpHeaderValue	| handler response |	handler := WADocumentHandler		document: anObject		mimeType: aMimeTypeString		fileName: aFilename.	self assert: handler document = anObject.	response := handler response.	self assert: (self headerAt: 'Expires' forResponse: response) notNil.	self assert: (self headerAt: 'Content-Disposition' forResponse: response) = aHttpHeaderValue.	self assertHttpResponseFrom: response matches: handler! !!WADocumentHandlerTest methodsFor: 'private' stamp: 'pmm 10/20/2007 22:33'!createAndVerifyTextDocumentNamed: aFilename hasAttachement: aHttpHeaderValue	self		createAndVerifyDocumentNamed: aFilename		content: WADispatcherFiles default mainCss		mimeType: 'text/css'		hasAttachement: aHttpHeaderValue! !!WADocumentHandlerTest methodsFor: 'private' stamp: 'pmm 10/20/2007 22:22'!headerAt: aString forResponse: aResponse	| header |	header := aResponse headers		detect: [ :each | each key = aString]		ifNone: [ ^nil ].	^header value! !!WADocumentHandlerTest methodsFor: 'testing' stamp: 'pmm 10/20/2007 22:35'!testByteArray	self		createAndVerifyBinaryDocumentNamed: nil		hasAttachement: nil.	self		createAndVerifyBinaryDocumentNamed: 'logo.png'		hasAttachement: 'attachment; filename="logo.png"'! !!WADocumentHandlerTest methodsFor: 'testing' stamp: 'pmm 10/20/2007 22:34'!testString	self		createAndVerifyTextDocumentNamed: nil		hasAttachement: nil.	self		createAndVerifyTextDocumentNamed: 'main.css'		hasAttachement: 'attachment; filename="main.css"'! !!WAKomDocumentHandlerTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!assertHttpResponseFrom: aResponse matches: aHandler	| httpResponse |	super assertHttpResponseFrom: aResponse matches: aHandler.	httpResponse := WAKom basicNew convertResponse: aResponse.	self assert: httpResponse status == #ok.	self assert: httpResponse contents contents = aHandler document.	self assert: httpResponse contentType = aHandler mimeType.	self assert: httpResponse contentLength = aHandler document size.	httpResponse fields keysAndValuesDo: [ :key :value |		self assert: (self headerAt: key forResponse: aResponse) = value ].	aResponse headers do: [:each |		self assert: (httpResponse fields at: each key) = each value].	self assert: httpResponse cookies isEmpty! !!WADynamicVariableTest methodsFor: 'private' stamp: 'pmm 10/10/2007 21:30'!assertValue: anObject	| value |	value := WADemoVariable value.	self assert: value = anObject! !!WADynamicVariableTest methodsFor: 'testing' stamp: 'pmm 10/10/2007 21:29'!testWithValue	| value |	value := 'value'.	WADemoVariable		use: value		during: [ self assertValue: value ]! !!WADynamicVariableTest methodsFor: 'testing' stamp: 'pmm 10/10/2007 21:29'!testWithoutValue	self assertValue: WADemoVariable defaultValue! !!WAEncoderTest methodsFor: 'private' stamp: 'lr 4/7/2007 19:36'!assert: aString encoder: aClass gives: anEncodedString	| stream |	stream := WriteStream on: String new.	(aClass on: stream) nextPutAll: aString.	self assert: stream contents = anEncodedString! !!WAEncoderTest methodsFor: 'testing' stamp: 'lr 4/7/2007 19:38'!testEncodedHtml	self assert: 'Seaside' encoder: WAHtmlEncoder gives: 'Seaside'.	self assert: '<div id="&amp;">' encoder: WAHtmlEncoder gives: '&lt;div id=&quot;&amp;amp;&quot;&gt;'! !!WAEncoderTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testEncodedLatin1Url	self		assert: (String with: (Character value: 233) with: (Character value: 228))		encoder: WAUrlEncoder		gives: '%E9%E4'! !!WAEncoderTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testEncodedUnicode	"this makes sure the encoder doesn't fall on the nose with unicode"	| leading hiraA hiraO hiraAO zero ea |	ea := String with: (Character value: 233) with: (Character value: 228).	self		assert: ea		encoder: WAHtmlEncoder		gives: ea.	SeasidePlatformSupport isSqueak		ifTrue: [			"Make Japanese String from unicode. see http://www.unicode.org/charts/PDF/U3040.pdf"		     leading := (Smalltalk classNamed: #JapaneseEnvironment) leadingChar.			hiraA := (Character leadingChar: leading code: 16r3042) displayString.  "HIRAGANA LETTER A"			hiraO := (Character leadingChar: leading code: 16r304A) displayString.  "HIRAGANA LETTER O" ]		ifFalse: [			hiraA := (Character value: 16r3042) displayString.  "HIRAGANA LETTER A"			hiraO := (Character value: 16r304A) displayString.  "HIRAGANA LETTER O" ].	hiraAO := hiraA, hiraO.	self		assert: hiraA		encoder: WAHtmlEncoder		gives: hiraA.	self		assert: hiraO		encoder: WAHtmlEncoder		gives: hiraO.	self		assert: hiraAO		encoder: WAHtmlEncoder		gives: hiraAO.	"The Supplementary Multilingual Plane (SMP: Plane 1, U+010000 - U+01FFFF)	http://www.unicode.org/charts/PDF/U10140.pdf	Ancient Greek Zero Sign"	zero := (Character value: 16r1018A) displayString.	self		assert: zero		encoder: WAHtmlEncoder		gives: zero! !!WAEncoderTest methodsFor: 'testing' stamp: 'lr 5/9/2009 10:15'!testEncodedUrl	self assert: 'Seaside Aubergines' encoder: WAUrlEncoder gives: 'Seaside%20Aubergines'.	self assert: 'www.seaside.st' encoder: WAUrlEncoder gives: 'www.seaside.st'.	self assert: '~seaside-info_' encoder: WAUrlEncoder gives: '~seaside-info_'.	self assert: 'http://www.seaside.st?foo=1&bar=2' encoder: WAUrlEncoder gives: 'http%3A%2F%2Fwww.seaside.st%3Ffoo%3D1%26bar%3D2'.	self assert: 'a%' encoder: WAUrlEncoder gives: 'a%25'.	self assert: '' encoder: WAUrlEncoder gives: '%0D'! !!WAEncoderTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testEncodedUtf8Url	"this tests url encoding of strings that are already utf8"	"'übertriñgé' isoToUtf8"	self assert: #(195 188 98 101 114 116 114 105 195 177 103 195 169) asByteArray displayString encoder: WAUrlEncoder gives: '%C3%BCbertri%C3%B1g%C3%A9'! !!WAFileLibraryTest methodsFor: 'utilities' stamp: 'lr 10/28/2007 14:42'!assertFile: aString contentType: aMimeType handler: aHandler symbol: aSymbol library: aLibrary	| request response |	request := WARequest		method: 'GET'		url: '/seaside/files/', aLibrary name ,'/', aString		headers: Dictionary new		fields: Dictionary new		cookies: Dictionary new.	response := aHandler handleRequest: request.	self assert: response status = 200.	self assert: response contentType = aMimeType.	self assert: response stream contents = (aLibrary perform: aSymbol)! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'pmm 9/13/2007 22:26'!testAsFileName	| library |	library := WAFileLibraryDemo new.	self assert: (library asFilename: #mainJs) = 'main.js'.	self assert: (library asFilename: #style2Css) = 'style2.css'.	self assert: (library asFilename: #index) = 'index'! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'pmm 7/16/2007 20:13'!testAsSelector	self assert: (WAFileLibrary asSelector: 'main.css') = #mainCss.	self assert: (WAFileLibrary asSelector: 'main.js') = #mainJs.	self assert: (WAFileLibrary asSelector: 'style-2.css') = #style2Css.	self assert: (WAFileLibrary asSelector: 'style_2.css') = #style2Css! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testAsSelectorCapitalized	| library |	library := WAFileLibraryDemo new.	self assert: (library asSelector: 'COMMENTS.TXT') = #COMMENTSTxt.	self assert: (library asFilename: #COMMENTSTxt) = 'COMMENTS.txt'! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testAsSelectorFunky	self assert: (WAFileLibrary asSelector: '1_2$3-4/5()6!!7   8.9.test 1 2 3 me 4 5 6 .txt') = #test123me456Txt! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testAsSelectorLeadingDigits	| library |	library := WAFileLibraryDemo new.	self assert: (library asSelector: '1readme.txt') = #readmeTxt.	self assert: (library asSelector: '123456789readme.txt') = #readmeTxt.	self assert: (library asSelector: '123456789readme89.txt') = #readme89Txt! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testCompileByteArray	| library data file first second |	library := WAFileLibraryDemo new.	self deny: (library class selectors includes: #demoJpeg).	data := (1 to: 255) asByteArray.	file := WAFile new		contentType: 'image/jpeg';		contents: data;		fileName: 'demo.jpeg';		yourself.	library addFile: file.	self assert: (library class selectors includes: #demoJpeg).	first := library perform: #demoJpeg.	self assert: first = data.	second := library perform: #demoJpeg.	self assert: first == second.	library removeFile: file fileName.	self deny: (library class selectors includes: #demoJpeg)! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testCompileString	| library data file first second source |	library := WAFileLibraryDemo new.	self deny: (library class selectors includes: #demoTxt).	data := 'this is a string'.	file := WAFile new		contentType: 'text/plain';		contents: data;		fileName: 'demo.txt';		yourself.	library addFile: file.	self assert: (library class selectors includes: #demoTxt).	first := library perform: #demoTxt.	self assert: first = data.	second := library perform: #demoTxt.	self assert: first == second.	source := WAFileLibraryDemo sourceCodeAt: #demoTxt.	self assert: source asString = 'demoTxt	^ ''this is a string'''.	library removeFile: file fileName.	self deny: (library class selectors includes: #demoTxt)! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'pmm 4/23/2006 19:40'!testFileLibraryDemo	| actual expected |	actual := WAFileLibraryDemo new filenames.	expected := #('main.css' 'main.jpg').	self assert: actual size = expected size.	expected do: [ :each |		self assert: (actual includes: each) ]! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'mb 5/1/2007 14:14'!testFilenames	| expected actual |	expected := #(#editorCss #topJpg #mainCss #savePng ).	actual := WADispatcherFiles new fileSelectors.	"VW does not implement #= in Sets"	self assert: actual size = expected size.	expected		do: [:each | self assert: (expected includes: each)]! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testIsBinary	self deny: (WAFileLibraryDemo isBinary: 'scipt.js').	self deny: (WAFileLibraryDemo isBinary: 'markup.xml').	self deny: (WAFileLibraryDemo isBinary: 'markup.xhtml').	self deny: (WAFileLibraryDemo isBinary: 'markup.html').	self deny: (WAFileLibraryDemo isBinary: 'file.txt').	self deny: (WAFileLibraryDemo isBinary: 'calendar.ics').	self assert: (WAFileLibraryDemo isBinary: 'image.jpeg').	self assert: (WAFileLibraryDemo isBinary:  'squeak.exe')! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'pmm 4/20/2007 23:30'!testKalseyTabs	| handler |	handler := WAFileHandler new.	self		assertFile: 'kalseyTabs.css'		contentType: 'text/css'		handler: handler		symbol: #kalseyTabsCss		library: WAStandardFiles new! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'pmm 4/20/2007 23:30'!testKalseyTabsCascade	| handler |	handler := WAFileHandler new.	self		assertFile: 'kalseyTabs.css'		contentType: 'text/css'		handler: handler		symbol: #kalseyTabsCss		library: WAStandardFiles new! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'pmm 4/20/2007 23:35'!testLiveUpdate	| handler |	handler := WAFileHandler new.	self		assertFile: 'misc.js'		contentType: 'application/x-javascript'		handler: handler		symbol: #miscJs		library: WAStandardFiles new! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'pmm 2/16/2007 15:52'!testMainCss	| handler |	handler := WAFileHandler new.	self		assertFile: 'main.css'		contentType: 'text/css'		handler: handler		symbol: #mainCss		library: WAFileLibraryDemo new! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'pmm 2/16/2007 15:53'!testMainCssCascade	| handler |	handler := WAFileHandler new.	self		assertFile: 'main.css'		contentType: 'text/css'		handler: handler		symbol: #mainCss		library: WAFileLibraryDemo new! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'lr 5/23/2007 12:11'!testMainJpg	| handler library request response contents |	handler := WAFileHandler new.	library := WAFileLibraryDemo new.	request := WARequest		method: 'GET'		url: '/i/dont/care/WAFileLibraryDemo/main.jpg'		headers: Dictionary new		fields: Dictionary new		cookies: Dictionary new.	response := handler handleRequest: request.	self assert: response status = 200.	self assert: response contentType = 'image/jpeg'.	contents := response stream binary; contents.	self assert: contents asByteArray = (library perform: #mainJpg)! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testMainJs	| handler request response |	handler := WAFileHandler new.	request := WARequest		method: 'GET'		url: '/i/dont/care/main.js'		headers: Dictionary new		fields: Dictionary new		cookies: Dictionary new.	response := handler handleRequest: request.	self assert: response status = 404! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'pmm 9/13/2007 22:31'!testMimeType	| library |	library := WAFileLibraryDemo new.	self assert: (library mimetypeForFile: 'main.js') = 'application/x-javascript'.	self assert: (library mimetypeForFile: 'style2.css') = 'text/css'.	self assert: (library mimetypeForFile: 'image.jpg') = 'image/jpeg'.	self assert: (library mimetypeForFile: 'index') = 'application/octet-stream'! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testNoneStatisfy	self deny: (#(1 2 3) noneSatisfy: [ :each |		each even ]).	self assert: (#(1 3 5) noneSatisfy: [ :each |		each even ])! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'pmm 6/9/2007 15:21'!testStandardFiles	| actual expected |	actual := WAStandardFiles new filenames.	expected := #( 'halo.css' 'kalseyTabs.css' 'toolbar.css' 'window.css' 'externalAnchors.js' 'misc.js' 'shortcuts.js' 'codebrowser.png' 'inspector.png' 'styleeditor.png' 'config.png' 'profiler.png' 'memory.png' ).	"VW does not implement #= in Collection because you don't want that"	self assert: actual size = expected size.	expected do: [ :each |		self assert: (actual includes: each) ]! !!WAFileLibraryTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testUrlOf	self assert: (WAStandardFiles / #seasideJpg) displayString =		( '/'		, SeasidePlatformSupport defaultDispatcherName		, '/files/WAStandardFiles/seaside.jpg' )! !!WAFileTest methodsFor: 'running' stamp: 'pmm 7/24/2007 22:05'!setUp	file := WAFile new! !!WAFileTest methodsFor: 'running' stamp: 'lr 10/28/2007 14:42'!testBorderline	file fileName: 'C'.	self assert: file fileName = 'C'.	file fileName: 'C:'.	self assert: file fileName = 'C:'.	file fileName: 'C:\'.	self assert: file fileName = ''! !!WAFileTest methodsFor: 'running' stamp: 'lr 10/28/2007 14:42'!testNonLatinWindowsPath	| koreanName |	"If the following assertion fails, your Smalltalk dialect most probably does not support non-latin characters. This is true for Squeak 3.7. If your Smalltalk dialect does support non-latin characters adjust the test."	self shouldnt:  [		koreanName := (String			with: (Character value: 50976)			with: (Character value: 47532)			with: (Character value: 47484)), '.txt' ]		raise: Error.	file fileName: koreanName.	self assert: file fileName = koreanName.	file fileName: 'C:\important\', koreanName.	self assert: file fileName = koreanName! !!WAFileTest methodsFor: 'running' stamp: 'pmm 7/25/2007 21:39'!testWindowsPath	file fileName: 'C:\important\passwords.txt'.	self assert: file fileName = 'passwords.txt'.	file fileName: '/important/passwords.txt'.	self assert: file fileName = '/important/passwords.txt'.	file fileName: 'passwords.txt'.	self assert: file fileName = 'passwords.txt'! !!WAHtmlBuilderTest methodsFor: 'testing' stamp: 'pmm 8/18/2007 12:40'!testBody	| actual |	actual := WARenderCanvas builder render: [ :html |		html unorderedList: [			html listItem: 'an item' ] ].	self assert: actual = '<ul><li>an item</li></ul>'! !!WAHtmlBuilderTest methodsFor: 'testing' stamp: 'pmm 8/18/2007 12:40'!testFullDocument	| actual |	actual := WARenderCanvas builder fullDocument: true; render: [ :html |		html unorderedList: [			html listItem: 'an item' ] ].	self assert: actual = '<html><head><title></title></head><body><ul><li>an item</li></ul></body></html>'! !!WAHtmlBuilderTest methodsFor: 'testing' stamp: 'pmm 8/18/2007 12:41'!testFullDocumentWithBlock	| actual |	actual := WARenderCanvas builder fullDocument: true;		rootBlock: [ :root |			root title: 'title' ];		render: [ :html |			html unorderedList: [				html listItem: 'an item' ] ].	self assert: actual = '<html><head><title>title</title></head><body><ul><li>an item</li></ul></body></html>'! !!WAHtmlRootTest methodsFor: 'private' stamp: 'pmm 12/12/2007 07:09'!assert: aBlock gives: aString	self assert: aBlock givesAny: (Array with: aString)! !!WAHtmlRootTest methodsFor: 'private' stamp: 'pmm 12/12/2007 07:08'!assert: aBlock givesAny: aCollectionOfStrings	| html |	html := WARenderCanvas builder		callbackOwner: self;		fullDocument: true;		rootBlock: aBlock;		render: [ :canvas | ].	self assert: (aCollectionOfStrings anySatisfy: [ :each |		html = ('<html><head>', each, '</head><body></body></html>') ])! !!WAHtmlRootTest methodsFor: 'testing' stamp: 'pmm 9/22/2007 07:37'!testConditionalComment		self assert: [ :html |			html if greaterThan; orEqual; ie55; do: [				html script					defer;					url: 'http://www.example.com/bugs.js' ] ]		gives: '<title></title><!!--[if gte IE 5.5]><script defer="defer" src="http://www.example.com/bugs.js"></script><!![endif]-->'! !!WAHtmlRootTest methodsFor: 'testing' stamp: 'lr 6/5/2009 17:26'!testLinkElement	self		assert: [ :html |			html stylesheet				addAural;				addTeletype;				title: 'aTilte';				url: 'http://example.com/style.css'  ]		givesAny: #(			'<title></title><link rel="stylesheet" type="text/css" media="aural, tty" title="aTilte" href="http://example.com/style.css"/>'			'<title></title><link rel="stylesheet" type="text/css" media="tty, aural" title="aTilte" href="http://example.com/style.css"/>').	self		assert: [ :html |			html stylesheet				addAural;				addTeletype;				addAural;				title: 'aTilte';				url: 'http://example.com/style.css'  ]		givesAny: #(			'<title></title><link rel="stylesheet" type="text/css" media="aural, tty" title="aTilte" href="http://example.com/style.css"/>'			'<title></title><link rel="stylesheet" type="text/css" media="tty, aural" title="aTilte" href="http://example.com/style.css"/>')! !!WAHtmlRootTest methodsFor: 'testing' stamp: 'pmm 9/19/2007 19:29'!testLinkElementWithContent		self assert: [ :html |			html stylesheet				add: 'body { margin: 0pt; padding: 0pt;}'  ]		gives: '<title></title><link rel="stylesheet" type="text/css">body { margin: 0pt; padding: 0pt;}</link>'! !!WAHtmlRootTest methodsFor: 'testing' stamp: 'pmm 11/25/2007 22:01'!testRevealedConditionalComment		self assert: [ :html |			html revealedIf ie7; do: [				html script					defer;					url: 'http://www.example.com/bugs.js' ] ]		gives: '<title></title><!!--[if IE 7]><!!--><script defer="defer" src="http://www.example.com/bugs.js"></script><!!--<!![endif]-->'! !!WAPlatformSpecificTest methodsFor: 'private' stamp: 'pmm 7/24/2007 18:56'!compileUseNewCompiler	^Preferences		valueOfFlag: #compileUseNewCompiler		ifAbsent: [ false ]! !!WAPlatformSpecificTest methodsFor: 'private' stamp: 'pmm 7/24/2007 18:54'!hasNewCompiler	Preferences		valueOfFlag: #compileUseNewCompiler		ifAbsent: [ ^false ].	^true! !!WAPlatformSpecificTest methodsFor: 'testing' stamp: 'pmm 9/13/2007 21:02'!testAddAllFilesIn	| directoryName |	directoryName := 'XXXUsedBySeasideTests'.	FileDirectory default createDirectory: directoryName.	[| directory library |	directory := FileDirectory default directoryNamed: directoryName.	[(directory forceNewFileNamed: '.Seaside_Store') in: [ :stream | stream close ].	(directory forceNewFileNamed: 'foo') in: [ :stream | stream close ].	SystemChangeNotifier uniqueInstance doSilently: [		library := WAFileLibrary			subclass: #XXXTestFileLibrary			instanceVariableNames: ''			classVariableNames: ''			poolDictionaries: ''			category: 'Uncategorized'.		[ library addAllFilesIn: directory pathName.		self assert: library selectors size = 1 ] "reject .Seaside_Store"			ensure: [ library removeFromSystem ] ] ]		ensure: [ directory deleteLocalFiles ] ]		ensure: [ FileDirectory default deleteDirectory: directoryName ]! !!WAPlatformSpecificTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testCompileByteArrayLiteralSource	| library data file source expected |	self hasNewCompiler ifFalse: [ ^self ].	self		useCompileUseNewCompiler: true		during: [			self assert: self compileUseNewCompiler.			library := WAFileLibraryDemo new.			data := (1 to: 255) asByteArray.			file := WAFile new				contentType: 'image/jpeg';				contents: data;				fileName: 'demo.jpeg';				yourself.			library addFile: file.			[source := WAFileLibraryDemo sourceCodeAt: #demoJpeg.			expected := 'demoJpeg	^ #[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255]'.			self assert: source asString = expected ]				ensure: [ library removeFile: file fileName ] ]! !!WAPlatformSpecificTest methodsFor: 'testing' stamp: 'lr 5/9/2009 10:10'!testCompileByteArrayWithCacheSource	| library data file source expected |	self		useCompileUseNewCompiler: false		during: [			self deny: self compileUseNewCompiler.			library := WAFileLibraryDemo new.			data := (1 to: 255) asByteArray.			file := WAFile new				contentType: 'image/jpeg';				contents: data;				fileName: 'demo.jpeg';				yourself.			library addFile: file.			[source := WAFileLibraryDemo sourceCodeAt: #demoJpeg.			expected := 'demoJpeg	| cache |	cache := #(nil) beMutable.	(cache first) isNil ifTrue: [		cache at: 1 put: #(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255) asByteArray ].	^ cache first'.			self assert: source asString = expected ]				ensure: [ library removeFile: file fileName ] ]! !!WAPlatformSpecificTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testCompileIntoClassified	| source protocol selectors selector |	source := 'aMethod	^ ''a result'''.	protocol := 'a-protocol'.	selector := #aMethod.	SeasidePlatformSupport compile: source into: WAPlatformSpecificTest classified: protocol.	[	self assert: (WAPlatformSpecificTest selectors includes: selector).		selectors := WAPlatformSpecificTest organization listAtCategoryNamed: protocol.		self assert: selectors = (Array with: selector).	 	] ensure: [ WAPlatformSpecificTest removeSelectorSilently: selector ]! !!WAPlatformSpecificTest methodsFor: 'private' stamp: 'pmm 7/24/2007 19:06'!useCompileUseNewCompiler: aBoolean during: aBlock	| oldValue |	oldValue := self compileUseNewCompiler.	[ Preferences setPreference: #compileUseNewCompiler toValue: aBoolean.	aBlock value ]		ensure: [			self hasNewCompiler ifTrue: [				Preferences setPreference: #compileUseNewCompiler toValue: oldValue ] ]! !!WAPlatformTest methodsFor: 'testing' stamp: 'pmm 7/7/2007 18:24'!testAddFirst	| strings |	strings := #('b' 'c' 'd') asOrderedCollection.	strings addFirst: 'a'.	self assert: strings = (OrderedCollection new		add: 'a';		add: 'b';		add: 'c';		add: 'd';		yourself)! !!WAPlatformTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testAsNumber	self assert: 2007 asNumber = 2007.	self assert: '2007' asNumber = 2007! !!WAPlatformTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testAsString	self assert: 'Timberwolf' asString = 'Timberwolf'.	self assert: #DireWolf asString = 'DireWolf'.	self assert: true asString = 'true'.	self assert: 666 asString = '666'.	self assert: $A asString = 'A'.	"nil platform dependent result but must be a String"	self assert: 0.1 asString isString.	self assert: 0.1 asString asNumber = 0.1.	self assert: nil asString isString! !!WAPlatformTest methodsFor: 'testing' stamp: 'pmm 10/2/2007 20:53'!testAsUppercase	self assert: 'abc' asUppercase = 'ABC'.	self assert: 'ABC' asUppercase = 'ABC'! !!WAPlatformTest methodsFor: 'testing' stamp: 'pmm 9/11/2007 06:42'!testBetweenAnd	self assert: (6 between: 1 and: 12)! !!WAPlatformTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testBlockContextWithPossibleArgument	| block |	block := [ :x | 1 + x ].	self assert: (block valueWithPossibleArgument: 2) = 3.	block := [ false not ].	self assert: (block valueWithPossibleArgument: 3)! !!WAPlatformTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testCharacterAsUnicode	"test for:	Character >> #asUnicode		^self asInteger"	self assert: $S asUnicode = 83! !!WAPlatformTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testColorAsHtmlColor	"test for:	Color >> #hex	| aStream |	aStream := (String new: 6) writeStream.	aStream nextPutAll: (((self red * 255) asInteger printStringBase: 16)		padded: #left to: 2 with: $0).	aStream nextPutAll: (((self green * 255) asInteger printStringBase: 16)		padded: #left to: 2 with: $0).	aStream nextPutAll: (((self blue * 255) asInteger printStringBase: 16)		padded: #left to: 2 with: $0).	^ aStream contents	Color >> #asHTMLColor	^ '#', self hex"	self assert: (#('#ffffff' '#FFFFFF' ) includes: Color white asHTMLColor).	self assert: (Color black asHTMLColor = '#000000').	self assert: (#('#ff0000' '#FF0000' ) includes: Color red asHTMLColor)! !!WAPlatformTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testCount	self assert: (#(1 2 3) count: [ :each | each odd ]) = 2! !!WAPlatformTest methodsFor: 'testing' stamp: 'pmm 9/11/2007 06:41'!testDaysInMonthForYear	(1 to: 12) with: #(31 28 31 30 31 30 31 31 30 31 30 31) do: [ :month :days |		self assert: days = (Month daysInMonth: month forYear: 2007) ]! !!WAPlatformTest methodsFor: 'testing' stamp: 'pmm 11/1/2007 22:00'!testDisplayString	"displayString for Symbols is undefined as far as Seaside is concerned"	self assert: 'Timberwolf' displayString = 'Timberwolf'.	self assert: nil displayString = 'nil'.	self assert: true displayString = 'true'.	self assert: 666 displayString = '666'.	self assert: 0.1 displayString = '0.1'.	self assert: $A displayString = 'A'.	self assert: (4@2) displayString = '4@2'! !!WAPlatformTest methodsFor: 'testing' stamp: 'pmm 10/2/2007 06:54'!testEmptyOrNil	self assert: '' isEmptyOrNil.	self assert: nil isEmptyOrNil.	self assert: Array new isEmptyOrNil.	self deny: 'Timberwolf' isEmptyOrNil! !!WAPlatformTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testFindTokens	| mimeType tokens |	mimeType := 'application/xhtml+xml'.	tokens := mimeType findTokens: '/'.	self assert: tokens size = 2.	self assert: tokens first = 'application'.	self assert: tokens second = 'xhtml+xml'! !!WAPlatformTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testFixCallbackTemps	"Make sure that #fixCallbackTemps is properly understood by block-contexts. Make sure that this is either a nop for Smalltalks with true block closures, or it properly fixes the context otherwise."	| array blocks values |	array := #(1 2 3).	blocks := array collect: [ :each | [ each ] fixCallbackTemps ].	values := blocks collect: [ :each | each value ].	self assert: values = array! !!WAPlatformTest methodsFor: 'testing' stamp: 'pmm 8/2/2007 07:11'!testGarbageCollect	"if you miss this do a class extension"	self		shouldnt: [ Smalltalk garbageCollect ]		raise: MessageNotUnderstood! !!WAPlatformTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testMessageSendValueWithPossibleArgument	"test for:	MessageSend >> #valueWithPossibleArgument: anArg	self numArgs = 0 ifTrue: [^self value].	self numArgs = 1 ifTrue: [^self value: anArg].	self numArgs  > 1 ifTrue: [^self valueWithArguments: {anArg}, (Array new: self numArgs  - 1)]"	| send |	send := MessageSend receiver: 1 selector: #+.	self assert: (send valueWithPossibleArgument: 2) = 3.	send := MessageSend receiver: false selector: #not.	self assert: (send valueWithPossibleArgument: 3)! !!WAPlatformTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testStreamClosed	"test for:	Stream >> #closed		^false"	self deny: 'Seaside' readStream closed! !!WAPlatformTest methodsFor: 'testing' stamp: 'pmm 2/25/2007 23:08'!testSymbolAsMutator	"test for:	Symbol >> #asMutator	^ (self copyWith: $:) asSymbol"	self assert: #name asMutator = #name:! !!WAPlatformTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testTotalSeconds	"Answer the total seconds since the Squeak epoch: 1 January 1901."	| seconds |	seconds := Time totalSeconds.	self assert: seconds isInteger! !!WAProxyTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!test	| cookie proxy |	cookie := WACookie new.	cookie key: 'The Metaphor'.	proxy := WAModelProxy on: cookie.	self assert: proxy key = cookie key.	self assert: cookie expiry isNil.	self assert: proxy expiry = cookie expiry.	proxy expiry: (DateAndTime fromSeconds: 36209).	self assert: proxy expiry = (DateAndTime fromSeconds: 36209).	self assert: cookie expiry isNil.	proxy commit.	self assert: cookie expiry = (DateAndTime fromSeconds: 36209)! !!WAResponseTest methodsFor: 'testing' stamp: 'pmm 12/20/2008 12:58'!testForbidden	| body response |	response := WAResponse forbidden: '<script>alert(document.cookie)</script>'.	self assert: response status = 403.	body := response contents contents.	self assert: body = '<html><head><title>Forbidden</title></head><body><h1>Error: you are forbidden to access &quot;&lt;script&gt;alert(document.cookie)&lt;/script&gt;&quot;</h1></body></html>'! !!WAResponseTest methodsFor: 'testing' stamp: 'pmm 6/29/2008 17:00'!testInternalError	[ WAComponentsNotFoundError raiseSignal: '<script>alert(document.cookie)</script>'.	self assert: false ]			on: WAComponentsNotFoundError			do: [ :error |		| body response |		response := WAResponse internalError: error.		self assert: response status = 500.		body := response contents contents.		self assert: (body beginsWith: '<html><head><title>Internal Error</title></head><body><h1>Internal Error</h1><h2>WAComponentsNotFoundError: &lt;script&gt;alert(document.cookie)&lt;/script&gt;</h2>').		self assert: (body endsWith: '</body></html>') ]! !!WAResponseTest methodsFor: 'testing' stamp: 'pmm 12/20/2008 12:58'!testNotFound	| body response |	response := WAResponse notFound: '<script>alert(document.cookie)</script>'.	self assert: response status = 404.	body := response contents contents.	self assert: body = '<html><head><title>Not Found</title></head><body><h1>Error: &quot;&lt;script&gt;alert(document.cookie)&lt;/script&gt;&quot; not found</h1></body></html>'! !!WAUrlTest methodsFor: 'running' stamp: 'lr 8/17/2007 21:05'!setUp	url := WAUrl new! !!WAUrlTest methodsFor: 'testing-adding' stamp: 'lr 8/17/2007 21:17'!testAddParamter	url addToPath: 'files'.	self assert: url displayString = '/files'.	url addParameter: 'x'.	self assert: url displayString = '/files?x'.	url addParameter: 'y' value: 1.	self assert: url displayString = '/files?x&y=1'! !!WAUrlTest methodsFor: 'testing-adding' stamp: 'lr 8/17/2007 21:18'!testAddToPath	url addToPath: '/files/WAStandardFiles/seaside.jpg'.	self assert: url displayString = '/files/WAStandardFiles/seaside.jpg'! !!WAUrlTest methodsFor: 'testing' stamp: 'lr 8/17/2007 21:10'!testFragment	url fragment: 'id'.	self assert: url fragment = 'id'.	self assert: url displayString = '#id'! !!WAUrlTest methodsFor: 'testing' stamp: 'lr 8/20/2007 21:18'!testHostname	url hostname: 'seaside.st'.	self assert: url hostname = 'seaside.st'.	self assert: url displayString = 'http://seaside.st'! !!WAUrlTest methodsFor: 'testing' stamp: 'lr 5/9/2009 10:15'!testParameters	url parameters at: '1' put: nil.	self assert: url displayString = '?1'.	url parameters at: '2' put: 'foo'.	self assert: url displayString = '?1&2=foo'.	url parameters at: '3' put: 123.	self assert: url displayString = '?1&2=foo&3=123'.	url parameters at: '4' put: 'foo bar&zork'.	self assert: url displayString = '?1&2=foo&3=123&4=foo%20bar%26zork'! !!WAUrlTest methodsFor: 'testing' stamp: 'lr 8/17/2007 22:55'!testPassword	url hostname: 'seaside.st'; username: 'foo'; password: 'bar'.	self assert: url password = 'bar'.	self assert: url displayString = 'http://foo:bar@seaside.st'! !!WAUrlTest methodsFor: 'testing' stamp: 'lr 8/17/2007 21:12'!testPath	self assert: url displayString = ''.	url path add: 'aa'.	self assert: url displayString = '/aa'.	url path add: 'bb'.	self assert: url displayString = '/aa/bb'.	self assert: url path asArray = #( 'aa' 'bb' )! !!WAUrlTest methodsFor: 'testing-encoding' stamp: 'lr 5/9/2009 10:16'!testPathEncoding	url path: #( 'foo/bar' ).	self assert: url printString = '/foo%2Fbar'.	url path: #( 'foo bar' ).	self assert: url printString = '/foo%20bar'.	url path: #( 'foo+bar' ).	self assert: url printString = '/foo%2Bbar'.	url path: #( 'foo%bar' ).	self assert: url printString = '/foo%25bar'! !!WAUrlTest methodsFor: 'testing' stamp: 'lr 8/17/2007 22:55'!testPort	url hostname: 'seaside.st'; port: 8080.	self assert: url port = 8080.	self assert: url displayString = 'http://seaside.st:8080'! !!WAUrlTest methodsFor: 'testing-encoding' stamp: 'lr 5/9/2009 10:16'!testQueryEncoding	self		assert: (url withParameter: '/' value: ' ')			printString = '?%2F=%20'.	self		assert: (url withParameter: '+' value: '%')			printString = '?%2B=%25'.	self		assert: (url withParameter: '?' value: '&')			printString = '?%3F=%26'.	self		assert: (url withParameter: '[' value: ']')			printString = '?%5B=%5D'.	self		assert: (url withParameter: '=' value: '<')			printString = '?%3D=%3C'! !!WAUrlTest methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!testScheme	url scheme: 'https'; hostname: 'seaside.st'.	self assert: url scheme = 'https'.	self assert: url displayString = 'https://seaside.st'.	"Tests from Boris"	url hostname: 'seaside.st'.	url port: 80; scheme: 'http'.	self assert: url displayString = 'http://seaside.st'.	url port: 443; scheme: 'https'.	self assert: url displayString = 'https://seaside.st'.	url port: 80; scheme: #http.	self assert: url displayString = 'http://seaside.st'.	url port: 443; scheme: #https.	self assert: url displayString = 'https://seaside.st'! !!WAUrlTest methodsFor: 'testing' stamp: 'lr 8/17/2007 22:55'!testUsername	url hostname: 'seaside.st'; username: 'foo'.	self assert: url username = 'foo'.	self assert: url displayString = 'http://foo@seaside.st'! !!Amb class methodsFor: 'instance creation' stamp: 'lr 5/3/2006 09:24'!new	^ self basicNew initialize! !!Amb methodsFor: 'evaluation' stamp: 'lr 10/28/2007 14:42'!allValues: aBlock	|kPrev results|	kPrev := failureContinuation.	results := OrderedCollection new.	(Continuation currentDo:		[:kRetry |		failureContinuation := [:v | kRetry value: false].		results add: aBlock value.		kRetry value: true])			ifTrue: [self fail].	failureContinuation := kPrev.	^ results asArray! !!Amb methodsFor: 'error handling' stamp: 'ab 12/6/2002 02:11'!assert: aBoolean	aBoolean ifFalse: [self fail]! !!Amb methodsFor: 'error handling' stamp: 'ab 12/6/2002 02:12'!deny: aBoolean	self assert: aBoolean not! !!Amb methodsFor: 'error handling' stamp: 'ab 12/6/2002 02:15'!fail	^ failureContinuation value: nil! !!Amb methodsFor: 'initialize-release' stamp: 'lr 10/28/2007 14:42'!initialize	failureContinuation := [:v | self error: 'Amb tree exhausted']! !!Amb methodsFor: 'evaluation' stamp: 'ab 5/29/2003 22:29'!maybe	^ self oneOf: (Array with: true with: false)! !!Amb methodsFor: 'evaluation' stamp: 'pmm 7/3/2010 10:06'!oneOf: aCollection	^ self valueOfOneOf: (aCollection collect: [ :each | [ each ] fixCallbackTemps ])! !!Amb methodsFor: 'evaluation' stamp: 'ab 5/29/2003 22:30'!valueOf: blockOne or: blockTwo	^ self valueOfOneOf: (Array with: blockOne with: blockTwo)! !!Amb methodsFor: 'evaluation' stamp: 'ab 5/29/2003 22:30'!valueOf: blockOne or: blockTwo or: blockThree	^ self valueOfOneOf: (Array with: blockOne with: blockTwo with: blockThree)! !!Amb methodsFor: 'evaluation' stamp: 'pmm 7/3/2010 10:08'!valueOfOneOf: blockCollection	|kPrev|	kPrev := failureContinuation.	^ Continuation currentDo: [:kEntry |		blockCollection do: [ :each |			Continuation currentDo: [ :kNext |				failureContinuation := [ :value |					failureContinuation := kPrev.					kNext value: value ] fixCallbackTemps.				kEntry value: each value ] ].		kPrev value: nil ]! !!Continuation class methodsFor: 'instance creation' stamp: 'ab 6/15/2003 19:13'!current	^ self fromContext: thisContext sender! !!Continuation class methodsFor: 'instance creation' stamp: 'ab 6/15/2003 19:13'!currentDo: aBlock	^ aBlock value: (self fromContext: thisContext sender)! !!Continuation class methodsFor: 'instance creation' stamp: 'ab 6/15/2003 19:13'!fromContext: aStack	^self new initializeFromContext: aStack! !!Continuation methodsFor: 'private' stamp: 'avi 4/24/2004 12:39'!initializeFromContext: aContext	| valueStream context |	valueStream := WriteStream on: (Array new: 20).	context := aContext.	[context notNil] whileTrue:		[valueStream nextPut: context.		1 to: context class instSize do: [:i | valueStream nextPut: (context instVarAt: i)].		1 to: context localSize do: [:i | valueStream nextPut: (context localAt: i)].		context := context sender].	values := valueStream contents! !!Continuation methodsFor: 'accessing' stamp: 'ab 6/15/2003 19:18'!numArgs	^ 1! !!Continuation methodsFor: 'private' stamp: 'avi 4/24/2004 12:39'!restoreValues	| valueStream context |	valueStream := values readStream.	[valueStream atEnd] whileFalse:		[context := valueStream next.		1 to: context class instSize do: [:i | context instVarAt: i put: valueStream next].		1 to: context localSize do: [:i | context localAt: i put: valueStream next]]! !!Continuation methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!terminate: aContext	| context |	context := aContext.	[context notNil] whileTrue: [context := context swapSender: nil]! !!Continuation methodsFor: 'evaluating' stamp: 'ab 6/15/2003 19:13'!value	self value: nil! !!Continuation methodsFor: 'evaluating' stamp: 'lr 10/28/2007 14:42'!value: anObject	"Invoke the continuation and answer anObject as return value."	self terminate: thisContext.	self restoreValues.	thisContext swapSender: values first.	^ anObject! !!Continuation methodsFor: 'evaluating' stamp: 'lr 10/28/2007 14:42'!valueWithArguments: anArray	anArray size = 1		ifFalse: [ ^ self error: 'continuations can only be resumed with one argument' ].	self value: anArray first! !!Object methodsFor: '*seaside2-squeak' stamp: 'pmm 5/22/2007 22:10'!beMutable	"for VW compatibility, a hack that allows to cache a value in a literal array"! !!Object methodsFor: '*seaside2' stamp: 'lr 6/5/2007 21:35'!deprecatedApi	self deprecatedApi: thisContext sender displayString! !!Object methodsFor: '*seaside2' stamp: 'lr 6/5/2007 21:35'!deprecatedApi: aString	WADeprecatedApi raiseSignal: aString! !!Object methodsFor: '*seaside2-squeak' stamp: 'lr 7/12/2005 17:01'!displayString	^ self asString! !!Object methodsFor: '*seaside2-encoding' stamp: 'lr 3/26/2007 20:16'!encodeOn: aDocument	aDocument print: self displayString! !!Object methodsFor: '*seaside2' stamp: 'lr 5/9/2007 08:47'!inspectorFields	| members |	members := Array new writeStream.	self class allInstVarNames withIndexDo: [ :each :index |		members nextPut: each -> (self instVarAt: index) ].	self class isVariable ifTrue: [		1 to: self size do: [ :index |			members nextPut: index -> (self at: index) ] ].	^ members contents! !!Object methodsFor: '*seaside2' stamp: 'avi 3/14/2005 15:19'!labelForSelector: aSymbol	^ aSymbol asCapitalizedPhrase! !!Object methodsFor: '*seaside2' stamp: 'pmm 4/7/2007 17:14'!renderOn: aRenderer	"Override this method to customize how objects (not components) are rendered when passed as an argument to #render:. The default is the return value of #displayString.	Just remember that you can not use #callback:, #on:of:, or #call:"	aRenderer text: self! !!Object methodsFor: '*seaside2' stamp: 'lr 3/19/2007 23:13'!restoreFromSnapshot: anObject	self copyFrom: anObject! !!Object methodsFor: '*seaside2' stamp: 'avi 9/1/2004 21:20'!snapshotCopy	^ self shallowCopy! !!Object methodsFor: '*seaside2' stamp: 'lr 10/28/2007 14:42'!validationError: message	^WAValidationNotification raiseSignal: message! !!SeasidePlatformSupport class methodsFor: 'startup' stamp: 'lr 10/28/2007 14:42'!addToStartUpList: anObject	Smalltalk addToStartUpList: anObject! !!SeasidePlatformSupport class methodsFor: 'file-library' stamp: 'pmm 7/24/2007 18:52'!asMethodReturningByteArray: aByteArrayOrString named: aSymbol	"Generates the source of a method named aSymbol that returns aByteArrayOrString as a ByteArray"	^self useByteArrayLiterals		ifTrue: [ self asMethodReturningByteArrayLiteral: aByteArrayOrString named: aSymbol ]		ifFalse: [ self asMethodReturningByteArrayWithCache: aByteArrayOrString named: aSymbol ]! !!SeasidePlatformSupport class methodsFor: 'private-file-library' stamp: 'pmm 5/22/2007 22:09'!asMethodReturningByteArrayLiteral: aByteArrayOrString named: aSymbol	"Generates the source of a method named aSymbol that returns aByteArrayOrString as a byte array using VW/NewCompiler byte array literal syntax."	^String streamContents: [ :stream |		stream nextPutAll: aSymbol; cr.		stream tab; nextPutAll: '^ #['.		aByteArrayOrString asByteArray			do: [ :each | each printOn: stream ]			separatedBy: [ stream space ].		stream nextPutAll: ']' ]! !!SeasidePlatformSupport class methodsFor: 'private-file-library' stamp: 'damiencassou 3/13/2009 11:02'!asMethodReturningByteArrayWithCache: aByteArrayOrString named: aSymbol	"Generates the source of a method named aSymbol that returns aByteArrayOrString as a byte array and caching this array in a literal array of size 1."	^ String streamContents: [ :stream |		stream nextPutAll: aSymbol; cr.		stream tab; nextPutAll: '| cache |'; cr.		stream tab; nextPutAll: 'cache := #(nil) beMutable.'; cr.		stream tab; nextPutAll: '(cache first) isNil ifTrue: ['; cr.		stream tab; tab; nextPutAll: 'cache at: 1 put: #('.		aByteArrayOrString asByteArray			do: [ :each | each printOn: stream ]			separatedBy: [ stream space ].		stream nextPutAll: ') asByteArray ].'; cr.		stream tab; nextPutAll: '^ cache first' ]! !!SeasidePlatformSupport class methodsFor: 'encoding' stamp: 'lr 10/28/2007 14:42'!base64Decode: aString	^ (Base64MimeConverter mimeDecodeToChars: aString readStream) contents! !!SeasidePlatformSupport class methodsFor: 'tools' stamp: 'pmm 5/23/2007 10:59'!commentCoverageFor: aString on: aStream	"Calculates comment coverage for the category aString, includes exension methods.	Transcript show: 'Category        Classes Comments    %   Methods Comments   %'; cr.	self commentCoverageFor: 'Seaside' on: Transcript	self commentCoverageFor: 'Scriptaculous' on: Transcript"	| allClasses allMethods classesCommented methodsCommented info |	allClasses := classesCommented := 0.	allMethods := methodsCommented := 0.	info := PackageInfo named: aString.	info classes do: [ :theClass |		allClasses := allClasses + 1.		theClass hasComment			ifTrue: [ classesCommented := classesCommented + 1 ] ].	info methods do: [ :method |		allMethods := allMethods + 1.		(method actualClass firstPrecodeCommentFor: method methodSymbol)			ifNotNil: [ methodsCommented := methodsCommented + 1 ] ].	aStream nextPutAll: aString; tab.	aStream print: allClasses; tab.	aStream print: classesCommented; tab.	aStream print: (100.0 * classesCommented / (allClasses max: 1) truncateTo: 0.01); tab.	aStream print: allMethods; tab.	aStream print: methodsCommented; tab.	aStream print: (100.0 * methodsCommented / (allMethods max: 1) truncateTo: 0.01); cr.	aStream flush! !!SeasidePlatformSupport class methodsFor: 'file-library' stamp: 'lr 10/28/2007 14:42'!compile: aString into: aClass classified: aSymbol	"The trick here is to be as silently a possible so that the package is not marked dirty when running WAFileLibrary test.	This also makes running tests much faster."	| methodNode compiledMethod selector methodAndNode |	methodNode  := aClass compilerClass new				compile: aString				in: aClass				notifying: nil				ifFail: [ self error: 'syntax error' ].	selector := methodNode selector.	methodAndNode := (CompiledMethodWithNode generateMethodFromNode: methodNode trailer: aClass defaultMethodTrailer).	compiledMethod := methodAndNode method.	compiledMethod			putSource: aString			fromParseNode: methodAndNode node			inFile: 2			withPreamble: [ :file |				file					cr;					nextPut: $!!;					nextChunkPut: 'Behavior method';					cr ].	aClass addSelectorSilently: selector withMethod: compiledMethod.	SystemChangeNotifier uniqueInstance		doSilently: [ aClass organization classify: selector under: aSymbol ]! !!SeasidePlatformSupport class methodsFor: 'file-library' stamp: 'pmm 7/4/2009 11:46'!contentsOfFile: aString binary: aBoolean	| stream |	stream := aBoolean		ifTrue: [ (FileDirectory default oldFileNamed: aString)			binary;			yourself ]		ifFalse: [			(MultiByteFileStream oldFileNamed: aString)				wantsLineEndConversion: true;				ascii;				yourself ].	^[ stream contents ] ensure: [ stream close ]! !!SeasidePlatformSupport class methodsFor: 'file-library' stamp: 'rjl 11/28/2008 18:57'!convertToSmalltalkNewlines: aString	^aString withSqueakLineEndings! !!SeasidePlatformSupport class methodsFor: 'dispatchers' stamp: 'mb 2/17/2007 08:19'!defaultDispatcherName	^'seaside'! !!SeasidePlatformSupport class methodsFor: 'email' stamp: 'avi 3/11/2004 13:13'!deliverMailFrom: fromAddress to: recipientList text: messageText	SMTPClient		deliverMailFrom: fromAddress		to: recipientList		text: messageText		usingServer: self smtpServer! !!SeasidePlatformSupport class methodsFor: 'transactions' stamp: 'pmm 5/11/2007 22:50'!doTransaction: aBlock	"for Gemstone/S compatibility	http://gemstonesoup.wordpress.com/2007/05/10/porting-application-specific-seaside-threads-to-gemstone/	use when modifying an object from an outside thread"	^aBlock value! !!SeasidePlatformSupport class methodsFor: 'vm' stamp: 'lr 6/5/2009 17:26'!ensureAuthorInitials: aOneArgumentBlock	"Makes sure the author initials for the image are set.	aOneArgumentBlock is called with a qestion string as an argument when the initials are not set, it answers the initials"	(Smalltalk version beginsWith: 'Pharo')		ifTrue: [			"Special Pharo code path to avoid deprecation"			| author |			author := Smalltalk at: #Author.			author isNil				ifTrue: [ ^ self error: 'unsupported Squeak version' ].			author initialsPerSe isEmpty				ifTrue: [ author initials: (aOneArgumentBlock value: 'Please enter your initials:') ] ]		ifFalse: [			Utilities authorInitialsPerSe isEmpty				ifTrue: [ Utilities setAuthorInitials: (aOneArgumentBlock value: 'Please enter your initials:') ] ]! !!SeasidePlatformSupport class methodsFor: 'file-library' stamp: 'pmm 8/14/2007 06:45'!ensureExistenceOfFolder: aString	"creates a folder named aString in the image directory"	FileDirectory default assureExistenceOfPath: aString! !!SeasidePlatformSupport class methodsFor: 'file-library' stamp: 'pmm 9/13/2007 20:54'!filesIn: aPathString	"Return a collection of absolute paths for all the files (no directories) in the directory given by aPathString	must not include file names that start with ."	| directory |	directory := FileDirectory default directoryNamed: aPathString.	^(directory fileNames		reject: [ :each | each first = $. ])		collect: [ :each | directory fullNameFor: each ]! !!SeasidePlatformSupport class methodsFor: 'namespace support' stamp: 'lr 10/28/2007 14:42'!ifDefined: aSymbol do: aBlock	"Execute the block with the global, if the global is defined	Intended to help integrate Seaside add-ons elegantly,	See #testIfDefined"	| anObject |	anObject := Smalltalk				at: aSymbol asSymbol				ifAbsent: [^ nil].	aBlock value: anObject! !!SeasidePlatformSupport class methodsFor: 'testing' stamp: 'avi 1/1/2005 15:05'!isProxy: anObject	^ (anObject class allSuperclasses includes: Object) not! !!SeasidePlatformSupport class methodsFor: 'testing' stamp: 'mb 2/7/2007 10:12'!isSqueak	^true! !!SeasidePlatformSupport class methodsFor: 'file-library' stamp: 'pmm 6/5/2006 21:32'!localNameOf: aFilename	^(FileDirectory on: aFilename) localName! !!SeasidePlatformSupport class methodsFor: 'tools' stamp: 'lr 10/28/2007 14:42'!methodsOf: anAuthorString	"Lists all the methods with author initials anAuthorString	self methodsOf: 'avi'"	| methods |	methods := ((Seaside2Info named: 'Seaside') methods select: [ :each |			(each timeStamp copyUpTo: Character space) = anAuthorString ]).	MessageSet		openMessageList: methods		name: methods size displayString , ' methods of ', anAuthorString! !!SeasidePlatformSupport class methodsFor: 'factory' stamp: 'lr 10/28/2007 14:42'!mimeDocumentClass	^ MIMEDocument! !!SeasidePlatformSupport class methodsFor: 'factory' stamp: 'pmm 2/26/2009 22:45'!mimeDocumentOfType: type from: aFilename	"WACachedDocument clearCache.	(WACachedDocument fileName: 'SqueakDebug.log') asMIMEDocument.	(WACachedDocument fileName: 'SqueakDebug.log') asMIMEDocument."	| content mimeType |	mimeType := type ifNil: [		self mimeDocumentClass guessTypeFromName: aFilename ].	mimeType isString ifFalse: [		"for newer Pharo can be instance lf MIMEType"		mimeType = mimeType asString ].	content := (StandardFileStream readOnlyFileNamed: aFilename) contentsOfEntireFile.	^self mimeDocumentClass		contentType: mimeType		content: content! !!SeasidePlatformSupport class methodsFor: 'exceptions' stamp: 'lr 10/28/2007 14:42'!openDebuggerOn: anError	| process |	process := Processor activeProcess.	WorldState addDeferredUIMessage:		[process			debug: anError signalerContext			title: anError description			full: true].	process suspend! !!SeasidePlatformSupport class methodsFor: 'factory' stamp: 'lr 10/28/2007 14:42'!randomClass	"used by Gemstone/S traditional Randoms which cannot be persisted"	^Random! !!SeasidePlatformSupport class methodsFor: 'factory' stamp: 'pmm 3/19/2007 14:24'!readWriteStream	^ RWBinaryOrTextStream on: (String new: 4096)! !!SeasidePlatformSupport class methodsFor: 'factory' stamp: 'pmm 7/5/2007 19:41'!reducedConflictDictionary	"used by Gemstone/S reduced conflict classes that can be used to avoid transaction conflicts"	^Dictionary! !!SeasidePlatformSupport class methodsFor: 'file-library' stamp: 'pmm 4/21/2006 23:56'!removeSelector: aSymbol from: aClass	aClass removeSelectorSilently: aSymbol! !!SeasidePlatformSupport class methodsFor: 'requests' stamp: 'pmm 7/6/2007 07:25'!request: aString	^self requestor request: aString! !!SeasidePlatformSupport class methodsFor: 'requests' stamp: 'lr 10/28/2007 14:42'!request: aRequestString initialAnswer: anIntialAnserString	^self requestor		request: aRequestString		initialAnswer: anIntialAnserString! !!SeasidePlatformSupport class methodsFor: 'requests' stamp: 'pmm 7/6/2007 07:24'!requestor	^((Smalltalk hasClassNamed: #UIManager)		ifTrue: [ (Smalltalk classNamed: #UIManager) default ]		ifFalse: [ Smalltalk classNamed: #FillInTheBlank ])! !!SeasidePlatformSupport class methodsFor: 'factory' stamp: 'lr 10/28/2007 14:42'!semaphoreClass	"used by Gemstone/S traditional Semaphores which cannot be persisted"	^Semaphore! !!SeasidePlatformSupport class methodsFor: 'email' stamp: 'avi 3/11/2004 13:10'!smtpServer	^ MailSender smtpServer! !!SeasidePlatformSupport class methodsFor: 'exceptions' stamp: 'lr 6/24/2009 09:29'!tempsAndValuesIn: aContext do: aTwoArgumentBlock	"Evaluate aTwoArgumentBlock for every temp in aContext with the name of the temp and the current value. The code is supposed to work on Squeak and Pharo closure and non-closure images."	| tempNames |	tempNames := aContext tempNames.	(aContext respondsTo: #namedTempAt:)		ifTrue: [			tempNames keysAndValuesDo: [ :index :each |				aTwoArgumentBlock					value: each					value: (aContext namedTempAt: index) ] ]		ifFalse: [			tempNames do: [ :each |				aTwoArgumentBlock					value: each					value: (aContext tempAt: (tempNames indexOf: each)) ] ]! !!SeasidePlatformSupport class methodsFor: 'private-file-library' stamp: 'pmm 7/24/2007 18:51'!useByteArrayLiterals	"whether ByteArray literals can/should be used"	^Preferences		valueOfFlag: #compileUseNewCompiler		ifAbsent: [ false ]! !!SeasidePlatformSupport class methodsFor: 'accessing' stamp: 'mb 10/12/2006 20:14'!versionString	^SeasideVWInfo new versionString! !!SeasidePlatformSupport class methodsFor: 'vm' stamp: 'lr 10/28/2007 14:42'!vmStatisticsReportString	^ SmalltalkImage current vmStatisticsReportString! !!SeasidePlatformSupport class methodsFor: 'exceptions' stamp: 'lr 10/28/2007 14:42'!walkbackStringsFor: anError	^(anError signalerContext sender stackOfSize: 20)		collect: [:ctx | ctx printString]! !!SeasidePlatformSupport class methodsFor: 'factory' stamp: 'pmm 9/12/2006 17:34'!weakDictionaryOfSize: aNumber	^IdentityDictionary new: aNumber! !!SeasidePlatformSupport class methodsFor: 'file-library' stamp: 'pmm 7/4/2009 11:45'!write: aStringOrByteArray toFile: aFileNameString inFolder: aFolderString	"writes aStringOrByteArray to a file named aFilenameString in the folder aFolderString"	| folder stream fullFilePath |	folder := FileDirectory default directoryNamed: aFolderString.	fullFilePath := folder fullNameFor: aFileNameString.	stream := aStringOrByteArray isString		ifTrue: [			(MultiByteFileStream forceNewFileNamed: fullFilePath)				ascii;				wantsLineEndConversion: true;				yourself ]		ifFalse: [ (FileStream forceNewFileNamed: fullFilePath) binary ].	[ stream nextPutAll: aStringOrByteArray ]		ensure: [ stream close ]! !!WABrush class methodsFor: 'instance-creation' stamp: 'lr 3/26/2007 22:31'!new	^ self basicNew initialize! !!WABrush methodsFor: 'public' stamp: 'lr 4/9/2007 16:32'!close	"Close and flush the receiver onto the canvas and its associated document."	closed ifFalse: [ self with: nil ]! !!WABrush methodsFor: 'initialization' stamp: 'lr 3/27/2007 11:09'!initialize	closed := false! !!WABrush methodsFor: 'private' stamp: 'lr 3/27/2007 17:38'!labelForSelector: aSymbol of: anObject	^ anObject labelForSelector: aSymbol! !!WABrush methodsFor: 'accessing' stamp: 'avi 6/13/2004 00:27'!parent	^ parent! !!WABrush methodsFor: 'initialization' stamp: 'avi 6/13/2004 00:27'!setParent: aBrush canvas: aCanvas	parent := aBrush.	canvas := aCanvas! !!WABrush methodsFor: 'public' stamp: 'lr 3/27/2007 11:10'!with: aBlock	canvas nest: aBlock.	closed := true! !!WACompound methodsFor: 'callbacks' stamp: 'lr 10/28/2007 14:42'!callback: aBlock	callbackBlock := aBlock! !!WACompound methodsFor: 'public' stamp: 'lr 3/27/2007 18:00'!close	closed ifTrue: [ ^ self ].	closed := true.	self with: nil! !!WACompound methodsFor: 'testing' stamp: 'lr 3/27/2007 17:25'!hasCallback	^ callbackBlock notNil! !!WACompound methodsFor: 'accessing' stamp: 'lr 3/27/2007 17:55'!id	^ id! !!WACompound methodsFor: 'accessing' stamp: 'lr 3/27/2007 17:55'!id: aString	id := aString! !!WACompound methodsFor: 'initialization' stamp: 'lr 3/27/2007 17:51'!initialize	super initialize.	"do not remove properties, it is used by SeasideAsync"	properties := Dictionary new! !!WACompound methodsFor: 'callbacks' stamp: 'lr 3/27/2007 17:24'!on: selector of: anObject	self value: (anObject perform: selector).	self callback: [ :date | anObject perform: selector asMutator with: date ]! !!WACompound methodsFor: 'accessing' stamp: 'lr 3/27/2007 17:25'!value	^ value! !!WACompound methodsFor: 'accessing' stamp: 'mb 1/30/2006 18:40'!value: aValue	value := aValue! !!WADateInput methodsFor: 'private rendering' stamp: 'mb 7/6/2007 18:51'!addCallback	self hasCallback		ifFalse:			[canvas flush.			^ self].	canvas hiddenInput		callback: [callbackBlock value: self setValueWithNewDate];		 with: nil! !!WADateInput methodsFor: 'private callbacks' stamp: 'lr 10/28/2007 14:42'!addDayCallbackToBrush: aBrush	self hasCallback ifFalse: [^self].	aBrush on: #day of: self! !!WADateInput methodsFor: 'private callbacks' stamp: 'lr 10/28/2007 14:42'!addMonthCallbackToBrush: aBrush	self hasCallback ifFalse: [^self].	aBrush on: #month of: self! !!WADateInput methodsFor: 'private callbacks' stamp: 'mb 11/3/2006 14:19'!addYearCallbackToBrush: aBrush	self hasCallback ifFalse: [^self].	aBrush on: #year of: self! !!WADateInput methodsFor: 'private callbacks' stamp: 'mb 11/4/2006 10:20'!day	^day! !!WADateInput methodsFor: 'private callbacks' stamp: 'lr 10/28/2007 14:42'!day: anIntegerOrString	day := [anIntegerOrString asNumber] on: Error do: [:e | 1]! !!WADateInput methodsFor: 'private' stamp: 'mb 11/3/2006 09:57'!defaultOptions	^#(month day year)! !!WADateInput methodsFor: 'private callbacks' stamp: 'mb 11/4/2006 10:20'!month	^month! !!WADateInput methodsFor: 'private callbacks' stamp: 'lr 10/28/2007 14:42'!month: anIntegerOrString	month := [anIntegerOrString asNumber] on: Error do: [:e | 1]! !!WADateInput methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!options	^options ifNil: [ self defaultOptions ]! !!WADateInput methodsFor: 'accessing' stamp: 'mb 11/3/2006 09:58'!options: anArray	"Valid values in the array : #year #month #day	Can be used to control what is shown and in what order	Default #(month day year)"	options := anArray! !!WADateInput methodsFor: 'private rendering' stamp: 'mb 7/10/2007 09:42'!renderDay	| brush |	brush := canvas textInput				id: (self id isNil						ifFalse: [self id , '-day']);				 value: day;				 yourself.	self addDayCallbackToBrush: brush.	brush attributeAt: 'size' put: 2;		 attributeAt: 'maxlength' put: 2! !!WADateInput methodsFor: 'private rendering' stamp: 'lr 10/28/2007 14:42'!renderMonth	| brush |	brush := canvas select		id: self id;		list: (1 to: 12);		selected: month;		yourself.	self addMonthCallbackToBrush: brush.	brush		labels: [:ea | Date nameOfMonth: ea]! !!WADateInput methodsFor: 'private rendering' stamp: 'lr 10/28/2007 14:42'!renderYear	| brush |	brush := (canvas textInput)		id: (self id isNil ifTrue: [nil] ifFalse: [self id , '-year']);		value: year;		yourself.	self addYearCallbackToBrush: brush.	brush		attributeAt: 'size' put: 4;		attributeAt: 'maxlength' put: 4! !!WADateInput methodsFor: 'private callbacks' stamp: 'pmm 9/11/2007 06:44'!setValueWithNewDate	^value := Date		newDay: ((day min: (Month daysInMonth: month forYear: year)) max: 1)		monthNumber: month		year: year! !!WADateInput methodsFor: 'public' stamp: 'lr 10/28/2007 14:42'!with: aBlock	value isNil ifTrue: [value := Date today].	day := value dayOfMonth.	month := value monthIndex.	year := value year.	self options		do: [:each | self perform: ('render' , each asLowercase capitalized) asSymbol ]		separatedBy: [ canvas space ].	self addCallback! !!WADateInput methodsFor: 'private callbacks' stamp: 'mb 11/4/2006 10:20'!year	^year! !!WADateInput methodsFor: 'private callbacks' stamp: 'lr 10/28/2007 14:42'!year: anIntegerOrString	year := [anIntegerOrString asNumber] on: Error do: [:e | 1900]! !!WATimeInput methodsFor: 'private rendering' stamp: 'mb 7/6/2007 18:52'!addCallback	self hasCallback		ifFalse:			[canvas flush.			^ self].	canvas hiddenInput		callback: [callbackBlock value: self setValueWithNewTime];		 with: nil! !!WATimeInput methodsFor: 'private callbacks' stamp: 'lr 10/28/2007 14:42'!addHoursCallbackToBrush: aBrush	self hasCallback ifFalse: [^self].	aBrush on: #hours of: self! !!WATimeInput methodsFor: 'private callbacks' stamp: 'lr 10/28/2007 14:42'!addMinutesCallbackToBrush: aBrush	self hasCallback ifFalse: [^self].	aBrush on: #minutes of: self! !!WATimeInput methodsFor: 'private callbacks' stamp: 'lr 10/28/2007 14:42'!addSecondsCallbackToBrush: aBrush	self hasCallback ifFalse: [^self].	aBrush on: #seconds of: self! !!WATimeInput methodsFor: 'private callbacks' stamp: 'lr 10/28/2007 14:42'!hours	^hours! !!WATimeInput methodsFor: 'private callbacks' stamp: 'lr 10/28/2007 14:42'!hours: anIntegerOrString	hours := [anIntegerOrString asNumber] on: Error do: [:e | 0]! !!WATimeInput methodsFor: 'initialize-release' stamp: 'pmm 9/12/2006 19:18'!initialize	super initialize.	self withoutSeconds! !!WATimeInput methodsFor: 'private callbacks' stamp: 'mb 11/4/2006 10:21'!minutes	^minutes! !!WATimeInput methodsFor: 'private callbacks' stamp: 'lr 10/28/2007 14:42'!minutes: anIntegerOrString	minutes := [anIntegerOrString asNumber] on: Error do: [:e | 0]! !!WATimeInput methodsFor: 'private rendering' stamp: 'lr 3/27/2007 17:28'!renderHours	| brush |	brush := canvas textInput		id: self id;		value: hours asTwoCharacterString;		yourself.	self addHoursCallbackToBrush: brush.	brush		attributeAt: 'size' put: 2;		attributeAt: 'maxlength' put: 2! !!WATimeInput methodsFor: 'private rendering' stamp: 'mb 7/10/2007 09:42'!renderMinutes	| brush |	brush := canvas textInput				id: (self id isNil						ifFalse: [self id , '-mins']);				 value: minutes asTwoCharacterString;				 yourself.	self addMinutesCallbackToBrush: brush.	brush attributeAt: 'size' put: 2;		 attributeAt: 'maxlength' put: 2! !!WATimeInput methodsFor: 'private rendering' stamp: 'mb 7/10/2007 09:42'!renderSeconds	| brush |	brush := canvas textInput				id: (self id isNil						ifFalse: [self id , '-secs']);				 value: seconds asTwoCharacterString;				 yourself.	self addSecondsCallbackToBrush: brush.	brush attributeAt: 'size' put: 2;		 attributeAt: 'maxlength' put: 2! !!WATimeInput methodsFor: 'private callbacks' stamp: 'mb 11/4/2006 10:21'!seconds	^seconds! !!WATimeInput methodsFor: 'private callbacks' stamp: 'lr 10/28/2007 14:42'!seconds: anIntegerOrString	seconds := [anIntegerOrString asNumber] on: Error do: [:e | 0]! !!WATimeInput methodsFor: 'private callbacks' stamp: 'lr 10/28/2007 14:42'!setValueWithNewTime	^value := Time				hour: hours				minute: (minutes min: 59)				second: (seconds min: 59)! !!WATimeInput methodsFor: 'public api' stamp: 'lr 10/28/2007 14:42'!with: aBlock	value isNil ifTrue: [value := Time now].	hours := value hour.	minutes := value minutes.	seconds := value seconds.	self renderHours.	canvas space; text: ':'; space.	self renderMinutes.	withSeconds ifTrue:		[canvas space; text: ':'; space.		self renderSeconds]	ifFalse:		[seconds := 0].	self addCallback! !!WATimeInput methodsFor: 'accessing' stamp: 'mb 2/6/2006 09:55'!withSeconds	withSeconds := true! !!WATimeInput methodsFor: 'accessing' stamp: 'mb 2/6/2006 09:56'!withoutSeconds	withSeconds := false! !!WAAnchorTag methodsFor: 'callbacks' stamp: 'lr 8/17/2007 15:07'!callback: aBlock	self url addParameter: (canvas callbacks registerActionCallback: aBlock)! !!WAAnchorTag methodsFor: 'deprecated' stamp: 'lr 8/17/2007 15:42'!canHaveShortcut	^ true! !!WAAnchorTag methodsFor: 'documents' stamp: 'lr 8/17/2007 15:08'!document: aDocument	self document: aDocument mimeType: nil! !!WAAnchorTag methodsFor: 'documents' stamp: 'lr 8/17/2007 15:08'!document: aDocument mimeType: mimeType	self document: aDocument mimeType: mimeType fileName: nil! !!WAAnchorTag methodsFor: 'documents' stamp: 'lr 8/17/2007 15:09'!document: aDocument mimeType: mimeType fileName: fileName	self url: (canvas context urlForDocument: aDocument mimeType: mimeType fileName: fileName)! !!WAAnchorTag methodsFor: 'url' stamp: 'lr 8/17/2007 15:16'!extraParameters: aCollection	self url addParameter: aCollection! !!WAAnchorTag methodsFor: 'url' stamp: 'pmm 10/7/2007 14:32'!extraPath: aString	self url addToPath: aString! !!WAAnchorTag methodsFor: 'url' stamp: 'lr 8/17/2007 15:16'!fragment: aString	self url fragment: aString! !!WAAnchorTag methodsFor: 'deprecated' stamp: 'lr 8/17/2007 15:43'!ignoreURL	"does nothing when clicked"	^ self onClick: 'return false'! !!WAAnchorTag methodsFor: 'deprecated' stamp: 'lr 8/17/2007 15:24'!mailto: aString	self deprecatedApi.	self url: 'mailto:' , aString; with: aString! !!WAAnchorTag methodsFor: 'attributes' stamp: 'lr 8/17/2007 15:04'!name: aString	self attributes at: 'name' put: aString! !!WAAnchorTag methodsFor: 'public' stamp: 'lr 10/28/2007 14:42'!navigation	"Makes the receiving anchor a purely navigational link, this is it won't redirect after processing the callbacks but directly process with the render phase. Don't use this feature if you change your model in the callback'."	self url addParameter: '_n'! !!WAAnchorTag methodsFor: 'deprecated' stamp: 'lr 8/17/2007 15:19'!newTarget	self deprecatedApi.	self target: '_new'! !!WAAnchorTag methodsFor: 'callbacks' stamp: 'lr 8/17/2007 15:07'!on: aSymbol of: anObject	self callback: [ anObject perform: aSymbol ].	self with: (self labelForSelector: aSymbol of: anObject)! !!WAAnchorTag methodsFor: 'deprecated' stamp: 'lr 8/17/2007 15:19'!rel: aString	self deprecatedApi.	self relationship: aString! !!WAAnchorTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!relationship: aString	self attributes at: 'rel' put: aString! !!WAAnchorTag methodsFor: 'url' stamp: 'lr 8/17/2007 15:25'!resourceUrl: aString	self url: (canvas context absoluteUrlForResource: aString)! !!WAAnchorTag methodsFor: 'javascript' stamp: 'lr 6/5/2009 17:26'!submitFormNamed: aString	"Submit the form with the id aString and evaluate the callback of the receiver. Note that this code might break, if custom URL parameters are introduced."	| callback |	callback := self url parameters associations		detect: [ :assoc | assoc value isNil and: [ assoc key allSatisfy: [ :each | each isDigit ] ] ]		ifNone: [ nil ].	callback isNil		ifTrue: [ super submitFormNamed: aString ]		ifFalse: [ self onClick: 'submitFormTriggeringCallback(' , aString displayString printString , ',' , callback key printString , ',"href");return false' ]! !!WAAnchorTag methodsFor: 'private' stamp: 'lr 8/17/2007 15:15'!tag	^ 'a'! !!WAAnchorTag methodsFor: 'deprecated' stamp: 'lr 8/17/2007 15:19'!target: aString	self deprecatedApi.	self attributeAt: 'target' put: aString! !!WAAnchorTag methodsFor: 'deprecated' stamp: 'lr 8/17/2007 15:19'!text: aString	self deprecatedApi.	self with: aString! !!WAAnchorTag methodsFor: 'accessing' stamp: 'lr 8/17/2007 15:17'!url	^ url ifNil: [ url := canvas context actionUrl copy ]! !!WAAnchorTag methodsFor: 'accessing' stamp: 'lr 8/17/2007 15:06'!url: aString	url := aString! !!WAAnchorTag methodsFor: 'public' stamp: 'lr 8/17/2007 15:11'!with: aBlock	url isNil		ifFalse: [ self attributes at: 'href' put: url ]		ifTrue: [			((self attributes includesKey: 'href') or: [ self attributes includesKey: 'name' ])				ifFalse: [ self attributes at: 'href' put: 'javascript:void(0)' ] ].	super with: aBlock! !!WAImageMapTag methodsFor: 'callbacks' stamp: 'lr 10/28/2007 14:42'!callback: aBlock	"The parameter for the image-map callback must be the last one, as the web-browser will use the same name and replace it with the coordinates."	aBlock fixCallbackTemps.	self url		addParameter: (canvas callbacks registerCallback: [ :value |			aBlock value: (self parseImageMap: value) ])		value: ''! !!WAImageMapTag methodsFor: 'private' stamp: 'lr 8/17/2007 18:58'!parseImageMap: aString	| stream x y |	('?*,*' match: aString) ifFalse: [ ^ nil ].	stream := aString readStream.	stream upTo: $?.	x := stream upTo: $,.	y := stream upToEnd.	^ x asNumber @ y asNumber! !!WAPopupAnchorTag methodsFor: 'deprecated' stamp: 'lr 7/4/2007 20:34'!beDependent	self deprecatedApi.	self dependent: true! !!WAPopupAnchorTag methodsFor: 'deprecated' stamp: 'lr 7/4/2007 20:34'!beResizable	self deprecatedApi.	self resizable: true! !!WAPopupAnchorTag methodsFor: 'features' stamp: 'lr 7/4/2007 20:32'!dependent: aBoolean	"Specifies whether the new window is closed as well when the parent window gets closed."	features at: #dependent put: aBoolean! !!WAPopupAnchorTag methodsFor: 'features' stamp: 'lr 10/28/2007 14:42'!extent: aPoint	"Specifies the width and height of the new window."	self width: aPoint x; height: aPoint y! !!WAPopupAnchorTag methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!featureString	^ String streamContents: [ :stream |		features associations			do: [ :assoc |				stream nextPutAll: assoc key; nextPut: $=.				stream nextPutAll: (assoc value == true					ifTrue: [ 'yes' ]					ifFalse: [						assoc value == false							ifTrue: [ 'no' ]							ifFalse: [ assoc value displayString ] ]) ]			separatedBy: [ stream nextPut: $, ] ]! !!WAPopupAnchorTag methodsFor: 'features' stamp: 'lr 10/28/2007 14:42'!height: anInteger	"Specifies the height of the new window."	features at: #height put: anInteger! !!WAPopupAnchorTag methodsFor: 'initialization' stamp: 'lr 7/4/2007 20:16'!initialize	super initialize.	name := '_blank'.	features := Dictionary new! !!WAPopupAnchorTag methodsFor: 'features' stamp: 'lr 10/28/2007 14:42'!left: anInteger	"Specifies the x coordinate of the top left corner of the new window. "	features at: #left put: anInteger! !!WAPopupAnchorTag methodsFor: 'features' stamp: 'lr 7/4/2007 20:24'!location: aBoolean	"Specifies whether to display the address line in the new window."	features at: #location put: aBoolean! !!WAPopupAnchorTag methodsFor: 'features' stamp: 'lr 7/4/2007 20:25'!menubar: aBoolean	"Specifies whether to display the browser menu bar."	features at: #menubar put: aBoolean! !!WAPopupAnchorTag methodsFor: 'accessing' stamp: 'lr 7/4/2007 20:22'!name	^ name! !!WAPopupAnchorTag methodsFor: 'accessing' stamp: 'lr 7/4/2007 19:56'!name: aString	"String specifying the name of the new window. If a window with this name already exists, then the new content will be displayed in that existing window, rather than creating a new one."	name := aString! !!WAPopupAnchorTag methodsFor: 'features' stamp: 'lr 10/28/2007 14:42'!position: aPoint	"Specifies the x and y coordinates of the top left corner of the new window."	self left: aPoint x; top: aPoint y! !!WAPopupAnchorTag methodsFor: 'features' stamp: 'lr 7/4/2007 20:25'!resizable: aBoolean	"Specifies whether the new window is resizable."	features at: #resizable put: aBoolean! !!WAPopupAnchorTag methodsFor: 'features' stamp: 'lr 7/4/2007 20:25'!scrollbars: aBoolean	"Specifies whether the new window should have scrollbars."	features at: #scrollbars put: aBoolean! !!WAPopupAnchorTag methodsFor: 'deprecated' stamp: 'lr 7/4/2007 20:34'!showScrollbars	self deprecatedApi.	self scrollbars: true! !!WAPopupAnchorTag methodsFor: 'deprecated' stamp: 'lr 7/4/2007 20:35'!showToolbar	self deprecatedApi.	self toolbar: true! !!WAPopupAnchorTag methodsFor: 'features' stamp: 'lr 7/4/2007 20:24'!status: aBoolean	"Specifies whether to display the browser status bar."	features at: #status put: aBoolean! !!WAPopupAnchorTag methodsFor: 'features' stamp: 'lr 7/4/2007 20:24'!toolbar: aBoolean	"Specifies whether to display the toolbar in the new window."	features at: #toolbar put: aBoolean! !!WAPopupAnchorTag methodsFor: 'features' stamp: 'lr 10/28/2007 14:42'!top: anInteger	"Specifies the y coordinate of the top left corner of the new window. "	features at: #top put: anInteger! !!WAPopupAnchorTag methodsFor: 'features' stamp: 'lr 10/28/2007 14:42'!width: anInteger	"Specifies the width of the new window."	features at: #width put: anInteger! !!WAPopupAnchorTag methodsFor: 'public' stamp: 'lr 7/4/2007 20:33'!with: aBlock	self onClick: 'window.open(this.href,' , self name printString , ',' , self featureString printString , ');return false'.	super with: aBlock! !!WABreakTag methodsFor: 'testing' stamp: 'lr 3/26/2007 21:10'!isClosed	^ true! !!WABreakTag methodsFor: 'accessing' stamp: 'lr 3/26/2007 21:10'!tag	^ 'br'! !!WACollectionTag methodsFor: 'adding' stamp: 'lr 6/6/2007 13:22'!add: anObject	self list add: anObject! !!WACollectionTag methodsFor: 'adding' stamp: 'lr 6/6/2007 13:22'!addAll: aCollection	self list addAll: aCollection! !!WACollectionTag methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!before	super before.	self hasList ifTrue: [		self list do: [ :each |			self				renderListItem: each				labelled: (self labelForOption: each) ] ]! !!WACollectionTag methodsFor: 'callbacks' stamp: 'lr 6/7/2007 07:48'!callback: aBlock	callbackBlock := aBlock fixCallbackTemps! !!WACollectionTag methodsFor: 'testing' stamp: 'lr 6/7/2007 07:46'!hasCallback	^ callbackBlock notNil! !!WACollectionTag methodsFor: 'testing' stamp: 'lr 6/6/2007 13:30'!hasList	^ list notNil and: [ list notEmpty ]! !!WACollectionTag methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!isSelected: anObject	"Test if anObject is currently selected." 	^ selected = anObject! !!WACollectionTag methodsFor: 'private' stamp: 'lr 6/6/2007 13:53'!labelForOption: anObject	^ labelBlock isNil		ifTrue: [ anObject ]		ifFalse: [ labelBlock value: anObject ]! !!WACollectionTag methodsFor: 'callbacks' stamp: 'lr 10/28/2007 14:42'!labels: aBlock	"Allows to customize the rendering of list items by passing a one argument block that converts each option to a string. If you need to do custom html rendering for the options use #with: or override #renderOn: in your objects."	labelBlock := aBlock fixCallbackTemps! !!WACollectionTag methodsFor: 'accessing' stamp: 'lr 6/6/2007 13:22'!list	^ list ifNil: [ list := OrderedCollection new ]! !!WACollectionTag methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!list: aCollection	"Append aCollection of items to display. The rendering can be customized using #labels:."	aCollection ifNotNil: [ self addAll: aCollection ]! !!WACollectionTag methodsFor: 'callbacks' stamp: 'lr 6/7/2007 07:48'!on: aSelector of: anObject	self selected: (anObject perform: aSelector).	self callback: [ :value | anObject perform: aSelector asMutator with: value ]! !!WACollectionTag methodsFor: 'private' stamp: 'lr 6/7/2007 07:50'!performCallback: anObject	self hasCallback ifTrue: [ callbackBlock value: anObject ]! !!WACollectionTag methodsFor: 'private' stamp: 'lr 6/7/2007 07:56'!renderListItem: anObject labelled: aString	self subclassResponsibility! !!WACollectionTag methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!selected: anObject	"Set anObject to be selected."	selected := anObject! !!WAListTag methodsFor: 'private' stamp: 'lr 6/7/2007 08:01'!renderListItem: anObject labelled: aString	canvas listItem		class: 'option-selected' if: (self isSelected: anObject);		with: [			self hasCallback				ifFalse: [ canvas render: aString ]				ifTrue: [					canvas anchor						callback: [ self performCallback: anObject ];						with: aString ] ]! !!WAOrderedListTag methodsFor: 'accessing' stamp: 'lr 4/9/2007 17:12'!tag	^ 'ol'! !!WAUnorderedListTag methodsFor: 'accessing' stamp: 'lr 4/9/2007 17:12'!tag	^ 'ul'! !!WAMultiSelectTag methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!closeTag	super closeTag.	self hasCallback ifFalse: [ ^ self ].	canvas insert: [		canvas hiddenInput callback: [			self hasCallback				ifTrue: [ callbackBlock value: selected ] ] ]! !!WAMultiSelectTag methodsFor: 'private' stamp: 'lr 6/6/2007 16:18'!dispatchCallback	^ canvas callbacks registerMultiDispatchCallback! !!WAMultiSelectTag methodsFor: 'testing' stamp: 'lr 6/6/2007 16:14'!isSelected: anObject	^ selected notNil and: [ selected includes: anObject ]! !!WAMultiSelectTag methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!openTag	self hasCallback ifTrue: [		canvas insert: [			canvas hiddenInput				callback: [ selected := OrderedCollection new ] ] ].	self attributes at: 'multiple' put: true.	super openTag! !!WAMultiSelectTag methodsFor: 'private' stamp: 'lr 6/6/2007 18:37'!performCallback: anObject	selected add: anObject! !!WASelectTag methodsFor: 'deprecated' stamp: 'lr 6/7/2007 07:54'!beMultiple	self deprecatedApi: 'Use #multiSelect (constructure-method) instead of #beMultiple'.	self primitiveChangeClassTo: WAMultiSelectTag new! !!WASelectTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!beOptional	"This adds a nil item to #list: which has the semantic of no selection. #optionalLabel: is the label for nil. This only really makes sense in single selection mode."	isOptional := true! !!WASelectTag methodsFor: 'deprecated' stamp: 'lr 6/7/2007 07:54'!beSingle	self deprecatedApi: 'Use #select (constructure-method) instead of #beSingle'.	self primitiveChangeClassTo: WASelectTag new! !!WASelectTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!beSubmitOnChange	"Submit the form in the user selects a value."	self onChange: 'submit()'! !!WASelectTag methodsFor: 'private' stamp: 'lr 6/6/2007 17:44'!before	self isOptional ifTrue: [ self renderOptional ].	super before! !!WASelectTag methodsFor: 'private' stamp: 'lr 6/6/2007 16:17'!dispatchCallback	^ canvas callbacks registerDispatchCallback! !!WASelectTag methodsFor: 'callbacks' stamp: 'lr 6/6/2007 13:38'!enabled: aBlock	"Enable only those elements for selection for whom aBlock return true."	enabledBlock := aBlock fixCallbackTemps! !!WASelectTag methodsFor: 'initialization' stamp: 'lr 6/6/2007 17:43'!initialize	super initialize.	isOptional := false! !!WASelectTag methodsFor: 'testing' stamp: 'lr 6/6/2007 16:21'!isEnabled: anObject	"Test if anObject is enabled." 	^ enabledBlock isNil or: [ enabledBlock value: anObject ]! !!WASelectTag methodsFor: 'testing' stamp: 'lr 6/6/2007 17:42'!isOptional	^ isOptional! !!WASelectTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!name: aString	"This attribute assigns the control name."	self attributes at: 'name' put: aString! !!WASelectTag methodsFor: 'private' stamp: 'lr 6/6/2007 16:23'!openTag	self attributes at: 'name' ifAbsentPut: [ self dispatchCallback ].	super openTag! !!WASelectTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!optionalLabel: aString	"The label for the nil element. See #beOptional."	optionalLabel := aString! !!WASelectTag methodsFor: 'private' stamp: 'obi 9/2/2009 07:36'!renderListItem: anObject labelled: aString	| option |	option := canvas option.	self hasCallback		ifTrue: [ option callback: [ self performCallback: anObject ] ].	titleBlock isNil		ifFalse: [ option title: (self titleForOption: anObject) ].	option		selected: (self isSelected: anObject);		disabled: (self isEnabled: anObject) not;		with: aString! !!WASelectTag methodsFor: 'private' stamp: 'lr 6/7/2007 07:58'!renderOptional	self renderListItem: nil labelled: optionalLabel! !!WASelectTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!size: aNumber	"If a SELECT element is presented as a scrolled list box, this attribute specifies the number of rows in the list that should be visible at the same time. Visual user agents are not required to present a SELECT element as a list box; they may use any other mechanism, such as a drop-down menu."	self attributes at: 'size' put: aNumber! !!WASelectTag methodsFor: 'accessing' stamp: 'ac 3/17/2005 16:44'!tag	^ 'select'! !!WASelectTag methodsFor: 'private' stamp: 'obi 9/2/2009 07:36'!titleForOption: anObject	^ titleBlock isNil		ifTrue: [ anObject ]		ifFalse: [ titleBlock value: anObject ]! !!WASelectTag methodsFor: 'private' stamp: 'obi 9/2/2009 07:36'!titles: aOneArgumentBlock	"The given block will be used to generated title attributes for any of the options."	titleBlock := aOneArgumentBlock fixCallbackTemps! !!WADivTag methodsFor: 'public api' stamp: 'avi 6/3/2005 15:40'!clear	self class: 'clear'.	self with: [canvas space]! !!WADivTag methodsFor: 'accessing' stamp: 'avi 6/3/2005 15:39'!tag	^ 'div'! !!WAFieldSetTag methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!before	legend ifNotNil: [canvas legend: legend]! !!WAFieldSetTag methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!legend: aString	legend := aString! !!WAFieldSetTag methodsFor: 'accessing' stamp: 'mb 3/8/2006 17:44'!tag	^ 'fieldset'! !!WAAbstractTextAreaTag methodsFor: 'callbacks' stamp: 'lr 2/25/2007 23:11'!callback: aBlock	self name: (canvas callbacks registerCallback: aBlock).	self value: self value! !!WAAbstractTextAreaTag methodsFor: 'javascript' stamp: 'lr 6/24/2007 10:03'!exampleText: aString	(self value isEmptyOrNil or: [ self value = aString ]) ifFalse: [ ^ self ].	self onFocus: 'if(value==' , aString printString , '){value='''';style.color=null}'.	self style: 'color: #aaa'; value: aString! !!WAAbstractTextAreaTag methodsFor: 'javascript' stamp: 'lr 10/28/2007 14:42'!setCursorPosition: anInteger	self setSelectionFrom: anInteger to: anInteger! !!WAAbstractTextAreaTag methodsFor: 'javascript' stamp: 'pmm 5/23/2007 23:46'!setSelectionFrom: aStartInteger to: aStopInteger	"Insert the javascript for setting the selection"	| aStream |	self ensureId.	aStream := (String new: 30) writeStream.	aStream		nextPutAll: 'setSelection(''';		nextPutAll: self id;		nextPutAll: ''''.	aStartInteger isNumber		ifTrue: [aStream nextPut: $,; print: aStartInteger]		ifFalse: [aStream nextPutAll: ',1'].	aStopInteger isNumber		ifTrue: [aStream nextPut: $,; print: aStopInteger ].	aStream nextPut: $).	self session addLoadScript: aStream contents! !!WATextAreaTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!columns: anInteger	"This attribute specifies the visible width in average character widths. User agents may wrap visible text lines to keep long lines visible without the need for scrolling."	self attributeAt: 'cols' put: anInteger! !!WATextAreaTag methodsFor: 'testing' stamp: 'lr 3/26/2007 21:12'!isClosed	^ false! !!WATextAreaTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!rows: anInteger	"This attribute specifies the number of visible text lines. If more are entered, the widget scrolls."	self attributeAt: 'rows' put: anInteger! !!WATextAreaTag methodsFor: 'accessing' stamp: 'ac 4/13/2005 01:51'!tag	^ 'textarea'! !!WATextAreaTag methodsFor: 'accessing' stamp: 'lr 9/4/2007 15:53'!value	^ value! !!WATextAreaTag methodsFor: 'accessing' stamp: 'ac 8/30/2005 16:26'!value: aString	value := aString! !!WATextAreaTag methodsFor: 'public' stamp: 'lr 9/4/2007 15:57'!with: aBlock	super with: (value ifNil: [ aBlock ])! !!WAPasswordInputTag methodsFor: 'accessing' stamp: 'lr 9/23/2005 17:33'!type	^ 'password'! !!WATextInputTag methodsFor: 'attributes' stamp: 'pmm 4/23/2007 21:15'!maxLength: aNumber	"This attribute specifies the maximum number of characters the user may enter. This number may exceed the specified #size:, in which case the user agent should offer a scrolling mechanism. The default value for this attribute is an unlimited number."	self attributeAt: 'maxlength' put: aNumber! !!WATextInputTag methodsFor: 'attributes' stamp: 'pmm 4/23/2007 21:16'!size: aNumber	"This attribute tells the user agent the initial width of the widget. The width is given in number of characters."	self attributeAt: 'size' put: aNumber! !!WATextInputTag methodsFor: 'accessing' stamp: 'lr 9/23/2005 13:50'!type	^ 'text'! !!WATextInputTag methodsFor: 'public' stamp: 'lr 6/5/2009 17:26'!with: anObject	anObject isNil		ifFalse: [ self value: anObject displayString ].	super with: nil! !!WAButtonTag methodsFor: 'accessing' stamp: 'pmm 7/28/2007 08:40'!bePush	"Creates a push button. Push buttons have no default behavior. Each push button may have client-side scripts associated with the element's event attributes. When an event occurs (e.g., the user presses the button, releases it, etc.), the associated script is triggered."	type := 'button'! !!WAButtonTag methodsFor: 'accessing' stamp: 'pmm 7/28/2007 08:34'!beReset	"Creates a reset button. When activated it resets all controls to their initial values."	type := 'reset'! !!WAButtonTag methodsFor: 'accessing' stamp: 'pmm 7/28/2007 08:33'!beSubmit	"Creates a submit button. When activated, a submit button submits a form. A form may contain more than one submit button. This is the default."	type := 'submit'! !!WAButtonTag methodsFor: 'callbacks' stamp: 'lr 4/11/2008 08:46'!callback: aBlock	self name: (canvas callbacks registerActionCallback: aBlock)! !!WAButtonTag methodsFor: 'testing' stamp: 'lr 4/11/2008 08:48'!canHaveShortcut	^ true! !!WAButtonTag methodsFor: 'initialize-release' stamp: 'pmm 7/28/2007 08:34'!initialize	super initialize.	self beSubmit! !!WAButtonTag methodsFor: 'testing' stamp: 'lr 6/13/2007 21:13'!isClosed	^ false! !!WAButtonTag methodsFor: 'callbacks' stamp: 'lr 4/11/2008 08:46'!on: aSymbol of: anObject	self value: (self labelForSelector: aSymbol of: anObject).	self callback: (MessageSend receiver: anObject selector: aSymbol)! !!WAButtonTag methodsFor: 'accessing' stamp: 'lr 6/13/2007 21:13'!tag	^ 'button'! !!WAButtonTag methodsFor: 'accessing' stamp: 'lr 8/8/2007 14:48'!type	^ type! !!WAButtonTag methodsFor: 'accessing' stamp: 'lr 9/18/2007 08:18'!value	^ value! !!WAButtonTag methodsFor: 'accessing' stamp: 'lr 9/18/2007 08:19'!value: aString	value := aString! !!WAButtonTag methodsFor: 'public' stamp: 'lr 9/18/2007 08:19'!with: aBlock	super with: (value ifNil: [ aBlock ])! !!WACheckboxTag methodsFor: 'private' stamp: 'pmm 4/17/2007 16:32'!after	canvas hiddenInput callback: [		callback value: value.		value := false ]! !!WACheckboxTag methodsFor: 'callbacks' stamp: 'avi 9/19/2006 14:31'!callback: aBlock	value := false.	callback := aBlock fixCallbackTemps.	super callback: [value := true]! !!WACheckboxTag methodsFor: 'testing' stamp: 'lr 4/11/2008 08:48'!canHaveShortcut	^ true! !!WACheckboxTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!onTrue: trueBlock onFalse: falseBlock	trueBlock fixCallbackTemps. falseBlock fixCallbackTemps.	self callback: [ :v | v ifTrue: [ trueBlock value ] ifFalse: [ falseBlock value ] ]! !!WACheckboxTag methodsFor: 'accessing' stamp: 'lr 9/23/2005 13:44'!type	^ 'checkbox'! !!WACheckboxTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!value: aBoolean	self attributeAt: 'checked' put: aBoolean! !!WAFileUploadTag methodsFor: 'attributes' stamp: 'pmm 5/2/2007 21:50'!accept: aString	"This attribute specifies a comma-separated list of content types that a server processing this form will handle correctly. User agents may use this information to filter out non-conforming files when prompting a user to select files to be sent to the server"	self attributes at: 'accept' put: aString! !!WAFileUploadTag methodsFor: 'callbacks' stamp: 'lr 10/28/2007 14:42'!callback: aBlock	aBlock fixCallbackTemps.	super callback: [ :file | aBlock value: (file = '' ifFalse: [ file ]) ]! !!WAFileUploadTag methodsFor: 'callbacks' stamp: 'lr 10/28/2007 14:42'!on: selector of: anObject	self callback: [ :value | anObject perform: selector asMutator with: value ]! !!WAFileUploadTag methodsFor: 'accessing' stamp: 'lr 9/23/2005 13:45'!type	^ 'file'! !!WAFormInputTag methodsFor: 'callbacks' stamp: 'lr 1/4/2007 09:35'!callback: aBlock	self name: (canvas callbacks registerCallback: aBlock)! !!WAFormInputTag methodsFor: 'testing' stamp: 'lr 3/26/2007 21:12'!isClosed	^ true! !!WAFormInputTag methodsFor: 'attributes' stamp: 'lr 1/4/2007 09:34'!name: aString	self attributes at: 'name' put: aString! !!WAFormInputTag methodsFor: 'callbacks' stamp: 'lr 1/4/2007 09:35'!on: selector of: anObject	self value: (anObject perform: selector).	self callback: [ :value | anObject perform: selector asMutator with: value ]! !!WAFormInputTag methodsFor: 'attributes' stamp: 'pmm 4/23/2007 21:24'!readonly: aBoolean	"When set to true, this boolean attribute prohibits changes to the widget."	self attributes at: 'readonly' put: aBoolean! !!WAFormInputTag methodsFor: 'javascript' stamp: 'pmm 5/10/2007 10:04'!setFocus	"Makes this element have the initial focus once the page is loaded aka autofocus."	self ensureId.	self session addLoadScript: 'setFocus(' , self id printString , ')'! !!WAFormInputTag methodsFor: 'attributes' stamp: 'lr 1/4/2007 09:34'!submitOnClick	self onClick: 'submit()'! !!WAFormInputTag methodsFor: 'accessing' stamp: 'ac 3/16/2005 12:08'!tag	^ 'input'! !!WAFormInputTag methodsFor: 'attributes' stamp: 'lr 1/4/2007 09:37'!text: aString	self value: aString! !!WAFormInputTag methodsFor: 'accessing' stamp: 'lr 9/23/2005 13:43'!type	^ nil! !!WAFormInputTag methodsFor: 'attributes' stamp: 'lr 1/4/2007 09:34'!type: aString	self attributes at: 'type' put: aString! !!WAFormInputTag methodsFor: 'attributes' stamp: 'lr 1/4/2007 09:34'!value	^ self attributes at: 'value'! !!WAFormInputTag methodsFor: 'attributes' stamp: 'lr 1/4/2007 09:34'!value: anObject	anObject ifNotNil: [ self attributes at: 'value' put: anObject ]! !!WAFormInputTag methodsFor: 'public' stamp: 'lr 11/16/2006 15:31'!with: aBlock	self type isNil ifFalse: [		self attributes at: 'type' ifAbsentPut: [ self type ].		self class: self type ].	super with: aBlock! !!WAHiddenInputTag methodsFor: 'accessing' stamp: 'lr 9/23/2005 17:45'!type	^ 'hidden'! !!WARadioButtonTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!beChecked	self attributeAt: 'checked' put: true! !!WARadioButtonTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!beUnchecked	self attributeAt: 'checked' put: false! !!WARadioButtonTag methodsFor: 'callbacks' stamp: 'pmm 1/8/2007 12:14'!callback: aBlock	self value: (canvas callbacks registerCallback: aBlock)! !!WARadioButtonTag methodsFor: 'testing' stamp: 'lr 4/11/2008 08:48'!canHaveShortcut	^ true! !!WARadioButtonTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!group: aRadioGroup	self name: aRadioGroup key! !!WARadioButtonTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!selected: aBoolean	self attributeAt: 'checked' put: aBoolean! !!WARadioButtonTag methodsFor: 'accessing' stamp: 'lr 9/23/2005 13:46'!type	^ 'radio'! !!WACancelButtonTag methodsFor: 'callbacks' stamp: 'lr 1/4/2007 09:33'!callback: aBlock	self name: (canvas callbacks registerCancelActionCallback: aBlock)! !!WAImageButtonTag methodsFor: 'attributes' stamp: 'lr 1/4/2007 09:33'!callback: aBlock	self name: (canvas callbacks registerImageCallback: aBlock)! !!WAImageButtonTag methodsFor: 'attributes' stamp: 'lr 1/4/2007 09:33'!extent: aPoint	self width: aPoint x; height: aPoint y! !!WAImageButtonTag methodsFor: 'attributes' stamp: 'lr 1/4/2007 09:33'!form: aForm	self extent: aForm extent.	self url: (canvas context urlForDocument: aForm)! !!WAImageButtonTag methodsFor: 'attributes' stamp: 'lr 8/3/2006 08:43'!height: aNumber	self attributes at: 'height' put: aNumber! !!WAImageButtonTag methodsFor: 'attributes' stamp: 'lr 4/10/2007 09:55'!resourceUrl: aString	self url: (canvas context absoluteUrlForResource: aString)! !!WAImageButtonTag methodsFor: 'accessing' stamp: 'lr 9/23/2005 13:49'!type	^ 'image'! !!WAImageButtonTag methodsFor: 'attributes' stamp: 'lr 1/4/2007 09:33'!url: aString	self attributes at: 'src' put: aString! !!WAImageButtonTag methodsFor: 'attributes' stamp: 'lr 8/3/2006 08:43'!width: aNumber	self attributes at: 'width' put: aNumber! !!WASubmitButtonTag methodsFor: 'callbacks' stamp: 'lr 1/4/2007 09:32'!callback: aBlock	self name: (canvas callbacks registerActionCallback: aBlock)! !!WASubmitButtonTag methodsFor: 'testing' stamp: 'lr 4/11/2008 08:48'!canHaveShortcut	^ true! !!WASubmitButtonTag methodsFor: 'callbacks' stamp: 'lr 1/4/2007 09:32'!on: aSymbol of: anObject	self value: (self labelForSelector: aSymbol of: anObject).	self callback: [ anObject perform: aSymbol ]! !!WASubmitButtonTag methodsFor: 'accessing' stamp: 'lr 9/23/2005 13:49'!type	^ 'submit'! !!WASubmitButtonTag methodsFor: 'public' stamp: 'lr 6/5/2009 17:26'!with: anObject	anObject isNil		ifFalse: [ self value: anObject displayString ].	super with: nil! !!WAFormTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!acceptCharset: aString	"This attribute specifies the list of character encodings for input data that is accepted by the server processing this form. The value is a space- and/or comma-delimited list of charset values. The client must interpret this list as an exclusive-or list, i.e., the server is able to accept any single character encoding per entity received.The default value for this attribute is the reserved string 'UNKNOWN'. User agents may interpret this value as the character encoding that was used to transmit the document containing this FORM element."	self attributeAt: 'accept-charset' put: aString! !!WAFormTag methodsFor: 'attributes' stamp: 'pmm 6/30/2007 00:33'!action: aString	"This attribute specifies a form processing agent. User agent behavior for a value other than an HTTP URI is undefined."	self attributeAt: 'action' put: aString! !!WAFormTag methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!after	canvas div: [		canvas context actionUrl parameters keysAndValuesDo: [ :k :v |			canvas hiddenInput				name: k;				value: v ] ]! !!WAFormTag methodsFor: 'private' stamp: 'lr 11/19/2007 09:46'!before	"Define the default action form buttons. Some implementation notes on this feature: (1) a tab-index of -1 is not valid XHTML, but most todays browser accept it and ignore the element in the tab-order. (2) Internet Explorer requires an additional text field (without other functionality) to make the default action work. Other browser should not include this text-field, as it prevents remembering form input."	| userAgent |	defaultAction ifNil: [ ^ nil ].	canvas div: [		canvas submitButton			tabIndex: -1;			value: 'Default';			callback: defaultAction;			style: 'position: absolute; top: -100em'.		userAgent := self session currentRequest userAgent.		(userAgent notNil and: [ userAgent includesSubString: 'MSIE' ]) ifTrue: [			canvas textInput				tabIndex: -1;				callback: [ :v | ];				style: 'position: absolute; top: -100em' ] ]! !!WAFormTag methodsFor: 'callbacks' stamp: 'pmm 9/15/2007 08:22'!defaultAction: aBlock	"The default action gets evaluated whenever the user presses submits	the form by pressing enter without having the focus on a specific	submit-button."	defaultAction := aBlock! !!WAFormTag methodsFor: 'initialize-release' stamp: 'pmm 6/30/2007 00:41'!initialize	super initialize.	self acceptCharset: WACurrentSession value charSet! !!WAFormTag methodsFor: 'attributes' stamp: 'pmm 6/30/2007 00:34'!method: aString	"This attribute specifies which HTTP method will be used to submit the form data set. Possible (case-insensitive) values are 'get' (the default) and 'post'."	self attributeAt: 'method' put: aString! !!WAFormTag methodsFor: 'attributes' stamp: 'pmm 6/30/2007 00:37'!multipart	"Sets the content type used to submit the form to the server (when the value of method is 'post') to multipart/form-data instead the default application/x-www-form-urlencoded. This should be used in combination with a WAFileUploadTag."	self attributeAt: 'enctype' put: 'multipart/form-data'! !!WAFormTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!multipart: aBoolean	"Sets the content type used to submit the form to the server.	true: sets the content type to multipart/form-data	false: leavess the content type to default application/x-www-form-urlencoded"	aBoolean ifTrue: [ self multipart ]! !!WAFormTag methodsFor: 'attributes' stamp: 'avi 6/9/2005 16:02'!name: aString	self attributeAt: 'name' put: aString! !!WAFormTag methodsFor: 'attributes' stamp: 'avi 3/21/2006 16:51'!noAutocomplete	self attributeAt: 'autocomplete' put: 'off'! !!WAFormTag methodsFor: 'attributes' stamp: 'lr 7/9/2006 18:57'!post	self method: 'post'! !!WAFormTag methodsFor: 'initialize-release' stamp: 'pmm 6/21/2007 20:57'!setParent: aBrush canvas: aCanvas	super setParent: aBrush canvas: aCanvas.	self post; action: aCanvas context actionUrl withoutParameters! !!WAFormTag methodsFor: 'private' stamp: 'avi 6/17/2004 11:29'!tag	^ 'form'! !!WAEditTag methodsFor: 'attributes' stamp: 'pmm 3/28/2007 10:37'!cite: aUrl	"The value of this attribute is a URI that designates a source document or message. This attribute is intended to point to information explaining why a document was changed."	self attributeAt: 'cite' put: aUrl! !!WAEditTag methodsFor: 'attributes' stamp: 'pmm 3/28/2007 10:38'!datetime: anObject	"The value of this attribute specifies the date and time when the change was made.	ISO date format"	self attributeAt: 'datetime' put: anObject! !!WAGenericTag class methodsFor: 'instance-creation' stamp: 'pmm 1/26/2007 23:05'!tag: aString	^ self new initializeWithTag: aString! !!WAGenericTag methodsFor: 'initialize-release' stamp: 'avi 6/13/2004 00:40'!initializeWithTag: aString	tag := aString! !!WAGenericTag methodsFor: 'accessing' stamp: 'avi 6/13/2004 00:40'!tag	^ tag! !!WAHeadingTag methodsFor: 'initialization' stamp: 'lr 6/6/2007 14:02'!initialize	super initialize.	self level1! !!WAHeadingTag methodsFor: 'accessing' stamp: 'lr 4/9/2007 18:26'!level	^ level! !!WAHeadingTag methodsFor: 'conveniance' stamp: 'lr 6/6/2007 14:02'!level1	level := 1! !!WAHeadingTag methodsFor: 'conveniance' stamp: 'lr 6/6/2007 14:02'!level2	level := 2! !!WAHeadingTag methodsFor: 'conveniance' stamp: 'lr 6/6/2007 14:02'!level3	level := 3! !!WAHeadingTag methodsFor: 'conveniance' stamp: 'lr 6/6/2007 14:02'!level4	level := 4! !!WAHeadingTag methodsFor: 'conveniance' stamp: 'lr 6/6/2007 14:02'!level5	level := 5! !!WAHeadingTag methodsFor: 'conveniance' stamp: 'lr 6/6/2007 14:02'!level6	level := 6! !!WAHeadingTag methodsFor: 'accessing' stamp: 'lr 6/6/2007 14:01'!level: anInteger	level := (anInteger max: 1) min: 6! !!WAHeadingTag methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!tag	^ 'h' , self level displayString! !!WAHorizontalRuleTag methodsFor: 'testing' stamp: 'lr 3/26/2007 21:10'!isClosed	^ true! !!WAHorizontalRuleTag methodsFor: 'accessing' stamp: 'lr 3/26/2007 21:08'!tag	^ 'hr'! !!WAIframeTag methodsFor: 'conveniance' stamp: 'pmm 5/23/2007 19:05'!contents: anObject	self url: (canvas urlForAction: [ self performRendering: anObject ])! !!WAIframeTag methodsFor: 'conveniance' stamp: 'lr 8/9/2006 08:34'!document: anObject	self document: anObject mimeType: nil! !!WAIframeTag methodsFor: 'conveniance' stamp: 'lr 8/9/2006 08:31'!document: anObject mimeType: aMimeString	self document: anObject mimeType: aMimeString fileName: nil! !!WAIframeTag methodsFor: 'conveniance' stamp: 'lr 10/28/2007 14:42'!document: anObject mimeType: aMimeString fileName: aFileNameString	self url: (canvas context		urlForDocument: anObject		mimeType: aMimeString		fileName: aFileNameString)! !!WAIframeTag methodsFor: 'attributes' stamp: 'pmm 9/22/2007 22:26'!height: anInteger	"The height of the inline frame."	self attributes at: 'height' put: anInteger! !!WAIframeTag methodsFor: 'attributes' stamp: 'pmm 9/22/2007 22:26'!name: aString	"This attribute assigns a name to the current frame. This name may be used as the target of subsequent links."	self attributes at: 'name' put: aString! !!WAIframeTag methodsFor: 'private' stamp: 'lr 5/31/2008 14:29'!performRendering: anObject	| innerContext docRoot session document response renderer |	innerContext := canvas context copy.	docRoot := WAHtmlRoot context: innerContext.	docRoot base target: '_top'.	session := WACurrentSession value.	document := session outputDocumentClass new.	response := WAResponse new.	response doNotCache.	document stream: response stream.	canvas context document: document.	docRoot open: document.	renderer := canvas species context: canvas context callbacks: canvas callbacks.	renderer render: anObject;		 flush.	docRoot close: document.	session returnResponse: response! !!WAIframeTag methodsFor: 'deprecated' stamp: 'lr 11/16/2006 15:32'!src: anUrl	self deprecatedApi.	self url: anUrl! !!WAIframeTag methodsFor: 'accessing' stamp: 'lr 3/8/2006 23:25'!tag	^ 'iframe'! !!WAIframeTag methodsFor: 'attributes' stamp: 'pmm 8/26/2006 00:06'!url: aString	self attributeAt: 'src' put: aString! !!WAIframeTag methodsFor: 'attributes' stamp: 'pmm 9/22/2007 22:26'!width: anInteger	"The width of the inline frame."	self attributes at: 'width' put: anInteger! !!WAImageTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!altText: aString	"The alt attribute provides a short description of the image."	self attributes at: 'alt' put: aString! !!WAImageTag methodsFor: 'accessing' stamp: 'lr 6/20/2007 10:52'!document: aDocument	self document: aDocument mimeType: nil! !!WAImageTag methodsFor: 'accessing' stamp: 'lr 6/20/2007 10:52'!document: aDocument mimeType: mimeType	self document: aDocument mimeType: mimeType fileName: nil! !!WAImageTag methodsFor: 'accessing' stamp: 'lr 6/20/2007 10:52'!document: aDocument mimeType: mimeType fileName: fileName	self url: (canvas context urlForDocument: aDocument mimeType: mimeType fileName: fileName)! !!WAImageTag methodsFor: 'accessing' stamp: 'lr 3/20/2007 14:26'!form: aForm	self document: aForm! !!WAImageTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!height: anInteger	self attributes at: 'height' put: anInteger! !!WAImageTag methodsFor: 'initialize-release' stamp: 'lr 6/20/2007 10:53'!initialize	super initialize.	self altText: ''! !!WAImageTag methodsFor: 'testing' stamp: 'lr 3/27/2007 11:06'!isClosed	^ true! !!WAImageTag methodsFor: 'accessing' stamp: 'lr 4/10/2007 09:56'!resourceUrl: aString	self url: (canvas context absoluteUrlForResource: aString)! !!WAImageTag methodsFor: 'initialize-release' stamp: 'pmm 4/7/2007 01:27'!setParent: aBrush canvas: aCanvas	super setParent: aBrush canvas: aCanvas.	(aBrush isKindOf: WAImageMapTag) ifTrue: [		"in case the parent is an image map we need to set this attribute"		self attributeAt: 'ismap' put: true ]! !!WAImageTag methodsFor: 'deprecated' stamp: 'lr 10/28/2007 14:42'!src: aString	self deprecatedApi.	self url: aString! !!WAImageTag methodsFor: 'private' stamp: 'ac 3/16/2005 12:00'!tag	^ 'img'! !!WAImageTag methodsFor: 'attributes' stamp: 'lr 6/20/2007 10:53'!url: aString	self attributes at: 'src' put: aString! !!WAImageTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!width: anInteger	self attributes at: 'width' put: anInteger! !!WALabelTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!for: aString	self attributeAt: 'for' put: aString! !!WALabelTag methodsFor: 'accessing' stamp: 'ac 7/9/2005 04:36'!tag	^ 'label'! !!WAObjectTag methodsFor: 'attributes' stamp: 'pmm 2/11/2007 19:27'!archive: aUrl	self attributeAt: 'archive' put: aUrl! !!WAObjectTag methodsFor: 'attributes' stamp: 'pmm 2/11/2007 19:25'!classId: aUrl	self attributeAt: 'classid' put: aUrl! !!WAObjectTag methodsFor: 'attributes' stamp: 'pmm 2/11/2007 19:26'!codebase: aUrl	self attributeAt: 'codebase' put: aUrl! !!WAObjectTag methodsFor: 'attributes' stamp: 'pmm 2/11/2007 19:28'!codetype: aString	self attributeAt: 'codetype' put: aString! !!WAObjectTag methodsFor: 'attributes' stamp: 'pmm 2/11/2007 19:28'!declare: aBoolean	self attributeAt: 'declare' put: aBoolean! !!WAObjectTag methodsFor: 'attributes' stamp: 'pmm 2/11/2007 19:57'!height: anInteger	self attributeAt: 'height' put: anInteger! !!WAObjectTag methodsFor: 'attributes' stamp: 'pmm 2/11/2007 19:29'!standby: aString	self attributeAt: 'standby' put: aString! !!WAObjectTag methodsFor: 'accessing' stamp: 'pmm 2/11/2007 19:24'!tag	^ 'object'! !!WAObjectTag methodsFor: 'attributes' stamp: 'pmm 2/11/2007 19:28'!type: aString	self attributeAt: 'type' put: aString! !!WAObjectTag methodsFor: 'attributes' stamp: 'pmm 2/11/2007 19:26'!url: aUrl	self attributeAt: 'data' put: aUrl! !!WAObjectTag methodsFor: 'attributes' stamp: 'pmm 2/11/2007 19:57'!width: anInteger	self attributeAt: 'width' put: anInteger! !!WAOptionGroupTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!label: aString	"This attribute specifies the label for the option group."	self attributes at: 'label' put: aString! !!WAOptionGroupTag methodsFor: 'accessing' stamp: 'pmm 4/24/2007 10:49'!tag	^ 'optgroup'! !!WAOptionTag methodsFor: 'callbacks' stamp: 'lr 6/6/2007 19:42'!callback: aBlock	self value: (canvas callbacks registerCallback: aBlock)! !!WAOptionTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!label: aString	"This attribute allows authors to specify a shorter label for an option than the content of the OPTION element. When specified, user agents should use the value of this attribute rather than the content of the OPTION element as the option label."	self attributes at: 'label' put: aString! !!WAOptionTag methodsFor: 'attributes' stamp: 'lr 6/6/2007 19:42'!selected: aBoolean	self attributes at: 'selected' put: aBoolean! !!WAOptionTag methodsFor: 'accessing' stamp: 'ac 3/17/2005 17:13'!tag	^ 'option'! !!WAOptionTag methodsFor: 'attributes' stamp: 'lr 6/6/2007 19:42'!value: aString	self attributes at: 'value' put: aString! !!WAParameterTag methodsFor: 'attributes' stamp: 'pmm 2/11/2007 20:04'!name: aString	self attributeAt: 'name' put: aString! !!WAParameterTag methodsFor: 'accessing' stamp: 'pmm 2/11/2007 20:12'!tag	^ 'param'! !!WAParameterTag methodsFor: 'attributes' stamp: 'pmm 2/11/2007 20:06'!type: aString	self attributeAt: 'type' put: aString! !!WAParameterTag methodsFor: 'attributes' stamp: 'pmm 2/11/2007 20:05'!value: aString	self attributeAt: 'value' put: aString! !!WARubyTextTag methodsFor: 'attributes' stamp: 'pmm 9/18/2006 19:01'!span: anInteger	self attributeAt: 'rbspan' put: anInteger! !!WARubyTextTag methodsFor: 'accessing' stamp: 'pmm 9/18/2006 19:00'!tag	^ 'rt'! !!WAScriptTag methodsFor: 'private' stamp: 'lr 3/27/2007 11:57'!after	self document nextPutAll: '/*]]>*/'! !!WAScriptTag methodsFor: 'private' stamp: 'lr 3/27/2007 11:56'!before	self document nextPutAll: '/*<!![CDATA[*/'! !!WAScriptTag methodsFor: 'attributes' stamp: 'pmm 9/22/2007 07:36'!defer	"When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no 'document.write' in javascript) and thus, the user agent can continue parsing and rendering."		self attributeAt: 'defer' put: true! !!WAScriptTag methodsFor: 'attributes' stamp: 'lr 4/10/2007 09:55'!resourceUrl: aString	self url: (canvas context absoluteUrlForResource: aString)! !!WAScriptTag methodsFor: 'accessing' stamp: 'dwj 6/10/2005 13:10'!tag	^ 'script'! !!WAScriptTag methodsFor: 'attributes' stamp: 'pmm 8/26/2006 00:05'!url: aString	self attributes at: 'src' put: aString! !!WAScriptTag methodsFor: 'public' stamp: 'lr 4/3/2007 10:39'!with: aString	self attributes at: 'type' ifAbsentPut: [ 'text/javascript' ].	super with: [ self document nextPutAll: aString displayString ]! !!WATableCellTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!align: aString	self attributes at: 'align' put: aString! !!WATableCellTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!character: aStringOrCharacter	self attributes at: 'char' put: aStringOrCharacter displayString! !!WATableCellTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!characterOffset: anInteger	self attributes at: 'charoff' put: anInteger! !!WATableCellTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!colSpan: anInteger	self attributes at: 'colspan' put: anInteger! !!WATableCellTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!rowSpan: anInteger	self attributes at: 'rowspan' put: anInteger! !!WATableCellTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!scope: aString	self attributes at: 'scope' put: aString! !!WATableCellTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!verticalAlign: aString	self attributes at: 'valign' put: aString! !!WATableDataTag methodsFor: 'accessing' stamp: 'ac 3/17/2005 22:09'!tag	^ 'td'! !!WATableHeadingTag methodsFor: 'accessing' stamp: 'ac 3/17/2005 22:10'!tag	^ 'th'! !!WATableColumnGroupTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!align: aString	self attributes at: 'align' put: aString! !!WATableColumnGroupTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!character: aStringOrCharacter	self attributes at: 'char' put: aStringOrCharacter displayString! !!WATableColumnGroupTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!characterOffset: anInteger	self attributes at: 'charoff' put: anInteger! !!WATableColumnGroupTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!span: anInteger	self attributes at: 'span' put: anInteger! !!WATableColumnGroupTag methodsFor: 'accessing' stamp: 'mb 12/8/2006 15:51'!tag	^ 'colgroup'! !!WATableColumnGroupTag methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!verticalAlign: aString	self attributes at: 'valign' put: aString! !!WATableColumnGroupTag methodsFor: 'attributes' stamp: 'mb 12/7/2006 20:22'!width: aNumber	self attributeAt: 'width' put: aNumber displayString! !!WATableColumnTag methodsFor: 'testing' stamp: 'lr 3/27/2007 11:06'!isClosed	^ true! !!WATableColumnTag methodsFor: 'accessing' stamp: 'mb 12/8/2006 15:51'!tag	^ 'col'! !!WATableTag methodsFor: 'deprecated' stamp: 'lr 10/28/2007 14:42'!align: aString	self deprecatedApi.	self attributes at: 'align' put: aString! !!WATableTag methodsFor: 'deprecated' stamp: 'lr 11/16/2006 15:33'!border: anInteger	self deprecatedApi.	self attributes at: 'border' put: anInteger! !!WATableTag methodsFor: 'attributes' stamp: 'lr 12/30/2006 00:11'!cellpadding: anInteger	self attributes at: 'cellpadding' put: anInteger! !!WATableTag methodsFor: 'attributes' stamp: 'lr 12/30/2006 00:11'!cellspacing: anInteger	self attributes at: 'cellspacing' put: anInteger! !!WATableTag methodsFor: 'attributes' stamp: 'pmm 4/8/2007 00:07'!frame: aString	"frame = void|above|below|hsides|lhs|rhs|vsides|box|border [CI]    This attribute specifies which sides of the frame surrounding a table will be visible. Possible values:        * void: No sides. This is the default value.        * above: The top side only.        * below: The bottom side only.        * hsides: The top and bottom sides only.        * vsides: The right and left sides only.        * lhs: The left-hand side only.        * rhs: The right-hand side only.        * box: All four sides.        * border: All four sides."	self attributes at: 'frame' put: aString! !!WATableTag methodsFor: 'deprecated' stamp: 'lr 11/16/2006 18:07'!layout	self deprecatedApi.	self border: 0.	self cellspacing: 0.	self cellpadding: 0! !!WATableTag methodsFor: 'attributes' stamp: 'pmm 4/8/2007 00:06'!rules: aString	"rules = none|groups|rows|cols|all [CI]    This attribute specifies which rules will appear between cells within a table. The rendering of rules is user agent dependent. Possible values:        * none: No rules. This is the default value.        * groups: Rules will appear between row groups (see THEAD, TFOOT, and TBODY) and column groups (see COLGROUP and COL) only.        * rows: Rules will appear between rows only.        * cols: Rules will appear between columns only.        * all: Rules will appear between all rows and columns."	self attributes at: 'rules' put: aString! !!WATableTag methodsFor: 'attributes' stamp: 'mb 12/8/2006 15:03'!summary: aString	self attributes at: 'summary' put: aString! !!WATableTag methodsFor: 'accessing' stamp: 'ac 3/16/2005 15:22'!tag	^ 'table'! !!WATagBrush class methodsFor: 'code generation' stamp: 'pmm 9/12/2006 19:28'!tag	"WASelectTag tag"	"WAGenericTag tag"	^(self selectors includes: #tag)		ifTrue: [ self new tag ]		ifFalse: [ nil ]! !!WATagBrush methodsFor: 'attributes-keyboard' stamp: 'lr 10/28/2007 14:42'!accessKey: aString	"Set a keyboard shortcut to access an element. An access key is a single character from the document character set.	Pressing an access key assigned to an element gives focus to the element. The action that occurs when an element receives focus depends on the element. For example, when a user activates a link defined by the A element, the user agent generally follows the link. When a user activates a radio button, the user agent changes the value of the radio button. When the user activates a text field, it allows input, etc.The following elements support the accesskey attribute: A, AREA, BUTTON, INPUT, LABEL, and LEGEND, and TEXTAREA.	The invocation of access keys depends on the underlying system. For instance, on machines running MS Windows, one generally has to press the 'alt' key in addition to the access key. On Apple systems, one generally has to press the 'cmd' key in addition to the access key."	self attributes at: 'accesskey' put: aString! !!WATagBrush methodsFor: 'convenience' stamp: 'lr 10/28/2007 14:42'!addShortcut: aString	self canHaveShortcut ifFalse: [		self error: 'May not assign shortcut on items that are not clickable' ].	self ensureId.	self session addLoadScript: (String streamContents: [ :stream |		stream			nextPutAll: 'addShortcut(''';			nextPutAll: aString;			nextPutAll: ''', ''';			nextPutAll: self id;			nextPutAll: ''')' ])! !!WATagBrush methodsFor: 'private' stamp: 'lr 4/9/2007 13:18'!after	"This template method is called directly after rendering the content of the receiver."! !!WATagBrush methodsFor: 'accessing-attributes' stamp: 'lr 3/23/2007 20:57'!attributeAt: aKey	^ self attributes at: aKey! !!WATagBrush methodsFor: 'accessing-attributes' stamp: 'lr 3/23/2007 20:58'!attributeAt: aKey ifAbsent: aBlock	^ self attributes at: aKey ifAbsent: aBlock! !!WATagBrush methodsFor: 'accessing-attributes' stamp: 'lr 3/23/2007 20:58'!attributeAt: aKey ifAbsentPut: aBlock	^ self attributes at: aKey ifAbsentPut: aBlock! !!WATagBrush methodsFor: 'accessing-attributes' stamp: 'lr 3/23/2007 20:58'!attributeAt: aKey ifPresent: aBlock	^ self attributes at: aKey ifPresent: aBlock! !!WATagBrush methodsFor: 'accessing-attributes' stamp: 'lr 3/23/2007 20:57'!attributeAt: aKey put: aValue	^ self attributes at: aKey put: aValue! !!WATagBrush methodsFor: 'accessing' stamp: 'lr 3/23/2007 20:08'!attributes	^ attributes ifNil: [ attributes := WAHtmlAttributes new ]! !!WATagBrush methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!attributes: anHtmlAttributes	attributes := anHtmlAttributes! !!WATagBrush methodsFor: 'private' stamp: 'lr 4/9/2007 13:18'!before	"This template method is called directly before rendering the content of the receiver."! !!WATagBrush methodsFor: 'testing' stamp: 'lr 4/11/2008 08:48'!canHaveShortcut	^ false! !!WATagBrush methodsFor: 'attributes-core' stamp: 'lr 10/28/2007 14:42'!class: aString	"This attribute assigns one or more class names to an element; the element may be said to belong to these classes. A class name may be shared by several element instances. Multiple classes might be added to one brush."	self attributes addClass: aString! !!WATagBrush methodsFor: 'convenience' stamp: 'lr 10/28/2007 14:42'!class: aString if: aBoolean	"Adds the class aString aString to this element if aBoolean is true,	Example	html div		class: 'important' if: self isImportant;		with: self message"	aBoolean		ifTrue: [self class: aString]! !!WATagBrush methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!closeTag	"Close the receiving tag onto the document."	self isClosed ifFalse: [ self document closeTag: self tag ]! !!WATagBrush methodsFor: 'convenience' stamp: 'avi 3/9/2006 17:41'!confirm: aString	self onClick: 'return confirm("', aString, '")'! !!WATagBrush methodsFor: 'attributes-language' stamp: 'lr 10/28/2007 14:42'!direction: aString	"Set the text direction ltr (left-to-right) or right-to-left (rtl).	Not supported on:	APPLET, BASE, BASEFONT, BR, FRAME, FRAMESET, IFRAME, PARAM, SCRIPT"	self attributes at: 'dir' put: aString! !!WATagBrush methodsFor: 'convenience' stamp: 'lr 10/28/2007 14:42'!disableEnter	"pressing the 'enter' key in the form input element does not submit the form"	self onEnter: ''! !!WATagBrush methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!disabled	self disabled: true! !!WATagBrush methodsFor: 'attributes' stamp: 'lr 6/6/2007 16:20'!disabled: aBoolean	self attributes at: 'disabled' put: aBoolean! !!WATagBrush methodsFor: 'private' stamp: 'avi 6/13/2004 00:39'!document	^ canvas document! !!WATagBrush methodsFor: 'public' stamp: 'lr 4/9/2007 16:31'!ensureId	"Answer the id of the receiving attribute. In case the receiver doesn't have an id yet, generate a new one."	^ self attributes at: 'id' ifAbsentPut: [ canvas nextId ]! !!WATagBrush methodsFor: 'accessing' stamp: 'pmm 11/1/2007 21:15'!id	^ self attributes		at: 'id'		ifPresent: [ :value | value displayString ]! !!WATagBrush methodsFor: 'attributes-core' stamp: 'lr 10/28/2007 14:42'!id: aString	"The id attribute assigns a identifier to an element. The id of an element must be unique within a document."	self attributes at: 'id' put: aString! !!WATagBrush methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!isClosed	"Answer true if this tag should be closed immediately, such as <br />."	^ false! !!WATagBrush methodsFor: 'attributes-language' stamp: 'lr 10/28/2007 14:42'!language: aString	"Set the language code."	self attributes		at: 'lang' put: aString;		at: 'xml:lang' put: aString! !!WATagBrush methodsFor: 'attributes-events' stamp: 'lr 4/9/2007 14:08'!onBlur: aString	"The onblurs event occurs when the element that is in focus, loses that focus."	self attributes at: 'onblur' append: aString separator: ';'! !!WATagBrush methodsFor: 'attributes-events' stamp: 'lr 4/9/2007 14:09'!onChange: aString	"The onchange event occurs when a select input element has a selection made or when a text input element has a change in the text."	self attributes at: 'onchange' append: aString separator: ';'! !!WATagBrush methodsFor: 'attributes-events' stamp: 'lr 6/7/2006 13:48'!onClick: aString	"The onclick event occurs when the pointing device button is clicked over an element."	self attributes at: 'onclick' append: aString separator: ';'! !!WATagBrush methodsFor: 'attributes-events' stamp: 'lr 6/7/2006 13:48'!onDoubleClick: aString	"The ondblclick event occurs when the pointing device button is double clicked over an element."	self attributes at: 'ondblclick' append: aString separator: ';'! !!WATagBrush methodsFor: 'convenience' stamp: 'pmm 5/10/2007 10:15'!onEnter: aString	"If 'enter' is pressed"	self onKeyPress: 'if((window.event ? window.event.keyCode : event.which) == 13){', aString displayString, '; return false}; return true'! !!WATagBrush methodsFor: 'convenience' stamp: 'lr 6/7/2006 13:48'!onError: aString	self attributes at: 'onerror' append: aString separator: ';'! !!WATagBrush methodsFor: 'attributes-events' stamp: 'lr 6/7/2006 13:48'!onFocus: aString	"The onfocus event occurs when an element receives focus either by the pointing device or by tabbing navigation."	self attributes at: 'onfocus' append: aString separator: ';'! !!WATagBrush methodsFor: 'attributes-events' stamp: 'lr 6/7/2006 13:48'!onKeyDown: aString	"The onkeydown event occurs when a key is pressed down over an element."	self attributes at: 'onkeydown' append: aString separator: ';'! !!WATagBrush methodsFor: 'attributes-events' stamp: 'lr 6/7/2006 13:48'!onKeyPress: aString	"The onkeypress event occurs when a key is pressed and released over an element."	self attributes at: 'onkeypress' append: aString separator: ';'! !!WATagBrush methodsFor: 'attributes-events' stamp: 'lr 6/7/2006 13:48'!onKeyUp: aString	"The onkeyup event occurs when a key is released over an element."	self attributes at: 'onkeyup' append: aString separator: ';'! !!WATagBrush methodsFor: 'attributes-events' stamp: 'mb 6/21/2006 18:28'!onLoad: aString	"The onload event occurs when the user agent finishes loading a window."	self attributes at: 'onload' append: aString separator: ';'! !!WATagBrush methodsFor: 'attributes-events' stamp: 'lr 6/7/2006 13:48'!onMouseDown: aString	"The onmousedown event occurs when the pointing device button is pressed over an element."	self attributes at: 'onmousedown' append: aString separator: ';'! !!WATagBrush methodsFor: 'attributes-events' stamp: 'lr 6/7/2006 13:48'!onMouseMove: aString	"The onmousemove event occurs when the pointing device is moved while it is over an element."	self attributes at: 'onmousemove' append: aString separator: ';'! !!WATagBrush methodsFor: 'attributes-events' stamp: 'lr 6/7/2006 13:48'!onMouseOut: aString	"The onmouseout event occurs when the pointing device is moved away from an element."	self attributes at: 'onmouseout' append: aString separator: ';'! !!WATagBrush methodsFor: 'attributes-events' stamp: 'lr 6/7/2006 13:48'!onMouseOver: aString	"The onmouseover event occurs when the pointing device is moved onto an element."	self attributes at: 'onmouseover' append: aString separator: ';'! !!WATagBrush methodsFor: 'attributes-events' stamp: 'lr 6/7/2006 13:48'!onMouseUp: aString	"The onmouseup event occurs when the pointing device button is released over an element."	self attributes at: 'onmouseup' append: aString separator: ';'! !!WATagBrush methodsFor: 'attributes-events' stamp: 'lr 6/7/2006 13:49'!onReset: aString	"The onreset event occurs when a form is reset."	self attributes at: 'onreset' append: aString separator: ';'! !!WATagBrush methodsFor: 'convenience' stamp: 'lr 6/7/2006 13:49'!onResize: aString	self attributes at: 'onresize' append: aString separator: ';'! !!WATagBrush methodsFor: 'convenience' stamp: 'lr 6/7/2006 13:49'!onScroll: aString	self attributes at: 'onscroll' append: aString separator: ';'! !!WATagBrush methodsFor: 'attributes-events' stamp: 'lr 6/7/2006 13:49'!onSelect: aString	"The onselect event occurs when a user selects some text in a text field."	self attributes at: 'onselect' append: aString separator: ';'! !!WATagBrush methodsFor: 'attributes-events' stamp: 'lr 6/7/2006 13:49'!onSubmit: aString	"The onsubmit event occurs when a form is submitted."	self attributes at: 'onsubmit' append: aString separator: ';'! !!WATagBrush methodsFor: 'attributes-events' stamp: 'lr 6/7/2006 13:49'!onUnload: aString	"The onunload event occurs when the user agent removes a document from a window."	self attributes at: 'onunload' append: aString separator: ';'! !!WATagBrush methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!openTag	"Open the receiving and all associated attributes onto the document."	self document openTag: self tag attributes: attributes closed: self isClosed! !!WATagBrush methodsFor: 'accessing' stamp: 'lr 4/20/2007 16:21'!session	^ WACurrentSession value! !!WATagBrush methodsFor: 'attributes-core' stamp: 'lr 4/9/2007 16:13'!style: aString	"This attribute offers optional CSS style information. The attribute is deprecated and should be avoided in favor of an external stylesheet. Multiple styles might be added to one brush."	self attributes addStyle: aString! !!WATagBrush methodsFor: 'javascript' stamp: 'lr 6/5/2009 17:26'!submitFormNamed: formName	self onClick: 'submitForm('		, formName displayString printString			, '); return false;'! !!WATagBrush methodsFor: 'attributes-keyboard' stamp: 'lr 10/28/2007 14:42'!tabIndex: aString	"This attribute specifies the position of the current element in the tabbing order for the current document. This value must be a number between 0 and 32767.	The tabbing order defines the order in which elements will receive focus when navigated by the user via the keyboard. The tabbing order may include elements nested within other elements.	The following elements support the tabindex attribute: A, AREA, BUTTON, INPUT, OBJECT, SELECT, and TEXTAREA."	self attributes at: 'tabindex' put: aString! !!WATagBrush methodsFor: 'private' stamp: 'avi 6/13/2004 00:30'!tag	self subclassResponsibility! !!WATagBrush methodsFor: 'attributes-core' stamp: 'lr 10/28/2007 14:42'!title: aString	"This attribute offers advisory information about the element for which it is set. Visual browsers frequently display the title as a 'tool tip'."	self attributes at: 'title' put: aString! !!WATagBrush methodsFor: 'public' stamp: 'lr 10/28/2007 14:42'!with: anObject	"Render anObject into the receiver. Make sure that you call #with: last in the cascade, as this method will serialize the tag onto the output document."	self openTag.	super with: [		self before.		anObject renderOn: canvas.		self after ].	self closeTag! !!WATagBrush methodsFor: 'convenience' stamp: 'pmm 5/10/2007 10:16'!withLineBreaks: aString	"Renders text preserving line breaks."	self with: [canvas withLineBreaks: aString]! !!WACachedDocument class methodsFor: 'cache' stamp: 'pmm 5/30/2007 09:33'!clearCache	"Clear the cache of instances. This will cause	the files to be lazily reread from disk."	DocumentCache := Dictionary new! !!WACachedDocument class methodsFor: 'instance-creation' stamp: 'pmm 5/30/2007 09:33'!fileName: aFileName	"Check the cache to see if we already have this file loaded.	We only rely on the local filename!!"	^DocumentCache at: aFileName ifAbsentPut: [self fullFileName: aFileName]! !!WACachedDocument class methodsFor: 'instance-creation' stamp: 'gk 1/10/2006 13:22'!fullFileName: fullFileName	^self new fullFileName: fullFileName! !!WACachedDocument class methodsFor: 'initialize-release' stamp: 'gk 1/12/2006 14:05'!initialize	self clearCache! !!WACachedDocument class methodsFor: 'cache' stamp: 'pmm 5/30/2007 09:33'!preloadCache	"Load the files into the image for the currently	created instances in the Cache."	DocumentCache valuesDo: [ :each | each asMIMEDocument ]! !!WACachedDocument methodsFor: 'comparing' stamp: 'gk 1/10/2006 13:13'!= other	"Currently we do not take file modification time on disk into account."	^other species = self species and: [other fullFileName = fullFileName]! !!WACachedDocument methodsFor: 'public' stamp: 'mb 6/2/2006 10:49'!asMIMEDocument	^self asMIMEDocumentType: mimeType! !!WACachedDocument methodsFor: 'public' stamp: 'lr 10/28/2007 14:42'!asMIMEDocumentType: type	"Lazy caching."	^mimeDocument ifNil: [		mimeType := type.		mimeDocument := SeasidePlatformSupport				mimeDocumentOfType: mimeType				from: fullFileName]! !!WACachedDocument methodsFor: 'accessing' stamp: 'gk 1/10/2006 11:19'!fullFileName	^fullFileName! !!WACachedDocument methodsFor: 'initialize-release' stamp: 'lr 10/28/2007 14:42'!fullFileName: aFileName	fullFileName := aFileName! !!WACachedDocument methodsFor: 'comparing' stamp: 'gk 1/10/2006 13:14'!hash	"Currently we do not take file modification time on disk into account.	Note that mimeType and mimeDocument are set lazily later, so we can't use	the mimeType in the hash."	^fullFileName hash! !!WACachedDocument methodsFor: 'accessing' stamp: 'gk 1/10/2006 11:18'!mimeType	^mimeType! !!WACachedDocument methodsFor: 'accessing' stamp: 'pmm 8/9/2007 23:51'!mimeType: anObject	mimeType := anObject! !!WAActionCallback methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!block: aZeroArgBlock	block := aZeroArgBlock fixCallbackTemps! !!WAActionCallback methodsFor: 'evaluation' stamp: 'avi 6/8/2004 01:51'!evaluateWithArgument: anObject	block value.	self signalRenderNotification! !!WAActionCallback methodsFor: 'testing' stamp: 'lr 8/8/2007 17:56'!isEnabled	^ self session currentRequest isXmlHttpRequest not! !!WAActionCallback methodsFor: 'accessing' stamp: 'avi 6/7/2004 22:37'!priority	^ 8! !!WAActionCallback methodsFor: 'evaluation' stamp: 'lr 10/28/2007 14:42'!signalRenderNotification	WARenderNotification raiseSignal! !!WACancelActionCallback methodsFor: 'accessing' stamp: 'avi 6/7/2004 22:37'!priority	^ 3! !!WADefaultActionCallback methodsFor: 'accessing' stamp: 'avi 6/7/2004 22:37'!priority	^ 10! !!WAImageCallback methodsFor: 'converting' stamp: 'avi 9/2/2004 14:46'!convertKey: aString	^ aString, '.x'! !!WACallback methodsFor: 'comparing' stamp: 'avi 6/7/2004 22:38'!<= other	^ self priority < other priority or: [self priority = other priority and: [self key asNumber <= other key asNumber]]! !!WACallback methodsFor: 'accessing' stamp: 'avi 6/7/2004 21:48'!context	^ context! !!WACallback methodsFor: 'converting' stamp: 'avi 9/2/2004 14:46'!convertKey: aString	^ aString! !!WACallback methodsFor: 'evaluation' stamp: 'avi 6/7/2004 21:49'!evaluateWithArgument: anObject	self subclassResponsibility! !!WACallback methodsFor: 'evaluation' stamp: 'lr 8/8/2007 17:55'!evaluateWithField: anObject	self isEnabled ifFalse: [ ^ self ].	self evaluateWithArgument: (self valueForField: anObject)! !!WACallback methodsFor: 'testing' stamp: 'lr 8/8/2007 17:56'!isEnabled	^ true! !!WACallback methodsFor: 'accessing' stamp: 'lr 8/8/2007 17:54'!key	^ self convertKey: key! !!WACallback methodsFor: 'accessing' stamp: 'avi 6/7/2004 21:48'!owner	^ owner! !!WACallback methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!priority	self subclassResponsibility! !!WACallback methodsFor: 'accessing' stamp: 'lr 8/8/2007 14:36'!session	^ context session! !!WACallback methodsFor: 'initialization' stamp: 'avi 6/7/2004 22:39'!setContext: aRenderingContext owner: anObject key: aString	context := aRenderingContext.	owner := anObject.	key := aString! !!WACallback methodsFor: 'converting' stamp: 'avi 6/7/2004 21:51'!valueForField: anObject	^ anObject		ifNil: ['']		ifNotNil:			[(anObject isCollection and: [anObject isString not])					ifTrue: [anObject isEmpty								ifTrue: ['']								ifFalse: [anObject first]]					ifFalse: [anObject]]! !!WADispatchCallback methodsFor: 'evaluation' stamp: 'lr 10/28/2007 14:42'!evaluateWithArgument: anObject	(context callbackAt: anObject)		ifNotNilDo: [ :callback | callback evaluateWithArgument: nil ]! !!WADispatchCallback methodsFor: 'accessing' stamp: 'avi 6/7/2004 22:42'!priority	^ 5! !!WAMultiDispatchCallback methodsFor: 'evaluation' stamp: 'lr 10/28/2007 14:42'!evaluateWithField: anObject	(anObject isCollection and: [ anObject isString not ])		ifFalse: [ ^ super evaluateWithField: anObject ].	anObject do: [ :each |		self evaluateWithArgument: (self valueForField: each) ]! !!WAValueCallback methodsFor: 'accessing' stamp: 'avi 9/19/2006 14:29'!block: aOneArgBlock	block := aOneArgBlock fixCallbackTemps! !!WAValueCallback methodsFor: 'evaluation' stamp: 'pmm 2/27/2007 06:30'!evaluateWithArgument: anObject	block valueWithPossibleArgument: anObject! !!WAValueCallback methodsFor: 'accessing' stamp: 'avi 6/7/2004 22:41'!priority	^ 5! !!WACallbackRegistry class methodsFor: 'instance-creation' stamp: 'avi 6/7/2004 22:04'!context: aContext owner: anObject	^ self basicNew initializeWithContext: aContext owner: anObject! !!WACallbackRegistry methodsFor: 'initialization' stamp: 'avi 6/7/2004 22:04'!initializeWithContext: aContext owner: anObject	context := aContext.	owner := anObject! !!WACallbackRegistry methodsFor: 'accessing' stamp: 'lr 5/1/2007 08:20'!owner	^ owner! !!WACallbackRegistry methodsFor: 'registration' stamp: 'avi 6/7/2004 22:10'!registerActionCallback: aBlock	^ self storeCallback: (WAActionCallback new block: aBlock)! !!WACallbackRegistry methodsFor: 'registration' stamp: 'avi 6/7/2004 22:10'!registerCallback: aBlock	^ self storeCallback: (WAValueCallback new block: aBlock)! !!WACallbackRegistry methodsFor: 'registration' stamp: 'avi 6/7/2004 22:41'!registerCancelActionCallback: aBlock	^ self storeCallback: (WACancelActionCallback new block: aBlock)! !!WACallbackRegistry methodsFor: 'registration' stamp: 'avi 6/7/2004 22:41'!registerDefaultActionCallback: aBlock	^ self storeCallback: (WADefaultActionCallback new block: aBlock)! !!WACallbackRegistry methodsFor: 'registration' stamp: 'avi 6/7/2004 22:10'!registerDispatchCallback	^ self storeCallback: WADispatchCallback new! !!WACallbackRegistry methodsFor: 'registration' stamp: 'avi 9/2/2004 14:42'!registerImageCallback: aBlock	^ self storeCallback: (WAImageCallback new block: aBlock)! !!WACallbackRegistry methodsFor: 'registration' stamp: 'lr 10/10/2005 20:00'!registerMultiDispatchCallback	^ self storeCallback: WAMultiDispatchCallback new! !!WACallbackRegistry methodsFor: 'callbacks' stamp: 'lr 10/28/2007 14:42'!storeCallback: aCallback	| key |	key := context storeCallback: aCallback.	aCallback setContext: context owner: owner key: key.	^ key! !!WACallbackStream class methodsFor: 'instance-creation' stamp: 'avi 6/8/2004 01:58'!callbacks: aDictionary request: aRequest	^ self basicNew initializeWithCallbacks: aDictionary request: aRequest! !!WACallbackStream methodsFor: 'testing' stamp: 'avi 6/8/2004 01:59'!atEnd	^ callbacks atEnd! !!WACallbackStream methodsFor: 'initialization' stamp: 'lr 9/26/2005 14:10'!initializeWithCallbacks: aDictionary request: aRequest	| collection |	collection := SortedCollection new.	aRequest fields keys do:		[:ea |		aDictionary at: ea ifPresent: [:callback | collection add: callback]].	callbacks := ReadStream on: collection asArray.	request := aRequest! !!WACallbackStream methodsFor: 'accessing' stamp: 'avi 6/8/2004 01:59'!position	^ callbacks position! !!WACallbackStream methodsFor: 'processing' stamp: 'avi 6/12/2004 00:21'!processCallbacksWithOwner: anObject	| callback |	[callbacks atEnd not and: [callbacks peek owner == anObject]] whileTrue:		[callback := callbacks next.		callback evaluateWithField: (request fields at: callback key)]! !!WACallbackStream methodsFor: 'accessing' stamp: 'avi 6/12/2004 00:25'!upToEnd	^ callbacks upToEnd! !!WACanvas class methodsFor: 'instance creation' stamp: 'pmm 8/12/2007 11:59'!builder	^WAHtmlBuilder on: self! !!WACanvas methodsFor: 'public' stamp: 'avi 6/17/2004 12:36'!brush: aBrush	self flush.	currentBrush := aBrush.	aBrush setParent: parentBrush canvas: self.	^ aBrush! !!WACanvas methodsFor: 'private' stamp: 'avi 6/17/2004 12:12'!flush	currentBrush ifNotNil:		[currentBrush close.		currentBrush := nil]! !!WACanvas methodsFor: 'private' stamp: 'lr 6/6/2007 10:32'!insert: aBlock	| oldBrush |	oldBrush := currentBrush.	currentBrush := nil.	aBlock value.	self flush.	currentBrush := oldBrush! !!WACanvas methodsFor: 'private' stamp: 'lr 4/9/2007 17:54'!nest: aBlock	parentBrush := currentBrush.	currentBrush := nil.	aBlock renderOn: self.	self flush.	parentBrush := parentBrush parent! !!WACanvas methodsFor: 'public' stamp: 'pmm 10/15/2006 11:33'!render: anObject	self flush.	anObject renderOn: self! !!WAHtmlCanvas methodsFor: 'tags-block' stamp: 'lr 4/9/2007 17:01'!abbreviated	"Defines an abbreviation, such as 'M.', 'Inc.', 'et al.', 'etc.'"	^ self tag: 'abbr'! !!WAHtmlCanvas methodsFor: 'tags-block' stamp: 'pmm 9/30/2006 20:06'!abbreviated: aBlock	self abbreviated with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-block' stamp: 'lr 10/28/2007 14:42'!acronym	"Defines an acronym, such as 'GmbH', 'NATO', and 'F.B.I.'"	^ self tag: 'acronym'! !!WAHtmlCanvas methodsFor: 'tags-block' stamp: 'mb 3/24/2006 13:42'!acronym: aBlock	self acronym with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-block' stamp: 'lr 10/28/2007 14:42'!address	"Defines an address element."	^ self tag: 'address'! !!WAHtmlCanvas methodsFor: 'tags-block' stamp: 'pmm 12/24/2005 17:44'!address: aBlock	self address with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-input' stamp: 'lr 10/28/2007 14:42'!anchor	"Defines an anchor."	^ self brush: WAAnchorTag new! !!WAHtmlCanvas methodsFor: 'tags-input' stamp: 'lr 4/9/2007 17:23'!anchor: aBlock	self anchor with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-format' stamp: 'lr 10/28/2007 14:42'!big	"Defines big text."	^ self tag: 'big'! !!WAHtmlCanvas methodsFor: 'tags-format' stamp: 'ac 2/21/2006 14:36'!big: aBlock	self big with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-block' stamp: 'lr 4/9/2007 17:02'!blockquote	"Defines a long quotation."	^ self tag: 'blockquote'! !!WAHtmlCanvas methodsFor: 'tags-block' stamp: 'avi 6/3/2005 15:40'!blockquote: aBlock	self blockquote with: aBlock! !!WAHtmlCanvas methodsFor: 'tags' stamp: 'lr 10/28/2007 14:42'!break	"Inserts a single line break."	^ self brush: WABreakTag new! !!WAHtmlCanvas methodsFor: 'tags-block' stamp: 'lr 10/28/2007 14:42'!citation	"Defines a citation."	^ self tag: 'cite'! !!WAHtmlCanvas methodsFor: 'tags-block' stamp: 'pmm 9/30/2006 20:06'!citation: aBlock	self citation with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-output' stamp: 'lr 10/28/2007 14:42'!code	"Defines computer code text."	^ self tag: 'code'! !!WAHtmlCanvas methodsFor: 'tags-output' stamp: 'avi 6/3/2005 15:40'!code: aBlock	self code with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-output' stamp: 'lr 10/28/2007 14:42'!definition	"Defines a definition term."	^ self tag: 'dfn'! !!WAHtmlCanvas methodsFor: 'tags-output' stamp: 'pmm 9/30/2006 20:06'!definition: aBlock	self definition with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-lists' stamp: 'lr 10/28/2007 14:42'!definitionData	"Defines a definition description."	^ self tag: 'dd'! !!WAHtmlCanvas methodsFor: 'tags-lists' stamp: 'pmm 5/31/2006 20:26'!definitionData: aBlock	self definitionData with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-lists' stamp: 'lr 10/28/2007 14:42'!definitionList	"Defines a definition list."	^ self tag: 'dl'! !!WAHtmlCanvas methodsFor: 'tags-lists' stamp: 'pmm 12/24/2005 17:42'!definitionList: aBlock	self definitionList with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-lists' stamp: 'lr 10/28/2007 14:42'!definitionTerm	"Defines a definition term."	^ self tag: 'dt'! !!WAHtmlCanvas methodsFor: 'tags-lists' stamp: 'pmm 12/24/2005 17:42'!definitionTerm: aBlock	self definitionTerm with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-block' stamp: 'lr 10/28/2007 14:42'!deleted	"Defines deleted text."	^ self brush: (WAEditTag tag: 'del')! !!WAHtmlCanvas methodsFor: 'tags-block' stamp: 'pmm 3/28/2007 10:42'!deleted: aBlock	self deleted with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-styles' stamp: 'lr 10/28/2007 14:42'!div	"Defines a section in a document."	^ self brush: WADivTag new! !!WAHtmlCanvas methodsFor: 'tags-styles' stamp: 'avi 6/3/2005 15:40'!div: aBlock	self div with: aBlock! !!WAHtmlCanvas methodsFor: 'accessing' stamp: 'avi 6/13/2004 00:57'!document	self subclassResponsibility! !!WAHtmlCanvas methodsFor: 'tags-format' stamp: 'lr 4/9/2007 16:53'!emphasis	"Defines emphasized text."	^ self tag: 'em'! !!WAHtmlCanvas methodsFor: 'tags-format' stamp: 'mb 3/8/2006 17:14'!emphasis: aBlock	self emphasis with: aBlock! !!WAHtmlCanvas methodsFor: 'convenience' stamp: 'lr 7/10/2007 12:15'!encodeCharacter: aCharacter	self html: '&#' , aCharacter asInteger displayString , ';'! !!WAHtmlCanvas methodsFor: 'tags-input' stamp: 'lr 10/28/2007 14:42'!fieldSet	"Defines a fieldset."	^ self brush: WAFieldSetTag new! !!WAHtmlCanvas methodsFor: 'tags-input' stamp: 'mb 3/24/2006 13:45'!fieldSet: aBlock	self fieldSet with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-input' stamp: 'lr 10/28/2007 14:42'!form	"Defines a form."	^ self tag: 'form'! !!WAHtmlCanvas methodsFor: 'tags-input' stamp: 'avi 6/3/2005 15:40'!form: aBlock	self form with: aBlock! !!WAHtmlCanvas methodsFor: 'tags' stamp: 'lr 10/28/2007 14:42'!heading	"Defines header 1 to header 6."	^ self brush: WAHeadingTag new! !!WAHtmlCanvas methodsFor: 'tags' stamp: 'ac 3/16/2005 14:14'!heading: aBlock	self heading with: aBlock! !!WAHtmlCanvas methodsFor: 'deprecated' stamp: 'lr 7/10/2007 12:17'!heading: anObject level: anInteger	self deprecatedApi.	self heading level: anInteger; with: anObject! !!WAHtmlCanvas methodsFor: 'tags' stamp: 'lr 10/28/2007 14:42'!horizontalRule	"Defines a horizontal rule."	^ self brush: WAHorizontalRuleTag new! !!WAHtmlCanvas methodsFor: 'public' stamp: 'lr 10/28/2007 14:42'!html: aString	"Emit aString unescaped onto the target document."	self flush.	self document nextPutAll: aString displayString! !!WAHtmlCanvas methodsFor: 'tags' stamp: 'lr 8/24/2008 11:00'!iframe	^ self brush: WAIframeTag new! !!WAHtmlCanvas methodsFor: 'tags-images' stamp: 'lr 10/28/2007 14:42'!image	"Defines an image."	^ self brush: WAImageTag new! !!WAHtmlCanvas methodsFor: 'tags-images' stamp: 'mb 3/24/2006 13:51'!image: aBlock	self image with: aBlock! !!WAHtmlCanvas methodsFor: 'deprecated' stamp: 'lr 10/28/2007 14:42'!imageForm: aForm	self deprecatedApi.	self image form: aForm! !!WAHtmlCanvas methodsFor: 'tags-block' stamp: 'lr 4/9/2007 17:02'!inserted	"Defines inserted text."	^ self brush: (WAEditTag tag: 'ins')! !!WAHtmlCanvas methodsFor: 'tags-block' stamp: 'pmm 3/28/2007 10:41'!inserted: aBlock	self inserted with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-output' stamp: 'lr 10/28/2007 14:42'!keyboard	"Defines keyboard text."	^ self tag: 'kbd'! !!WAHtmlCanvas methodsFor: 'tags-output' stamp: 'lr 4/9/2007 17:23'!keyboard: aBlock	self keyboard with: aBlock! !!WAHtmlCanvas methodsFor: 'deprecated' stamp: 'pmm 8/24/2008 11:12'!keyboardInput	"Keyboard, text to be entered by the user."	self deprecatedApi.	^ self keyboard! !!WAHtmlCanvas methodsFor: 'deprecated' stamp: 'pmm 8/24/2008 11:12'!keyboardInput: aBlock	self deprecatedApi.	self keyboard: aBlock! !!WAHtmlCanvas methodsFor: 'tags-input' stamp: 'lr 10/28/2007 14:42'!label	"Defines a label for a form control."	^ self brush: WALabelTag new! !!WAHtmlCanvas methodsFor: 'tags-input' stamp: 'avi 6/3/2005 15:40'!label: aBlock	self label with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-input' stamp: 'lr 10/28/2007 14:42'!legend	"Defines a title in a fieldset."	^ self tag: 'legend'! !!WAHtmlCanvas methodsFor: 'tags-input' stamp: 'mb 3/8/2006 18:00'!legend: aBlock	self legend with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-lists' stamp: 'lr 10/28/2007 14:42'!listItem	"Defines a list item."	^ self tag: 'li'! !!WAHtmlCanvas methodsFor: 'tags-lists' stamp: 'avi 6/3/2005 15:40'!listItem: aBlock	self listItem with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-images' stamp: 'lr 10/28/2007 14:42'!map	"Defines an anchor to be used around an image."	^ self brush: WAImageMapTag new! !!WAHtmlCanvas methodsFor: 'tags-images' stamp: 'lr 4/9/2007 17:47'!map: aBlock	self map with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-program' stamp: 'lr 10/28/2007 14:42'!object	"Defines an embedded object."	^ self brush: WAObjectTag new! !!WAHtmlCanvas methodsFor: 'tags-program' stamp: 'pmm 2/11/2007 19:31'!object: aBlock	self object with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-lists' stamp: 'lr 10/28/2007 14:42'!orderedList	"Defines an ordered list."	^ self brush: WAOrderedListTag new! !!WAHtmlCanvas methodsFor: 'tags-lists' stamp: 'lr 9/25/2005 11:52'!orderedList: aBlock	self orderedList with: aBlock! !!WAHtmlCanvas methodsFor: 'tags' stamp: 'lr 10/28/2007 14:42'!paragraph	"Defines a paragraph."	^ self tag: 'p'! !!WAHtmlCanvas methodsFor: 'tags' stamp: 'avi 6/3/2005 15:40'!paragraph: aBlock	self paragraph with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-program' stamp: 'lr 10/28/2007 14:42'!parameter	"Defines a parameter for an object."	^ self brush: WAParameterTag new! !!WAHtmlCanvas methodsFor: 'tags-program' stamp: 'lr 2/13/2007 00:12'!parameter: aBlock	self parameter! !!WAHtmlCanvas methodsFor: 'tags-input' stamp: 'ac 7/3/2005 15:46'!popupAnchor	^ self brush: WAPopupAnchorTag new! !!WAHtmlCanvas methodsFor: 'tags-input' stamp: 'lr 7/10/2007 12:12'!popupAnchor: aBlock	self popupAnchor with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-output' stamp: 'lr 10/28/2007 14:42'!preformatted	"Defines preformatted text."	^ self tag: 'pre'! !!WAHtmlCanvas methodsFor: 'tags-output' stamp: 'avi 6/3/2005 15:40'!preformatted: aBlock	self preformatted with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-block' stamp: 'lr 10/28/2007 14:42'!quote	"Defines a short quotation."	^ self tag: 'q'! !!WAHtmlCanvas methodsFor: 'tags-block' stamp: 'pmm 9/30/2006 20:06'!quote: aBlock	self quote with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-ruby' stamp: 'mb 9/21/2006 16:26'!ruby	^ self tag: 'ruby'! !!WAHtmlCanvas methodsFor: 'tags-ruby' stamp: 'mb 9/21/2006 16:26'!ruby: aBlock	self ruby with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-ruby' stamp: 'mb 9/21/2006 16:26'!rubyBase	^ self tag: 'rb'! !!WAHtmlCanvas methodsFor: 'tags-ruby' stamp: 'mb 9/21/2006 16:26'!rubyBase: aBlock	self rubyBase with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-ruby' stamp: 'mb 9/21/2006 16:26'!rubyBaseContainer	^ self tag: 'rbc'! !!WAHtmlCanvas methodsFor: 'tags-ruby' stamp: 'mb 9/21/2006 16:26'!rubyBaseContainer: aBlock	self rubyBaseContainer with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-ruby' stamp: 'mb 9/21/2006 16:26'!rubyParentheses	^ self tag: 'rp'! !!WAHtmlCanvas methodsFor: 'tags-ruby' stamp: 'mb 9/21/2006 16:26'!rubyParentheses: aBlock	self rubyParentheses with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-ruby' stamp: 'mb 9/21/2006 16:26'!rubyText	^ self brush: WARubyTextTag new! !!WAHtmlCanvas methodsFor: 'tags-ruby' stamp: 'mb 9/21/2006 16:26'!rubyText: aBlock	self rubyText with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-ruby' stamp: 'mb 9/21/2006 16:26'!rubyTextContainer	^ self tag: 'rtc'! !!WAHtmlCanvas methodsFor: 'tags-ruby' stamp: 'mb 9/21/2006 16:26'!rubyTextContainer: aBlock	self rubyTextContainer with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-output' stamp: 'lr 10/28/2007 14:42'!sample	"Defines sample computer code."	^ self tag: 'samp'! !!WAHtmlCanvas methodsFor: 'tags-output' stamp: 'lr 4/9/2007 17:23'!sample: aBlock	self sample with: aBlock! !!WAHtmlCanvas methodsFor: 'deprecated' stamp: 'pmm 8/24/2008 11:10'!sampleOutput	"Sample output, from a program or script."	self deprecatedApi.	^ self sample! !!WAHtmlCanvas methodsFor: 'deprecated' stamp: 'pmm 8/24/2008 11:10'!sampleOutput: aBlock	self deprecatedApi.	self sample: aBlock! !!WAHtmlCanvas methodsFor: 'tags-program' stamp: 'lr 10/28/2007 14:42'!script	"Defines a script."	^ self brush: WAScriptTag new! !!WAHtmlCanvas methodsFor: 'tags-program' stamp: 'avi 6/3/2005 15:40'!script: aBlock	self script with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-format' stamp: 'lr 10/28/2007 14:42'!small	"Defines small text."	^ self tag: 'small'! !!WAHtmlCanvas methodsFor: 'tags-format' stamp: 'avi 6/3/2005 15:40'!small: aBlock	self small with: aBlock! !!WAHtmlCanvas methodsFor: 'convenience' stamp: 'mb 10/31/2006 16:13'!space	self html: self spaceEntity! !!WAHtmlCanvas methodsFor: 'convenience' stamp: 'lr 8/20/2007 21:34'!space: anInteger	anInteger timesRepeat: [ self space ]! !!WAHtmlCanvas methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!spaceEntity	"The HTML entity representing a space. To be subclassed as needed."	^ '&nbsp;'! !!WAHtmlCanvas methodsFor: 'tags-styles' stamp: 'lr 10/28/2007 14:42'!span	"Defines a section in a document."	^ self tag: 'span'! !!WAHtmlCanvas methodsFor: 'tags-styles' stamp: 'avi 6/3/2005 15:40'!span: aBlock	self span with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-format' stamp: 'lr 10/28/2007 14:42'!strong	"Defines strong text."	^ self tag: 'strong'! !!WAHtmlCanvas methodsFor: 'tags-format' stamp: 'ac 3/20/2005 01:24'!strong: aBlock	self strong with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-format' stamp: 'lr 10/28/2007 14:42'!subscript	"Defines subscripted text."	^ self tag: 'sub'! !!WAHtmlCanvas methodsFor: 'tags-format' stamp: 'lr 4/9/2007 16:46'!subscript: aBlock	self subscript with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-format' stamp: 'lr 10/28/2007 14:42'!superscript	"Defines superscripted text."	^ self tag: 'sup'! !!WAHtmlCanvas methodsFor: 'tags-format' stamp: 'lr 4/9/2007 16:46'!superscript: aBlock	self superscript with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'lr 10/28/2007 14:42'!table	"Defines a table."	^ self brush: WATableTag new! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'lr 4/9/2007 17:05'!table: aBlock	self table with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'lr 10/28/2007 14:42'!tableBody	"Defines a table body."	^ self tag: 'tbody'! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'avi 6/3/2005 15:40'!tableBody: aBlock	self tableBody with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'lr 10/28/2007 14:42'!tableCaption	"Defines a table caption."	^ self tag: 'caption'! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'mb 12/8/2006 16:17'!tableCaption: aBlock	self tableCaption with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'lr 10/28/2007 14:42'!tableColumn	"Defines attributes for table columns."	^ self brush: WATableColumnTag new! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'mb 12/7/2006 20:27'!tableColumn: aBlock	self tableColumn with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'lr 10/28/2007 14:42'!tableColumnGroup	"Defines groups of table columns."	^ self brush: WATableColumnGroupTag new! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'mb 12/7/2006 20:27'!tableColumnGroup: aBlock	self tableColumnGroup with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'lr 10/28/2007 14:42'!tableData	"Defines a table cell."	^ self brush: WATableDataTag new! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'avi 6/3/2005 15:40'!tableData: aBlock	self tableData with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'lr 10/28/2007 14:42'!tableFoot	"Defines a table footer."	^ self tag: 'tfoot'! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'lr 4/9/2007 17:06'!tableFoot: aBlock	^ self tableFoot with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'lr 10/28/2007 14:42'!tableHead	"Defines a table header."	^ self tag: 'thead'! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'avi 6/3/2005 15:40'!tableHead: aBlock	self tableHead with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'lr 10/28/2007 14:42'!tableHeading	"Defines a table header."	^ self brush: WATableHeadingTag new! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'ac 3/16/2005 16:15'!tableHeading: aBlock	self tableHeading with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'lr 10/28/2007 14:42'!tableRow	"Defines a table row."	^ self tag: 'tr'! !!WAHtmlCanvas methodsFor: 'tags-tables' stamp: 'avi 6/3/2005 15:40'!tableRow: aBlock	self tableRow with: aBlock! !!WAHtmlCanvas methodsFor: 'public' stamp: 'lr 10/28/2007 14:42'!tag: aString	"Defines a generic tag with the name aString."	^ self brush: (WAGenericTag tag: aString)! !!WAHtmlCanvas methodsFor: 'tags-output' stamp: 'lr 10/28/2007 14:42'!teletype	"Defines teletype text."	^ self tag: 'tt'! !!WAHtmlCanvas methodsFor: 'tags-output' stamp: 'lr 4/9/2007 17:23'!teletype: aBlock	self teletype with: aBlock! !!WAHtmlCanvas methodsFor: 'public' stamp: 'lr 10/28/2007 14:42'!text: anObject	"Emit anObject onto the target document."	self flush.	self document print: anObject! !!WAHtmlCanvas methodsFor: 'tags-lists' stamp: 'lr 10/28/2007 14:42'!unorderedList	"Defines an unordered list."	^ self brush: WAUnorderedListTag new! !!WAHtmlCanvas methodsFor: 'tags-lists' stamp: 'avi 6/3/2005 15:40'!unorderedList: aBlock	self unorderedList with: aBlock! !!WAHtmlCanvas methodsFor: 'tags-output' stamp: 'lr 10/28/2007 14:42'!variable	"Defines a variable."	^ self tag: 'var'! !!WAHtmlCanvas methodsFor: 'tags-output' stamp: 'pmm 9/30/2006 20:06'!variable: aBlock	self variable with: aBlock! !!WAHtmlCanvas methodsFor: 'convenience' stamp: 'pmm 5/10/2007 10:16'!withLineBreaks: aString	"Renders text preserving line breaks."	| stream |	stream := aString readStream.	[ stream atEnd ] whileFalse: [		self text: stream nextLine.		stream atEnd ifFalse: [ self break ] ]! !!WAHtmlCanvas methodsFor: 'convenience' stamp: 'avi 6/23/2006 10:16'!withLineBreaksAndUrls: aString	| stream |	aString ifNil: [^ self].	stream := aString readStream.	[stream atEnd] whileFalse:		[self withUrls: stream nextLine.		stream atEnd ifFalse: [self break]]! !!WAHtmlCanvas methodsFor: 'convenience' stamp: 'lr 10/28/2007 14:42'!withUrls: aString	| stream url |	stream := aString readStream.	[ stream atEnd ] whileFalse: [		self text: (stream upToAndSkipThroughAll: 'http://').			stream atEnd ifFalse: [				url := 'http://', (stream upTo: Character space).				self anchor					url: url;					with: url.				self text: ' '] ]! !!WARenderCanvas class methodsFor: 'instance creation' stamp: 'avi 6/13/2004 00:59'!context: aRenderingContext callbacks: aCallbackStore	^ self basicNew initializeWithContext: aRenderingContext callbacks: aCallbackStore! !!WARenderCanvas methodsFor: 'form-buttons' stamp: 'lr 10/28/2007 14:42'!button	^ self brush: WAButtonTag new! !!WARenderCanvas methodsFor: 'form-buttons' stamp: 'lr 4/11/2008 09:03'!button: anObject	^ self button with: anObject! !!WARenderCanvas methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!callbacks	"Answer the callback registry."	^ callbacks! !!WARenderCanvas methodsFor: 'form-buttons' stamp: 'lr 10/28/2007 14:42'!cancelButton	^ self brush: WACancelButtonTag new! !!WARenderCanvas methodsFor: 'form-buttons' stamp: 'lr 4/11/2008 09:04'!cancelButton: anObject	^ self cancelButton with: anObject! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'lr 10/28/2007 14:42'!checkbox	^ self brush: WACheckboxTag new! !!WARenderCanvas methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!context	"Answer the rendering context."	^ context! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'mb 2/6/2006 10:09'!dateInput	^ self brush: WADateInput new! !!WARenderCanvas methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!document	"Answer the XHTML document."	^ self context document! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'lr 10/28/2007 14:42'!fileUpload	^ self brush: WAFileUploadTag new! !!WARenderCanvas methodsFor: 'form' stamp: 'avi 1/9/2006 21:52'!form	^ self brush: WAFormTag new! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'lr 10/28/2007 14:42'!hiddenInput	^ self brush: WAHiddenInputTag new! !!WARenderCanvas methodsFor: 'form-buttons' stamp: 'lr 10/28/2007 14:42'!imageButton	^ self brush: WAImageButtonTag new! !!WARenderCanvas methodsFor: 'form-buttons' stamp: 'lr 4/11/2008 09:04'!imageButton: anObject	^ self imageButton with: anObject! !!WARenderCanvas methodsFor: 'initialize-release' stamp: 'avi 6/13/2004 01:01'!initializeWithContext: aRenderingContext callbacks: aCallbackStore	context := aRenderingContext.	callbacks := aCallbackStore! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'lr 10/28/2007 14:42'!multiSelect	^ self brush: WAMultiSelectTag new! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'lr 6/6/2007 18:00'!multiSelect: aBlock	^ self multiSelect with: aBlock! !!WARenderCanvas methodsFor: 'public' stamp: 'lr 3/28/2006 20:16'!nextId	^ 'id' , context advanceKey! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'lr 10/28/2007 14:42'!option	^ self brush: WAOptionTag new! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'ac 3/17/2005 17:14'!option: aBlock	^ self option with: aBlock! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'lr 10/28/2007 14:42'!optionGroup	^ self brush: WAOptionGroupTag new! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'pmm 4/24/2007 10:52'!optionGroup: aBlock	^ self optionGroup with: aBlock! !!WARenderCanvas methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!painter	"Answer the component that is supposed to paint this canvas."	^ callbacks owner! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'lr 10/28/2007 14:42'!passwordInput	^ self brush: WAPasswordInputTag new! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'lr 4/11/2008 09:16'!passwordInput: anObject	^ self passwordInput with: anObject! !!WARenderCanvas methodsFor: 'public' stamp: 'mb 3/31/2006 11:38'!peekNextId	^ 'id' , context nextKey! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'lr 10/28/2007 14:42'!radioButton	^ self brush: WARadioButtonTag new! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'ac 7/6/2005 10:46'!radioButton: aBlock	^ self radioButton with: aBlock! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'ac 7/6/2005 11:29'!radioGroup	^ WARadioGroup canvas: self! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'ac 7/6/2005 10:44'!radioGroup: aBlock	^ aBlock value: self radioGroup! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'lr 10/28/2007 14:42'!select	^ self brush: WASelectTag new! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'pmm 4/24/2007 11:07'!select: aBlock	^ self select with: aBlock! !!WARenderCanvas methodsFor: 'form-buttons' stamp: 'lr 10/28/2007 14:42'!submitButton	^ self brush: WASubmitButtonTag new! !!WARenderCanvas methodsFor: 'form-buttons' stamp: 'lr 4/11/2008 09:05'!submitButton: anObject	^ self submitButton with: anObject! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'ac 3/22/2005 17:50'!textArea	^ self brush: WATextAreaTag new! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'lr 4/11/2008 09:05'!textArea: anObject	^ self textArea with: anObject! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'lr 4/9/2007 17:20'!textInput	^ self brush: WATextInputTag new! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'lr 4/11/2008 09:06'!textInput: anObject	^ self textInput with: anObject! !!WARenderCanvas methodsFor: 'form-elements' stamp: 'mb 2/6/2006 10:10'!timeInput	^ self brush: WATimeInput new! !!WARenderCanvas methodsFor: 'public' stamp: 'lr 5/23/2007 19:57'!urlForAction: aBlock	"Answer an action URL that will evaluate aBlock when beeing requested."	^ self context actionUrl withParameter: (self callbacks registerActionCallback: aBlock)! !!WAStaticHtmlCanvas class methodsFor: 'instance creation' stamp: 'avi 9/10/2005 17:20'!document: aDocument	^ self basicNew initializeWithDocument: aDocument! !!WAStaticHtmlCanvas class methodsFor: 'instance creation' stamp: 'lr 3/26/2007 21:30'!root: anHtmlRoot	^ self document: WAHtmlStreamDocument new! !!WAStaticHtmlCanvas methodsFor: 'accessing' stamp: 'avi 9/10/2005 17:20'!document	^ document! !!WAStaticHtmlCanvas methodsFor: 'accessing' stamp: 'ac 6/9/2006 12:42'!document: aDocument	document := aDocument! !!WAStaticHtmlCanvas methodsFor: 'initialize-release' stamp: 'avi 9/10/2005 17:20'!initializeWithDocument: aDocument	document := aDocument! !!WAStaticHtmlCanvas methodsFor: 'form-elements' stamp: 'ac 6/10/2006 18:52'!textArea	^ self brush: WATextAreaTag new! !!WAClosingConditionalComment methodsFor: 'printing' stamp: 'lr 3/27/2007 11:37'!encodeOn: aDocument	aDocument nextPutAll: '<!![endif]-->'! !!WAClosingRevealedConditionalComment methodsFor: 'printing' stamp: 'pmm 11/25/2007 21:55'!encodeOn: aDocument	aDocument nextPutAll: '<!!--<!![endif]-->'! !!WAConditionalComment class methodsFor: 'instance creation' stamp: 'pmm 10/11/2006 17:37'!root: anHtmlRoot	^self new initializeWithRoot: anHtmlRoot! !!WAConditionalComment methodsFor: 'private' stamp: 'lr 3/27/2007 11:36'!addToCondition: aString	condition := condition , aString! !!WAConditionalComment methodsFor: 'private' stamp: 'pmm 11/25/2007 21:51'!closingConditionClass	^WAClosingConditionalComment! !!WAConditionalComment methodsFor: 'public' stamp: 'pmm 11/25/2007 21:51'!do: aBlock	root add: (self openingConditionClass condition: condition).	aBlock value.	root add: (self closingConditionClass new)! !!WAConditionalComment methodsFor: 'operators' stamp: 'pmm 10/11/2006 17:19'!equal	"implicit of nothing else"! !!WAConditionalComment methodsFor: 'operators' stamp: 'pmm 10/11/2006 17:14'!greaterThan	self addToCondition: ' gt'! !!WAConditionalComment methodsFor: 'features' stamp: 'pmm 10/11/2006 17:16'!ie	self addToCondition: ' IE'! !!WAConditionalComment methodsFor: 'features' stamp: 'pmm 9/20/2009 12:35'!ie5	self ie: '5'! !!WAConditionalComment methodsFor: 'features' stamp: 'pmm 9/20/2009 12:34'!ie50	self ie: '5.0'! !!WAConditionalComment methodsFor: 'features' stamp: 'pmm 9/20/2009 12:34'!ie55	self ie: '5.5'! !!WAConditionalComment methodsFor: 'features' stamp: 'pmm 9/20/2009 12:34'!ie6	self ie: '6'! !!WAConditionalComment methodsFor: 'features' stamp: 'pmm 9/20/2009 12:34'!ie7	self ie: '7'! !!WAConditionalComment methodsFor: 'features' stamp: 'pmm 9/20/2009 12:34'!ie8	self ie: '8'! !!WAConditionalComment methodsFor: 'features' stamp: 'pmm 9/20/2009 12:33'!ie: aString	self addToCondition: ' IE ', aString! !!WAConditionalComment methodsFor: 'initialization' stamp: 'pmm 10/11/2006 17:36'!initializeWithRoot: anHtmlRoot	root := anHtmlRoot.	condition := 'if'! !!WAConditionalComment methodsFor: 'operators' stamp: 'pmm 10/11/2006 17:15'!lessThan	self addToCondition: ' lt'! !!WAConditionalComment methodsFor: 'operators' stamp: 'tbn 11/21/2007 12:41'!not	self addToCondition: ' !!'! !!WAConditionalComment methodsFor: 'private' stamp: 'pmm 11/25/2007 21:51'!openingConditionClass	^WAOpeningConditionalComment! !!WAConditionalComment methodsFor: 'operators' stamp: 'pmm 10/19/2006 20:19'!orEqual	self addToCondition: 'e'! !!WARevealedConditionalComment methodsFor: 'private' stamp: 'pmm 11/25/2007 21:55'!closingConditionClass	^WAClosingRevealedConditionalComment! !!WARevealedConditionalComment methodsFor: 'private' stamp: 'pmm 11/25/2007 21:55'!openingConditionClass	^WAOpeningRevealedConditionalComment! !!WAConfiguration class methodsFor: 'instance creation' stamp: 'avi 1/30/2004 16:39'!new	^ self basicNew initialize! !!WAConfiguration methodsFor: 'ancestry' stamp: 'avi 2/5/2004 16:27'!addAncestorsTo: tempCollection linearization: linearCollection	(linearCollection includes: self)		ifTrue: [tempCollection do: [:ea | linearCollection add: ea before: self].				tempCollection removeAllSuchThat: [:ea | true]]		ifFalse: [tempCollection add: self.				self ancestors isEmpty					ifTrue: [linearCollection addAll: tempCollection.							tempCollection removeAllSuchThat: [:ea | true]]					ifFalse: [self ancestors do: [:ea | ea addAncestorsTo: tempCollection linearization: linearCollection]]]! !!WAConfiguration methodsFor: 'ancestry' stamp: 'lr 3/19/2007 19:25'!allAncestors	| temp linear |	temp := OrderedCollection new.	linear := OrderedCollection new.	self addAncestorsTo: temp linearization: linear.	^ linear removeFirst; asArray! !!WAConfiguration methodsFor: 'ancestry' stamp: 'avi 2/5/2004 17:16'!allAncestorsDo: aBlock	self allAncestors do: aBlock! !!WAConfiguration methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!allAttributes	^ Array streamContents:		[:s |		self withAllAncestorsDo: [:ea | s nextPutAll: ea attributes]]! !!WAConfiguration methodsFor: 'ancestry' stamp: 'avi 3/24/2004 11:59'!allPotentialAncestors	^ #()! !!WAConfiguration methodsFor: 'ancestry' stamp: 'avi 2/2/2004 14:43'!ancestors	^ #()! !!WAConfiguration methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!attributeNamed: aSymbol	^ self allAttributes		detect: [ :each | each key = aSymbol ]		ifNone: [ self error: 'No attribute named ', aSymbol printString ]! !!WAConfiguration methodsFor: 'attributes' stamp: 'jf 2/1/2004 17:34'!attributes	^ #()! !!WAConfiguration methodsFor: 'values' stamp: 'avi 1/30/2004 16:32'!attributesAndValuesDo: keyValueBlock	^ self allAttributes do:		[:ea |		keyValueBlock value: ea value: (self valueForAttribute: ea)]! !!WAConfiguration methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!groupedAttributes	| grops attributes |	grops := Dictionary new.	attributes := SortedCollection sortBlock: [ :a :b | a key <= b key].	self allAttributes do: [ :each |		(grops at: each group ifAbsentPut: [ SortedCollection sortBlock: [:a :b | a key <= b key ] ] )			add: each ].	grops associationsDo: [ :associaction |		attributes add: associaction ].	^ attributes! !!WAConfiguration methodsFor: 'testing' stamp: 'avi 1/30/2004 16:21'!hasAttributeNamed: aSymbol	^ self allAttributes anySatisfy: [:ea | ea key = aSymbol]! !!WAConfiguration methodsFor: 'testing' stamp: 'avi 2/3/2004 22:59'!hasLocalValueForAttribute: anAttribute	self localValueAt: anAttribute key ifAbsent: [^ false].	^ true! !!WAConfiguration methodsFor: 'testing' stamp: 'avi 3/23/2004 14:53'!hasMutableAncestry	^ false! !!WAConfiguration methodsFor: 'values' stamp: 'avi 3/23/2004 12:40'!inheritedValueAndSourceAt: aSymbol do: aBlock	self allAncestorsDo:		[:ea |		(ea localValueAt: aSymbol ifAbsent: [])			ifNotNilDo: [:val | ^ aBlock value: val value: ea]].	^ nil! !!WAConfiguration methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!inheritsFrom: aConfiguration	^ self allAncestors anySatisfy: [:ea | ea = aConfiguration]! !!WAConfiguration methodsFor: 'initializing' stamp: 'lr 10/28/2007 14:42'!initialize! !!WAConfiguration methodsFor: 'values' stamp: 'avi 2/3/2004 22:58'!localValueAt: aSymbol ifAbsent: absentBlock	self subclassResponsibility! !!WAConfiguration methodsFor: 'values' stamp: 'avi 3/23/2004 12:40'!lookupValueAt: aSymbol	^ self inheritedValueAndSourceAt: aSymbol do: [:value :source | value]! !!WAConfiguration methodsFor: 'accessing' stamp: 'avi 3/24/2004 11:55'!name	^ self subclassResponsibility! !!WAConfiguration methodsFor: 'ancestry' stamp: 'avi 3/23/2004 14:47'!potentialAncestors	^ self allPotentialAncestors reject: [:ea | ea = self or: [(self inheritsFrom: ea) or: [ea inheritsFrom: self]]]! !!WAConfiguration methodsFor: 'values' stamp: 'avi 2/3/2004 22:58'!valueAt: aSymbol	^ self localValueAt: aSymbol ifAbsent: [self lookupValueAt: aSymbol]! !!WAConfiguration methodsFor: 'values' stamp: 'avi 2/3/2004 22:59'!valueForAttribute: anAttribute	^ self valueAt: anAttribute key! !!WAConfiguration methodsFor: 'ancestry' stamp: 'avi 2/5/2004 16:28'!withAllAncestorsDo: aBlock	aBlock value: self.	^ self allAncestorsDo: aBlock! !!WAAuthConfiguration methodsFor: 'ancestry' stamp: 'lr 8/1/2007 20:19'!ancestors	^ Array with: WARenderLoopConfiguration new! !!WAAuthConfiguration methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!attributes	^ Array		with: (WAStringAttribute key: #login group: #authentication)		with: (WAStringAttribute key: #password group: #authentication)! !!WAAuthConfiguration methodsFor: 'accessing' stamp: 'lr 4/18/2007 09:38'!mainClass	^ WAAuthMain! !!WAGlobalConfiguration class methodsFor: 'initialization' stamp: 'avi 3/16/2006 23:39'!initialize	DeploymentMode ifNil: [self setDevelopmentMode]! !!WAGlobalConfiguration class methodsFor: 'configuration' stamp: 'avi 3/16/2006 23:35'!setDeploymentMode	DeploymentMode := true! !!WAGlobalConfiguration class methodsFor: 'configuration' stamp: 'avi 3/16/2006 23:36'!setDevelopmentMode	DeploymentMode := false! !!WAGlobalConfiguration methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!attributes	^ Array		with: ((WAListAttribute key: #serverProtocol group: #server) options: #(http https))		with: (WAStringAttribute key: #serverHostname group: #server)		with: (WANumberAttribute key: #serverPort group: #server)		with: (WAStringAttribute key: #serverPath group: #server)		with: (WABooleanAttribute key: #deploymentMode)! !!WAGlobalConfiguration methodsFor: 'defaults' stamp: 'avi 3/16/2006 23:35'!deploymentMode	^ DeploymentMode! !!WAGlobalConfiguration methodsFor: 'defaults' stamp: 'avi 2/2/2004 15:00'!serverPort	^ 80! !!WAGlobalConfiguration methodsFor: 'defaults' stamp: 'avi 2/2/2004 15:00'!serverProtocol	^ #http! !!WARenderLoopConfiguration methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!ancestors	^ Array with: WASessionConfiguration new! !!WARenderLoopConfiguration methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!attributes	^ Array		with: ((WAListAttribute key: #rootComponent) options: self rootComponents)		with: (WAStringAttribute key: #resourceBaseUrl group: #server)! !!WARenderLoopConfiguration methodsFor: 'defaults' stamp: 'lr 10/28/2007 14:42'!errorHandler	^ WAWalkbackErrorHandler! !!WARenderLoopConfiguration methodsFor: 'defaults' stamp: 'lr 4/20/2007 15:00'!mainClass	^ WARenderLoopMain! !!WARenderLoopConfiguration methodsFor: 'defaults' stamp: 'lr 10/28/2007 14:42'!rootComponents	^ (WAComponent allSubclasses select: [:ea | ea canBeRoot]) asSortedCollection: [:a :b | a name <= b name]! !!WASessionConfiguration methodsFor: 'ancestry' stamp: 'avi 11/16/2005 23:33'!ancestors	^ Array with: WAGlobalConfiguration new! !!WASessionConfiguration methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!attributes	^ OrderedCollection new		add: (WANumberAttribute key: #sessionExpirySeconds);		add: ((WAListAttribute key: #sessionClass)			options: self sessionClasses);		add: ((WAListAttribute key: #mainClass)			options: self mainClasses);		add: ((WAListAttribute key: #errorHandler)			options: self errorHandlerClasses);		add: ((WAListAttribute key: #redirectHandler)			options: self redirectHandlerClasses);		add: ((WAListAttribute key: #renderContinuationClass)			options: self renderContinuationClasses);		add: ((WAListAttribute key: #redirectContinuationClass)			options: self redirectContinuationClasses);		add: (WABooleanAttribute key: #useSessionCookie);		yourself! !!WASessionConfiguration methodsFor: 'defaults' stamp: 'lr 4/20/2007 14:52'!errorHandler	^ WAWalkbackErrorHandler! !!WASessionConfiguration methodsFor: 'defaults' stamp: 'avi 4/7/2004 13:59'!errorHandlerClasses	^ WAErrorHandler allSubclasses! !!WASessionConfiguration methodsFor: 'defaults' stamp: 'avi 2/5/2004 12:20'!mainClasses	^ WAMain allSubclasses! !!WASessionConfiguration methodsFor: 'defaults' stamp: 'lr 8/17/2007 09:56'!redirectContinuationClass	^ WARedirectContinuation! !!WASessionConfiguration methodsFor: 'defaults' stamp: 'lr 8/17/2007 09:57'!redirectContinuationClasses	^ WARedirectContinuation withAllSubclasses! !!WASessionConfiguration methodsFor: 'defaults' stamp: 'lr 10/11/2007 09:40'!redirectHandler	^ WARedirectHandler! !!WASessionConfiguration methodsFor: 'defaults' stamp: 'lr 10/11/2007 09:40'!redirectHandlerClasses	^ WARedirectHandler withAllSubclasses! !!WASessionConfiguration methodsFor: 'defaults' stamp: 'lr 8/17/2007 09:53'!renderContinuationClass	^ WARenderContinuation! !!WASessionConfiguration methodsFor: 'defaults' stamp: 'lr 8/17/2007 09:53'!renderContinuationClasses	^ WARenderContinuation withAllSubclasses! !!WASessionConfiguration methodsFor: 'defaults' stamp: 'avi 2/2/2004 15:05'!sessionClass	^ WASession! !!WASessionConfiguration methodsFor: 'defaults' stamp: 'lr 4/15/2007 16:39'!sessionClasses	^ WAExpiringHandler withAllSubclasses! !!WASessionConfiguration methodsFor: 'defaults' stamp: 'avi 2/2/2004 15:05'!sessionExpirySeconds	^ 600! !!WASessionConfiguration methodsFor: 'defaults' stamp: 'avi 11/12/2005 21:42'!useSessionCookie	^ false! !!WASystemConfiguration class methodsFor: 'accessing' stamp: 'lr 5/3/2006 09:44'!instance	^ instance ifNil: [ instance := self basicNew initialize ]! !!WASystemConfiguration class methodsFor: 'instance creation' stamp: 'avi 11/16/2005 23:33'!new	^ self instance! !!WASystemConfiguration methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!attributes	self subclassResponsibility! !!WASystemConfiguration methodsFor: 'values' stamp: 'avi 2/3/2004 23:00'!localValueAt: aSymbol ifAbsent: absentBlock	^ (self respondsTo: aSymbol)		ifTrue: [self perform: aSymbol]		ifFalse: [absentBlock value]! !!WASystemConfiguration methodsFor: 'accessing' stamp: 'avi 11/16/2005 23:31'!name	^ self class name! !!WAUserConfiguration methodsFor: 'ancestry' stamp: 'avi 11/16/2005 23:39'!addAncestor: aConfiguration	(self inheritsFrom: aConfiguration)		ifFalse: [ancestors add: aConfiguration]! !!WAUserConfiguration methodsFor: 'ancestry' stamp: 'avi 11/16/2005 23:39'!allPotentialAncestors	^ WASystemConfiguration allSubclasses collect: [:ea | ea new]! !!WAUserConfiguration methodsFor: 'accessing' stamp: 'avi 11/16/2005 23:39'!ancestors	^ ancestors! !!WAUserConfiguration methodsFor: 'menu' stamp: 'lr 10/28/2007 14:42'!clear	values := Dictionary new! !!WAUserConfiguration methodsFor: 'accessing' stamp: 'avi 3/23/2004 14:51'!clearValueForAttribute: anAttribute	values removeKey: anAttribute key ifAbsent: []! !!WAUserConfiguration methodsFor: 'testing' stamp: 'avi 11/16/2005 23:39'!hasMutableAncestry	^ true! !!WAUserConfiguration methodsFor: 'initialization' stamp: 'lr 10/28/2007 14:42'!initialize	super initialize.	values := Dictionary new.	ancestors := OrderedCollection new! !!WAUserConfiguration methodsFor: 'values' stamp: 'avi 3/23/2004 14:51'!localValueAt: aSymbol ifAbsent: errorBlock	^ values at: aSymbol ifAbsent: errorBlock! !!WAUserConfiguration methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!localValues	| dict |	dict := Dictionary new.	self allAttributes do:		[:attr | (self localValueAt: attr key ifAbsent: [nil])			ifNotNilDo: [:value | dict at: attr key put: (attr stringForValue: value)]].	^ dict! !!WAUserConfiguration methodsFor: 'accessing' stamp: 'avi 3/23/2004 14:51'!localValues: aDictionary	self allAttributes do:		[:attr | (aDictionary at: attr key ifAbsent: [nil])			ifNotNilDo: [:string | self valueAt: attr key put: (attr valueFromString: string)]]! !!WAUserConfiguration methodsFor: 'accessing' stamp: 'avi 3/23/2004 14:51'!overrideAttribute: anAttribute	self takeValue: (self valueForAttribute: anAttribute) forAttribute: anAttribute! !!WAUserConfiguration methodsFor: 'copying' stamp: 'lr 12/12/2006 11:24'!postCopy	super postCopy.	values := values copy.	ancestors := ancestors collect: [ :each | each copy ]! !!WAUserConfiguration methodsFor: 'ancestry' stamp: 'avi 11/16/2005 23:39'!removeAncestor: aConfiguration	ancestors remove: aConfiguration ifAbsent: []! !!WAUserConfiguration methodsFor: 'accessing' stamp: 'avi 3/23/2004 15:21'!takeValue: anObject forAttribute: anAttribute	^ anObject ifNotNil: [values at: anAttribute key put: anObject]! !!WAUserConfiguration methodsFor: 'accessing' stamp: 'avi 3/23/2004 14:51'!valueAt: aSymbol put: anObject	^ self takeValue: anObject forAttribute: (self attributeNamed: aSymbol)! !!WABooleanAttribute methodsFor: 'visiting' stamp: 'avi 1/31/2004 12:11'!accept: aVisitor with: anObject	^ aVisitor visitBooleanAttribute: self with: anObject! !!WABooleanAttribute methodsFor: 'converting' stamp: 'lr 10/28/2007 14:42'!valueFromString: aString	^ aString = 'true'		ifTrue: [true]		ifFalse: [aString = 'false'				 ifTrue: [false]				 ifFalse: [self error: 'Invalid value for boolean attribute']]! !!WAConfigurationAttribute class methodsFor: 'instance-creation' stamp: 'avi 2/5/2004 13:15'!key: aSymbol	^ self key: aSymbol group: nil! !!WAConfigurationAttribute class methodsFor: 'instance-creation' stamp: 'avi 2/5/2004 13:14'!key: keySymbol group: groupSymbol	^ self basicNew initializeWithKey: keySymbol group: groupSymbol! !!WAConfigurationAttribute methodsFor: 'visiting' stamp: 'lr 10/28/2007 14:42'!accept: aVisitor with: anObject	self subclassResponsibility! !!WAConfigurationAttribute methodsFor: 'accessing' stamp: 'avi 2/5/2004 13:21'!group	^ group ifNil: [#general]! !!WAConfigurationAttribute methodsFor: 'initialization' stamp: 'avi 2/5/2004 13:14'!initializeWithKey: keySymbol group: groupSymbol	key := keySymbol.	group := groupSymbol! !!WAConfigurationAttribute methodsFor: 'accessing' stamp: 'avi 1/30/2004 16:40'!key	^ key! !!WAConfigurationAttribute methodsFor: 'converting' stamp: 'mbany 4/14/2005 12:28'!stringForValue: anObject	^ anObject displayString! !!WAConfigurationAttribute methodsFor: 'converting' stamp: 'lr 10/28/2007 14:42'!valueFromString: aString	self subclassResponsibility! !!WAListAttribute methodsFor: 'visiting' stamp: 'avi 1/31/2004 12:13'!accept: aVisitor with: anObject	^ aVisitor visitListAttribute: self with: anObject! !!WAListAttribute methodsFor: 'accessing' stamp: 'avi 1/31/2004 12:12'!options	^ options! !!WAListAttribute methodsFor: 'accessing' stamp: 'avi 1/31/2004 12:11'!options: aCollection	options := aCollection! !!WAListAttribute methodsFor: 'converting' stamp: 'pmm 11/1/2007 21:40'!valueFromString: aString	^ self options		detect: [ :each | each displayString = aString]		ifNone: [ self error: 'No matching list option' ]! !!WANumberAttribute methodsFor: 'visiting' stamp: 'avi 1/31/2004 12:13'!accept: aVisitor with: anObject	^ aVisitor visitNumberAttribute: self with: anObject! !!WANumberAttribute methodsFor: 'converting' stamp: 'jf 2/8/2004 17:10'!valueFromString: aString	^ Number readFrom: aString! !!WAPasswordAttribute methodsFor: 'visiting' stamp: 'avi 4/13/2004 21:02'!accept: aVisitor with: anObject	^ aVisitor visitPasswordAttribute: self with: anObject! !!WAStringAttribute methodsFor: 'visiting' stamp: 'avi 1/30/2004 17:12'!accept: aVisitor with: anObject	^ aVisitor visitStringAttribute: self with: anObject! !!WAStringAttribute methodsFor: 'converting' stamp: 'lr 5/3/2006 09:56'!valueFromString: aString	^ aString isEmptyOrNil ifFalse: [ aString ]! !!WACookie class methodsFor: 'accessing' stamp: 'avi 5/18/2004 22:59'!key: keyString value: valueString	^ self new		key: keyString;		value: valueString;		yourself! !!WACookie methodsFor: 'comparing' stamp: 'lr 4/18/2007 00:45'!= other	^ self species = other species		and: [ self key = other key		and: [ self path = other path ] ]! !!WACookie methodsFor: 'api' stamp: 'avi 5/18/2004 23:13'!expireIn: aDuration	self expiry: DateAndTime now + aDuration! !!WACookie methodsFor: 'accessing' stamp: 'avi 5/18/2004 22:53'!expiry	^ expiry! !!WACookie methodsFor: 'accessing' stamp: 'mb 9/22/2006 12:22'!expiry: aDateTime	expiry := aDateTime asUTC! !!WACookie methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!expiryString	^ String streamContents:		[:s |		s			nextPutAll: (expiry dayOfWeekName first: 3);			nextPutAll: ', ';			nextPutAll: expiry dayOfMonth displayString;			nextPut: $-;			nextPutAll: expiry monthName;			nextPut: $-;			nextPutAll: expiry year displayString;			space;			nextPutAll: expiry hour24 displayString;			nextPut: $:;			nextPutAll: expiry minute displayString;			nextPut: $:;			nextPutAll: expiry second displayString;			nextPutAll: ' GMT']! !!WACookie methodsFor: 'comparing' stamp: 'pmm 10/12/2006 16:53'!hash	^self key hash		bitXor: self path hash! !!WACookie methodsFor: 'accessing' stamp: 'avi 5/18/2004 13:21'!key	^ key! !!WACookie methodsFor: 'accessing' stamp: 'mb 9/22/2006 12:22'!key: aString	key := aString! !!WACookie methodsFor: 'accessing' stamp: 'avi 5/18/2004 22:53'!path	^ path ifNil: ['/']! !!WACookie methodsFor: 'accessing' stamp: 'mb 9/22/2006 12:22'!path: aString	path := aString! !!WACookie methodsFor: 'accessing' stamp: 'avi 5/18/2004 13:21'!value	^ value! !!WACookie methodsFor: 'accessing' stamp: 'mb 9/22/2006 12:22'!value: aString	value := aString! !!WACookie methodsFor: 'api' stamp: 'mb 2/27/2006 08:02'!valueWithExpiry	^ expiry		ifNil: [self value]		ifNotNil: [(self value ifNil: ['']), '; expires=', self expiryString]! !!WACookie methodsFor: 'writing' stamp: 'lr 9/3/2007 21:20'!writeOn: aStream	aStream nextPutAll: self key; nextPut: $=; nextPutAll: (self value ifNil: [ '' ]).	expiry isNil		ifFalse: [ aStream nextPutAll: '; expires='; nextPutAll: self expiryString ].	path isNil		ifFalse: [ aStream nextPutAll: '; path='; nextPutAll: self path ]! !!WAEncoder class methodsFor: 'private' stamp: 'lr 4/8/2007 13:42'!encode: aCharacter on: aStream	self subclassResponsibility! !!WAEncoder class methodsFor: 'initialization' stamp: 'pmm 10/2/2007 22:02'!initializeBMP	"Initializes the BMP, the Basic Multilingual Plane of UTF characters, using the encoding strategy of the receiver. This chaching strategy ensures that most commonly used characters can be encoded as efficient as possible."	| stream characterLimit |	characterLimit := "find the maximum value of a character that we can instantiate, for Squeak 3.7 this is 255"		[ Character value: 16rFFFF.		16rFFFF ]			on: Error			do: [ 16rFF ].	table := Array new: characterLimit.	stream := WriteStream on: (String new: 6).	1 to: characterLimit do: [ :index |		self encode: (Character value: index - 1) on: stream reset.		table at: index put: (stream position = 1			ifTrue: [ stream contents first ]			ifFalse: [ stream contents ]) ]! !!WAEncoder class methodsFor: 'instance-creation' stamp: 'lr 3/26/2007 20:51'!on: aStream	^ self on: aStream table: table! !!WAEncoder class methodsFor: 'instance-creation' stamp: 'lr 3/26/2007 20:29'!on: aStream table: anArray	^ self basicNew initializeOn: aStream table: anArray! !!WAEncoder methodsFor: 'initialization' stamp: 'lr 3/26/2007 20:30'!initializeOn: aStream table: anArray	stream := aStream.	table := anArray! !!WAEncoder methodsFor: 'accessing' stamp: 'lr 4/8/2007 13:57'!nextPut: aCharacter	| value encoded |	value := aCharacter asInteger.	value < table size		ifFalse: [ self class encode: aCharacter on: stream ]		ifTrue: [			encoded := table at: value + 1.			encoded isString				ifTrue: [ stream nextPutAll: encoded ]				ifFalse: [ stream nextPut: encoded ] ]! !!WAEncoder methodsFor: 'accessing' stamp: 'lr 4/8/2007 13:57'!nextPutAll: aString	| character value encoded |	"uses #to:do: for speed reasons (on Squeak)	this is not premature optimization, this is a hotspot method method	and #to:do: shows measurable speed improvements for rendering seaside pages"	1 to: aString size do: [ :index |		character := aString at: index.		value := character asInteger.		value < table size			ifFalse: [ self class encode: character on: stream ]			ifTrue: [				encoded := table at: value + 1.				encoded isString					ifTrue: [ stream nextPutAll: encoded ]					ifFalse: [ stream nextPut: encoded ] ] ]! !!WAHtmlEncoder class methodsFor: 'private' stamp: 'lr 4/8/2007 14:05'!encode: aCharacter on: aStream	aCharacter = $" ifTrue: [ ^ aStream nextPutAll: '&quot;' ].	aCharacter = $< ifTrue: [ ^ aStream nextPutAll: '&lt;' ].	aCharacter = $& ifTrue: [ ^ aStream nextPutAll: '&amp;'].	aCharacter = $> ifTrue: [ ^ aStream nextPutAll: '&gt;' ].	aStream nextPut: aCharacter! !!WAHtmlEncoder class methodsFor: 'initialization' stamp: 'lr 4/8/2007 14:01'!initialize	self initializeBMP! !!WAUrlEncoder class methodsFor: 'private' stamp: 'lr 10/12/2008 19:01'!encode: aCharacter on: aStream	| value |	('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.~' includes: aCharacter)		ifTrue: [ ^ aStream nextPut: aCharacter ].	value := aCharacter asInteger.	[ aStream nextPut: $%; nextPutAll: (((value \\ 256) printStringBase: 16) padded: #left to: 2 with: $0).	  value := value // 256.	  value = 0 ] whileFalse! !!WAUrlEncoder class methodsFor: 'initialization' stamp: 'lr 4/8/2007 15:43'!initialize	self initializeBMP! !!WADebugErrorHandler methodsFor: 'actions' stamp: 'lr 6/7/2006 10:06'!handleError: anError	SeasidePlatformSupport openDebuggerOn: anError! !!WAWalkbackErrorHandler methodsFor: 'actions' stamp: 'lr 6/8/2007 14:30'!handleError: anError	self open: anError.	anError isResumable		ifTrue: [ anError resume ]! !!WAWalkbackErrorHandler methodsFor: 'private' stamp: 'lr 6/5/2007 20:44'!open: anException	| answer |	answer := WARenderLoop new		call: (WAWalkback exception: anException)		withToolFrame: false.	answer ifTrue: [ SeasidePlatformSupport openDebuggerOn: anException ]! !!WAErrorHandler class methodsFor: 'actions' stamp: 'avi 3/28/2004 21:22'!handleError: anError	^ self new handleError: anError! !!WAErrorHandler class methodsFor: 'actions' stamp: 'avi 3/28/2004 21:23'!handleWarning: aWarning	^ self new handleWarning: aWarning! !!WAErrorHandler class methodsFor: 'actions' stamp: 'pmm 2/24/2007 22:13'!internalError: anError	^ self new internalError: anError! !!WAErrorHandler methodsFor: 'actions' stamp: 'lr 4/20/2007 14:41'!handleError: anError	anError pass! !!WAErrorHandler methodsFor: 'actions' stamp: 'avi 2/2/2004 16:54'!handleWarning: aWarning	self handleError: aWarning! !!WAErrorHandler methodsFor: 'actions' stamp: 'lr 4/20/2007 14:42'!internalError: anError	^ WAResponse internalError: anError! !!WASimpleErrorHandler methodsFor: 'actions' stamp: 'lr 4/20/2007 15:21'!handleError: anError	WACurrentSession value		returnResponse: (WAResponse internalError: anError)! !!WAFile class methodsFor: '*seaside2-squeak' stamp: 'pmm 11/30/2008 10:39'!fromChunk: aChunk	^self new		initializeFromChunk: aChunk;		yourself! !!WAFile methodsFor: 'accessing' stamp: 'avi 4/28/2004 11:13'!contentType	^ contentType! !!WAFile methodsFor: 'accessing' stamp: 'mb 9/22/2006 12:21'!contentType: aString	contentType := aString! !!WAFile methodsFor: 'accessing' stamp: 'mb 9/22/2006 12:39'!contents	"Answer a ByteArray"	^ contents! !!WAFile methodsFor: 'accessing' stamp: 'mb 9/22/2006 12:37'!contents: aByteArray	contents := aByteArray! !!WAFile methodsFor: 'accessing' stamp: 'pmm 7/24/2007 22:03'!fileName	"compensate for windows explorer behavior"	^ self isWindowsPath		ifTrue: [ fileName copyAfterLast: $\ ]		ifFalse: [ fileName ]! !!WAFile methodsFor: 'accessing' stamp: 'mb 9/22/2006 12:21'!fileName: aString	fileName := aString! !!WAFile methodsFor: '*seaside2-squeak' stamp: 'pmm 11/30/2008 10:53'!initializeFromChunk: aChunk	self contents: (String streamContents: [ :stream |		aChunk saveToStream: stream ])! !!WAFile methodsFor: '*seaside2-squeak' stamp: 'pmm 8/24/2008 13:00'!isTemporary	"this is not a temporary but an in memory file"	^false! !!WAFile methodsFor: 'private' stamp: 'pmm 7/24/2007 22:02'!isWindowsPath	"'#:\*' match: fileName is broken on Squeak for WideString arguments"	^fileName notEmpty		and: [ fileName first isLetter		and: [ fileName size >= 3		and: [ (fileName copyFrom: 2 to: 3) = ':\' ] ] ]! !!WAFile methodsFor: 'accessing' stamp: 'pmm 8/24/2008 13:01'!size	"the file size in bytes"	^self contents size! !!WATemporaryFile methodsFor: 'accessing' stamp: 'pmm 8/1/2008 14:11'!contents	"Reads the contents of the file into memory and returns them.	Keep in mind that the contents will be cached into an instance variable."	contents isNil ifTrue: [		contents := self readStreamDo: [ :stream |			stream contents ] ].	^contents! !!WATemporaryFile methodsFor: 'actions' stamp: 'pmm 8/1/2008 14:10'!delete	"deletes the uploaded file from the disk"	self temporaryDirectory deleteFileNamed: self temporaryFileName! !!WATemporaryFile methodsFor: 'initialize-release' stamp: 'pmm 4/18/2008 07:15'!initializeFromChunk: aChunk	"This is where we actually read the file contents chunk wise	and save it to disk."	| stream |	stream := StandardFileStream newFileNamed: (self temporaryDirectory fullNameFor: self temporaryFileName).	[	stream binary.		fileSize := aChunk saveToStream: stream ]			ensure: [ stream close ]! !!WATemporaryFile methodsFor: 'testing' stamp: 'pmm 4/17/2008 20:46'!isTemporary	"this is not an in memory but an in temporary file"	^true! !!WATemporaryFile methodsFor: 'actions' stamp: 'pmm 8/1/2008 14:15'!readStreamDo: aOneArgumentBlock	"Convenience method to access a read stream on the contents. The read stream will be passed to the block.	the stream will be in binary mode	the stream will be closed afterwards"	| stream |	stream := self temporaryDirectory readOnlyFileNamed: self temporaryFileName.	^[	stream binary.		aOneArgumentBlock value: stream ]			ensure: [ stream close ]! !!WATemporaryFile methodsFor: 'accessing' stamp: 'pmm 4/18/2008 22:46'!size	"the file size in bytes"	^fileSize! !!WATemporaryFile methodsFor: 'accessing' stamp: 'pmm 4/18/2008 22:50'!temporaryDirectory	"the directory in which the file is located in which my contents are stored on the server"	^(FileDirectory default directoryNamed: 'seasidetmp') assureExistence! !!WATemporaryFile methodsFor: 'accessing' stamp: 'lr 6/5/2009 17:26'!temporaryFileName	"the name of the file in which my contents are stored in the directory #temporaryDirectory	don't confuse this with #fileName which is the name of the file that the client sent"	^ temporaryFileName ifNil: [		temporaryFileName := (WAExternalID new: 48) printString ]! !!WAHtmlBuilder class methodsFor: 'instance creation' stamp: 'pmm 8/31/2007 09:35'!new	^self basicNew initialize! !!WAHtmlBuilder class methodsFor: 'instance creation' stamp: 'pmm 8/12/2007 11:58'!on: aCanvasClass	^self new		canvasClass: aCanvasClass;		yourself! !!WAHtmlBuilder methodsFor: 'accessing' stamp: 'pmm 8/16/2007 22:53'!actionUrl	^WAUrl new! !!WAHtmlBuilder methodsFor: 'accessing' stamp: 'pmm 8/12/2007 12:10'!callbackOwner	^callbackOwner! !!WAHtmlBuilder methodsFor: 'accessing' stamp: 'pmm 8/12/2007 12:10'!callbackOwner: anObject	callbackOwner := anObject! !!WAHtmlBuilder methodsFor: 'accessing' stamp: 'pmm 8/12/2007 11:58'!canvasClass	^canvasClass! !!WAHtmlBuilder methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!canvasClass: aClass	canvasClass := aClass! !!WAHtmlBuilder methodsFor: 'private' stamp: 'pmm 8/12/2007 11:54'!closeDocument: aDocument	self fullDocument ifTrue: [		documentRoot close: aDocument ]! !!WAHtmlBuilder methodsFor: 'private' stamp: 'pmm 8/12/2007 12:11'!createCallbacksFor: aContext	^self callbackOwner isNil		ifTrue: [ nil ]		ifFalse: [ aContext callbacksFor: self callbackOwner ]! !!WAHtmlBuilder methodsFor: 'accessing' stamp: 'pmm 8/12/2007 11:53'!fullDocument	^fullDocument! !!WAHtmlBuilder methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!fullDocument: aBoolean	fullDocument := aBoolean! !!WAHtmlBuilder methodsFor: 'initialize-release' stamp: 'pmm 8/31/2007 09:34'!initialize	self fullDocument: false! !!WAHtmlBuilder methodsFor: 'private' stamp: 'pmm 8/16/2007 22:59'!openDocumentDocument: aDocument context: aContext	self fullDocument ifTrue: [		documentRoot := self rootClass context: aContext.		self rootBlock value: documentRoot.		documentRoot open: aDocument ]! !!WAHtmlBuilder methodsFor: 'rendering' stamp: 'pmm 8/16/2007 22:53'!render: anObject	^String streamContents: [ :stream |		| context docRoot document html callbacks |		document := (WAHtmlStreamDocument new) stream: stream.		context := WARenderingContext new.		context document: document.		context actionUrl: self actionUrl.		callbacks := self createCallbacksFor: context.		html := self canvasClass context: context callbacks: callbacks.		self openDocumentDocument: document context: context.		html context document stream: stream.		html render: anObject.		html flush.		self closeDocument: document ]! !!WAHtmlBuilder methodsFor: 'accessing' stamp: 'pmm 8/12/2007 12:00'!rootBlock	rootBlock isNil ifTrue: [		rootBlock := [ :html | ] ].	^rootBlock! !!WAHtmlBuilder methodsFor: 'accessing' stamp: 'pmm 8/12/2007 12:00'!rootBlock: anObject	rootBlock := anObject! !!WAHtmlBuilder methodsFor: 'accessing' stamp: 'pmm 8/16/2007 22:57'!rootClass	rootClass isNil ifTrue: [		rootClass := WAHtmlRoot ].	^rootClass! !!WAHtmlBuilder methodsFor: 'accessing' stamp: 'pmm 8/16/2007 22:58'!rootClass: anHtmlRootClass	rootClass := anHtmlRootClass! !!WAHtmlDocument class methodsFor: 'instance-creation' stamp: 'lr 3/26/2007 21:28'!new	^ self basicNew initialize! !!WAHtmlDocument methodsFor: 'writing-xhtml' stamp: 'lr 3/26/2007 22:23'!closeTag: aString	self subclassResponsibility! !!WAHtmlDocument methodsFor: 'initialization' stamp: 'lr 3/26/2007 21:28'!initialize! !!WAHtmlDocument methodsFor: 'writing' stamp: 'lr 3/27/2007 10:36'!nextPut: aCharacter	self subclassResponsibility! !!WAHtmlDocument methodsFor: 'writing' stamp: 'lr 3/27/2007 10:36'!nextPutAll: aString	self subclassResponsibility! !!WAHtmlDocument methodsFor: 'writing-xhtml' stamp: 'lr 3/26/2007 21:38'!openTag: aString	self openTag: aString attributes: nil closed: false! !!WAHtmlDocument methodsFor: 'writing-xhtml' stamp: 'lr 3/26/2007 21:38'!openTag: aString attributes: anAttributes	self openTag: aString attributes: anAttributes closed: false! !!WAHtmlDocument methodsFor: 'writing-xhtml' stamp: 'lr 3/26/2007 22:23'!openTag: aString attributes: anAttributes closed: aBoolean	self subclassResponsibility! !!WAHtmlDocument methodsFor: 'writing' stamp: 'lr 3/27/2007 10:36'!print: anObject	self subclassResponsibility! !!WAHtmlStreamDocument methodsFor: 'actions' stamp: 'lr 3/27/2007 11:47'!close: aHtmlRoot	aHtmlRoot close: self! !!WAHtmlStreamDocument methodsFor: 'writing-xhtml' stamp: 'lr 4/9/2007 10:28'!closeTag: aString	stream nextPutAll: '</'.	stream nextPutAll: aString.	stream nextPut: $>! !!WAHtmlStreamDocument methodsFor: 'accessing-encoders' stamp: 'lr 3/26/2007 20:22'!htmlEncoder	^ htmlEncoder! !!WAHtmlStreamDocument methodsFor: 'writing' stamp: 'lr 3/26/2007 20:06'!nextPut: aCharacter	stream nextPut: aCharacter! !!WAHtmlStreamDocument methodsFor: 'writing' stamp: 'lr 3/26/2007 20:07'!nextPutAll: aString	stream nextPutAll: aString! !!WAHtmlStreamDocument methodsFor: 'actions' stamp: 'lr 10/28/2007 14:42'!open: aHtmlRoot	aHtmlRoot open: self! !!WAHtmlStreamDocument methodsFor: 'writing-xhtml' stamp: 'lr 5/23/2007 10:49'!openTag: aString attributes: anAttributes closed: aBoolean	stream nextPut: $<.	stream nextPutAll: aString.	anAttributes encodeOn: self.	aBoolean ifTrue: [ stream nextPut: $/ ].	stream nextPut: $>! !!WAHtmlStreamDocument methodsFor: 'writing' stamp: 'lr 3/26/2007 20:16'!print: anObject	anObject encodeOn: self! !!WAHtmlStreamDocument methodsFor: 'accessing' stamp: 'avi 7/8/2004 00:39'!stream	^ stream! !!WAHtmlStreamDocument methodsFor: 'accessing' stamp: 'lr 3/26/2007 20:42'!stream: aStream	stream := aStream.	htmlEncoder := WAHtmlEncoder on: stream.	urlEncoder := WAUrlEncoder on: stream! !!WAHtmlStreamDocument methodsFor: 'accessing-encoders' stamp: 'lr 3/26/2007 20:22'!urlEncoder	^ urlEncoder! !!WAPrettyPrintedDocument class methodsFor: 'instance-creation' stamp: 'avi 5/22/2004 12:40'!renderer: aRenderer	^ self basicNew initializeWithRenderer: aRenderer! !!WAPrettyPrintedDocument methodsFor: 'writing-xhtml' stamp: 'lr 10/28/2007 14:42'!attribute: aKey with: aValue	aValue == false ifTrue: [ ^ self ].	html space.	html span		class: (self cssClassForAttribute: aKey);		with: aKey.	html text: '='.	html span class: 'attribute-value'; with: [		html text: '"'.		(self knownRefs includes: aKey)			ifTrue: [ html anchor url: aValue displayString; with: aValue ]			ifFalse: [				(self knownEvents includes: aKey)					ifTrue: [ html anchor onClick: aValue; with: aValue ]					ifFalse: [						aValue == true							ifTrue: [ html text: aKey ]							ifFalse: [ html render: aValue ] ] ].		html text: '"' ]! !!WAPrettyPrintedDocument methodsFor: 'writing-xhtml' stamp: 'lr 4/20/2007 22:11'!attributes: anAttributes	anAttributes ifNil: [ ^ self ].	anAttributes keysAndValuesDo: [ :key :value | self attribute: key with: value ]! !!WAPrettyPrintedDocument methodsFor: 'writing-xhtml' stamp: 'lr 10/28/2007 14:42'!closeTag: aString	indentLevel := indentLevel - 1.	indentCloseTags removeLast		ifTrue: [ self indent ].	html text: '</'.	html span class: (self cssClassFor: aString); with: aString.	html text: '>'! !!WAPrettyPrintedDocument methodsFor: 'private' stamp: 'lr 4/20/2007 22:13'!cssClassFor: aString	^ (self knownTags includes: aString)		ifTrue: [ 'tag-known' ]		ifFalse: [ 'tag-unknown' ]! !!WAPrettyPrintedDocument methodsFor: 'private' stamp: 'lr 4/20/2007 22:13'!cssClassForAttribute: aString	^ (self knownAttributes includes: aString)		ifTrue: [ 'attribute-known' ]		ifFalse: [ 'attribute-unknown' ]! !!WAPrettyPrintedDocument methodsFor: 'accessing' stamp: 'lr 3/26/2007 22:28'!document	^ html document! !!WAPrettyPrintedDocument methodsFor: 'accessing' stamp: 'lr 5/11/2007 11:39'!htmlEncoder	^ self document htmlEncoder! !!WAPrettyPrintedDocument methodsFor: 'private' stamp: 'lr 4/20/2007 22:29'!indent	firstLine		ifTrue: [ firstLine := false ]		ifFalse: [ html break ].	indentLevel timesRepeat: [ html space: 2 ]! !!WAPrettyPrintedDocument methodsFor: 'initialization' stamp: 'lr 11/23/2006 10:02'!initializeWithRenderer: aRenderer	html := aRenderer.	indentCloseTags := OrderedCollection with: false.	indentLevel := 0.	firstLine := true! !!WAPrettyPrintedDocument methodsFor: 'configuration' stamp: 'lr 4/20/2007 22:05'!knownAttributes	^ #('abbr' 'accept' 'accept' 'accesskey' 'action' 'align' 'alink' 'alt' 'archive' 'axis' 'background' 'bgcolor' 'bgproperties' 'border' 'cellpadding' 'cellspacing' 'char' 'charoff' 'charset' 'charset' 'checked' 'cite' 'class' 'classid' 'clear' 'code' 'codebase' 'codetype' 'color' 'cols' 'colspan' 'compact' 'content' 'coords' 'data' 'datetime' 'declare' 'defer' 'dir' 'direction' 'disabled' 'encoding' 'enctype' 'equiv' 'face' 'for' 'frame' 'frameborder' 'framespacing' 'gutter' 'headers' 'height' 'href' 'hreflang' 'hspace' 'http' 'id' 'ismap' 'label' 'lang' 'leftmargin' 'link' 'longdesc' 'loop' 'lowsrc' 'marginheight' 'marginwidth' 'maxlength' 'media' 'method' 'methods' 'multiple' 'name' 'nohref' 'noresize' 'noshade' 'nowrap' 'object' 'onabort' 'onblur' 'onchange' 'onclick' 'ondblclick' 'onerror' 'onfocus' 'onkeydown' 'onkeypress' 'onkeyup' 'onload' 'onmousedown' 'onmousemove' 'onmouseout' 'onmouseover' 'onmouseup' 'onreset' 'onselect' 'onsubmit' 'onunload' 'prompt' 'readonly' 'rel' 'rev' 'rows' 'rowspan' 'rules' 'scheme' 'scope' 'scrolling' 'selected' 'shape' 'size' 'span' 'src' 'standby' 'style' 'summary' 'tabindex' 'target' 'text' 'title' 'type' 'urn' 'usemap' 'valign' 'value' 'valuetype' 'version' 'vlink' 'vspace' 'width' 'wrap' 'xml:lang' 'xmlns')! !!WAPrettyPrintedDocument methodsFor: 'configuration' stamp: 'lr 5/11/2007 11:13'!knownEvents	^ #('onabort' 'onblur' 'onchange' 'onclick' 'ondblclick' 'onerror' 'onfocus' 'onkeydown' 'onkeypress' 'onkeyup' 'onload' 'onmousedown' 'onmousemove' 'onmouseout' 'onmouseover' 'onmouseup' 'onreset' 'onselect' 'onsubmit' 'onunload')! !!WAPrettyPrintedDocument methodsFor: 'configuration' stamp: 'lr 4/20/2007 22:11'!knownRefs	^ #('action' 'cite' 'classid' 'codebase' 'data' 'href' 'longdesc' 'profile' 'src' 'usemap')! !!WAPrettyPrintedDocument methodsFor: 'configuration' stamp: 'lr 4/20/2007 21:14'!knownTags	^ #('a' 'abbr' 'acronym' 'address' 'area' 'b' 'base' 'bdo' 'big' 'blockquote' 'body' 'br' 'button' 'caption' 'cite' 'code' 'col' 'colgroup' 'dd' 'del' 'dfn' 'div' 'dl' 'dt' 'em' 'fieldset' 'form' 'h1' 'h2' 'h3' 'h4' 'h5' 'h6' 'head' 'hr' 'html' 'i' 'img' 'input' 'ins' 'ismap' 'kbd' 'label' 'legend' 'li' 'link' 'map' 'meta' 'noscript' 'object' 'ol' 'optgroup' 'option' 'p' 'param' 'pre' 'q' 'rb' 'rbc' 'rp' 'rt' 'rtc' 'ruby' 'samp' 'script' 'select' 'small' 'span' 'strong' 'style' 'sub' 'sup' 'table' 'tbody' 'td' 'textarea' 'tfoot' 'th' 'thead' 'title' 'tr' 'tt' 'ul' 'var')! !!WAPrettyPrintedDocument methodsFor: 'writing' stamp: 'lr 5/11/2007 11:39'!nextPut: aCharacter	self htmlEncoder nextPut: aCharacter! !!WAPrettyPrintedDocument methodsFor: 'writing' stamp: 'lr 5/11/2007 11:39'!nextPutAll: aString	self htmlEncoder nextPutAll: aString! !!WAPrettyPrintedDocument methodsFor: 'writing-xhtml' stamp: 'lr 10/28/2007 14:42'!openTag: aString attributes: anAttributes closed: aBoolean	self indent.	html text: '<'.	html span		class: (self cssClassFor: aString);		with: aString.	self attributes: anAttributes.	aBoolean		ifTrue: [ html text: '/' ].	html text: '>'.	aBoolean		ifFalse: [ indentLevel := indentLevel + 1 ].	indentCloseTags removeLast; addLast: true; addLast: aBoolean! !!WAPrettyPrintedDocument methodsFor: 'writing' stamp: 'lr 5/11/2007 11:40'!print: anObject	self document print: anObject! !!WABaseElement methodsFor: 'accessing' stamp: 'lr 3/27/2007 11:26'!tag	^ 'base'! !!WABaseElement methodsFor: 'attributes' stamp: 'pmm 10/7/2006 18:43'!target: aString	self attributeAt: 'target' put: aString! !!WABaseElement methodsFor: 'attributes' stamp: 'pmm 10/7/2006 18:43'!url: aString	self attributeAt: 'href' put: aString! !!WAContentElement methodsFor: 'attributes' stamp: 'lr 3/27/2007 13:33'!contents: aString	self document: aString! !!WAContentElement methodsFor: 'document' stamp: 'lr 3/27/2007 13:32'!document: aString	self document: aString mimeType: self typeOrNil! !!WAContentElement methodsFor: 'document' stamp: 'lr 3/27/2007 13:32'!document: aString fileName: fileName	self document: aString mimeType: self typeOrNil fileName: fileName! !!WAContentElement methodsFor: 'document' stamp: 'lr 3/27/2007 13:32'!document: aString mimeType: mimeType	self document: aString mimeType: mimeType fileName: nil! !!WAContentElement methodsFor: 'document' stamp: 'lr 3/27/2007 13:33'!document: aString mimeType: mimeType fileName: fileName	self url: (root context urlForDocument: aString mimeType: mimeType fileName: fileName)! !!WAContentElement methodsFor: 'testing' stamp: 'lr 11/5/2007 17:20'!isClosed	^ false! !!WAContentElement methodsFor: 'attributes' stamp: 'lr 4/10/2007 09:55'!resourceUrl: aString	self url: (root context absoluteUrlForResource: aString)! !!WAContentElement methodsFor: 'attributes' stamp: 'pmm 10/7/2006 16:53'!type: aString	self attributeAt: 'type' put: aString! !!WAContentElement methodsFor: 'private' stamp: 'lr 3/27/2007 10:51'!typeOrNil	^ self attributeAt: 'type' ifAbsent:  [ nil ]! !!WAContentElement methodsFor: 'attributes' stamp: 'lr 10/28/2007 14:42'!url: aString	self subclassResponsibility! !!WALinkElement methodsFor: 'media' stamp: 'pmm 10/7/2006 17:36'!addAll	self addMedia: 'all'! !!WALinkElement methodsFor: 'media' stamp: 'pmm 10/7/2006 17:36'!addAural	self addMedia: 'aural'! !!WALinkElement methodsFor: 'media' stamp: 'pmm 10/7/2006 17:36'!addBraille	self addMedia: 'braille'! !!WALinkElement methodsFor: 'media' stamp: 'pmm 10/7/2006 17:35'!addHandheld	self addMedia: 'handheld'! !!WALinkElement methodsFor: 'media' stamp: 'lr 10/28/2007 14:42'!addMedia: aString	| media |	media :=	(((attributes at: 'media' ifAbsent: [ '' ])		findTokens: $,)			collect: [ :each | each trimBlanks ])				asSet.	media add: aString.	self media: (String streamContents: [ :stream |		media			do: [ :each | stream nextPutAll: each ]			separatedBy: [ stream nextPutAll: ', ' ] ])! !!WALinkElement methodsFor: 'media' stamp: 'pmm 10/7/2006 17:36'!addPrint	self addMedia: 'print'! !!WALinkElement methodsFor: 'media' stamp: 'pmm 10/7/2006 17:35'!addProjection	self addMedia: 'projection'! !!WALinkElement methodsFor: 'media' stamp: 'pmm 10/7/2006 17:35'!addScreen	self addMedia: 'screen'! !!WALinkElement methodsFor: 'media' stamp: 'pmm 10/7/2006 17:35'!addTeletype	self addMedia: 'tty'! !!WALinkElement methodsFor: 'media' stamp: 'pmm 10/7/2006 17:35'!addTelevision	self addMedia: 'tv'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 3/31/2007 00:54'!beAlternate	"Gives alternate representations of the current document."	self relationship: 'alternate'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 10/7/2006 17:14'!beAlternateStylesheet	self relationship: 'alternate stylesheet'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 10/7/2006 17:12'!beAppendix	self relationship: 'appendix'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 3/31/2007 00:56'!beArchives	"Provides a link to a collection of records, documents, or other materials of historical interest."	self relationship: 'archives'! !!WALinkElement methodsFor: 'type' stamp: 'pmm 10/7/2006 18:34'!beAtom	self type: 'application/atom+xml'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 10/7/2006 17:12'!beBookmark	self relationship: 'bookmark'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 10/7/2006 17:11'!beChapter	self relationship: 'chapter'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 10/7/2006 17:11'!beClossary	self relationship: 'lossary'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 10/7/2006 17:11'!beCopyright	self relationship: 'copyright'! !!WALinkElement methodsFor: 'type' stamp: 'pmm 10/7/2006 17:40'!beCss	self type: 'text/css'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 3/31/2007 01:05'!beFirst	"Indicates that the current document is a part of a series, and that the first document in the series is the referenced document."	self relationship: 'first'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 10/7/2006 17:17'!beFontDefinition	self relationship: 'fontdef'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 3/31/2007 00:57'!beGlossary	self relationship: 'glossary'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 10/7/2006 17:12'!beHelp	self relationship: 'help'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 10/7/2006 17:10'!beIndex	self relationship: 'index'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 10/7/2006 17:18'!beLast	self relationship: 'last'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 10/7/2006 17:58'!beMicrosummary	"http://wiki.mozilla.org/Microsummaries"	self relationship: 'microsummary'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 3/31/2007 01:04'!beNext	"Indicates that the current document is a part of a series, and that the next document in the series is the referenced document."	self relationship: 'next'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 3/31/2007 01:04'!bePrevious	"Indicates that the current document is a part of a series, and that the previous document in the series is the referenced document."	self relationship: 'previous'! !!WALinkElement methodsFor: 'type' stamp: 'pmm 10/7/2006 18:34'!beRss	self type: 'application/rss+xml'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 3/31/2007 01:04'!beSearch	"Gives a link to a resource that can be used to search through the current document and its related pages. "	self relationship: 'search'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 10/7/2006 17:11'!beSection	self relationship: 'section'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 10/7/2006 17:16'!beShortcutIcon	self relationship: 'shortcut icon'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 3/31/2007 01:03'!beStart	"Refers to the first document in a collection of documents. This link type tells search engines which document is considered by the author to be the starting point of the collection."	self relationship: 'start'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 3/31/2007 00:58'!beStylesheet	"Imports a stylesheet."	self relationship: 'stylesheet'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 10/7/2006 17:12'!beSubsection	self relationship: 'subsection'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 10/7/2006 17:10'!beTableOfContents	self relationship: 'contents'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 10/7/2006 17:18'!beTop	self relationship: 'top'! !!WALinkElement methodsFor: 'relationship' stamp: 'pmm 3/31/2007 00:58'!beUp	"Provides a link to a document giving the context for the current document."	self relationship: 'up'! !!WALinkElement methodsFor: 'testing' stamp: 'lr 11/5/2007 17:20'!isClosed	^ children isEmptyOrNil! !!WALinkElement methodsFor: 'attributes' stamp: 'pmm 3/31/2007 01:02'!media: aString	"This attribute specifies the intended destination medium for style information. It may be a single media descriptor or a comma-separated list. The default value for this attribute is 'screen'."	self attributeAt: 'media' put: aString! !!WALinkElement methodsFor: 'attributes' stamp: 'pmm 3/31/2007 01:01'!relationship: aString	"This attribute describes the relationship from the current document to the anchor specified by the href(url) attribute. The value of this attribute is a space-separated list of link types."	self attributeAt: 'rel' put: aString! !!WALinkElement methodsFor: 'attributes' stamp: 'pmm 3/31/2007 01:00'!reverse: aString	"This attribute is used to describe a reverse link from the anchor specified by the href attribute to the current document. The value of this attribute is a space-separated list of link types."	self attributeAt: 'rev' put: aString! !!WALinkElement methodsFor: 'accessing' stamp: 'lr 3/27/2007 11:27'!tag	^ 'link'! !!WALinkElement methodsFor: 'attributes' stamp: 'pmm 10/7/2006 17:09'!title: aString	self attributeAt: 'title' put: aString! !!WALinkElement methodsFor: 'attributes' stamp: 'pmm 10/7/2006 18:10'!url: aString	self attributeAt: 'href' put: aString! !!WAScriptElement methodsFor: 'types' stamp: 'pmm 10/7/2006 18:05'!beJavascript	self type: 'text/javascript'! !!WAScriptElement methodsFor: 'attributes' stamp: 'pmm 9/22/2007 07:36'!defer	"When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no 'document.write' in javascript) and thus, the user agent can continue parsing and rendering."		self attributeAt: 'defer' put: true! !!WAScriptElement methodsFor: 'accessing' stamp: 'lr 3/27/2007 11:27'!tag	^ 'script'! !!WAScriptElement methodsFor: 'attributes' stamp: 'pmm 10/7/2006 18:10'!url: aString	self attributeAt: 'src' put: aString! !!WAHtmlElement class methodsFor: 'instance-creation' stamp: 'lr 3/27/2007 13:26'!root: aRoot	^ self basicNew initializeWithRoot: aRoot! !!WAHtmlElement methodsFor: 'accessing-children' stamp: 'lr 3/27/2007 10:47'!add: anElement	children ifNil: [ children := OrderedCollection new ].	children add: anElement! !!WAHtmlElement methodsFor: 'accessing-attributes' stamp: 'lr 3/21/2007 15:59'!attributeAt: aString	^ self attributes at: aString! !!WAHtmlElement methodsFor: 'accessing-attributes' stamp: 'lr 3/21/2007 15:59'!attributeAt: aString ifAbsent: aBlock	^ self attributes at: aString ifAbsent: aBlock! !!WAHtmlElement methodsFor: 'accessing-attributes' stamp: 'lr 3/21/2007 15:59'!attributeAt: aString put: anObject	^ self attributes at: aString put: anObject! !!WAHtmlElement methodsFor: 'accessing' stamp: 'lr 3/21/2007 15:58'!attributes	^ attributes ifNil: [ attributes := WAHtmlAttributes new ]! !!WAHtmlElement methodsFor: 'accessing-children' stamp: 'lr 3/27/2007 10:47'!childrenDo: aBlock	children ifNotNil: [ children do: aBlock ]! !!WAHtmlElement methodsFor: 'printing' stamp: 'lr 3/27/2007 11:30'!encodeOn: aDocument	aDocument openTag: self tag attributes: attributes closed: self isClosed.	self isClosed ifTrue: [ ^ self ].	self childrenDo: [ :each | each encodeOn: aDocument ].	aDocument closeTag: self tag! !!WAHtmlElement methodsFor: 'initialization' stamp: 'lr 3/27/2007 13:26'!initializeWithRoot: aRoot	root := aRoot! !!WAHtmlElement methodsFor: 'testing' stamp: 'lr 3/27/2007 11:24'!isClosed	^ true! !!WAHtmlElement methodsFor: 'accessing' stamp: 'lr 3/27/2007 11:24'!tag	self subclassResponsibility! !!WAHtmlElement methodsFor: 'public' stamp: 'lr 11/5/2007 17:22'!with: anObject	self add: anObject! !!WAMetaElement methodsFor: 'conveniance' stamp: 'pmm 10/7/2006 18:20'!beLeftToRight	self textDirection: 'LTR'! !!WAMetaElement methodsFor: 'conveniance' stamp: 'pmm 10/7/2006 18:20'!beRightToLeft	self textDirection: 'RTL'! !!WAMetaElement methodsFor: 'attributes' stamp: 'pmm 10/7/2006 18:17'!content: aString	self attributeAt: 'content' put: aString! !!WAMetaElement methodsFor: 'conveniance' stamp: 'pmm 10/7/2006 18:27'!contentType: aString	self responseHeaderName: 'Content-Type'.	self content: aString! !!WAMetaElement methodsFor: 'conveniance' stamp: 'lr 3/27/2007 10:50'!contentType: aConentTypeString charset: aCharsetString	self contentType: aConentTypeString , '; charset=', aCharsetString! !!WAMetaElement methodsFor: 'attributes' stamp: 'pmm 10/7/2006 18:18'!language: aString	self attributeAt: 'lang' put: aString! !!WAMetaElement methodsFor: 'attributes' stamp: 'pmm 10/7/2006 18:17'!name: aString	self attributeAt: 'name' put: aString! !!WAMetaElement methodsFor: 'conveniance' stamp: 'mb 10/13/2006 10:12'!redirectAfter: seconds to: aString	self responseHeaderName: 'refresh'.	self content: seconds displayString , ';URL=' , aString! !!WAMetaElement methodsFor: 'attributes' stamp: 'pmm 10/7/2006 18:25'!responseHeaderName: aString	self attributeAt: 'http-equiv' put: aString! !!WAMetaElement methodsFor: 'attributes' stamp: 'pmm 10/7/2006 18:17'!scheme: aString	self attributeAt: 'scheme' put: aString! !!WAMetaElement methodsFor: 'accessing' stamp: 'lr 3/27/2007 11:26'!tag	^ 'meta'! !!WAMetaElement methodsFor: 'attributes' stamp: 'pmm 10/7/2006 18:19'!textDirection: aString	self attributeAt: 'dir' put: aString! !!WAKom class methodsFor: 'service' stamp: 'pmm 8/29/2008 18:14'!createService	^(HttpService on: port)		name: 'seaside';		plug: self default;		yourself! !!WAKom class methodsFor: 'accessing' stamp: 'lr 2/12/2007 20:32'!default	^ self entryPoint: WADispatcher default! !!WAKom class methodsFor: 'service' stamp: 'avi 11/20/2003 01:13'!entryPoint: anEntryPoint	^ self new entryPoint: anEntryPoint! !!WAKom class methodsFor: 'class initialization' stamp: 'pmm 4/7/2008 21:41'!initialize	self register! !!WAKom class methodsFor: 'service' stamp: 'lr 8/31/2009 16:49'!pause	service ifNotNil: [		service unregister; waitForStop.		service := nil ]! !!WAKom class methodsFor: 'accessing' stamp: 'avi 10/6/2005 21:26'!port	^ port! !!WAKom class methodsFor: 'private' stamp: 'xxx 4/7/2008 21:39'!register	Smalltalk addToStartUpList: self after: AutoStart.	Smalltalk addToShutDownList: self! !!WAKom class methodsFor: 'service' stamp: 'lr 10/28/2007 14:42'!setDebugMode	service setDebugMode! !!WAKom class methodsFor: 'service' stamp: 'lr 10/28/2007 14:42'!setDeploymentMode	service setDeploymentMode! !!WAKom class methodsFor: 'service' stamp: 'lr 10/28/2007 14:42'!setVerboseMode	service setVerboseMode! !!WAKom class methodsFor: 'service' stamp: 'avi 10/30/2005 16:40'!shutDown	self pause! !!WAKom class methodsFor: 'service' stamp: 'lr 10/28/2007 14:42'!startOn: aPort	self stop.	port := aPort.	service := self createService.	service start! !!WAKom class methodsFor: 'service' stamp: 'lr 6/5/2009 17:26'!startUp	self name = #WAKom ifTrue: [		SmalltalkImage current extractParameters			at: 'PORT' ifPresent: [ :value |				value isEmptyOrNil					ifFalse: [ port := value asInteger ] ] ].	port ifNotNil: [ self startOn: port ]! !!WAKom class methodsFor: 'service' stamp: 'lr 10/28/2007 14:42'!stop	self pause.	port := nil! !!WAKom methodsFor: 'private' stamp: 'pmm 9/24/2007 07:05'!collectionClass	^OrderedCollection! !!WAKom methodsFor: 'private' stamp: 'pmm 10/14/2006 14:28'!contentsOfResponse: aResponse	^aResponse contents! !!WAKom methodsFor: 'private' stamp: 'pmm 2/25/2007 11:49'!convertFileName: aString	^aString! !!WAKom methodsFor: 'private' stamp: 'pmm 11/30/2008 10:52'!convertMultipartFileField: aChunk	^(self fileClass fromChunk: aChunk)		fileName: (self convertFileName: aChunk fileName);		contentType: aChunk contentType		yourself! !!WAKom methodsFor: 'converting' stamp: 'lr 10/28/2007 14:42'!convertRequest: aKomRequest	| request |	self processMultipartFields: aKomRequest.	request := WARequest		method: aKomRequest method		url: aKomRequest url unescapePercents		headers: aKomRequest header		fields: (self fieldsOf: aKomRequest)		cookies: aKomRequest cookies		nativeRequest: aKomRequest.	aKomRequest method = 'PUT' ifTrue: [		request fields			at: 'PUTData'			put: (aKomRequest stream next: aKomRequest contentLength) ].	^ request! !!WAKom methodsFor: 'converting' stamp: 'lr 10/28/2007 14:42'!convertResponse: aResponse	| komResponse |	aResponse ifNil: [ ^ HttpResponse fromString: 'Request handling aborted; reload to retry' ].	komResponse := HttpResponse new.	aResponse cookies do: [ :assoc |		komResponse setCookieName: assoc key value: assoc valueWithExpiry path: assoc path ].	aResponse headers associationsDo: [ :assoc |		komResponse fieldAt: assoc key put: assoc value ].	komResponse status: (HttpResponse statusSymbolFor: aResponse status).	komResponse contents: (self contentsOfResponse: aResponse).	komResponse contentType: aResponse contentType.	^ komResponse! !!WAKom methodsFor: 'accessing' stamp: 'avi 11/20/2003 01:13'!entryPoint: anEntryPoint	entryPoint := anEntryPoint! !!WAKom methodsFor: 'private' stamp: 'pmm 10/14/2006 14:23'!fieldsOf: aKomRequest	^aKomRequest method = 'POST'		ifTrue: [ aKomRequest postFields ]		ifFalse: [ aKomRequest getFields ]! !!WAKom methodsFor: 'private' stamp: 'pmm 11/30/2008 10:43'!fileClass	^self streamUploads		ifTrue: [ WATemporaryFile ]		ifFalse: [ WAFile ]! !!WAKom methodsFor: 'actions' stamp: 'lr 2/12/2007 20:32'!handleRequest: aRequest	^ entryPoint handleRequest: aRequest! !!WAKom methodsFor: 'actions' stamp: 'lr 4/17/2007 23:27'!process: komRequest	| request response komResponse  |	request := self convertRequest: komRequest.	response := self handleRequest: request.	komResponse := self convertResponse: response.	response release.	^ komResponse! !!WAKom methodsFor: 'kom 6.1' stamp: 'ab 5/18/2003 13:53'!processHttp	HttpResponse current: (self process: HttpRequest current).	^ true! !!WAKom methodsFor: 'kom 6.1' stamp: 'ab 5/18/2003 11:24'!processHttpRequest: aRequest	^ self process: aRequest! !!WAKom methodsFor: 'actions' stamp: 'pmm 8/24/2008 13:05'!processMultipartFields: aRequest	aRequest multipartFormFieldsDo: [ :chunk |		| contents fieldName previousValue |		fieldName := chunk fieldName.		contents := chunk fileName isEmptyOrNil			ifTrue: [				String streamContents: [ :stream |					chunk saveToStream: stream ] ]			ifFalse: [ self convertMultipartFileField: chunk ].		previousValue := aRequest postFields at: fieldName ifAbsent: [ nil ].		previousValue isNil			ifTrue: [  aRequest postFields at: fieldName put: contents ]			ifFalse: [				(previousValue isKindOf: self collectionClass)					ifTrue: [ previousValue add: contents ]					ifFalse: [ aRequest postFields at: fieldName put: (self collectionClass with: previousValue with: contents) ] ] ]! !!WAKom methodsFor: 'accessing' stamp: 'pmm 8/24/2008 12:58'!streamUploads	streamUploads isNil ifTrue: [		streamUploads := false ].	^streamUploads! !!WAKom methodsFor: 'accessing' stamp: 'pmm 8/24/2008 12:57'!streamUploads: aBoolean	"enables or disables upload streaming	if set to true, then all file uploads will be written to a temparory file"	streamUploads := aBoolean! !!WAKom methodsFor: 'kom 6.1' stamp: 'ab 5/18/2003 14:11'!validateForStack: anArray! !!WAKomEncoded class methodsFor: 'class initialization' stamp: 'pmm 4/7/2008 21:44'!initialize	self register! !!WAKomEncoded methodsFor: 'private' stamp: 'pmm 9/24/2007 07:30'!fieldsOf: aKomRequest	^(super fieldsOf: aKomRequest) associationsDo: [ :association |		(association value isKindOf: self collectionClass)			ifTrue: [				association value: (association value collect: [ :string |					self utf8ToSqueak: string ]) ]			ifFalse: [				(association value isKindOf: String) ifTrue: [					association value: (self utf8ToSqueak: association value) ] ] ]! !!WAKomEncoded39 class methodsFor: 'class initialization' stamp: 'pmm 4/7/2008 21:43'!initialize	self register.	self setUpConversionTables! !!WAKomEncoded39 class methodsFor: 'private' stamp: 'pmm 4/7/2008 21:43'!setUpConversionTables	(Smalltalk hasClassNamed: #UTF8TextConverter) "guard for Squeak 37"		ifFalse: [ ^self ].	Latin1ToUtf8Map := ByteArray new: 256.	Latin1ToUtf8Encodings := Array new: 256.	0 to: 255 do:[ :index |		| latin1 utf8 |		latin1 := String with: (Character value: index).		utf8 := latin1 convertToWithConverter: UTF8TextConverter new.		latin1 = utf8			ifTrue:[				Latin1ToUtf8Map at: index + 1 put: 0 ] "no translation needed"			ifFalse:[				Latin1ToUtf8Map at: index + 1 put: 1. "no translation needed"				Latin1ToUtf8Encodings at: index + 1 put: utf8 ] ]! !!WAKomEncoded39 methodsFor: 'private' stamp: 'pmm 7/24/2007 21:39'!contentsOfResponse: aResponse	| responseStream tokens type subTypes  |	responseStream := aResponse.	tokens := aResponse contentType findTokens: '/'.	type := tokens first.	subTypes := tokens second findTokens: '+'.	(type = 'text' or: [subTypes includes: 'xml'])		ifTrue: [			responseStream := (self squeakToUtf8: aResponse contents contents) readStream. 			responseStream binary reset ]		ifFalse: [ responseStream := responseStream contents readStream ].	^responseStream! !!WAKomEncoded39 methodsFor: 'private' stamp: 'pmm 7/24/2007 21:40'!convertFileName: aString	^self utf8ToSqueak: aString! !!WAKomEncoded39 methodsFor: 'private-decoding' stamp: 'pmm 7/24/2007 21:36'!invalidUtf8	self error: 'Invalid UTF-8 input'! !!WAKomEncoded39 methodsFor: 'private-encoding' stamp: 'lr 3/10/2009 08:31'!squeakToUtf8: aString	^ aString isString		ifTrue: [			aString isByteString				ifTrue: [ self squeakToUtf8Fast: aString ]				ifFalse: [ self squeakToUtf8Default: aString ] ]		ifFalse: [ ^ aString ]! !!WAKomEncoded39 methodsFor: 'private-encoding' stamp: 'pmm 7/24/2007 21:31'!squeakToUtf8Default: aString	^aString convertToWithConverter: UTF8TextConverter new! !!WAKomEncoded39 methodsFor: 'private-encoding' stamp: 'pmm 7/24/2007 21:33'!squeakToUtf8Fast: aByteString	"Convert the given string from UTF-8 using the fast path if converting to Latin-1"	| outStream lastIndex nextIndex |	lastIndex := 1.	nextIndex := ByteString findFirstInString: aByteString inSet: Latin1ToUtf8Map startingAt: lastIndex.	nextIndex = 0 ifTrue:[ ^aByteString ].	outStream := (String new: aByteString size * 2) writeStream.	[	outStream next: nextIndex-lastIndex putAll: aByteString startingAt: lastIndex.		outStream nextPutAll: (Latin1ToUtf8Encodings at: (aByteString byteAt: nextIndex) + 1).		lastIndex := nextIndex + 1.		nextIndex := ByteString findFirstInString: aByteString inSet: Latin1ToUtf8Map startingAt: lastIndex.		nextIndex = 0 ] whileFalse.	outStream next: aByteString size - lastIndex + 1 putAll: aByteString startingAt: lastIndex.	^outStream contents! !!WAKomEncoded39 methodsFor: 'private-decoding' stamp: 'lr 10/28/2007 14:42'!utf8ToSqueak: aByteString	"Convert the given string from UTF-8 using the fast path if converting to Latin-1"	| outStream lastIndex nextIndex byte1 byte2 byte3 byte4 unicode |	lastIndex := 1.	nextIndex := ByteString findFirstInString: aByteString inSet: Latin1ToUtf8Map startingAt: lastIndex.	nextIndex = 0 ifTrue:[ ^aByteString ].	outStream := (String new: aByteString size) writeStream.	[	outStream next: nextIndex - lastIndex putAll: aByteString startingAt: lastIndex.		byte1 := aByteString byteAt: nextIndex.		(byte1 bitAnd: 16rE0) = 192 ifTrue: [ "two bytes"			byte2 := aByteString byteAt: (nextIndex := nextIndex+1).			(byte2 bitAnd: 16rC0) = 16r80 ifFalse: [ self invalidUtf8 ].			unicode := ((byte1 bitAnd: 31) bitShift: 6) + (byte2 bitAnd: 63)].		(byte1 bitAnd: 16rF0) = 224 ifTrue: [ "three bytes"			byte2 := aByteString byteAt: (nextIndex := nextIndex+1).			(byte2 bitAnd: 16rC0) = 16r80 ifFalse: [ self invalidUtf8 ].			byte3 := aByteString byteAt: (nextIndex := nextIndex+1).			(byte3 bitAnd: 16rC0) = 16r80 ifFalse: [ self invalidUtf8 ].			unicode := ((byte1 bitAnd: 15) bitShift: 12) + ((byte2 bitAnd: 63) bitShift: 6)				+ (byte3 bitAnd: 63)].		(byte1 bitAnd: 16rF8) = 240 ifTrue: [ "four bytes"			byte2 := aByteString byteAt: (nextIndex := nextIndex+1).			(byte2 bitAnd: 16rC0) = 16r80 ifFalse: [ self invalidUtf8 ].			byte3 := aByteString byteAt: (nextIndex := nextIndex+1).			(byte3 bitAnd: 16rC0) = 16r80 ifFalse: [ self invalidUtf8 ].			byte4 := aByteString byteAt: (nextIndex := nextIndex+1).			(byte4 bitAnd: 16rC0) = 16r80 ifFalse: [ self invalidUtf8 ].			unicode := ((byte1 bitAnd: 16r7) bitShift: 18) +							((byte2 bitAnd: 63) bitShift: 12) +							((byte3 bitAnd: 63) bitShift: 6) +							(byte4 bitAnd: 63)].		unicode ifNil: [ self invalidUtf8 ].		outStream nextPut: (Character value: unicode).		lastIndex := nextIndex + 1.		nextIndex := ByteString findFirstInString: aByteString inSet: Latin1ToUtf8Map startingAt: lastIndex.		nextIndex = 0 ] whileFalse.	outStream next: aByteString size - lastIndex + 1 putAll: aByteString startingAt: lastIndex.	^outStream contents! !!WALRUCache class methodsFor: 'instance creation' stamp: 'pmm 4/18/2006 20:17'!new	^ self basicNew initialize! !!WALRUCache class methodsFor: 'instance creation' stamp: 'ab 7/15/2002 00:10'!new: max	^ self new capacity: max! !!WALRUCache methodsFor: 'accessing' stamp: 'lr 3/19/2007 20:18'!at: aKey	^ self at: aKey ifAbsent: [ self error: 'No entry for ' , aKey ]! !!WALRUCache methodsFor: 'accessing' stamp: 'lr 3/19/2007 20:37'!at: aKey ifAbsent: anErrorBlock	| result |	result := table at: aKey ifAbsent: [ ^ anErrorBlock value ].	ageTable at: result put: 0.	^ result! !!WALRUCache methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!at: aKey put: aValue	| removals |	table at: aKey put: aValue.	ageTable at: aValue put: 0.	removals := OrderedCollection new.	ageTable associationsDo: [ :assoc |		assoc value > max			ifTrue: [ removals add: assoc key ]			ifFalse: [ assoc value: assoc value + 1 ] ].	removals do: [ :each | self remove: each ]! !!WALRUCache methodsFor: 'initialize-release' stamp: 'ab 7/15/2002 00:10'!capacity: aNumber	max := aNumber! !!WALRUCache methodsFor: 'initialize-release' stamp: 'lr 3/19/2007 20:16'!initialize	max := 20.	table := Dictionary new.	ageTable := Dictionary new! !!WALRUCache methodsFor: 'testing' stamp: 'avi 1/31/2004 17:45'!isEmpty	^ table isEmpty! !!WALRUCache methodsFor: 'callbacks' stamp: 'lr 3/19/2007 20:43'!nextKey	| key |	[ table includesKey: (key := WAExternalID new displayString) ] whileTrue.	^ key! !!WALRUCache methodsFor: 'removing' stamp: 'lr 10/28/2007 14:42'!remove: anObject	ageTable removeKey: anObject.	table removeKey: (table keyAtValue: anObject)! !!WALRUCache methodsFor: 'callbacks' stamp: 'lr 3/19/2007 20:43'!store: anObject	| key |	key := self nextKey.	self at: key put: anObject.	^ key! !!WADispatcherFiles methodsFor: 'accessing-pictures' stamp: 'lr 5/22/2007 21:52'!faviconIco	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(0 0 1 0 1 0 16 16 0 0 1 0 32 0 104 4 0 0 22 0 0 0 40 0 0 0 16 0 0 0 32 0 0 0 1 0 32 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 252 252 252 253 247 247 247 253 254 254 254 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 254 254 254 253 103 117 237 253 42 51 220 253 229 230 239 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 254 254 254 253 72 116 250 253 0 51 246 253 73 95 225 253 247 247 247 253 255 255 255 253 255 255 255 253 255 255 255 253 253 253 253 253 249 249 249 253 254 254 254 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 83 137 252 253 0 87 254 253 0 88 252 253 126 146 226 253 251 251 251 253 242 242 247 253 164 164 233 253 70 70 222 253 30 30 216 253 226 226 237 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 95 152 252 253 0 126 255 253 0 111 255 253 3 103 251 253 63 97 231 253 17 55 231 253 0 45 236 253 0 11 226 253 32 33 220 253 242 242 245 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 254 254 254 253 252 252 252 253 79 145 249 253 0 158 255 253 0 98 255 253 0 149 255 253 0 149 254 253 0 106 250 253 0 33 233 253 2 31 232 253 185 185 233 253 254 254 254 253 255 255 255 253 255 255 255 253 254 254 254 253 232 237 245 253 148 184 243 253 58 136 245 253 0 136 254 253 0 163 255 253 0 113 255 253 0 134 255 253 0 118 255 253 0 84 250 253 0 92 250 253 107 113 225 253 253 253 253 253 255 255 255 253 255 255 255 253 254 254 254 253 107 164 246 253 7 108 252 253 0 118 255 253 0 135 255 253 0 134 255 253 0 128 255 253 0 104 255 253 0 82 255 253 0 110 255 253 0 146 255 253 4 77 240 253 231 231 237 253 255 255 255 253 255 255 255 253 255 255 255 253 254 254 254 253 80 153 251 253 1 113 254 253 0 129 255 253 0 143 255 253 0 147 255 253 0 144 255 253 0 116 255 253 0 89 255 253 0 96 255 253 0 144 255 253 0 114 250 253 143 149 220 253 253 253 253 253 255 255 255 253 255 255 255 253 255 255 255 253 254 254 254 253 227 238 251 253 158 199 250 253 88 171 251 253 9 149 254 253 0 167 255 253 0 121 255 253 0 143 255 253 0 136 255 253 0 89 255 253 0 104 253 253 7 60 235 253 187 187 226 253 254 254 254 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 254 254 254 253 138 184 251 253 0 155 255 253 0 109 255 253 0 162 255 253 0 143 255 253 0 133 255 253 0 88 251 253 0 30 233 253 25 31 219 253 223 223 236 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 161 197 252 253 0 137 255 253 0 115 255 253 4 140 253 253 154 182 242 253 163 188 251 253 89 130 247 253 19 37 230 253 0 0 222 253 151 151 227 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 169 201 252 253 0 109 255 253 0 117 255 253 113 161 240 253 253 253 253 253 255 255 255 253 254 254 254 253 250 250 252 253 212 212 245 253 249 249 251 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 177 205 252 253 0 94 255 253 38 115 246 253 241 243 247 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 227 236 253 253 61 127 250 253 197 213 243 253 254 254 254 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 254 254 254 253 254 254 254 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) asByteArray ].	^ cache at: 1! !!WADispatcherFiles methodsFor: 'accessing-pictures' stamp: 'lr 5/22/2007 21:52'!logoPng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 200 0 0 0 106 8 3 0 0 0 206 82 238 73 0 0 0 25 116 69 88 116 83 111 102 116 119 97 114 101 0 65 100 111 98 101 32 73 109 97 103 101 82 101 97 100 121 113 201 101 60 0 0 3 0 80 76 84 69 8 150 238 164 187 200 8 93 145 227 227 227 243 47 0 5 149 237 252 68 0 165 205 229 1 88 140 0 142 229 133 195 233 231 22 0 119 186 227 17 99 149 72 132 169 222 222 222 116 178 216 1 83 133 230 230 230 132 167 188 211 211 211 59 165 230 0 137 220 199 217 229 12 96 147 179 181 178 1 86 137 208 208 208 225 229 225 183 200 211 196 143 140 107 185 233 233 233 232 255 155 0 104 152 180 149 200 230 233 236 232 0 146 236 43 150 217 67 172 236 219 219 219 218 218 218 215 215 215 152 180 196 233 225 216 134 170 192 255 92 0 247 250 246 46 163 235 16 154 238 13 153 238 0 143 230 216 216 216 124 163 188 212 212 212 255 163 0 223 4 1 185 213 231 243 247 242 255 100 0 81 135 168 58 118 155 201 178 166 239 243 238 255 146 0 50 120 161 192 76 72 255 114 0 0 140 226 213 221 225 238 162 105 196 205 211 222 224 221 247 251 246 83 166 216 232 235 231 0 144 232 179 137 133 255 107 0 206 44 43 13 141 219 201 157 154 255 81 0 239 175 131 231 215 203 255 130 0 255 138 0 92 180 234 237 238 236 117 158 182 255 122 0 13 146 228 218 220 217 202 93 90 235 201 174 246 146 78 245 249 244 211 218 221 239 242 238 236 112 52 234 136 99 203 212 219 204 207 203 241 245 240 41 113 156 235 239 234 172 195 208 44 157 226 155 194 218 205 210 213 160 198 221 240 242 240 231 234 230 154 190 212 0 145 234 255 172 0 2 147 237 38 109 152 237 241 236 234 236 234 248 252 247 101 145 172 213 216 212 19 155 238 211 214 210 230 127 70 171 208 231 195 201 204 74 173 234 229 232 228 189 115 112 168 192 206 249 119 25 194 197 193 199 210 217 238 240 238 230 233 229 228 231 228 233 71 47 213 30 28 130 185 219 29 147 218 223 227 223 0 146 235 179 162 158 231 231 231 223 56 27 34 159 236 30 155 231 246 248 245 16 148 229 243 246 243 243 245 242 74 170 228 179 193 202 206 209 205 220 223 221 0 135 217 162 200 224 30 105 148 0 138 223 172 200 217 244 247 244 227 230 226 220 223 219 250 92 11 236 237 235 216 225 231 96 148 178 238 240 237 125 191 232 248 140 56 246 249 246 213 213 212 198 190 184 7 146 231 31 107 152 215 218 214 22 156 238 6 144 227 217 217 217 190 206 217 166 194 210 89 173 225 71 124 157 214 214 214 10 143 225 28 99 140 19 153 236 15 151 233 209 209 209 20 152 232 134 192 227 91 144 175 217 218 217 30 103 146 3 147 234 3 145 231 87 140 172 15 91 137 194 107 94 9 148 232 250 77 1 229 229 229 228 228 228 246 250 245 224 224 224 244 248 243 242 246 241 238 242 237 236 240 235 225 225 225 234 238 233 3 91 143 228 232 227 230 234 229 242 244 241 21 102 151 209 211 208 70 160 215 16 96 145 15 90 135 199 202 198 228 229 227 78 176 237 246 174 117 221 221 221 201 204 200 224 225 224 237 191 173 14 143 222 27 143 215 229 229 228 141 175 195 245 238 228 215 207 198 57 157 218 222 141 137 178 207 225 226 228 225 64 128 166 233 237 233 210 69 61 14 139 216 29 151 226 249 94 26 213 213 213 252 87 0 112 150 173 209 156 125 250 103 10 240 193 151 64 169 234 249 253 248 250 254 249 251 255 250 199 109 83 34 0 0 22 165 73 68 65 84 120 218 212 155 13 92 148 117 182 199 193 145 55 33 7 198 65 82 33 68 134 28 134 156 44 94 68 70 26 92 32 157 134 200 40 94 101 219 81 215 69 44 19 137 134 217 44 149 181 104 88 19 226 166 105 105 102 96 166 172 107 173 75 181 83 98 89 109 183 152 153 103 128 1 95 202 205 189 179 222 238 122 175 43 146 93 168 187 206 112 207 57 255 103 94 120 177 165 20 149 127 31 243 51 204 248 225 255 125 206 57 191 243 59 255 231 25 175 254 49 181 28 180 134 123 199 107 108 113 232 204 26 141 89 103 31 235 32 14 221 127 63 240 192 109 218 54 179 125 140 131 216 45 191 144 247 189 254 63 146 18 149 99 108 131 232 148 114 185 188 111 217 19 61 109 58 199 152 6 81 149 202 145 228 251 157 29 22 251 152 6 49 75 20 10 185 66 241 250 193 70 165 217 49 150 65 52 199 21 217 10 121 145 98 217 23 106 62 185 28 14 187 78 167 179 131 34 143 37 16 135 230 33 69 122 186 60 55 79 254 253 158 82 139 29 33 204 150 18 109 169 50 197 108 119 140 41 16 203 67 138 162 92 121 122 84 238 235 7 195 181 22 179 38 165 253 193 127 124 147 188 233 31 234 18 179 125 172 129 228 165 41 20 81 81 233 203 118 132 75 122 30 250 229 111 3 147 113 237 232 76 209 141 41 144 148 135 20 105 81 233 242 180 57 81 242 101 191 124 170 213 215 215 119 60 145 60 115 76 169 26 75 32 246 148 135 178 211 162 114 229 185 115 230 164 101 43 178 211 139 138 250 198 35 199 55 95 53 142 37 16 135 93 165 124 32 59 106 78 154 60 125 206 156 57 81 81 105 105 185 138 241 129 129 129 201 155 158 127 242 88 201 88 73 45 160 48 91 218 31 124 186 8 16 160 72 8 36 183 207 119 188 175 111 96 242 189 127 219 211 105 25 11 197 238 112 232 84 154 146 142 7 31 248 69 122 81 212 99 115 230 164 247 165 33 71 122 171 111 78 118 246 248 228 223 60 243 7 189 82 53 6 228 23 172 123 201 109 255 188 251 233 244 162 188 168 199 30 3 144 220 190 162 40 168 20 223 214 244 188 220 190 228 159 29 124 178 81 171 177 95 239 134 168 58 177 77 229 184 252 180 68 28 150 127 254 46 29 41 230 60 70 107 78 90 159 34 55 61 167 85 158 7 81 9 188 111 202 142 218 82 139 238 58 119 246 237 245 70 88 75 129 194 110 183 95 6 197 97 254 143 108 16 168 220 188 180 180 40 170 141 168 220 190 156 156 214 156 116 120 153 231 187 233 249 95 237 97 94 248 58 130 28 152 110 164 101 170 68 14 251 101 194 98 79 249 93 54 91 10 182 228 242 156 156 156 190 92 32 138 202 14 188 23 10 132 77 39 215 15 196 49 93 36 18 133 69 71 27 77 166 19 78 142 97 96 236 13 119 3 4 228 86 110 110 81 81 122 58 224 200 49 32 185 16 144 180 214 64 72 44 45 155 23 175 31 200 9 145 232 141 200 59 189 188 34 77 2 17 25 216 225 151 221 162 190 251 105 133 34 27 138 132 45 144 221 156 62 36 73 203 147 7 62 63 13 122 161 227 186 130 96 64 242 239 184 211 203 167 34 83 192 53 152 117 158 155 87 53 28 112 131 104 148 141 79 222 245 212 255 41 20 233 80 239 184 242 114 20 121 69 57 168 89 80 235 95 133 183 95 95 16 199 237 144 87 107 9 196 143 227 150 154 117 206 236 218 186 186 82 4 133 35 218 187 141 48 192 169 167 104 143 47 124 226 171 239 159 146 203 179 243 16 36 61 7 10 36 55 199 183 47 61 187 53 249 179 143 122 44 215 46 181 96 119 219 7 168 44 252 189 93 36 138 70 144 138 24 63 161 240 89 179 157 150 106 53 22 142 72 68 26 80 223 64 34 0 36 202 14 117 248 158 39 15 126 255 58 248 69 48 140 242 52 204 176 190 241 227 251 228 227 147 239 170 109 167 34 185 6 32 7 10 104 95 251 111 31 144 251 171 69 162 9 107 239 128 128 148 239 18 10 181 4 162 90 42 98 43 108 221 92 248 7 38 227 86 157 10 34 165 83 169 44 37 237 157 250 218 39 238 234 3 191 152 219 138 202 11 218 219 26 24 232 235 155 188 105 199 113 146 173 209 7 217 198 139 172 201 120 187 167 54 17 8 100 86 76 214 46 155 80 171 130 129 117 27 69 35 108 194 134 59 32 80 135 34 51 77 130 74 179 217 140 40 8 163 41 209 30 47 94 86 4 86 139 41 86 90 94 81 107 114 50 216 248 159 23 195 52 114 13 26 98 3 82 172 107 138 54 153 4 5 131 65 48 179 202 227 31 149 218 16 228 4 98 248 253 117 237 90 72 56 0 244 153 45 176 114 75 53 26 141 138 170 199 14 78 69 217 184 44 61 42 45 71 158 151 150 167 104 237 83 100 103 183 6 38 195 60 114 63 40 240 232 131 216 235 69 162 185 179 189 188 96 95 2 129 71 114 217 25 8 100 86 192 163 82 136 136 106 53 70 227 175 135 0 3 57 32 229 98 130 56 225 233 54 11 145 80 113 57 52 61 255 155 30 149 142 114 149 51 30 13 252 120 54 87 109 218 161 110 211 141 58 200 106 163 40 236 16 106 83 76 52 103 61 225 194 56 208 64 32 152 89 8 178 84 213 0 28 115 95 240 228 40 127 81 104 19 150 148 88 240 172 215 78 42 97 238 4 136 190 156 92 224 248 108 202 243 63 223 4 16 52 32 222 2 245 62 234 238 23 220 212 6 226 40 15 226 184 103 73 154 116 171 247 214 139 234 33 82 19 32 179 234 226 9 196 92 96 36 14 134 65 159 207 10 56 47 149 74 148 64 162 98 237 178 223 220 227 171 72 247 149 195 92 248 217 148 191 125 241 197 87 183 124 67 19 123 242 189 123 58 52 163 13 162 50 26 195 232 2 215 149 127 200 113 171 145 99 181 200 185 38 80 137 32 136 18 20 65 116 137 194 225 245 66 100 62 112 212 101 197 7 4 39 52 215 104 75 218 0 68 231 4 145 247 249 202 115 198 127 51 101 71 113 120 99 248 158 39 14 254 230 62 72 173 187 106 71 31 4 74 125 29 11 200 139 75 56 235 1 187 189 129 53 138 185 235 16 132 50 11 64 184 213 16 144 104 198 145 15 2 215 4 159 143 15 200 8 150 201 186 59 218 75 44 102 39 136 218 55 7 15 28 254 13 44 239 113 173 178 189 244 120 119 241 142 131 247 63 243 135 99 202 209 78 45 7 70 132 15 136 144 3 75 181 13 41 214 229 99 49 228 135 53 65 55 68 16 27 183 122 58 6 4 57 102 131 78 155 194 136 99 247 57 131 193 86 170 45 73 209 240 86 76 115 28 40 160 204 239 253 170 248 184 210 12 138 220 6 221 37 188 54 92 175 133 129 100 84 65 224 151 67 141 68 2 72 11 112 112 39 116 58 136 199 27 249 135 88 77 31 130 20 194 13 63 42 228 86 27 141 111 220 129 28 94 77 192 97 18 64 129 100 236 222 125 78 220 43 237 209 42 221 32 255 137 24 129 159 81 8 236 56 2 155 161 83 106 181 74 139 106 84 229 151 244 105 59 117 145 166 48 142 227 42 161 87 24 69 111 92 26 32 77 1 8 98 85 194 135 232 103 62 235 0 67 96 165 128 76 62 39 22 51 16 190 218 205 183 161 232 254 108 202 147 225 56 219 178 51 9 157 10 123 230 168 117 118 143 126 81 73 109 93 96 181 10 10 84 170 122 145 177 137 149 2 73 83 5 92 121 2 1 19 51 129 126 234 227 135 28 28 5 4 65 138 123 74 25 8 146 152 247 254 54 57 249 190 41 95 176 217 214 253 203 70 235 52 126 192 52 97 63 128 14 112 110 244 92 129 192 212 128 77 197 213 184 15 87 80 73 187 64 238 188 147 172 48 96 248 5 81 64 38 223 35 22 219 122 58 148 109 78 16 85 201 131 247 223 242 204 147 181 61 109 215 226 142 21 57 241 130 202 202 202 165 219 200 188 62 11 229 62 19 46 62 120 148 130 189 70 81 36 187 240 179 195 76 166 13 49 117 8 18 0 32 48 244 230 179 100 107 10 122 169 37 11 241 0 228 57 113 82 173 39 136 93 211 174 175 13 63 86 58 28 199 85 7 113 108 45 168 231 125 184 177 30 70 216 3 240 119 40 4 160 98 182 201 52 93 100 20 205 70 142 138 152 48 48 44 97 117 229 30 32 51 239 100 50 93 158 149 21 207 64 54 47 16 247 30 147 116 184 83 203 174 179 40 161 180 83 84 163 127 87 215 177 117 58 223 236 152 229 125 86 7 217 20 77 151 186 2 236 47 228 24 227 8 229 184 51 86 193 236 114 172 17 23 8 147 105 164 0 14 16 223 136 164 164 102 53 43 118 222 110 57 92 165 61 58 32 174 137 201 193 186 246 220 9 249 27 102 206 140 12 131 141 99 167 139 244 0 137 198 235 14 118 69 40 172 225 4 27 234 202 49 139 220 32 172 104 112 133 6 191 38 51 24 12 225 146 206 246 146 20 179 19 132 253 170 225 55 225 117 245 10 27 20 10 40 222 136 158 189 150 137 171 207 4 216 121 37 121 45 23 72 19 230 79 93 86 144 77 168 231 4 77 172 72 118 49 16 146 99 4 11 13 218 101 147 74 99 19 100 178 132 154 158 210 118 165 39 200 229 151 215 149 82 168 26 26 26 236 60 7 236 213 239 133 181 60 71 69 69 197 186 33 32 145 94 24 16 24 65 132 101 2 0 137 193 144 120 128 212 101 189 251 200 114 169 77 40 20 218 128 36 33 65 218 89 170 28 117 16 254 160 128 170 97 250 118 224 216 15 61 57 18 187 29 219 120 76 76 204 108 147 177 158 146 6 95 154 144 100 38 93 246 0 2 65 75 133 33 241 0 41 207 218 133 24 28 183 235 165 248 128 135 151 39 52 171 75 149 37 163 11 2 133 199 31 20 56 79 10 182 193 78 131 14 29 230 57 64 126 202 203 235 194 48 10 44 105 98 4 78 144 58 0 177 9 213 38 0 65 183 30 143 32 38 103 68 96 128 183 114 214 104 212 179 140 231 192 253 142 46 8 230 209 9 94 158 150 175 92 185 18 39 242 250 233 2 171 223 161 195 135 91 192 136 55 69 182 192 6 227 179 202 253 24 136 15 250 114 1 146 204 244 33 144 93 66 110 47 128 248 12 6 137 41 135 119 172 2 193 150 58 114 191 9 9 221 165 84 236 186 171 12 226 174 107 38 179 203 103 205 59 121 211 77 55 223 60 110 198 18 52 22 220 11 135 14 183 180 120 229 11 76 130 15 73 125 178 206 187 210 169 174 220 234 6 129 189 115 5 38 99 147 235 133 27 196 15 57 194 98 24 136 108 32 72 255 85 0 25 116 142 185 29 155 222 202 121 39 79 50 142 174 174 163 128 193 69 127 240 193 225 22 175 67 153 192 36 132 86 16 16 176 133 227 35 130 153 198 49 144 10 218 59 39 64 16 47 39 72 189 19 36 198 15 56 76 126 56 31 102 100 60 34 147 213 116 92 77 144 33 199 152 91 1 35 243 40 97 32 199 184 46 127 255 151 65 104 222 253 224 3 8 200 37 8 142 208 246 109 70 70 198 226 243 156 105 250 96 16 74 39 4 49 14 0 49 81 2 86 196 76 128 150 47 152 64 1 217 93 109 144 169 175 98 68 134 28 99 58 110 135 120 188 125 129 199 96 28 254 133 82 169 244 225 23 91 90 62 255 252 5 228 176 61 247 237 195 249 111 11 173 158 32 86 23 72 185 159 192 84 234 4 193 202 23 1 136 15 129 68 34 72 40 155 171 146 122 155 37 165 56 33 178 19 161 43 3 113 171 19 121 142 233 13 232 3 33 30 143 243 24 200 1 32 83 63 141 141 141 125 241 197 197 159 127 238 243 73 190 21 250 0 112 217 132 156 64 235 2 201 114 131 196 120 128 176 153 29 181 216 135 222 106 201 180 114 239 102 145 215 90 35 78 90 40 41 85 182 17 136 227 138 64 208 221 172 118 169 83 4 146 136 14 128 49 23 137 46 48 140 125 113 27 231 19 199 212 84 104 95 139 23 47 254 252 205 79 202 203 183 124 40 180 65 80 128 99 169 197 19 68 64 215 29 59 140 159 201 84 73 163 35 76 86 25 143 198 74 171 172 168 197 21 168 9 91 94 218 18 64 211 200 151 98 177 184 74 226 97 126 127 26 8 95 13 13 78 117 194 125 159 44 204 52 26 247 234 246 27 69 103 89 82 157 5 178 106 30 68 38 147 109 126 111 241 155 127 6 144 242 44 64 129 182 102 221 111 241 4 225 4 174 4 2 16 124 195 7 79 131 50 30 73 136 85 115 2 63 4 100 118 24 49 38 223 186 224 136 120 167 190 199 195 252 254 72 144 129 234 132 24 222 164 78 148 69 243 33 59 240 198 223 5 74 170 11 212 10 177 66 166 134 164 130 197 187 231 189 63 254 17 64 234 208 138 111 137 198 141 87 166 12 11 130 195 9 252 211 195 56 234 102 236 126 68 150 160 135 232 181 48 195 146 65 24 175 220 186 96 218 17 67 149 122 196 109 100 16 200 96 149 197 104 56 69 150 170 33 145 114 162 154 94 141 75 52 82 68 48 32 33 169 73 189 189 207 33 200 159 17 164 60 171 188 60 244 60 108 188 146 7 1 159 43 244 0 161 35 134 104 52 187 88 11 6 89 85 183 144 11 34 83 207 48 94 249 114 193 180 105 226 218 50 126 172 210 217 29 63 10 196 115 184 195 117 0 213 105 133 39 135 255 77 2 147 209 100 220 56 14 87 215 70 188 172 137 60 136 56 169 247 247 239 186 64 200 160 76 128 235 238 4 201 138 23 98 181 95 98 169 181 1 65 102 163 105 135 109 175 73 50 52 234 133 194 204 135 89 141 3 198 185 53 211 144 67 47 233 24 113 64 60 65 6 15 119 168 78 200 225 194 192 36 138 64 167 145 72 32 39 145 227 108 151 19 68 156 36 54 4 3 72 86 29 145 212 213 213 197 76 96 166 17 107 58 43 30 139 223 20 201 138 189 238 188 32 236 18 249 41 216 247 26 177 33 188 7 106 106 73 208 183 16 143 69 231 130 35 0 227 200 239 129 3 19 11 166 170 31 7 50 100 184 99 234 196 56 86 20 238 99 28 254 133 152 234 17 93 200 129 42 118 150 137 111 8 130 244 138 13 205 111 135 34 8 146 192 159 152 24 102 26 125 104 96 2 57 182 10 80 155 98 104 158 197 129 150 93 127 152 104 245 18 61 73 118 130 172 87 44 62 2 24 226 61 85 192 1 211 161 197 21 144 17 130 240 195 221 219 179 142 78 156 56 177 176 26 135 187 253 34 81 28 227 216 7 53 157 72 69 61 181 16 220 169 192 116 246 194 133 68 80 176 204 125 227 60 64 154 63 234 77 144 218 194 242 63 129 88 240 201 213 68 94 139 156 123 128 84 10 33 137 198 112 208 92 8 85 125 142 149 195 52 113 66 153 164 83 98 37 16 67 18 168 110 111 113 163 94 13 121 165 108 67 231 59 162 128 56 65 28 56 220 101 198 205 103 222 105 28 9 235 116 12 8 190 158 143 199 152 213 196 49 53 85 42 252 59 25 114 172 243 249 227 60 65 18 206 72 1 132 227 194 242 25 72 86 86 249 6 248 168 233 18 59 201 109 142 5 18 180 131 248 2 181 233 203 215 0 227 149 139 239 28 17 47 84 119 118 180 183 247 156 22 54 195 88 248 209 206 238 42 125 89 79 41 112 164 120 36 214 200 64 28 123 81 102 87 184 60 96 87 215 70 108 126 153 236 117 34 29 99 18 71 72 106 172 237 116 37 227 216 120 18 43 229 38 143 212 194 136 8 173 86 65 216 6 228 136 143 143 15 197 38 120 9 125 72 70 134 44 33 22 122 203 108 146 88 214 40 196 193 23 47 222 19 49 77 108 192 44 106 111 87 42 181 29 61 18 137 90 34 233 233 233 236 208 194 32 98 97 28 35 7 161 188 154 193 186 5 187 198 93 243 113 171 43 177 127 143 27 183 145 142 49 137 35 36 181 217 118 90 211 134 15 95 76 186 153 42 62 194 223 9 2 197 158 240 40 12 23 232 150 242 179 40 125 66 33 155 4 151 216 145 180 65 150 96 149 10 163 227 93 28 80 11 88 213 226 164 90 9 4 68 137 171 189 163 163 20 86 7 98 180 17 135 106 132 28 12 4 221 108 34 207 193 106 218 191 11 203 100 18 11 208 70 58 198 68 109 130 13 199 10 69 22 60 6 221 71 41 120 50 194 68 162 197 64 130 191 93 188 248 18 4 65 32 200 164 214 150 17 4 217 100 13 101 71 210 189 6 153 30 12 88 16 182 188 201 155 131 9 226 8 20 132 44 28 56 148 176 241 182 146 18 64 33 32 23 134 139 99 68 32 152 88 222 140 227 241 196 25 167 8 196 127 35 93 116 138 208 70 192 240 46 164 128 132 124 42 21 74 240 118 243 12 122 11 56 76 238 136 4 127 253 53 184 173 243 24 17 43 107 209 207 97 93 132 102 209 222 147 122 13 234 110 240 146 111 7 7 7 175 17 31 129 181 179 57 169 87 122 70 45 41 5 142 182 20 90 72 3 72 41 160 86 80 230 238 188 250 151 28 8 130 15 33 136 86 16 199 62 72 162 89 176 227 169 208 48 160 16 62 189 153 66 148 152 56 241 20 38 22 130 76 178 113 251 221 136 192 225 1 178 153 64 104 162 8 35 142 175 171 19 128 36 148 250 220 173 226 164 230 50 137 149 206 121 72 154 154 107 107 160 168 213 146 206 210 118 22 0 141 198 98 177 164 192 31 141 134 40 40 28 35 229 32 144 19 164 179 0 114 50 211 36 224 132 184 229 169 111 65 11 55 78 116 78 27 84 232 8 242 241 42 33 142 68 43 89 143 36 21 240 119 54 196 5 139 22 125 13 62 62 210 10 3 201 75 84 7 247 244 202 164 177 210 80 10 72 176 56 105 39 104 145 222 38 5 105 50 244 22 119 19 69 15 85 7 150 53 219 186 202 204 51 176 104 140 156 131 64 10 68 162 163 20 144 11 144 221 66 219 171 176 229 83 17 78 16 214 185 249 149 186 222 198 213 67 199 252 148 64 230 155 6 130 92 92 244 245 123 111 190 217 18 157 25 29 138 173 110 242 162 5 73 134 133 205 210 32 12 206 230 5 73 189 80 12 80 199 101 53 221 221 141 101 101 106 160 40 237 208 18 6 95 15 78 2 92 236 145 142 145 115 0 136 3 159 211 153 79 133 254 56 6 196 54 233 213 21 51 22 112 38 2 161 128 56 41 10 95 6 117 21 44 53 26 151 51 215 66 1 89 226 74 173 85 23 23 189 135 22 37 139 181 108 244 30 226 230 198 132 216 229 15 103 236 190 167 186 183 183 89 221 3 42 171 108 215 130 52 117 34 146 147 130 199 176 15 89 142 145 115 16 8 148 8 27 190 187 142 2 8 140 68 100 139 166 123 130 164 22 122 219 240 231 66 206 4 153 117 150 101 214 70 4 137 115 169 150 120 243 162 221 25 241 172 219 1 198 197 96 208 164 218 50 41 140 142 175 65 50 25 100 53 18 80 85 166 178 237 90 130 192 10 199 39 2 134 195 184 220 131 104 63 4 98 68 16 150 69 111 205 2 18 156 137 68 75 25 8 102 214 167 103 87 209 49 38 190 33 48 213 187 213 12 65 142 242 32 176 235 224 201 187 51 50 120 140 87 254 235 157 105 56 25 169 171 164 82 118 250 169 199 38 167 108 195 85 130 171 141 98 193 231 212 208 237 255 56 12 6 2 91 123 203 217 9 17 133 3 195 189 63 133 7 129 31 121 179 99 76 239 137 254 254 43 150 152 220 106 22 7 242 180 128 113 132 132 192 182 167 221 58 121 247 110 74 42 8 7 12 70 226 226 42 16 37 201 105 64 17 214 64 42 181 99 34 165 88 152 208 186 235 155 47 235 225 159 161 235 255 49 32 123 113 107 78 159 14 40 113 86 126 36 226 35 226 77 199 152 113 244 230 44 87 237 116 249 31 229 184 37 43 120 14 4 57 178 32 120 209 100 228 248 18 48 224 245 194 170 50 9 214 115 123 167 86 75 5 209 70 219 103 203 85 217 87 131 130 7 57 1 89 239 1 226 239 127 33 130 141 68 46 16 60 254 123 139 222 74 68 199 120 129 143 222 209 25 167 166 242 28 33 211 196 73 208 168 123 215 172 89 243 14 121 15 177 172 91 47 161 234 118 46 192 112 5 193 51 18 195 96 252 132 99 92 4 49 163 227 240 4 193 11 143 94 203 9 130 28 213 236 141 66 28 88 231 177 143 146 150 125 156 74 28 239 131 247 131 54 151 148 4 255 67 231 97 168 213 151 97 175 107 199 98 160 194 160 96 12 138 195 16 140 159 126 143 3 65 28 207 226 200 74 166 215 9 210 117 22 73 38 178 43 239 141 199 152 27 89 91 164 232 240 179 9 197 34 241 215 4 50 9 42 226 88 173 180 23 64 146 196 178 133 225 122 117 143 179 184 161 93 167 56 219 245 64 130 171 5 225 2 161 155 225 213 23 6 144 84 3 9 159 66 179 208 116 204 98 123 95 5 230 137 139 112 115 204 19 175 79 13 249 203 188 151 33 171 186 245 106 181 186 177 38 188 241 56 115 30 88 220 109 72 160 225 139 194 163 209 13 77 167 43 189 255 231 197 238 134 211 99 135 213 251 60 72 176 219 241 104 51 16 228 2 27 71 18 154 81 132 93 37 62 15 205 31 22 182 184 119 167 30 231 136 82 248 175 167 147 40 88 203 118 166 147 171 95 95 113 89 255 32 200 54 246 128 66 245 81 23 201 68 72 167 68 6 118 106 137 149 59 202 182 30 103 144 117 119 219 132 47 191 74 175 222 159 116 4 172 56 122 241 36 217 25 48 82 61 218 14 104 117 160 80 46 231 97 118 67 92 150 226 234 220 80 102 32 5 70 231 19 148 213 243 120 139 152 10 205 47 145 135 122 117 226 171 44 147 254 36 238 53 232 203 164 54 219 170 73 191 158 247 157 55 154 113 67 113 66 146 65 122 166 140 134 83 40 138 18 156 38 208 205 186 40 46 171 77 87 9 193 3 164 0 207 78 240 198 147 209 217 170 105 56 231 188 253 61 157 111 72 200 227 235 197 226 133 101 18 214 172 153 25 47 110 108 212 131 62 73 58 123 104 170 67 117 98 198 195 60 16 99 52 25 92 32 248 60 225 44 232 237 19 97 76 71 23 72 219 46 196 249 251 20 143 193 90 197 227 235 65 99 171 192 250 169 207 72 165 205 120 31 188 184 91 207 155 113 156 185 75 104 168 0 4 141 230 135 40 70 231 89 36 234 236 192 65 174 49 2 67 34 96 213 144 40 131 161 168 112 170 27 35 228 79 235 167 29 73 194 99 51 216 117 103 213 233 51 221 53 3 204 56 223 41 204 174 178 24 142 98 244 30 170 2 16 59 152 198 183 200 152 159 69 142 5 180 243 127 95 223 11 36 171 86 184 56 82 227 126 133 199 152 85 252 65 1 152 113 240 226 30 102 156 207 38 157 78 55 64 101 175 13 5 3 105 48 138 86 50 27 95 8 28 220 68 190 63 136 155 99 129 164 240 99 164 74 253 238 101 60 43 128 118 77 28 120 74 64 94 124 160 25 119 53 60 157 238 218 66 184 64 156 163 235 77 113 75 226 82 137 227 47 235 193 243 117 55 55 199 198 54 39 24 60 143 49 241 192 3 15 7 82 152 23 31 96 198 221 161 112 56 28 215 148 130 129 168 96 228 187 217 121 16 196 103 82 28 92 254 99 101 53 54 105 108 243 128 99 204 82 118 224 132 167 4 188 25 119 249 39 251 229 154 118 127 255 53 2 193 121 100 197 56 231 112 78 241 40 132 114 88 136 195 68 89 183 205 125 140 41 225 93 7 138 210 176 102 220 225 252 218 215 181 166 224 65 10 240 46 135 71 56 222 247 6 142 98 24 38 58 59 240 228 15 143 49 213 76 99 149 120 28 107 30 224 197 135 54 60 254 126 81 255 181 93 8 178 21 196 106 190 59 28 223 173 7 142 143 104 40 106 135 165 29 116 140 57 216 117 12 206 167 254 235 179 200 253 238 133 54 88 120 138 153 144 194 245 172 174 203 220 67 17 226 180 43 221 24 67 188 184 253 58 164 210 176 32 183 27 241 24 200 59 46 206 27 167 162 35 98 89 173 158 142 110 120 203 49 240 24 83 165 187 108 89 95 71 14 6 226 216 246 119 78 8 246 9 133 86 140 24 52 220 161 204 90 156 2 53 216 60 57 70 207 199 94 201 96 101 55 107 107 200 7 246 54 47 108 44 99 195 29 100 18 141 68 67 143 49 111 60 10 30 4 191 89 166 105 83 74 212 250 42 9 201 147 83 102 7 232 147 78 119 195 165 211 224 179 95 250 46 86 74 27 20 53 234 147 211 60 185 173 211 232 12 217 163 2 98 215 105 128 164 132 4 74 201 159 63 13 174 235 27 24 194 19 68 133 119 39 64 159 218 152 121 26 44 79 55 100 54 13 185 99 197 190 249 132 243 144 101 240 109 150 97 11 187 191 255 6 5 113 176 45 235 216 141 150 127 113 146 217 127 131 46 118 87 151 161 232 92 235 58 186 216 43 2 233 119 125 219 99 140 84 246 15 60 249 224 24 200 50 182 32 6 60 139 226 184 17 219 245 79 0 25 22 165 191 127 44 130 12 65 233 31 83 235 255 5 24 0 173 15 202 119 74 152 115 199 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!WADispatcherFiles methodsFor: 'accessing-styles' stamp: 'lr 10/28/2007 14:54'!mainCss	^ '/* html */body {	color: #002842;	font-size: 12px;	font-family: Verdana, Arial, Helvetica, sans-serif;	background-color: #fbfffa;}input, textarea, select {	color: #002842;	font-family: Verdana, Arial, Helvetica, sans-serif;}a, a:link, a:active, a:visited, a:focus, a:hover {	color: #008aff;}/* headings */h1, h2, h3, h4, h5, h6 {	color: #01598d;	margin-bottom: 1ex;	font-weight: normal;}/* special */a.logo {	width: 200px;	height: 106px;	outline: none;	display: block;	text-indent: -100em;	background: url(logo.png) no-repeat;}div.version {	font-size: 80%;}span.unspecified {	color: #ff7000;}a.download {	background: url(save.png) no-repeat;	background-position: 0 50%;	padding-left: 18px;}/* walkback */.walkback th {	width: 150px;	text-align: left;	vertical-align: top;}'! !!WADispatcherFiles methodsFor: 'accessing-pictures' stamp: 'lr 5/22/2007 21:52'!savePng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 6 98 75 71 68 0 0 0 0 0 0 249 67 187 127 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 213 11 10 13 55 15 158 42 216 191 0 0 0 140 116 69 88 116 67 111 109 109 101 110 116 0 77 101 110 117 45 115 105 122 101 100 32 105 99 111 110 10 61 61 61 61 61 61 61 61 61 61 10 10 40 99 41 32 50 48 48 51 32 74 97 107 117 98 32 39 106 105 109 109 97 99 39 32 83 116 101 105 110 101 114 44 32 10 104 116 116 112 58 47 47 106 105 109 109 97 99 46 109 117 115 105 99 104 97 108 108 46 99 122 10 10 99 114 101 97 116 101 100 32 119 105 116 104 32 116 104 101 32 71 73 77 80 44 10 104 116 116 112 58 47 47 119 119 119 46 103 105 109 112 46 111 114 103 103 138 199 71 0 0 2 132 73 68 65 84 56 203 157 146 77 72 84 97 20 134 159 185 221 241 230 207 228 76 224 181 49 205 145 178 81 108 81 81 52 38 20 184 200 22 69 20 46 66 40 44 130 138 169 193 86 45 42 202 69 17 84 16 6 82 180 40 10 34 176 40 40 106 91 208 34 137 68 138 166 69 153 84 106 134 164 232 220 155 206 253 249 78 11 97 108 178 54 189 155 243 193 225 60 156 247 61 95 224 200 217 227 39 63 91 21 218 216 184 51 9 84 1 91 129 134 160 38 217 208 194 159 63 22 25 206 205 187 231 207 157 224 31 10 52 119 116 237 141 173 172 143 85 151 155 131 171 107 202 58 170 35 133 107 109 207 39 253 45 195 235 222 231 234 195 215 81 226 145 55 203 186 59 239 12 255 21 144 60 125 190 219 157 26 59 236 137 198 168 31 102 218 40 99 129 30 164 173 101 35 203 43 22 115 249 254 11 252 161 62 98 5 227 127 155 239 36 121 44 37 95 70 6 68 68 100 224 115 90 122 211 3 146 186 246 68 18 7 47 72 207 171 47 210 245 244 173 180 158 186 46 239 6 135 229 119 89 150 37 169 142 164 232 134 238 179 180 60 198 196 196 4 225 146 114 180 192 36 133 226 0 208 247 113 20 179 68 231 251 120 134 247 3 159 88 178 168 16 2 0 66 65 65 1 0 186 231 130 40 193 87 138 237 39 110 204 219 177 119 112 2 215 243 185 216 243 146 139 61 47 1 120 124 118 31 200 108 95 3 80 162 80 190 162 235 80 35 0 237 187 119 210 152 88 199 204 140 77 52 164 209 148 88 207 222 214 237 0 236 105 94 129 242 21 34 50 7 16 17 34 145 48 21 101 49 46 29 88 199 205 187 15 136 199 170 208 8 160 17 32 81 95 205 173 123 143 104 219 92 195 142 166 245 20 21 23 229 3 0 44 203 194 52 77 170 163 181 57 72 227 170 229 212 198 42 185 124 251 33 109 155 107 216 181 41 129 105 154 56 142 147 179 168 3 40 165 176 109 27 0 211 52 49 77 147 238 163 133 28 187 218 67 214 245 217 223 82 79 251 182 45 104 154 198 212 212 20 182 109 19 10 133 230 0 134 97 80 89 89 153 23 222 154 134 13 60 187 178 1 0 219 182 113 28 135 233 233 233 121 33 235 0 253 253 253 184 174 155 215 240 60 15 93 215 115 239 63 21 137 68 242 51 240 60 143 116 58 205 200 200 8 153 76 6 17 65 68 48 12 131 161 161 33 66 161 80 174 90 150 133 101 89 249 87 80 74 81 92 92 68 48 24 204 125 18 0 215 117 17 53 11 19 53 123 62 229 251 249 22 194 225 48 165 165 165 68 163 81 0 178 217 44 64 46 237 120 93 28 165 20 241 186 58 148 82 44 137 70 115 150 3 169 142 228 25 224 52 255 167 206 95 147 59 51 76 213 34 98 109 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!WADispatcherFiles methodsFor: 'accessing' stamp: 'lr 5/22/2007 21:26'!selectorsToInclude	^#( faviconIco mainCss )! !!WAFileLibrary class methodsFor: 'convenience' stamp: 'pmm 2/27/2007 20:35'!/ aSymbol	^self urlOf: aSymbol! !!WAFileLibrary class methodsFor: 'adding-files' stamp: 'pmm 10/4/2006 20:31'!addAllFilesIn: aPathString	"adds all files in the directory specified by aPathString to the current file library"	(SeasidePlatformSupport filesIn: aPathString)		do: [ :each | self addFileAt: each ]! !!WAFileLibrary class methodsFor: 'adding-files' stamp: 'pmm 10/5/2006 18:29'!addFileAt: aPath	"adds the file specified by aFilename to the current file library"	self		addFileAt: aPath		contents: (SeasidePlatformSupport			contentsOfFile: aPath			binary: (self isBinaryAt: aPath))! !!WAFileLibrary class methodsFor: 'private' stamp: 'pmm 10/4/2006 20:29'!addFileAt: aPath contents: aByteArrayOrString	self		addFileNamed: (SeasidePlatformSupport localNameOf: aPath)		contents: aByteArrayOrString! !!WAFileLibrary class methodsFor: 'private' stamp: 'pmm 10/5/2006 18:37'!addFileNamed: aFilename contents: aByteArrayOrString	| selector |	selector := self asSelector: aFilename.	(self isBinary: aFilename)		ifTrue: [ self compileBinary: aByteArrayOrString selector: selector ]		ifFalse: [ self compileText: aByteArrayOrString selector: selector ]! !!WAFileLibrary class methodsFor: 'vw port-squeak' stamp: 'lr 10/28/2007 14:42'!adjustForVisualWorks	| newSource oldSource badCode goodCode |	badCode := 'xxxCache := #(nil).'.	goodCode := 'xxxCache := #(nil) beMutable.'.	self selectors do: [:selector |		oldSource := self sourceCodeAt: selector.		(oldSource indexOfSubCollection: badCode startingAt: 1) > 0 ifTrue:			[newSource := oldSource copyReplaceAll: badCode with: goodCode.			self compile: newSource classified: self methodCategory]]! !!WAFileLibrary class methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!asSelector: aFilename	| mainPart extension |	mainPart := (aFilename copyUpToLast: $.)				reject: [:each | each isAlphaNumeric not].	[mainPart first isDigit]		whileTrue: [mainPart := mainPart allButFirst].	extension := (aFilename copyAfterLast: $.) asLowercase capitalized.	^ (mainPart , extension) asSymbol! !!WAFileLibrary class methodsFor: 'private' stamp: 'pmm 5/22/2007 22:08'!compileBinary: aByteArrayOrString selector: aSymbol	"compiles aByteArrayOrString into a method named aSymbol that returns aByteArrayOrString as a byte array"	| code |	code := SeasidePlatformSupport asMethodReturningByteArray: aByteArrayOrString named: aSymbol.	SeasidePlatformSupport compile: code into: self classified: self methodCategory! !!WAFileLibrary class methodsFor: 'private' stamp: 'pmm 2/11/2007 18:35'!compileMimeDatabaseString	self class		compile:  self createMimeDatabaseString		classified: 'accessing-defaults'! !!WAFileLibrary class methodsFor: 'private' stamp: 'pmm 5/23/2007 22:25'!compileText: aByteArrayOrString selector: aSymbol	"Compiles aByteArrayOrString into a method named aSymbol that returns aByteArrayOrString as a string literal.	aSymbol		^ aByteArrayOrString"	| code |	code := String streamContents: [ :stream |		stream nextPutAll: aSymbol; cr.		stream tab; nextPutAll: '^ '''.		aByteArrayOrString displayString do: [ :each |			each = $' ifTrue: [ stream nextPut: $' ].			stream nextPut: each ].		stream nextPutAll: '''' ].	SeasidePlatformSupport compile: code into: self classified: self methodCategory! !!WAFileLibrary class methodsFor: 'private' stamp: 'pmm 10/31/2007 20:28'!createMimeDatabaseString	"Reads /etc/mime.types for mime types and creates the #defaultMimeTypes method.	You should not execute this method. If you still do it remember to send #initialize."	^String streamContents: [ :stream |		| database |		stream nextPutAll:'defaultMimeTypes	^ #('.		database := self readMimeDatabase.		database keysSortedSafely do: [ :key |			 stream				nextPut: Character tab;				nextPut: Character tab;				print: key;				space;				print: (database at: key);				cr ].		stream nextPutAll: '	)' ]! !!WAFileLibrary class methodsFor: 'accessing-defaults' stamp: 'pmm 4/20/2006 20:52'!defaultMimeType	^ 'application/octet-stream'! !!WAFileLibrary class methodsFor: 'accessing-defaults' stamp: 'pmm 9/6/2007 22:27'!defaultMimeTypes	^ #(		'%' 'application/x-trash'		'323' 'text/h323'		'abw' 'application/x-abiword'		'ai' 'application/postscript'		'aif' 'audio/x-aiff'		'aifc' 'audio/x-aiff'		'aiff' 'audio/x-aiff'		'alc' 'chemical/x-alchemy'		'art' 'image/x-jg'		'asc' 'text/plain'		'asf' 'video/x-ms-asf'		'asn' 'chemical/x-ncbi-asn1-spec'		'aso' 'chemical/x-ncbi-asn1-binary'		'asx' 'video/x-ms-asf'		'au' 'audio/basic'		'avi' 'video/x-msvideo'		'b' 'chemical/x-molconn-Z'		'bak' 'application/x-trash'		'bat' 'application/x-msdos-program'		'bcpio' 'application/x-bcpio'		'bib' 'text/x-bibtex'		'bin' 'application/octet-stream'		'bmp' 'image/x-ms-bmp'		'book' 'application/x-maker'		'bsd' 'chemical/x-crossfire'		'c' 'text/x-csrc'		'c++' 'text/x-c++src'		'c3d' 'chemical/x-chem3d'		'cac' 'chemical/x-cache'		'cache' 'chemical/x-cache'		'cascii' 'chemical/x-cactvs-binary'		'cat' 'application/vnd.ms-pki.seccat'		'cbin' 'chemical/x-cactvs-binary'		'cc' 'text/x-c++src'		'cdf' 'application/x-cdf'		'cdr' 'image/x-coreldraw'		'cdt' 'image/x-coreldrawtemplate'		'cdx' 'chemical/x-cdx'		'cdy' 'application/vnd.cinderella'		'cef' 'chemical/x-cxf'		'cer' 'chemical/x-cerius'		'chm' 'chemical/x-chemdraw'		'chrt' 'application/x-kchart'		'cif' 'chemical/x-cif'		'class' 'application/java-vm'		'cls' 'text/x-tex'		'cmdf' 'chemical/x-cmdf'		'cml' 'chemical/x-cml'		'cod' 'application/vnd.rim.cod'		'com' 'application/x-msdos-program'		'cpa' 'chemical/x-compass'		'cpio' 'application/x-cpio'		'cpp' 'text/x-c++src'		'cpt' 'image/x-corelphotopaint'		'crl' 'application/x-pkcs7-crl'		'crt' 'application/x-x509-ca-cert'		'csf' 'chemical/x-cache-csf'		'csh' 'text/x-csh'		'csm' 'chemical/x-csml'		'csml' 'chemical/x-csml'		'css' 'text/css'		'csv' 'text/comma-separated-values'		'ctab' 'chemical/x-cactvs-binary'		'ctx' 'chemical/x-ctx'		'cu' 'application/cu-seeme'		'cub' 'chemical/x-gaussian-cube'		'cxf' 'chemical/x-cxf'		'cxx' 'text/x-c++src'		'dat' 'chemical/x-mopac-input'		'dcr' 'application/x-director'		'deb' 'application/x-debian-package'		'dif' 'video/dv'		'diff' 'text/plain'		'dir' 'application/x-director'		'djv' 'image/vnd.djvu'		'djvu' 'image/vnd.djvu'		'dl' 'video/dl'		'dll' 'application/x-msdos-program'		'dmg' 'application/x-apple-diskimage'		'dms' 'application/x-dms'		'doc' 'application/msword'		'dot' 'application/msword'		'dv' 'video/dv'		'dvi' 'application/x-dvi'		'dx' 'chemical/x-jcamp-dx'		'dxr' 'application/x-director'		'emb' 'chemical/x-embl-dl-nucleotide'		'embl' 'chemical/x-embl-dl-nucleotide'		'ent' 'chemical/x-pdb'		'eps' 'application/postscript'		'etx' 'text/x-setext'		'exe' 'application/x-msdos-program'		'ez' 'application/andrew-inset'		'fb' 'application/x-maker'		'fbdoc' 'application/x-maker'		'fch' 'chemical/x-gaussian-checkpoint'		'fchk' 'chemical/x-gaussian-checkpoint'		'fig' 'application/x-xfig'		'flac' 'application/x-flac'		'fli' 'video/fli'		'fm' 'application/x-maker'		'frame' 'application/x-maker'		'frm' 'application/x-maker'		'gal' 'chemical/x-gaussian-log'		'gam' 'chemical/x-gamess-input'		'gamin' 'chemical/x-gamess-input'		'gau' 'chemical/x-gaussian-input'		'gcd' 'text/x-pcs-gcd'		'gcf' 'application/x-graphing-calculator'		'gcg' 'chemical/x-gcg8-sequence'		'gen' 'chemical/x-genbank'		'gf' 'application/x-tex-gf'		'gif' 'image/gif'		'gjc' 'chemical/x-gaussian-input'		'gjf' 'chemical/x-gaussian-input'		'gl' 'video/gl'		'gnumeric' 'application/x-gnumeric'		'gpt' 'chemical/x-mopac-graph'		'gsf' 'application/x-font'		'gsm' 'audio/x-gsm'		'gtar' 'application/x-gtar'		'h' 'text/x-chdr'		'h++' 'text/x-c++hdr'		'hdf' 'application/x-hdf'		'hh' 'text/x-c++hdr'		'hin' 'chemical/x-hin'		'hpp' 'text/x-c++hdr'		'hqx' 'application/mac-binhex40'		'hs' 'text/x-haskell'		'hta' 'application/hta'		'htc' 'text/x-component'		'htm' 'text/html'		'html' 'text/html'		'hxx' 'text/x-c++hdr'		'ica' 'application/x-ica'		'ice' 'x-conference/x-cooltalk'		'ico' 'image/x-icon'		'ics' 'text/calendar'		'icz' 'text/calendar'		'ief' 'image/ief'		'iges' 'model/iges'		'igs' 'model/iges'		'iii' 'application/x-iphone'		'inp' 'chemical/x-gamess-input'		'ins' 'application/x-internet-signup'		'iso' 'application/x-iso9660-image'		'isp' 'application/x-internet-signup'		'ist' 'chemical/x-isostar'		'istr' 'chemical/x-isostar'		'jad' 'text/vnd.sun.j2me.app-descriptor'		'jar' 'application/java-archive'		'java' 'text/x-java'		'jdx' 'chemical/x-jcamp-dx'		'jmz' 'application/x-jmol'		'jng' 'image/x-jng'		'jnlp' 'application/x-java-jnlp-file'		'jpe' 'image/jpeg'		'jpeg' 'image/jpeg'		'jpg' 'image/jpeg'		'js' 'application/x-javascript'		'kar' 'audio/midi'		'key' 'application/pgp-keys'		'kil' 'application/x-killustrator'		'kin' 'chemical/x-kinemage'		'kpr' 'application/x-kpresenter'		'kpt' 'application/x-kpresenter'		'ksp' 'application/x-kspread'		'kwd' 'application/x-kword'		'kwt' 'application/x-kword'		'latex' 'application/x-latex'		'lha' 'application/x-lha'		'lhs' 'text/x-literate-haskell'		'lsf' 'video/x-la-asf'		'lsx' 'video/x-la-asf'		'ltx' 'text/x-tex'		'lzh' 'application/x-lzh'		'lzx' 'application/x-lzx'		'm3u' 'audio/x-mpegurl'		'm4a' 'audio/mpeg'		'maker' 'application/x-maker'		'man' 'application/x-troff-man'		'mcif' 'chemical/x-mmcif'		'mcm' 'chemical/x-macmolecule'		'mdb' 'application/msaccess'		'me' 'application/x-troff-me'		'mesh' 'model/mesh'		'mid' 'audio/midi'		'midi' 'audio/midi'		'mif' 'application/x-mif'		'mm' 'application/x-freemind'		'mmd' 'chemical/x-macromodel-input'		'mmf' 'application/vnd.smaf'		'mml' 'text/mathml'		'mmod' 'chemical/x-macromodel-input'		'mng' 'video/x-mng'		'moc' 'text/x-moc'		'mol' 'chemical/x-mdl-molfile'		'mol2' 'chemical/x-mol2'		'moo' 'chemical/x-mopac-out'		'mop' 'chemical/x-mopac-input'		'mopcrt' 'chemical/x-mopac-input'		'mov' 'video/quicktime'		'movie' 'video/x-sgi-movie'		'mp2' 'audio/mpeg'		'mp3' 'audio/mpeg'		'mp4' 'video/mp4'		'mpc' 'chemical/x-mopac-input'		'mpe' 'video/mpeg'		'mpeg' 'video/mpeg'		'mpega' 'audio/mpeg'		'mpg' 'video/mpeg'		'mpga' 'audio/mpeg'		'ms' 'application/x-troff-ms'		'msh' 'model/mesh'		'msi' 'application/x-msi'		'mvb' 'chemical/x-mopac-vib'		'mxu' 'video/vnd.mpegurl'		'nb' 'application/mathematica'		'nc' 'application/x-netcdf'		'nwc' 'application/x-nwc'		'o' 'application/x-object'		'oda' 'application/oda'		'odb' 'application/vnd.oasis.opendocument.database'		'odc' 'application/vnd.oasis.opendocument.chart'		'odf' 'application/vnd.oasis.opendocument.formula'		'odg' 'application/vnd.oasis.opendocument.graphics'		'odi' 'application/vnd.oasis.opendocument.image'		'odm' 'application/vnd.oasis.opendocument.text-master'		'odp' 'application/vnd.oasis.opendocument.presentation'		'ods' 'application/vnd.oasis.opendocument.spreadsheet'		'odt' 'application/vnd.oasis.opendocument.text'		'ogg' 'application/ogg'		'old' 'application/x-trash'		'oth' 'application/vnd.oasis.opendocument.text-web'		'oza' 'application/x-oz-application'		'p' 'text/x-pascal'		'p7r' 'application/x-pkcs7-certreqresp'		'pac' 'application/x-ns-proxy-autoconfig'		'pas' 'text/x-pascal'		'pat' 'image/x-coreldrawpattern'		'pbm' 'image/x-portable-bitmap'		'pcf' 'application/x-font'		'pcf.Z' 'application/x-font'		'pcx' 'image/pcx'		'pdb' 'chemical/x-pdb'		'pdf' 'application/pdf'		'pfa' 'application/x-font'		'pfb' 'application/x-font'		'pgm' 'image/x-portable-graymap'		'pgn' 'application/x-chess-pgn'		'pgp' 'application/pgp-signature'		'pk' 'application/x-tex-pk'		'pl' 'text/x-perl'		'pls' 'audio/x-scpls'		'pm' 'text/x-perl'		'png' 'image/png'		'pnm' 'image/x-portable-anymap'		'pot' 'text/plain'		'ppm' 'image/x-portable-pixmap'		'pps' 'application/vnd.ms-powerpoint'		'ppt' 'application/vnd.ms-powerpoint'		'prf' 'application/pics-rules'		'prt' 'chemical/x-ncbi-asn1-ascii'		'ps' 'application/postscript'		'psd' 'image/x-photoshop'		'psp' 'text/x-psp'		'py' 'text/x-python'		'pyc' 'application/x-python-code'		'pyo' 'application/x-python-code'		'qt' 'video/quicktime'		'qtl' 'application/x-quicktimeplayer'		'ra' 'audio/x-realaudio'		'ram' 'audio/x-pn-realaudio'		'rar' 'application/rar'		'ras' 'image/x-cmu-raster'		'rd' 'chemical/x-mdl-rdfile'		'rdf' 'application/rdf+xml'		'rgb' 'image/x-rgb'		'rm' 'audio/x-pn-realaudio'		'roff' 'application/x-troff'		'ros' 'chemical/x-rosdal'		'rpm' 'application/x-redhat-package-manager'		'rss' 'application/rss+xml'		'rtf' 'text/rtf'		'rtx' 'text/richtext'		'rxn' 'chemical/x-mdl-rxnfile'		'sct' 'text/scriptlet'		'sd' 'chemical/x-mdl-sdfile'		'sd2' 'audio/x-sd2'		'sda' 'application/vnd.stardivision.draw'		'sdc' 'application/vnd.stardivision.calc'		'sdd' 'application/vnd.stardivision.impress'		'sdf' 'chemical/x-mdl-sdfile'		'sdp' 'application/vnd.stardivision.impress'		'sdw' 'application/vnd.stardivision.writer'		'ser' 'application/java-serialized-object'		'sgf' 'application/x-go-sgf'		'sgl' 'application/vnd.stardivision.writer-global'		'sh' 'text/x-sh'		'shar' 'application/x-shar'		'shtml' 'text/html'		'sid' 'audio/prs.sid'		'sik' 'application/x-trash'		'silo' 'model/mesh'		'sis' 'application/vnd.symbian.install'		'sit' 'application/x-stuffit'		'skd' 'application/x-koan'		'skm' 'application/x-koan'		'skp' 'application/x-koan'		'skt' 'application/x-koan'		'smf' 'application/vnd.stardivision.math'		'smi' 'application/smil'		'smil' 'application/smil'		'snd' 'audio/basic'		'spc' 'chemical/x-galactic-spc'		'spl' 'application/x-futuresplash'		'src' 'application/x-wais-source'		'stc' 'application/vnd.sun.xml.calc.template'		'std' 'application/vnd.sun.xml.draw.template'		'sti' 'application/vnd.sun.xml.impress.template'		'stl' 'application/vnd.ms-pki.stl'		'stw' 'application/vnd.sun.xml.writer.template'		'sty' 'text/x-tex'		'sv4cpio' 'application/x-sv4cpio'		'sv4crc' 'application/x-sv4crc'		'svg' 'image/svg+xml'		'svgz' 'image/svg+xml'		'sw' 'chemical/x-swissprot'		'swf' 'application/x-shockwave-flash'		'swfl' 'application/x-shockwave-flash'		'sxc' 'application/vnd.sun.xml.calc'		'sxd' 'application/vnd.sun.xml.draw'		'sxg' 'application/vnd.sun.xml.writer.global'		'sxi' 'application/vnd.sun.xml.impress'		'sxm' 'application/vnd.sun.xml.math'		'sxw' 'application/vnd.sun.xml.writer'		't' 'application/x-troff'		'tar' 'application/x-tar'		'taz' 'application/x-gtar'		'tcl' 'text/x-tcl'		'tex' 'text/x-tex'		'texi' 'application/x-texinfo'		'texinfo' 'application/x-texinfo'		'text' 'text/plain'		'tgf' 'chemical/x-mdl-tgf'		'tgz' 'application/x-gtar'		'tif' 'image/tiff'		'tiff' 'image/tiff'		'tk' 'text/x-tcl'		'tm' 'text/texmacs'		'torrent' 'application/x-bittorrent'		'tr' 'application/x-troff'		'ts' 'text/texmacs'		'tsp' 'application/dsptype'		'tsv' 'text/tab-separated-values'		'txt' 'text/plain'		'udeb' 'application/x-debian-package'		'uls' 'text/iuls'		'ustar' 'application/x-ustar'		'val' 'chemical/x-ncbi-asn1-binary'		'vcd' 'application/x-cdlink'		'vcf' 'text/x-vcard'		'vcs' 'text/x-vcalendar'		'vmd' 'chemical/x-vmd'		'vms' 'chemical/x-vamas-iso14976'		'vor' 'application/vnd.stardivision.writer'		'vrm' 'x-world/x-vrml'		'vrml' 'x-world/x-vrml'		'vsd' 'application/vnd.visio'		'wad' 'application/x-doom'		'wav' 'audio/x-wav'		'wax' 'audio/x-ms-wax'		'wbmp' 'image/vnd.wap.wbmp'		'wbxml' 'application/vnd.wap.wbxml'		'wk' 'application/x-123'		'wm' 'video/x-ms-wm'		'wma' 'audio/x-ms-wma'		'wmd' 'application/x-ms-wmd'		'wml' 'text/vnd.wap.wml'		'wmlc' 'application/vnd.wap.wmlc'		'wmls' 'text/vnd.wap.wmlscript'		'wmlsc' 'application/vnd.wap.wmlscriptc'		'wmv' 'video/x-ms-wmv'		'wmx' 'video/x-ms-wmx'		'wmz' 'application/x-ms-wmz'		'wp5' 'application/wordperfect5.1'		'wpd' 'application/wordperfect'		'wrl' 'x-world/x-vrml'		'wsc' 'text/scriptlet'		'wvx' 'video/x-ms-wvx'		'wz' 'application/x-wingz'		'xbm' 'image/x-xbitmap'		'xcf' 'application/x-xcf'		'xht' 'application/xhtml+xml'		'xhtml' 'application/xhtml+xml'		'xlb' 'application/vnd.ms-excel'		'xls' 'application/vnd.ms-excel'		'xlt' 'application/vnd.ms-excel'		'xml' 'application/xml'		'xpi' 'application/x-xpinstall'		'xpm' 'image/x-xpixmap'		'xsl' 'application/xml'		'xtel' 'chemical/x-xtel'		'xul' 'application/vnd.mozilla.xul+xml'		'xwd' 'image/x-xwindowdump'		'xyz' 'chemical/x-xyz'		'zip' 'application/zip'		'zmt' 'chemical/x-mopac-input'		'~' 'application/x-trash'	)! !!WAFileLibrary class methodsFor: 'class initialization' stamp: 'pmm 9/6/2007 22:28'!initialize	MimeTypes := Dictionary new.	1 to: self defaultMimeTypes size by: 2 do: [ :index |		MimeTypes			at: (self defaultMimeTypes at: index)			put: (self defaultMimeTypes at: index + 1) ]! !!WAFileLibrary class methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!isBinary: aFilename	| tokens type subTypes |	tokens := (self				mimetypeFor: (aFilename copyAfterLast: $.)) findTokens: '/'.	type := tokens first.	type = 'text' ifTrue: [^false].	type = 'application' ifFalse: [^true].	tokens size = 1 ifTrue: [^true].	subTypes := tokens second findTokens: '+'.	^ subTypes noneSatisfy: [:each |		#('x-javascript' 'xml') includes: each]! !!WAFileLibrary class methodsFor: 'private' stamp: 'pmm 10/5/2006 18:37'!isBinaryAt: aPath	^self isBinary: (SeasidePlatformSupport localNameOf: aPath)! !!WAFileLibrary class methodsFor: 'private' stamp: 'pmm 4/7/2007 00:58'!methodCategory	"the method category for uploaded files"	^#uploaded! !!WAFileLibrary class methodsFor: 'accessing' stamp: 'pmm 4/20/2006 20:52'!mimetypeFor: aString	^ self mimetypes at: aString ifAbsent: [ self defaultMimeType ]! !!WAFileLibrary class methodsFor: 'accessing' stamp: 'pmm 4/20/2006 20:51'!mimetypes	^ MimeTypes! !!WAFileLibrary class methodsFor: 'private' stamp: 'pmm 7/4/2009 11:40'!readMimeDatabase	"reads /etc/mime.types for mime types"	| stream content types tokens value keys |	stream := (MultiByteFileStream readOnlyFileNamed: '/etc/mime.types')		ascii		wantsLineEndConversion: true;		yourself.	content := [ stream contentsOfEntireFile ]		ensure: [ stream close ].	types := Dictionary new.	content linesDo: [ :each |		(each isEmpty or: [ each first = $# ]) ifFalse: [			tokens := each findTokens: String tab.			tokens size > 1 ifTrue: [				value := tokens first.				keys := tokens second findTokens: ' '.				keys do: [ :key |					types at: key put: value ] ] ] ].	^types! !!WAFileLibrary class methodsFor: 'convenience' stamp: 'pmm 2/13/2007 18:03'!register	"no longer needed left in so that code can still be loaded since it is sent in class side initialize methods"! !!WAFileLibrary class methodsFor: 'convenience' stamp: 'pmm 2/16/2007 16:01'!unregister	"no longer used"! !!WAFileLibrary class methodsFor: 'convenience' stamp: 'pmm 4/14/2010 11:03'!urlOf: aSymbol	^self default urlOf: aSymbol! !!WAFileLibrary methodsFor: 'actions' stamp: 'lr 10/28/2007 14:42'!addFile: aFile	"adds a file to the receiver	aFile an instance of of WAFile"	| contents |	aFile isNil ifTrue: [ ^self "in case no file was selected for uploading" ].	contents := (self class isBinary: aFile fileName)		ifTrue: [ aFile contents ]		ifFalse: [ SeasidePlatformSupport convertToSmalltalkNewlines: aFile contents ].	self class addFileNamed: aFile fileName contents: contents! !!WAFileLibrary methodsFor: 'private' stamp: 'pmm 10/4/2007 18:44'!asFilename: aSelector	| dotIndex extension |	dotIndex := self lastUpperCaseIndexIn: aSelector.	dotIndex = 0		"#asString is ok here because aSelector is a Symbol and #displayString would return the hash character as well"		ifTrue: [ ^ aSelector asString ].	extension := (aSelector last: aSelector size - dotIndex + 1) asLowercase.	^ (aSelector first: dotIndex - 1), '.', extension! !!WAFileLibrary methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!asSelector: aFilename	^ self class asSelector: aFilename! !!WAFileLibrary methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!compileBinary: aString selector: aSymbol	^self class compileBinary: aString selector: aSymbol! !!WAFileLibrary methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!compileText: aString selector: aSymbol	self class compileText: aString selector: aSymbol! !!WAFileLibrary methodsFor: 'accessing' stamp: 'pmm 4/22/2006 00:41'!configurationComponent	^ WAFileLibraryEditor new		library: self;		yourself! !!WAFileLibrary methodsFor: 'private' stamp: 'djr 12/28/2009 10:05'!fileSelectors	^ (self class selectors asIdentitySet		select: [ :each | self isFileSelector: each ])		removeAllFoundIn: self nonFileSelectors;		yourself! !!WAFileLibrary methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!isFileSelector: aSymbol	^ aSymbol isUnary and: [ (self lastUpperCaseIndexIn: aSymbol) > 1 ]! !!WAFileLibrary methodsFor: 'private' stamp: 'lr 2/18/2007 12:28'!lastUpperCaseIndexIn: aString	^ aString findLast: [ :each | each isUppercase ]! !!WAFileLibrary methodsFor: 'accessing' stamp: 'mb 2/23/2007 10:18'!mimetypeForFile: aFilename	^self class mimetypeFor: (aFilename copyAfterLast: $.)! !!WAFileLibrary methodsFor: 'private' stamp: 'pmm 2/22/2007 07:17'!nonFileSelectors	^#(		nonFileSelectors		selectorsToInclude	)! !!WAFileLibrary methodsFor: 'actions' stamp: 'pmm 4/21/2006 23:57'!removeFile: aFilename	SeasidePlatformSupport		removeSelector: (self asSelector: aFilename)		from: self class! !!WAFileLibrary methodsFor: 'actions' stamp: 'lr 10/28/2007 14:42'!renameFile: oldName to: newName	| contents file |	(self asSelector: oldName) = (self asSelector: newName)		ifTrue: [ ^ nil ].	contents := self perform: (self asSelector: oldName).	file := WAFile new contents: contents.	file fileName: newName.	self addFile: file.	self removeFile: oldName! !!WAFileLibrary methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!selectorsToInclude	"The files represented by the selectors this method returns will be automatically added to the html <head> if the receiver is added to the respective Seaside application.	This makes only sense for CSS and JS files"	^ #()! !!WAFileLibrary methodsFor: 'processing' stamp: 'lr 4/9/2007 11:06'!updateRoot: aHtmlRoot	"Only override if you want to automatically include new types of resources. The default implementation knows how to reference CSS, JS and FavIcons into aHtmlRoot."	self selectorsToInclude do: [ :each |		(each endsWith: #Js)			ifTrue: [ aHtmlRoot javascript url: (self urlOf: each) ].		(each endsWith: #Ico)			ifTrue: [ aHtmlRoot link beShortcutIcon; url: (self urlOf: each) ].		(each endsWith: #Css)			ifTrue: [ aHtmlRoot stylesheet url: (self urlOf: each) ] ]! !!WAFileLibraryDemo methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!mainCss	^'/* Pier   Copyright (c) 2003-2006 Lukas Renggli   Copyright (c) 2005-2006 Software Composition Group, University of Berne*/* {	margin: 0px;	padding: 0px;}body {	font-family: Verdana, Arial, Helvetica, sans-serif;	font-size: 12px;	color: #111111;	margin: 10px;}img {	border: none;}td,th {	text-align: left;	vertical-align: top;}a {	text-decoration: none;	color: #092565;}a:hover {	text-decoration: underline;}.broken {    color: #aa0000;}.protected {    color: #aaaaaa;}'! !!WAFileLibraryDemo methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!mainJpg	^ #(255 216 255 224 0 16 74 70 73 70 0 1 1 1 0 72 0 72 0 0 255 225 0 22 69 120 105 102 0 0 77 77 0 42 0 0 0 8 0 0 0 0 0 0 255 219 0 67 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 255 219 0 67 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 255 192 0 17 8 0 4 2 152 3 1 34 0 2 17 1 3 17 1 255 196 0 24 0 1 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 7 9 10 255 196 0 38 16 0 2 3 0 1 1 8 3 1 0 0 0 0 0 0 0 0 1 17 81 145 7 2 6 8 9 40 49 54 116 195 65 103 129 183 255 196 0 20 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 196 0 20 17 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 218 0 12 3 1 0 2 17 3 17 0 63 0 235 191 191 103 181 250 190 7 87 216 85 254 17 73 62 9 229 249 83 230 63 181 191 230 188 74 0 26 177 10 150 33 10 150 32 0 66 165 136 66 165 136 0 16 169 98 16 169 98 0 4 42 88 132 42 88 128 1 10 150 33 10 150 32 0 66 165 136 66 165 136 0 16 169 98 16 169 98 0 4 42 88 132 42 88 128 1 10 150 33 10 150 32 0 66 165 136 66 165 136 0 16 169 98 16 169 98 0 4 42 88 132 42 88 128 1 10 150 33 10 150 32 0 66 165 136 66 165 136 0 16 169 98 16 169 98 0 4 42 88 132 42 88 128 1 10 150 33 10 150 32 0 66 165 136 66 165 136 0 16 169 98 16 169 98 0 4 42 88 132 42 88 128 1 10 150 33 10 150 32 0 66 165 136 66 165 136 0 16 169 98 16 169 98 0 4 42 88 132 42 88 128 1 10 150 33 10 150 32 0 66 165 136 66 165 136 0 16 169 98 16 169 98 0 4 42 88 132 42 88 128 1 10 150 33 10 150 32 0 66 94 137 47 225 32 0 0 0 0 0 132 253 84 145 10 150 32 0 66 165 136 66 165 136 0 16 169 98 16 169 98 0 4 42 88 132 42 88 128 1 10 150 33 10 150 32 0 66 165 136 66 165 136 0 16 169 98 16 169 98 0 4 42 88 140 168 241 117 73 112 55 16 66 75 204 143 100 255 0 31 173 121 108 0 44 254 226 126 215 233 248 29 63 88 0 15 255 217) asByteArray! !!WAStandardFiles methodsFor: 'accessing-images'!codebrowserPng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 6 98 75 71 68 0 255 0 255 0 255 160 189 167 147 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 213 9 22 18 55 41 59 82 2 72 0 0 1 203 73 68 65 84 56 203 165 147 77 104 19 65 20 199 127 51 221 163 72 22 34 45 226 177 224 41 160 88 43 1 15 130 21 132 120 236 69 208 182 39 175 165 23 21 60 138 32 197 32 245 34 126 128 154 22 138 49 189 91 26 17 77 92 16 237 193 98 211 141 27 76 253 192 213 108 235 16 21 90 145 205 120 48 67 179 109 106 43 190 203 255 13 204 251 207 111 102 222 131 255 12 97 146 226 93 250 128 25 224 216 86 122 120 136 188 169 147 0 151 71 47 157 1 102 14 30 119 216 142 182 18 88 77 189 1 240 237 249 57 182 163 87 79 74 221 172 59 45 141 211 222 84 64 89 21 88 221 147 167 172 10 252 232 122 216 86 95 76 75 6 199 138 28 233 31 6 24 55 4 196 227 113 196 137 165 63 139 125 77 101 77 125 223 39 127 79 50 116 237 25 31 158 140 51 183 16 132 64 135 213 122 31 165 20 245 122 125 195 75 7 65 128 155 73 173 21 123 203 124 45 77 117 0 61 17 3 219 182 177 109 59 82 236 251 62 110 38 197 224 88 145 197 199 25 94 149 151 81 165 28 64 207 200 100 99 246 175 4 230 228 129 116 129 197 124 134 185 183 10 85 202 241 115 255 69 206 159 189 48 11 136 77 9 180 214 20 210 189 12 92 121 138 55 125 135 202 231 239 168 249 7 188 239 26 166 179 205 55 70 8 180 214 100 179 89 126 201 67 204 59 14 239 62 213 89 122 61 5 189 105 118 173 172 0 218 52 161 110 75 16 134 33 187 63 166 121 244 165 155 251 185 28 221 242 37 59 251 110 145 76 38 113 93 151 55 149 5 140 139 92 79 80 173 86 241 60 143 145 201 6 71 59 43 172 238 72 16 30 24 37 145 72 96 89 22 150 101 69 186 120 3 65 44 22 67 107 77 173 86 67 107 141 148 18 173 53 66 8 132 16 173 219 27 17 3 165 20 142 227 108 58 117 198 100 125 24 131 137 155 183 175 159 250 135 41 158 48 201 111 90 157 232 152 121 9 252 18 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!WAStandardFiles methodsFor: 'accessing-images'!configPng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 6 98 75 71 68 0 255 0 255 0 255 160 189 167 147 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 213 11 4 11 55 32 209 169 238 103 0 0 0 29 116 69 88 116 67 111 109 109 101 110 116 0 67 114 101 97 116 101 100 32 119 105 116 104 32 84 104 101 32 71 73 77 80 239 100 37 110 0 0 1 217 73 68 65 84 56 203 197 147 77 107 19 97 20 133 159 105 107 131 52 157 52 35 161 38 67 55 129 198 221 132 100 66 72 138 88 117 37 53 89 137 8 21 4 33 100 254 65 17 92 117 33 136 43 17 55 45 253 3 165 45 8 67 178 81 12 88 65 145 188 249 152 162 130 219 36 148 137 52 37 89 180 136 31 113 97 103 72 219 116 213 133 119 117 121 207 229 112 239 57 231 133 115 150 116 22 240 244 217 147 190 211 63 90 122 124 230 220 152 211 220 189 119 39 163 235 113 19 64 136 74 22 32 159 51 88 93 91 57 134 157 36 115 9 116 61 110 230 115 6 150 101 1 152 161 160 74 203 110 16 10 170 160 99 166 146 105 52 77 3 232 15 146 140 13 178 89 150 197 165 105 63 183 179 11 238 91 44 17 37 70 212 197 79 214 168 211 248 21 191 248 211 255 189 24 185 50 75 171 209 98 251 221 118 175 109 183 61 59 214 78 111 202 55 229 153 240 78 80 42 149 16 162 146 253 242 249 235 183 99 27 56 130 133 130 42 0 181 90 173 103 219 223 95 9 81 221 84 20 229 170 36 141 62 92 200 220 10 56 231 232 122 220 213 98 196 97 202 231 12 98 137 127 171 250 124 62 185 217 108 110 110 172 111 153 157 78 231 189 44 123 3 206 57 249 156 49 220 133 213 181 21 66 65 149 88 34 202 193 193 225 225 220 92 122 9 32 28 14 27 221 110 183 7 200 213 114 157 194 110 241 180 6 111 94 191 93 246 43 126 49 57 233 93 188 113 237 38 63 127 253 184 208 110 183 3 145 200 236 3 73 226 242 252 245 121 121 220 51 78 69 84 16 162 146 125 241 252 229 253 161 54 166 146 105 90 118 3 117 70 69 157 81 47 30 65 178 51 147 74 166 1 204 141 245 45 215 198 145 193 117 52 77 99 207 222 167 96 22 169 150 235 0 84 203 117 10 102 145 61 123 223 201 193 112 13 142 84 237 187 73 212 49 51 211 25 10 187 69 39 153 230 199 79 31 78 37 241 220 127 225 255 215 95 179 89 175 43 2 12 187 45 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!WAStandardFiles methodsFor: 'accessing-scripts' stamp: 'pmm 2/13/2007 19:16'!externalAnchorsJs	^ '// See http://www.sitepoint.com/article/standards-compliant-worldfunction externalLinks() {	if (!!document.getElementsByTagName) return;	var anchors = document.getElementsByTagName("a");	for (var i=0; i<anchors.length; i++) {	var anchor = anchors[i];	if (anchor.getAttribute("href") && anchor.getAttribute("rel") == "external")		anchor.target = "_blank";	}}'! !!WAStandardFiles methodsFor: 'accessing-styles' stamp: 'lr 5/28/2007 17:49'!haloCss	^ '.halo {	margin: 2px;	border: 1px solid #aaa;}/* header */.halo-header {	overflow: hidden;	padding: 2px;	color: #444;	background-color: #eee;	border-bottom: 1px solid #aaa;	font: 10pt Verdana, Arial, Helvetica, sans-serif;}.halo-header a {	text-decoration: none;}.halo-header div {	float: left;}.halo-header div.classnamehaloplugin,.halo-header div.browserhaloplugin,.halo-header div.inspectorplugin,.halo-header div.styleshaloplugin {	float: left;	display: block;	padding-right: 5px;}.halo-header div.browserhaloplugin {	background: url(codebrowser.png) no-repeat;}.halo-header div.inspectorplugin {	background: url(inspector.png) no-repeat;}.halo-header div.styleshaloplugin {	background: url(styleeditor.png) no-repeat;}.halo-header div.browserhaloplugin a,.halo-header div.inspectorplugin a,.halo-header div.styleshaloplugin a {	width: 16px;	display: block;	text-indent: -32000px;	background-position: 0 50%;	outline: none;}.halo-header div.modehaloplugin {	float: right;	display: block;}.halo-header div.modehaloplugin a {	color: #444;}.halo-header div.modehaloplugin a:hover {	color: #111;}.halo-header div.modehaloplugin a.active {	font-weight: bold;}/* body */.halo-body {	clear: both;	padding: 2px;}/* source */.halo-source .tag-known {	font-weight: bold;	color: navy;}.halo-source .attribute-known {	color: navy;}.halo-source .attribute-value {	color: purple;}.halo-source .comment {	font-style: italic;	color: green;}'! !!WAStandardFiles methodsFor: 'accessing-images'!inspectorPng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 6 98 75 71 68 0 240 0 240 0 239 52 6 103 27 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 213 11 5 16 15 5 37 253 173 47 0 0 1 246 73 68 65 84 56 203 157 146 77 107 19 81 24 133 159 59 201 36 77 154 102 134 74 82 10 10 181 93 104 26 69 20 193 133 184 20 10 85 119 226 38 191 192 111 169 244 31 136 182 36 65 68 20 116 89 119 85 16 197 77 168 59 65 236 162 84 40 164 137 86 171 150 80 53 141 205 71 39 77 50 51 215 69 72 73 66 82 170 103 119 15 239 61 239 225 188 71 60 121 250 120 49 247 39 119 140 61 64 85 213 231 19 183 38 47 182 144 211 209 187 150 220 35 238 77 223 145 237 162 78 41 235 92 62 191 185 235 118 77 211 59 242 78 33 196 206 35 153 76 118 28 10 133 66 93 133 119 28 180 15 102 50 25 102 95 204 2 144 152 75 0 208 180 107 119 7 223 190 175 146 74 167 57 122 106 140 109 197 139 105 43 184 100 133 212 252 107 38 110 223 140 196 162 247 159 53 254 40 237 14 52 93 35 149 78 115 232 228 24 159 11 94 6 7 2 140 28 8 82 18 62 180 209 113 252 154 62 115 237 198 149 227 93 29 36 230 18 12 135 79 179 82 112 115 233 204 16 190 30 21 211 182 81 29 10 239 150 37 193 35 227 54 75 111 22 0 1 160 116 10 75 122 3 12 13 232 88 182 100 219 52 169 212 44 202 85 139 126 159 155 95 101 181 37 9 69 74 137 148 118 75 48 110 183 11 132 160 92 181 168 214 36 155 91 53 220 170 131 253 253 30 164 16 45 93 112 2 182 105 154 45 78 108 99 131 53 163 138 223 163 162 247 185 176 45 137 223 227 228 211 70 129 125 61 150 157 107 114 174 212 43 234 66 211 116 52 77 231 194 185 243 164 23 222 18 236 19 124 249 153 39 155 43 145 55 42 124 92 89 167 84 174 144 91 122 229 44 21 139 63 26 2 34 26 159 154 177 44 43 210 124 13 195 48 112 56 84 78 156 141 176 188 86 100 203 84 24 236 149 172 47 190 100 248 224 8 0 31 230 223 167 30 62 120 116 88 116 107 216 213 235 151 167 2 129 224 100 51 231 235 245 17 30 13 243 59 155 173 247 101 245 43 130 127 68 44 30 149 13 145 255 18 0 148 88 60 106 1 148 13 131 191 6 140 246 211 127 51 231 46 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!WAStandardFiles methodsFor: 'accessing-styles' stamp: 'lr 10/28/2007 14:42'!kalseyTabsCss	"this is from http://kalsey.com/tools/csstabs/ - would also be nice to do http://www.alistapart.com/articles/slidingdoors/"	^ '.kalsey .navigation-options {	border-bottom : 1px solid #ccc;	margin : 0;	padding-bottom : 19px;	padding-left : 10px;}.kalsey .navigation-options ul, .kalsey .navigation-options li	{	display : inline;	list-style-type : none;	margin : 0;	padding : 0;}.kalsey .navigation-options a:link, .kalsey .navigation-options a:visited	{	background : #E8EBF0;	border : 1px solid #ccc;	color : #666;	float : left;	font-size : small;	font-weight : normal;	line-height : 14px;	margin-right : 8px;	padding : 2px 10px 2px 10px;	text-decoration : none;}.kalsey .navigation-options a:link.active, .kalsey .navigation-options a:visited.active	{	background : #fff;	border-bottom : 1px solid #fff;	color : #000;}.kalsey .navigation-options ul a:hover	{	color : #f00;}.kalsey .navigation-options .option-selected a {	background : #fff;	border-bottom : 1px solid #fff;	color : #000;}.kalsey .navigation-content {	background : #fff;	border : 1px solid #ccc;	border-top : none;	clear : both;	margin : 0px;	padding : 15px;	line-height: 1.1;  /* IE6 CSS workaround - http://www.dracos.co.uk/web/css/ie6floatbug/ */}'! !!WAStandardFiles methodsFor: 'accessing-images'!memoryPng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 6 98 75 71 68 0 255 0 255 0 255 160 189 167 147 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 213 10 19 17 58 52 159 194 36 103 0 0 1 240 73 68 65 84 56 203 165 147 61 104 20 65 24 134 159 221 153 157 221 189 194 20 34 18 209 75 97 12 66 208 72 2 1 33 96 97 115 96 17 36 106 180 17 82 88 137 193 70 17 15 46 133 164 176 178 49 130 149 86 134 147 72 136 88 156 66 42 27 65 68 61 73 180 9 130 7 241 206 52 10 130 119 59 127 22 49 49 33 39 74 124 225 101 186 103 158 225 251 38 40 149 138 15 128 115 108 35 222 251 105 74 165 162 111 181 154 190 217 106 250 191 197 57 231 51 157 173 183 84 42 122 185 70 155 184 59 79 185 82 253 167 155 71 11 135 185 112 162 7 0 9 16 69 138 114 165 138 234 0 37 99 136 20 103 142 46 67 16 50 251 166 11 156 7 60 24 139 54 134 114 165 202 248 233 62 0 194 141 100 21 167 68 105 202 217 161 58 23 135 7 17 74 146 38 9 105 46 69 37 41 34 151 144 36 9 0 214 152 223 6 107 17 42 70 36 49 253 61 123 8 115 5 250 187 27 168 232 19 143 23 14 32 188 3 35 201 66 13 128 177 118 171 65 148 40 70 6 107 236 219 213 193 203 165 6 93 249 83 136 72 146 36 49 81 162 16 113 132 138 213 159 13 78 14 212 8 3 137 200 21 224 219 44 65 48 130 144 130 171 199 159 179 80 223 141 179 14 235 44 83 111 3 140 109 3 184 60 122 157 128 128 143 181 25 222 47 127 37 191 23 14 229 119 114 164 211 48 216 55 142 247 0 158 169 251 183 218 3 110 207 220 68 40 129 148 17 66 10 62 55 230 232 221 63 202 195 215 53 204 247 59 88 99 177 198 254 122 130 221 10 120 242 174 155 40 85 168 88 17 197 10 33 63 112 176 243 25 190 89 35 12 2 158 46 245 210 252 145 1 139 237 13 96 117 222 22 71 232 29 206 57 46 61 234 192 249 29 104 109 208 86 99 113 171 6 27 1 90 103 140 13 15 112 111 238 213 38 220 226 60 192 139 182 155 184 242 101 101 179 193 149 243 67 92 27 59 134 214 25 89 43 67 27 141 214 107 231 134 26 77 163 81 95 135 73 96 122 114 242 198 246 127 227 255 230 39 112 67 0 83 217 168 244 129 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!WAStandardFiles methodsFor: 'accessing-scripts' stamp: 'lr 10/28/2007 14:42'!miscJs	^ '	function swapDisplay(a, b) {		var tmp = document.getElementById(a).style.display;		document.getElementById(a).style.display = document.getElementById(b).style.display;		document.getElementById(b).style.display = tmp;	}	function submitFormTriggeringCallback(formName, callbackKey, value) {		if (value)			{				var ele = document.createElement("input");				ele.type = "hidden";				ele.name = callbackKey;				ele.value = value;				document.forms[formName].appendChild(ele)			}		submitForm(formName)	}	function submitForm(formName) {		document.forms[formName].submit();	}	function chooseOther(select, hiddenId, p) {		value = prompt(p);		document.getElementById(hiddenId).value = value;		select.options[select.options.length-1].text = value;	}	function enableChoice(enableID, disableID) {		document.getElementById(enableID).disabled = false;		document.getElementById(disableID).disabled = true;	}	function setFocus(elementId) {		document.getElementById(elementId).focus();	}	function setSelection(elementId, start, stop) {		var input = document.getElementById(elementId);		input.focus();		/* When stop parameter not supplied, all field is selected */		if (!!start) start = 1;		if (!!stop) stop = input.value.length + 1;		if (typeof document.selection !!= "undefined") {	    		/* Place selection in MS-IE */	    		var range = document.selection.createRange();	     	range.moveStart("character", start - 1);	     	range.moveEnd("character", stop - start);	 		range.select();	  	} else if (typeof input.selectionStart !!= "undefined") {		  	/* Place selection in Gecko browsers */	    		input.selectionStart = start - 1;	    		input.selectionEnd = stop - 1;	  	} else {	  		/* Other browsers, please feel free to implement */			alert("unknown browser");		}	}'! !!WAStandardFiles methodsFor: 'accessing-images'!profilerPng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 4 115 66 73 84 8 8 8 8 124 8 100 136 0 0 0 9 112 72 89 115 0 0 4 157 0 0 4 157 1 124 52 107 161 0 0 0 25 116 69 88 116 83 111 102 116 119 97 114 101 0 119 119 119 46 105 110 107 115 99 97 112 101 46 111 114 103 155 238 60 26 0 0 3 25 73 68 65 84 56 141 101 147 79 104 219 117 24 198 63 223 111 218 181 105 27 243 167 165 127 213 181 22 35 181 171 237 198 152 204 22 230 193 169 200 14 67 24 84 152 135 194 16 188 8 66 17 113 243 44 115 189 120 16 65 135 5 157 90 240 160 224 230 182 67 41 108 172 44 235 97 3 219 117 90 211 218 37 105 154 52 77 211 52 77 242 203 239 251 199 131 53 108 250 192 115 123 223 207 203 3 239 35 172 181 60 170 177 209 113 25 104 14 156 10 132 90 94 110 244 53 29 208 74 233 236 230 230 189 108 58 115 253 171 111 63 185 202 127 36 30 5 188 59 246 241 96 248 64 223 55 62 191 127 64 169 138 168 171 3 173 20 219 185 50 78 197 213 249 173 252 157 244 218 218 91 95 127 255 233 234 255 0 227 239 157 127 59 220 223 247 89 93 67 77 176 183 219 71 103 48 129 150 65 124 161 126 42 21 205 159 75 113 230 34 247 217 217 113 210 235 177 216 169 139 151 206 223 168 2 206 156 254 176 249 224 139 135 127 243 135 188 29 195 71 2 120 202 119 168 245 182 83 44 149 8 118 190 134 244 120 81 74 145 201 100 185 118 121 150 100 114 251 143 116 34 49 48 57 53 81 145 0 79 247 118 127 39 106 100 199 161 161 30 230 102 127 165 232 212 163 157 36 30 247 47 246 213 122 144 82 34 165 36 24 244 51 114 236 32 96 194 77 1 255 231 0 114 108 116 92 120 27 26 15 181 181 122 233 122 178 131 55 222 252 128 153 217 24 209 165 251 56 187 15 1 133 16 226 159 188 66 208 209 217 194 11 131 61 212 213 213 31 5 144 66 136 103 129 64 40 244 4 198 24 16 130 177 119 206 177 190 219 207 236 92 148 197 197 69 172 181 143 185 185 37 136 54 170 125 108 116 188 94 122 106 106 142 26 107 106 125 190 122 86 86 163 104 173 81 74 113 226 228 25 86 182 70 184 114 245 38 174 235 98 173 197 24 67 98 45 134 223 223 132 209 38 4 246 57 169 149 138 56 101 199 221 201 151 120 170 107 127 21 176 177 177 129 197 195 240 240 8 214 90 180 214 24 99 104 111 235 36 159 47 0 228 64 44 73 107 237 239 21 167 146 201 110 230 80 74 85 125 225 194 4 199 143 191 194 208 208 32 90 235 170 141 49 100 82 89 132 144 201 201 169 137 162 156 156 154 176 197 194 238 194 194 252 67 50 153 44 74 41 92 215 229 236 217 143 8 135 195 184 174 91 133 106 173 201 109 21 184 125 123 30 167 84 140 0 72 128 92 38 115 122 183 224 108 220 186 113 143 157 157 66 117 120 59 159 163 92 46 85 33 197 221 50 215 126 185 9 200 196 149 235 63 156 171 2 38 167 38 74 15 22 238 126 17 141 166 203 63 253 56 67 34 190 177 119 85 163 181 65 107 67 124 53 205 165 201 203 36 83 185 98 36 50 125 49 182 22 13 10 33 164 176 214 34 132 104 4 122 7 250 142 188 62 252 210 171 239 123 27 26 219 189 245 251 232 238 105 163 226 104 150 151 227 184 174 182 249 252 86 106 122 230 231 47 227 201 149 8 240 0 88 174 118 65 8 225 7 158 169 173 217 183 255 240 208 177 147 173 173 157 207 55 183 180 117 25 173 77 42 21 95 79 165 18 75 119 231 111 77 91 107 215 128 5 32 102 173 181 143 181 113 239 227 26 129 16 224 7 124 123 49 139 64 1 200 0 219 214 90 243 239 206 223 67 200 195 25 126 17 209 190 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!WAStandardFiles methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!selectorsToInclude	^#(		toolbarCss		haloCss		windowCss		kalseyTabsCss		externalAnchorsJs		miscJs		shortcutsJs	)! !!WAStandardFiles methodsFor: 'accessing-scripts' stamp: 'lr 10/28/2007 14:42'!shortcutsJs	^ '	var shortcutKeys = [];	var shortcutElements = [];	function resetShortcuts() {		shortcutKeys = [];		shortcutElements = [];	}	function addShortcut(shortcut, elementID) {		var elem = document.getElementById(elementID);		if ((elem.tagName == "INPUT" & (elem.type == "submit" || elem.type == "checkbox" || elem.type == "radio")) || elem.tagName == "A")			{			shortcutKeys[shortcutKeys.length] = shortcut;			shortcutElements[shortcutElements.length] = elem;			}		else alert("Attempt to assign a shortcut (" + shortcut + ") to something that is not clickable");	}	function onKeyDown(event) {		var keyname = "";		var element;		var nav;		if (navigator.userAgent.indexOf("Safari") > 0)			nav = "Safari";		else if (navigator.product == "Gecko")			nav = "Gecko";		else			nav = "IE";		// cope with MS-IE		if (event == null) event = window.event;		if (event) {			if (event.ctrlKey) keyname = keyname + "Ctrl-";			if (event.altKey) keyname = keyname + "Alt-";			if (event.metaKey) keyname = keyname + "Meta-";			// cope with Netscape			var keyCode = event.which;			if (keyCode == null) keyCode = event.keyCode;			if (keyCode == null) keyCode = event.charCode;			if (keyCode !!= 0) {				var character = String.fromCharCode(keyCode);				character = character.toLowerCase();				if (event.shiftKey) character = character.toUpperCase();				// cope with special keys, designated with some logical names				if (keyCode == 27) character = "Esc";				if (keyCode == 8) character = "Backspace";				if (keyCode == 9) character = "Tab";				if (keyCode == 13) character = "Return";				if (keyCode == 37) character = "Left";				if (keyCode == 38) character = "Up";				if (keyCode == 39) character = "Right";				if (keyCode == 40) character = "Down";				// cope with func-keys (some keys not intercepted for MS-IE)				if ((keyCode >= 112) & (keyCode <= 123)) character = "F" + (keyCode - 112 + 1);				for ( var x = 1 ; x <= shortcutKeys.length ; x++ ) {					if (shortcutKeys[x-1] == keyname+character) {						// alert("key=" + keyCode + " " + keyname + character);						element = shortcutElements[x-1];						if (element.tagName == "A" & nav !!= "IE") {							if (element.onclick)								element.onclick.call();							else								/* This does not work for anchor in IE */								location.href = element.href;						} else  {							element.click();						}					}				}				return false;			}		}	}'! !!WAStandardFiles methodsFor: 'accessing-images'!styleeditorPng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 6 98 75 71 68 0 255 0 255 0 255 160 189 167 147 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 214 4 9 20 4 42 36 195 187 166 0 0 2 112 73 68 65 84 56 203 173 147 221 75 83 113 24 199 63 155 155 110 57 245 164 169 232 24 180 240 173 50 207 48 74 144 68 27 82 209 141 43 147 145 136 226 159 97 36 236 70 130 174 162 232 38 34 42 86 104 26 42 5 74 47 243 5 65 212 110 52 148 48 95 74 156 107 206 236 156 249 50 117 110 167 139 58 232 130 186 144 30 248 193 247 226 249 124 248 61 207 143 31 28 172 146 107 156 213 74 119 119 183 114 16 216 180 15 222 19 184 65 116 67 167 27 228 223 167 211 13 226 31 112 226 126 184 198 89 173 104 84 24 232 183 55 54 10 73 201 41 16 217 37 184 178 66 95 107 171 4 84 44 222 110 89 150 229 96 219 204 204 76 89 93 109 61 85 85 85 212 56 171 105 111 123 169 87 5 157 246 250 122 135 226 245 18 24 25 1 69 225 136 77 132 212 52 94 127 15 140 249 46 86 230 100 103 153 15 23 228 159 160 188 188 92 133 117 64 36 14 224 42 60 40 42 41 73 88 236 233 97 119 99 131 104 56 204 178 94 199 156 205 198 194 217 211 230 230 155 46 163 86 27 135 40 138 108 132 130 60 122 248 88 7 68 0 180 234 112 74 40 4 202 222 78 190 230 230 225 63 83 76 83 83 51 62 159 143 188 188 60 218 59 94 176 24 76 222 108 56 89 89 168 246 169 2 79 48 16 32 45 63 31 157 193 192 252 229 75 248 47 216 185 238 172 197 231 243 97 52 26 233 31 232 227 211 236 23 4 177 250 208 146 144 237 138 17 76 31 79 126 254 166 191 87 193 100 226 104 105 41 19 69 133 92 113 92 99 109 109 13 69 81 88 95 15 50 60 58 202 80 192 138 201 168 195 159 146 105 143 17 124 168 73 170 141 27 44 211 188 21 38 232 26 241 144 62 61 133 167 239 61 130 32 32 203 50 119 238 221 229 227 143 12 66 187 113 108 135 35 49 239 170 3 208 155 37 123 162 152 195 192 173 49 182 36 3 130 55 132 102 106 146 150 251 207 8 71 34 172 104 173 44 109 9 164 101 89 9 200 219 100 202 126 79 140 0 32 204 38 74 244 87 150 204 195 196 235 102 241 246 26 176 228 22 99 200 182 112 42 43 129 213 245 29 62 15 116 72 54 105 201 21 35 8 123 5 207 106 116 206 97 201 201 96 97 122 25 128 236 226 45 178 114 94 49 120 99 202 247 77 41 72 4 200 148 253 30 155 180 228 122 50 249 110 92 21 104 0 28 117 86 49 122 46 208 127 190 193 34 24 73 37 202 46 235 138 159 161 167 43 146 118 40 189 162 203 61 63 254 183 143 161 81 131 163 206 42 238 28 219 113 233 205 146 93 189 85 252 92 188 235 95 240 127 169 159 24 23 11 103 188 240 115 88 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!WAStandardFiles methodsFor: 'accessing-styles' stamp: 'lr 10/28/2007 14:42'!toolbarCss	^ 'body {	margin-bottom: 25px;}#toolbar {	z-index: 20;	position: fixed;	left: 0;	right: 0;	bottom: 0;	padding: 2px;	color: #444;	background-color: #eee;	border-top: 1px solid #aaa;	font: 10pt Verdana, Arial, Helvetica, sans-serif;}#toolbar a {	color: #444;	padding-left: 3px;	padding-right: 3px;	text-decoration: none;}#toolbar a:hover {	color: #111;}#toolbar a.deprecated {	color: #ff7000;}'! !!WAStandardFiles methodsFor: 'processing' stamp: 'lr 10/28/2007 14:42'!updateRoot: aHtmlRoot	super updateRoot: aHtmlRoot.	aHtmlRoot bodyAttributes		at: 'onkeydown'		put: 'onKeyDown(event)'! !!WAStandardFiles methodsFor: 'accessing-styles' stamp: 'lr 6/5/2007 19:25'!windowCss	^ '.window {	border: 1px solid #aaa;}.window .window-titlebar {	color: #444;	padding: 5px;	overflow: hidden;	background-color: #eee;	border-bottom: 1px solid #aaa;	font: 10pt Verdana, Arial, Helvetica, sans-serif;}.window .window-titlebar .window-title {	float: left;	font-weight: bold;	padding-left: 20px;}.window .window-titlebar .browserhaloplugin {	background: url(codebrowser.png) no-repeat;}.window .window-titlebar .inspectorplugin {	background: url(inspector.png) no-repeat;}.window .window-titlebar .styleshaloplugin {	background: url(styleeditor.png) no-repeat;}.window .window-titlebar .configuretoolplugin {	background: url(config.png) no-repeat;}.window .window-titlebar .profilertoolplugin {	background: url(profiler.png) no-repeat;}.window .window-titlebar .memorytoolplugin {	background: url(memory.png) no-repeat;}.window .window-titlebar .window-close {	float: right;}.window .window-titlebar .window-close a {	color: #444;	text-decoration: none;}.window .window-titlebar .window-close a:hover {	color: #111;}.window .window-content {	clear: both;	padding: 2px;}'! !!WAStandardScripts class methodsFor: 'instance-creation' stamp: 'pmm 4/20/2007 23:47'!new	self deprecatedApi.	^super new! !!WAStandardScripts methodsFor: 'scripts' stamp: 'pmm 4/20/2007 22:45'!externalAnchorsJs	^ '// See http://www.sitepoint.com/article/standards-compliant-worldfunction externalLinks() {	if (!!document.getElementsByTagName) return;	var anchors = document.getElementsByTagName("a");	for (var i=0; i<anchors.length; i++) {	var anchor = anchors[i];	if (anchor.getAttribute("href") && anchor.getAttribute("rel") == "external")		anchor.target = "_blank";	}}'! !!WAStandardScripts methodsFor: 'scripts' stamp: 'lr 10/28/2007 14:42'!miscJs	^ '	function swapDisplay(a, b) {		var tmp = document.getElementById(a).style.display;		document.getElementById(a).style.display = document.getElementById(b).style.display;		document.getElementById(b).style.display = tmp;	}	function submitFormTriggeringCallback(formName, callbackKey, value) {		if (value)			{				var ele = document.createElement("input");				ele.type = "hidden";				ele.name = callbackKey;				ele.value = value;				document.forms[formName].appendChild(ele)			}		submitForm(formName)	}	function submitForm(formName) {		document.forms[formName].submit();	}	function chooseOther(select, hiddenId, p) {		value = prompt(p);		document.getElementById(hiddenId).value = value;		select.options[select.options.length-1].text = value;	}	function enableChoice(enableID, disableID) {		document.getElementById(enableID).disabled = false;		document.getElementById(disableID).disabled = true;	}	function setFocus(elementId) {		document.getElementById(elementId).focus();	}	function setCursor(elementId, pos) {		var input = document.getElementById(elementId);		input.focus();		/* When pos parameter not supplied, place cursor at end of input field */		if (!!pos) pos = input.value.length;		if (typeof document.selection !!= "undefined") {	    		/* Place cursor in MS-IE */	    		var range = document.selection.createRange();	     	range.moveStart("character", pos);	 		range.select();	  	} else if (typeof input.selectionStart !!= "undefined") {		  	/* Place cursor in Gecko browsers */	    		input.selectionStart = pos;	    		input.selectionEnd = pos;	  	} else {	  		/* Other browsers, please feel free to implement */			alert("unknown browser");		}	}'! !!WAStandardScripts methodsFor: 'accessing' stamp: 'pmm 4/20/2007 22:46'!selectorsToInclude	^#(		externalAnchorsJs		miscJs		shortcutsJs	)! !!WAStandardScripts methodsFor: 'scripts' stamp: 'lr 10/28/2007 14:42'!shortcutsJs	^ '	var shortcutKeys = [];	var shortcutElements = [];	function resetShortcuts() {		shortcutKeys = [];		shortcutElements = [];	}	function addShortcut(shortcut, elementID) {		var elem = document.getElementById(elementID);		if ((elem.tagName == "INPUT" & (elem.type == "submit" || elem.type == "checkbox" || elem.type == "radio")) || elem.tagName == "A")			{			shortcutKeys[shortcutKeys.length] = shortcut;			shortcutElements[shortcutElements.length] = elem;			}		else alert("Attempt to assign a shortcut (" + shortcut + ") to something that is not clickable");	}	function onKeyDown(event) {		var keyname = "";		var element;		var nav;		if (navigator.userAgent.indexOf("Safari") > 0)			nav = "Safari";		else if (navigator.product == "Gecko")			nav = "Gecko";		else			nav = "IE";		// cope with MS-IE		if (event == null) event = window.event;		if (event) {			if (event.ctrlKey) keyname = keyname + "Ctrl-";			if (event.altKey) keyname = keyname + "Alt-";			if (event.metaKey) keyname = keyname + "Meta-";			// cope with Netscape			var keyCode = event.which;			if (keyCode == null) keyCode = event.keyCode;			if (keyCode == null) keyCode = event.charCode;			if (keyCode !!= 0) {				var character = String.fromCharCode(keyCode);				character = character.toLowerCase();				if (event.shiftKey) character = character.toUpperCase();				// cope with special keys, designated with some logical names				if (keyCode == 27) character = "Esc";				if (keyCode == 8) character = "Backspace";				if (keyCode == 9) character = "Tab";				if (keyCode == 13) character = "Return";				if (keyCode == 37) character = "Left";				if (keyCode == 38) character = "Up";				if (keyCode == 39) character = "Right";				if (keyCode == 40) character = "Down";				// cope with func-keys (some keys not intercepted for MS-IE)				if ((keyCode >= 112) & (keyCode <= 123)) character = "F" + (keyCode - 112 + 1);				for ( var x = 1 ; x <= shortcutKeys.length ; x++ ) {					if (shortcutKeys[x-1] == keyname+character) {						// alert("key=" + keyCode + " " + keyname + character);						element = shortcutElements[x-1];						if (element.tagName == "A" & nav !!= "IE") {							if (element.onclick)								element.onclick.call();							else								/* This does not work for anchor in IE */								location.href = element.href;						} else  {							element.click();						}					}				}				return false;			}		}	}'! !!WAStandardScripts methodsFor: 'processing' stamp: 'lr 2/19/2007 11:17'!updateRoot: aHtmlRoot	super updateRoot: aHtmlRoot.	aHtmlRoot bodyAttributes		at: 'onkeydown'		put: 'onKeyDown(event)'! !!WAStandardStyles class methodsFor: 'instance-creation' stamp: 'pmm 4/20/2007 23:47'!new	self deprecatedApi.	^super new! !!WAStandardStyles methodsFor: 'styles' stamp: 'lr 10/28/2007 14:42'!kalseyTabsCss	"this is from http://kalsey.com/tools/csstabs/ - would also be nice to do http://www.alistapart.com/articles/slidingdoors/"	^ '.kalsey .navigation-options {	border-bottom : 1px solid #ccc;	margin : 0;	padding-bottom : 19px;	padding-left : 10px;}.kalsey .navigation-options ul, .kalsey .navigation-options li	{	display : inline;	list-style-type : none;	margin : 0;	padding : 0;}.kalsey .navigation-options a:link, .kalsey .navigation-options a:visited	{	background : #E8EBF0;	border : 1px solid #ccc;	color : #666;	float : left;	font-size : small;	font-weight : normal;	line-height : 14px;	margin-right : 8px;	padding : 2px 10px 2px 10px;	text-decoration : none;}.kalsey .navigation-options a:link.active, .kalsey .navigation-options a:visited.active	{	background : #fff;	border-bottom : 1px solid #fff;	color : #000;}.kalsey .navigation-options ul a:hover	{	color : #f00;}.kalsey .navigation-options .option-selected a {	background : #fff;	border-bottom : 1px solid #fff;	color : #000;}.kalsey .navigation-content {	background : #fff;	border : 1px solid #ccc;	border-top : none;	clear : both;	margin : 0px;	padding : 15px;	line-height: 1.1;  /* IE6 CSS workaround - http://www.dracos.co.uk/web/css/ie6floatbug/ */}'! !!WAStandardStyles methodsFor: 'accessing' stamp: 'lr 6/6/2007 13:34'!selectorsToInclude	^#(		kalseyTabsCss		sourceStyleCss	)! !!WAStandardStyles methodsFor: 'styles' stamp: 'pmm 4/20/2007 22:50'!sourceStyleCss	^'.halo .halo-source .tag-known {	font-weight: bold;	color: navy;}.halo .halo-source .attribute-known {	color: navy;}.halo .halo-source .attribute-value {	color: purple;}.halo-source .comment {	font-style: italic;	color: green;}'! !!WALibrary class methodsFor: 'instance-creation' stamp: 'pmm 4/6/2007 13:27'!default	^ default ifNil: [ default := self new ]! !!WALibrary class methodsFor: 'actions' stamp: 'pmm 8/14/2007 07:21'!deployFiles	^self default deployFiles! !!WALibrary class methodsFor: 'accessing' stamp: 'pmm 7/21/2007 23:19'!documentAt: aFilename ifAbsent: aBlock	^self default		documentAt: aFilename		ifAbsent: aBlock! !!WALibrary class methodsFor: 'testing' stamp: 'pmm 7/20/2007 06:56'!handlesFolder: aSymbol	^self name = aSymbol! !!WALibrary methodsFor: 'accessing' stamp: 'mb 2/23/2007 10:25'!asFilename: aFilename	self subclassResponsibility! !!WALibrary methodsFor: 'accessing' stamp: 'mb 2/23/2007 10:25'!asSelector: aFilename	self subclassResponsibility! !!WALibrary methodsFor: 'accessing' stamp: 'pmm 4/21/2007 00:11'!configurationComponent	self subclassResponsibility! !!WALibrary methodsFor: 'actions' stamp: 'pmm 8/14/2007 19:34'!deployFiles	"Write to disk the files that the receiver use to serve as methods.	The files are stored in a subfolder named like the classname of the receiver in a subfolder of Smalltalk image folder."	SeasidePlatformSupport ensureExistenceOfFolder: self name.	self fileSelectors do: [ :each |		SeasidePlatformSupport			write: (self perform: each)			toFile: (self asFilename: each)			inFolder: self name ]! !!WALibrary methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!documentAt: aFilename ifAbsent: aBlock	| selector |	selector := self asSelector: aFilename.	^(self fileSelectors includes: selector)		ifTrue: [ WAResponse			document: (self documentForFile: aFilename)			mimeType: (self mimetypeForFile: aFilename) ]		ifFalse: [ aBlock value ]! !!WALibrary methodsFor: 'accessing' stamp: 'mb 2/23/2007 10:17'!documentForFile: aFilename	^self perform: (self asSelector: aFilename)! !!WALibrary methodsFor: 'accessing' stamp: 'mb 2/23/2007 10:25'!fileSelectors	self subclassResponsibility! !!WALibrary methodsFor: 'accessing' stamp: 'mb 2/23/2007 10:20'!filenames	^ self fileSelectors collect: [ :each | self asFilename: each ]! !!WALibrary methodsFor: 'accessing' stamp: 'mb 2/23/2007 10:24'!mimetypeForFile: aFilename	self subclassResponsibility! !!WALibrary methodsFor: 'accessing' stamp: 'mb 2/23/2007 10:21'!name	^ self class name! !!WALibrary methodsFor: 'processing' stamp: 'mb 2/23/2007 10:29'!updateRoot: anHtmlRoot! !!WALibrary methodsFor: 'accessing' stamp: 'mb 2/22/2007 16:03'!urlForFile: aFilename	^ self urlOf: (self asSelector: aFilename)! !!WALibrary methodsFor: 'accessing' stamp: 'mb 2/22/2007 16:03'!urlOf: aSymbol	^ self urlOf: aSymbol using: WAFileHandler default! !!WALibrary methodsFor: 'accessing' stamp: 'mb 2/22/2007 16:03'!urlOf: aSymbol using: aHandler	^ aHandler baseUrl		addToPath: self className;		addToPath: (self asFilename: aSymbol);		yourself! !!WAListener class methodsFor: 'accessing' stamp: 'lr 6/28/2006 15:19'!default	^ default! !!WAListener class methodsFor: 'accessing' stamp: 'avi 1/6/2006 14:19'!dispatcher	^ WADispatcher default! !!WAListener class methodsFor: 'initialization' stamp: 'lr 6/28/2006 14:37'!initialize	Smalltalk addToStartUpList: self after: AutoStart.	Smalltalk addToShutDownList: self! !!WAListener class methodsFor: 'instance-creation' stamp: 'avi 1/6/2006 14:18'!port: aNumber	^ self basicNew initializeWithPort: aNumber! !!WAListener class methodsFor: 'initialization' stamp: 'lr 6/28/2006 14:39'!shutDown	default ifNotNil: [ default stop ]! !!WAListener class methodsFor: 'public' stamp: 'lr 6/28/2006 14:39'!startOn: aNumber	default ifNotNil: [ default stop ].	default := self port: aNumber.	default dispatcher: self dispatcher.	default start! !!WAListener class methodsFor: 'initialization' stamp: 'lr 6/28/2006 14:39'!startUp	default ifNotNil: [ default start ]! !!WAListener class methodsFor: 'public' stamp: 'lr 6/28/2006 14:39'!stop	default ifNotNil: [ default stop ].	default := nil! !!WAListener methodsFor: 'private' stamp: 'raa 6/3/2009 14:42'!convertFileName: aString	^aString! !!WAListener methodsFor: 'as yet unclassified' stamp: 'raa 6/3/2009 14:42'!convertMultipartFileField: aChunk	^(WAFile fromChunk: aChunk)		fileName: (self convertFileName: aChunk fileName);		contentType: aChunk contentType		yourself! !!WAListener methodsFor: 'private' stamp: 'lr 6/5/2009 17:26'!convertRequest: aKomRequest	| request |	self processMultipartFields: aKomRequest.	request := WARequest		method: aKomRequest method		url: aKomRequest url unescapePercents		headers: aKomRequest header		fields: (self fieldsOf: aKomRequest)		cookies: aKomRequest cookies		nativeRequest: aKomRequest.	aKomRequest method = 'PUT'		ifTrue: [request fields					at: 'PUTData'					put: (aKomRequest stream next: aKomRequest contentLength)].	^ request! !!WAListener methodsFor: 'accessing' stamp: 'avi 1/6/2006 14:19'!dispatcher	^dispatcher! !!WAListener methodsFor: 'accessing' stamp: 'avi 1/6/2006 14:19'!dispatcher: anObject	dispatcher := anObject! !!WAListener methodsFor: 'private' stamp: 'pmm 10/14/2006 14:35'!fieldsOf: aKomRequest	^aKomRequest method = 'POST'		ifTrue: [ aKomRequest postFields ]		ifFalse: [ aKomRequest getFields ]! !!WAListener methodsFor: 'initialization' stamp: 'lr 10/28/2007 14:42'!initializeWithPort: aNumber	port := aNumber! !!WAListener methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!listenLoop	| socket |	socket := Socket newTCP.	socket listenOn: port backlogSize: 50.	socket isValid		ifFalse: [ self error: 'Cannot create socket on port ', port displayString ].	[ [ socket isValid ifFalse: [			"will trigger #ifCurtailed: block and destroy socket"			^self listenLoop ].		self waitForConnectionOn: socket ] repeat ]		ifCurtailed: [			"probably copy pasted from ConnectionQueue >> #listenLoop"			(Delay forMilliseconds: 10) wait.			socket destroy ]! !!WAListener methodsFor: 'private' stamp: 'pmm 10/14/2006 14:17'!outputStreamFor: aSocketStream	^aSocketStream! !!WAListener methodsFor: 'private' stamp: 'pmm 10/14/2006 14:19'!processConnection: aSocket	| stream |	stream := SocketStream on: aSocket.	stream autoFlush: true.	[ [ [ self			writeResponseForRequest: (HttpRequest readFromStream: stream)			on: (self outputStreamFor: stream). ]		ensure: [ stream close ] ]		ifCurtailed: [ aSocket destroy ] ]		forkAt: Processor userBackgroundPriority! !!WAListener methodsFor: 'as yet unclassified' stamp: 'raa 6/3/2009 14:42'!processMultipartFields: aRequest	aRequest multipartFormFieldsDo: [ :chunk |		| contents fieldName previousValue |		fieldName := chunk fieldName.		contents := chunk fileName isEmptyOrNil			ifTrue: [				String streamContents: [ :stream |					chunk saveToStream: stream ] ]			ifFalse: [ self convertMultipartFileField: chunk ].		previousValue := aRequest postFields at: fieldName ifAbsent: [ nil ].		previousValue isNil			ifTrue: [  aRequest postFields at: fieldName put: contents ]			ifFalse: [				(previousValue isKindOf: self collectionClass)					ifTrue: [ previousValue add: contents ]					ifFalse: [ aRequest postFields at: fieldName put: (self collectionClass with: previousValue with: contents) ] ] ]! !!WAListener methodsFor: 'public' stamp: 'lr 10/28/2007 14:42'!start	self stop.	process := [ [ self listenLoop ] repeat ]		forkAt: Processor highIOPriority! !!WAListener methodsFor: 'public' stamp: 'avi 1/6/2006 14:18'!stop	process ifNotNil: [process terminate. process := nil]! !!WAListener methodsFor: 'private' stamp: 'lr 6/28/2006 14:12'!waitForConnectionOn: aSocket	| connection |	connection := (aSocket waitForAcceptFor: 10)		ifNil: [ ^ self ].	self processConnection: connection! !!WAListener methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!writeResponseForRequest: aRequest on: aStream	| request response |	request := self convertRequest: aRequest.	request responseStream: aStream.	response := dispatcher handleRequest: request.	response ifNil: [ ^ self ].	response class = WAResponse		ifTrue: [ aStream resetBuffers ].	response writeOn: aStream.	response release! !!WAMain methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!application	"Answer the application to which this entry point is associated."	^ self session application! !!WAMain methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!session	"Answer the session to which this entry point is associated."	^ WACurrentSession value! !!WAMain methodsFor: 'processing' stamp: 'lr 10/28/2007 14:42'!start: aRequest	"The main entry point into a session."	self subclassResponsibility! !!WAAuthMain methodsFor: 'creational' stamp: 'lr 4/20/2007 15:09'!createRoot	^ super createRoot		addDecoration: (WABasicAuthentication new authenticator: self);		yourself! !!WAAuthMain methodsFor: 'testing' stamp: 'lr 4/20/2007 15:09'!verifyPassword: password forUser: username	^ self application login = username and: [ self application password = password ]! !!WARenderLoopMain methodsFor: 'processing' stamp: 'lr 4/20/2007 15:10'!call: aComponent	^ self renderLoopClass new call: aComponent! !!WARenderLoopMain methodsFor: 'creational' stamp: 'lr 5/12/2007 11:39'!createRoot	^ self rootClass new! !!WARenderLoopMain methodsFor: 'accessing' stamp: 'lr 4/20/2007 15:10'!renderLoopClass	^ WARenderLoop! !!WARenderLoopMain methodsFor: 'accessing' stamp: 'lr 5/12/2007 11:39'!rootClass	^ self application preferenceAt: #rootComponent! !!WARenderLoopMain methodsFor: 'processing' stamp: 'lr 4/20/2007 19:41'!start: aRequest	| root |	root := self createRoot.	root visiblePresentersDo: [ :each | each initialRequest: aRequest ].	(self renderLoopClass new root: root) run! !!WAModelProxy class methodsFor: 'instance creation' stamp: 'ab 11/26/2002 17:21'!on: anObject	^ self new setModel: anObject! !!WAModelProxy methodsFor: 'forwarding' stamp: 'lr 10/28/2007 14:42'!commit	cache keysAndValuesDo:		[:key :value |		self performRealWrite: key with: value].	cache := Dictionary new! !!WAModelProxy methodsFor: 'forwarding' stamp: 'pmm 9/12/2006 18:37'!doesNotUnderstand: aMessage	^ aMessage selector isUnary		ifTrue: [self performRead: aMessage selector]		ifFalse: [			(aMessage selector isKeyword and: [aMessage arguments size = 1])				ifTrue: [self performWrite: aMessage selector allButLast with: aMessage argument]				ifFalse: [super doesNotUnderstand: aMessage]]! !!WAModelProxy methodsFor: 'accessing' stamp: 'ab 11/26/2002 17:22'!model	^ model! !!WAModelProxy methodsFor: 'forwarding' stamp: 'ab 11/26/2002 17:24'!name	^ model name! !!WAModelProxy methodsFor: 'private' stamp: 'pmm 9/12/2006 18:36'!performRead: aSymbol	^ cache		at: aSymbol asSymbol		ifAbsent: [ model perform: aSymbol ]! !!WAModelProxy methodsFor: 'private' stamp: 'mb 1/5/2006 13:51'!performRealWrite: aSymbol with: anObject	model perform: aSymbol asSymbol asMutator with: anObject! !!WAModelProxy methodsFor: 'private' stamp: 'mb 1/5/2006 13:51'!performWrite: aSymbol with: anObject	cache at: aSymbol asSymbol put: anObject! !!WAModelProxy methodsFor: 'initializing' stamp: 'lr 10/28/2007 14:42'!setModel: anObject	model := anObject.	cache := Dictionary new! !!WAModelProxy methodsFor: 'forwarding' stamp: 'ab 11/26/2002 17:24'!value	^ model value! !!WAOpeningConditionalComment class methodsFor: 'instance creation' stamp: 'pmm 10/11/2006 17:38'!condition: aString	^self new		condition: aString;		yourself! !!WAOpeningConditionalComment methodsFor: 'accessing' stamp: 'lr 3/27/2007 11:36'!condition	^ condition! !!WAOpeningConditionalComment methodsFor: 'accessing' stamp: 'pmm 10/11/2006 17:31'!condition: aString	condition := aString! !!WAOpeningConditionalComment methodsFor: 'printing' stamp: 'pmm 11/25/2007 21:53'!encodeOn: aDocument	aDocument		nextPutAll: '<!!--[';		nextPutAll: self condition;		nextPutAll: ']>'! !!WAOpeningRevealedConditionalComment methodsFor: 'printing' stamp: 'pmm 11/25/2007 21:54'!encodeOn: aDocument	aDocument		nextPutAll: '<!!--[';		nextPutAll: self condition;		nextPutAll: ']><!!-->'! !!WAConfigureDispatcherPlugin methodsFor: 'actions' stamp: 'lr 5/11/2007 14:03'!execute	self requestor call: self target configurationComponent! !!WAConfigureDispatcherPlugin methodsFor: 'testing' stamp: 'lr 5/11/2007 14:03'!isActive	^ self target configurationComponent notNil! !!WAConfigureDispatcherPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 14:02'!label	^ 'Configure'! !!WAConfigureDispatcherPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 14:10'!priority	^ 100! !!WACopyDispatcherPlugin methodsFor: 'actions' stamp: 'lr 10/28/2007 14:42'!execute	| name |	name := self requestor		request: 'Name'		label: 'add'		default: self target name.	name ifNil: [ ^ self ].	self requestor dispatcher		register: (self target copy			setName: name)! !!WACopyDispatcherPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 14:02'!label	^ 'Copy'! !!WACopyDispatcherPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 14:11'!priority	^ 200! !!WARemoveDispatcherPlugin methodsFor: 'actions' stamp: 'lr 5/11/2007 14:06'!execute	self requestor dispatcher unregister: self target! !!WARemoveDispatcherPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 14:02'!label	^ 'Remove'! !!WARemoveDispatcherPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 14:11'!priority	^ 300! !!WABrowserHaloPlugin methodsFor: 'actions' stamp: 'lr 5/11/2007 13:57'!execute	EnableSeasideTools		ifTrue: [ self open: (WABrowser fullOnClass: self target class) ]		ifFalse: [ Browser fullOnClass: self target class ]! !!WABrowserHaloPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 00:54'!label	^ 'Browser'! !!WABrowserHaloPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 11:02'!priority	^ 500! !!WABrowserHaloPlugin methodsFor: 'accessing' stamp: 'pmm 5/16/2007 16:24'!tooltip	^ 'Class Browser'! !!WAClassnameHaloPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 11:02'!priority	^ 100! !!WAClassnameHaloPlugin methodsFor: 'rendering' stamp: 'lr 5/22/2007 15:36'!renderOn: html	html div class: self cssClass; with: self target className! !!WAHaloPlugin class methodsFor: 'initialization' stamp: 'lr 5/11/2007 01:22'!initialize	EnableSeasideTools := true! !!WAHaloPlugin methodsFor: 'accessing' stamp: 'lr 6/5/2007 19:18'!cssClass	^ (self class name allButFirst: 2) asLowercase! !!WAHaloPlugin methodsFor: 'rendering' stamp: 'lr 5/22/2007 15:35'!renderOn: html	html div		class: self cssClass;		with: [ super renderOn: html ]! !!WAInspectorPlugin methodsFor: 'actions' stamp: 'lr 5/11/2007 13:58'!execute	EnableSeasideTools		ifTrue: [ self open: (WAInspector on: self target) ]		ifFalse: [ self target inspect ]! !!WAInspectorPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 00:55'!label	^ 'Inspector'! !!WAInspectorPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 11:02'!priority	^ 600! !!WAInspectorPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 01:03'!tooltip	^ 'Object Inspector'! !!WAModeHaloPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 11:02'!priority	^ 900! !!WAModeHaloPlugin methodsFor: 'rendering' stamp: 'lr 5/22/2007 15:37'!renderOn: html	html div class: self cssClass; with: [		html text: '['.		self requestor modes			do: [ :each |				html anchor					class: 'active' if: self requestor mode = each;					title: (self labelForSelector: each allButLast);					callback: [ self requestor mode: each ];					with: each first asUppercase ]			separatedBy: [ html text: '|' ].		html text: ']' ]! !!WAStylesHaloPlugin methodsFor: 'actions' stamp: 'lr 5/11/2007 13:58'!execute	EnableSeasideTools		ifTrue: [ self open: (WAViewer on: self target) ]		ifFalse: [ Browser fullOnClass: self target class selector: #style ]! !!WAStylesHaloPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 00:56'!label	^ 'Styles'! !!WAStylesHaloPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 11:02'!priority	^ 700! !!WAStylesHaloPlugin methodsFor: 'accessing' stamp: 'pmm 5/16/2007 16:24'!tooltip	^ 'CSS Style Editor'! !!WAPlugin class methodsFor: 'instance-creation' stamp: 'lr 5/11/2007 14:18'!allSubclassesOn: aTargetObject for: aRequestorObject	| plugins |	plugins := self allSubclasses		collect: [ :each | each on: aTargetObject for: aRequestorObject ].	^ plugins asSortedCollection! !!WAPlugin class methodsFor: 'instance-creation' stamp: 'lr 5/11/2007 13:50'!on: aTargetObject for: aRequestorObject	^ self basicNew initializeTarget: aTargetObject requestor: aRequestorObject! !!WAPlugin methodsFor: 'comparing' stamp: 'lr 5/11/2007 10:51'!<= aPlugin	^ self priority <= aPlugin priority! !!WAPlugin methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!cssClass	"Answer a CSS class that will be applied to an automatically rendered link. nil means no class"	^ nil! !!WAPlugin methodsFor: 'actions' stamp: 'lr 5/11/2007 10:50'!execute	"Execute the receiving plugin."! !!WAPlugin methodsFor: 'initialization' stamp: 'lr 5/11/2007 13:50'!initializeTarget: aTargetObject requestor: aRequestorObject	target := aTargetObject.	requestor := aRequestorObject! !!WAPlugin methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!isActive	"Answer wheter the plugin is usable with the current target."	^ true! !!WAPlugin methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!label	"Answer the menu label of the plugin."	^ self printString! !!WAPlugin methodsFor: 'actions' stamp: 'lr 10/28/2007 14:42'!open: aComponent	"Replace the current page with aComponent."	WARenderLoop new		call: (aComponent			addDecoration: (WAWindowDecoration new				cssClass: self cssClass;				title: self label;				yourself);			yourself)		withToolFrame: false! !!WAPlugin methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!priority	"Answer a number used to sort the receiver. A lower number means it appears earlier on."	^ 0! !!WAPlugin methodsFor: 'rendering' stamp: 'lr 5/30/2007 22:19'!renderOn: html	"A default render method to display the interface of the receiving plugin. Might be overriden with specific behavior in subclasses."	self isActive		ifFalse: [ ^ self ].	html anchor		title: self tooltip;		class: self cssClass;		callback: [ self execute ];		with: self label! !!WAPlugin methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!requestor	"Answer the requestor component the plugin is working on."	^ requestor! !!WAPlugin methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!target	"Answer the target object the plugin is working on."	^ target! !!WAPlugin methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!tooltip	"Answer a tooltip string that is displayed on the plugin link or button."	^ nil! !!WAConfigureToolPlugin methodsFor: 'actions' stamp: 'lr 5/11/2007 13:52'!execute	self open: (WAApplicationEditor new application: self target session application)! !!WAConfigureToolPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 00:16'!label	^ 'Configure'! !!WAConfigureToolPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 10:56'!priority	^ 200! !!WADeprecationToolPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 09:38'!cssClass	^ 'deprecated'! !!WADeprecationToolPlugin methodsFor: 'actions' stamp: 'lr 10/28/2007 14:42'!execute	| result |	result := self requestor confirm: [ :html |		html heading: 'Reset deprecated warnings?'.		html unorderedList list: self requestor deprecated ].	result ifTrue: [ self requestor clearDeprecated ]! !!WADeprecationToolPlugin methodsFor: 'testing' stamp: 'lr 5/11/2007 13:53'!isActive	^ self requestor deprecated notEmpty! !!WADeprecationToolPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 00:36'!label	^ 'Deprecated'! !!WADeprecationToolPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 10:59'!priority	^ 700! !!WAMemoryToolPlugin methodsFor: 'actions' stamp: 'lr 5/11/2007 13:56'!execute	self open: (WAMemory new root: self target)! !!WAMemoryToolPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 00:24'!label	^ 'Memory'! !!WAMemoryToolPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 10:56'!priority	^ 500! !!WANewSessionToolPlugin class methodsFor: 'accessing' stamp: 'pmm 5/10/2007 22:18'!title	^'New Session'! !!WANewSessionToolPlugin methodsFor: 'actions' stamp: 'lr 5/11/2007 13:53'!execute	| session |	session := self requestor session.	session expire; redirectTo: session newSessionUrl! !!WANewSessionToolPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 00:26'!label	^ 'New Session'! !!WANewSessionToolPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 10:56'!priority	^ 100! !!WAProfilerToolPlugin methodsFor: 'actions' stamp: 'lr 5/11/2007 13:53'!execute	self open: (WAProfiler new root: self target)! !!WAProfilerToolPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 00:27'!label	^ 'Profiler'! !!WAProfilerToolPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 10:56'!priority	^ 400! !!WATerminateToolPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 00:29'!label	^ 'Terminate'! !!WATerminateToolPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 10:57'!priority	^ 600! !!WATerminateToolPlugin methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderOn: html	html anchor		url: (html context actionUrl			withParameter: 'terminate');		with: self label! !!WATimeingToolPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 10:59'!priority	^ 900! !!WATimeingToolPlugin methodsFor: 'rendering' stamp: 'lr 5/11/2007 13:53'!renderOn: html	html span		title: 'Render Time';		with: self requestor renderTime.	html text: '/'.	html span		title: 'Callback Time';		with: self requestor processTime.	html text: ' ms'! !!WAToggleHalosToolPlugin methodsFor: 'actions' stamp: 'lr 5/11/2007 13:54'!execute	 self requestor toggleHalos! !!WAToggleHalosToolPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 10:56'!label	^ 'Toggle Halos'! !!WAToggleHalosToolPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 10:56'!priority	^ 300! !!WAToolPlugin methodsFor: 'accessing' stamp: 'lr 6/5/2007 19:18'!cssClass	^ (self class name allButFirst: 2) asLowercase! !!WAValidateToolPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 00:30'!label	^ 'XHTML'! !!WAValidateToolPlugin methodsFor: 'accessing' stamp: 'lr 5/11/2007 10:59'!priority	^ 800! !!WAValidateToolPlugin methodsFor: 'rendering' stamp: 'lr 5/11/2007 00:29'!renderOn: html	html anchor		title: 'Validate XHTML';		url: 'http://validator.w3.org/check/referer';		with: self label! !!WAAllTests class methodsFor: 'testing' stamp: 'mb 1/31/2006 11:07'!canBeRoot	^ true! !!WAAllTests class methodsFor: 'accessing' stamp: 'lr 2/25/2007 23:15'!description	^ 'Functional Seaside Test Suite'! !!WAAllTests class methodsFor: 'initialization' stamp: 'pmm 7/31/2007 07:17'!initialize	(self registerAsApplication: 'tests/alltests')		preferenceAt: #sessionClass put: WAExpirySession! !!WAAllTests methodsFor: 'accessing' stamp: 'lr 5/31/2008 11:15'!children	^ Array with: current contents! !!WAAllTests methodsFor: 'initialize-release' stamp: 'lr 5/31/2008 10:47'!initialize	super initialize.	self initializeTests! !!WAAllTests methodsFor: 'initialize-release' stamp: 'lr 6/8/2008 17:02'!initializeTests	classes := SortedCollection sortBlock: [ :a :b | a name < b name ].	WAFunctionalTest allSubclassesDo: [ :each | classes add: each ].	WAFunctionalTaskTest allSubclassesDo: [ :each | classes add: each ].	current := WAValueHolder with: classes first new! !!WAAllTests methodsFor: 'rendering' stamp: 'lr 6/5/2009 17:26'!renderContentOn: html	html heading: 'Functional Seaside Test Suite'.	html form: [		html select			list: classes;			beSubmitOnChange;			labels: [ :value | value name ];			selected: current contents class;			callback: [ :value | current contents: value new ].		html text: ' '; submitButton: 'Restart' ].	html horizontalRule.	html render: current contents! !!WAAllTests methodsFor: 'accessing' stamp: 'lr 5/31/2008 11:15'!states	^ Array with: current! !!WAAlphabeticBatchedList methodsFor: 'accessing-calculated' stamp: 'avi 12/18/2004 18:26'!allPages	^ $A to: $Z! !!WAAlphabeticBatchedList methodsFor: 'accessing-calculated' stamp: 'mbany 4/14/2005 12:37'!batch	^ items select: [:ea | ea displayString asUppercase first = self currentPage]! !!WAAlphabeticBatchedList methodsFor: 'accessing' stamp: 'avi 12/18/2004 18:20'!currentPage	^ currentPage ifNil: [currentPage := self validPages first]! !!WAAlphabeticBatchedList methodsFor: 'accessing' stamp: 'avi 12/18/2004 18:16'!currentPage: aCharacter	currentPage := aCharacter! !!WAAlphabeticBatchedList methodsFor: 'testing' stamp: 'avi 12/18/2004 18:21'!isOnFirstPage	^ self validPages first = self currentPage! !!WAAlphabeticBatchedList methodsFor: 'testing' stamp: 'avi 12/18/2004 18:21'!isOnLastPage	^ self validPages last = self currentPage! !!WAAlphabeticBatchedList methodsFor: 'accessing' stamp: 'avi 12/18/2004 18:13'!items	^ items! !!WAAlphabeticBatchedList methodsFor: 'accessing' stamp: 'avi 12/18/2004 18:20'!items: aCollection	items := aCollection! !!WAAlphabeticBatchedList methodsFor: 'actions' stamp: 'avi 12/18/2004 18:19'!nextPage	self isOnLastPage ifFalse: [currentPage := self validPages after: currentPage]! !!WAAlphabeticBatchedList methodsFor: 'actions' stamp: 'lr 10/28/2007 14:42'!previousPage	self isOnFirstPage ifFalse: [currentPage := self validPages before: currentPage]! !!WAAlphabeticBatchedList methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	items isEmpty ifFalse: [		html div			id: 'batch';			with: [				self renderPreviousOn: html.				self renderPagesOn: html.				self renderNextOn: html ] ]! !!WAAlphabeticBatchedList methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderNextOn: html	html space.	self isOnLastPage		ifFalse: [ html anchor callback: [ self nextPage ]; with: '>>' ]		ifTrue: [ html text: '>>' ]! !!WAAlphabeticBatchedList methodsFor: 'rendering' stamp: 'pmm 10/11/2006 19:15'!renderPagesOn: html	self allPages		do: [ :char |			currentPage = char				ifFalse: [					(self validPages includes: char)						ifTrue: [ html anchor callback: [self currentPage: char]; with: char]						ifFalse: [ html text: char ] ]				ifTrue: [ html strong: char ] ]		separatedBy: [ html space ]! !!WAAlphabeticBatchedList methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderPreviousOn: html	self isOnFirstPage		ifFalse: [ html anchor callback: [ self previousPage ]; with: '<<' ]		ifTrue: [ html text: '<<' ].	html space! !!WAAlphabeticBatchedList methodsFor: 'accessing' stamp: 'lr 4/15/2007 19:55'!states	^ Array with: self! !!WAAlphabeticBatchedList methodsFor: 'accessing-calculated' stamp: 'mbany 4/14/2005 12:37'!validPages	^ (items collect: [:ea | ea displayString asUppercase first]) asSet asSortedCollection! !!WABatchSelection class methodsFor: 'instance-creation' stamp: 'pmm 4/19/2006 17:39'!items: aCollection link: linkSelector text: textSelector	^ self new		items: aCollection;		linkSelector: linkSelector;		textSelector: textSelector;		yourself! !!WABatchSelection methodsFor: 'accessing' stamp: 'rjl 8/4/2006 11:35'!batchSize    ^batcher batchSize! !!WABatchSelection methodsFor: 'accessing' stamp: 'rjl 8/4/2006 11:34'!batchSize: aSize    batcher batchSize: aSize! !!WABatchSelection methodsFor: 'accessing' stamp: 'avi 2/10/2004 20:43'!children	^ Array with: batcher! !!WABatchSelection methodsFor: 'commands' stamp: 'avi 12/9/2003 13:17'!choose: anItem	self answer: anItem! !!WABatchSelection methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!items: aCollection	batcher := WABatchedList new		items: aCollection;		batchSize: 8;		yourself! !!WABatchSelection methodsFor: 'accessing' stamp: 'avi 12/9/2003 13:22'!linkSelector: aSymbol	linkSelector := aSymbol! !!WABatchSelection methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	html unorderedList: [		batcher batch do: [ :each |			html anchor				callback: [ self choose: each ];				with: (each perform: linkSelector).			html break.			html text: (each perform: textSelector).			html paragraph ] ].	html div		style: 'text-align: center';		with: batcher! !!WABatchSelection methodsFor: 'accessing' stamp: 'avi 12/9/2003 13:22'!textSelector: aSymbol	textSelector := aSymbol! !!WABatchedList class methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!example	^self new		items: (1 to: 100);		yourself! !!WABatchedList methodsFor: 'accessing-calculated' stamp: 'rjl 8/9/2006 14:30'!batch	^ self items copyFrom: self startIndex to: self endIndex! !!WABatchedList methodsFor: 'accessing' stamp: 'ab 5/25/2003 23:12'!batchSize	^ batchSize! !!WABatchedList methodsFor: 'accessing' stamp: 'ab 5/25/2003 23:09'!batchSize: aNumber	batchSize := aNumber! !!WABatchedList methodsFor: 'accessing' stamp: 'ab 5/25/2003 23:12'!currentPage	^ currentPage! !!WABatchedList methodsFor: 'accessing' stamp: 'ab 5/25/2003 23:12'!currentPage: aNumber	currentPage := aNumber! !!WABatchedList methodsFor: 'accessing-calculated' stamp: 'rjl 8/9/2006 14:30'!endIndex	^ self currentPage * self batchSize min: self items size! !!WABatchedList methodsFor: 'initialization' stamp: 'lr 4/15/2007 19:55'!initialize	super initialize.	self batchSize: 10.	self currentPage: 1! !!WABatchedList methodsFor: 'testing' stamp: 'rjl 8/9/2006 14:32'!isOnFirstPage	^ self currentPage = 1! !!WABatchedList methodsFor: 'testing' stamp: 'rjl 8/9/2006 14:32'!isOnLastPage	^ self currentPage = self maxPages! !!WABatchedList methodsFor: 'accessing' stamp: 'ab 5/25/2003 23:12'!items	^ items! !!WABatchedList methodsFor: 'accessing' stamp: 'ab 5/25/2003 22:57'!items: aCollection	items := aCollection! !!WABatchedList methodsFor: 'accessing-calculated' stamp: 'rjl 8/9/2006 14:30'!maxPages	^ (self items size / self batchSize) ceiling! !!WABatchedList methodsFor: 'actions' stamp: 'rjl 8/9/2006 14:31'!nextPage	self isOnLastPage ifFalse: [self currentPage: self currentPage + 1]! !!WABatchedList methodsFor: 'accessing-calculated' stamp: 'lr 9/3/2003 10:44'!pageRange	^ self pageRangeStart to: self pageRangeEnd! !!WABatchedList methodsFor: 'accessing-calculated' stamp: 'lr 9/3/2003 10:50'!pageRangeEnd	^ self maxPages min: self currentPage + 9! !!WABatchedList methodsFor: 'accessing-calculated' stamp: 'lr 9/3/2003 10:51'!pageRangeStart	^ 1 max: self currentPage - 9! !!WABatchedList methodsFor: 'actions' stamp: 'rjl 8/9/2006 14:31'!previousPage	self isOnFirstPage ifFalse: [self currentPage: self currentPage - 1]! !!WABatchedList methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	self maxPages > 0 ifTrue: [		html div			id: 'batch';			with: [				self renderPreviousOn: html.				self renderPagesOn: html.				self renderNextOn: html ] ]! !!WABatchedList methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderNextOn: html	html space.	self isOnLastPage		ifFalse: [ html anchor callback: [ self nextPage ]; with: '>>' ]		ifTrue: [ html text: '>>' ]! !!WABatchedList methodsFor: 'rendering' stamp: 'al 9/7/2006 17:07'!renderPagesOn: html	self pageRange		do: [ :index |			self currentPage = index				ifFalse: [html anchor callback: [self currentPage: index]; with: index]				ifTrue: [html strong: index ] ]		separatedBy: [ html space ]! !!WABatchedList methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderPreviousOn: html	self isOnFirstPage		ifFalse: [ html anchor callback: [ self previousPage ]; with: '<<' ]		ifTrue: [ html text: '<<' ].	html space! !!WABatchedList methodsFor: 'accessing-calculated' stamp: 'rjl 8/9/2006 14:30'!startIndex	^ (self currentPage - 1) * self batchSize + 1! !!WABatchedList methodsFor: 'accessing' stamp: 'lr 4/15/2007 19:55'!states	^ Array with: self! !!WABrowser class methodsFor: 'accessing' stamp: 'lr 2/12/2007 23:18'!description	^ 'Smalltalk Code Browser'! !!WABrowser class methodsFor: 'instance-creation' stamp: 'lr 11/3/2006 13:50'!fullOnClass: aClass	^ self fullOnClass: aClass selector: nil! !!WABrowser class methodsFor: 'instance-creation' stamp: 'lr 11/3/2006 13:50'!fullOnClass: aClass selector: aSelector	^ self new model: (Browser new setClass: aClass selector: aSelector)! !!WABrowser class methodsFor: 'initialization' stamp: 'lr 2/12/2007 21:51'!initialize	self registerAsApplication: 'tools/classbrowser'! !!WABrowser methodsFor: 'actions' stamp: 'lr 5/9/2009 10:01'!accept	| save |	SeasidePlatformSupport ensureAuthorInitials: [ :value | self request: value ].	message := nil.	save := contents.	model contents: contents notifying: self.	contents := save! !!WABrowser methodsFor: 'accessing' stamp: 'lr 8/1/2007 11:15'!columns	^ #( systemCategory class messageCategory message )! !!WABrowser methodsFor: 'accessing' stamp: 'ab 10/10/2002 23:50'!contents	^contents! !!WABrowser methodsFor: 'accessing' stamp: 'ab 10/10/2002 23:54'!contents: aString	contents := aString! !!WABrowser methodsFor: 'processing' stamp: 'lr 10/28/2007 14:42'!initialRequest: aRequest	| theClass |	super initialRequest: aRequest.	aRequest fields at: 'class' ifPresent:		[:className |		Smalltalk at: className asSymbol ifPresent:			[:class |			theClass := (aRequest fields includesKey: 'meta')					ifTrue: [class class]					ifFalse: [class].			self model setClass: theClass selector: nil.			aRequest fields at: 'method' ifPresent:				[:selector |				self model setClass: theClass selector: selector asSymbol]]]! !!WABrowser methodsFor: 'initialization' stamp: 'lr 5/28/2007 18:09'!initialize	super initialize.	self model: Browser new! !!WABrowser methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!model	^model! !!WABrowser methodsFor: 'accessing' stamp: 'lr 4/15/2007 19:55'!model: aBrowserModel	model := aBrowserModel.	model addDependent: self.	contents := model contents! !!WABrowser methodsFor: 'notifying' stamp: 'ab 10/10/2002 23:36'!notify: aString at: location in: sourceStream	message := aString allButLast: 3! !!WABrowser methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderColumnsOn: html	html div class: 'columns'; with: [		self columns do: [ :each |			html form class: 'column'; with: [				| array |				array := self model perform: (each , 'List') asSymbol.				html select					size: 10;					beSubmitOnChange;					list: array;					selected: (array						at: (self model perform: (each , 'ListIndex') asSymbol)						ifAbsent: []);					callback: [ :item |						self model							perform: (each , 'ListIndex:') asSymbol							with: (array indexOf: item) ] ] ] ]! !!WABrowser methodsFor: 'rendering' stamp: 'lr 5/28/2007 19:18'!renderContentOn: html	self		renderColumnsOn: html;		renderModeButtonsOn: html;		renderMessageOn: html;		renderContentPaneOn: html! !!WABrowser methodsFor: 'rendering' stamp: 'lr 8/6/2007 09:46'!renderContentPaneOn: html	html form class: 'definition'; with: [		html textArea on: #contents of: self.		html break.		html submitButton on: #accept of: self ]! !!WABrowser methodsFor: 'rendering' stamp: 'lr 11/16/2006 15:35'!renderMessageOn: html	message ifNotNil: [ html strong: message ]! !!WABrowser methodsFor: 'rendering' stamp: 'lr 8/6/2007 09:44'!renderModeButtonsOn: html	html form class: 'mode'; with: [		html submitButton			callback: [ self showInstance ];			value: 'instance'.		html submitButton			callback: [ self showHelp ];			value: 'help'.		html submitButton			callback: [ self showClass ];			value: 'class' ]! !!WABrowser methodsFor: 'notifying' stamp: 'ab 10/11/2002 00:00'!select! !!WABrowser methodsFor: 'actions' stamp: 'lr 10/28/2007 14:42'!selectFrom: aPos to: anotherPos! !!WABrowser methodsFor: 'accessing' stamp: 'ab 10/10/2002 23:44'!selectionInterval	^ 1 to: 1! !!WABrowser methodsFor: 'actions' stamp: 'LR 9/13/2002 20:38'!showClass	self model indicateClassMessages! !!WABrowser methodsFor: 'actions' stamp: 'LR 9/13/2002 20:42'!showHelp	self model plusButtonHit! !!WABrowser methodsFor: 'actions' stamp: 'LR 9/13/2002 20:39'!showInstance	self model indicateInstanceMessages! !!WABrowser methodsFor: 'accessing' stamp: 'lr 4/15/2007 19:55'!states	^ Array with: model! !!WABrowser methodsFor: 'rendering' stamp: 'lr 8/6/2007 09:51'!style	^ 'form, div.columns {	padding: 2px;	margin: 0;}form.column {	padding: 0;	width: 25%;	float: left;}form.column select {	width: 100%;	border: 1px solid #aaa;}form.mode {	clear: both;}form.definition textarea {	width: 100%;	height: 200px;	border: 1px solid #aaa;}'! !!WABrowser methodsFor: 'accessing' stamp: 'ab 10/10/2002 23:44'!text	^ Text fromString: ''! !!WABrowser methodsFor: 'notifying' stamp: 'ab 10/10/2002 01:45'!update: aSymbol	contents := model contents! !!WABrowser methodsFor: 'processing' stamp: 'lr 10/28/2007 14:42'!updateUrl: aUrl	super updateUrl: aUrl.	self model selectedClass ifNotNilDo: [ :class |		aUrl addParameter: 'class' value: class fullName.		self model metaClassIndicated			ifTrue: [ aUrl addParameter: 'meta' ] ].	self model selectedMessageName ifNotNilDo: [ :method |		aUrl addParameter: 'method' value: method ]! !!WAComponent class methodsFor: 'registration' stamp: 'lr 10/28/2007 14:42'!applicationNamed: aString	| application |	application := WAApplication named: aString.	application configuration addAncestor: WARenderLoopConfiguration new.	application preferenceAt: #rootComponent put: self.	^ application! !!WAComponent class methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!canBeRoot	"When returning true, the component can be registered as a standalone application from the config interface."	^ false! !!WAComponent class methodsFor: 'accessing' stamp: 'lr 2/12/2007 23:15'!description	^ self name! !!WAComponent class methodsFor: 'accessing' stamp: 'pmm 5/24/2007 10:42'!headerForExampleBrowser	^self name = self description		ifTrue: [ self name ]		ifFalse: [ self description , ' (' , self name , ')' ]! !!WAComponent class methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!isDeployed	"When returning true, the component is to be kept in a deployed system,	otherwise it is disabled"	^ false"	Usage:	1. 	Implement #isDeployed on the class side of		the deployed root components	2.	Evaluate the following		WADispatcher default trimForDeployment"! !!WAComponent class methodsFor: 'registration' stamp: 'lr 10/28/2007 14:42'!registerAsApplication: aString	"Use this to programatically register a component as an appliction.	#canBeRoot does not have to return true"	| path dispatcher |	path := aString findTokens: '/'.	dispatcher := path allButLast		inject: WADispatcher default		into: [ :result :each |			result entryPoints at: each ifAbsent: [				result register: (WADispatcher named: each) ] ].	^ dispatcher register: (self applicationNamed: path last)! !!WAComponent class methodsFor: 'registration' stamp: 'lr 10/28/2007 14:42'!registerAsAuthenticatedApplication: aString	"Like #registerAsApplication: but addtionally adds password protection. You will be prompted for a susername and password."	| application user password |	application := self registerAsApplication: aString.	application configuration addAncestor: WAAuthConfiguration new.	user := SeasidePlatformSupport		request: 'Please choose a username for\the application ' withCRs , aString printString.	password := SeasidePlatformSupport		request: 'Please enter a password for ' , aString printString.	application preferenceAt: #login put: user.	application preferenceAt: #password put: password.	^ application! !!WAComponent methodsFor: 'convenience' stamp: 'avi 5/19/2004 14:18'!activeComponent	self visiblePresentersDo: [:ea | ea isDecoration ifFalse: [^ ea]]! !!WAComponent methodsFor: 'decorations' stamp: 'avi 6/2/2004 22:16'!addDecoration: newDecoration	| prev dec |	prev := nil.	dec := self decoration.	[dec ~~ self and: [self decoration: dec shouldWrap: newDecoration]] whileTrue:		[prev := dec.		dec := dec owner].	newDecoration owner: dec.	prev		ifNil: [self decoration: newDecoration]		ifNotNil: [prev owner: newDecoration].	^ newDecoration! !!WAComponent methodsFor: 'convenience' stamp: 'pmm 5/9/2007 11:36'!addMessage: aString	"adds a decoration that renders a level 3 heading with <aString> around the receiver	returns this decoration so don't forget #yourself"	^self addDecoration: (WAMessageDecoration new message: aString)! !!WAComponent methodsFor: 'iterating' stamp: 'avi 10/19/2004 15:55'!allDecorationsDo: aBlock	| ea |	ea := self decoration.	[ea notNil and: [ea ~~ self]] whileTrue:		[aBlock value: ea.		ea := ea owner]! !!WAComponent methodsFor: 'call/answer' stamp: 'avi 3/27/2004 00:55'!answer	self answer: self! !!WAComponent methodsFor: 'call/answer' stamp: 'lr 4/17/2007 07:28'!answer: anObject	"Give back control to the component from which the receiver was called from. When returning, a component can additionally return anObject to the caller."	self decorationChainDo: [ :each | each handleAnswer: anObject ]! !!WAComponent methodsFor: 'convenience' stamp: 'ac 3/22/2006 15:04'!asComponent	^ self! !!WAComponent methodsFor: 'decorations' stamp: 'lr 10/28/2007 14:42'!authenticateWith: anAuthenticator during: aBlock	^ self decorateWith: (WABasicAuthentication new authenticator: anAuthenticator) during: aBlock! !!WAComponent methodsFor: 'call/answer' stamp: 'lr 10/28/2007 14:42'!call: aComponent	"Pass control from the receiver to aComponent. The receiver will be temporarily replaced with aComponent. Code can return from here later on by sending #answer: to aComponent."	^ AnswerContinuation currentDo: [ :cc |		self show: aComponent onAnswer: cc.		WARenderNotification raiseSignal ]! !!WAComponent methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!children	"This method is really important. It should return a collection of all subcomponents of the current component that will be rendered in #renderContentOn:. Components that are displayed using #call: are *not* children.	If the contents returned by this method change over time make sure to return them in #states as well, otherwise the back button will fail."	^ #()! !!WAComponent methodsFor: 'iterating' stamp: 'avi 6/8/2004 00:57'!childrenDo: aBlock	self children do: [:ea | ea ifNotNil: [aBlock value: ea]]! !!WAComponent methodsFor: 'convenience' stamp: 'pmm 5/9/2007 11:49'!chooseFrom: aCollection	"Choose an item from the given aCollection. Answer the selected item."	^ self chooseFrom: aCollection caption: ''! !!WAComponent methodsFor: 'convenience' stamp: 'pmm 5/9/2007 11:49'!chooseFrom: aCollection caption: aString	"Choose an item from the given aCollection with caption aString. Answer the selected item."	^ self call: ((WAChoiceDialog new options: aCollection)		addMessage: aString;		yourself)! !!WAComponent methodsFor: 'convenience' stamp: 'lr 10/28/2007 14:42'!confirm: aString	"Display a yes/no dialog with caption queryString. Answer true if the	response is yes, false if no. This is a modal question -- the user must	respond yes or no."	^ self call: (WAYesOrNoDialog new		addMessage: aString;		yourself)! !!WAComponent methodsFor: 'decorations' stamp: 'avi 3/27/2004 19:53'!decorateWith: aDecoration during: aBlock	| val |	self addDecoration: aDecoration.	val := aBlock value.	self removeDecoration: aDecoration.	^ val! !!WAComponent methodsFor: 'accessing' stamp: 'lr 4/15/2007 18:48'!decoration	^ decoration contents! !!WAComponent methodsFor: 'accessing' stamp: 'avi 9/22/2004 13:59'!decoration: aDecoration	decoration contents: aDecoration! !!WAComponent methodsFor: 'decorations' stamp: 'avi 3/28/2004 20:49'!decoration: oldDecoration shouldWrap: newDecoration	^ (oldDecoration isGlobal and: [newDecoration isGlobal not])		or: [oldDecoration isDelegation and: [newDecoration isLocal]]! !!WAComponent methodsFor: 'decorations' stamp: 'avi 4/22/2004 14:50'!decorationChainDo: aBlock	aBlock value: self decoration! !!WAComponent methodsFor: 'accessing' stamp: 'avi 10/19/2004 15:57'!delegations	| delegations |	delegations := OrderedCollection new.	self allDecorationsDo: [:ea | ea isDelegation ifTrue: [delegations add: ea]].	^ delegations! !!WAComponent methodsFor: 'call/answer' stamp: 'avi 6/8/2004 01:13'!handleAnswer: anObject	^ false! !!WAComponent methodsFor: 'accessing' stamp: 'avi 10/19/2004 15:56'!home	self delegations do: [:ea | self removeDecoration: ea]! !!WAComponent methodsFor: 'convenience' stamp: 'lr 10/28/2007 14:42'!inform: aString	"Display a dialog with aString to the user until he clicks 'OK'"	self call: (WAFormDialog new		addMessage: aString;		yourself)! !!WAComponent methodsFor: 'initialize-release' stamp: 'pmm 4/9/2007 13:36'!initialize	super initialize.	self initializeDecoration! !!WAComponent methodsFor: 'initialize-release' stamp: 'lr 9/5/2007 11:44'!initializeDecoration	decoration := WAValueHolder with: self! !!WAComponent methodsFor: 'convenience' stamp: 'avi 3/27/2004 00:56'!isolate: aBlock	|txn val |	txn := WATransaction new.	val := self decorateWith: txn during: aBlock.	txn close.	^ val! !!WAComponent methodsFor: 'iterating' stamp: 'avi 6/8/2004 00:59'!nextPresentersDo: aBlock	self childrenDo: [:ea | ea decorationChainDo: aBlock]! !!WAComponent methodsFor: 'call/answer' stamp: 'lr 10/28/2007 14:42'!onAnswer: aBlock	"Adds an answer handler aBlock to the receiver."	^ self addDecoration: (WAAnswerHandler new block: aBlock)! !!WAComponent methodsFor: 'decorations' stamp: 'lr 10/28/2007 14:42'!removeDecoration: aDecoration	| dec |	dec := self decoration.	dec = aDecoration ifTrue:		[self decoration: dec owner.		^ self].	[dec notNil] whileTrue:		[dec owner = aDecoration			ifTrue: [dec owner: aDecoration owner.  ^ self]			ifFalse: [dec := dec owner]]! !!WAComponent methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderOn: aRenderer	"Do not override this methods on your component, override instead #renderContentOn: and in addition to not invoke directly renderContentOn: on subcomponent in such method but use instead html render: subcomponent."	self decorationChainDo: [ :each | each renderWithContext: aRenderer context ]! !!WAComponent methodsFor: 'convenience' stamp: 'pmm 5/9/2007 11:51'!request: aString	"Display an input dialog whose question is queryString and answer the string the user accepts."	^ self request: aString default: ''! !!WAComponent methodsFor: 'convenience' stamp: 'avi 3/27/2004 00:56'!request: aString default: initialString	^ self request: aString label: nil default: initialString! !!WAComponent methodsFor: 'convenience' stamp: 'avi 3/27/2004 00:56'!request: requestString label: labelString	^ self request: requestString label: labelString default: ''! !!WAComponent methodsFor: 'convenience' stamp: 'pmm 5/9/2007 11:38'!request: requestString label: labelString default: initialString	^ self call: (WAInputDialog new		label: labelString;		default: initialString;		addMessage: requestString;		yourself)! !!WAComponent methodsFor: 'call/answer' stamp: 'lr 10/28/2007 14:42'!show: aComponent	"Pass control from the receiver to aComponent. The receiver will be temporarily replaced with aComponent. As opposed to #call: sending this message does not block and immediately returns."	self		show: aComponent		onAnswer: [ :value | ]! !!WAComponent methodsFor: 'call/answer' stamp: 'lr 10/28/2007 14:42'!show: aComponent onAnswer: aBlock	"Pass control from the receiver to aComponent. The receiver will be temporarily replaced with aComponent. When #answer: is sent to aComponent, aBlock is evaluated. This can be used for continuation passing style programmation of a control flow. #show:onAnswer: does not block."	self		show: aComponent		onAnswer: aBlock		delegation: (WADelegation new			delegate: aComponent;			yourself)! !!WAComponent methodsFor: 'call/answer' stamp: 'lr 10/28/2007 14:42'!show: aComponent onAnswer: aBlock delegation: aDelegation	| event |	event := nil.	event := aComponent onAnswer: [ :value |		aDelegation remove.		event remove.		aBlock value: value ].	self addDecoration: aDelegation! !!WAComponent methodsFor: 'updating' stamp: 'lr 4/20/2007 20:18'!updateStates: aSnapshot	super updateStates: aSnapshot.	aSnapshot register: decoration! !!WAComponent methodsFor: 'convenience' stamp: 'cds 7/25/2005 10:24'!validateWith: aBlock	^self addDecoration: (WAValidationDecoration new validateWith: aBlock)! !!WAComponent methodsFor: 'iterating' stamp: 'avi 6/8/2004 00:58'!visiblePresentersDo: aBlock	self decorationChainDo: [:ea | ea withNextPresentersDo: aBlock]! !!WAApplicationEditor methodsFor: 'actions' stamp: 'pmm 2/13/2007 19:31'!addLibrary	application addLibrary: library! !!WAApplicationEditor methodsFor: 'accessing' stamp: 'lr 8/20/2007 21:44'!allLibraries	^ WAFileLibrary allSubclasses asArray asSortedCollection: [ :a :b | a name <= b name ]! !!WAApplicationEditor methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!application: anApplication	application := anApplication.	configuration := application configuration! !!WAApplicationEditor methodsFor: 'accessing' stamp: 'avi 6/24/2004 00:23'!libraryOptions	^ self allLibraries difference: application libraries! !!WAApplicationEditor methodsFor: 'rendering' stamp: 'lr 2/12/2007 22:19'!renderContentOn: html	html heading level1; with: 'Application: ' , application name.	super renderContentOn: html! !!WAApplicationEditor methodsFor: 'rendering' stamp: 'lr 2/12/2007 22:18'!renderFormOn: html	self renderLibrariesOn: html.	super renderFormOn: html! !!WAApplicationEditor methodsFor: 'rendering' stamp: 'pmm 8/23/2007 06:36'!renderLibrariesOn: html	html heading level2 with: 'Libraries'.	self libraryOptions isEmpty ifFalse: [		html text: 'Add Library: '.		html select			list: self libraryOptions;			selected: nil;			callback: [ :value | library := value ].		html space.		html submitButton			callback: [ self addLibrary ];			text: 'Add' ].	html unorderedList: [		application libraries do: [ :each |			html listItem: [				html text: each.				html space.				html anchor					callback: [ application removeLibrary: each ];					with: '(remove)' ] ] ].	html submitButton		text: 'write to disk';		title: 'writes all the libraries to disk';		callback: [ application writeLibrariesToDisk ]! !!WAConfigurationEditor methodsFor: 'actions' stamp: 'lr 2/12/2007 22:17'!close	self answer! !!WAConfigurationEditor methodsFor: 'accessing' stamp: 'avi 3/23/2004 14:30'!configuration	^ configuration! !!WAConfigurationEditor methodsFor: 'accessing' stamp: 'avi 1/31/2004 12:02'!configuration: aConfiguration	configuration := aConfiguration! !!WAConfigurationEditor methodsFor: 'initialization' stamp: 'mb 4/23/2006 15:13'!initialize	super initialize.	configuration := WAConfiguration new! !!WAConfigurationEditor methodsFor: 'rendering-ancestry' stamp: 'lr 2/12/2007 22:23'!renderAncestryListFor: aConfiguration seen: aSet on: html	aConfiguration ancestors isEmpty ifTrue: [ ^ self ].	html unorderedList: [		aConfiguration ancestors do: [ :each |			html listItem: [				self renderParent: each on: html.				(aSet includes: each) ifFalse: [					aSet add: each.					self renderAncestryListFor: each seen: aSet on: html ] ] ] ]! !!WAConfigurationEditor methodsFor: 'rendering-ancestry' stamp: 'lr 2/12/2007 22:26'!renderAncestryOn: html	html heading level2; with: 'Ancestry'.	configuration potentialAncestors isEmpty ifFalse: [		html text: 'Add ancestor: '.		self renderParentSelectorOn: html ].	self renderAncestryListFor: configuration seen: Set new on: html! !!WAConfigurationEditor methodsFor: 'rendering-attributes' stamp: 'lr 2/12/2007 22:27'!renderAttribute: anAttribute on: html	html tableRow: [		html tableData: (self labelForSelector: anAttribute key).		html tableData: [			(configuration valueForAttribute: anAttribute)				ifNil: [ self renderUnspecifiedAttribute: anAttribute on: html ]				ifNotNil: [					(configuration hasLocalValueForAttribute: anAttribute)						ifTrue: [ self renderOverridenAttribute: anAttribute on: html ]						ifFalse: [ self renderInheritedAttribute: anAttribute on: html ] ] ].		self renderInheritanceForAttribute: anAttribute on: html ]! !!WAConfigurationEditor methodsFor: 'rendering-attributes' stamp: 'lr 10/28/2007 14:42'!renderAttributesOn: html	html heading level2; with: 'Configuration'.	html table: [		configuration groupedAttributes do: [ :associaction |			html tableRow: [				html tableData					colSpan: 4;					with: [ html heading level3; with: (self labelForSelector: associaction key) ] ].				associaction value do: [ :attribute |				self renderAttribute: attribute on: html ] ] ]! !!WAConfigurationEditor methodsFor: 'rendering' stamp: 'lr 2/12/2007 22:30'!renderButtonsOn: html	html break.	html submitButton on: #save of: self.	html submitButton on: #close of: self! !!WAConfigurationEditor methodsFor: 'rendering' stamp: 'lr 2/12/2007 22:19'!renderContentOn: html	html form: [		self renderFormOn: html.		self renderButtonsOn: html ]! !!WAConfigurationEditor methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderFormButtonsOn: html	html submitButton on: #save of: self.	html submitButton on: #done of: self! !!WAConfigurationEditor methodsFor: 'rendering' stamp: 'lr 2/12/2007 22:25'!renderFormOn: html	self renderAncestryOn: html.	self renderAttributesOn: html! !!WAConfigurationEditor methodsFor: 'rendering-attributes' stamp: 'pmm 2/24/2007 22:12'!renderInheritanceForAttribute: anAttribute on: html	configuration inheritedValueAndSourceAt: anAttribute key do: [:value :source |		(configuration hasLocalValueForAttribute: anAttribute)			ifTrue: [				html tableData: [					html anchor callback: [configuration clearValueForAttribute: anAttribute]; with: 'revert'.					html text: ' to: ', value printString].				html tableData: 'overriden from ', source name ]			ifFalse: [				html tableData: [					html anchor callback: [configuration overrideAttribute: anAttribute]; with: 'override'].				html tableData: 'inherited from ', source name ].		^ self ].	(configuration hasLocalValueForAttribute: anAttribute)		ifTrue: [			html tableData: [				html anchor callback: [configuration clearValueForAttribute: anAttribute]; with: 'clear']]		ifFalse: [			html tableData: [				html span					class: 'unspecified';					with: '(unspecified)' ] ].	html tableData! !!WAConfigurationEditor methodsFor: 'rendering-attributes' stamp: 'avi 3/23/2004 12:35'!renderInheritedAttribute: anAttribute on: html	html text: (configuration valueForAttribute: anAttribute) printString! !!WAConfigurationEditor methodsFor: 'rendering-attributes' stamp: 'pmm 5/23/2007 23:55'!renderInheritedValueForAttribute: anAttribute on: html	| inheritedValue |	inheritedValue := (configuration lookupValueAt: anAttribute key).	inheritedValue isNil		ifTrue: [			html span				class: 'unspecified';				with: '(unspecified)' ]		ifFalse: [ html text: inheritedValue printString ]! !!WAConfigurationEditor methodsFor: 'rendering-attributes' stamp: 'pmm 4/23/2006 20:12'!renderOverrideForAttribute: anAttribute on: html	html anchor callback: [configuration overrideAttribute: anAttribute]; with: 'edit'! !!WAConfigurationEditor methodsFor: 'rendering-attributes' stamp: 'avi 3/23/2004 12:34'!renderOverridenAttribute: anAttribute on: html	anAttribute accept: self with: html! !!WAConfigurationEditor methodsFor: 'rendering-ancestry' stamp: 'lr 2/12/2007 22:24'!renderParent: aConfiguration on: html	html text: aConfiguration name; space.	(configuration hasMutableAncestry and: [ configuration ancestors includes: aConfiguration]) ifTrue: [		html anchor			callback: [ configuration removeAncestor: aConfiguration ];			with: '(remove)' ]! !!WAConfigurationEditor methodsFor: 'rendering-ancestry' stamp: 'lr 9/5/2007 11:20'!renderParentSelectorOn: html	| selectedAncestor |	selectedAncestor := WAValueHolder new.	html select		selected: nil;		labels: [ :each | each name ];		list: configuration potentialAncestors;		callback: [ :value | selectedAncestor contents: value ].	html space.	html submitButton		callback: [ configuration addAncestor: selectedAncestor contents ];		text: 'Add'! !!WAConfigurationEditor methodsFor: 'rendering-attributes' stamp: 'pmm 4/23/2006 20:15'!renderRevertForAttribute: anAttribute on: html	html anchor callback: [configuration clearValueForAttribute: anAttribute]; with: 'clear'! !!WAConfigurationEditor methodsFor: 'rendering-attributes' stamp: 'avi 3/23/2004 12:35'!renderUnspecifiedAttribute: anAttribute on: html	anAttribute accept: self with: html! !!WAConfigurationEditor methodsFor: 'actions' stamp: 'avi 3/23/2004 14:36'!save! !!WAConfigurationEditor methodsFor: 'actions' stamp: 'avi 3/23/2004 14:34'!select: aConfiguration	self call: (WAConfigurationEditor new configuration: aConfiguration)! !!WAConfigurationEditor methodsFor: 'accessing' stamp: 'avi 3/23/2004 14:40'!trailName	^ configuration name! !!WAConfigurationEditor methodsFor: 'rendering-visitors' stamp: 'pmm 4/23/2006 20:18'!visitBooleanAttribute: anAttribute with: html	html select		list: (Array with: true with: false);		selected: (configuration valueForAttribute: anAttribute);		callback: [:v | configuration takeValue: v forAttribute: anAttribute];		labels: [ :b | b ifTrue: [ 'true' ] ifFalse: [ 'false' ] ]! !!WAConfigurationEditor methodsFor: 'rendering-visitors' stamp: 'pmm 4/23/2006 20:19'!visitListAttribute: anAttribute with: html	html select		list: (Array with: nil), anAttribute options asArray;		selected: (configuration valueForAttribute: anAttribute);		callback: [ :value | (configuration takeValue: value forAttribute: anAttribute ) ];		labels: [ :each | each ifNil: ['None'] ifNotNil: [ each displayString] ]! !!WAConfigurationEditor methodsFor: 'rendering-visitors' stamp: 'pmm 4/23/2006 20:20'!visitNumberAttribute: anAttribute with: html	html textInput		size: 5;		callback: [ :value | configuration takeValue: value asNumber forAttribute: anAttribute ];		value: (configuration valueForAttribute: anAttribute)! !!WAConfigurationEditor methodsFor: 'rendering-visitors' stamp: 'lr 10/28/2007 14:42'!visitPasswordAttribute: anAttribute with: html	html passwordInput		callback: [ :value | configuration takeValue: (anAttribute valueFromString: value) forAttribute: anAttribute ]! !!WAConfigurationEditor methodsFor: 'rendering-visitors' stamp: 'lr 5/3/2006 09:58'!visitStringAttribute: anAttribute with: html	html textInput		callback: [ :value | configuration takeValue: (anAttribute valueFromString: value) forAttribute: anAttribute ];		value: (configuration valueForAttribute: anAttribute)! !!WACounter class methodsFor: 'testing' stamp: 'avi 2/5/2004 12:58'!canBeRoot	^ true! !!WACounter class methodsFor: 'accessing' stamp: 'lr 2/12/2007 23:16'!description	^ 'A very simple Seaside application'! !!WACounter class methodsFor: 'accessing' stamp: 'pmm 8/9/2007 23:46'!entryPointName	^'examples/counter'! !!WACounter class methodsFor: 'examples' stamp: 'ab 6/14/2003 19:02'!example	^ self new! !!WACounter class methodsFor: 'initialization' stamp: 'pmm 8/9/2007 23:47'!initialize	self registerAsApplication: self entryPointName! !!WACounter methodsFor: 'accessing' stamp: 'avi 2/3/2004 00:59'!count	^ count! !!WACounter methodsFor: 'accessing' stamp: 'lr 2/20/2007 12:05'!count: anInteger	count := anInteger! !!WACounter methodsFor: 'actions' stamp: 'pmm 7/19/2006 18:49'!decrease	count := count - 1! !!WACounter methodsFor: 'actions' stamp: 'pmm 7/19/2006 18:49'!increase	count := count + 1! !!WACounter methodsFor: 'initialization' stamp: 'lr 4/15/2007 18:15'!initialize	super initialize.	self count: 0! !!WACounter methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	html heading: count.	html anchor		callback: [ self increase ];		with: '++'.	html space.	html anchor		callback: [ self decrease ];		with: '--'! !!WACounter methodsFor: 'accessing' stamp: 'lr 4/15/2007 18:14'!states	^ Array with: self! !!WADateSelector methodsFor: 'accessing' stamp: 'pmm 10/22/2006 08:02'!date	(self privateIsValidDay: day monthNumber: month year: year)		ifFalse: [self error: 'Invalid date'].	^ self dateClass year: year month: month day: day! !!WADateSelector methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!date: aDate	day := aDate dayOfMonth.	month := aDate monthIndex.	year := aDate year! !!WADateSelector methodsFor: 'private' stamp: 'pmm 10/22/2006 07:59'!dateClass	^ Date! !!WADateSelector methodsFor: 'testing' stamp: 'ab 2/17/2003 13:53'!dateIsValid	[self date] on: Error do: [:e | ^ false].	^ true! !!WADateSelector methodsFor: 'accessing' stamp: 'pmm 10/11/2006 18:01'!day	^day! !!WADateSelector methodsFor: 'accessing' stamp: 'pmm 10/11/2006 18:01'!day: anObject	^day := anObject! !!WADateSelector methodsFor: 'accessing' stamp: 'ac 11/25/2003 12:06'!days	^ 1 to: 31! !!WADateSelector methodsFor: 'accessing' stamp: 'JF 8/14/2003 14:44'!endYear	^ endYear! !!WADateSelector methodsFor: 'accessing' stamp: 'JF 8/14/2003 14:41'!endYear: anInteger	endYear := anInteger! !!WADateSelector methodsFor: 'initialize-release' stamp: 'lr 10/28/2007 14:42'!initialize	super initialize.	startYear := Date today year - 1.	endYear := Date today year + 5.	self date: self dateClass today! !!WADateSelector methodsFor: 'accessing' stamp: 'ac 11/25/2003 12:34'!labelForDay: aNumber	^ aNumber! !!WADateSelector methodsFor: 'accessing' stamp: 'ac 11/25/2003 12:33'!labelForMonth: aNumber	^ Date nameOfMonth: aNumber! !!WADateSelector methodsFor: 'accessing' stamp: 'ac 11/25/2003 12:34'!labelForYear: aNumber	^ aNumber! !!WADateSelector methodsFor: 'accessing' stamp: 'pmm 10/11/2006 18:01'!month	^month! !!WADateSelector methodsFor: 'accessing' stamp: 'pmm 10/11/2006 18:01'!month: anObject	^month := anObject! !!WADateSelector methodsFor: 'accessing' stamp: 'ac 11/25/2003 12:06'!months	^ 1 to: 12! !!WADateSelector methodsFor: 'private' stamp: 'pmm 9/11/2007 06:43'!privateIsValidDay: theDay monthNumber: theMonth year: theYear	| daysInMonth |	(theMonth between: 1 and: 12) ifFalse: [^false].	daysInMonth := Month daysInMonth: theMonth forYear: theYear.	^(theDay between: 1 and: daysInMonth)! !!WADateSelector methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	html select		list: self months;		on: #month of: self;		labels: [ :each | self labelForMonth: each ].	html select		list: self days;		on: #day of: self;		labels: [ :each | self labelForDay: each ].	html select		list: self yearRange;		on: #year of: self;		labels: [ :each | self labelForYear: each ].	self dateIsValid ifFalse: [self renderValidationErrorOn: html]! !!WADateSelector methodsFor: 'rendering' stamp: 'pmm 10/11/2006 18:00'!renderValidationErrorOn: html	html span		class: 'error';		with: 'invalid date'! !!WADateSelector methodsFor: 'accessing' stamp: 'JF 8/14/2003 14:44'!startYear	^ startYear! !!WADateSelector methodsFor: 'accessing' stamp: 'JF 8/14/2003 14:40'!startYear: anInteger	startYear := anInteger! !!WADateSelector methodsFor: 'accessing' stamp: 'pmm 10/11/2006 18:02'!year	^year! !!WADateSelector methodsFor: 'accessing' stamp: 'pmm 10/11/2006 18:02'!year: anObject	^year := anObject! !!WADateSelector methodsFor: 'accessing' stamp: 'JF 8/14/2003 14:43'!yearRange	^ self startYear to: self endYear! !!WADateTable methodsFor: 'enumerating' stamp: 'lr 10/28/2007 14:42'!datesDo: aBlock separatedBy: monthlyBlock	| month |	month := datesCache first monthIndex.	datesCache do: [ :date |		date monthIndex = month ifFalse: [month := date monthIndex. monthlyBlock value].		aBlock value: date ].	monthlyBlock value! !!WADateTable methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!endDate: aDate	endDate := aDate.	self updateDatesCache! !!WADateTable methodsFor: 'enumerating' stamp: 'pmm 5/16/2007 17:50'!monthsAndLengthsDo: aTwoArgumentBlock	| count last |	count := 0.	last := nil.	self		datesDo: [ :each |			count := count + 1.			last := each ]		separatedBy: [			aTwoArgumentBlock value: last month value: count.			count := 0 ]! !!WADateTable methodsFor: 'rendering' stamp: 'ab 2/17/2003 16:59'!renderCellForDate: aDate row: anObject index: aNumber on: html	html tableData: [html space]! !!WADateTable methodsFor: 'rendering' stamp: 'pmm 10/11/2006 19:17'!renderContentOn: html	html table		class: 'DateTable';		border: 1;		with: [			html tableRow: [ self renderMonthHeadingsOn: html ].			html tableRow: [ self renderDayHeadingsOn: html ].			rows withIndexDo: [ :each :index |				html tableRow: [self renderRow: each index: index on: html ] ] ]! !!WADateTable methodsFor: 'rendering' stamp: 'pmm 10/11/2006 19:19'!renderDayHeadingsOn: html	self renderHeadingSpacerOn: html.	self		datesDo: [:date |			html tableHeading				class: 'DayHeading';				with: date dayOfMonth ]		separatedBy: [ self renderHeadingSpacerOn: html ]! !!WADateTable methodsFor: 'rendering' stamp: 'pmm 10/11/2006 19:20'!renderHeadingForRow: anObject on: html	html tableHeading		class: 'RowHeading';		with: anObject! !!WADateTable methodsFor: 'rendering' stamp: 'ab 2/17/2003 16:22'!renderHeadingSpacerOn: html	html tableData: []! !!WADateTable methodsFor: 'rendering' stamp: 'pmm 10/11/2006 19:21'!renderMonthHeadingsOn: html	self monthsAndLengthsDo: [ :month :length |		self renderHeadingSpacerOn: html.		html tableHeading			colSpan: length;			class: 'MonthHeading';			with: [				html text: month name.				html space.				html text: month year ] ]! !!WADateTable methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderRow: anObject index: aNumber on: html	self renderHeadingForRow: anObject on: html.	self		datesDo: [ :date | self renderCellForDate: date row: anObject index: aNumber on: html]		separatedBy: [ self renderHeadingSpacerOn: html ]! !!WADateTable methodsFor: 'accessing' stamp: 'ab 2/17/2003 14:11'!rows: aCollection	rows := aCollection! !!WADateTable methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!startDate: aDate	startDate := aDate.	self updateDatesCache! !!WADateTable methodsFor: 'actions' stamp: 'lr 10/28/2007 14:42'!updateDatesCache	| date |	(startDate isNil or: [endDate isNil]) ifTrue: [^ self].	datesCache := OrderedCollection new.	date := startDate.	[date > endDate] whileFalse:		[datesCache add: date.		date := date next]! !!WASelectionDateTable methodsFor: 'selecting' stamp: 'ab 2/17/2003 17:23'!clearSelection	dateSelectionStart := dateSelectionEnd := rowSelectionStart := rowSelectionEnd := nil! !!WASelectionDateTable methodsFor: 'private' stamp: 'ab 2/17/2003 17:19'!colorForDate: aDate rowIndex: aNumber	^ (self hasSelection		and: [self selectionContainsDate: aDate rowIndex: aNumber])			ifTrue: ['lightgrey']			ifFalse: ['white']! !!WASelectionDateTable methodsFor: 'accessing' stamp: 'ab 2/17/2003 19:56'!endDate: aDate	self clearSelection.	super endDate: aDate! !!WASelectionDateTable methodsFor: 'private' stamp: 'ab 2/17/2003 17:22'!endDateSelection	^ dateSelectionStart ifNotNil: [dateSelectionStart max: dateSelectionEnd]! !!WASelectionDateTable methodsFor: 'private' stamp: 'ab 2/17/2003 19:40'!endRow	^ rowSelectionStart max: rowSelectionEnd! !!WASelectionDateTable methodsFor: 'private' stamp: 'ab 2/17/2003 17:27'!endRowSelection	^ rowSelectionStart ifNotNil: [rows at: (rowSelectionStart max: rowSelectionEnd)]! !!WASelectionDateTable methodsFor: 'testing' stamp: 'ab 2/17/2003 17:02'!hasSelection	^ dateSelectionStart notNil! !!WASelectionDateTable methodsFor: 'rendering' stamp: 'pmm 10/11/2006 19:27'!renderCellForDate: aDate row: anObject index: aNumber on: html	| text |	html tableData		style: 'background-color: ', (self colorForDate: aDate rowIndex: aNumber);		align: 'center';		with: [			text := cellBlock value: anObject value: aDate.			html anchor callback: [self selectDate: aDate rowIndex: aNumber]; with: text ]! !!WASelectionDateTable methodsFor: 'accessing' stamp: 'ab 2/17/2003 19:56'!rows: aCollection	self clearSelection.	super rows: aCollection! !!WASelectionDateTable methodsFor: 'private' stamp: 'ab 2/17/2003 16:48'!rowsAndDatesDisplay: aBlock	cellBlock := aBlock! !!WASelectionDateTable methodsFor: 'editor access' stamp: 'lr 10/28/2007 14:42'!selectAll	dateSelectionStart := startDate.	dateSelectionEnd := endDate.	rowSelectionStart := 1.	rowSelectionEnd := rows size! !!WASelectionDateTable methodsFor: 'private' stamp: 'ab 2/17/2003 17:05'!selectDate: aDate rowIndex: rowIndex	self hasSelection		ifFalse: [dateSelectionStart := dateSelectionEnd := aDate. rowSelectionStart := rowSelectionEnd := rowIndex]		ifTrue: [dateSelectionEnd := aDate. rowSelectionEnd := rowIndex]! !!WASelectionDateTable methodsFor: 'private' stamp: 'ab 2/17/2003 19:40'!selectedRows	^ rows copyFrom: self startRow to: self endRow! !!WASelectionDateTable methodsFor: 'private' stamp: 'ab 2/17/2003 17:18'!selectionContainsDate: aDate rowIndex: aNumber	^ ((aDate between: dateSelectionStart and: dateSelectionEnd) or: [aDate between: dateSelectionEnd and: dateSelectionStart])		and: [(aNumber between: rowSelectionStart and: rowSelectionEnd) or: [aNumber between: rowSelectionEnd and: rowSelectionStart]]! !!WASelectionDateTable methodsFor: 'accessing' stamp: 'ab 2/17/2003 19:56'!startDate: aDate	self clearSelection.	super startDate: aDate! !!WASelectionDateTable methodsFor: 'private' stamp: 'ab 2/17/2003 17:22'!startDateSelection	^ dateSelectionStart ifNotNil: [dateSelectionStart min: dateSelectionEnd]! !!WASelectionDateTable methodsFor: 'private' stamp: 'ab 2/17/2003 19:40'!startRow	^ rowSelectionStart min: rowSelectionEnd! !!WASelectionDateTable methodsFor: 'private' stamp: 'ab 2/17/2003 17:27'!startRowSelection	^ rowSelectionStart ifNotNil: [rows at: (rowSelectionStart min: rowSelectionEnd)]! !!WASelectionDateTable methodsFor: 'rendering' stamp: 'ab 2/17/2003 22:43'!style	^ 'td a {text-decoration: none}'! !!WADateTimeSelector methodsFor: 'accessing' stamp: 'jlr 4/5/2006 00:19'!children	^ Array with: dateSelector with: timeSelector! !!WADateTimeSelector methodsFor: 'accessing' stamp: 'jlr 4/5/2006 00:22'!dateAndTime	^ DateAndTime date: dateSelector date time: timeSelector time! !!WADateTimeSelector methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!dateAndTime: anObject	dateSelector date: anObject asDate.	timeSelector time: anObject asTime! !!WADateTimeSelector methodsFor: 'initialize-release' stamp: 'lr 10/28/2007 14:42'!initialize	super initialize.	dateSelector := WADateSelector new.	timeSelector := WATimeSelector new! !!WADateTimeSelector methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	html span: dateSelector.	html span: [html strong: ' : '].	html span: timeSelector! !!WADispatcherComponent class methodsFor: 'instance-creation' stamp: 'lr 1/5/2007 22:14'!on: aDispatcher	^ self new dispatcher: aDispatcher! !!WADispatcherComponent class methodsFor: 'instance-creation' stamp: 'lr 5/9/2007 09:15'!registerAsApplication: aString	^ (super registerAsApplication: aString)		addLibrary: WADispatcherFiles;		yourself! !!WADispatcherComponent methodsFor: 'accessing' stamp: 'lr 1/5/2007 19:03'!dispatcher	^ dispatcher! !!WADispatcherComponent methodsFor: 'accessing' stamp: 'lr 1/5/2007 19:03'!dispatcher: aDispatcher	dispatcher := aDispatcher! !!WADispatcherComponent methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!entryPoints	"Answer a dictionary with the visible entry points of the dispatcher."	^ self dispatcher entryPoints select: [ :each | each isEntryPoint ]! !!WADispatcherComponent methodsFor: 'initialization' stamp: 'lr 4/15/2007 19:54'!initialize	super initialize.	self dispatcher: self application parent! !!WADispatcherComponent methodsFor: 'rendering' stamp: 'lr 1/5/2007 19:17'!renderContentOn: html	self renderHeadingOn: html.	self renderDispatcherOn: html! !!WADispatcherComponent methodsFor: 'rendering' stamp: 'pmm 4/7/2007 01:34'!renderDispatcherOn: html	html heading level2; with: self dispatcher basePath , '/'.	html table: [		self dispatcher isRoot			ifFalse: [ self renderRow: self dispatcher parent named: '..' on: html ].		self entryPoints keysSortedSafely			do: [ :each | self renderRow: (dispatcher entryPoints at: each) named: each on: html ] ]! !!WADispatcherComponent methodsFor: 'rendering' stamp: 'lr 6/5/2009 17:26'!renderHeadingOn: html	html anchor		class: 'logo';		url: 'http://www.seaside.st';		with: 'Seaside'.	html div		class: 'version';		with: SeasidePlatformSupport versionString! !!WADispatcherComponent methodsFor: 'rendering-rows' stamp: 'lr 1/5/2007 22:08'!renderRow: anEntryPoint named: aString on: html	html tableRow: [		html tableData: [ self renderRowName: anEntryPoint named: aString on: html ].		html tableData: [ self renderRowDescription: anEntryPoint named: aString on: html ].		html tableData: [ self renderRowActions: anEntryPoint named: aString on: html ] ]! !!WADispatcherComponent methodsFor: 'rendering-rows' stamp: 'lr 1/5/2007 22:08'!renderRowActions: anEntryPoint named: aString on: html! !!WADispatcherComponent methodsFor: 'rendering-rows' stamp: 'lr 10/28/2007 14:42'!renderRowDescription: anEntryPoint named: aString on: html	aString = self upDirectory		ifFalse: [ html render: anEntryPoint description ]		ifTrue: [ html render: 'Parent Directory' ]! !!WADispatcherComponent methodsFor: 'rendering-rows' stamp: 'lr 2/12/2007 23:10'!renderRowName: anEntryPoint named: aString on: html	anEntryPoint isDispatcher		ifTrue: [ html anchor callback: [ self dispatcher: anEntryPoint ]; with: aString ]		ifFalse: [			anEntryPoint isApplication				ifTrue: [ html anchor url: anEntryPoint basePath; with: aString ]				ifFalse: [ html render: aString ] ]! !!WADispatcherComponent methodsFor: 'accessing' stamp: 'lr 4/15/2007 19:54'!states	^ Array with: self! !!WADispatcherComponent methodsFor: 'accessing' stamp: 'lr 2/12/2007 23:12'!title	^ self class description! !!WADispatcherComponent methodsFor: 'accessing' stamp: 'mb 2/7/2007 11:28'!upDirectory	^'..'! !!WADispatcherComponent methodsFor: 'rendering' stamp: 'mb 2/7/2007 11:59'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: self title! !!WADispatcherEditor class methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!canBeRoot	^ true! !!WADispatcherEditor class methodsFor: 'accessing' stamp: 'lr 2/12/2007 23:16'!description	^ 'Dispatcher Editor'! !!WADispatcherEditor class methodsFor: 'initialization' stamp: 'mb 2/18/2007 18:44'!initialize	self registerAsAuthenticatedApplication: 'config'! !!WADispatcherEditor class methodsFor: 'testing' stamp: 'mb 5/26/2006 09:23'!isDeployed	^ true! !!WADispatcherEditor methodsFor: 'actions' stamp: 'lr 10/28/2007 14:42'!addEntryPoint	| handler editor |	(name isNil or: [ name isEmpty ])		ifTrue: [ ^ self inform: 'You must enter a path-name.' ].	handler := type named: name.	dispatcher register: handler.	editor := WAConfigureDispatcherPlugin on: handler for: self.	editor isActive ifTrue: [ editor execute ]! !!WADispatcherEditor methodsFor: 'actions' stamp: 'JF 9/22/2003 20:15'!clearCaches	WARegistry clearAllHandlers.	Smalltalk garbageCollect! !!WADispatcherEditor methodsFor: 'accessing' stamp: 'ab 8/26/2003 21:52'!entryPointClasses	^ WAEntryPoint concreteSubclasses! !!WADispatcherEditor methodsFor: 'initialization' stamp: 'lr 2/12/2007 21:01'!initialize	super initialize.	type := WAApplication.	name := String new! !!WADispatcherEditor methodsFor: 'rendering-parts' stamp: 'lr 10/28/2007 14:42'!renderAddEntryPointOn: html	html heading level3; with: 'Add entry point'.	html form: [		html table: [			html tableRow: [				html tableData class: 'label'; with: 'Name: '.				html tableData: [					html textInput						callback: [ :value | name := value ] ] ].			html tableRow: [				html tableData class: 'label'; with: 'Type: '.				html tableData: [					html select						list: self entryPointClasses;						selected: type;						callback: [ :value | type := value ];						labels: [ :each | each description ].				html space.				html submitButton					callback: [ self addEntryPoint ];					text: 'Add' ] ] ] ]! !!WADispatcherEditor methodsFor: 'rendering' stamp: 'lr 1/5/2007 19:20'!renderContentOn: html	super renderContentOn: html.	self renderSettingsOn: html.	self renderStatisticsOn: html! !!WADispatcherEditor methodsFor: 'rendering-parts' stamp: 'pmm 4/7/2007 01:34'!renderDefaultEntryPointOn: html	html heading		level3;		with: 'Default entry point'.	html form: [		html select			beOptional;			optionalLabel: '(none)';			list: self dispatcher entryPoints keysSortedSafely;			on: #defaultName of: dispatcher.		html space.		html submitButton ]! !!WADispatcherEditor methodsFor: 'rendering-rows' stamp: 'lr 5/11/2007 14:10'!renderRowActions: anEntryPoint named: aString on: html	aString = self upDirectory ifTrue: [ ^ nil ].	(WADispatcherPlugin allSubclassesOn: anEntryPoint for: self)		do: [ :each | html render: each ]		separatedBy: [ html text: ' ' ]! !!WADispatcherEditor methodsFor: 'rendering' stamp: 'pmm 4/7/2007 01:34'!renderSettingsOn: html	html heading level2; with: 'Settings'.	self renderDefaultEntryPointOn: html.	self renderAddEntryPointOn: html! !!WADispatcherEditor methodsFor: 'rendering' stamp: 'pmm 4/7/2007 01:34'!renderStatisticsOn: html	html heading level2; with: 'Statistics'.	html preformatted: SeasidePlatformSupport vmStatisticsReportString.	html anchor callback: [ self clearCaches ]; with: 'Clear Caches'! !!WADispatcherViewer class methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!canBeRoot	^ true! !!WADispatcherViewer class methodsFor: 'accessing' stamp: 'lr 5/9/2007 08:51'!description	^ 'Dispatcher Viewer'! !!WADispatcherViewer class methodsFor: 'initialization' stamp: 'lr 2/12/2007 21:04'!initialize	self registerAsApplication: 'browse'.	WADispatcher default defaultName: 'browse'! !!WADispatcherViewer class methodsFor: 'testing' stamp: 'mb 5/26/2006 11:54'!isDeployed	^ true! !!WADispatcherViewer methodsFor: 'accessing' stamp: 'lr 1/5/2007 22:21'!entryPoints	^ super entryPoints select: [ :each | each isDispatcher or: [ each isApplication ] ]! !!WAExampleBrowser class methodsFor: 'testing' stamp: 'avi 2/5/2004 12:58'!canBeRoot	^ true! !!WAExampleBrowser class methodsFor: 'accessing' stamp: 'mb 5/26/2006 12:29'!description	^'Browse through Seaside examples'! !!WAExampleBrowser class methodsFor: 'class initialization' stamp: 'lr 2/12/2007 21:38'!initialize	self registerAsApplication: 'examples/examplebrowser'! !!WAExampleBrowser methodsFor: 'helper' stamp: 'lr 2/20/2007 14:40'!allClasses	^ (WAComponent allSubclasses		select: [ :each |			each class selectors				anySatisfy: [ :sel | sel beginsWith: self selectorPrefix ] ])		asSortedCollection: [ :a :b | a name < b name ]! !!WAExampleBrowser methodsFor: 'helper' stamp: 'lr 2/20/2007 14:39'!allSelectors	^ (class class selectors select: [ :each | each beginsWith: self selectorPrefix ])		asSortedCollection! !!WAExampleBrowser methodsFor: 'accessing' stamp: 'lr 11/29/2004 16:21'!children	^ Array with: component! !!WAExampleBrowser methodsFor: 'accessing' stamp: 'pmm 6/23/2005 08:52'!class: aClass	class := aClass.	self selector: self allSelectors first! !!WAExampleBrowser methodsFor: 'accessing' stamp: 'lr 2/20/2007 14:37'!component: aComponent	component := aComponent.	hasAnswer := false.	answer := nil.	component onAnswer: [ :value | hasAnswer := true. answer := value ]! !!WAExampleBrowser methodsFor: 'initialize' stamp: 'pmm 11/2/2005 22:35'!initialize	super initialize.	self class: self allClasses first! !!WAExampleBrowser methodsFor: 'rendering' stamp: 'lr 2/20/2007 14:00'!renderChooserOn: html	html div class: 'chooser'; with: [		html form: [			html select				beSubmitOnChange;				list: self allClasses;				selected: class;				callback: [ :value | self class: value ] ].		self allSelectors size > 1 ifTrue: [			html form: [				html select					beSubmitOnChange;					list: self allSelectors;					selected: selector;					callback: [ :value | self selector: value ] ] ] ]! !!WAExampleBrowser methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderComponentOn: html	html heading level4; with: component class headerForExampleBrowser.	html div		class: 'component';		with: component.	hasAnswer ifTrue: [		html div			class: 'answer';			with: answer printString ]! !!WAExampleBrowser methodsFor: 'rendering' stamp: 'lr 2/20/2007 13:48'!renderContentOn: html	self renderChooserOn: html.	self renderComponentOn: html! !!WAExampleBrowser methodsFor: 'accessing' stamp: 'ab 6/14/2003 19:04'!selector: aSymbol	selector := aSymbol.	self component: (class perform: selector)! !!WAExampleBrowser methodsFor: 'helper' stamp: 'ab 6/14/2003 19:02'!selectorPrefix	^ 'example'! !!WAExampleBrowser methodsFor: 'accessing' stamp: 'lr 2/20/2007 13:58'!style	^ '.chooser {	background-color: #eee;	padding: 5px;}.chooser form,.chooser form div {	display: inline;}.chooser form select {	margin-right: 5px;}.component {	padding: 5px;}.answer {	background-color: #eee;	padding: 5px;}'! !!WAFileHandlerEditor methodsFor: 'accessing' stamp: 'lr 2/18/2007 12:35'!basePath	^ self fileHandler basePath! !!WAFileHandlerEditor methodsFor: 'actions' stamp: 'lr 2/18/2007 12:37'!configureLibrary: aLibrary	self call: aLibrary configurationComponent! !!WAFileHandlerEditor methodsFor: 'accessing' stamp: 'pmm 4/18/2006 21:57'!fileHandler	^fileHandler! !!WAFileHandlerEditor methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!fileHandler: aFilehandler	fileHandler := aFilehandler! !!WAFileHandlerEditor methodsFor: 'accessing' stamp: 'lr 2/18/2007 12:34'!libraries	^ self fileHandler libraries asSortedCollection: [ :a :b | a name < b name ]! !!WAFileHandlerEditor methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	html heading: WAFileHandler description.	html table: [		self libraries do: [ :each |			html tableRow: [				html tableData: each name.				html tableData: [					html anchor						callback: [ self configureLibrary: each default ];						with: 'configure' ] ] ] ].	html form: [		html submitButton			callback: [ self answer ];			text: 'close' ]! !!WAFileHandlerEditor methodsFor: 'path' stamp: 'pmm 8/17/2007 07:03'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: WAFileHandler description! !!WAChoiceDialog class methodsFor: 'examples' stamp: 'lr 1/7/2007 17:59'!example	^ self options: #('Smalltalk' 'Perl' 'Python' 'Ruby')! !!WAChoiceDialog class methodsFor: 'instance-creation' stamp: 'avi 3/21/2004 00:59'!options: aCollection	^ self new options: aCollection! !!WAChoiceDialog methodsFor: 'accessing' stamp: 'avi 3/21/2004 01:00'!buttons	^ #(ok cancel)! !!WAChoiceDialog methodsFor: 'actions' stamp: 'avi 3/21/2004 01:00'!cancel	self answer: nil! !!WAChoiceDialog methodsFor: 'actions' stamp: 'avi 3/21/2004 01:00'!ok	self answer: selection! !!WAChoiceDialog methodsFor: 'accessing' stamp: 'avi 3/21/2004 00:59'!options	^ options! !!WAChoiceDialog methodsFor: 'accessing' stamp: 'avi 3/21/2004 00:59'!options: aCollection	options := aCollection! !!WAChoiceDialog methodsFor: 'rendering' stamp: 'pmm 4/27/2007 00:18'!renderContentOn: html	html select		list: options;		selected: selection;		callback: [ :value | selection := value ]! !!WAFormDialog methodsFor: 'actions' stamp: 'avi 3/16/2004 13:45'!addForm	form := WAFormDecoration new buttons: self buttons.	self addDecoration: form! !!WAFormDialog methodsFor: 'testing' stamp: 'avi 3/16/2004 14:05'!addFormByDefault	^ true! !!WAFormDialog methodsFor: 'accessing' stamp: 'avi 3/12/2004 16:37'!buttons	^ #(ok)! !!WAFormDialog methodsFor: 'accessing' stamp: 'mb 4/4/2006 13:41'!defaultButton	^self buttons first! !!WAFormDialog methodsFor: 'accessing' stamp: 'avi 3/12/2004 20:41'!divClass	^ self class name! !!WAFormDialog methodsFor: 'initialization' stamp: 'pmm 11/2/2005 22:51'!initialize	super initialize.	self addFormByDefault ifTrue: [self addForm]! !!WAFormDialog methodsFor: 'testing' stamp: 'avi 3/12/2004 16:35'!isValid	^ validationError isNil! !!WAFormDialog methodsFor: 'accessing' stamp: 'avi 3/12/2004 16:35'!model	^ self! !!WAFormDialog methodsFor: 'actions' stamp: 'avi 3/12/2004 16:37'!ok	self answer! !!WAFormDialog methodsFor: 'actions' stamp: 'avi 3/27/2004 16:59'!removeForm	form ifNotNil: [self removeDecoration: form]! !!WAFormDialog methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	html hiddenInput callback: [ validationError := nil ].	validationError		ifNotNil: [ self renderValidationError: validationError on: html ].	html div		class: self divClass;		with: [ self renderDialogOn: html ]! !!WAFormDialog methodsFor: 'rendering' stamp: 'avi 3/12/2004 20:37'!renderDialogOn: html! !!WAFormDialog methodsFor: 'rendering' stamp: 'lr 1/7/2007 17:55'!renderSpacerRowOn: html	html div class: 'dialog-spacer'; with: [ html space ]! !!WAFormDialog methodsFor: 'rendering' stamp: 'lr 1/7/2007 17:56'!renderValidationError: aString on: html	html span class: 'dialog-validation'; with: aString! !!WAFormDialog methodsFor: 'validation' stamp: 'avi 3/12/2004 16:35'!validationError: aString	validationError := aString! !!WALabelledFormDialog methodsFor: 'rendering' stamp: 'al 9/7/2006 16:08'!renderDefaultFieldForSelector: aSymbol on: html	html textInput		on: aSymbol of: self model! !!WALabelledFormDialog methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderDialogOn: html	self rows do:		[:ea |		ea = #-			ifTrue: [self renderSpacerRowOn: html]			ifFalse: [self renderRowForSelector: ea on: html]]! !!WALabelledFormDialog methodsFor: 'rendering' stamp: 'avi 3/12/2004 21:06'!renderFieldForSelector: aSymbol on: html	| renderSelector |	renderSelector := self renderingSelectorFor: aSymbol.	(self respondsTo: renderSelector)		ifTrue: [self perform: renderSelector with: html]		ifFalse: [self renderDefaultFieldForSelector: aSymbol on: html]! !!WALabelledFormDialog methodsFor: 'rendering' stamp: 'avi 3/12/2004 20:41'!renderLabelForSelector: aSymbol on: html	html text: (self labelForSelector: aSymbol)! !!WALabelledFormDialog methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderRowForSelector: aSymbol on: html	html div		id: 'dialog-row-' , aSymbol;		class: 'dialog-row';		with: [			html span				class: 'dialog-form-label';				with: [self renderLabelForSelector: aSymbol on: html].			html span				class: 'dialog-form-field';				with: [self renderFieldForSelector: aSymbol on: html]]! !!WALabelledFormDialog methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderTableRowsOn: html	self rows do:		[:ea |		ea = #-			ifTrue: [self renderSpacerRowOn: html]			ifFalse: [self renderRowForSelector: ea on: html]]! !!WALabelledFormDialog methodsFor: 'rendering' stamp: 'avi 3/12/2004 20:37'!renderingSelectorFor: aSymbol	^ ('render', aSymbol capitalized, 'On:') asSymbol! !!WALabelledFormDialog methodsFor: 'accessing' stamp: 'avi 3/10/2004 18:00'!rows	^ #()! !!WALabelledFormDialog methodsFor: 'accessing' stamp: 'avi 3/16/2004 16:29'!style	^ '.dialog-row {	clear: both;	/*set position: relative to handle the ie disappearing text bug*/	position: relative;	margin-top: 3px;}.dialog-form-label {	width: 100px;	float: left;	text-align: right;	padding: 2px 6px;	margin-right: 4px;	margin-top: 2px;}.dialog-form-field {	text-align: left;	padding: 2px;	margin-top: 2px;	float: left;}.dialog-buttons {	clear: both;	padding: 10px;	text-align: center}.dialog-spacer {	clear: both;	height: 10px;}	'! !!WAViewer class methodsFor: 'instance creation' stamp: 'avi 3/13/2004 01:13'!on: aPresenter	^ self new presenter: aPresenter! !!WAViewer methodsFor: 'accessing' stamp: 'avi 3/13/2004 01:14'!buttons	^ #(save)! !!WAViewer methodsFor: 'actions' stamp: 'pmm 7/28/2007 10:27'!compile: aString	SeasidePlatformSupport		compile: aString		into: presenter class		classified: #rendering! !!WAViewer methodsFor: 'accessing' stamp: 'avi 3/13/2004 01:14'!model	^ presenter! !!WAViewer methodsFor: 'accessing' stamp: 'avi 3/13/2004 01:13'!presenter: aPresenter	presenter := aPresenter! !!WAViewer methodsFor: 'rendering' stamp: 'pmm 4/7/2007 01:33'!renderContentOn: html	html heading level3; with: presenter displayString.	super renderContentOn: html! !!WAViewer methodsFor: 'rendering' stamp: 'pmm 7/28/2007 10:27'!renderCssOn: html	html textArea		rows: 20;		columns: 80;		value: presenter style;		callback: [ :css | self compile: 'style ^ ', css printString]! !!WAViewer methodsFor: 'accessing' stamp: 'avi 3/13/2004 01:14'!rows	^ #(css)! !!WAViewer methodsFor: 'actions' stamp: 'lr 10/28/2007 14:42'!save! !!WAViewer methodsFor: 'accessing' stamp: 'avi 3/13/2004 01:22'!script	^ 'self.opener.location=self.opener.location'! !!WAYesOrNoDialog methodsFor: 'accessing' stamp: 'avi 3/13/2004 21:40'!buttons	^ #(yes no)! !!WAYesOrNoDialog methodsFor: 'accessing' stamp: 'avi 3/13/2004 21:40'!no	self answer: false! !!WAYesOrNoDialog methodsFor: 'accessing' stamp: 'avi 3/13/2004 21:40'!yes	self answer: true! !!WABatchTest methodsFor: 'accessing' stamp: 'avi 12/18/2004 18:33'!children	^ Array with: batcher! !!WABatchTest methodsFor: 'initialization' stamp: 'pmm 9/12/2006 18:10'!initialize	super initialize.	batcher := WAAlphabeticBatchedList new items: Collection allSubclasses! !!WABatchTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	html render: batcher.	html unorderedList		list: batcher batch! !!WAButtonTest methodsFor: 'initialize-release' stamp: 'pmm 7/28/2007 08:43'!initialize	super initialize.	self input: 'a text'! !!WAButtonTest methodsFor: 'accessing' stamp: 'pmm 7/28/2007 08:37'!input	^input! !!WAButtonTest methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!input: aString	input := aString! !!WAButtonTest methodsFor: 'rendering' stamp: 'pmm 7/28/2007 08:48'!renderContentOn: html	html form: [		html div: [			self renderInputOn: html.			self renderSubmitOn: html.			self renderResetOn: html.			self renderPushOn: html ] ]! !!WAButtonTest methodsFor: 'rendering' stamp: 'pmm 7/28/2007 08:46'!renderInputOn: html	html table: [		html tableRow: [			html tableHeading: 'Value:'.			html tableData: self input ].		html tableRow: [			html tableHeading: 'Input:'.			html tableData: [				html textInput					on: #input of: self ] ] ]! !!WAButtonTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderPushOn: html	html heading level2 with: 'Push'.	html paragraph: 'Clicking the button should not do anything.'.	html button bePush; with: 'Push'! !!WAButtonTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderResetOn: html	html heading level2 with: 'Reset'.	html paragraph: 'Clicking the button should not submit the form reset the value in "Input"'.	html button beReset; with: 'Reset'! !!WAButtonTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderSubmitOn: html	html heading level2 with: 'Submit'.	html paragraph: 'Clicking the button should submit the form and update the value in "Value:" with the value in "Input"'.	html button with: 'Submit'! !!WACacheTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderActionsOn: html	html paragraph: [		html anchor			callback: [ self inform: 'answer' ];			with: 'call'.		html text: ' (answer: +1, escape: +1)'.		html break.		html anchor			callback: [ self call: self class new ];			with: 'keep calling'.		html text: ' (answer: +1, escape: +1)'.		html break.		html anchor			callback: [ self session redirect ];			with: 'redirect'.		html text: ' (response: +1, escape: +1)' ]! !!WACacheTest methodsFor: 'rendering' stamp: 'lr 10/22/2007 21:08'!renderContentOn: html	Smalltalk garbageCollect.	self renderStatisticsOn: html.	self renderActionsOn: html! !!WACacheTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderStatisticsOn: html	html paragraph: [		html			strong: 'Response Continuations: ';			text: ResponseContinuation allInstances size;			break.		html			strong: 'Answer Continuations: ';			text: AnswerContinuation allInstances size;			break.		html			strong: 'Escape Continuations: ';			text: EscapeContinuation allInstances size;			break ]! !!WACallbackTest methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!children	^ Array with: counter! !!WACallbackTest methodsFor: 'initialization' stamp: 'lr 10/28/2007 14:42'!initialize	super initialize.	transcript := String new writeStream.	counter := WACounter new! !!WACallbackTest methodsFor: 'rendering' stamp: 'lr 8/24/2008 10:44'!renderContentOn: html	html anchor		navigation;		callback: [ transcript cr; nextPutAll: 'idempotent action' ];		with: 'Idempotent'.	html space.	html anchor		callback: [ transcript cr; nextPutAll: 'side effect' ];		with: 'Side Effect'.	html form		defaultAction: [ transcript cr; nextPutAll: 'default action' ];		with: [		html textInput			callback: [ :v | transcript cr; nextPutAll: 'text: ', v printString ].		html textInput			callback: [ :v | transcript cr; nextPutAll: 'text2: ', v printString ].		html break.		html submitButton.		html space.		html submitButton			callback: [ transcript cr; nextPutAll: 'go' ];			text: 'Go'.		html space.		html cancelButton			callback: [ transcript cr; nextPutAll: 'cancel' ];			text: 'Cancel' ].	html preformatted: transcript contents.	html horizontalRule.	html render: counter! !!WACanvasTableTest methodsFor: 'samples' stamp: 'lr 10/28/2007 14:42'!entities	^#(		('non-breaking space' ('&nbsp;' '&#160;' '&#xA0;'))		('ampersand' ('&amp;' '&#38;' '&#x26;'))		('less than sign' ('&lt;' '&#60;' '&#x3C;'))		('greater than sign' ('&gt;' '&#62;' '&#x3E;'))		('euro sign' ('&euro;' '&#8364;' '&#x20AC;'))	)! !!WACanvasTableTest methodsFor: 'samples' stamp: 'lr 10/28/2007 14:42'!exchangeRates	^#(		('EUR' 1.70)		('USD' 1.30)		('DKK' 23.36)		('SEK' 19.32)	)! !!WACanvasTableTest methodsFor: 'rendering' stamp: 'pmm 5/16/2007 17:11'!renderContentOn: html	html div		class: 'wacanvastabletest';		with: [			self renderEntityTableOn: html.			self renderCurrencyTableOn: html ]! !!WACanvasTableTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderCurrencyTableBodyOn: html	html tableBody title: 'Table body';		with: [			self exchangeRates do: [:each |				html tableRow: [					html tableHeading: each first.					html tableData align: 'char'; character: $.;						with: each second]]]! !!WACanvasTableTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderCurrencyTableHeadOn: html	html tableHead title: 'Table header';		with: [			html tableRow: [				html tableHeading: 'Currency'.				html tableHeading: 'Rate']]! !!WACanvasTableTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderCurrencyTableOn: html	html table 		summary: 'This table shows exchange rates against the Swiss Franc';		with: [			html tableCaption: 'Currencies against Swiss Franc (CHF)'.			html tableColumnGroup.			html tableColumnGroup width: '100px'; align: 'char'; character: $..			self renderCurrencyTableHeadOn: html.			self renderCurrencyTableBodyOn: html]! !!WACanvasTableTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderEntityTableBodyOn: html	html tableBody: [		self entities do: [:eachEntity |			html tableRow: [				html tableData scope: 'row';					with: eachEntity first.				eachEntity second do: [ :each |					html tableData: each ].				eachEntity second do: [ :each |					html tableData align: 'center';						with: [ html html: each ] ] ] ] ]! !!WACanvasTableTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderEntityTableColumnGroupsOn: html	html tableColumnGroup.	html tableColumnGroup span: 3.	html tableColumnGroup span: 3; align: 'center'! !!WACanvasTableTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderEntityTableFootOn: html	html tableFoot: [		html tableRow: [			html tableData align: 'center'; colSpan: 7;				with: '5 entities shown']]! !!WACanvasTableTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderEntityTableHeadOn: html	html tableHead: [		html tableRow: [			#('Character' 'Entity' 'Decimal' 'Hex') do: [:each |				html tableHeading scope: 'col'; rowSpan: 2;					with: each].			html tableHeading scope: 'colgroup'; colSpan: 3;				with: 'Rendering in Your Browser'		].		html tableRow: [			#('Entity' 'Decimal' 'Hex') do: [:each |				html tableHeading scope: 'col'; with: each]		].	]! !!WACanvasTableTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderEntityTableOn: html	html table 		summary: 'This table gives the character entity reference,                decimal character reference, and hexadecimal character                reference for 8-bit Latin-1 characters, as well as the                rendering of each in your browser.';		with: [			html tableCaption: 'HTML 4.0 entities'.			self renderEntityTableColumnGroupsOn: html.			self renderEntityTableHeadOn: html.			self renderEntityTableFootOn: html.			self renderEntityTableBodyOn: html]! !!WACanvasTableTest methodsFor: 'rendering' stamp: 'pmm 5/16/2007 17:23'!style	^'.wacanvastabletest table {	border-collapse: collapse;	border:1px solid black;	margin:0px auto; /* center */}.wacanvastabletest caption {	margin:0px auto; /* center */}.wacanvastabletest caption {	font-weight: bold;	padding: 0.5em 0 1em 0;}.wacanvastabletest td, .wacanvastabletest th {	padding: 3px;	border:1px solid black;}'! !!WAClosureTest methodsFor: 'actions' stamp: 'lr 4/18/2007 00:45'!ensure	[ self go ] ensure: [ self inform: 'ensure' ]! !!WAClosureTest methodsFor: 'actions' stamp: 'lr 2/25/2007 23:00'!go	#( a b c ) keysAndValuesDo: [ :a :b | self inform: a displayString , ' ' , b displayString ]! !!WAClosureTest methodsFor: 'rendering' stamp: 'lr 2/25/2007 22:59'!renderContentOn: html	html anchor		callback: [ self go ];		with: 'go'.	html space.	html anchor		callback: [ self ensure ];		with: 'go with ensure'! !!WACookieTest methodsFor: 'actions' stamp: 'lr 5/10/2007 23:42'!add	| response |	self session respond: [ :url |		response := self session redirectResponseFor: url.		response addCookie: (WACookie key: key value: value).		response ].	key := value := nil! !!WACookieTest methodsFor: 'accessing' stamp: 'lr 5/10/2007 23:24'!cookies	^ self session currentRequest cookies! !!WACookieTest methodsFor: 'actions' stamp: 'lr 5/10/2007 23:31'!remove: aKey	| response |	self session respond: [ :url |		response := self session redirectResponseFor: url.		response deleteCookieAt: aKey.		response ]! !!WACookieTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	html form: [		html table: [			html tableRow: [				html tableHeading: 'Key'.				html tableHeading: 'Value'.				html tableHeading ].			self cookies keysAndValuesDo: [ :k :v |				html tableRow: [					html tableData: k.					html tableData: v.					html tableData: [						html submitButton							callback: [ self remove: k ];							text: 'remove' ] ] ].			html tableRow: [				html tableData: [					html textInput						value: key;						callback: [ :v | key := v ] ].				html tableData: [					html textInput						value: value;						callback: [ :v | value := v ] ].				html tableData: [					html submitButton						on: #add of: self ] ] ] ]! !!WADateSelectorTest class methodsFor: 'examples' stamp: 'lr 10/28/2007 14:42'!example	^self new! !!WADateSelectorTest class methodsFor: 'class initialization' stamp: 'lr 6/13/2006 16:10'!initialize	self registerAsApplication: 'tests/dateselector'! !!WADateSelectorTest methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!children	^(OrderedCollection new)		add: beginDate;		add: endDate;		add: beginTime;		add: endTime;		add: beginDAT;		add: endDAT;		yourself! !!WADateSelectorTest methodsFor: 'initialization' stamp: 'pmm 7/19/2006 19:51'!initialize	super initialize.	beginDate := WADateSelector new.	endDate := WADateSelector new.	endDate date: (Date today addDays: 1).	beginTime := WATimeSelector new.	beginTime time: Time now.	endTime := WATimeSelector new.	endTime time: (beginTime time addSeconds: 3600).	beginDAT := WADateTimeSelector new.	endDAT := WADateTimeSelector new.	endDAT dateAndTime: beginDAT dateAndTime + 1 day + 1 hour! !!WADateSelectorTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	self renderDateSelectorsOn: html.	html horizontalRule.	self renderTimeSelectorsOn: html.	html horizontalRule.	self renderDateTimeSelectorsOn: html! !!WADateSelectorTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderDateSelectorsOn: html	html heading level3; with: 'Dates'.	html form: [		html table: [			html tableRow: [				html tableData: 'From'; tableData: beginDate].			html tableRow: [				html tableData: 'To'; tableData: endDate]].		html submitButton			callback: [self inform: (endDate date - beginDate date) days displayString , ' day(s)'];			text: 'Compute duration']! !!WADateSelectorTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderDateTimeSelectorsOn: html	html heading level3; with: 'Dates and Times'.	html form: [		html table: [			html tableRow: [				html tableData: 'From'; tableData: beginDAT ].			html tableRow: [				html tableData: 'To'; tableData: endDAT ] ].		html submitButton			callback: [				| dateDiff |				dateDiff := (endDAT dateAndTime asDate - beginDAT dateAndTime asDate) days.				dateDiff isZero					ifFalse: [ self inform: dateDiff displayString, ' day(s)' ]					ifTrue: [ self inform: (endDAT dateAndTime asTime										subtractTime: beginDAT dateAndTime asTime) asSeconds displayString,										' second(s)']];			text: 'Compute duration']! !!WADateSelectorTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderTimeSelectorsOn: html	html heading level3; with: 'Times'.	html form: [		html table: [			html tableRow: [				html tableData: 'From'; tableData: beginTime].			html tableRow: [				html tableData: 'To'; tableData: endTime ] ].		html submitButton			callback: [self inform: (endTime time subtractTime: beginTime time) asSeconds displayString, ' seconds(s)'];			text: 'Compute duration']! !!WADateTimeTest methodsFor: 'accessing' stamp: 'pmm 7/19/2006 19:25'!data1	^data1! !!WADateTimeTest methodsFor: 'accessing' stamp: 'pmm 7/19/2006 19:26'!data1: aString	data1 := aString! !!WADateTimeTest methodsFor: 'accessing' stamp: 'pmm 7/19/2006 19:25'!data2	^data2! !!WADateTimeTest methodsFor: 'accessing' stamp: 'pmm 7/19/2006 19:26'!data2: aString	data2 := aString! !!WADateTimeTest methodsFor: 'accessing' stamp: 'pmm 7/19/2006 19:22'!date	^date! !!WADateTimeTest methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!date: aDate	date := aDate! !!WADateTimeTest methodsFor: 'initialize-release' stamp: 'lr 10/28/2007 14:42'!initialize	super initialize.	data1 := 'Harry'.	data2 := 'Covert'.	data := String new.	message := String new.	numericData := 12! !!WADateTimeTest methodsFor: 'accessing' stamp: 'pmm 7/19/2006 19:26'!numericData	^numericData! !!WADateTimeTest methodsFor: 'accessing' stamp: 'pmm 7/19/2006 19:26'!numericData: aString	numericData := aString! !!WADateTimeTest methodsFor: 'rendering' stamp: 'pmm 7/10/2007 21:19'!renderContentOn: html	self renderSubmitFormOn: html.	self renderDateTimeOn: html.	self renderDeadDateTimeOn: html! !!WADateTimeTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderDateTimeOn: html	html heading level3; with: 'Form with #dateInput and #timeInput'.	html form		defaultAction: [ message := 'Default action: ' , date displayString , ' ' , time displayString ];		with: [			html div: [				html dateInput on: #date of: self.				html space: 10.				html timeInput					 withSeconds;					 on: #time of: self.				html break.				html text: message.				html break.				html submitButton					callback: [ message := 'Button action: ' , date displayString , ' ' , time displayString ] ] ]! !!WADateTimeTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderDeadDateTimeOn: html	html heading level: 3;		 with: 'Div with #dateInput and #timeInput, no callback'.	html form: [		html div: [			html dateInput value: Date today.			html space: 10.			html timeInput withSeconds; value: Time now.			html break.			html withLineBreaks: 'The year portion of the date should be visible.				The seconds portion of the time should be visible' ] ]! !!WADateTimeTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderSubmitFormOn: html	html heading level3; with: 'Form with #submitFormNamed:'.	html form id: 'submitForm';		defaultAction: [ data := 'Default action : ' , data1 displayString , ' ' , data2 displayString , ' ' , numericData displayString ];		with: [			html div: [				html textInput on: #data1 of: self.				html textInput on: #data2 of: self.				html textInput on: #numericData of: self.				html break.				html text: data.				html break.				html anchor					callback: [data := 'Anchor action : ' , data1 displayString , ' ' , data2 displayString , ' ' , numericData displayString];					 submitFormNamed: 'submitForm';					 with: 'Click to submit' ] ]! !!WADateTimeTest methodsFor: 'accessing' stamp: 'pmm 7/19/2006 19:23'!time	^time! !!WADateTimeTest methodsFor: 'accessing' stamp: 'pmm 7/19/2006 19:23'!time: aTime	time := aTime! !!WADecorationTest methodsFor: 'accessing' stamp: 'lr 5/31/2008 11:18'!children	^ Array with: task! !!WADecorationTest methodsFor: 'initialize-release' stamp: 'lr 5/31/2008 15:50'!initialize	super initialize.	task := WADecorationTask new! !!WADecorationTest methodsFor: 'rendering' stamp: 'lr 6/5/2009 17:26'!renderContentOn: html	html orderedList: [		html listItem: 'Click button of Step 1'.		html listItem: 'Click back-button'.		html listItem: 'Click button of Step 1'.		html listItem: 'Click button of Step 2' ].	html paragraph: 'Step 1 and Step 2 should have consistent number of visible presenters. Especially there should never be two WAAnswerDecorations.'.	html heading level: 2; with: 'Application'.	html render: task.	html heading level: 2; with: 'Visible Presenters'.	html table: [		html tableRow: [			html tableHeading: 'Presenter'.			html tableHeading.			html tableHeading: 'Next'.			html tableHeading ].		self visiblePresentersDo: [ :each |			html tableRow: [				html tableData: each printString.				html tableData: each identityHash.				html tableData: (each isDecoration					ifTrue: [ each owner printString ]					ifFalse: [ each decoration printString ]).				html tableData: (each isDecoration					ifTrue: [ each owner identityHash ]					ifFalse: [ each decoration identityHash ]) ] ] ]! !!WADefaultFormTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	html form		defaultAction: [self inform: 'Default: ', value displayString];		with: [			html div: [				html submitButton						callback: [self inform: 'Before: ', value displayString];						text: 'Before'.				html break.				html textInput						value: '';						callback: [:v | value := v].				html submitButton						callback: [self inform: 'Go: ', value displayString];						text: 'Go'.				html break.				html submitButton						callback: [self inform: 'After: ', value displayString];						text: 'After' ] ]! !!WADelayTest methodsFor: 'actions' stamp: 'lr 5/22/2007 18:12'!go	self call: (WAComponent new		addMessage: '3 seconds';		addDecoration: (WADelayedAnswerDecoration new delay: 3);		yourself)! !!WADelayTest methodsFor: 'rendering' stamp: 'pmm 9/2/2007 00:20'!renderContentOn: html	html paragraph: 'Clicking the following anchor should replace it with the message "3 seconds" for 3 seconds and then restore it.'.	html paragraph: [		html anchor			callback: [ self go ];			with: 'Start' ]! !!WAEncodingTest methodsFor: 'initialize-release' stamp: 'pmm 7/2/2007 00:06'!initialize	super initialize.	self urlencoded: 'urlencoded'.	self multipart: 'multipart'! !!WAEncodingTest methodsFor: 'accessing' stamp: 'pmm 6/22/2007 20:21'!multipart	^multipart! !!WAEncodingTest methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!multipart: aString	multipart := aString! !!WAEncodingTest methodsFor: 'rendering' stamp: 'pmm 7/2/2007 00:05'!renderContentOn: html	self renderExplanationOn: html.	self renderUrlencodedOn: html.	self renderMultipartOn: html! !!WAEncodingTest methodsFor: 'rendering' stamp: 'pmm 7/28/2007 23:37'!renderExplanationOn: html	html paragraph: [		html unorderedList: [			html listItem: [				html text: 'Go to the '.				html anchor					url: 'http://www.columbia.edu/kermit/utf8.html';					with: 'UTF-8 Sampler'.				html text: ' and select some "foreign" text.' ].			html listItem: 'Copy and paste it into the urlencoded text field below and click the submit button.'.			html listItem: 'The heading, textfield and submitt button should all display the text without any error.'.			html listItem: 'Submit again without changing anything, again everything should display normally.'.			html listItem: 'Repeat this process for the multipart field. Make sure to pick at least every of these languages: German, Czech, Korean.' ] ]! !!WAEncodingTest methodsFor: 'rendering' stamp: 'pmm 6/22/2007 20:23'!renderMultipartOn: html	html heading level2;		with: 'Multipart'.	html heading level3;		with: self multipart.	html form		multipart;			with: [			html textInput				on: #multipart of: self.			html submitButton				text: self multipart ]! !!WAEncodingTest methodsFor: 'rendering' stamp: 'pmm 7/2/2007 00:05'!renderUrlencodedOn: html	html heading level2;		with: 'Urlencoded'.	html heading level3;		with: self urlencoded.	html form		with: [		html textInput			on: #urlencoded of: self.		html submitButton			text: self urlencoded ]! !!WAEncodingTest methodsFor: 'accessing' stamp: 'pmm 7/2/2007 00:04'!urlencoded	^urlencoded! !!WAEncodingTest methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!urlencoded: aString	urlencoded := aString! !!WAErrorTest methodsFor: 'rendering' stamp: 'pmm 6/25/2007 23:09'!renderContentOn: html	html div class: 'errorTest'; with: [		self renderHaltOn: html.		self renderErrorOn: html.		self renderResumableErrorOn: html.		self renderWarningOn: html.		self renderDeprecatedOn: html ]! !!WAErrorTest methodsFor: 'rendering' stamp: 'lr 7/3/2007 13:25'!renderDeprecatedOn: html	html heading: 'Deprecated'.	html paragraph: 'The link should display a deprecated warning in the toolbar and display an information message.'.	html anchor		callback: [ self deprecatedApi: 'Test Deprecation'; inform: 'To be displayed' ];		with: 'Raise deprecated'! !!WAErrorTest methodsFor: 'rendering' stamp: 'lr 7/3/2007 13:26'!renderErrorOn: html	html heading: 'Error'.	html paragraph: 'The link should display an error walkback. Opening a debugger should work. Closing the debugger window should not lock the session.'.	html anchor		callback: [ self error: 'Test Error'; inform: 'Not to be displayed' ];		with: 'Raise error'! !!WAErrorTest methodsFor: 'rendering' stamp: 'lr 7/3/2007 13:26'!renderHaltOn: html	html heading: 'Halt'.	html paragraph: 'The link should open a debugger in the image. Clicking on proceed should display the information message "To be displayed".'.	html anchor		callback: [ self halt; inform: 'To be displayed' ];		with: 'Halt execution'! !!WAErrorTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderResumableErrorOn: html	html heading: 'Resumable error'.	html paragraph: 'The link should display a zero divide walkback. Clicking on proceed should display the message "To be displayed". Clicking on debug should open a debugger in the image.'.	html anchor		callback: [ 1 / 0. self inform: 'To be displayed' ];		with: 'Raise zero divide'! !!WAErrorTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderWarningOn: html	html heading: 'Warning'.	html paragraph: 'In Squeak the warning test works the same as the resumable error test.'.	html paragraph: 'In VisualWorks the warning test works the same as the halt test.'.	html anchor		callback: [ self notify: 'Test Warning'; inform: 'To be displayed' ];		 with: 'Raise warning'! !!WAExpiryTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderActionsOn: html	html anchor		url: self session newSessionUrl;		 with: 'New Session'.	html break.	html anchor		callback: [ self session expire ];		 with: 'Expire'.	html break.	html anchor		callback: [ WAExpirySession resetCounters ];		 with: 'Reset Counters'.	html break.	html anchor		callback: [ Smalltalk garbageCollect ];		 with: 'Garbage Collect'.	html break.	html anchor		callback: [			self session application clearHandlers.			Smalltalk garbageCollect ];		 with: 'Clear Handlers'.	html break.	html anchor		callback: [			self session application clearHandlers.			WAExpirySession resetCounters.			Smalltalk garbageCollect ];		 with: 'Reset All'.	html form: [		html text: 'Expiry seconds:'.		html textInput			value: self session application sessionExpirySeconds;			callback: [:value | self session timeoutSeconds: value asNumber].		html space.		html submitButton			text: 'Change' ]! !!WAExpiryTest methodsFor: 'rendering' stamp: 'pmm 7/31/2007 07:17'!renderContentOn: html	self renderStatsOn: html.	self renderActionsOn: html! !!WAExpiryTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderStatsOn: html	html table: [		html tableRow: [			html tableHeading: 'Total session instances'.			html tableData: WAExpirySession allInstances size ].		html tableRow: [			html tableHeading: 'Active session instances'.			html tableData: (WAExpirySession allInstances count: [ :each | each isActive ]) ].		html tableRow: [			html tableHeading: 'Total component instances'.			html tableData: self class allInstances size ].		html tableRow: [			html tableHeading: 'Sessions created'.			html tableData: WAExpirySession created ].		html tableRow: [			html tableHeading: 'Sessions unregistered'.			html tableData: WAExpirySession unregistered ] ]! !!WAFlowTest methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!depth: aContext	| depth current |	depth := 0.	current := aContext.	[ current isNil ] whileFalse: [		current := current sender.		depth := depth + 1 ].	^ depth! !!WAFlowTest methodsFor: 'actions' stamp: 'pmm 5/31/2008 16:07'!goAnchors	| component |	1 to: 5 do: [ :each |		component := WAComponent new.		component addMessage: [ :html |			html anchor				callback: [ component answer ];				with: each displayString , ': ' , (self depth: thisContext) displayString ] fixCallbackTemps.		self call: component ]! !!WAFlowTest methodsFor: 'actions' stamp: 'lr 5/31/2008 14:04'!goButtons	1 to: 5 do: [ :each | self inform: each displayString , ': ' , (self depth: thisContext) displayString ]! !!WAFlowTest methodsFor: 'rendering' stamp: 'lr 5/31/2008 14:05'!renderContentOn: html	html paragraph: 'The following two anchors should trigger a flow with 5 steps each. The stack (second value) should neither grow nor shrink. Backtracking and spawning of windows should properly work. Hitting the refresh button after backtracking should not change the page.'.	html paragraph: [		html anchor			callback: [ self goAnchors ];			with: 'go anchors'.		html break.		html anchor			callback: [ self goButtons ];			with: 'go buttons' ]! !!WAHomeTest methodsFor: 'accessing' stamp: 'avi 10/19/2004 15:53'!children	^ Array with: main! !!WAHomeTest methodsFor: 'initialize-release' stamp: 'lr 10/28/2007 14:42'!initialize	super initialize.	main := WATaskTest new! !!WAHomeTest methodsFor: 'rendering' stamp: 'lr 2/25/2007 23:29'!renderContentOn: html	html anchor		callback: [ main home ];		with: 'Home'.	html break.	html render: main! !!WAHtmlTest methodsFor: 'accessing' stamp: 'mb 10/12/2006 19:43'!allSelectors	^ (self class selectors asSortedCollection select: [:s | s beginsWith: 'render'])		remove: #renderContentOn:;		yourself! !!WAHtmlTest methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!initialMessage	^'Hello world!!'! !!WAHtmlTest methodsFor: 'initialize-release' stamp: 'lr 10/28/2007 14:42'!initialize	super initialize.	message := self initialMessage.	booleanList := #(a b c d) collect: [:key | key -> ((Array with: true with: false) atRandom)].	number := 10 atRandom! !!WAHtmlTest methodsFor: 'accessing' stamp: 'pmm 7/19/2006 19:33'!message	^message! !!WAHtmlTest methodsFor: 'accessing' stamp: 'pmm 7/19/2006 19:33'!message: aString	message := aString! !!WAHtmlTest methodsFor: 'accessing' stamp: 'pmm 7/19/2006 19:32'!number	^number! !!WAHtmlTest methodsFor: 'accessing' stamp: 'pmm 7/19/2006 19:32'!number: anInteger	number := anInteger! !!WAHtmlTest methodsFor: 'rendering' stamp: 'pmm 6/9/2007 15:34'!renderCheckboxesOn: html	html text: booleanList.	html paragraph.	html form: [		booleanList do: [:association |			html text: association key; space.			html checkbox				addShortcut: 'Ctrl-' , association key asUppercase;				on: #value of: association.			html span				class: 'indented'; class: 'hint';				with: 'Shortcuts: ' , 'Ctrl-' , association key asUppercase.			html break].		html submitButton]! !!WAHtmlTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	"don't use pairsDo:, doesn't work for JPMorgan"	| selectors indices |	selectors := self allSelectors.	indices := (1 to: selectors size) select: [ :each | each odd ].	indices do: [ :index |		html div			class: 'row';			with: [				html div					class: 'left';					with: [						self							perform: (selectors at: index)							with: html ].				index < selectors size ifTrue: [					html div						class: 'left';						with: [							self								perform: (selectors at: index + 1)								with: html ] ] ] ]! !!WAHtmlTest methodsFor: 'rendering' stamp: 'pmm 6/9/2007 15:34'!renderRadioButtonsOn: html	html text: booleanList.	html paragraph.	html form: [		booleanList do: [ :association |			| group |			group := html radioGroup.			html text: association key; space.			group radioButton				addShortcut: 'Ctrl-' , association key;				selected: association value;				callback: [ association value: true ].			group radioButton				addShortcut: 'Alt-' , association key;				selected: association value not;				callback: [ association value: false ].			html span				class: 'indented'; class: 'hint';				with: 'Shortcuts: ' , 'Ctrl-' , association key , ' Alt-' , association key.			html break ].		html submitButton ]! !!WAHtmlTest methodsFor: 'rendering' stamp: 'pmm 7/19/2006 19:39'!renderSelectsOn: html	html text: number.	html paragraph.	html form: [		html select			list: (1 to: 10);			on: #number of: self.		html submitButton]! !!WAHtmlTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderSubmitButtonsOn: html	html text: number.	html paragraph.	html form: [		1 to: 10 do: [ :index |			html submitButton				addShortcut: 'F' , index displayString;				callback: [number := index];				text: index.			html space]].	html span		class: 'hint';		with: 'Above, you may be able to use F1 .. F10 as shortcuts, if the browser allows you.'! !!WAHtmlTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderTextAreaOn: html	| position |	position := message = self initialMessage		ifTrue: [ 6 ]		ifFalse: [ 'End' ].	html form: [		html text: message.		html paragraph			class: 'hint';			with: 'The text area below should have the focus and be wholly selected, unless it has its initial value, ' , self initialMessage printString , ', in which case you should see the cursor right after the "o" of "Hello".'.		html textArea			setCursorPosition: position;			on: #message of: self.		html break.		html submitButton ]! !!WAHtmlTest methodsFor: 'rendering' stamp: 'pmm 7/19/2006 19:34'!renderTextInputOn: html	html form: [		html text: message.		html paragraph.		html textInput			on: #message of: self.		html submitButton]! !!WAHtmlTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderVFieldSetOn: html	html fieldSet		legend: 'Various text rendering in a fieldset';		with: [			html				strong: 'Strong';				break;				emphasis: 'Emphasis';				break.			html acronym				title: 'United States of America';				with: 'USA'.			html				break;				emphasis: 'Emphasis';				break.			html div				style: 'color: red';				style: 'background-color: lightgreen';				style: 'padding: 1em';				style: 'border: solid 2px black';				style: 'font-weight: bold';				style: 'font-size: 150%';				style: 'height: 3em';				style: 'text-align: center';				with: 'Large bold red in a green div'.			html				break]! !!WAHtmlTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderZFieldSetOn: html	| url |	url := html context		urlForDocument: (WAStandardFiles default inspectorPng)		mimeType: 'image/png'		fileName: 'Debug.jpg'.	html fieldSet		legend: 'Various images in a fieldset';		with: [html image url: url; altText: 'Halo-Debug'.			html space.			html break.			html image url: WADispatcherFiles / #logoPng; width: '80%'; altText: 'Seaside'.			html break.			html image url: WADispatcherFiles / #logoPng; height: '50px'; altText: 'Seaside'.			html break.			html image url: WADispatcherFiles / #logoPng; width: '250px'; height: '60px'; altText: 'Seaside' ]! !!WAHtmlTest methodsFor: 'rendering' stamp: 'mb 6/10/2007 19:34'!style	^ 'div.row {	clear: both}div.left {	float: left;	width: 45%;	margin: 1%}.indented {	margin-left: 2em;}.hint {	font-family: Tahoma, Arial;	font-size: small;}'! !!WAIframeTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 13:31'!children	^ Array with: counter! !!WAIframeTest methodsFor: 'initialization' stamp: 'lr 3/9/2006 13:31'!initialize	super initialize.	counter := WACounter new! !!WAIframeTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	html iframe		contents: counter.	html break; break.	html iframe		url: (WADispatcher default entryPointAt: WACounter entryPointName) basePath.	html break; break.	html iframe		document: WADispatcherFiles default logoPng		mimeType: 'image/jpeg'! !!WAIframeTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!style	^ 'iframe {	border: 1px solid gray;	width: 100%;}'! !!WAImageMapTest methodsFor: 'actions' stamp: 'mb 7/10/2007 14:10'!clickedAt: aPoint id: aString	self inform: 'Clicked at ' , aPoint displayString , ' on ' , aString displayString! !!WAImageMapTest methodsFor: 'rendering' stamp: 'lr 6/5/2009 17:26'!renderContentOn: html	html heading level: 3;		 with: 'Image Map'.	html paragraph: 'Click anywhere on the Seaside logo and you should get informed about the position where you clicked.'.	html map		title: 'Click anywhere on the Seaside logo';		callback: [ :aPoint |			self clickedAt: aPoint id: 'the Seaside logo'];		with: [			html image				altText: 'Seaside logo';				url: WADispatcherFiles / #logoPng ]! !!WAImageTest methodsFor: 'accessing' stamp: 'pmm 5/28/2007 20:00'!formClass	^Smalltalk classNamed: #Form! !!WAImageTest methodsFor: 'accessing' stamp: 'pmm 5/28/2007 20:04'!haloDebugForm	^self formClass		extent: 16@16		depth: 1		fromArray: #( 0 0 0 50331648 25165824 12582912 281018368 415236096 264241152 132120576 7340032 3670016 1572864 0 0 0)		offset: 0@0! !!WAImageTest methodsFor: 'accessing' stamp: 'pmm 5/28/2007 20:05'!haloPaintForm	^self formClass		extent: 16@16		depth: 1		fromArray: #( 0 0 0 402653184 503316480 192937984 213909504 73400320 103809024 51904512 25690112 14155776 7340032 0 0 0)		offset: 0@0! !!WAImageTest methodsFor: 'accessing' stamp: 'pmm 5/28/2007 20:05'!haloViewForm	^self formClass		extent: 16@16		depth: 1		fromArray: #( 0 0 0 0 132120576 486014976 770965504 1341259776 669253632 467140608 132120576 0 0 0 0 0)		offset: 0@0! !!WAImageTest methodsFor: 'testing' stamp: 'pmm 5/28/2007 20:00'!isSupported	^self formClass notNil! !!WAImageTest methodsFor: 'accessing' stamp: 'pmm 3/28/2007 10:07'!label	^'Image'! !!WAImageTest methodsFor: 'rendering' stamp: 'pmm 5/28/2007 20:06'!renderContentOn: html	self isSupported		ifTrue: [ self renderImagesOn: html ]		ifFalse: [ self renderNotSupportedOn: html ]! !!WAImageTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderImagesOn: html	html form: [		html imageButton			callback: [ self inform: 'ok' ];			form: self haloDebugForm ].	html image		form: self haloViewForm;		altText: 'Halo-View'.	html space.	html image		document: self haloPaintForm		mimeType: 'image/png'		fileName: 'Paint.png';		altText: 'Halo-Paint'! !!WAImageTest methodsFor: 'rendering' stamp: 'pmm 5/28/2007 20:02'!renderNotSupportedOn: html	html heading: 'Your image doesn''t have the Form class'! !!WAInputTest class methodsFor: 'accessing' stamp: 'mb 2/22/2007 14:42'!description	^'Various XHTML form input elements'! !!WAInputTest class methodsFor: 'accessing' stamp: 'mb 2/22/2007 14:41'!example	^ self new! !!WAInputTest methodsFor: 'accessing' stamp: 'pmm 9/19/2007 06:55'!children	^Array with: inputElements! !!WAInputTest methodsFor: 'initialization' stamp: 'pmm 9/19/2007 06:49'!initialize	super initialize.	inputElements := WAInputElementContainer new! !!WAInputTest methodsFor: 'rendering' stamp: 'pmm 9/19/2007 06:51'!renderContentOn: html	html form: [		html table: [ html render: inputElements ].		html submitButton ]! !!WALinkSubmitTest methodsFor: 'accessing' stamp: 'pmm 7/19/2006 19:45'!count	^count! !!WALinkSubmitTest methodsFor: 'accessing' stamp: 'mb 5/15/2007 09:36'!count: anIntegerOrString	count := anIntegerOrString asNumber! !!WALinkSubmitTest methodsFor: 'accessing' stamp: 'lr 6/5/2009 17:26'!formId	^#myform! !!WALinkSubmitTest methodsFor: 'accessing' stamp: 'mb 11/28/2007 18:30'!increment	^increment! !!WALinkSubmitTest methodsFor: 'accessing' stamp: 'lr 6/5/2009 17:26'!increment: aValue	increment = aValue ifFalse:		[increment := aValue.		self count: self count + increment]! !!WALinkSubmitTest methodsFor: 'accessing' stamp: 'mb 6/2/2008 09:01'!incrementList	^incrementList! !!WALinkSubmitTest methodsFor: 'accessing' stamp: 'lr 6/5/2009 17:26'!incrementList: aValue	incrementList = aValue ifFalse:		[incrementList := aValue.		self count: self count + incrementList]! !!WALinkSubmitTest methodsFor: 'initialize-release' stamp: 'lr 6/5/2009 17:26'!initialize	super initialize.	count := 0.	increment := 1! !!WALinkSubmitTest methodsFor: 'rendering' stamp: 'lr 6/5/2009 17:26'!renderContentOn: html	self renderDescriptionOn: html.	html form		id: self formId;		with: [ self renderInputOn: html ].	html paragraph: [ self renderLinksOn: html ]! !!WALinkSubmitTest methodsFor: 'rendering' stamp: 'lr 6/8/2008 16:49'!renderDescriptionOn: html	html paragraph: 'This test demonstrates automatic form submission with anchors.'.	html orderedList: [		html listItem: 'Clicking anchors (++ or --) should increase/decrease the counter.'.		html listItem: 'Entering a new value and immediately increase/decrease it should work'.		html listItem: 'Clicking submit should simply submit the value.' ]! !!WALinkSubmitTest methodsFor: 'rendering' stamp: 'lr 6/8/2008 16:44'!renderInputOn: html	html textInput on: #count of: self! !!WALinkSubmitTest methodsFor: 'rendering' stamp: 'lr 6/5/2009 17:26'!renderLinksOn: html	html anchor		addShortcut: 'Ctrl-Up';		callback: [ count := count + increment ];		submitFormNamed: self formId;		with: '++'.	html text: ' (Ctrl+Up)'.	html break.	html anchor		addShortcut: 'Ctrl-Down';		callback: [ count := count - increment ];		submitFormNamed: self formId;		with: '--'.	html text: ' (Ctrl-Down)'.	html break.	html anchor		submitFormNamed: self formId;		with: 'submit'! !!WALotsaLinksTest methodsFor: 'rendering' stamp: 'lr 6/6/2007 17:56'!renderContentOn: html	html unorderedList: [		1 to: 5000 do: [ :each |			html listItem: [				html anchor					callback: [ self inform: each ];					with: each ] ] ]! !!WAMiniCalendarTest methodsFor: 'accessing' stamp: 'pmm 9/11/2007 06:49'!children	^Array with: calendar! !!WAMiniCalendarTest methodsFor: 'initialize-release' stamp: 'pmm 9/11/2007 06:48'!initialize	super initialize.	calendar := WAMiniCalendar new! !!WAMiniCalendarTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	html render: calendar.	html strong: 'selected:'.	html space.	html render: calendar date! !!WAModelTest methodsFor: 'actions' stamp: 'mb 2/9/2006 15:25'!logoff	state := #OFF.	test ifTrue: [self inform: 'Logged off']! !!WAModelTest methodsFor: 'actions' stamp: 'mb 2/9/2006 15:26'!logon	user isEmptyOrNil		ifTrue:			[self inform: 'Nope !!']		ifFalse:			[state := #ON.			test ifTrue: [self inform: 'Logged on']]! !!WAModelTest methodsFor: 'accessing' stamp: 'mb 2/9/2006 15:04'!pass	"Answer the value of pass"	^ pass! !!WAModelTest methodsFor: 'accessing' stamp: 'mb 2/9/2006 15:04'!pass: anObject	"Set the value of pass"	pass := anObject! !!WAModelTest methodsFor: 'rendering' stamp: 'pmm 5/15/2007 19:52'!renderButtonOn: html	| action |	action := state == #ON ifTrue: [ #logoff ] ifFalse: [ #logon ].	html submitButton		on: action of: self! !!WAModelTest methodsFor: 'rendering' stamp: 'pmm 5/15/2007 19:49'!renderContentOn: html	html form		id: 'myform';		with: [			html table: [				self renderUsernameOn: html.				self renderPasswordOn: html.				self renderFeedbackOn: html ].			self renderButtonOn: html ]! !!WAModelTest methodsFor: 'rendering' stamp: 'pmm 5/15/2007 19:49'!renderFeedbackOn: html	html tableRow: [		html tableData: [			html label				for: #withFeedback;				with: 'With Feedback:' ].		html tableData: [			html checkbox				id: #withFeedback;				on: #test of: self ] ]! !!WAModelTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderPasswordOn: html	html tableRow: [		html tableData: [			html label				for: #pass;				with: 'Password:' ].		html tableData: [			html passwordInput				id: #pass;				on: #pass of: self ] ]! !!WAModelTest methodsFor: 'rendering' stamp: 'pmm 5/15/2007 19:52'!renderUsernameOn: html	html tableRow: [		html tableData: [			html label				for: #userid;				with: 'Username:' ].		html tableData: [			html textInput				id: #userid;				on: #user of: self ] ]! !!WAModelTest methodsFor: 'accessing' stamp: 'mb 2/9/2006 15:04'!test	"Answer the value of test"	^ test! !!WAModelTest methodsFor: 'accessing' stamp: 'mb 2/9/2006 15:04'!test: anObject	"Set the value of test"	test := anObject! !!WAModelTest methodsFor: 'accessing' stamp: 'mb 2/9/2006 15:10'!user	"Answer the value of user"	^ user! !!WAModelTest methodsFor: 'accessing' stamp: 'mb 2/9/2006 15:10'!user: anObject	"Set the value of user"	user := anObject! !!WAMultipartInputTest class methodsFor: 'accessing' stamp: 'pmm 9/19/2007 06:50'!description	^'Various XHTML form input elements'! !!WAMultipartInputTest class methodsFor: 'accessing' stamp: 'pmm 9/19/2007 06:50'!example	^ self new! !!WAMultipartInputTest methodsFor: 'accessing' stamp: 'pmm 9/19/2007 06:55'!children	^Array with: inputElements! !!WAMultipartInputTest methodsFor: 'initialization' stamp: 'pmm 9/19/2007 06:50'!initialize	super initialize.	inputElements := WAInputElementContainer new! !!WAMultipartInputTest methodsFor: 'rendering' stamp: 'pmm 9/19/2007 06:52'!renderContentOn: html	html form		multipart;		with: [			html table: [ html render: inputElements ].			html submitButton ]! !!WAParentTest methodsFor: 'accessing' stamp: 'lr 6/8/2008 17:04'!children	^ Array with: child! !!WAParentTest methodsFor: 'initialization' stamp: 'lr 6/8/2008 17:06'!initialize	super initialize.	child := WAParentChildTest new parent: self! !!WAParentTest methodsFor: 'rendering' stamp: 'lr 6/8/2008 17:05'!renderContentOn: html	html paragraph: 'This regression test checks if #call: on the parent component works. If you click "swap parent" "Test green!!" should appear and this explanation should disappear.'.	html render: child! !!WAPathTest methodsFor: 'accessing' stamp: 'pmm 5/10/2007 21:38'!children	^Array with: counter! !!WAPathTest methodsFor: 'initialize-release' stamp: 'pmm 5/10/2007 21:38'!initialize	super initialize.	counter := WACounter new! !!WAPathTest methodsFor: 'rendering' stamp: 'pmm 5/10/2007 21:39'!renderContentOn: html	html anchor name: counter count.	html render: counter! !!WAPathTest methodsFor: 'path' stamp: 'lr 10/28/2007 14:42'!updateUrl: aUrl	aUrl addToPath: counter count displayString.	aUrl fragment: counter count displayString! !!WAPhraseElementsTest methodsFor: 'rendering' stamp: 'pmm 9/30/2006 20:24'!renderAbbreviatedOn: html	html heading level2; with: '<abbr>'.	html abbreviated		title: 'World Wide Web';		with: 'WWW'! !!WAPhraseElementsTest methodsFor: 'rendering' stamp: 'pmm 9/30/2006 20:28'!renderAcronymOn: html	html heading level2; with: '<acronym>'.	html acronym		title: 'Federal Bureau of Investigation';		with: 'F.B.I.'! !!WAPhraseElementsTest methodsFor: 'rendering' stamp: 'pmm 10/2/2006 21:26'!renderAddressOn: html	html heading level2; with: '<address>'.	html address: [		#(			'Newsletter editor'			'J.R. Brown'			'JimquickPost News, Jimquick, CT 01234'			'Tel (123) 456 7890')			do: [ :each | html text: each ]			separatedBy: [ html break ] ]! !!WAPhraseElementsTest methodsFor: 'rendering' stamp: 'pmm 9/30/2006 20:25'!renderCodeOn: html	html heading level2; with: '<code>'.	html text: 'Expressions like '.	html code: 'a[i++] + b[i++]'.	html text: ' should not be used, since they cause undefined behavior'! !!WAPhraseElementsTest methodsFor: 'rendering' stamp: 'pmm 3/28/2007 10:46'!renderContentOn: html	self renderHarryOn: html.	self renderAbbreviatedOn: html.	self renderAcronymOn: html.	self renderKeyboardInputOn: html.	self renderVariableOn: html.	self renderCodeOn: html.	self renderDefinitionOn: html.	self renderSampleOn: html.	self renderAddressOn: html.	self renderModificationOn: html! !!WAPhraseElementsTest methodsFor: 'rendering' stamp: 'pmm 9/30/2006 20:25'!renderDefinitionOn: html	html heading level2; with: '<dfn>'.	html definition: 'Ichthyology'.	html text: ' is the branch of natural science whichstudies fish.'! !!WAPhraseElementsTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderHarryOn: html	html heading level2; with: '<cite>, <q>, <strong>'.	html text: 'As '.	html citation: 'Harry S. Truman'.	html text: ' said, '.	html quote: 'The buck stops here.'.	html break.	html text: 'More information can be found in '.	html citation: '[ISO-0000]'.	html text: '.'.	html break.	html text: 'Please refer to the following reference number in future correspondence: '.	html strong: '1-234-55'! !!WAPhraseElementsTest methodsFor: 'rendering' stamp: 'pmm 8/24/2008 11:12'!renderKeyboardInputOn: html	html heading level2; with: '<kbd>'.	html text: 'Finally, type '.	html keyboard: 'logout'.	html text: ' and press the return key.'! !!WAPhraseElementsTest methodsFor: 'rendering' stamp: 'pmm 3/28/2007 10:48'!renderModificationOn: html	html heading level2; with: '<ins>, <del>'.	html paragraph: [		html text: 'A Sheriff can employ '.		html deleted			title: 'Changed as a result of the SECURE bill.';			cite: 'http://www.w3.org/TR/html401/struct/text.html#edef-del';			datetime: '1994-11-05T08:15:30-05:00';			with: 3.		html inserted			title: 'Changed as a result of the SECURE bill.';			cite: 'http://www.w3.org/TR/html401/struct/text.html#edef-del';			datetime: '1994-11-05T08:15:30-05:00';			with: 5.		html text: ' deputies.' ]! !!WAPhraseElementsTest methodsFor: 'rendering' stamp: 'pmm 8/24/2008 11:11'!renderSampleOn: html	html heading level2; with: '<samp>'.	html text: 'If you select the ''champion'' option, you will receive the message '.	html sample: 'The monkey is not a caterpillar'.	html text: '.'! !!WAPhraseElementsTest methodsFor: 'rendering' stamp: 'pmm 8/24/2008 11:12'!renderVariableOn: html	html heading level2; with: '<var>'.	html text: 'In the simplest case, the command for deleting a file in Unix is'.	html break.	html keyboard: 'rm'.	html space.	html variable: 'filename'! !!WAPopupTest methodsFor: 'actions' stamp: 'lr 7/4/2007 20:49'!counterLoop	WARenderLoop new call: WACounter new! !!WAPopupTest methodsFor: 'rendering' stamp: 'lr 7/4/2007 20:54'!renderContentOn: html	html popupAnchor		callback: [ self counterLoop ];		with: 'popup'.	html break.	html popupAnchor		extent: 100 @ 100;		callback: [ self counterLoop ];		with: 'popup with extent'.	html break.	html popupAnchor		position: 100 @ 100;		callback: [ self counterLoop ];		with: 'popup with position'.	html break.	html popupAnchor		location: true;		callback: [ self counterLoop ];		with: 'popup with location'.	html break.	html popupAnchor		resizable: false;		callback: [ self counterLoop ];		with: 'popup not resizable'! !!WARubyTest methodsFor: 'rendering' stamp: 'pmm 9/18/2006 22:07'!renderComplexOn: html	html heading level2; with: 'Complex ruby markup'.	html ruby: [		html rubyBaseContainer: [			html rubyBase: 10.			html rubyBase: 31.			html rubyBase: 2002 ].		html rubyTextContainer: [			html rubyText: 'Month'.			html rubyText: 'Day'.			html rubyText: 'Year' ].		html rubyTextContainer: [			html rubyText				span: 3;				with: 'Expiration Date' ] ]! !!WARubyTest methodsFor: 'rendering' stamp: 'pmm 9/18/2006 22:06'!renderContentOn: html	self renderSimpleOn: html.	self renderSimpleParenthesesOn: html.	self renderComplexOn: html! !!WARubyTest methodsFor: 'rendering' stamp: 'pmm 9/18/2006 22:07'!renderSimpleOn: html	html heading level2; with: 'Simple ruby markup'.	html ruby: [		html rubyBase: 'WWW'.		html rubyText: 'World Wide Web' ]! !!WARubyTest methodsFor: 'rendering' stamp: 'pmm 9/18/2006 22:08'!renderSimpleParenthesesOn: html	html heading level2; with: 'Simple ruby markup with parentheses'.	html ruby: [		html rubyBase: 'WWW'.		html rubyParentheses: '('.		html rubyText: 'World Wide Web'.		html rubyParentheses: ')' ]! !!WASvgTest methodsFor: 'rendering' stamp: 'lr 2/13/2007 00:13'!renderContentOn: html	html object		type: 'image/svg+xml';		width: 600;		height: 800;		standby: 'loading tiger';		classId: 'http://www.adobe.com/svg/viewer/install/main.html';		url: 'http://croczilla.com/svg/samples/tiger/tiger.svg';		with: 'Your browser doesn''t support SVG'! !!WATableReportTest class methodsFor: 'accessing' stamp: 'mb 2/10/2006 13:11'!example	^ self new! !!WATableReportTest methodsFor: 'accessing' stamp: 'lr 8/6/2007 13:27'!children	^ Array with: report! !!WATableReportTest methodsFor: 'initialization' stamp: 'lr 8/6/2007 13:33'!initialize	super initialize.	report := WATableReport new		rows: WAComponent allSubclasses asArray;		columns: (OrderedCollection new			add: (WAReportColumn				selector: #fullName title: 'Name'				onClick: [ :each | self inform: each description ]);			add: ((WAReportColumn				selector: #canBeRoot title: 'Can Be Root')				sortBlock: [ :a :b | a ]);			add: (WAReportColumn				renderBlock: [ :each :html | html emphasis: each description ]				title: 'Description');			yourself);		rowColors: #(lightblue lightyellow);		rowPeriod: 1;		yourself! !!WATransactionTest methodsFor: 'accessing' stamp: 'pmm 9/2/2007 00:07'!children	^Array with: nestedTransation! !!WATransactionTest methodsFor: 'initialize-release' stamp: 'pmm 9/2/2007 00:07'!initialize	super initialize.	nestedTransation := WANestedTransaction new! !!WATransactionTest methodsFor: 'rendering' stamp: 'pmm 9/2/2007 00:15'!renderContentOn: html	self renderExplanationOn: html.	html render: nestedTransation! !!WATransactionTest methodsFor: 'rendering' stamp: 'pmm 9/2/2007 00:14'!renderExplanationOn: html	html paragraph: [		html text: 'This checks if nested #isolate: block work. It has the following nested transactions:'.		html orderedList: [			html listItem: 'Inside parent txn'.			html listItem: [				html orderedList: [					html listItem: 'Inside child txn'].			html listItem: 'Outside child txn' ] ].		html text: 'if you leave the child transaction and enter it with the back button you should end up in the parent transaction. If you leave the parent transaction with the back button and enter either it or the child transaction with the back button you should end up outside the parent transaction.' ]! !!WAUploadTest methodsFor: 'rendering' stamp: 'pmm 4/18/2008 07:13'!renderContentOn: html	html heading: 'Upload File'.	self renderUploadOn: html.	file ifNotNil: [		self renderDownloadLinksOn: html.		self renderFileContentsOn: html ]! !!WAUploadTest methodsFor: 'rendering' stamp: 'lr 6/5/2009 17:26'!renderDownloadLinksOn: html	html anchor		document: file contents		mimeType: file contentType		fileName: file fileName;		with: file fileName , ' (' , file contentType , ')'.	html break.	html anchor		document: file contents;		with: file fileName! !!WAUploadTest methodsFor: 'rendering' stamp: 'pmm 11/30/2008 10:46'!renderFileContentsOn: html	file size <= 16r10000		ifTrue: [ html preformatted: file contents ]		ifFalse: [			html break.			html text: 'file size is: ', file size printString, ' bytes' ]! !!WAUploadTest methodsFor: 'rendering' stamp: 'pmm 5/12/2008 10:14'!renderUploadOn: html	html form		multipart;		with: [			html div: [				"div for HTML validation"				html fileUpload callback: [ :f | file := f ].				html submitButton text: 'Load' ] ]! !!WAHalo class methodsFor: 'instance-creation' stamp: 'lr 5/11/2007 01:05'!for: aComponent	^ Halos at: aComponent ifAbsentPut: [ self new initializeOn: aComponent ]! !!WAHalo class methodsFor: 'initialization' stamp: 'lr 5/11/2007 01:05'!initialize	Halos := SeasidePlatformSupport weakDictionaryOfSize: 20! !!WAHalo methodsFor: 'initialization' stamp: 'lr 9/5/2007 11:46'!initializeOn: aComponent	root := aComponent.	mode := WAValueHolder with: self modes first.	plugins := WAHaloPlugin allSubclassesOn: self root for: self! !!WAHalo methodsFor: 'accessing' stamp: 'lr 12/6/2006 20:25'!mode	^ mode contents! !!WAHalo methodsFor: 'accessing' stamp: 'lr 12/6/2006 20:24'!mode: aSymbol	mode contents: aSymbol! !!WAHalo methodsFor: 'accessing' stamp: 'lr 3/26/2007 22:26'!modes	^ #( render: source: )! !!WAHalo methodsFor: 'accessing' stamp: 'lr 5/11/2007 01:06'!plugins	^ plugins! !!WAHalo methodsFor: 'rendering-modes' stamp: 'lr 5/11/2007 09:39'!render: html	self root renderContentOn: html! !!WAHalo methodsFor: 'rendering' stamp: 'pmm 5/11/2007 10:36'!renderContentOn: html	| haloHtml |	haloHtml := self rendererClass		context: html context		callbacks: html callbacks.	haloHtml div class: 'halo'; with: [		haloHtml div class: 'halo-header'; with: [			self plugins				do: [ :each | html render: each ]				separatedBy: [ html text: ' ' ] ].		haloHtml div class: 'halo-body'; with: [			self perform: self mode with: html ] ].	haloHtml flush.	html flush! !!WAHalo methodsFor: 'accessing' stamp: 'lr 5/11/2007 09:39'!root	^ root! !!WAHalo methodsFor: 'rendering-modes' stamp: 'lr 10/28/2007 14:42'!source: html	| context haloHtml |	haloHtml := self rendererClass		context: html context		callbacks: html callbacks.	context := haloHtml context copy.	context clearMode.	context document: (WAPrettyPrintedDocument renderer: haloHtml).	haloHtml div		class: 'halo-source';		with: [ self root renderWithContext: context ].	haloHtml flush.	html context count: context count! !!WAHalo methodsFor: 'accessing' stamp: 'lr 4/15/2007 18:50'!states	^ Array with: mode! !!WAInputDialog methodsFor: 'accessing' stamp: 'pmm 9/12/2006 18:32'!default: aString	value := aString! !!WAInputDialog methodsFor: 'accessing' stamp: 'pmm 9/12/2006 18:34'!label	^label ifNil: [ label := 'OK' ]! !!WAInputDialog methodsFor: 'accessing' stamp: 'pmm 9/12/2006 18:32'!label: aString	label := aString! !!WAInputDialog methodsFor: 'rendering' stamp: 'lr 1/7/2007 18:02'!renderContentOn: html	html form		defaultAction: [ self answer: value ];		with: [			html textInput on: #value of: self.			html space.			html submitButton				callback: [ self answer: value ];				text: self label ]! !!WAInputDialog methodsFor: 'accessing' stamp: 'pmm 9/12/2006 18:34'!value	^value! !!WAInputDialog methodsFor: 'accessing' stamp: 'pmm 9/12/2006 18:34'!value: aString	value := aString! !!WAInputElementContainer methodsFor: 'accessing' stamp: 'pmm 9/19/2007 06:48'!elements	^ #( Quito Dakar Sydney Bamako )! !!WAInputElementContainer methodsFor: 'accessing' stamp: 'pmm 9/19/2007 06:48'!exampleText	^ 'Example Text'! !!WAInputElementContainer methodsFor: 'initialization' stamp: 'pmm 9/19/2007 06:48'!initialize	super initialize.	textInput := textArea := 'Some Text'! !!WAInputElementContainer methodsFor: 'accessing' stamp: 'pmm 9/19/2007 06:48'!nestedElements	^ #(('Functional' ('Haskell ' 'Lisp' 'ML')) ('Dataflow' ('Hartmann pipelines' 'G' 'Max' 'Prograph')) ('Fourth-generation' ('Today' 'Ubercode' 'Uniface')))! !!WAInputElementContainer methodsFor: 'rendering' stamp: 'pmm 9/19/2007 06:48'!renderContentOn: html	self renderHeadingOn: html.	self renderTextInputOn: html.	self renderTextInputExampleOn: html.	self renderTextAreaOn: html.	self renderTextAreaExampleOn: html.	self renderSingleSelectionOn: html.	self renderSingleSelectionOptionalOn: html.	self renderSingleSelectionWithoutCallbackOn: html.	self renderMultiSelectionOn: html.	self renderNestedSelectionOn: html! !!WAInputElementContainer methodsFor: 'rendering-elements' stamp: 'pmm 9/19/2007 06:48'!renderHeadingOn: html	html tableRow: [		html tableData.		html tableHeading: 'Control'.		html tableHeading: 'Print String' ]! !!WAInputElementContainer methodsFor: 'rendering' stamp: 'pmm 9/19/2007 06:48'!renderLabel: aString input: anInputBlock output: anOutputBlock on: html	html tableRow: [		html tableHeading: aString.		html tableData: anInputBlock.		html tableData: anOutputBlock ]! !!WAInputElementContainer methodsFor: 'rendering-elements' stamp: 'lr 10/28/2007 14:42'!renderMultiSelectionOn: html	self		renderLabel: 'Multi Selection'		input: [			html multiSelect				list: self elements;				selected: multiSelection;				callback: [ :value | multiSelection := value ] ]		output: [ html unorderedList list: multiSelection ]		on: html! !!WAInputElementContainer methodsFor: 'rendering-elements' stamp: 'lr 10/28/2007 14:42'!renderNestedSelectionOn: html	self		renderLabel: 'Nested Selection'		input: [			html select: [				self nestedElements do: [ :list |					html optionGroup label: list first; with: [						list second do: [ :each |							html option								selected: nestedSelection = each;								callback: [ nestedSelection := each ];								with: each ] ] ] ] ]		output: nestedSelection printString		on: html! !!WAInputElementContainer methodsFor: 'rendering-elements' stamp: 'lr 10/28/2007 14:42'!renderSingleSelectionOn: html	self		renderLabel: 'Single Selection'		input: [			html select				list: self elements;				selected: singleSelection;				callback: [ :value | singleSelection := value ] ]		output: singleSelection printString		on: html! !!WAInputElementContainer methodsFor: 'rendering-elements' stamp: 'lr 10/28/2007 14:42'!renderSingleSelectionOptionalOn: html	self		renderLabel: 'Single Selection (Optional)'		input: [			html select				beOptional;				list: self elements;				optionalLabel: '(none)';				selected: singleSelectionOptional;				callback: [ :value | singleSelectionOptional := value ] ]		output: singleSelectionOptional printString		on: html! !!WAInputElementContainer methodsFor: 'rendering-elements' stamp: 'lr 10/28/2007 14:42'!renderSingleSelectionWithoutCallbackOn: html	self		renderLabel: 'Single Selection (Without Callback)'		input: [ html select list: self elements ]		output: nil		on: html! !!WAInputElementContainer methodsFor: 'rendering-elements' stamp: 'lr 10/28/2007 14:42'!renderTextAreaExampleOn: html	self		renderLabel: 'Text Area (Example)'		input: [			html textArea				value: textAreaExample;				exampleText: self exampleText;				callback: [ :value | textAreaExample := value ] ]		output: textAreaExample printString		on: html! !!WAInputElementContainer methodsFor: 'rendering-elements' stamp: 'lr 10/28/2007 14:42'!renderTextAreaOn: html	self		renderLabel: 'Text Area'		input: [			html textArea				value: textArea;				callback: [ :value | textArea := value ] ]		output: textArea printString		on: html! !!WAInputElementContainer methodsFor: 'rendering-elements' stamp: 'lr 10/28/2007 14:42'!renderTextInputExampleOn: html	self		renderLabel: 'Text Input (Example)'		input: [			html textInput				value: textInputExample;				exampleText: self exampleText;				callback: [ :value | textInputExample := value ] ]		output: textInputExample printString		on: html! !!WAInputElementContainer methodsFor: 'rendering-elements' stamp: 'lr 10/28/2007 14:42'!renderTextInputOn: html	self		renderLabel: 'Text Input'		input: [			html textInput				setFocus;				value: textInput;				callback: [ :value | textInput := value ] ]		output: textInput printString		on: html! !!WAInspector class methodsFor: 'instance creation' stamp: 'ab 2/15/2003 00:21'!on: anObject	^ self new object: anObject! !!WAInspector methodsFor: 'accessing' stamp: 'avi 2/10/2004 16:34'!children	^ Array with: path! !!WAInspector methodsFor: 'actions' stamp: 'lr 5/28/2007 19:09'!chooseObject: anObject named: aString	path pushSegment: anObject name: aString.	selected := nil! !!WAInspector methodsFor: 'actions' stamp: 'lr 5/28/2007 19:23'!doIt	| result |	result := self evaluate.	selected ifNil: [ ^ self ].	selected isNumber		ifTrue: [ self object at: selected put: result ]		ifFalse: [ self object instVarNamed: selected put: result ]! !!WAInspector methodsFor: 'actions' stamp: 'lr 10/28/2007 14:42'!evaluate	^ self object class evaluatorClass new		evaluate: input		in: thisContext		to: self object! !!WAInspector methodsFor: 'initialize-release' stamp: 'al 9/7/2006 15:22'!initialize	super initialize.	path := WAPath new! !!WAInspector methodsFor: 'actions' stamp: 'lr 5/28/2007 19:14'!inspectIt	| result |	result := self evaluate.	self chooseObject: result named: result printString! !!WAInspector methodsFor: 'testing' stamp: 'lr 5/28/2007 18:56'!isPrimitiveType: anObject	^ anObject isNumber or: [ anObject isNil or: [ anObject == true or: [ anObject == false ] ] ]! !!WAInspector methodsFor: 'accessing' stamp: 'ab 5/31/2003 15:12'!object	^ path currentSegment! !!WAInspector methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!object: anObject	self chooseObject: anObject named: anObject printString! !!WAInspector methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	html heading		level: 1;		with: (self object printStringLimitedTo: 50).	html render: path.	html form: [		self renderMembersOn: html.		self renderEditAreaOn: html ]! !!WAInspector methodsFor: 'rendering' stamp: 'lr 5/28/2007 19:15'!renderEditAreaOn: html	html textArea		value: input;		callback: [ :value | input := value ].	html break.	html submitButton		callback: [ self doIt ];		text: 'do it'.	html submitButton		callback: [ self inspectIt ];		text: 'inspect it'! !!WAInspector methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderMembersOn: html	| members radioGroup |	selected := nil.	members := self object inspectorFields.	members isEmpty ifTrue: [ ^ self ].	radioGroup := html radioGroup.	html table: [		members associationsDo: [ :association |			self				renderRow: association value				named: association key				group: radioGroup				on: html ] ]! !!WAInspector methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderRow: anObject named: aString group: aRadioGroup on: html	| radioButton |	html tableRow: [		html tableHeading: [			radioButton := aRadioGroup radioButton				ensureId;				callback: [ selected := aString ];				yourself.			html label for: radioButton id; with: [				(self isPrimitiveType: anObject)					ifTrue: [ html text: aString ]					ifFalse: [						html anchor							callback: [ self chooseObject: anObject named: aString ];							with: aString ] ] ].		html tableData: (anObject printStringLimitedTo: 100) ]! !!WAInspector methodsFor: 'accessing' stamp: 'lr 5/28/2007 19:20'!style	^ 'form {	padding: 2px;	margin: 0;}form th {	text-align: left;	padding-right: 2em;}form textarea {	width: 100%;	height: 100px;	border: 1px solid #aaa;}'! !!WAMiniCalendar class methodsFor: 'testing' stamp: 'dc 12/28/2005 14:20'!canBeRoot	^ true! !!WAMiniCalendar class methodsFor: 'accessing' stamp: 'lr 11/29/2004 16:37'!example	^self new! !!WAMiniCalendar methodsFor: 'testing' stamp: 'lr 12/28/2006 22:37'!canSelect: aDate	^ canSelectBlock value: aDate! !!WAMiniCalendar methodsFor: 'accessing' stamp: 'avi 10/23/2003 15:16'!canSelectBlock: aBlock	canSelectBlock := aBlock! !!WAMiniCalendar methodsFor: 'accessing-delegated' stamp: 'avi 10/23/2003 15:25'!date	^ date contents! !!WAMiniCalendar methodsFor: 'accessing-delegated' stamp: 'avi 12/12/2004 13:39'!date: aDate	date contents: aDate.	month contents: aDate month! !!WAMiniCalendar methodsFor: 'initialization' stamp: 'lr 9/5/2007 11:47'!initialize	super initialize.	month := WAValueHolder with: Date today month.	date := WAValueHolder new.	canSelectBlock := [ :value | true ].	selectBlock := [ :value | self answer: value ]! !!WAMiniCalendar methodsFor: 'accessing-delegated' stamp: 'avi 10/23/2003 22:56'!month	^ month contents! !!WAMiniCalendar methodsFor: 'accessing-delegated' stamp: 'avi 10/23/2003 22:56'!month: aMonth	^ month contents: aMonth! !!WAMiniCalendar methodsFor: 'private' stamp: 'lr 12/28/2006 22:41'!monthHeading	^ self month name , ' ' , self month year displayString! !!WAMiniCalendar methodsFor: 'private' stamp: 'lr 12/28/2006 22:41'!months	^ (1 to: 12) collect: [ :i | Month month: i year: self year ]! !!WAMiniCalendar methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderCellForDate: aDate on: html	html tableData: [		aDate month = self month ifTrue: [			html span				class: (self date = aDate ifTrue: [ 'calendarArchiveDate' ]);				with: [					(self canSelect: aDate)						ifTrue: [							html anchor								callback: [ self select: aDate ];								with: aDate dayOfMonth ]						ifFalse: [ html text: aDate dayOfMonth ] ] ] ]! !!WAMiniCalendar methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	html div		class: 'calendar';		with: [			html span				class: 'calendarCaption';				with: [ self renderMonthHeadingOn: html ].			html table: [				html tableRow					class: 'calendarTitle';						with: [						self weekDays do: [ :each |							html tableData: each ] ].				self month weeksDo: [ :week |					self renderRowForWeek: week on: html ] ].			self renderMonthNavigationOn: html.			html space; space.			self renderYearNavigationOn: html ]! !!WAMiniCalendar methodsFor: 'rendering' stamp: 'pmm 10/11/2006 19:09'!renderMonthHeadingOn: html	html form: [		html select			list: self months;			on: #month of: self;			labels: [:eachMonth | eachMonth name].		html textInput			maxLength: 4;			on: #year of: self.		html submitButton text: 'Refresh' ]! !!WAMiniCalendar methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderMonthNavigationOn: html	html span		class: 'calendarPrevious';		with: [			html anchor				callback: [self month: self month previous];				with: (self month previous name first: 3) ].	html space.	html span		class: 'calendarNext';		with: [			html anchor				callback: [self month: self month next];				with: (self month next name first: 3) ]! !!WAMiniCalendar methodsFor: 'rendering' stamp: 'pmm 9/11/2006 23:28'!renderRowForWeek: aWeek on: html	html tableRow: [		aWeek datesDo: [ :each | self renderCellForDate: each on: html ] ]! !!WAMiniCalendar methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderYearNavigationOn: html	html span		class: 'calendarPrevious';		with: [			html anchor				callback: [self year: self year - 1];				with: (self year - 1) ].	html space.	html span		class: 'calendarNext';		with: [			html anchor				callback: [self year: self year + 1];				with: (self year + 1) ]! !!WAMiniCalendar methodsFor: 'action' stamp: 'lr 12/28/2006 22:38'!select: aDate	self date: aDate.	selectBlock value: aDate! !!WAMiniCalendar methodsFor: 'accessing' stamp: 'avi 10/23/2003 17:39'!selectBlock: aBlock	selectBlock := aBlock! !!WAMiniCalendar methodsFor: 'accessing' stamp: 'lr 4/15/2007 19:58'!states	^ Array with: date with: month! !!WAMiniCalendar methodsFor: 'private' stamp: 'lr 12/28/2006 22:42'!weekDays	^ (1 to: 7) collect: [ :i | (Date nameOfDay: i) first: 3 ]! !!WAMiniCalendar methodsFor: 'accessing-delegated' stamp: 'dc 12/29/2005 11:44'!year	^ self month year! !!WAMiniCalendar methodsFor: 'accessing-delegated' stamp: 'pmm 9/11/2007 06:57'!year: anIntegerOrString	| year |	year := [anIntegerOrString asNumber] on: Error do: [:e | 1900].	self month: (Month month: self month monthIndex year: year)! !!WAMultiCounter class methodsFor: 'testing' stamp: 'avi 2/5/2004 12:58'!canBeRoot	^true! !!WAMultiCounter class methodsFor: 'accessing' stamp: 'mb 5/26/2006 12:30'!description	^'Multiple Seaside components on one page'! !!WAMultiCounter class methodsFor: 'initialization' stamp: 'lr 2/12/2007 21:39'!initialize	self registerAsApplication: 'examples/multicounter'! !!WAMultiCounter methodsFor: 'accessing' stamp: 'avi 4/15/2004 21:50'!children	^ counters! !!WAMultiCounter methodsFor: 'initialization' stamp: 'lr 2/20/2007 12:06'!initialize	super initialize.	counters := (1 to: 5) collect: [ :each | WACounter new ]! !!WAMultiCounter methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	counters		do: [ :each | html render: each ]		separatedBy: [ html horizontalRule ]! !!WANavigation methodsFor: 'initialize' stamp: 'lr 9/5/2007 11:20'!initialize	super initialize.	selection := WAValueHolder new! !!WANavigation methodsFor: 'query' stamp: 'mbany 4/14/2005 12:12'!labelForOption: anObject	^ anObject displayString! !!WANavigation methodsFor: 'initialize' stamp: 'avi 3/15/2004 16:27'!options	^ #()! !!WANavigation methodsFor: 'rendering' stamp: 'lr 6/6/2007 17:49'!renderContentOn: html	html div class: 'kalsey'; with: [		html div			class: 'navigation-options';			with: [ self renderOptionsOn: html ].		html div			class: 'navigation-content';			with: [ self renderSelectionOn: html ] ]! !!WANavigation methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderOptionsOn: html	html unorderedList		list: self options;		selected: self selection;		callback: [ :value | self select: value ];		labels: [ :each | self labelForOption: each ]! !!WANavigation methodsFor: 'rendering' stamp: 'avi 3/15/2004 16:13'!renderSelectionOn: html! !!WANavigation methodsFor: 'selection' stamp: 'lr 6/6/2007 17:54'!select: anObject	selection contents: anObject.	self selectionChanged! !!WANavigation methodsFor: 'selection' stamp: 'avi 3/15/2004 16:28'!selection	^ selection contents! !!WANavigation methodsFor: 'selection' stamp: 'lr 10/28/2007 14:42'!selectionChanged! !!WANavigation methodsFor: 'selection' stamp: 'lr 4/15/2007 19:57'!states	^ Array with: selection! !!WASimpleNavigation class methodsFor: 'example' stamp: 'lr 10/28/2007 14:42'!example	^self new		add: WACounter example label: 'Counter';		add: WAPath example label: 'Path';		select: 'Counter';		yourself! !!WASimpleNavigation methodsFor: 'behavior' stamp: 'avi 3/15/2004 19:24'!add: aComponent label: aString	components add: aString -> aComponent! !!WASimpleNavigation methodsFor: 'accessing' stamp: 'lr 6/6/2007 17:53'!children	^ Array with: self selectedComponent! !!WASimpleNavigation methodsFor: 'initialize' stamp: 'avi 3/15/2004 19:25'!initialize	super initialize.	components := OrderedCollection new! !!WASimpleNavigation methodsFor: 'accessing' stamp: 'lr 11/29/2004 16:28'!labels	"Return the tabs labels"	^ self options! !!WASimpleNavigation methodsFor: 'accessing' stamp: 'lr 6/6/2007 17:53'!options	^ components collect: [ :each | each key ]! !!WASimpleNavigation methodsFor: 'rendering' stamp: 'sd 11/28/2004 21:15'!renderSelectionOn: html	html render: self selectedComponent! !!WASimpleNavigation methodsFor: 'accessing' stamp: 'lr 6/6/2007 17:53'!selectedComponent	^ (components detect: [ :each | each key = self selection ] ifNone: [ ^ nil ]) value! !!WANavigationBar methodsFor: 'accessing' stamp: 'ab 5/30/2003 00:15'!actions	^ self target perform: actionsSelector! !!WANavigationBar methodsFor: 'accessing' stamp: 'ab 5/30/2003 00:15'!actionsSelector: aSymbol	actionsSelector := aSymbol! !!WANavigationBar methodsFor: 'initialize-release' stamp: 'mb 4/23/2006 15:27'!initialize	super initialize.	actionsSelector := #actions! !!WANavigationBar methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!owner: anObject	owner := anObject! !!WANavigationBar methodsFor: 'rendering' stamp: 'pmm 10/11/2006 18:32'!renderContentOn: html	self actions do: [ :symbol |		symbol numArgs = 0			ifTrue: [ self renderLink: symbol on: html ]			ifFalse: [ self renderInput: symbol on: html ] ]! !!WANavigationBar methodsFor: 'rendering' stamp: 'pmm 10/11/2006 18:34'!renderInput: aSymbol on: html	html form: [		html strong: aSymbol capitalized.		html space.		html textInput			callback: [ :value |				self target perform: aSymbol with: value ] ]! !!WANavigationBar methodsFor: 'rendering' stamp: 'pmm 10/11/2006 18:34'!renderLink: aSymbol on: html	html anchor		on: aSymbol of: self target.	html break! !!WANavigationBar methodsFor: 'accessing' stamp: 'pmm 10/11/2006 18:31'!target	^ owner activeComponent! !!WAParentChildTest methodsFor: 'actions' stamp: 'pmm 7/16/2007 20:06'!go	parent inform: 'Test green!!'! !!WAParentChildTest methodsFor: 'accessing' stamp: 'ab 5/12/2003 22:13'!parent: aComponent	parent := aComponent! !!WAParentChildTest methodsFor: 'rendering' stamp: 'lr 6/8/2008 17:05'!renderContentOn: html	html anchor		callback: [ self go ];		with: 'swap parent'! !!WAPath class methodsFor: 'example' stamp: 'lr 10/28/2007 14:42'!example	^self new		pushSegment: 123 name: 'xxx';		pushSegment: 456 name: 'yyy';		pushSegment: 789 name: 'zzz';		yourself! !!WAPath methodsFor: 'behavior' stamp: 'lr 10/28/2007 14:42'!choose: anAssociation	"Install a new stack of navigation from the old one and the specified association."	| newStack |	newStack := Array new writeStream.	stack do:		[:ea |		newStack nextPut: ea.		ea == anAssociation			ifTrue: [stack := newStack contents. ^ self]]! !!WAPath methodsFor: 'accessing' stamp: 'ab 5/31/2003 15:06'!currentSegment	^ stack isEmpty		ifTrue: [nil]		ifFalse: [stack last value]! !!WAPath methodsFor: 'initialize' stamp: 'lr 4/15/2007 19:55'!initialize	super initialize.	stack := #()! !!WAPath methodsFor: 'behavior' stamp: 'ab 5/31/2003 15:06'!pushSegment: anObject name: aString	stack := stack, (Array with: aString -> anObject)! !!WAPath methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	stack isEmpty ifTrue: [^ self].	html div		id: 'path';		with: [		stack allButLast do:			[:assoc |			html anchor callback: [self choose: assoc]; with: assoc key.			html text: ' >> '].		html strong: stack last key]! !!WAPath methodsFor: 'accessing' stamp: 'lr 4/15/2007 19:56'!states	^ Array with: self! !!WAReport methodsFor: 'initialize' stamp: 'lr 10/28/2007 14:42'!initialize	super initialize.	rows := #()! !!WAReport methodsFor: 'accessing' stamp: 'ab 10/26/2002 22:03'!rows: anArray	rows := anArray! !!WATableReport methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!chooseRow: aRow column: aColumn	aColumn chooseRow: aRow! !!WATableReport methodsFor: 'private' stamp: 'lr 7/12/2007 20:28'!colorForRowNumber: aNumber	^ rowColors at: ((aNumber - 1 // rowPeriod) \\ rowColors size) + 1 ifAbsent: ['white']! !!WATableReport methodsFor: 'accessing' stamp: 'ab 10/26/2002 22:29'!columns: anArray	columns := anArray! !!WATableReport methodsFor: 'accessing' stamp: 'lr 9/5/2007 11:21'!initialize	super initialize.	isReversed := false.	columns := #().	sortColumn := WAValueHolder new.	rowColors := #('white' 'lightyellow').	rowPeriod := 3! !!WATableReport methodsFor: 'testing' stamp: 'AC 1/31/2003 11:24'!isReversed	^ isReversed! !!WATableReport methodsFor: 'rendering' stamp: 'lr 11/16/2006 18:12'!renderColumn: aColumn row: aRow on: html	| text |	aColumn canRender ifTrue: [		^html tableData: [aColumn renderValue: aRow on: html]].	text := aColumn textForRow: aRow.	text isEmpty ifTrue: [ text := ' ' ].	html tableData: [		aColumn canChoose			ifFalse: [ html text: text ]			ifTrue: [				html anchor					callback: [ self chooseRow: aRow column: aColumn ];					with: text ] ]! !!WATableReport methodsFor: 'rendering' stamp: 'lr 11/16/2006 18:17'!renderContentOn: html	html table: [		self renderTableHeaderOn: html.		self renderRowsOn: html.		self renderTableFooterOn: html ]! !!WATableReport methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderFooterForColumn: aColumn on: html	html tableHeading: (aColumn totalForRows: rows)! !!WATableReport methodsFor: 'rendering' stamp: 'lr 11/16/2006 16:46'!renderHeaderForColumn: aColumn on: html	html tableHeading:  [		aColumn canSort			ifTrue: [				html anchor					callback: [self sortColumn: aColumn];					with: aColumn title]			ifFalse: [ html text: aColumn title ] ]! !!WATableReport methodsFor: 'rendering' stamp: 'pmm 9/30/2006 20:48'!renderRowNumber: index item: row on: html	html tableRow		style: 'background-color: ' , (self colorForRowNumber: index);		with: [			columns do: [ :each |				self renderColumn: each row: row on: html ] ]! !!WATableReport methodsFor: 'rendering' stamp: 'AC 1/31/2003 11:26'!renderRowsOn: html	self rows withIndexDo: [:row :i | self renderRowNumber: i item: row on: html ]! !!WATableReport methodsFor: 'rendering' stamp: 'pmm 9/30/2006 20:38'!renderTableFooterOn: html	html tableRow: [		columns do: [ :each |			self renderFooterForColumn: each on: html] ]! !!WATableReport methodsFor: 'rendering' stamp: 'pmm 9/30/2006 20:39'!renderTableHeaderOn: html	html tableRow: [			columns do: [ :each |				self renderHeaderForColumn: each on: html] ]! !!WATableReport methodsFor: 'state variables' stamp: 'DataCurator 04/24/2007 14:10'!reverse	isReversed := isReversed not! !!WATableReport methodsFor: 'accessing' stamp: 'ab 10/26/2002 22:04'!rowColors: colorArray	rowColors := colorArray! !!WATableReport methodsFor: 'accessing' stamp: 'ab 10/26/2002 22:04'!rowPeriod: aNumber	rowPeriod := aNumber! !!WATableReport methodsFor: 'accessing' stamp: 'AC 1/31/2003 11:46'!rows	| r |	self sortColumn ifNil: [^ rows].	r := self sortColumn sortRows: rows.	^ self isReversed ifTrue: [r reversed] ifFalse: [r]! !!WATableReport methodsFor: 'state variables' stamp: 'ab 1/16/2003 17:47'!sortColumn	^ sortColumn contents! !!WATableReport methodsFor: 'state variables' stamp: 'lr 10/28/2007 14:42'!sortColumn: anObject	isReversed := anObject = self sortColumn and: [isReversed not ].	sortColumn contents: anObject! !!WATableReport methodsFor: 'accessing' stamp: 'lr 4/15/2007 18:51'!states	^ Array with: sortColumn! !!WAScreenshot class methodsFor: 'accessing' stamp: 'avi 2/5/2004 12:57'!canBeRoot	^ true! !!WAScreenshot class methodsFor: 'accessing' stamp: 'lr 6/10/2007 20:26'!description	^ 'Squeak Screenshot'! !!WAScreenshot class methodsFor: 'initialization' stamp: 'lr 2/12/2007 21:53'!initialize	self registerAsApplication: 'tools/screenshot'! !!WAScreenshot methodsFor: 'accessing' stamp: 'pmm 9/20/2006 17:48'!buttonCode	^ button = #red		ifTrue: [ 4 ]		ifFalse: [			button = #blue				ifTrue: [ 2 ]				ifFalse: [ 1 ] ]! !!WAScreenshot methodsFor: 'actions' stamp: 'lr 10/28/2007 14:42'!click: aPoint	| event |	event := Sensor createMouseEvent.	event at: 3 put: aPoint x.	event at: 4 put: aPoint y.	event at: 5 put: self buttonCode.	Sensor processEvent: event.	event at: 5 put: 0.	Sensor processEvent: event.	button := #red! !!WAScreenshot methodsFor: 'accessing' stamp: 'pmm 9/20/2006 17:48'!form	^ zoom		ifFalse: [ Display copy ]		ifTrue: [ self topWindow imageForm ]! !!WAScreenshot methodsFor: 'initialize-release' stamp: 'pmm 9/20/2006 17:45'!initialize	super initialize.	button := #red.	zoom := false! !!WAScreenshot methodsFor: 'accessing' stamp: 'pmm 9/20/2006 17:49'!offset	^ zoom		ifTrue: [ self topWindow position ]		ifFalse: [ 0@0 ]! !!WAScreenshot methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	html table: [		html tableRow: [			html tableData: [ self renderMouseButtonOn: html ].			html tableData: [ self renderToggleZoomOn: html ].			html tableData: [ self renderToggleUIProcessOn: html ] ] ].	self renderMouseClickOn: html.	html horizontalRule! !!WAScreenshot methodsFor: 'rendering' stamp: 'pmm 4/26/2007 23:47'!renderMouseButtonOn: html	| group |	html form: [		html table: [			html tableRow: [				html tableData: 'Button: '.				group := html radioGroup.				#(red yellow blue) do: [ :each |					html tableData						style: 'background-color: ' , each;						with: [							group radioButton								selected: button = each;								callback: [ button := each] ] ].				html tableData: [					html submitButton text: 'Set'] ] ] ]! !!WAScreenshot methodsFor: 'rendering' stamp: 'pmm 6/21/2007 21:40'!renderMouseClickOn: html	html div: [		html map			id: #pictureMap;			title: 'Click here';			callback: [ :point | self click: point + self offset];			with: [				html image					form: self form ] ]! !!WAScreenshot methodsFor: 'rendering' stamp: 'lr 11/16/2006 18:12'!renderToggleUIProcessOn: html	html anchor callback: [self toggleUIProcess]; with: self toggleUIText! !!WAScreenshot methodsFor: 'rendering' stamp: 'pmm 11/1/2007 21:42'!renderToggleZoomOn: html	html anchor		callback: [ self toggleZoom ];		with: self toggleZoomText! !!WAScreenshot methodsFor: 'actions' stamp: 'pmm 11/1/2007 21:42'!toggleUIProcess	Project uiProcess isSuspended		ifTrue: [ Project uiProcess resume ]		ifFalse: [ Project uiProcess suspend ]! !!WAScreenshot methodsFor: 'accessing' stamp: 'pmm 11/1/2007 21:41'!toggleUIText	^ Project uiProcess isSuspended		ifFalse: [ 'Suspend UI Process' ]		ifTrue: [ 'Resume UI Process' ]! !!WAScreenshot methodsFor: 'actions' stamp: 'pmm 9/20/2006 17:47'!toggleZoom	zoom := zoom not! !!WAScreenshot methodsFor: 'accessing' stamp: 'pmm 11/1/2007 21:42'!toggleZoomText	^ zoom		ifTrue: [ 'Zoom out' ]		ifFalse: [ 'Zoom in' ]! !!WAScreenshot methodsFor: 'accessing' stamp: 'avi 2/5/2004 14:18'!topWindow	^ SystemWindow classPool at: #TopWindow! !!WASelection methodsFor: 'initialization' stamp: 'pmm 11/1/2007 21:15'!initialize	super initialize.	items := #().	labelBlock := [ :each | each displayString]! !!WASelection methodsFor: 'accessing' stamp: 'lr 1/7/2007 18:04'!items	^ items! !!WASelection methodsFor: 'accessing' stamp: 'avi 7/5/2004 20:24'!items: aCollection	items := aCollection! !!WASelection methodsFor: 'accessing' stamp: 'lr 1/7/2007 18:06'!labelBlock	^ labelBlock! !!WASelection methodsFor: 'accessing' stamp: 'avi 7/5/2004 20:24'!labelBlock: aBlock	labelBlock := aBlock! !!WASelection methodsFor: 'rendering' stamp: 'lr 1/7/2007 18:05'!renderContentOn: html	html unorderedList		list: self items;		labels: self labelBlock;		callback: [ :value | self answer: value ]! !!WAFileLibraryEditor methodsFor: 'rendering' stamp: 'lr 2/18/2007 12:41'!renderAddFileOn: html	html form multipart; with: [		html text: 'Add File: '.		html fileUpload on: #addFile of: self library.		html space.		html submitButton text: 'Add' ]! !!WAFileLibraryEditor methodsFor: 'rendering' stamp: 'pmm 8/14/2007 07:08'!renderContentOn: html	self renderHeadingsOn: html.	self renderAddFileOn: html.	self renderFilesOn: html.	self renderWriteToDiskOn: html.	self renderDoneOn: html! !!WAFileLibraryEditor methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderFile: fileName on: html	html tableData: [		html anchor			class: 'download';			url: (self urlFor: fileName);			with: fileName ].	html tableData: [		html anchor			callback: [ self library removeFile: fileName ];			with: 'remove'.		html space.		html anchor			callback: [ renamingFile := fileName ];			with: 'rename' ]! !!WAFileLibraryEditor methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderFilesOn: html	html table: [		self library filenames asSortedCollection do: [ :each |			html tableRow: [				renamingFile = each					ifTrue: [ self renderRenameFormForFile: each on: html ]					ifFalse: [ self renderFile: each on: html ] ] ] ]! !!WAFileLibraryEditor methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderRenameFormForFile: fileName on: html	html tableData colSpan: 2; with: [		html form: [			html textInput				value: fileName;				callback: [ :value | newName := value ].			html submitButton				callback: [					self library renameFile: fileName to: newName.					renamingFile := nil ];			 	text: 'rename'.			html cancelButton				callback: [ renamingFile := nil ];				text: 'cancel' ] ]! !!WAFileLibraryEditor methodsFor: 'path' stamp: 'pmm 8/17/2007 07:00'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: self library name! !!WAStringLibraryEditor methodsFor: 'accessing' stamp: 'lr 2/18/2007 12:36'!library	^ library! !!WAStringLibraryEditor methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!library: aLibrary	library := aLibrary! !!WAStringLibraryEditor methodsFor: 'rendering' stamp: 'pmm 8/14/2007 07:07'!renderContentOn: html	self renderHeadingsOn: html.	self renderFilesOn: html.	self renderWriteToDiskOn: html.	self renderDoneOn: html! !!WAStringLibraryEditor methodsFor: 'rendering' stamp: 'lr 2/18/2007 12:36'!renderDoneOn: html	html form: [		html submitButton			callback: [ self answer ];			text: 'close' ]! !!WAStringLibraryEditor methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderFilesOn: html	html unorderedList: [		self library filenames			do: [:each |				html listItem: [					html anchor					class: 'download';						url: (self urlFor: each);						with: each ] ] ]! !!WAStringLibraryEditor methodsFor: 'rendering' stamp: 'pmm 8/14/2007 07:12'!renderHeadingsOn: html	html heading: self library name! !!WAStringLibraryEditor methodsFor: 'rendering' stamp: 'pmm 8/14/2007 07:21'!renderWriteToDiskOn: html	html form: [		html submitButton			callback: [ self library deployFiles ];			title: 'write all the files to disk';			text: 'write to disk' ]! !!WAStringLibraryEditor methodsFor: 'private' stamp: 'pmm 5/23/2007 22:28'!urlFor: aFilename	^ self library urlForFile: aFilename! !!WADecorationTask methodsFor: 'running' stamp: 'lr 5/31/2008 10:36'!go	self call: component1.	self call: component2! !!WADecorationTask methodsFor: 'initialize-release' stamp: 'lr 5/31/2008 15:53'!initialize	super initialize.	component1 := WAFormDialog new		addMessage: 'Step 1';		yourself.	component2 := WAFormDialog new		addMessage: 'Step 2';		yourself! !!WADecorationTask methodsFor: 'initialize-release' stamp: 'lr 5/31/2008 17:46'!updateStates: aSnapshot	super updateStates: aSnapshot.	component1 visiblePresentersDo: [ :each | each updateStates: aSnapshot ].	component2 visiblePresentersDo: [ :each | each updateStates: aSnapshot ]! !!WAConvenienceTest methodsFor: 'controlling' stamp: 'lr 10/28/2007 14:42'!chooseCheese	cheese := self		chooseFrom: #('Greyerzer' 'Tilsiter' 'Sbrinz')		caption: 'What''s your favorite Cheese?'.	cheese isNil ifTrue: [ self chooseCheese ]! !!WAConvenienceTest methodsFor: 'controlling' stamp: 'lr 10/28/2007 14:42'!confirmCheese	^self confirm: 'Is ', cheese,  ' your favorite cheese?'! !!WAConvenienceTest methodsFor: 'controlling' stamp: 'pmm 6/30/2007 12:24'!go	[ self chooseCheese.	  self confirmCheese ] whileFalse.	self informCheese! !!WAConvenienceTest methodsFor: 'controlling' stamp: 'lr 10/28/2007 14:42'!informCheese	self inform: 'Your favorite cheese is ', cheese, '.'! !!WAExceptionTest methodsFor: 'processing' stamp: 'pmm 11/1/2007 21:32'!go	[ (self confirm: 'Raise an exception?')		ifTrue: [ self error: 'foo' ] ]			on: Error			do: [ :error | self inform: 'Caught: ', error description ]! !!WANestedTransaction methodsFor: 'processing' stamp: 'lr 10/28/2007 14:42'!go	self inform: 'Before parent txn'.	self isolate:			[self inform: 'Inside parent txn'.			self isolate: [self inform: 'Inside child txn'].			self inform: 'Outside child txn'].	self inform: 'Outside parent txn'! !!WATask methodsFor: 'decorations' stamp: 'avi 3/28/2004 20:50'!decoration: oldDecoration shouldWrap: newDecoration	^ (oldDecoration isGlobal and: [newDecoration isGlobal not])		or: [oldDecoration isLocal and: [newDecoration isDelegation]]! !!WATask methodsFor: 'processing' stamp: 'jf 11/10/2003 16:13'!go	self subclassResponsibility! !!WATask methodsFor: 'processing' stamp: 'lr 8/20/2007 21:38'!updateRoot: aHtmlRoot	| callbacks url |	callbacks := WACallbackRegistry context: aHtmlRoot context owner: self.	url := aHtmlRoot context actionUrl withParameter: (callbacks registerActionCallback: [ [ self answer: self go ] repeat ]).	self session redirectTo: url! !!WATaskTest methodsFor: 'rendering' stamp: 'lr 2/25/2007 23:10'!renderContentOn: html	html anchor		callback: [ self call: WAExceptionTest new ];		with: 'go'! !!WATimeSelector methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!date: aDate	second := aDate dayOfMonth.	hour := aDate monthIndex.	minute := aDate year! !!WATimeSelector methodsFor: 'accessing' stamp: 'jlr 4/4/2006 23:37'!days	^ 1 to: 31! !!WATimeSelector methodsFor: 'accessing' stamp: 'jlr 4/4/2006 23:48'!endHour	^endHour! !!WATimeSelector methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!endHour: anInteger	endHour := anInteger! !!WATimeSelector methodsFor: 'accessing' stamp: 'pmm 10/11/2006 18:10'!hour	^hour! !!WATimeSelector methodsFor: 'accessing' stamp: 'pmm 10/11/2006 18:10'!hour: anObject	^hour := anObject! !!WATimeSelector methodsFor: 'initialize-release' stamp: 'mb 5/6/2006 16:10'!initialize	super initialize.	startHour := 0.	endHour := 23.	self time: Time midnight! !!WATimeSelector methodsFor: 'accessing' stamp: 'pmm 10/11/2006 18:10'!minute	^minute! !!WATimeSelector methodsFor: 'accessing' stamp: 'pmm 10/11/2006 18:10'!minute: anObject	^minute := anObject! !!WATimeSelector methodsFor: 'private' stamp: 'pmm 10/2/2006 21:13'!privateIsValidSecond: theSecond hourNumber: theHour minuteNumber: theMinute	^ (theHour between: 0 and: 23)		and: [ theMinute between: 0 and: 59 ]		and: [ theSecond between: 0 and: 59 ]! !!WATimeSelector methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	html select		list: (0 to: 23);		on: #hour of: self.	html  select		list: (0 to: 59);		on: #minute of: self.	html  select		list: (0 to: 59);		on: #second of: self.	self timeIsValid ifFalse: [self renderValidationErrorOn: html]! !!WATimeSelector methodsFor: 'rendering' stamp: 'pmm 10/11/2006 18:23'!renderValidationErrorOn: html	html span		class: 'error';		with: 'invalid time'! !!WATimeSelector methodsFor: 'accessing' stamp: 'pmm 10/11/2006 18:10'!second	^second! !!WATimeSelector methodsFor: 'accessing' stamp: 'pmm 10/11/2006 18:10'!second: anObject	^second := anObject! !!WATimeSelector methodsFor: 'accessing' stamp: 'jlr 4/4/2006 23:48'!startHour	^startHour! !!WATimeSelector methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!startHour: anInteger	startHour := anInteger! !!WATimeSelector methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!time	(self		privateIsValidSecond: second		hourNumber: hour		minuteNumber: minute) ifFalse: [self error: 'Invalid time'].	^self timeClass		hour: hour		minute: minute		second: second! !!WATimeSelector methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!time: aTime	second := aTime second.	hour := aTime hour.	minute := aTime minute! !!WATimeSelector methodsFor: 'private' stamp: 'pmm 10/22/2006 07:22'!timeClass	^Time! !!WATimeSelector methodsFor: 'testing' stamp: 'jlr 4/4/2006 23:46'!timeIsValid	[self time] on: Error do: [:e | ^ false].	^ true! !!WAMemory methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!buildTable	^ WATableReport new		rowPeriod: 1;		rowColors: #( 'lightgrey' 'white' );		rows: sizes keys asSortedCollection;		columns: (Array			with: (WAReportColumn selector: #yourself title: 'Class')			with: (WAReportColumn new				title: 'Instances';				valueBlock: [ :each | instances at: each ];				yourself)			with: (WAReportColumn new				title: 'Total Size';				valueBlock: [ :each | (sizes at: each) asStringWithCommas ];				yourself));		yourself! !!WAMemory methodsFor: 'accessing' stamp: 'avi 2/10/2004 16:15'!children	^ Array with: table! !!WAMemory methodsFor: 'initialization' stamp: 'lr 10/28/2007 14:42'!initialize	| segment results |	super initialize.	segment := ImageSegment new		copyFromRoots: (Array with: self session)		sizeHint: 100000.	results := segment doSpaceAnalysis.	instances := results first.	sizes := results second.	table := self buildTable! !!WAMemory methodsFor: 'rendering' stamp: 'lr 11/20/2006 23:40'!renderContentOn: html	html strong: self totalInstances displayString, ' instances in ', self totalSizeString.	html render: table! !!WAMemory methodsFor: 'accessing' stamp: 'pmm 6/30/2007 00:01'!totalInstances	^ instances detectSum: [ :each | each ]! !!WAMemory methodsFor: 'accessing' stamp: 'pmm 6/30/2007 00:01'!totalSize	^ sizes detectSum: [ :each | each ]! !!WAMemory methodsFor: 'accessing' stamp: 'pmm 6/30/2007 00:04'!totalSizeString	|size unit|	size := self totalSize.	unit := 'bytes'.	size > 1024 ifTrue: [		size := size / 1024.		unit := 'KiB'.		size > 1024 ifTrue: [			size := size / 1024.			unit := 'MiB' ] ].	^ (size printShowingDecimalPlaces: 1), ' ', unit! !!WAProfiler methodsFor: 'rendering' stamp: 'pmm 1/26/2007 21:34'!children	^Array with: self root! !!WAProfiler methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!profileSendsDuring: aBlock	| newPage report |	newPage := Character value: 12.	Processor activeProcess priority: 20.	Smalltalk garbageCollectMost.	report := String streamContents: [ :stream |		MessageTally new			spyEvery: 1			on: [ aBlock value. Smalltalk garbageCollectMost ];			report: stream ].	"the message tally report has an unprintable character (new page) before the leaves	we need to remove it"	report withIndexDo: [ :each :index |		each = newPage			ifTrue: [ report at: index put: Character space ] ].	^report! !!WAProfiler methodsFor: 'rendering' stamp: 'pmm 6/30/2007 00:08'!renderContentOn: html	| profile |	profile := self profileSendsDuring: [ html render: self root ].	html horizontalRule.	html preformatted: profile! !!WATool methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!root	"Answer the root component of the application."	^ root! !!WATool methodsFor: 'accessing' stamp: 'lr 11/20/2006 23:35'!root: aComponent	root := aComponent! !!WAToolFrame class methodsFor: 'instance-creation' stamp: 'lr 5/11/2007 00:49'!on: aComponent	^ self new root: aComponent! !!WAToolFrame methodsFor: 'accessing' stamp: 'lr 5/11/2007 00:48'!children	^ Array with: self root! !!WAToolFrame methodsFor: 'plugin-deprecation' stamp: 'lr 6/5/2007 21:54'!clearDeprecated	deprecated := Set new! !!WAToolFrame methodsFor: 'plugin-deprecation' stamp: 'lr 11/21/2006 00:05'!deprecated	^ deprecated! !!WAToolFrame methodsFor: 'initialization' stamp: 'lr 9/5/2007 11:48'!initialize	super initialize.	self clearDeprecated.	showHalos := WAValueHolder with: false! !!WAToolFrame methodsFor: 'accessing' stamp: 'lr 5/11/2007 00:47'!plugins	^ plugins! !!WAToolFrame methodsFor: 'processing' stamp: 'lr 6/5/2007 21:47'!processCallbackStream: aCallbackStream	processTime := Time millisecondClockValue.	self withDeprecatedHandlerDo: [ super processCallbackStream: aCallbackStream ]! !!WAToolFrame methodsFor: 'plugin-timeing' stamp: 'lr 5/11/2007 00:45'!processTime	^ processTime! !!WAToolFrame methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderChildOn: html	self showHalos		ifTrue: [ html context debugMode ].	processTime := processTime isNil		ifTrue: [ 0 ]		ifFalse: [ Time millisecondClockValue - processTime ].	renderTime := Time millisecondsToRun: [		self withDeprecatedHandlerDo: [			html render: self root ] ].	html context clearMode! !!WAToolFrame methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	self renderChildOn: html.	self renderToolbarOn: html! !!WAToolFrame methodsFor: 'plugin-timeing' stamp: 'lr 5/11/2007 00:45'!renderTime	^ renderTime! !!WAToolFrame methodsFor: 'rendering' stamp: 'lr 5/22/2007 17:50'!renderToolbarOn: html	html div id: 'toolbar'; with: [		self plugins			do: [ :each | html render: each ]			separatedBy: [ html text: ' ' ] ].	processTime := nil! !!WAToolFrame methodsFor: 'accessing' stamp: 'lr 5/11/2007 00:47'!root	^ root! !!WAToolFrame methodsFor: 'accessing' stamp: 'lr 5/11/2007 14:01'!root: aComponent	root := aComponent.	plugins := WAToolPlugin allSubclassesOn: self root for: self! !!WAToolFrame methodsFor: 'accessing' stamp: 'lr 6/5/2007 21:46'!showHalos	^ showHalos contents! !!WAToolFrame methodsFor: 'accessing' stamp: 'lr 4/15/2007 18:46'!states	^ Array with: showHalos! !!WAToolFrame methodsFor: 'plugin-halos' stamp: 'lr 5/11/2007 00:48'!toggleHalos	WAHalo initialize.	showHalos contents: showHalos contents not! !!WAToolFrame methodsFor: 'plugin-deprecation' stamp: 'pmm 11/1/2007 21:33'!withDeprecatedHandlerDo: aBlock	^ aBlock		on: WADeprecatedApi		do: [ :notification |			deprecated add: notification messageText.			notification resume ]! !!WATrail class methodsFor: 'instance creation' stamp: 'ab 8/26/2003 15:27'!on: anObject	^ self new root: anObject! !!WATrail methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	| last selected |	last := nil.	html unorderedList		class: 'trail';		with: [			root visiblePresentersDo: [ :each |				(each isDecoration and: [each isDelegation]) ifTrue: [					(each component respondsTo: #trailName) ifTrue: [						last := each.						html listItem: [							html anchor								callback: [ each remove ];								with: each component trailName ] ] ] ].			selected := last ifNil: [ root ] ifNotNil: [ last delegate ].			(selected respondsTo: #trailName) ifTrue: [				html listItem: selected trailName ] ]! !!WATrail methodsFor: 'accessing' stamp: 'ab 8/26/2003 15:27'!root: anObject	root := anObject! !!WATrail methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!style^'	ul.trail {		margin-left: 0;		padding-left: 0;		display: inline;		border: none;	}	ul.trail li {        	margin-left: 0;        	padding-left: 2px;        	border: none;        	list-style: none;        	display: inline;	}	ul.trail  li:before {        content: "\0020 \0020 \0020 \00BB \0020";        }	ul.trail li.first:before {        content: " ";        }'! !!WATree class methodsFor: 'examples' stamp: 'lr 3/27/2006 11:13'!exampleCollectionClasses	^ self new		root: Collection;		labelBlock: [ :class | class name ];		childrenBlock: [ :class | class subclasses ];		yourself! !!WATree class methodsFor: 'examples' stamp: 'lr 2/20/2007 14:02'!exampleObjectExplorer	^ self new		root: 'dispatcher' -> WADispatcher default;		labelBlock: [ :assoc | assoc key displayString , ': ' , assoc value printString ];		childrenBlock: [ :assoc | assoc value inspectorFields ];		yourself! !!WATree class methodsFor: 'instance-creation' stamp: 'lr 3/27/2006 11:08'!root: anObject	^ self new		root: anObject;		yourself! !!WATree class methodsFor: 'instance-creation' stamp: 'lr 3/27/2006 11:09'!root: anObject path: anArray	^ (self root: anObject)		expandAll: anArray;		selected: anArray last;		yourself! !!WATree methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!canSelect: aNode	^self selectBlock notNil		and: [ self canSelectBlock isNil			or: [ self canSelectBlock value: aNode ] ]! !!WATree methodsFor: 'accessing-configuration' stamp: 'lr 2/19/2005 12:11'!canSelectBlock	^canSelectBlock! !!WATree methodsFor: 'accessing-configuration' stamp: 'lr 3/7/2005 17:40'!canSelectBlock: aBlock	canSelectBlock := aBlock! !!WATree methodsFor: 'accessing-configuration' stamp: 'lr 2/19/2005 11:19'!childrenBlock	^childrenBlock! !!WATree methodsFor: 'accessing-configuration' stamp: 'lr 2/19/2005 11:20'!childrenBlock: aBlock	childrenBlock := aBlock! !!WATree methodsFor: 'accessing-nodes' stamp: 'lr 3/27/2006 09:12'!childrenOf: aNode	| children |	children := self childrenBlock value: aNode.	^ children ifNil: [ Array new ]! !!WATree methodsFor: 'actions' stamp: 'lr 10/28/2007 14:42'!collapse: aNode	expanded remove: aNode! !!WATree methodsFor: 'actions' stamp: 'lr 10/28/2007 14:42'!expand: aNode	expanded add: aNode! !!WATree methodsFor: 'actions' stamp: 'lr 10/28/2007 14:42'!expandAll: aCollection	expanded addAll: aCollection! !!WATree methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!hasChildren: aNode	^(self childrenOf: aNode)		isEmpty not! !!WATree methodsFor: 'initialization' stamp: 'lr 4/15/2007 19:56'!initialize	super initialize.	expanded := IdentitySet new.	self selectBlock: [ :node | self answer: node ].	self childrenBlock: [ :node | Array new ].	self labelBlock: [ :node | node displayString ]! !!WATree methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!isExpanded: aNode	^expanded includes: aNode! !!WATree methodsFor: 'accessing-configuration' stamp: 'lr 2/19/2005 11:19'!labelBlock	^labelBlock! !!WATree methodsFor: 'accessing-configuration' stamp: 'lr 2/19/2005 11:20'!labelBlock: aBlock	labelBlock := aBlock! !!WATree methodsFor: 'accessing-nodes' stamp: 'lr 10/28/2007 14:42'!labelOf: aNode	^self labelBlock value: aNode! !!WATree methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	self renderTreeOn: html! !!WATree methodsFor: 'rendering-nodes' stamp: 'pmm 9/22/2006 23:27'!renderNode: aNode on: html	html listItem: [		self renderNodeButton: aNode on: html.		self renderNodeLabel: aNode on: html.		self renderNodeChildren: aNode on: html ]! !!WATree methodsFor: 'rendering-nodes' stamp: 'lr 10/28/2007 14:42'!renderNodeButton: aNode on: html	| isExpanded |	html span		class: 'button';		with: [			(self hasChildren: aNode) ifTrue: [				isExpanded := self isExpanded: aNode.				self					renderNodeButtonLink: aNode					action: (MessageSend						receiver: self						selector: (isExpanded							ifTrue: [ #collapse: ]							ifFalse: [ #expand: ])						argument: aNode)					text: (isExpanded						ifTrue: [ '-' ]						ifFalse: [ '+' ])					on: html ] ]! !!WATree methodsFor: 'rendering-nodes' stamp: 'pmm 9/22/2006 23:24'!renderNodeButtonLink: aNode action: aBlock text: anObject on: html	html anchor callback: aBlock; with: anObject! !!WATree methodsFor: 'rendering-nodes' stamp: 'lr 10/28/2007 14:42'!renderNodeChildren: aNode on: html	| children |	children := self childrenOf: aNode.	children isEmpty ifFalse: [		(self isExpanded: aNode) ifTrue: [			html unorderedList: [				children do: [ :each |					self renderNode: each on: html ] ] ] ]! !!WATree methodsFor: 'rendering-nodes' stamp: 'lr 10/28/2007 14:42'!renderNodeLabel: aNode on: html	| label |	html span		class: 'label';		class: (self selected == aNode			ifTrue: [ 'active' ]			ifFalse: [ 'inactive' ]);		with: [			label := self labelOf: aNode.			(self canSelect: aNode)				ifFalse: [ html render: label ]				ifTrue: [					self						renderNodeLabelLink: aNode						action: (MessageSend							receiver: self							selector: #select:							argument: aNode)						text: label on: html ] ]! !!WATree methodsFor: 'rendering-nodes' stamp: 'pmm 9/22/2006 23:28'!renderNodeLabelLink: aNode action: aBlock text: anObject on: html	html anchor callback: aBlock; with: anObject! !!WATree methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderTreeOn: html	html unorderedList: [ self renderNode: self root on: html ]! !!WATree methodsFor: 'accessing' stamp: 'lr 2/19/2005 11:18'!root	^root! !!WATree methodsFor: 'accessing' stamp: 'lr 2/19/2005 11:18'!root: aNode	root := aNode! !!WATree methodsFor: 'actions' stamp: 'lr 10/28/2007 14:42'!select: aNode	(self canSelect: aNode) ifTrue: [		self selected: aNode.		self selectBlock isNil			ifFalse: [ self selectBlock value: aNode ] ]! !!WATree methodsFor: 'accessing-configuration' stamp: 'lr 2/19/2005 11:21'!selectBlock	^selectBlock! !!WATree methodsFor: 'accessing-configuration' stamp: 'lr 2/19/2005 11:21'!selectBlock: aBlock	selectBlock := aBlock! !!WATree methodsFor: 'accessing' stamp: 'lr 2/19/2005 11:19'!selected	^selected! !!WATree methodsFor: 'accessing' stamp: 'lr 2/19/2005 11:19'!selected: aNode	selected := aNode! !!WATree methodsFor: 'accessing' stamp: 'lr 4/15/2007 19:56'!states	^ Array with: expanded! !!WAVNCController class methodsFor: 'accessing' stamp: 'lr 2/12/2007 21:53'!canBeRoot	^ true! !!WAVNCController class methodsFor: 'accessing' stamp: 'lr 6/10/2007 20:26'!description	^ 'VNC Controller'! !!WAVNCController class methodsFor: 'initialization' stamp: 'pmm 3/6/2007 21:44'!initialize	(Smalltalk hasClassNamed: #RFBServer)		ifTrue: [ self registerAsAuthenticatedApplication: 'tools/vnc' ]! !!WAVNCController methodsFor: 'accessing' stamp: 'pmm 3/6/2007 21:57'!currentDisplay	^ self serverInstance displayNumber displayString! !!WAVNCController methodsFor: 'testing' stamp: 'pmm 3/6/2007 21:54'!isServerRunning	^self serverInstance notNil! !!WAVNCController methodsFor: 'accessing' stamp: 'lr 11/21/2006 00:02'!project	^ Smalltalk classNamed: #Project! !!WAVNCController methodsFor: 'rendering' stamp: 'pmm 3/6/2007 21:54'!renderContentOn: html	html heading: 'VNC Server'.	self isServerRunning		ifTrue: [ self renderStopOn: html ]		ifFalse: [ self renderStartOn: html ].	html heading: 'UI Process'.	self project uiProcess isSuspended		ifFalse: [ self renderSuspendOn: html ]		ifTrue: [ self renderResumeOn: html ]! !!WAVNCController methodsFor: 'rendering' stamp: 'lr 11/21/2006 00:01'!renderResumeOn: html	html form: [		html text: 'UI Process is suspended. '.		html submitButton			callback: [ self resume ];			text: 'Resume' ]! !!WAVNCController methodsFor: 'rendering' stamp: 'lr 11/20/2006 23:58'!renderStartOn: html	html form: [		html text: 'Start VNC on display: '.		html textInput			value: 0;			callback: [ :value | self startOn: value asNumber ].		html submitButton			text: 'Start' ]! !!WAVNCController methodsFor: 'rendering' stamp: 'lr 11/21/2006 00:01'!renderStopOn: html	html form: [		html text: 'Stop VNC (running on ', self currentDisplay, ') '.		html submitButton			callback: [ self stop ];			text: 'Stop' ]! !!WAVNCController methodsFor: 'rendering' stamp: 'lr 11/21/2006 00:01'!renderSuspendOn: html	html form: [		html text: 'UI Process is running. '.		html submitButton			callback: [ self suspend ];			text: 'Suspend' ]! !!WAVNCController methodsFor: 'actions' stamp: 'lr 11/21/2006 00:02'!resume	self project uiProcess resume! !!WAVNCController methodsFor: 'accessing' stamp: 'pmm 3/6/2007 21:51'!serverClass	^ Smalltalk classNamed: #RFBServer! !!WAVNCController methodsFor: 'accessing' stamp: 'pmm 3/6/2007 21:53'!serverInstance	^ self serverClass server! !!WAVNCController methodsFor: 'actions' stamp: 'pmm 3/6/2007 21:56'!startOn: aNumber	self resume.	self serverClass start: aNumber! !!WAVNCController methodsFor: 'actions' stamp: 'pmm 3/6/2007 21:56'!stop	self serverClass stop! !!WAVNCController methodsFor: 'actions' stamp: 'lr 11/21/2006 00:02'!suspend	self project uiProcess suspend.	self stop! !!WAVersionUploader class methodsFor: 'accessing' stamp: 'avi 2/5/2004 12:57'!canBeRoot	^ true! !!WAVersionUploader class methodsFor: 'accessing' stamp: 'lr 6/10/2007 20:27'!description	^ 'Monticello Browser'! !!WAVersionUploader class methodsFor: 'initialization' stamp: 'lr 2/12/2007 21:52'!initialize	self registerAsApplication: 'tools/versionuploader'! !!WAVersionUploader methodsFor: 'actions' stamp: 'pmm 7/14/2008 20:41'!loadFile	| reader version |	file ifNil: [ ^self ].	reader := MCVersionReader readerClassForFileNamed: file fileName.	reader ifNil: [self inform: file fileName, ' is not in a known format'].	version := reader versionFromStream: file contents asByteArray readStream.	version load! !!WAVersionUploader methodsFor: 'actions' stamp: 'pmm 7/14/2008 20:41'!loadURL	| stream version |	url asUrl fileName ifEmpty: [ ^self ].	stream := url asUrl retrieveContents content asByteArray readStream .	version := (MCVersionReader readerClassForFileNamed: url) versionFromStream: stream.	version load! !!WAVersionUploader methodsFor: 'rendering' stamp: 'lr 7/13/2008 16:08'!newVersion: aWorkingCopy	| version stream |	version := [ aWorkingCopy newVersion ]		on: MCVersionNameAndMessageRequest		do: [ :request | request resume: (Array with: request suggestedName with: '') ].	stream := RWBinaryOrTextStream on: String new.	version fileOutOn: stream.	self session returnResponse: (WAResponse new		attachmentWithFileName: version fileName;		contentType: 'application/octet-stream';		nextPutAll: stream contents;		yourself)! !!WAVersionUploader methodsFor: 'rendering' stamp: 'pmm 7/14/2008 20:59'!renderContentOn: html	html strong: 'Loaded versions:'.	html unorderedList		with: [ self sortedWorkingCopies do: [:ea |			html listItem: [				html anchor callback: [self newVersion: ea]; with: 'Save'.				html space.				html text: ea description ] ] ].	html form		multipart;		with: [			html strong: 'Load version from file: '.			html break.			html fileUpload callback: [:f | file := f].			html space.			html submitButton callback: [self loadFile]; text: 'Load'.	].	html form		with: [			html strong: 'Load version from URL: '.			html break.			html textInput size: 60; value: 'http://'; callback: [:u | url := u].			html space.			html submitButton callback: [self loadURL]; text: 'Load'.	].	html anchor callback: [self saveImage]; with: 'Save Image'! !!WAVersionUploader methodsFor: 'actions' stamp: 'pmm 1/26/2007 22:55'!saveImage	SmalltalkImage current snapshot: true andQuit: false! !!WAVersionUploader methodsFor: 'accessing' stamp: 'pmm 7/14/2008 20:58'!sortedWorkingCopies	^(SortedCollection sortBlock: [:a :b | a description < b description])		addAll: MCWorkingCopy allManagers;		yourself! !!WAWalkback class methodsFor: 'instance-creation' stamp: 'lr 6/5/2007 20:43'!exception: anException	^ self new initializeWithException: anException! !!WAWalkback methodsFor: 'accessing' stamp: 'lr 6/5/2007 19:33'!exception	^ exception! !!WAWalkback methodsFor: 'accessing' stamp: 'lr 6/5/2007 20:43'!frames	^ frames first: limit! !!WAWalkback methodsFor: 'initialization' stamp: 'lr 6/8/2007 10:50'!initializeWithException: anException	| context |	exception := anException.	context := anException signalerContext.	frames := OrderedCollection new.	[ context isNil ] whileFalse: [		frames add: context.		context := context sender ].	limit := 5 min: frames size! !!WAWalkback methodsFor: 'rendering' stamp: 'lr 6/5/2007 21:17'!renderContentOn: html	self renderHeadingOn: html.	self renderToolsOn: html.	self renderExceptionOn: html.	self renderStackOn: html! !!WAWalkback methodsFor: 'rendering' stamp: 'lr 6/5/2007 21:18'!renderExceptionOn: html	| problems |	problems := self exception possibleCauses.	problems isEmpty ifTrue: [ ^ self ].	html heading level: 3; with: 'Possible Causes'.	html unorderedList list: problems! !!WAWalkback methodsFor: 'rendering' stamp: 'lr 6/5/2007 21:01'!renderHeadingOn: html	html heading level: 1; with: 'Seaside Walkback'.	html heading level: 2; with: self exception description! !!WAWalkback methodsFor: 'rendering-stack' stamp: 'lr 6/10/2007 20:16'!renderObject: anObject labelled: aString on: html	html definitionTerm: [		html anchor			callback: [ (WAInspectorPlugin on: anObject for: self) execute ];			with: aString ].	html definitionData: (self safePrintString: anObject)! !!WAWalkback methodsFor: 'rendering-stack' stamp: 'lr 6/24/2009 09:28'!renderStackFrame: aContext on: html	html definitionList: [		self			renderObject: aContext			labelled: 'thisContext' on: html.		self			renderObject: aContext receiver			labelled: 'self' on: html.		SeasidePlatformSupport 			tempsAndValuesIn: aContext			do: [ :name :object |				self 					renderObject: object					labelled: name					on: html ] ]! !!WAWalkback methodsFor: 'rendering' stamp: 'lr 6/5/2007 21:18'!renderStackOn: html	html heading level: 3; with: 'Stack Trace'.	html orderedList: [		self frames do: [ :each |			html listItem: [				self renderStackFrame: each on: html ] ] ]! !!WAWalkback methodsFor: 'rendering' stamp: 'pmm 7/19/2007 23:46'!renderToolsOn: html	html paragraph: [		html anchor			callback: [ self answer: true ];			title: 'Open a debugger in your IDE and block until you hit "Proceed"';			with: 'Debug'.		self exception isResumable ifTrue: [			html space.			html anchor				callback: [ self answer: false ];				with: 'Proceed' ].		limit < frames size ifTrue: [			html space.			html anchor				callback: [ limit := frames size ];				with: 'Full Stack' ] ]! !!WAWalkback methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!safePrintString: anObject	^ [ anObject printStringLimitedTo: 100 ]		on: Error		do: [ :err | 'unprintable ' , anObject class name ]! !!WAWalkback methodsFor: 'updating' stamp: 'lr 6/5/2007 21:06'!updateRoot: aHtmlRoot	super updateRoot: aHtmlRoot.	aHtmlRoot title: self exception description.	aHtmlRoot bodyAttributes addClass: 'walkback'.	WADispatcherFiles default updateRoot: aHtmlRoot! !!WAAnswerHandler methodsFor: 'accessing' stamp: 'avi 6/2/2004 21:59'!block: aBlock	block := aBlock! !!WAAnswerHandler methodsFor: 'processing' stamp: 'avi 6/22/2004 11:03'!handleAnswer: anObject continueWith: aBlock	block value: anObject! !!WABasicAuthentication methodsFor: 'accessing' stamp: 'avi 2/2/2004 13:03'!authenticator: anAuthenticator	authenticator := anAuthenticator! !!WABasicAuthentication methodsFor: 'testing' stamp: 'avi 3/28/2004 20:51'!isGlobal	^ true! !!WABasicAuthentication methodsFor: 'processing' stamp: 'lr 8/20/2007 23:41'!processChildCallbacks: aStream	(self verifyRequest: self session currentRequest)		ifTrue: [ super processChildCallbacks: aStream ]		ifFalse: [ self respondWithChallenge ]! !!WABasicAuthentication methodsFor: 'accessing' stamp: 'avi 3/22/2004 00:04'!realm	^ realm ifNil: [self session application basePath]! !!WABasicAuthentication methodsFor: 'accessing' stamp: 'avi 2/5/2004 13:52'!realm: aString	realm := aString! !!WABasicAuthentication methodsFor: 'processing' stamp: 'avi 5/19/2004 14:16'!respondWithChallenge	self session returnResponse: (WAResponse basicAuthWithRealm: self realm)! !!WABasicAuthentication methodsFor: 'processing' stamp: 'lr 8/20/2007 23:42'!updateRoot: aStream	(self verifyRequest: self session currentRequest)		ifTrue: [ super updateRoot: aStream ]		ifFalse: [ self respondWithChallenge ]! !!WABasicAuthentication methodsFor: 'processing' stamp: 'lr 8/20/2007 23:41'!verifyRequest: aRequest	^ authenticator verifyPassword: aRequest password forUser: aRequest user! !!WADecoration methodsFor: 'convenience' stamp: 'lr 10/28/2007 14:42'!asComponent	^ self component! !!WADecoration methodsFor: 'accessing' stamp: 'avi 3/27/2004 22:13'!component	^ self owner isDecoration		ifTrue: [self owner component]		ifFalse: [self owner]! !!WADecoration methodsFor: 'call/answer' stamp: 'avi 6/22/2004 11:02'!handleAnswer: anObject	(self owner handleAnswer: anObject) ifFalse:		[self handleAnswer: anObject continueWith: [^ false]].	^ true! !!WADecoration methodsFor: 'processing' stamp: 'avi 6/22/2004 11:03'!handleAnswer: anObject continueWith: aBlock	aBlock value! !!WADecoration methodsFor: 'initialization' stamp: 'lr 9/5/2007 11:21'!initialize	super initialize.	next := WAValueHolder new! !!WADecoration methodsFor: 'testing' stamp: 'avi 3/27/2004 19:55'!isDecoration	^ true! !!WADecoration methodsFor: 'testing' stamp: 'avi 3/27/2004 22:23'!isDelegation	^ false! !!WADecoration methodsFor: 'testing' stamp: 'avi 3/28/2004 20:48'!isGlobal	^ false! !!WADecoration methodsFor: 'testing' stamp: 'avi 3/28/2004 20:49'!isLocal	^ (self isGlobal or: [self isDelegation]) not! !!WADecoration methodsFor: 'iterating' stamp: 'avi 6/8/2004 12:43'!nextPresentersDo: aBlock	aBlock value: self owner! !!WADecoration methodsFor: 'accessing' stamp: 'lr 4/15/2007 18:49'!owner	^ next contents! !!WADecoration methodsFor: 'accessing' stamp: 'lr 4/15/2007 18:49'!owner: aPresenter	next contents: aPresenter! !!WADecoration methodsFor: 'actions' stamp: 'avi 3/29/2004 16:10'!remove	self component removeDecoration: self! !!WADecoration methodsFor: 'rendering' stamp: 'avi 3/27/2004 21:07'!renderOwnerOn: html	self owner ifNotNilDo: [:owner | owner renderWithContext: html context]! !!WADecoration methodsFor: 'rendering' stamp: 'lr 2/20/2007 12:08'!showHalo	^ false! !!WADecoration methodsFor: 'updating' stamp: 'lr 4/20/2007 20:18'!updateStates: aSnapshot	super updateStates: aSnapshot.	aSnapshot register: next! !!WADelayedAnswerDecoration methodsFor: 'accessing' stamp: 'lr 5/23/2007 19:58'!delay	^ delay ifNil: [ 1 ]! !!WADelayedAnswerDecoration methodsFor: 'accessing' stamp: 'avi 3/27/2005 20:34'!delay: aNumber	delay := aNumber! !!WADelayedAnswerDecoration methodsFor: 'path' stamp: 'pmm 5/23/2007 22:25'!updateRoot: aRoot	| callbacks url |	callbacks := WACallbackRegistry context: aRoot context owner: self.	url := aRoot context actionUrl withParameter: (callbacks registerActionCallback: [self component answer]).	aRoot meta redirectAfter: self delay to: url displayString! !!WADelegation methodsFor: 'accessing' stamp: 'avi 3/12/2004 20:18'!delegate	^ delegate! !!WADelegation methodsFor: 'accessing' stamp: 'avi 3/12/2004 20:18'!delegate: aComponent	delegate := aComponent! !!WADelegation methodsFor: 'testing' stamp: 'avi 3/27/2004 22:26'!isDelegation	^ true! !!WADelegation methodsFor: 'iterating' stamp: 'avi 4/22/2004 14:51'!nextPresentersDo: aBlock	delegate decorationChainDo: aBlock! !!WAFormDecoration methodsFor: 'accessing' stamp: 'avi 3/16/2004 13:36'!buttons	^ buttons! !!WAFormDecoration methodsFor: 'accessing' stamp: 'avi 3/16/2004 13:34'!buttons: selectorArray	buttons := selectorArray! !!WAFormDecoration methodsFor: 'actions' stamp: 'lr 12/1/2007 08:18'!defaultAction	self component perform: self component defaultButton! !!WAFormDecoration methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderButtonForSelector: aSymbol on: html	html submitButton on: aSymbol of: self component! !!WAFormDecoration methodsFor: 'rendering' stamp: 'lr 9/25/2007 23:29'!renderButtonsOn: html	html div class: 'dialog-buttons'; with: [		self buttons do: [ :each |			html  span				class: 'dialog-button-' , each;				with: [ self renderButtonForSelector: each on: html ] ] ]! !!WAFormDecoration methodsFor: 'rendering' stamp: 'al 9/7/2006 15:50'!renderContentOn: html	html form		defaultAction: [ self defaultAction ];		with: [			self renderOwnerOn: html.			self renderButtonsOn: html ]! !!WAMessageDecoration methodsFor: 'accessing' stamp: 'avi 3/12/2004 00:43'!message: aString	message := aString! !!WAMessageDecoration methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	html heading level3; with: message.	self renderOwnerOn: html! !!WASessionProtector methodsFor: 'testing' stamp: 'lr 8/31/2004 18:49'!isGlobal	^true! !!WASessionProtector methodsFor: 'forwarding' stamp: 'lr 8/31/2004 19:36'!processChildCallbacks: aStream	(self verifyRequest: self session currentRequest)		ifTrue: [ super processChildCallbacks: aStream ]		ifFalse: [ self respondNotVerified ]! !!WASessionProtector methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!remoteAddressFromRequest: aRequest	^aRequest		headerAt: 'x-forwarded-for'		ifAbsent: [ aRequest nativeRequest remoteAddress ]! !!WASessionProtector methodsFor: 'forwarding' stamp: 'pmm 8/26/2007 14:26'!renderContentOn: html	self renderOwnerOn: html! !!WASessionProtector methodsFor: 'forwarding' stamp: 'lr 10/28/2007 14:42'!respondNotVerified	self session redirectTo: self session application basePath! !!WASessionProtector methodsFor: 'accessing' stamp: 'lr 8/31/2004 19:38'!storedRemoteAddress	remoteAddress isNil		ifTrue: [ remoteAddress := self remoteAddressFromRequest: self session currentRequest ].	^remoteAddress! !!WASessionProtector methodsFor: 'forwarding' stamp: 'pmm 8/26/2007 14:26'!updateRoot: html	super updateRoot: html.	(self verifyRequest: self session currentRequest)		ifFalse: [ self respondNotVerified ]! !!WASessionProtector methodsFor: 'testing' stamp: 'lr 8/31/2004 19:31'!verifyRequest: aRequest	^(self remoteAddressFromRequest: aRequest) = self storedRemoteAddress! !!WATransaction methodsFor: 'open/close' stamp: 'ab 1/15/2003 21:55'!close	active := false! !!WATransaction methodsFor: 'initialization' stamp: 'mb 4/23/2006 18:36'!initialize	super initialize.	active := true! !!WATransaction methodsFor: 'testing' stamp: 'avi 3/28/2004 20:51'!isGlobal	^ true! !!WATransaction methodsFor: 'forwarding' stamp: 'lr 8/17/2007 10:01'!processChildCallbacks: aStream	^ active		ifTrue: [ super processChildCallbacks: aStream ]		ifFalse: [ self session pageExpired ]! !!WATransaction methodsFor: 'rendering' stamp: 'avi 9/8/2004 12:18'!renderContentOn: html	active		ifTrue: [ self renderOwnerOn: html ]		ifFalse: [ self session pageExpired ]! !!WAValidationDecoration methodsFor: 'accessing' stamp: 'cds 6/3/2006 22:40'!exceptionClass	^exceptionClass ifNil: [exceptionClass := WAValidationNotification]! !!WAValidationDecoration methodsFor: 'accessing' stamp: 'cds 7/25/2005 10:19'!exceptionClass: aClass	exceptionClass := aClass! !!WAValidationDecoration methodsFor: 'call/answer' stamp: 'pmm 11/2/2005 23:04'!handleAnswer: anObject	^(super handleAnswer: anObject)		or: [(self validate: anObject) not]! !!WAValidationDecoration methodsFor: 'request processing' stamp: 'avi 6/22/2004 11:03'!handleAnswer: anObject continueWith: aBlock	(self validate: anObject) ifTrue: [aBlock value]! !!WAValidationDecoration methodsFor: 'initialization' stamp: 'lr 9/5/2007 11:21'!initialize	super initialize.	message := WAValueHolder new! !!WAValidationDecoration methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!renderContentOn: html	message contents ifNotNilDo: [ :msg |		html div			class: 'validation-error';			with: msg].	self renderOwnerOn: html! !!WAValidationDecoration methodsFor: 'accessing' stamp: 'lr 4/15/2007 19:58'!states	^ Array with: message! !!WAValidationDecoration methodsFor: 'request processing' stamp: 'pmm 11/1/2007 21:33'!validate: anObject	[ validationBlock value: anObject.	message contents: nil.	^ true ]		on: self exceptionClass		do: [ :exception | message contents: exception messageText ].	^ false! !!WAValidationDecoration methodsFor: 'convenience' stamp: 'avi 12/10/2003 12:49'!validateWith: aBlock	validationBlock := aBlock! !!WAWindowDecoration class methodsFor: 'instance creation' stamp: 'pmm 10/3/2007 21:12'!title: aTitle	^self new		title: aTitle;		yourself! !!WAWindowDecoration methodsFor: 'accessing' stamp: 'lr 5/28/2007 17:52'!cssClass: aString	cssClass := aString! !!WAWindowDecoration methodsFor: 'testing' stamp: 'avi 3/28/2004 20:52'!isGlobal	^ true! !!WAWindowDecoration methodsFor: 'rendering' stamp: 'pmm 10/3/2007 21:12'!renderCloseButtonOn: html	html anchor		title: 'Close';		callback: [ self component answer: nil ];		with: [ html html: '&times;' ]! !!WAWindowDecoration methodsFor: 'rendering' stamp: 'lr 5/28/2007 17:56'!renderContentOn: html	html div class: 'window'; with: [		html div class: 'window-titlebar'; with: [			html div class: 'window-title'; class: cssClass; with: title.			html div class: 'window-close'; with: [ self renderCloseButtonOn: html ] ].		html div class: 'window-content'; with: [ self renderOwnerOn: html ] ]! !!WAWindowDecoration methodsFor: 'accessing' stamp: 'ab 6/15/2003 12:51'!title: aString	title := aString! !!WAPresenter class methodsFor: 'instance creation' stamp: 'avi 4/13/2004 20:14'!new	^ self basicNew initialize! !!WAPresenter methodsFor: 'convenience' stamp: 'dc 7/16/2006 16:41'!application	^ self session application! !!WAPresenter methodsFor: 'convenience' stamp: 'dc 11/5/2006 12:45'!fieldsAt: key	"Returns the string value associated to the key in the argument given to your webapplication. The argument can have been sent by a form or written at the end of the url (using ...?key=value construction). If key is not found, an error is sent."	^ self session fieldsAt: key! !!WAPresenter methodsFor: 'convenience' stamp: 'dc 11/5/2006 12:45'!fieldsAt: key ifAbsent: aBlock	"Returns the string value associated to the key in the argument given to your webapplication. The argument can have been sent by a form or written at the end of the url (using ...?key=value construction). If key is not found, aBlock is evaluated."	^ self session fieldsAt: key ifAbsent: aBlock! !!WAPresenter methodsFor: 'convenience' stamp: 'dc 11/5/2006 12:46'!fieldsAt: key ifPresent: aBlock	"Returns the string value associated to the key in the argument given to your webapplication. The argument can have been sent by a form or written at the end of the url (using ...?key=value construction). If the key is present, execute the block and give it the value as a parameter. Otherwise, answer nil."	^ self session fieldsAt: key ifPresent: aBlock! !!WAPresenter methodsFor: 'call/answer' stamp: 'lr 10/28/2007 14:42'!handleAnswer: anObject	self subclassResponsibility! !!WAPresenter methodsFor: 'request processing' stamp: 'lr 10/28/2007 14:42'!initialRequest: aRequest	"When a new session is started, all visible presenters (components or tasks) receive this message with the request as argument.	A common usage for this is to initialize their state depending on the URL of the request. This is one building block for bookmarkable URL. The other is updateUrl: where you can manipulate the anchor urls generated by Seaside.	You can not use #call: in here. Consider using a WATask instead and sending #call: in #go.	See WABrowser for examples."! !!WAPresenter methodsFor: 'initialization' stamp: 'ab 2/13/2003 01:10'!initialize! !!WAPresenter methodsFor: 'decoration' stamp: 'avi 3/27/2004 19:55'!isDecoration	^ false! !!WAPresenter methodsFor: 'tree' stamp: 'lr 10/28/2007 14:42'!nextPresentersDo: aBlock	self subclassResponsibility! !!WAPresenter methodsFor: 'convenience' stamp: 'dc 7/16/2006 16:48'!preferenceAt: aSymbol	^ self application preferenceAt: aSymbol! !!WAPresenter methodsFor: 'convenience' stamp: 'dc 7/16/2006 16:53'!preferenceAt: aSymbol put: anObject	^ self application preferenceAt: aSymbol put: anObject! !!WAPresenter methodsFor: 'request processing' stamp: 'lr 10/28/2007 14:42'!processCallbackStream: aCallbackStream	aCallbackStream processCallbacksWithOwner: self.	self processChildCallbacks: aCallbackStream.	aCallbackStream processCallbacksWithOwner: self! !!WAPresenter methodsFor: 'request processing' stamp: 'avi 6/8/2004 00:54'!processChildCallbacks: aStream	self nextPresentersDo: [:ea | ea processCallbackStream: aStream]! !!WAPresenter methodsFor: 'deprecated' stamp: 'lr 6/5/2007 21:36'!registerForBacktracking	self deprecatedApi: '#registerForBacktracking is not supported, implement #states to backtrack your object'! !!WAPresenter methodsFor: 'rendering' stamp: 'avi 3/27/2004 20:59'!renderContentOn: aRenderer	self nextPresentersDo: [:ea | ea renderWithContext: aRenderer context]! !!WAPresenter methodsFor: 'rendering' stamp: 'lr 4/20/2007 22:18'!renderWithContext: aRenderingContext	| html callbacks |	callbacks := aRenderingContext callbacksFor: self.	html := self rendererClass context: aRenderingContext callbacks: callbacks.	(self showHalo and: [ aRenderingContext isDebugMode ])		ifTrue: [ (WAHalo for: self) renderContentOn: html ]		ifFalse: [ self renderContentOn: html ].	html flush! !!WAPresenter methodsFor: 'rendering' stamp: 'pmm 4/7/2007 01:16'!rendererClass	"Override this method if you want a custom renderer."	^ WARenderCanvas! !!WAPresenter methodsFor: 'rendering' stamp: 'pmm 4/7/2007 17:16'!script	"The same as #style except that it is for JavaScript. This is rarely used, consider using WAFileLibrary or exernal files instead."	^ nil! !!WAPresenter methodsFor: 'convenience' stamp: 'avi 4/13/2004 19:48'!session	^ WACurrentSession value! !!WAPresenter methodsFor: 'rendering' stamp: 'avi 3/27/2004 17:27'!showHalo	^ true! !!WAPresenter methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!states	"Answer a collection of states that should be backtracked."	^ #()! !!WAPresenter methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:42'!style	"Returns a CSS stylesheet associated with this component. This stylesheet will be added to <head> section of the html document so it will be global and not scoped.	This is done for all visible components (see class comment of WAComponent for what visible means).	Nice for demos but consider using WAFileLibrary or exernal files instead."	^ nil! !!WAPresenter methodsFor: 'updating' stamp: 'lr 10/28/2007 14:42'!updateRoot: anHtmlRoot	"This method allows you customize the <head> section of an HTML document. The API is very similar to the 'Canvas API' for rendering in the <body> section (where you 'draw' in #renderContentOn:).	anHtmlRoot is an instance of WAHtmlRoot	Whenever you override this method don't forget to send super"	self script ifNotNilDo: [:script | anHtmlRoot addScript: script].	self style ifNotNilDo: [:style | anHtmlRoot addStyle: style]! !!WAPresenter methodsFor: 'updating' stamp: 'lr 10/28/2007 14:42'!updateStates: aSnapshot	"This method allows to register objects for backtracking. Don't forget to send super in all cases."	self states do: [ :each | aSnapshot register: each ]! !!WAPresenter methodsFor: 'updating' stamp: 'lr 10/28/2007 14:42'!updateUrl: aUrl! !!WAPresenter methodsFor: 'tree' stamp: 'avi 3/27/2004 20:59'!withNextPresentersDo: aBlock	aBlock value: self.	self nextPresentersDo: [:ea | ea withNextPresentersDo: aBlock]! !!WAProcessMonitor class methodsFor: 'instance creation' stamp: 'pmm 4/18/2006 20:17'!new	^ self basicNew initialize! !!WAProcessMonitor methodsFor: 'mutual exclusion' stamp: 'pmm 7/8/2007 16:44'!critical: aBlock ifError: anErrorBlock	"Evaluate aBlock as a mutual exclusive block within a new processes and wait for the process to finish. Evaluate anErrorBlock in case of a problem. Answer the result of evaluating the blocks. Note, that the semaphore needs to be an instance-variable, otherwise continuations might screw up the debugger."	| value |	mutex critical: [		semaphore := SeasidePlatformSupport semaphoreClass new.		process := [			[ value := aBlock on: Error do: anErrorBlock ]				ensure: [ semaphore signal ] ] fork.		semaphore wait ].	process := nil.	^ value! !!WAProcessMonitor methodsFor: 'initialization' stamp: 'pmm 7/8/2007 16:44'!initialize	mutex := SeasidePlatformSupport semaphoreClass forMutualExclusion! !!WAProcessMonitor methodsFor: 'controlling' stamp: 'avi 1/16/2005 00:38'!terminate	process ifNotNil: [process terminate]! !!WARadioGroup class methodsFor: 'accessing' stamp: 'ac 7/6/2005 11:30'!canvas: aRenderCanvas	^ self basicNew initializeWithCanvas: aRenderCanvas! !!WARadioGroup methodsFor: 'initialize-release' stamp: 'lr 10/28/2007 14:42'!initializeWithCanvas: aRenderCanvas	canvas := aRenderCanvas.	key := aRenderCanvas callbacks registerDispatchCallback! !!WARadioGroup methodsFor: 'accessing' stamp: 'ac 7/6/2005 11:32'!key	^ key! !!WARadioGroup methodsFor: 'public api' stamp: 'ac 7/6/2005 11:31'!radioButton	^ canvas radioButton group: self! !!WARedirectHandler class methodsFor: 'actions' stamp: 'lr 10/11/2007 11:05'!redirectPageExpiredTo: aUrl	^ self new redirectPageExpiredTo: aUrl! !!WARedirectHandler class methodsFor: 'actions' stamp: 'lr 10/11/2007 09:43'!redirectTo: aUrl	^ self new redirectTo: aUrl! !!WARedirectHandler methodsFor: 'actions' stamp: 'lr 10/11/2007 09:41'!redirectPageExpiredTo: aUrl	^ WAResponse		refreshWithMessage: 'That page has expired.'		location: aUrl displayString		delay: 3! !!WARedirectHandler methodsFor: 'actions' stamp: 'lr 10/11/2007 11:07'!redirectTo: aUrl	^ WAResponse redirectTo: aUrl displayString! !!WARenderLoop methodsFor: 'accessing-conveniance' stamp: 'lr 10/28/2007 14:42'!application	"Answer the application to which this entry point is associated."	^ self session application! !!WARenderLoop methodsFor: 'processing' stamp: 'avi 5/8/2004 14:00'!call: aComponent	^ self call: aComponent withToolFrame: true! !!WARenderLoop methodsFor: 'processing' stamp: 'lr 10/22/2007 20:53'!call: aComponent withToolFrame: aBoolean	^ AnswerContinuation currentDo: [ :cc |		aComponent onAnswer: cc.		self root: aComponent withToolFrame: aBoolean.		self run ]! !!WARenderLoop methodsFor: 'accessing-properties' stamp: 'lr 8/17/2007 09:56'!renderContinuationClass	^ self application preferenceAt: #renderContinuationClass! !!WARenderLoop methodsFor: 'accessing' stamp: 'lr 4/20/2007 15:12'!root	^ root! !!WARenderLoop methodsFor: 'accessing' stamp: 'lr 4/20/2007 20:27'!root: aComponent	self root: aComponent withToolFrame: true! !!WARenderLoop methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:29'!root: aComponent withToolFrame: aBoolean	root := (aBoolean and: [ self application deploymentMode not ])		ifTrue: [ WAToolFrame on: aComponent ]		ifFalse: [ aComponent ]! !!WARenderLoop methodsFor: 'processing' stamp: 'lr 8/17/2007 09:54'!run	(self renderContinuationClass root: self root) run! !!WARenderLoop methodsFor: 'accessing-conveniance' stamp: 'lr 10/28/2007 14:42'!session	"Answer the session to which this entry point is associated."	^ WACurrentSession value! !!WARenderingContext class methodsFor: 'instance creation' stamp: 'avi 3/25/2004 02:21'!new	^ self basicNew initialize! !!WARenderingContext methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!absoluteUrlForResource: aString	| url |	(aString isNil or: [ aString beginsWith: 'http' ])		ifTrue: [ ^ aString ].	url := self session application resourceBaseUrl.	url ifNil: [ ^ aString ].	^ url , aString! !!WARenderingContext methodsFor: 'accessing' stamp: 'ab 2/13/2003 01:25'!actionUrl	"Answer the value of actionUrl"	^ actionUrl! !!WARenderingContext methodsFor: 'accessing' stamp: 'avi 11/7/2005 13:13'!actionUrl: anObject	actionUrl := anObject! !!WARenderingContext methodsFor: 'callbacks' stamp: 'avi 6/8/2004 00:42'!advanceKey	| key |	key := self nextKey.	self increaseKey.	^ key! !!WARenderingContext methodsFor: 'callbacks' stamp: 'lr 4/19/2006 08:05'!callbackAt: aString	^ callbacks at: aString ifAbsent: [ ]! !!WARenderingContext methodsFor: 'callbacks' stamp: 'avi 6/8/2004 02:01'!callbackStreamForRequest: aRequest	^ WACallbackStream callbacks: callbacks request: aRequest! !!WARenderingContext methodsFor: 'callbacks' stamp: 'avi 6/7/2004 22:17'!callbacksFor: anObject	^ WACallbackRegistry context: self owner: anObject! !!WARenderingContext methodsFor: 'modes' stamp: 'avi 3/13/2004 22:19'!clearMode	mode := nil! !!WARenderingContext methodsFor: 'accessing' stamp: 'lr 3/27/2006 10:42'!count	^ count! !!WARenderingContext methodsFor: 'accessing' stamp: 'lr 3/27/2006 10:42'!count: anInteger	count := anInteger! !!WARenderingContext methodsFor: 'modes' stamp: 'avi 3/13/2004 22:19'!debugMode	mode := #debug! !!WARenderingContext methodsFor: 'accessing' stamp: 'ab 2/13/2003 01:25'!document	"Answer the value of document"	^ document! !!WARenderingContext methodsFor: 'accessing' stamp: 'ab 2/13/2003 01:25'!document: anObject	"Set the value of document"	document := anObject! !!WARenderingContext methodsFor: 'callbacks' stamp: 'mb 11/27/2005 19:22'!increaseKey	count contents: count contents + 1! !!WARenderingContext methodsFor: 'initialize-release' stamp: 'lr 9/5/2007 11:47'!initialize	count := WAValueHolder with: 1.	callbacks := Dictionary new! !!WARenderingContext methodsFor: 'modes' stamp: 'avi 3/13/2004 22:20'!isDebugMode	^ mode = #debug! !!WARenderingContext methodsFor: 'callbacks' stamp: 'lr 10/28/2007 14:42'!nextKey	^ count contents displayString! !!WARenderingContext methodsFor: 'accessing' stamp: 'ac 2/18/2006 17:33'!properties	^ properties ifNil: [properties := Dictionary new]! !!WARenderingContext methodsFor: 'accessing' stamp: 'ac 2/18/2006 17:33'!propertyAt: key ifAbsent: aBlock	^ self properties at: key ifAbsent: aBlock! !!WARenderingContext methodsFor: 'accessing' stamp: 'ac 2/18/2006 17:33'!propertyAt: key put: value	^ self properties at: key put: value! !!WARenderingContext methodsFor: 'documents' stamp: 'avi 5/22/2004 18:52'!registry	^ WACurrentSession value application! !!WARenderingContext methodsFor: 'initialize-release' stamp: 'lr 4/20/2007 19:57'!release	super release.	document := nil! !!WARenderingContext methodsFor: 'accessing' stamp: 'lr 4/10/2007 10:06'!session	^ session! !!WARenderingContext methodsFor: 'accessing' stamp: 'lr 4/10/2007 10:06'!session: aSession	session := aSession! !!WARenderingContext methodsFor: 'callbacks' stamp: 'lr 10/28/2007 14:42'!storeCallback: aCallback	| key |	key := self advanceKey.	callbacks at: (aCallback convertKey: key) put: aCallback.	^ key! !!WARenderingContext methodsFor: 'documents' stamp: 'lr 10/28/2007 14:42'!urlForDocument: anObject	^ self urlForDocument: anObject mimeType: nil! !!WARenderingContext methodsFor: 'documents' stamp: 'avi 5/22/2004 18:02'!urlForDocument: anObject mimeType: mimeString	^ self urlForDocument: anObject mimeType: mimeString fileName: nil! !!WARenderingContext methodsFor: 'documents' stamp: 'mbany 4/14/2005 12:14'!urlForDocument: anObject mimeType: mimeType fileName: fileName	^ (self registry urlForRequestHandler:		(WADocumentHandler			document: anObject			mimeType: mimeType			fileName: fileName)) displayString! !!WAReportColumn class methodsFor: 'instance creation' stamp: 'pmm 4/18/2006 20:17'!new	^ self basicNew initialize! !!WAReportColumn class methodsFor: 'instance creation' stamp: 'mb 5/30/2006 12:13'!renderBlock: aBlock title: aString	^ self new		title: aString;		valueBlock: aBlock;		yourself! !!WAReportColumn class methodsFor: 'instance creation' stamp: 'ab 10/26/2002 22:26'!selector: aSymbol	^ self selector: aSymbol title: aSymbol capitalized! !!WAReportColumn class methodsFor: 'instance creation' stamp: 'ab 10/26/2002 22:26'!selector: aSymbol title: aString	^ self selector: aSymbol title: aString onClick: nil! !!WAReportColumn class methodsFor: 'instance creation' stamp: 'pmm 4/19/2006 17:42'!selector: aSymbol title: aString onClick: aBlock	^ self new		title: aString;		selector: aSymbol;		clickBlock: aBlock;		yourself! !!WAReportColumn methodsFor: 'public' stamp: 'ab 10/27/2002 00:05'!canChoose	^ clickBlock notNil! !!WAReportColumn methodsFor: 'rendering' stamp: 'mb 5/30/2006 11:49'!canRender	^valueBlock numArgs > 1! !!WAReportColumn methodsFor: 'public' stamp: 'lr 10/28/2007 14:42'!canSort	^self canRender not and: [sortBlock notNil]! !!WAReportColumn methodsFor: 'public' stamp: 'ab 1/16/2003 16:06'!chooseRow: row	^ clickBlock value: row! !!WAReportColumn methodsFor: 'accessing' stamp: 'ab 10/28/2002 14:02'!clickBlock: aBlock	clickBlock := aBlock! !!WAReportColumn methodsFor: 'accessing' stamp: 'ab 11/12/2002 14:03'!columnClickBlock: aBlock	self clickBlock: [:r | aBlock value: (self valueForRow: r)]! !!WAReportColumn methodsFor: 'accessing' stamp: 'ab 10/26/2002 21:50'!formatBlock: anObject	formatBlock := anObject! !!WAReportColumn methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!hasTotal: aBoolean	hasTotal := aBoolean! !!WAReportColumn methodsFor: 'accessing' stamp: 'ab 10/26/2002 21:52'!index: aNumber	valueBlock := [:row | row at: aNumber]! !!WAReportColumn methodsFor: 'initialize-release' stamp: 'pmm 11/1/2007 21:13'!initialize	formatBlock := [ :x | x displayString ].	sortBlock := [ :a :b | a <= b ].	valueBlock := [ :row | nil ].	clickBlock := nil.	title := 'Untitled'.	hasTotal := false! !!WAReportColumn methodsFor: 'rendering' stamp: 'mb 5/30/2006 11:47'!renderValue: anObject on: html	valueBlock value: anObject value: html! !!WAReportColumn methodsFor: 'accessing' stamp: 'ab 10/26/2002 21:52'!selector: aSymbol	valueBlock := [:row | row perform: aSymbol]! !!WAReportColumn methodsFor: 'accessing' stamp: 'ab 10/26/2002 21:50'!sortBlock: anObject	sortBlock := anObject! !!WAReportColumn methodsFor: 'public' stamp: 'avi 9/18/2003 16:43'!sortRows: anArray	|assocs|	assocs := anArray collect: [:ea | ea -> (self valueForRow: ea)].	assocs := assocs asSortedCollection: [:a :b | sortBlock value: a value value: b value].	^ assocs collect: [:ea | ea key]! !!WAReportColumn methodsFor: 'public' stamp: 'ab 10/26/2002 21:51'!textForRow: row	^ formatBlock value: (self valueForRow: row)! !!WAReportColumn methodsFor: 'public' stamp: 'ab 10/26/2002 21:50'!title	^title! !!WAReportColumn methodsFor: 'accessing' stamp: 'ab 10/26/2002 21:50'!title: aString	title := aString! !!WAReportColumn methodsFor: 'public' stamp: 'ab 11/12/2002 14:31'!totalForRows: aCollection	^ hasTotal		ifFalse: ['']		ifTrue: [formatBlock value: (aCollection detectSum: [:r | self valueForRow: r])]! !!WAReportColumn methodsFor: 'accessing' stamp: 'ab 10/26/2002 21:50'!valueBlock: aBlock	valueBlock := aBlock! !!WAReportColumn methodsFor: 'public' stamp: 'ab 10/26/2002 21:51'!valueForRow: row	^ valueBlock value: row! !!WARequest class methodsFor: 'instance-creation' stamp: 'avi 8/29/2005 21:19'!blankRequest	^ self			method: 'GET'			url: ''			headers: Dictionary new			fields: Dictionary new			cookies: Dictionary new! !!WARequest class methodsFor: 'instance-creation' stamp: 'ab 8/26/2003 19:34'!method: methodString url: urlString headers: headDict fields: fieldDict cookies: cookieDict	^ self new setMethod: methodString url: urlString headers: headDict fields: fieldDict cookies: cookieDict! !!WARequest class methodsFor: 'instance-creation' stamp: 'avi 4/28/2004 10:57'!method: methodString url: urlString headers: headDict fields: fieldDict cookies: cookieDict nativeRequest: anObject	^ (self method: methodString url: urlString headers: headDict fields: fieldDict cookies: cookieDict)		nativeRequest: anObject;		yourself! !!WARequest methodsFor: 'accessing-headers' stamp: 'pmm 10/12/2006 06:26'!accept	^ self headerAt: 'accept'! !!WARequest methodsFor: 'accessing-headers' stamp: 'pmm 10/12/2006 06:28'!acceptCharset	^ self headerAt: 'accept-charset'! !!WARequest methodsFor: 'accessing-headers' stamp: 'pmm 10/12/2006 06:27'!acceptEncoding	^ self headerAt: 'accept-encoding'! !!WARequest methodsFor: 'accessing-headers' stamp: 'pmm 10/12/2006 06:27'!acceptLanguage	^ self headerAt: 'accept-language'! !!WARequest methodsFor: 'accessing' stamp: 'ab 7/3/2002 13:37'!at: key	^ fields at: key! !!WARequest methodsFor: 'accessing' stamp: 'JF 5/16/2003 09:40'!at: key ifAbsent: aBlock	^ fields at: key ifAbsent: aBlock! !!WARequest methodsFor: 'accessing' stamp: 'ac 11/12/2005 00:46'!at: key ifPresent: aBlock	^ fields at: key ifPresent: aBlock! !!WARequest methodsFor: 'private' stamp: 'ab 1/13/2003 22:40'!authorization	^ (self headerAt: 'Authorization' ifAbsent: [self headerAt: 'authorization'])		ifNotNilDo: [:auth | self decodeAuthorization: auth]! !!WARequest methodsFor: 'accessing-cookies' stamp: 'lr 5/10/2007 22:17'!cookieAt: aKey	^ cookies ifNotNil: [ cookies at: aKey ifAbsent: [] ]! !!WARequest methodsFor: 'accessing-cookies' stamp: 'lr 5/10/2007 22:07'!cookies	^ cookies ifNil: [ cookies := Dictionary new ]! !!WARequest methodsFor: 'private' stamp: 'avi 9/21/2003 18:28'!decodeAuthorization: aString	^ SeasidePlatformSupport base64Decode: (aString findTokens: ' ') last! !!WARequest methodsFor: 'accessing' stamp: 'ab 7/3/2002 12:51'!fields	^ fields! !!WARequest methodsFor: 'accessing' stamp: 'JF 11/18/2002 16:18'!headerAt: aKey	^ self headerAt: aKey ifAbsent: []! !!WARequest methodsFor: 'accessing' stamp: 'JF 11/18/2002 16:18'!headerAt: aKey ifAbsent: aBlock	^ headers at: aKey ifAbsent: aBlock! !!WARequest methodsFor: 'accessing' stamp: 'JF 11/18/2002 16:16'!headers	^ headers! !!WARequest methodsFor: 'accessing-headers' stamp: 'pmm 10/29/2006 07:28'!host	^ self headerAt: 'host'! !!WARequest methodsFor: 'testing' stamp: 'mb 3/31/2006 09:41'!includesKey: key	^ fields includesKey: key! !!WARequest methodsFor: 'testing' stamp: 'avi 3/22/2004 12:58'!isGet	^ self method asUppercase = 'GET'! !!WARequest methodsFor: 'testing' stamp: 'avi 5/9/2005 13:13'!isPrefetch	^ (self headerAt: 'HTTP_X_MOZ') = 'prefetch'! !!WARequest methodsFor: 'testing' stamp: 'lr 7/3/2006 09:25'!isXmlHttpRequest	^ (self headerAt: 'x-requested-with') = 'XMLHttpRequest'! !!WARequest methodsFor: 'accessing' stamp: 'ab 8/26/2003 19:33'!method	^ method! !!WARequest methodsFor: 'accessing' stamp: 'avi 4/28/2004 13:43'!nativeRequest	^ nativeRequest! !!WARequest methodsFor: 'accessing' stamp: 'avi 4/28/2004 13:43'!nativeRequest: aRequest	nativeRequest := aRequest! !!WARequest methodsFor: 'accessing' stamp: 'ab 12/30/2002 17:42'!password	^ self authorization ifNotNilDo: [:auth | auth copyAfter: $:]! !!WARequest methodsFor: 'printing' stamp: 'lr 4/20/2007 19:12'!printOn: aStream	super printOn: aStream.	aStream space; nextPutAll: self method.	aStream space; nextPutAll: self url! !!WARequest methodsFor: 'accessing-headers' stamp: 'ac 6/17/2006 16:28'!referer	^ self headerAt: 'referer'! !!WARequest methodsFor: 'accessing' stamp: 'avi 1/6/2006 13:23'!responseStream	^ responseStream! !!WARequest methodsFor: 'accessing' stamp: 'avi 1/6/2006 13:23'!responseStream: aStream	responseStream := aStream! !!WARequest methodsFor: 'private' stamp: 'avi 3/19/2004 13:52'!setMethod: methodString url: urlString headers: headDict fields: fieldDict cookies: cookieDict	method := methodString.	url := urlString.	headers := headDict.	fields := fieldDict.	cookies := cookieDict! !!WARequest methodsFor: 'accessing' stamp: 'ab 5/26/2003 00:54'!url	^ url! !!WARequest methodsFor: 'accessing' stamp: 'ab 12/30/2002 17:42'!user	^ self authorization ifNotNilDo: [:auth | auth copyUpTo: $:]! !!WARequest methodsFor: 'accessing-headers' stamp: 'pmm 10/12/2006 06:26'!userAgent	^ self headerAt: 'user-agent'! !!WADocumentHandler class methodsFor: 'public api' stamp: 'avi 11/3/2003 12:23'!document: anObject mimeType: mimeString fileName: fileString	^ self basicNew initializeWithDocument: anObject mimeType: mimeString fileName: fileString! !!WADocumentHandler methodsFor: 'comparing' stamp: 'lr 2/12/2007 19:38'!= other	^ other species = self species		and: [ other document = self document		and: [ other mimeType = self mimeType ] ]! !!WADocumentHandler methodsFor: 'accessing' stamp: 'ab 2/12/2003 13:41'!document	^ document! !!WADocumentHandler methodsFor: 'actions' stamp: 'ab 8/17/2003 12:43'!handleRequest: aRequest	^ self response! !!WADocumentHandler methodsFor: 'comparing' stamp: 'ab 8/17/2003 12:42'!hash	^ self document hash bitXor: self mimeType hash! !!WADocumentHandler methodsFor: 'initialization' stamp: 'lr 2/12/2007 19:38'!initializeWithDocument: anObject mimeType: mimeString fileName: fileString	document := anObject.	mimeType := mimeString.	fileName := fileString! !!WADocumentHandler methodsFor: 'accessing' stamp: 'lr 2/12/2007 19:37'!mimeDocument	^ mimeDocument ifNil: [ mimeDocument := document asMIMEDocumentType: mimeType ]! !!WADocumentHandler methodsFor: 'accessing' stamp: 'ab 8/24/2003 18:48'!mimeType	^ mimeType! !!WADocumentHandler methodsFor: 'accessing' stamp: 'lr 5/28/2008 16:11'!response	| response |	response := WAResponse new.	response contents: self mimeDocument contentStream.	response contentType: (mimeType ifNil: [self mimeDocument contentType]).	response cacheForever.	fileName ifNotNil: [ response attachmentWithFileName: fileName ].	^ response! !!WADispatcher class methodsFor: 'accessing' stamp: 'lr 3/19/2007 21:06'!default	^ default ifNil: [ default := self named: SeasidePlatformSupport defaultDispatcherName ]! !!WADispatcher class methodsFor: 'accessing' stamp: 'lr 11/16/2006 18:39'!description	^ 'Directory'! !!WADispatcher class methodsFor: 'initialization' stamp: 'lr 10/28/2007 14:42'!resetAll	"To have this todo list somewhere,	May be used in the WADispatcher tests"	default := nil.	WAFileHandler initialize.	WAFileHandler default.	WAComponent allSubclasses do: [:ea | ea initialize]! !!WADispatcher methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!beAwareOfChangeOf: anAspectSymbol with: aParameter from: anEntryPoint	(anEntryPoint == self		and: [anAspectSymbol == #name]) ifTrue: [^ self].	"Here when anything has changed but the name in the	receiver"	version := self version + 1.	lastUpdate := TimeStamp now.	"following line is for VW Seaside to handle multiple top level dispatchers"	self changed! !!WADispatcher methodsFor: 'accessing' stamp: 'ab 8/26/2003 21:53'!configurationComponent	^ WADispatcherEditor new dispatcher: self! !!WADispatcher methodsFor: 'accessing' stamp: 'lr 2/12/2007 20:07'!defaultName	^ defaultName! !!WADispatcher methodsFor: 'accessing' stamp: 'mb 2/17/2007 23:44'!defaultName: aString	defaultName := aString.	self announceChangeOf: #defaultName with: aString! !!WADispatcher methodsFor: 'accessing' stamp: 'lr 2/12/2007 21:44'!entryPointAt: aString	^ (aString findTokens: '/') inject: self into: [ :dispatcher :token | dispatcher entryPoints at: token ]! !!WADispatcher methodsFor: 'accessing' stamp: 'ab 8/26/2003 21:35'!entryPoints	^ entryPoints! !!WADispatcher methodsFor: 'processing' stamp: 'lr 10/28/2007 14:42'!handleRequest: aRequest	aRequest isPrefetch		ifTrue: [ ^ WAResponse forbidden: aRequest url ].	^ (self handlerForRequest: aRequest)		handleRequest: aRequest! !!WADispatcher methodsFor: 'processing' stamp: 'lr 2/12/2007 20:02'!handlerForRequest: aRequest	^ self handlerForRequest: aRequest relativeTo: self basePath! !!WADispatcher methodsFor: 'processing' stamp: 'lr 10/28/2007 14:42'!handlerForRequest: aRequest relativeTo: aString	| fullUrl relativeUrl handlerName |	fullUrl := aRequest url.	(aString isEmpty or: [ fullUrl beginsWith: aString ]) ifTrue: [		relativeUrl := fullUrl allButFirst: aString size.		handlerName := (relativeUrl notEmpty and: [ relativeUrl first = $/ ])			ifTrue: [ (relativeUrl findTokens: '/') at: 1 ifAbsent: [ self defaultName ] ]			ifFalse: [ self defaultName ].		^ self entryPoints at: handlerName ifAbsent: [			self entryPoints				at: self defaultName				ifAbsent: [ WANotFoundHandler new ] ] ].       ^ WANotFoundHandler new! !!WADispatcher methodsFor: 'initialization' stamp: 'lr 10/28/2007 14:42'!initialize	super initialize.	entryPoints := Dictionary new.	version := 0! !!WADispatcher methodsFor: 'testing' stamp: 'lr 2/12/2007 20:09'!isDeployed	^ self entryPoints anySatisfy: [ :each | each isDeployed ]! !!WADispatcher methodsFor: 'testing' stamp: 'mb 5/26/2006 08:51'!isDispatcher	^ true! !!WADispatcher methodsFor: 'testing' stamp: 'lr 2/12/2007 20:59'!isRoot	^ self parent isNil! !!WADispatcher methodsFor: 'accessing' stamp: 'mb 2/17/2007 23:39'!lastUpdate	^ lastUpdate! !!WADispatcher methodsFor: 'copying' stamp: 'mb 2/17/2007 01:31'!postCopy	super postCopy.	entryPoints := entryPoints valuesCollect: [ :each | each copy setParent: self ]! !!WADispatcher methodsFor: 'registration' stamp: 'lr 10/28/2007 14:42'!register: anEntryPoint	anEntryPoint name		ifNil: [ self error: 'Unable to add unnamed entry point.' ].	entryPoints		at: anEntryPoint name		put: (anEntryPoint setParent: self).	self announceChangeOf: #entryPoint with: #add -> anEntryPoint.	^ anEntryPoint! !!WADispatcher methodsFor: 'private' stamp: 'pmm 5/2/2007 16:14'!trimForDeployment	"removes all non-production applications	see: WAComponent class >> #isDeployed"	(self entryPoints reject: [ :each | each isDeployed ])		do: [ :each | self unregister: each ].	(self entryPoints select: [ :each | each isDispatcher ])		do: [ :each | each trimForDeployment ]! !!WADispatcher methodsFor: 'registration' stamp: 'lr 10/28/2007 14:42'!unregister: anEntryPoint	entryPoints removeKey: anEntryPoint name ifAbsent: [ ^ nil ].	self announceChangeOf: #entryPoint with: #add->anEntryPoint.	^ anEntryPoint unregistered! !!WADispatcher methodsFor: 'accessing' stamp: 'mb 2/21/2007 18:48'!version	^ version ifNil: [ version := 0 ]! !!WAEntryPoint class methodsFor: 'accessing' stamp: 'lr 2/12/2007 19:54'!concreteSubclasses	^ self allSubclasses reject: [ :each | each isAbstract ]! !!WAEntryPoint class methodsFor: 'accessing' stamp: 'ab 8/27/2003 00:14'!description	^ nil! !!WAEntryPoint class methodsFor: 'testing' stamp: 'ab 8/27/2003 00:14'!isAbstract	^ self description isNil! !!WAEntryPoint class methodsFor: 'instance-creation' stamp: 'lr 2/12/2007 19:56'!named: aString	^ self new setName: aString! !!WAEntryPoint methodsFor: 'private' stamp: 'mb 2/17/2007 23:42'!announceChangeOf: anAspectSymbol with: aParameter	"Short-circuit the dependency mechanics"	self rootDispatcher isNil ifTrue: [^nil "Discard this change"].	self rootDispatcher beAwareOfChangeOf: anAspectSymbol with: aParameter from: self! !!WAEntryPoint methodsFor: 'accessing' stamp: 'mb 2/18/2007 01:30'!basePath	^ self parent isNil		ifTrue: [self name isEmpty				ifTrue: ['']				ifFalse: ['/' , self name]]		ifFalse: [self parent basePath , '/' , self name]! !!WAEntryPoint methodsFor: 'public' stamp: 'lr 2/12/2007 20:53'!baseUrl	^ WAUrl new		addToPath: self basePath;		yourself! !!WAEntryPoint methodsFor: 'public' stamp: 'ab 8/26/2003 21:48'!configurationComponent	^ nil! !!WAEntryPoint methodsFor: 'accessing' stamp: 'lr 2/12/2007 23:21'!description	^ self class description! !!WAEntryPoint methodsFor: 'testing' stamp: 'mb 5/26/2006 08:50'!isEntryPoint	^ true! !!WAEntryPoint methodsFor: 'testing' stamp: 'mb 2/17/2007 23:42'!isRoot	^false! !!WAEntryPoint methodsFor: 'accessing' stamp: 'lr 2/12/2007 19:50'!name	^ name! !!WAEntryPoint methodsFor: 'printing' stamp: 'lr 2/12/2007 21:48'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' named: '; print: self name! !!WAEntryPoint methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!rootDispatcher	self isRoot ifTrue: [^self].	self parent isNil ifTrue: [^nil].	^self parent rootDispatcher! !!WAEntryPoint methodsFor: 'initialization' stamp: 'mb 2/17/2007 23:46'!setName: aString	name := aString.	self announceChangeOf: #name with: aString! !!WAFileHandler class methodsFor: 'accessing' stamp: 'lr 2/18/2007 12:47'!default	^ default ifNil: [ default := self registerAsHandler: 'files' ]! !!WAFileHandler class methodsFor: 'accessing' stamp: 'lr 2/18/2007 12:25'!description	^ 'Files'! !!WAFileHandler class methodsFor: 'class initialization' stamp: 'lr 10/28/2007 14:42'!initialize	"This is just for the 2.7 version, can be removed later"	default := nil! !!WAFileHandler class methodsFor: 'initialization' stamp: 'lr 2/18/2007 12:47'!registerAsHandler: aString	^ WADispatcher default register: (self named: aString)! !!WAFileHandler methodsFor: 'accessing' stamp: 'lr 2/18/2007 12:18'!configurationComponent	^ WAFileHandlerEditor new fileHandler: self! !!WAFileHandler methodsFor: 'processing' stamp: 'lr 2/18/2007 12:16'!handleRequest: aRequest	^ self		responseAt: (aRequest url findTokens: $/)		ifAbsent: [ self notFound: aRequest url ]! !!WAFileHandler methodsFor: 'testing' stamp: 'lr 2/18/2007 12:16'!isDeployed	^ true! !!WAFileHandler methodsFor: 'accessing' stamp: 'lr 2/18/2007 12:15'!libraries	^ self libraryRootClasses gather: [ :each | each allSubclasses ]! !!WAFileHandler methodsFor: 'private' stamp: 'lr 2/18/2007 12:16'!librariesDo: aOneArgumentBlock	self libraryRootClasses do: [ :each | each allSubclassesDo: aOneArgumentBlock ]! !!WAFileHandler methodsFor: 'accessing' stamp: 'pmm 7/20/2007 06:52'!libraryAt: aSymbol ifAbsent: aBlock	self librariesDo: [ :each |		(each handlesFolder: aSymbol)			ifTrue: [ ^ each ] ].	^ aBlock value! !!WAFileHandler methodsFor: 'private' stamp: 'pmm 7/20/2007 06:54'!libraryRootClasses	^ WALibrary subclasses! !!WAFileHandler methodsFor: 'private' stamp: 'lr 2/18/2007 12:17'!notFound: aString	^ WAResponse notFound: aString! !!WAFileHandler methodsFor: 'private' stamp: 'pmm 7/21/2007 23:19'!responseAt: aPath ifAbsent: aBlock	| libraryName fileName libraryClass |	libraryName := aPath at: aPath size - 1.	fileName := aPath last.	libraryClass := self		libraryAt: libraryName asSymbol		ifAbsent: [ ^ aBlock value ].	^ libraryClass		documentAt: fileName		ifAbsent: aBlock! !!WAApplication class methodsFor: 'accessing' stamp: 'lr 11/16/2006 18:38'!description	^ 'Application'! !!WAApplication methodsFor: 'libraries' stamp: 'mb 2/17/2007 23:43'!addLibrary: aClass	self libraries add: aClass.	self announceChangeOf: #library with: #add->aClass.	^aClass! !!WAApplication methodsFor: 'accessing' stamp: 'lr 2/12/2007 22:14'!baseUrl	| serverPath |	serverPath := self serverPath.	^ (serverPath isNil		ifTrue: [ super baseUrl ]		ifFalse: [ WAUrl new addToPath: serverPath ])			scheme: self serverProtocol;			hostname: self serverHostname;			port: self serverPort;			yourself! !!WAApplication methodsFor: 'preferences' stamp: 'lr 10/28/2007 14:42'!configuration	^ configuration ifNil: [configuration := WAUserConfiguration new addAncestor: self defaultAncestor]! !!WAApplication methodsFor: 'accessing' stamp: 'mb 6/7/2007 14:06'!configurationComponent	"Return an initialized component that can configure the receiver,	return nil if no configuration is supported"	^ WAApplicationEditor new application: self! !!WAApplication methodsFor: 'preferences' stamp: 'lr 8/1/2007 20:19'!defaultAncestor	^ WARenderLoopConfiguration new! !!WAApplication methodsFor: 'accessing' stamp: 'pmm 2/14/2007 09:32'!defaultLibraries	^ Array with: WAStandardFiles! !!WAApplication methodsFor: 'configuration' stamp: 'lr 2/12/2007 22:02'!deploymentMode	^ self preferenceAt: #deploymentMode! !!WAApplication methodsFor: 'accessing' stamp: 'pmm 5/31/2008 10:50'!description	^ self rootComponent isNil		ifTrue: [ '' ]		ifFalse: [ self rootComponent description ]! !!WAApplication methodsFor: 'request handling' stamp: 'lr 2/12/2007 20:47'!handleDefaultRequest: aRequest	^ (self sessionClass new setParent: self) handleRequest: aRequest! !!WAApplication methodsFor: 'request handling' stamp: 'kph 7/11/2007 10:23'!handleExpiredRequest: aRequest	| response |	response := super handleExpiredRequest: aRequest.	(aRequest cookieAt: self handlerCookieName) isNil		ifFalse: [ response deleteCookieAt: self handlerCookieName ].	^ response! !!WAApplication methodsFor: 'request handling' stamp: 'lr 10/28/2007 14:42'!handleRequest: aRequest	(aRequest cookieAt: self handlerCookieName) ifNotNilDo: [ :value |		aRequest fields			at: self handlerField			ifAbsentPut: [ value ] ].	^ super handleRequest: aRequest! !!WAApplication methodsFor: 'accessing' stamp: 'lr 7/10/2007 19:47'!handlerCookieName	^ self name! !!WAApplication methodsFor: 'testing' stamp: 'mb 4/5/2006 20:26'!isApplication	^true! !!WAApplication methodsFor: 'testing' stamp: 'lr 2/18/2007 12:16'!isDeployed	^ self rootComponent isDeployed! !!WAApplication methodsFor: 'accessing' stamp: 'avi 6/24/2004 00:29'!libraries	^ libraries ifNil: [libraries := OrderedCollection withAll: self defaultLibraries]! !!WAApplication methodsFor: 'configuration' stamp: 'lr 2/12/2007 22:03'!login	^ self preferenceAt: #login! !!WAApplication methodsFor: 'configuration' stamp: 'lr 2/12/2007 22:03'!password	^ self preferenceAt: #password! !!WAApplication methodsFor: 'copying' stamp: 'lr 12/12/2006 11:18'!postCopy	super postCopy.	configuration := configuration copy.	libraries := libraries copy! !!WAApplication methodsFor: 'preferences' stamp: 'avi 1/31/2004 12:34'!preferenceAt: aSymbol	^ self configuration valueAt: aSymbol! !!WAApplication methodsFor: 'preferences' stamp: 'mb 2/17/2007 23:43'!preferenceAt: aSymbol put: anObject	self configuration valueAt: aSymbol put: anObject.	self announceChangeOf: #preference with: aSymbol->anObject.	^anObject! !!WAApplication methodsFor: 'configuration' stamp: 'pmm 2/24/2007 19:48'!redirectHandler	^ self preferenceAt: #redirectHandler! !!WAApplication methodsFor: 'libraries' stamp: 'mb 2/17/2007 23:55'!removeLibrary: aClass	self libraries remove: aClass.	self announceChangeOf: #library with: #remove->aClass.	^aClass! !!WAApplication methodsFor: 'configuration' stamp: 'lr 2/12/2007 22:02'!resourceBaseUrl	^ self preferenceAt: #resourceBaseUrl! !!WAApplication methodsFor: 'configuration' stamp: 'lr 2/12/2007 22:03'!rootComponent	^ self preferenceAt: #rootComponent! !!WAApplication methodsFor: 'configuration' stamp: 'lr 2/12/2007 22:03'!serverHostname	^ self preferenceAt: #serverHostname! !!WAApplication methodsFor: 'configuration' stamp: 'lr 2/12/2007 22:01'!serverPath	^ self preferenceAt: #serverPath! !!WAApplication methodsFor: 'configuration' stamp: 'lr 2/12/2007 22:03'!serverPort	^ self preferenceAt: #serverPort! !!WAApplication methodsFor: 'configuration' stamp: 'lr 2/12/2007 22:03'!serverProtocol	^ self preferenceAt: #serverProtocol! !!WAApplication methodsFor: 'configuration' stamp: 'lr 10/28/2007 14:42'!sessionClass	^ self preferenceAt: #sessionClass! !!WAApplication methodsFor: 'configuration' stamp: 'lr 2/12/2007 22:03'!sessionExpirySeconds	^ self preferenceAt: #sessionExpirySeconds! !!WAApplication methodsFor: 'request handling' stamp: 'lr 4/9/2007 10:51'!updateRoot: anHtmlRoot	self libraries do: [ :each | each default updateRoot: anHtmlRoot ]! !!WAApplication methodsFor: 'request handling' stamp: 'lr 4/15/2007 16:21'!updateUrl: anUrl! !!WAApplication methodsFor: 'configuration' stamp: 'lr 7/10/2007 19:49'!useSessionCookie	^ self preferenceAt: #useSessionCookie! !!WAApplication methodsFor: 'libraries' stamp: 'pmm 8/14/2007 07:21'!writeLibrariesToDisk	"Write to disk all the librares of the receiver in a subfolder of the Smalltalk image folder.	see WALibrary >> writeToDisk for more information."	self libraries do:[ :each |		each deployFiles ]! !!WARegistry class methodsFor: 'initialization' stamp: 'lr 3/19/2007 15:34'!clearAllHandlers	self allSubInstancesDo: [ :each | each clearHandlers ]! !!WARegistry methodsFor: 'public' stamp: 'pmm 7/5/2007 19:32'!clearHandlers	| handlers |	self mutex critical: [		handlers := handlersByKey.		handlersByKey := SeasidePlatformSupport reducedConflictDictionary new.		keysByHandler := SeasidePlatformSupport reducedConflictDictionary new ].	handlers ifNotNil: [		[ handlers do: [ :each | each unregistered ] ]			fork ]! !!WARegistry methodsFor: 'public' stamp: 'lr 2/12/2007 20:40'!ensureKeyForHandler: anObject	^ (self keyOrNilForHandler: anObject) ifNil: [ self registerRequestHandler: anObject ]! !!WARegistry methodsFor: 'private' stamp: 'lr 2/22/2006 08:41'!expiryPathFor: aRequest	^ aRequest url! !!WARegistry methodsFor: 'private' stamp: 'ab 5/18/2003 12:29'!handleDefaultRequest: aRequest	self subclassResponsibility! !!WARegistry methodsFor: 'private' stamp: 'lr 8/24/2008 10:29'!handleExpiredRequest: aRequest	| url |	aRequest isXmlHttpRequest		ifTrue: [ ^ WAResponse new forbidden ].	url := self baseUrl path: OrderedCollection new.	url addToPath: (self expiryPathFor: aRequest).	url takeServerParametersFromRequest: aRequest.	aRequest isGet ifTrue: [		aRequest fields keysAndValuesDo: [ :key :value |			(url isSeasideField: key)				ifFalse: [ url addParameter: key value: value ] ] ].	^ self redirectResponseFor: url! !!WARegistry methodsFor: 'private' stamp: 'mb 1/27/2006 15:52'!handleKeyRequest: aRequest	| key handler keyString |	"Under some circumstances, HTTP fields are collections of values"	key :=	[keyString := aRequest at: self handlerField.			(keyString isKindOf: OrderedCollection) ifTrue: [keyString := keyString first].			WAExternalID fromString: keyString] on: Error do: [:e | nil].	handler := handlersByKey at: key ifAbsent: [nil].	^ (handler notNil and: [handler isActive])		ifTrue: [handler handleRequest: aRequest]		ifFalse: [self handleExpiredRequest: aRequest]! !!WARegistry methodsFor: 'public' stamp: 'lr 10/28/2007 14:42'!handleRequest: aRequest	^ (aRequest fields includesKey: self handlerField)		ifTrue: [ self handleKeyRequest: aRequest ]		ifFalse: [ self handleDefaultRequest: aRequest ]! !!WARegistry methodsFor: 'private' stamp: 'avi 3/22/2004 13:04'!handlerField	^ '_s'! !!WARegistry methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!initialize	super initialize.	self clearHandlers! !!WARegistry methodsFor: 'private' stamp: 'pmm 2/13/2007 07:21'!isSeasideField: aString	^ aString notEmpty		and: [ aString first = $_ ]! !!WARegistry methodsFor: 'private' stamp: 'lr 2/12/2007 20:43'!keyOrNilForHandler: anObject	^ self mutex critical: [ keysByHandler at: anObject ifAbsent: [ nil ] ]! !!WARegistry methodsFor: 'private' stamp: 'pmm 7/8/2007 16:45'!mutex	^ mutex ifNil: [ mutex := SeasidePlatformSupport semaphoreClass forMutualExclusion ]! !!WARegistry methodsFor: 'copying' stamp: 'lr 10/28/2007 14:42'!postCopy	super postCopy.	mutex := nil.	self clearHandlers! !!WARegistry methodsFor: 'private' stamp: 'pmm 2/24/2007 21:37'!redirectResponseFor: aUrl	^ WAResponse redirectTo: aUrl displayString! !!WARegistry methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!registerRequestHandler: anObject	| key |	key := WAExternalID new: 16.	self shouldCollectHandlers		ifTrue: [ self unregisterExpiredHandlers ].	self mutex critical: [		handlersByKey at: key put: anObject.		keysByHandler at: anObject put: key ].	^ key! !!WARegistry methodsFor: 'private' stamp: 'lr 3/19/2007 19:32'!shouldCollectHandlers	^ handlersByKey size \\ 10 = 0! !!WARegistry methodsFor: 'private' stamp: 'eam 11/7/2007 15:05'!unregisterExpiredHandlers	"Private - Unregisters the receiver expired handlers."	| expired newHandlersByKey newKeysByHandler |	expired := OrderedCollection new.	newHandlersByKey := SeasidePlatformSupport reducedConflictDictionary new.	newKeysByHandler := SeasidePlatformSupport reducedConflictDictionary new.	self mutex critical: [		handlersByKey keysAndValuesDo: [ :key :value |			value isActive				ifFalse: [ expired add: value ]				ifTrue: [					newHandlersByKey at: key put: value.					newKeysByHandler at: value put: key ] ].		handlersByKey := newHandlersByKey.		keysByHandler := newKeysByHandler ].	[ expired do: [ :each | each unregistered ] ]		fork! !!WARegistry methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!unregistered	super unregistered.	self clearHandlers! !!WARegistry methodsFor: 'public' stamp: 'lr 2/12/2007 20:46'!urlForRequestHandler: anObject	| key url |	key := self ensureKeyForHandler: anObject.	url := self baseUrl.	url addParameter: self handlerField value: key displayString.	^ url! !!WAExpiringHandler methodsFor: 'defaults' stamp: 'avi 1/23/2004 12:20'!defaultTimeoutSeconds	^ 600! !!WAExpiringHandler methodsFor: 'actions' stamp: 'avi 1/23/2004 12:18'!expire	expired := true! !!WAExpiringHandler methodsFor: 'testing' stamp: 'lr 2/12/2007 19:41'!expired	^ expired! !!WAExpiringHandler methodsFor: 'processing' stamp: 'avi 1/23/2004 14:08'!handleRequest: aRequest	lastAccess := Time totalSeconds.	^ self incomingRequest: aRequest! !!WAExpiringHandler methodsFor: 'processing' stamp: 'lr 10/28/2007 14:42'!incomingRequest: aRequest	self subclassResponsibility! !!WAExpiringHandler methodsFor: 'initialization' stamp: 'mb 4/23/2006 18:39'!initialize	super initialize.	expired := false! !!WAExpiringHandler methodsFor: 'testing' stamp: 'lr 2/12/2007 19:42'!isActive	^ self expired not and: [ self secondsSinceLastAccess < self timeoutSeconds ]! !!WAExpiringHandler methodsFor: 'accessing' stamp: 'lr 2/27/2007 10:10'!lastAccess	^ lastAccess ifNil: [ lastAccess := Time totalSeconds ]! !!WAExpiringHandler methodsFor: 'accessing' stamp: 'avi 1/23/2004 12:19'!secondsSinceLastAccess	^ Time totalSeconds - self lastAccess! !!WAExpiringHandler methodsFor: 'accessing' stamp: 'lr 2/27/2007 10:10'!timeoutSeconds	^ timeout ifNil: [ timeout := self defaultTimeoutSeconds ]! !!WAExpiringHandler methodsFor: 'accessing' stamp: 'avi 1/23/2004 12:20'!timeoutSeconds: aNumber	timeout := aNumber! !!WAExpirySession class methodsFor: 'accessing' stamp: 'avi 9/30/2004 16:30'!created	^ Created! !!WAExpirySession class methodsFor: 'class initialization' stamp: 'avi 9/30/2004 16:24'!initialize	self resetCounters! !!WAExpirySession class methodsFor: 'actions' stamp: 'lr 10/28/2007 14:42'!resetCounters	Unregistered := 0.	Created := 0! !!WAExpirySession class methodsFor: 'accessing' stamp: 'avi 9/30/2004 16:30'!unregistered	^ Unregistered! !!WAExpirySession methodsFor: 'initialize-release' stamp: 'avi 9/30/2004 16:24'!initialize	super initialize.	Created := Created + 1! !!WAExpirySession methodsFor: 'subclass responsibilities' stamp: 'lr 2/12/2007 19:37'!unregistered	super unregistered.	Unregistered := Unregistered + 1! !!WASession methodsFor: 'accessing' stamp: 'lr 4/15/2007 15:55'!actionField	^ '_k'! !!WASession methodsFor: 'accessing' stamp: 'lr 8/20/2007 22:50'!actionUrlForContinuation: aContinuation	^ self actionUrlForKey: (continuations store: (lastContinuation := aContinuation))! !!WASession methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!actionUrlForKey: aString	| url |	url := self application urlForRequestHandler: self.	self useSessionCookie		ifTrue: [ url parameters removeKey: self application handlerField ].	url takeServerParametersFromRequest: currentRequest.	url addParameter: self actionField value: aString.	jumpTo ifNotNil: [ url fragment: jumpTo ].	^ url! !!WASession methodsFor: 'scripts' stamp: 'lr 4/15/2007 15:55'!addLoadScript: aString	^ (scripts ifNil: [scripts := OrderedCollection new]) add: aString! !!WASession methodsFor: 'accessing' stamp: 'lr 4/15/2007 15:55'!application	^ parent! !!WASession methodsFor: 'accessing' stamp: 'lr 4/15/2007 15:55'!baseUrl	^ self parent baseUrl! !!WASession methodsFor: 'http' stamp: 'lr 4/15/2007 15:55'!charSet	^WAResponse defaultValueForCharSet. "utf-8"! !!WASession methodsFor: 'private' stamp: 'lr 7/10/2007 19:34'!checkCookiesField	^ '_c'! !!WASession methodsFor: 'scripts' stamp: 'lr 4/15/2007 15:55'!clearJumpTo	jumpTo := nil! !!WASession methodsFor: 'scripts' stamp: 'lr 4/15/2007 15:55'!clearLoadScripts	scripts := nil! !!WASession methodsFor: 'responding' stamp: 'pmm 5/23/2007 23:50'!closePopup	^ self respond: [ :url |		WAResponse new			nextPutAll: '<html><script>';			nextPutAll: 'self.close();';			nextPutAll: 'self.opener.location=self.opener.location';			nextPutAll: '</script></html>';			yourself]! !!WASession methodsFor: 'responding' stamp: 'pmm 5/23/2007 23:50'!closePopupAndContinue	^ self respond: [ :url |		WAResponse new			nextPutAll: '<html><script>';			nextPutAll: 'self.close();';			nextPutAll: 'self.opener.location=', url displayString printString;			nextPutAll: '</script></html>';			yourself]! !!WASession methodsFor: 'responding' stamp: 'pmm 5/23/2007 23:50'!closePopupWithoutReloadingOpener	^ self respond: [ :url |		WAResponse new			nextPutAll: '<html><script>';			nextPutAll: 'self.close();';			nextPutAll: '</script></html>';			yourself]! !!WASession methodsFor: 'http' stamp: 'lr 4/15/2007 15:55'!contentType	^ self mimeType, ';charset=', self charSet "text/html; charset=utf-8"! !!WASession methodsFor: 'accessing' stamp: 'pmm 5/27/2007 21:54'!currentRequest	"Returns the current http request, instance of WARequest"	^ currentRequest! !!WASession methodsFor: 'expiring' stamp: 'lr 4/15/2007 15:55'!defaultTimeoutSeconds	^ (self application isNil or: [ self application sessionExpirySeconds isNil ])		ifFalse: [ self application sessionExpirySeconds ]		ifTrue: [ super defaultTimeoutSeconds ]! !!WASession methodsFor: 'accessing-preferences' stamp: 'lr 4/18/2007 09:25'!errorHandler	^ self application preferenceAt: #errorHandler! !!WASession methodsFor: 'request handling' stamp: 'lr 4/15/2007 15:55'!fieldsAt: key	^ self currentRequest at: key! !!WASession methodsFor: 'request handling' stamp: 'lr 4/15/2007 15:55'!fieldsAt: key ifAbsent: aBlock	^ self currentRequest at: key ifAbsent: aBlock! !!WASession methodsFor: 'request handling' stamp: 'lr 4/15/2007 15:55'!fieldsAt: key ifPresent: aBlock	^ self currentRequest at: key ifPresent: aBlock! !!WASession methodsFor: 'request handling' stamp: 'lr 4/17/2007 23:18'!incomingRequest: aRequest	((aRequest fields includesKey: 'terminate')		and: [self application deploymentMode not])			ifTrue: [				monitor terminate.				^ WAResponse new nextPutAll: 'Process terminated' ].	^ monitor		critical: [ self responseForRequest: aRequest ]		ifError: [ :error | self errorHandler internalError: error ]! !!WASession methodsFor: 'initializing' stamp: 'lr 7/10/2007 19:28'!initialize	super initialize.	continuations := WALRUCache new.	monitor := WAProcessMonitor new.	cookiesEnabled := true! !!WASession methodsFor: 'scripts' stamp: 'lr 4/15/2007 15:55'!jumpToAnchor: aString	jumpTo := aString! !!WASession methodsFor: 'accessing-preferences' stamp: 'lr 4/18/2007 09:25'!mainClass	^ self application preferenceAt: #mainClass! !!WASession methodsFor: 'http' stamp: 'lr 4/15/2007 15:55'!mimeType	^WAResponse defaultValueForMimeType. "text/html"! !!WASession methodsFor: 'responding' stamp: 'lr 4/15/2007 15:55'!newSessionUrl	^ self baseUrl takeServerParametersFromRequest: currentRequest! !!WASession methodsFor: 'scripts' stamp: 'lr 4/15/2007 15:55'!onLoadScripts	^ scripts ifNil: [#()]! !!WASession methodsFor: 'responding' stamp: 'lr 5/18/2007 22:23'!onRespond: aBlock	| previous |	previous := escapeContinuation.	escapeContinuation := [ :response |		aBlock value: response.		previous value: response ]! !!WASession methodsFor: 'accessing' stamp: 'mb 5/7/2007 17:11'!outputDocumentClass	"To be subclassed as needed"	^ WAHtmlStreamDocument! !!WASession methodsFor: 'expiring' stamp: 'lr 10/11/2007 11:03'!pageExpired	((lastContinuation isKindOf: WASessionContinuation) and: [ lastContinuation states notNil ])		ifTrue:  [ lastContinuation states restore ].	self respond: [ :url |		self application redirectHandler			redirectPageExpiredTo: url ].	WAPageExpired raiseSignal! !!WASession methodsFor: 'responding' stamp: 'lr 4/15/2007 15:55'!pageIntentionallyLeftBlank	self returnResponse: WAResponse new! !!WASession methodsFor: 'processing' stamp: 'lr 10/28/2007 14:42'!performRequest: aRequest	| key continuation |	key := aRequest fields		at: self actionField		ifAbsent: [ ^ self start: aRequest ].	((aRequest fields includesKey: self checkCookiesField)		and: [ aRequest cookies isEmpty ])			ifTrue: [ cookiesEnabled := false ].	(key isKindOf: OrderedCollection)		ifTrue: [ key := key first ].	continuation := continuations		at: key		ifAbsent: [ ^ self unknownRequest: aRequest ].	^ continuation value: aRequest! !!WASession methodsFor: 'redirecting' stamp: 'lr 5/10/2007 22:20'!redirect	^ self respond: [ :url | self redirectResponseFor: url ]! !!WASession methodsFor: 'redirecting' stamp: 'lr 10/11/2007 09:44'!redirectResponseFor: aUrl	^ self application redirectHandler redirectTo: aUrl! !!WASession methodsFor: 'redirecting' stamp: 'lr 5/10/2007 22:21'!redirectTo: anUrl	self returnResponse: (self redirectResponseFor: anUrl)! !!WASession methodsFor: 'redirecting' stamp: 'lr 7/10/2007 19:38'!redirectWithCookie: aCookie	| response |	self respond: [ :url |		url addParameter: self checkCookiesField.		response := self redirectResponseFor: url.		response addCookie: aCookie.		response ]! !!WASession methodsFor: 'redirecting' stamp: 'lr 5/10/2007 22:22'!redirectWithMessage: aString delay: aNumber	self respond: [ :url |		WAResponse			refreshWithMessage: aString			location: url displayString			delay: aNumber ]! !!WASession methodsFor: 'deprecated' stamp: 'lr 6/5/2007 21:37'!registerObjectForBacktracking: anObject	self deprecatedApi: '#registerObjectForBacktracking: is not supported, implement #states to backtrack your object'! !!WASession methodsFor: 'responding' stamp: 'lr 10/22/2007 20:53'!respond: aBlock	^ ResponseContinuation currentDo: [ :cc | self respond: aBlock onAnswer: cc ]! !!WASession methodsFor: 'responding' stamp: 'lr 5/10/2007 22:59'!respond: aBlock onAnswer: aContinuation	| url response |	url := self actionUrlForContinuation: aContinuation.	response := aBlock value: url.	self returnResponse: response! !!WASession methodsFor: 'request handling' stamp: 'lr 4/15/2007 15:55'!responseForRequest: aRequest	currentRequest := aRequest.	^ self withEscapeContinuation: [		WACurrentSession			use: self			during: [				self withErrorHandler: [					self performRequest: aRequest ] ] ]! !!WASession methodsFor: 'responding' stamp: 'pmm 5/27/2007 21:52'!returnResponse: aResponse	"aborts all further processing and directly returns aResponse	aResponse instance of WAResponse"	escapeContinuation value: aResponse! !!WASession methodsFor: 'responding' stamp: 'lr 4/15/2007 15:55'!script: aString	self redirectWithMessage: '<script>', aString, '</script>' delay: 0! !!WASession methodsFor: 'accessing' stamp: 'lr 7/10/2007 19:47'!sessionCookie	^ WACookie key: self application handlerCookieName value: (self application ensureKeyForHandler: self) displayString! !!WASession methodsFor: 'processing' stamp: 'lr 10/28/2007 14:42'!start: aRequest	self useSessionCookie		ifTrue: [ self redirectWithCookie: self sessionCookie ].	^ self mainClass new start: aRequest! !!WASession methodsFor: 'request handling' stamp: 'lr 4/15/2007 15:55'!unknownRequest: aRequest	self start: aRequest! !!WASession methodsFor: 'private' stamp: 'lr 4/15/2007 15:55'!unregistered	super unregistered.	self expire! !!WASession methodsFor: 'updating' stamp: 'pmm 8/28/2008 09:23'!updateRoot: anHtmlRoot	self application updateRoot: anHtmlRoot.	anHtmlRoot meta contentType: self mimeType charset: self charSet.	anHtmlRoot meta responseHeaderName: 'Content-Script-Type'; content: 'text/javascript'.	anHtmlRoot htmlAttributes		at: 'xmlns' put: 'http://www.w3.org/1999/xhtml';		at: 'xml:lang' put: 'en';		at: 'lang' put: 'en'.	anHtmlRoot beXhtml10Strict.	anHtmlRoot title: 'Seaside'! !!WASession methodsFor: 'updating' stamp: 'lr 4/20/2007 20:14'!updateStates: aSnapshot! !!WASession methodsFor: 'updating' stamp: 'lr 4/15/2007 16:27'!updateUrl: anUrl	self application updateUrl: anUrl! !!WASession methodsFor: 'accessing-preferences' stamp: 'lr 7/10/2007 19:33'!useSessionCookie	^ cookiesEnabled and: [ self application useSessionCookie ]! !!WASession methodsFor: 'request handling' stamp: 'lr 4/20/2007 14:53'!withErrorHandler: aBlock	^ [aBlock		on: Error		do: [:e | self errorHandler handleError: e. WAPageExpired raiseSignal]]		on: Warning		do: [:w | self errorHandler handleWarning: w. WAPageExpired raiseSignal]! !!WASession methodsFor: 'request handling' stamp: 'avi 10/26/2004 15:40'!withEscapeContinuation: aBlock	^ EscapeContinuation currentDo:			[:cc |			escapeContinuation := cc.			aBlock value.			self pageIntentionallyLeftBlank]! !!WANotFoundHandler methodsFor: 'actions' stamp: 'avi 5/18/2004 16:16'!handleRequest: aRequest	^ WAResponse notFound: aRequest url! !!WARequestHandler class methodsFor: 'instance-creation' stamp: 'pmm 4/19/2006 18:00'!new	^ self basicNew initialize! !!WARequestHandler methodsFor: 'accessing' stamp: 'lr 2/12/2007 19:33'!description	"Answer a descriptive text of the receiver."	^ String new! !!WARequestHandler methodsFor: 'processing' stamp: 'lr 10/28/2007 14:42'!handleRequest: aRequest	"Handle aRequest and answer a response."	self subclassResponsibility! !!WARequestHandler methodsFor: 'initialization' stamp: 'pmm 11/2/2005 23:17'!initialize! !!WARequestHandler methodsFor: 'testing' stamp: 'avi 7/23/2004 15:11'!isActive	^ true! !!WARequestHandler methodsFor: 'testing' stamp: 'mb 5/26/2006 08:49'!isApplication	^ false! !!WARequestHandler methodsFor: 'testing' stamp: 'mb 5/26/2006 08:49'!isDispatcher	^ false! !!WARequestHandler methodsFor: 'testing' stamp: 'mb 5/26/2006 08:48'!isEntryPoint	^ false! !!WARequestHandler methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!parent	"Answer the parent request handler of the receiver."	^ parent! !!WARequestHandler methodsFor: 'copying' stamp: 'lr 2/16/2007 15:06'!postCopy	super postCopy.	parent := nil! !!WARequestHandler methodsFor: 'initialization' stamp: 'lr 2/12/2007 20:50'!setParent: aRequestHandler	parent := aRequestHandler! !!WARequestHandler methodsFor: 'processing' stamp: 'lr 2/12/2007 21:12'!unregistered! !!WAResponse class methodsFor: 'instance creation' stamp: 'avi 5/18/2004 16:14'!basicAuthWithRealm: aString	^ self new basicAuthenticationRealm: aString! !!WAResponse class methodsFor: 'defaults' stamp: 'mb 3/12/2007 13:49'!defaultHttpVersion	^'HTTP/1.0'! !!WAResponse class methodsFor: 'defaults' stamp: 'pmm 3/1/2007 06:34'!defaultValueForCharSet	^'utf-8'! !!WAResponse class methodsFor: 'defaults' stamp: 'pmm 3/1/2007 06:35'!defaultValueForContentType	^ self defaultValueForMimeType, ';charset=', self defaultValueForCharSet! !!WAResponse class methodsFor: 'defaults' stamp: 'pmm 3/1/2007 06:34'!defaultValueForMimeType	^'text/html'! !!WAResponse class methodsFor: 'instance creation' stamp: 'lr 5/28/2008 16:11'!document: anObject mimeType: mimeType	|doc|	doc := anObject asMIMEDocumentType: mimeType.	^ self new		cacheForever;		contentType: (mimeType ifNil: [doc contentType]);		nextPutAll: doc content;		yourself! !!WAResponse class methodsFor: 'instance creation' stamp: 'avi 9/22/2004 21:02'!document: anObject mimeType: mimeString fileName: fileString	^ (self document: anObject mimeType: mimeString)		attachmentWithFileName: fileString;		yourself! !!WAResponse class methodsFor: 'instance creation' stamp: 'pmm 6/29/2008 16:35'!forbidden: locationString	| response content |	response := self new forbidden.	content := WARenderCanvas builder		fullDocument: true;		rootBlock: [ :root |			root title: 'Forbidden' ];		render: [ :html |			html heading level1; with: [				html render: 'Error: you are forbidden to access "'.				html render: locationString.				html render: '"' ] ].	response nextPutAll: content.	^ response! !!WAResponse class methodsFor: 'instance creation' stamp: 'pmm 11/1/2007 21:30'!internalError: anError	| response content |	response := self new internalError.	content := WARenderCanvas builder		fullDocument: true;		rootBlock: [ :root |			root title: 'Internal Error' ];		render: [ :html |			html heading level1; with: 'Internal Error'.			html heading level2; with: anError description.			(SeasidePlatformSupport walkbackStringsFor: anError)				do: [ :each | html text: each ]				separatedBy: [ html break ] ].	response nextPutAll: content.	^ response! !!WAResponse class methodsFor: 'instance creation' stamp: 'avi 5/18/2004 16:14'!new	^ self basicNew initialize! !!WAResponse class methodsFor: 'instance creation' stamp: 'pmm 6/29/2008 16:36'!notFound: locationString	| response content |	response := self new notFound.	content := WARenderCanvas builder		fullDocument: true;		rootBlock: [ :root |			root title: 'Not Found' ];		render: [ :html |			html heading level1; with: [				html render: 'Error: "'.				html render: locationString.				html render: '" not found' ] ].	response nextPutAll: content.	^ response! !!WAResponse class methodsFor: 'responding' stamp: 'avi 5/18/2004 16:15'!redirectTo: locationString	^ self new redirectTo: locationString! !!WAResponse class methodsFor: 'instance creation' stamp: 'lr 10/28/2007 14:42'!refreshWithMessage: aString location: locationString delay: aNumber	| document |	document := WARenderCanvas builder		fullDocument: true;		rootBlock: [ :root |			root redirectTo: locationString delay: aNumber ];		render: [ :html |			html heading level1				with: aString.			html text: 'You are being redirected to '.			html anchor				url: locationString;				with: locationString ].	^ self new nextPutAll: document! !!WAResponse class methodsFor: 'instance creation' stamp: 'avi 9/10/2005 17:31'!root: anHtmlRoot render: renderBlock	| canvas |	canvas := WAStaticHtmlCanvas root: anHtmlRoot.	renderBlock value: canvas.	^ self new nextPutAll: canvas document stream contents! !!WAResponse methodsFor: 'accessing-cookies' stamp: 'lr 5/23/2007 11:40'!addCookie: aCookie	cookies ifNil: [ cookies := Set new ].	cookies add: aCookie! !!WAResponse methodsFor: 'convenience' stamp: 'pmm 4/19/2006 09:30'!attachmentWithFileName: aString	self headerAt: 'Content-Disposition' put: 'attachment; filename="', aString, '"'! !!WAResponse methodsFor: 'status' stamp: 'avi 5/18/2004 14:25'!authenticationFailed	self status: 401! !!WAResponse methodsFor: 'convenience' stamp: 'avi 5/18/2004 14:25'!basicAuthenticationRealm: aString	self headerAt: 'WWW-Authenticate' put: ('Basic realm="',aString,'"').	self authenticationFailed! !!WAResponse methodsFor: 'convenience' stamp: 'lr 10/28/2007 14:42'!beXML	contentType := contentType copyReplaceAll: '/html' with: '/xml'! !!WAResponse methodsFor: 'convenience' stamp: 'lr 5/31/2008 14:32'!cacheForever	self headerAt: 'Expires' put: 'Sat, 01 Jan 2095 12:00:00 GMT'! !!WAResponse methodsFor: 'accessing' stamp: 'ab 7/3/2002 21:58'!contentType	^ contentType! !!WAResponse methodsFor: 'accessing' stamp: 'ab 7/3/2002 21:58'!contentType: mimeTypeString	contentType := mimeTypeString! !!WAResponse methodsFor: 'accessing' stamp: 'avi 4/13/2004 21:21'!contents	^ stream reset! !!WAResponse methodsFor: 'accessing' stamp: 'avi 4/13/2004 21:21'!contents: aStream	stream := aStream! !!WAResponse methodsFor: 'accessing-cookies' stamp: 'lr 5/23/2007 11:40'!cookieAt: key put: value	^ self addCookie: (WACookie key: key value: value)! !!WAResponse methodsFor: 'accessing-cookies' stamp: 'lr 5/23/2007 11:40'!cookies	^ cookies ifNil: [ #() ]! !!WAResponse methodsFor: 'accessing-cookies' stamp: 'lr 10/28/2007 14:42'!deleteCookieAt: key	"Delete the cookie in the browser"	self addCookie: ((WACookie key: key value: '')						expireIn: (Duration days: -10000);						yourself)! !!WAResponse methodsFor: 'convenience' stamp: 'lr 5/31/2008 14:31'!doNotCache	self headerAt: 'Expires' put: 'Wed, 11 Jun 1980 12:00:00 GMT'. "HTTP 1.0"	self headerAt: 'Cache-Control' put: 'no-cache, must-revalidate'. "HTTP 1.1"	self headerAt: 'Pragma' put: 'no-cache' "Proxy Servers"! !!WAResponse methodsFor: 'status' stamp: 'avi 5/9/2005 13:14'!forbidden	self status: 403! !!WAResponse methodsFor: 'accessing-headers' stamp: 'lr 5/23/2007 11:40'!headerAt: key put: value	headers ifNil: [ headers := OrderedCollection new ].	headers add: (Association key: key value: value)! !!WAResponse methodsFor: 'accessing-headers' stamp: 'lr 5/23/2007 11:40'!headers	^ headers ifNil: [ #() ]! !!WAResponse methodsFor: 'convenience' stamp: 'pmm 5/1/2007 09:42'!httpVersion	^self class defaultHttpVersion! !!WAResponse methodsFor: 'initialize-release' stamp: 'lr 10/28/2007 14:42'!initialize	| session |	stream := SeasidePlatformSupport readWriteStream.	status := 200.	session := WACurrentSession value.	contentType := session isNil				ifFalse: [session contentType]				ifTrue: [self class defaultValueForContentType]! !!WAResponse methodsFor: 'status' stamp: 'avi 5/18/2004 15:57'!internalError	self status: 500! !!WAResponse methodsFor: 'streaming' stamp: 'ab 7/7/2003 11:12'!nextPut: aCharacter	stream nextPut: aCharacter asCharacter! !!WAResponse methodsFor: 'streaming' stamp: 'ab 7/7/2003 11:12'!nextPutAll: aString	aString do: [:ea | self nextPut: ea]! !!WAResponse methodsFor: 'status' stamp: 'avi 5/18/2004 14:25'!notFound	self status: 404! !!WAResponse methodsFor: 'printing' stamp: 'lr 5/23/2007 11:39'!printOn: aStream	super printOn: aStream.	aStream space; nextPutAll: self status displayString! !!WAResponse methodsFor: 'status' stamp: 'avi 5/18/2004 14:26'!redirect	self status: 302! !!WAResponse methodsFor: 'convenience' stamp: 'lr 10/28/2007 14:42'!redirectTo: aString	self headerAt: 'Location' put: aString.	self redirect! !!WAResponse methodsFor: 'initialize-release' stamp: 'tbn 7/20/2006 17:31'!release	stream := cookies := headers := nil.	super release! !!WAResponse methodsFor: 'streaming' stamp: 'lr 5/23/2007 11:13'!space	stream space! !!WAResponse methodsFor: 'accessing' stamp: 'ab 7/3/2002 21:50'!status	^ status! !!WAResponse methodsFor: 'accessing' stamp: 'lr 5/23/2007 12:04'!status: aNumber	status := aNumber! !!WAResponse methodsFor: 'accessing' stamp: 'avi 2/6/2004 15:28'!stream	^ stream! !!WAResponse methodsFor: 'accessing' stamp: 'avi 5/18/2004 14:28'!stream: aStream	stream := aStream! !!WAResponse methodsFor: 'writing' stamp: 'lr 9/3/2007 21:21'!writeHeadersOn: aStream	self headers associationsDo: [ :assoc |		aStream nextPutAll: assoc key; nextPutAll: ': '; nextPutAll: assoc value displayString.		aStream crlf ].	cookies ifNotNil: [		cookies do: [ :each |			aStream nextPutAll: 'Set-Cookie: '.			each writeOn: aStream.			aStream crlf ] ].	aStream nextPutAll: 'Content-Type: ', self contentType.	aStream crlf! !!WAResponse methodsFor: 'writing' stamp: 'avi 1/6/2006 12:52'!writeOn: aStream	self writeStatusOn: aStream.	self writeHeadersOn: aStream.	aStream crlf.	aStream nextPutAll: stream contents! !!WAResponse methodsFor: 'writing' stamp: 'lr 10/28/2007 14:42'!writeStatusOn: aStream	aStream nextPutAll: self httpVersion; space; nextPutAll: self status displayString; crlf! !!WAStreamResponse class methodsFor: 'instance-creation' stamp: 'lr 5/23/2007 10:35'!on: aStream	^ self new stream: aStream! !!WAStreamResponse methodsFor: 'accessing' stamp: 'pmm 4/19/2006 17:32'!hasWrittenHeaders	^ writtenHeaders! !!WAStreamResponse methodsFor: 'initialization' stamp: 'mb 9/22/2006 12:26'!initialize	super initialize.	writtenHeaders := false! !!WAStreamResponse methodsFor: 'accessing' stamp: 'avi 1/6/2006 13:31'!stream	self writeOn: stream.	^ stream! !!WAStreamResponse methodsFor: 'private' stamp: 'pmm 9/30/2006 18:18'!writeOn: aStream	self hasWrittenHeaders ifFalse: [		self writeStatusOn: aStream.		self writeHeadersOn: aStream.		aStream crlf.		writtenHeaders := true ]! !!WAHtmlRoot class methodsFor: 'instance-creation' stamp: 'lr 3/27/2007 12:08'!context: aRenderingContext	^ self new setContext: aRenderingContext! !!WAHtmlRoot methodsFor: 'private' stamp: 'lr 4/20/2007 16:24'!absoluteUrlForResource: aString	^ context absoluteUrlForResource: aString! !!WAHtmlRoot methodsFor: 'adding' stamp: 'lr 10/28/2007 14:42'!add: aHtmlElement	"Add a HTML head element to the receiver."	^ headElements add: aHtmlElement! !!WAHtmlRoot methodsFor: 'adding' stamp: 'lr 10/28/2007 14:42'!addScript: aString	"Include the script aString into the receiver."	scripts ifNil: [ scripts := OrderedCollection new ].	(scripts includes: aString) ifFalse: [ scripts add: aString ]! !!WAHtmlRoot methodsFor: 'adding' stamp: 'lr 4/9/2007 10:33'!addStyle: aString	"Include the style-sheet aString into the receiver."	styles ifNil: [ styles := OrderedCollection new ].	(styles includes: aString) ifFalse: [ styles add: aString ]! !!WAHtmlRoot methodsFor: 'elements' stamp: 'lr 4/9/2007 10:30'!base	^ self add: (WABaseElement root: self)! !!WAHtmlRoot methodsFor: 'doctype' stamp: 'lr 4/9/2007 10:44'!beXhtml10Strict	self docType: '<!!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'! !!WAHtmlRoot methodsFor: 'doctype' stamp: 'lr 4/9/2007 10:45'!beXhtml10Transitional	self docType: '<!!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'! !!WAHtmlRoot methodsFor: 'doctype' stamp: 'lr 4/9/2007 10:45'!beXhtml11	self docType: '<!!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">'! !!WAHtmlRoot methodsFor: 'accessing-attributes' stamp: 'lr 3/27/2007 12:07'!bodyAttributes	^ bodyAttrs ifNil: [ bodyAttrs := WAHtmlAttributes new ]! !!WAHtmlRoot methodsFor: 'writing' stamp: 'lr 3/27/2007 13:18'!close: aDocument	self writeFootOn: aDocument! !!WAHtmlRoot methodsFor: 'convenience' stamp: 'lr 3/27/2007 13:14'!contentBase: urlString	self base url: urlString! !!WAHtmlRoot methodsFor: 'accessing' stamp: 'avi 3/27/2005 20:29'!context	^ context! !!WAHtmlRoot methodsFor: 'doctype' stamp: 'lr 3/27/2007 12:11'!docType	^ docType! !!WAHtmlRoot methodsFor: 'doctype' stamp: 'lr 10/28/2007 14:42'!docType: aString	"Set the document-type of the receiver. The table at http://www.w3.org/TR/2002/NOTE-xhtml-media-types-20020430/ summarizes the recommendation to content authors for labeling their XHTML documents:Media type				XHTML 1.0 (HTML compatible)	XHTML 1.0 (other)	XHTML Basic / 1.1	XHTML+MathMLtext/html				MAY							SHOULD NOT			SHOULD NOT			SHOULD NOTapplication/xhtml+xml	SHOULD							SHOULD				SHOULD				SHOULDapplication/xml			MAY							MAY				MAY				MAYtext/xml					MAY							MAY				MAY				MAY"	docType := aString! !!WAHtmlRoot methodsFor: 'accessing-attributes' stamp: 'lr 3/27/2007 12:07'!headAttributes	^ headAttrs ifNil: [ headAttrs := WAHtmlAttributes new ]! !!WAHtmlRoot methodsFor: 'accessing-attributes' stamp: 'lr 3/27/2007 12:07'!htmlAttributes	^ htmlAttrs ifNil: [ htmlAttrs := WAHtmlAttributes new ]! !!WAHtmlRoot methodsFor: 'elements' stamp: 'lr 10/28/2007 14:42'!if	^ WAConditionalComment root: self! !!WAHtmlRoot methodsFor: 'initialization' stamp: 'lr 3/27/2007 12:09'!initialize	headElements := OrderedCollection new.	title := docType := String new! !!WAHtmlRoot methodsFor: 'elements' stamp: 'pmm 4/6/2007 14:18'!javascript	^ self script beJavascript; yourself! !!WAHtmlRoot methodsFor: 'elements' stamp: 'lr 10/28/2007 14:42'!link	^ self add: (WALinkElement root: self)! !!WAHtmlRoot methodsFor: 'elements' stamp: 'lr 4/9/2007 10:30'!meta	^ self add: (WAMetaElement root: self)! !!WAHtmlRoot methodsFor: 'writing' stamp: 'lr 3/27/2007 13:17'!open: aDocument	self writeHeadOn: aDocument! !!WAHtmlRoot methodsFor: 'convenience' stamp: 'lr 4/9/2007 10:43'!redirectTo: aLocationString delay: aNumber	self meta redirectAfter: aNumber to: aLocationString! !!WAHtmlRoot methodsFor: 'elements' stamp: 'pmm 11/25/2007 21:57'!revealedIf	^ WARevealedConditionalComment root: self! !!WAHtmlRoot methodsFor: 'elements' stamp: 'lr 10/28/2007 14:42'!script	^ self add: (WAScriptElement root: self)! !!WAHtmlRoot methodsFor: 'initialization' stamp: 'lr 3/27/2007 12:08'!setContext: aRenderingContext	context := aRenderingContext! !!WAHtmlRoot methodsFor: 'elements' stamp: 'lr 4/9/2007 10:31'!stylesheet    ^ self link beStylesheet; beCss; yourself! !!WAHtmlRoot methodsFor: 'accessing-properties' stamp: 'lr 3/27/2007 12:11'!title	^ title! !!WAHtmlRoot methodsFor: 'accessing-properties' stamp: 'lr 3/27/2007 12:11'!title: aString	title := aString! !!WAHtmlRoot methodsFor: 'writing' stamp: 'lr 4/9/2007 10:40'!writeElementsOn: aDocument	aDocument openTag: 'title'; nextPutAll: title; closeTag: 'title'.	headElements do: [ :each | aDocument print: each ]! !!WAHtmlRoot methodsFor: 'writing' stamp: 'lr 3/27/2007 13:20'!writeFootOn: aDocument	aDocument closeTag: 'body'.	aDocument closeTag: 'html'! !!WAHtmlRoot methodsFor: 'writing' stamp: 'lr 5/16/2007 21:53'!writeHeadOn: aDocument	aDocument nextPutAll: docType.	aDocument openTag: 'html' attributes: htmlAttrs.	aDocument openTag: 'head' attributes: headAttrs.	self writeElementsOn: aDocument.	self writeStylesOn: aDocument.	self writeScriptsOn: aDocument.	aDocument closeTag: 'head'.	aDocument openTag: 'body' attributes: bodyAttrs! !!WAHtmlRoot methodsFor: 'writing' stamp: 'pmm 4/6/2007 14:18'!writeScriptsOn: aDocument	scripts ifNil: [ ^ self ].	scripts do: [ :each |		aDocument print: ((WAScriptElement root: self)			beJavascript;			document: each;			yourself) ]! !!WAHtmlRoot methodsFor: 'writing' stamp: 'pmm 4/6/2007 14:18'!writeStylesOn: aDocument	styles ifNil: [ ^ self ].	styles do: [ :each |		aDocument print: ((WALinkElement root: self)			beStylesheet; beCss;			document: each;			yourself) ]! !!WARoot class methodsFor: 'instance creation' stamp: 'avi 6/19/2004 18:05'!new	^ self basicNew initialize! !!WARoot methodsFor: 'writing' stamp: 'lr 3/27/2007 13:30'!close: aDocument! !!WARoot methodsFor: 'writing' stamp: 'lr 3/27/2007 13:30'!open: aDocument! !!WARedirectContinuation methodsFor: 'processing' stamp: 'lr 8/17/2007 09:54'!handleRequest: aRequest	self newRenderContinuation run! !!WARedirectContinuation methodsFor: 'processing' stamp: 'lr 4/20/2007 19:41'!run	self respond: [ :response | response redirectTo: self url displayString ]! !!WARenderContinuation methodsFor: 'private' stamp: 'pmm 7/11/2007 22:20'!componentsNotFound: aCollection	WAComponentsNotFoundError raiseSignal: 'Components not found while processing callbacks: ' , aCollection displayString! !!WARenderContinuation methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!context	"Answer the current context of this request."	^ context! !!WARenderContinuation methodsFor: 'processing' stamp: 'lr 5/31/2008 13:42'!handleRequest: aRequest	aRequest isXmlHttpRequest		ifTrue: [ self session onRespond: [ :r | states snapshot ] ].	self withNotificationHandler: [ self processCallbacks: aRequest ].	((self shouldRedirect: aRequest)		ifTrue: [ self newRedirectContinuation ]		ifFalse: [ self newRenderContinuation ])			run! !!WARenderContinuation methodsFor: 'creational' stamp: 'lr 4/20/2007 19:36'!newContext	^ WARenderingContext new		session: self session;		actionUrl: self url;		yourself! !!WARenderContinuation methodsFor: 'creational' stamp: 'lr 10/28/2007 14:42'!newDocumentOn: aResponse	^ WAHtmlStreamDocument new stream: aResponse stream! !!WARenderContinuation methodsFor: 'creational' stamp: 'lr 4/17/2007 23:01'!newHtmlRoot	| htmlRoot |	htmlRoot := WAHtmlRoot context: self context.	htmlRoot bodyAttributes at: 'onload' append: 'onLoad()' separator: ';'.	self updateRoot: htmlRoot.	^ htmlRoot! !!WARenderContinuation methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!processCallbacks: aRequest	| lastPosition callbackStream |	lastPosition := nil.	callbackStream := context callbackStreamForRequest: aRequest.	[ callbackStream position = lastPosition ] whileFalse: [		lastPosition := callbackStream position.		self root decorationChainDo: [ :each |			each processCallbackStream: callbackStream ] ].	callbackStream atEnd		ifFalse: [ self unprocessedCallbacks: callbackStream upToEnd ]! !!WARenderContinuation methodsFor: 'private' stamp: 'lr 4/20/2007 22:27'!processRendering: aResponse	| document htmlRoot |	document := self newDocumentOn: aResponse.	context document: document.	htmlRoot := self newHtmlRoot.	document open: htmlRoot.	self root decorationChainDo: [ :each | each renderWithContext: context ].	self writeOnLoadOn: document.	document close: htmlRoot.	context release! !!WARenderContinuation methodsFor: 'actions' stamp: 'lr 4/20/2007 19:37'!render	self session clearJumpTo.	context := self newContext.	self respond: [ :response | self processRendering: response ]! !!WARenderContinuation methodsFor: 'processing' stamp: 'lr 4/20/2007 19:41'!run	self withNotificationHandler: [ self render ]! !!WARenderContinuation methodsFor: 'testing' stamp: 'lr 4/16/2007 21:06'!shouldRedirect: aRequest	^ aRequest isGet not or: [ (aRequest fields includesKey: '_n') not ]! !!WARenderContinuation methodsFor: 'private' stamp: 'pmm 5/29/2007 16:34'!unprocessedCallbacks: aCollection	| owners |	owners := (aCollection collect: [ :each | each owner ]) asSet asArray.	self componentsNotFound: owners! !!WARenderContinuation methodsFor: 'private' stamp: 'lr 4/18/2007 00:04'!withNotificationHandler: aBlock	^ aBlock on: WARenderNotification , WAPageExpired do: [ :n | ]! !!WARenderContinuation methodsFor: 'private' stamp: 'lr 4/17/2007 23:03'!writeOnLoadOn: aDocument	| attributes |	attributes := WAHtmlAttributes new.	attributes at: 'type' put: 'text/javascript'.	aDocument openTag: 'script' attributes: attributes closed: false.	aDocument nextPutAll: '/*<!![CDATA[*/function onLoad(){'.	self session onLoadScripts		do: [ :each | aDocument nextPutAll: each displayString ]		separatedBy: [ aDocument nextPutAll: ';' ].	aDocument nextPutAll: '}/*]]>*/'.	aDocument closeTag: 'script'.	self session clearLoadScripts! !!WASessionContinuation class methodsFor: 'instance-creation' stamp: 'lr 4/20/2007 20:17'!root: aComponent	^ self new initializeWithRoot: aComponent! !!WASessionContinuation methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!application	"Answer the application to which this handler is associated."	^ self session application! !!WASessionContinuation methodsFor: 'processing' stamp: 'lr 4/20/2007 19:34'!handleRequest: aRequest	self subclassResponsibility! !!WASessionContinuation methodsFor: 'initialization' stamp: 'lr 4/20/2007 20:17'!initializeWithRoot: aComponent	root := aComponent! !!WASessionContinuation methodsFor: 'creational' stamp: 'lr 10/28/2007 14:42'!newRedirectContinuation	"Answer a new redirect handler."	^ (self application preferenceAt: #redirectContinuationClass) root: self root! !!WASessionContinuation methodsFor: 'creational' stamp: 'lr 10/28/2007 14:42'!newRenderContinuation	"Answer a new render continuation."	^ (self application preferenceAt: #renderContinuationClass) root: self root! !!WASessionContinuation methodsFor: 'creational' stamp: 'lr 10/28/2007 14:42'!newResponse	"Answer a new response object and assign the current request stream."	| stream response |	stream := self request responseStream.	response := stream isNil		ifTrue: [ WAResponse new ]		ifFalse: [ WAStreamResponse on: stream ].	^ response doNotCache! !!WASessionContinuation methodsFor: 'creational' stamp: 'lr 5/10/2007 22:26'!newStates	^ WASnapshot new! !!WASessionContinuation methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!request	"Answer the current request object."	^ self session currentRequest! !!WASessionContinuation methodsFor: 'processing' stamp: 'lr 5/31/2008 14:07'!respond: aBlock	| response |	states := self newStates.	response := self newResponse.	self session onRespond: [ :value | self updateStates: states ].	aBlock value: response.	self session returnResponse: response! !!WASessionContinuation methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!root	"Answer the root component instance. Usually this component is instantiated with the first reuqest."	^ root! !!WASessionContinuation methodsFor: 'processing' stamp: 'lr 4/20/2007 19:46'!run	self subclassResponsibility! !!WASessionContinuation methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!session	"Answer the session to which this handler is associated."	^ WACurrentSession value! !!WASessionContinuation methodsFor: 'accessing' stamp: 'lr 8/20/2007 22:59'!states	^ states! !!WASessionContinuation methodsFor: 'updating' stamp: 'lr 4/17/2007 22:50'!updateRoot: aHtmlRoot	self session updateRoot: aHtmlRoot.	self root visiblePresentersDo: [ :each | each updateRoot: aHtmlRoot ]! !!WASessionContinuation methodsFor: 'updating' stamp: 'lr 10/28/2007 14:42'!updateStates: aSnapshot	self session updateStates: aSnapshot.	self root visiblePresentersDo: [ :each |		(each isDecoration and: [ each isDelegation ])			ifTrue: [ each component updateStates: aSnapshot ].		each updateStates: aSnapshot ]! !!WASessionContinuation methodsFor: 'updating' stamp: 'lr 4/17/2007 22:50'!updateUrl: anUrl	self session updateUrl: anUrl.	self root visiblePresentersDo: [ :each | each updateUrl: anUrl ]! !!WASessionContinuation methodsFor: 'accessing' stamp: 'lr 4/17/2007 22:20'!url	| url |	url := self session actionUrlForContinuation: self.	self updateUrl: url.	^ url! !!WASessionContinuation methodsFor: 'evaluating' stamp: 'lr 5/31/2008 16:41'!value: aRequest	"Resume processing of aRequest. To ensure valid application state restore all registered states."	states ifNotNil: [ states restore ].	self handleRequest: aRequest! !!WAHtmlAttributes methodsFor: 'convenience' stamp: 'lr 10/28/2007 14:42'!addClass: aString	"Add an additional CSS class aString to the receiver."	self at: 'class' append: aString separator: ' '! !!WAHtmlAttributes methodsFor: 'convenience' stamp: 'lr 10/28/2007 14:42'!addStyle: aString	"Add an additional CSS style definition aString to the receiver."	self at: 'style' append: aString separator: ';'! !!WAHtmlAttributes methodsFor: 'accessing' stamp: 'lr 7/9/2007 07:46'!at: aKey append: aValue	"Append aValue to the attribute aKey. If already present, concatenate it with a space. Ignore the request if aValue is nil."	^ self at: aKey append: aValue separator: ' '! !!WAHtmlAttributes methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!at: aKey append: aValue separator: aString	"Append aValue to the attribute aKey. If already present, concatenate it with aString. Ignore the request if aValue is nil."	aValue ifNil: [ ^ self at: aKey ].	^ self at: aKey put: (String streamContents: [ :stream |		self at: aKey ifPresent: [ :value |			stream nextPutAll: value displayString.			stream nextPutAll: aString ].		stream nextPutAll: aValue displayString ])! !!WAHtmlAttributes methodsFor: 'encoding' stamp: 'lr 10/28/2007 14:42'!encodeOn: aDocument	"Encode the receivers attribute onto aDocument. Note that this implementation reqires those two checks for true and false exactly the way they are here, to reliable encode boolean attributes in an XHTML compliant way."	self keysAndValuesDo: [ :key :value |		value == false ifFalse: [			aDocument nextPut: $ ; nextPutAll: key; nextPutAll: '="'.			value == true				ifTrue: [ aDocument nextPutAll: key ]				ifFalse: [ aDocument print: value ].			aDocument nextPut: $" ] ]! !!WAHtmlAttributes methodsFor: 'private' stamp: 'lr 7/12/2007 13:21'!errorKeyNotFound	^ nil! !!WAHtmlAttributes methodsFor: 'private' stamp: 'lr 7/12/2007 13:23'!privateAt: aKey put: aValue	aValue ifNil: [ ^ nil ].	^ super privateAt: aKey put: aValue! !!WASmallDictionary class methodsFor: 'instance-creation' stamp: 'lr 6/6/2007 19:09'!new	^ self basicNew initialize! !!WASmallDictionary methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!associations	"Answer a Collection containing the receiver's associations."	| result |	result := WriteStream on: (Array new: self size).	self associationsDo: [ :assoc | result nextPut: assoc ].	^ result contents! !!WASmallDictionary methodsFor: 'enumerating' stamp: 'lr 8/20/2007 13:45'!associationsDo: aBlock	self keysAndValuesDo: [ :key :value | aBlock value: key -> value ]! !!WASmallDictionary methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!at: aKey	"Answer the value associated with aKey. Raise an exception, if no such key is defined."	^ self at: aKey ifAbsent: [ self errorKeyNotFound ]! !!WASmallDictionary methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!at: aKey ifAbsent: aBlock	"Answer the value associated with aKey. Evaluate aBlock, if no such key is defined."	| index |	index := self findIndexFor: aKey.	^ index = 0		ifFalse: [ values at: index ]		ifTrue: [ aBlock value ]! !!WASmallDictionary methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!at: aKey ifAbsentPut: aBlock	"Answer the value associated with aKey. Evaluate aBlock, if no such key is defined and store the return value."	| index |	index := self findIndexFor: aKey.	^ index = 0		ifFalse: [ values at: index ]		ifTrue: [ self privateAt: aKey put: aBlock value ]! !!WASmallDictionary methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!at: aKey ifPresent: aBlock	"Lookup aKey in the receiver. If it is present, answer the value of evaluating the given block with the value associated with the key. Otherwise, answer nil."	| index |	index := self findIndexFor: aKey.	^ index = 0 ifFalse: [ aBlock value: (values at: index) ]! !!WASmallDictionary methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!at: aKey put: aValue	"Set the value of aKey to be aValue."	| index |	index := self findIndexFor: aKey.	^ index = 0		ifFalse: [ values at: index put: aValue ]		ifTrue: [ self privateAt: aKey put: aValue ]! !!WASmallDictionary methodsFor: 'private' stamp: 'lr 7/12/2007 13:18'!errorKeyNotFound	self error: 'Key not found'! !!WASmallDictionary methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!findIndexFor: aKey	1 to: size do: [ :index |		(keys at: index) = aKey			ifTrue: [ ^ index ] ].	^ 0! !!WASmallDictionary methodsFor: 'private' stamp: 'lr 6/6/2007 19:12'!grow	| newKeys newValues |	newKeys := Array new: 2 * size.	newValues := Array new: 2 * size.	1 to: size do: [ :index |		newKeys at: index put: (keys at: index).		newValues at: index put: (values at: index) ].	keys := newKeys.	values := newValues! !!WASmallDictionary methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!includesKey: aKey	"Answer whether the receiver has a key equal to aKey."	^ (self findIndexFor: aKey) ~= 0! !!WASmallDictionary methodsFor: 'initialization' stamp: 'lr 6/6/2007 19:10'!initialize	size := 0.	keys := Array new: 3.	values := Array new: 3! !!WASmallDictionary methodsFor: 'testing' stamp: 'lr 7/9/2007 08:13'!isEmpty	^ size = 0! !!WASmallDictionary methodsFor: 'enumerating' stamp: 'lr 7/9/2007 10:37'!keys	^ keys copyFrom: 1 to: size! !!WASmallDictionary methodsFor: 'enumerating' stamp: 'lr 6/7/2007 08:04'!keysAndValuesDo: aBlock	1 to: size do: [ :index | aBlock value: (keys at: index) value: (values at: index) ]! !!WASmallDictionary methodsFor: 'enumerating' stamp: 'lr 8/17/2007 11:52'!keysDo: aBlock	1 to: size do: [ :each | aBlock value: (keys at: each) ]! !!WASmallDictionary methodsFor: 'copying' stamp: 'lr 7/9/2007 07:50'!postCopy	super postCopy.	keys := keys copy.	values := values copy! !!WASmallDictionary methodsFor: 'private' stamp: 'lr 6/6/2007 19:28'!privateAt: aKey put: aValue	size = keys size ifTrue: [ self grow ].	keys at: (size := size + 1) put: aKey.	^ values at: size put: aValue! !!WASmallDictionary methodsFor: 'accessing' stamp: 'lr 7/12/2007 13:18'!removeKey: aKey	"Remove aKey from the receiver, raise an exception if the element is missing."	^ self removeKey: aKey ifAbsent: [ self errorKeyNotFound ]! !!WASmallDictionary methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!removeKey: aKey ifAbsent: aBlock	"Remove aKey from the receiver, evaluate aBlock if the element is missing."	| index value |	index := self findIndexFor: aKey.	index = 0 ifTrue: [ ^ aBlock value ].	value := values at: index.	index to: size - 1 do: [ :i |		keys at: i put: (keys at: i + 1).		values at: i put: (values at: i + 1) ].	keys at: size put: nil.	values at: size put: nil.	size := size - 1.	^ value! !!WASmallDictionary methodsFor: 'accessing' stamp: 'lr 7/9/2007 10:38'!size	^ size! !!WASmallDictionary methodsFor: 'enumerating' stamp: 'lr 7/9/2007 10:38'!values	^ values copyFrom: 1 to: size! !!WASmallDictionary methodsFor: 'enumerating' stamp: 'lr 8/17/2007 11:52'!valuesDo: aBlock	1 to: size do: [ :index | aBlock value: (values at: index) ]! !!WASnapshot class methodsFor: 'instance creation' stamp: 'lr 5/31/2008 16:15'!new	^ self basicNew initialize! !!WASnapshot methodsFor: 'initialize-release' stamp: 'lr 5/31/2008 16:53'!initialize	objects := IdentityDictionary new! !!WASnapshot methodsFor: 'registry' stamp: 'lr 5/31/2008 16:27'!register: anObject	anObject ifNotNil: [ objects at: anObject put: anObject snapshotCopy ]! !!WASnapshot methodsFor: 'actions' stamp: 'lr 5/31/2008 16:28'!restore	"Restore all the backtracked states."	objects keysAndValuesDo: [ :key :value | key restoreFromSnapshot: value ]! !!WASnapshot methodsFor: 'actions' stamp: 'lr 5/31/2008 16:29'!snapshot	"Snapshot all the states that have been registered for backtracking overriding existing snapshots."	objects associationsDo: [ :assoc | assoc value: assoc key snapshotCopy ]! !!WAUrl class methodsFor: 'instance creation' stamp: 'avi 3/18/2004 16:07'!new	^ self basicNew initialize! !!WAUrl methodsFor: 'adding' stamp: 'lr 10/28/2007 14:42'!addParameter: aString	self addParameter: aString value: nil! !!WAUrl methodsFor: 'adding' stamp: 'lr 8/17/2007 20:54'!addParameter: keyString value: valueString	self parameters at: keyString put: valueString! !!WAUrl methodsFor: 'adding' stamp: 'lr 8/17/2007 20:54'!addToPath: aString	self path addAll: (aString findTokens: '/')! !!WAUrl methodsFor: 'encoding' stamp: 'lr 8/20/2007 21:13'!encodeFragmentOn: aDocument	fragment ifNil: [ ^ self ].	aDocument nextPut: $#.	aDocument urlEncoder nextPutAll: fragment! !!WAUrl methodsFor: 'encoding' stamp: 'lr 9/4/2007 15:32'!encodeOn: aDocument	self encodeOn: aDocument usingHtmlEntities: true! !!WAUrl methodsFor: 'encoding' stamp: 'lr 10/28/2007 14:42'!encodeOn: aDocument usingHtmlEntities: aBoolean	self encodeServerOn: aDocument.	self encodePathOn: aDocument.	self		encodeParametersOn: aDocument		usingHtmlEntities: aBoolean.	self encodeFragmentOn: aDocument! !!WAUrl methodsFor: 'encoding' stamp: 'lr 10/28/2007 14:42'!encodeParametersOn: aDocument usingHtmlEntities: aBoolean	| first |	first := true.	parameters ifNil: [ ^ self ].	parameters keysAndValuesDo: [ :key :value |		aDocument nextPutAll: (first			ifTrue: [ first := false. '?' ]			ifFalse: [				aBoolean					ifTrue: [ '&amp;' ]					ifFalse: [ '&' ] ]).		aDocument urlEncoder nextPutAll: key.		value ifNotNil: [			aDocument nextPut: $=.			aDocument urlEncoder nextPutAll: value asString ] ]! !!WAUrl methodsFor: 'encoding' stamp: 'lr 10/28/2007 14:42'!encodePathOn: aDocument	path ifNil: [ ^ self ].	aDocument nextPut: $/.	path		do: [ :each | aDocument urlEncoder nextPutAll: each ]		separatedBy: [ aDocument nextPut: $/ ]! !!WAUrl methodsFor: 'encoding' stamp: 'lr 10/28/2007 14:42'!encodeServerOn: aDocument	hostname ifNil: [ ^ self ].	aDocument nextPutAll: scheme; nextPutAll: '://'.	username notNil ifTrue: [		aDocument urlEncoder nextPutAll: username.		password notNil ifTrue: [			aDocument nextPut: $:.			aDocument urlEncoder nextPutAll: password ].		aDocument nextPut: $@ ].	aDocument urlEncoder nextPutAll: hostname.	port notNil ifTrue: [		((scheme = 'http' and: [ port = 80 ])			or: [ scheme = 'https' and: [ port = 443 ] ])			ifFalse: [ aDocument nextPut: $:; print: port ] ]! !!WAUrl methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!fragment	"Answer the fragment part of the URL."	^ fragment! !!WAUrl methodsFor: 'accessing' stamp: 'lr 8/17/2007 20:18'!fragment: aString	fragment := aString! !!WAUrl methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!hostname	"Answer the host part of the URL."	^ hostname! !!WAUrl methodsFor: 'accessing' stamp: 'lr 8/17/2007 21:07'!hostname: aString	hostname := aString! !!WAUrl methodsFor: 'initialization' stamp: 'lr 8/17/2007 21:53'!initialize	scheme := 'http'! !!WAUrl methodsFor: 'private' stamp: 'lr 8/17/2007 22:49'!isSeasideField: aString	^ aString notEmpty		and: [ aString first = $_		or: [ aString allSatisfy: [ :each | each isDigit ] ] ]! !!WAUrl methodsFor: 'accessing' stamp: 'lr 8/17/2007 20:20'!parameters	^ parameters ifNil: [ parameters := WASmallDictionary new ]! !!WAUrl methodsFor: 'accessing' stamp: 'lr 8/17/2007 20:19'!parameters: aDictionary	parameters := aDictionary! !!WAUrl methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!password	"Answer the password part of the URL."	^ password! !!WAUrl methodsFor: 'accessing' stamp: 'lr 8/17/2007 20:21'!password: aString	password := aString! !!WAUrl methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!path	"Answer the path part of the URL."	^ path ifNil: [ path := OrderedCollection new ]! !!WAUrl methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!path: aCollection	"Set the path part of the URL to aCollection."	path := aCollection! !!WAUrl methodsFor: 'accessing' stamp: 'lr 8/17/2007 20:22'!port	"Answer the port number part of the URL."	^ port! !!WAUrl methodsFor: 'accessing' stamp: 'lr 8/17/2007 20:22'!port: aNumber	port := aNumber! !!WAUrl methodsFor: 'copying' stamp: 'lr 10/28/2007 14:42'!postCopy	super postCopy.	scheme := scheme copy.	username := username copy.	password := password copy.	hostname := hostname copy.	port := port copy.	path := path copy.	parameters := parameters copy.	fragment := fragment copy! !!WAUrl methodsFor: 'printing' stamp: 'lr 9/4/2007 15:37'!printOn: aStream	| document |	document := WAHtmlStreamDocument new.	document stream: aStream.	self encodeOn: document usingHtmlEntities: false! !!WAUrl methodsFor: 'private' stamp: 'lr 8/17/2007 20:54'!removeParameters	parameters := nil! !!WAUrl methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!scheme	"Answer the URL's scheme."	^ scheme! !!WAUrl methodsFor: 'accessing' stamp: 'pmm 10/20/2007 22:09'!scheme: aString	"we really expect a String here, Old versions (2.7) expected a Symbol you can still pass a Symbol and get away with it but don't expect this behavior to be supported in future versions.	#asString is the 'correct' way to convert a Symbol to a String since #displayString will add a hash on VW"	scheme := aString asString! !!WAUrl methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!takeServerParametersFromRequest: aRequest	| httpHost |	hostname ifNil: [		httpHost := aRequest			headerAt: 'host'			ifAbsent: [ ^ self ].		hostname := httpHost copyUpTo: $:.		(httpHost includes: $:)			ifTrue: [ port := (httpHost copyAfter: $:) asNumber ] ]! !!WAUrl methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!username	"Answer the username part of the URL."	^ username! !!WAUrl methodsFor: 'accessing' stamp: 'lr 8/17/2007 20:38'!username: aString	username := aString! !!WAUrl methodsFor: 'copying' stamp: 'avi 3/22/2004 00:52'!with: pathString	^ self copy		addToPath: pathString;		yourself! !!WAUrl methodsFor: 'copying' stamp: 'pmm 6/21/2007 20:45'!withParameter: aString	^ self copy		addParameter: aString;		yourself! !!WAUrl methodsFor: 'copying' stamp: 'avi 3/22/2004 00:51'!withParameter: aString value: valueString	^ self copy		addParameter: aString value: valueString;		yourself! !!WAUrl methodsFor: 'copying' stamp: 'pmm 6/21/2007 20:57'!withoutParameters	^self copy		removeParameters;		yourself! !!WAUtf8EncodingStream class methodsFor: 'instance creation' stamp: 'pmm 10/14/2006 04:03'!on: aStream	^self new		setStream: aStream;		yourself! !!WAUtf8EncodingStream methodsFor: 'accessing' stamp: 'pmm 10/14/2006 11:12'!basicNextPut: aCharacter	stream nextPut: aCharacter! !!WAUtf8EncodingStream methodsFor: 'accessing' stamp: 'pmm 10/14/2006 04:09'!crlf	stream crlf! !!WAUtf8EncodingStream methodsFor: 'initialize-release' stamp: 'pmm 10/14/2006 14:15'!initialize	super initialize.	encoder := TextConverter newForEncoding: 'utf8'! !!WAUtf8EncodingStream methodsFor: 'accessing' stamp: 'pmm 10/14/2006 11:14'!isBinary	^false! !!WAUtf8EncodingStream methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!nextPut: aCharacter	encoder nextPut: aCharacter toStream: self! !!WAUtf8EncodingStream methodsFor: 'accessing' stamp: 'pmm 10/14/2006 04:02'!nextPutAll: aColllection	aColllection do: [ :each |		self nextPut: each ]! !!WAUtf8EncodingStream methodsFor: 'initialize-release' stamp: 'pmm 10/14/2006 04:02'!setStream: aStream	stream := aStream! !!WAUtf8EncodingStream methodsFor: 'accessing' stamp: 'pmm 10/14/2006 11:16'!socket	^stream socket! !!WAStateHolder class methodsFor: 'instance-creation' stamp: 'lr 9/5/2007 11:41'!new	self deprecatedApi.	^ super new! !!WAValueHolder class methodsFor: 'instance-creation' stamp: 'lr 9/5/2007 11:40'!with: anObject	^ self new contents: anObject! !!WAValueHolder methodsFor: 'accessing' stamp: 'lr 4/16/2007 00:11'!contents	^ contents! !!WAValueHolder methodsFor: 'accessing' stamp: 'lr 4/16/2007 00:11'!contents: anObject	contents := anObject! !!WAValueHolder methodsFor: 'printing' stamp: 'lr 4/20/2007 20:46'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' contents: '; print: self contents! !!PositionableStream methodsFor: '*seaside2-squeak' stamp: 'mb 6/2/2006 10:47'!asMIMEDocument	^self asMIMEDocumentType: 'text/plain'! !!PositionableStream methodsFor: '*seaside2-squeak' stamp: 'mb 6/2/2006 10:54'!asMIMEDocumentType: mimeType	^MIMELocalFileDocument contentType: mimeType contentStream:  self! !!PositionableStream methodsFor: '*seaside2-squeak' stamp: 'lr 10/28/2007 14:42'!upToAndSkipThroughAll: aCollection	"Needed for Seaside ports to other dialects where #upToAll: may have	different semantics"	^ self upToAll: aCollection! !!Behavior methodsFor: '*seaside2-squeak' stamp: 'pmm 10/30/2006 18:02'!fullName	"In VW, will include the namespace"	^self name! !!BlockContext methodsFor: '*seaside2-squeak' stamp: 'lr 10/28/2007 14:42'!fixCallbackTemps	"Fix the values of the temporary variables used in the block that are	ordinarily shared with the method in which the block is defined.	This is needed because Squeak is a crappy Smalltalk implementation	that does not have full blcck closures."	| temps |	home := home copy.	home swapSender: nil.	home isMethodContext		ifFalse: [ ^ self ].	temps := self tempVarRefs.	1 to: home size do: [ :index |		(temps includes: index)			ifFalse: [ home tempAt: index put: nil ] ]! !!BlockContext methodsFor: '*seaside2' stamp: 'ab 2/11/2003 20:09'!handleRequest: aRequest	^ self value: aRequest! !!BlockContext methodsFor: '*seaside2' stamp: 'lr 10/28/2007 14:42'!renderOn: aRenderer	self numArgs = 0		ifTrue: [self value]		ifFalse: [self value: aRenderer]! !!BlockContext methodsFor: '*seaside2-squeak' stamp: 'lr 8/25/2007 16:26'!tempVarRefs	| method scanner end tempVars byte type offset |	home ifNil: [ ^ false ].	tempVars := Set new.	method := self method.	"Determine end of block from long jump preceding it"	end := (method at: startpc - 2) \\ 16 - 4 * 256 + (method at: startpc - 1) + startpc - 1.	scanner := InstructionStream new method: method pc: startpc.	[ scanner pc <= end ] whileTrue: [		byte  := scanner nextByte.		type := byte // 16.		offset := byte \\ 16.		type = 1 ifTrue: [ tempVars add: offset + 1 ].		scanner nextInstruction ].	^ tempVars! !!OrderedCollection methodsFor: '*seaside2' stamp: 'lr 11/16/2007 17:11'!restoreFromSnapshot: anObject	super restoreFromSnapshot: anObject snapshotCopy! !!OrderedCollection methodsFor: '*seaside2' stamp: 'pmm 7/3/2010 10:25'!snapshotCopy	^ self copy! !!Set methodsFor: '*seaside2' stamp: 'lr 7/13/2007 11:36'!restoreFromSnapshot: aSet	super restoreFromSnapshot: aSet snapshotCopy! !!Set methodsFor: '*seaside2' stamp: 'lr 6/7/2007 22:14'!snapshotCopy	^ self copy! !!UndefinedObject methodsFor: '*seaside2' stamp: 'lr 3/27/2007 10:40'!encodeOn: aDocument! !!UndefinedObject methodsFor: '*seaside2' stamp: 'lr 10/28/2007 14:42'!renderOn: html! !"Seaside2"!!RRRssRenderCanvas commentStamp: 'pmm 4/11/2007 21:29' prior: 0!Structure of an RSS DocumentElements with a star (*) at the beginning are required. Elements with a plus sign (+) are an extension. Channel is automatically open.channel	*title	*link	*description	language	copyright	managingEditor	webMaster	publicationDate	lastBuildDate	category	generator	documentation	cloud	timeToLive	image		*url		*title		*link		width		height		description	rating	textInput		*title		*description		*name		*link	skipHours		hour	skipDays		day	item		*title		*link		*description		author		category		comments		enclosure		guid		publicationDate		source		+creator		+comment		+commentRss		+contentEncoded		Email Addresses:Email addresses must conform to RFC 2822Convert the email address to a valid form. Examples of valid email addresses:    * joesmith@example.com    * joesmith@example.com (Joe Smith)    * Joe Smith <joesmith@example.com>    * joesmith.nospamplease@nospam.example.comYou can either:- use correctly formatted strings- implement #displayString in your domain email address class so that it return a string in a valid form- implement #renderOn: in your domain  email address class so that it renders a string in a valid form- use RREmailAddressdate times:The value specified must meet the Date and Time specifications as defined by RFC822, with the exception that the year should be expressed as four digits.Here are examples of valid RFC822 date-times:Wed, 02 Oct 2002 08:00:00 ESTWed, 02 Oct 2002 13:00:00 GMTWed, 02 Oct 2002 15:00:00 +0200If you use Chronos you can useprintStringUsing: printStringUsing: ChronosPrintPolicy rfc822Else you can use RRRfc822DateTime.Here is an example of an invalid RFC822 date-time:2002-10-02T08:00:00-05:00!!RRCloudTag commentStamp: 'pmm 9/22/2006 14:39' prior: 0!<cloud> is an optional sub-element of <channel>.It specifies a web service that supports the rssCloud interface which can be implemented in HTTP-POST, XML-RPC or SOAP 1.1.Its purpose is to allow processes to register with a cloud to be notified of updates to the channel, implementing a lightweight publish-subscribe protocol for RSS feeds. A full explanation of this element and the rssCloud interface is here:http://www.rssboard.org/rsscloud-interface!!RRComponent commentStamp: 'pmm 7/1/2007 22:01' prior: 0!Base class for all RSS rendering components. Note that RSS components are stripped down versions of Seaside components. Many things like #call: don't work. Also #initialRequest: and #updateRoot: only get sent to the root component.!!RRStylesOne methodsFor: 'css' stamp: 'pmm 4/20/2007 23:04'!selectorsToInclude	^#(		styleCss	)! !!RRStylesOne methodsFor: 'css' stamp: 'pmm 4/20/2007 23:03'!styleCss	^'rss {	display: block;	font-family: verdana, arial;}title {	display: block;	margin: 5px;	padding: 2px;	color: gray;	border-bottom: 1px solid silver;}link {	display: block;	font-size: small;	padding-left: 10px;}item {	display: block;	padding: 2px 30px 2px 30px;}docs {	display: block;	background-color: #ffffe6;	margin: 20px;	text-align: center;	padding: 5px;	color: #7f7f7f;	border: 1px solid silver;}/* all hidden elements */language, lastBuildDate, ttl, guid, category, description, pubDate {	display: none;}'! !!RRStylesThree methodsFor: 'xslt' stamp: 'pmm 4/20/2007 23:13'!styleXsl	^'<?xml version="1.0" encoding="utf8"?><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"><xsl:template match="/rss"> 	<html> 	<head> 	    <link href="some-more-work-to-do-here.css" rel="stylesheet" type="text/css" /> 	    <style type="text/css"> 	    body { 	        font-size:0.83em; 	    } 	    </style> 	</head> 	<body> 	    <div id="logo"> 	        <xsl:element name="a"> 	            <xsl:attribute name="href"> 	                <xsl:value-of select="channel/link" /> 	            </xsl:attribute> 	            <xsl:value-of select="channel/title" /> 	        </xsl:element> 	    </div> 	    <div class="Snippet" style="border-width:0; background-color:#FFF; margin:1em"> 	        <div class="titleWithLine"> 	            <xsl:value-of select="channel/description" /> 	        </div> 	        <dl style="padding-right:1em"> 	            <xsl:for-each select="channel/item"> 	                <dd> 	                    <xsl:element name="a"> 	                        <xsl:attribute name="href"> 	                            <xsl:value-of select="link"/> 	                        </xsl:attribute> 	                        <xsl:value-of select="title"/> 	                    </xsl:element> 	                </dd> 	                <dt> 	                    <xsl:value-of select="description" /><br /> 	                    <span class="comments"><xsl:value-of select="pubDate" /></span> 	                </dt> 	            </xsl:for-each> 	        </dl> 	    </div> 	    <div id="footer"> 	        <xsl:value-of select="channel/copyright" /> 	    </div> 	</body> 	</html> 	</xsl:template> 	</xsl:stylesheet>'! !!RRStylesThree methodsFor: 'path' stamp: 'pmm 4/20/2007 23:26'!updateRoot: aHtmlRoot	aHtmlRoot stylesheet beXsl url: (self urlOf: #styleXsl)! !!RRStylesTwo methodsFor: 'accessing' stamp: 'pmm 4/20/2007 23:06'!selectorsToInclude	^#(		styleCss		style2Css	)! !!RRStylesTwo methodsFor: 'css' stamp: 'pmm 4/20/2007 23:04'!style2Css	^'channel link, channel language, channel copyright, channel managingEditor, channel webMaster, channel docs, channel lastBuildDate {	    display:none;}rss { 	    font-family:Verdana, Arial, Helvetica, sans-serif; 	    font-size:0.7em; 	    line-height:130%; 	    margin:1em; }/* HEADER *//*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/channel title { 	    display:block; 	    padding:0.4em 0.2em; 	    color:#FFF; 	    border-bottom:1px solid black; 	    font-weight:bold; 	    font-size:140%; 	    background-color:#4483C7;}channel description { 	    display:block; 	    float:left; 	    font-size:130%; 	    font-weight:bold; 	    margin:0.5em;}/* CONTENT *//*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/channel item { 	    background-color:#FFFFEE; 	    border:1px solid #538620; 	    clear:both; 	    display:block; 	    padding:0 0 0.5em; 	    margin:1em;}channel item title { 	    background-color:#538620; 	    border-bottom-width:0; 	    color:#FFF; 	    display:block; 	    font-size:110%; 	    font-weight:bold; 	    margin:0; 	    padding:0.3em 0.5em;}channel item description { 	    display: block; 	    float:none; 	    margin:0; 	    text-align: left; 	    padding:0.2em 0.5em 0.4em; 	    color: black; 	    font-size:100%; 	    font-weight:normal;}channel item link { 	    color:#666; 	    display:block; 	    font-size:86%; 	    padding:0 0.5em;}channel item pubDate { 	    color:#666; 	    display:block; 	    font-size:86%;	    padding:0 0.5em;}'! !!RRStylesTwo methodsFor: 'css' stamp: 'pmm 4/20/2007 23:04'!styleCss	^'channel link, channel language, channel copyright, channel managingEditor, channel webMaster, channel docs, channel lastBuildDate {	    display:none;}rss { 	    font-family:Verdana, Arial, Helvetica, sans-serif; 	    font-size:0.7em; 	    line-height:130%; 	    margin:1em; }/* HEADER *//*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/channel title { 	    display:block; 	    padding:0.4em 0.2em; 	    color:#FFF; 	    border-bottom:1px solid black; 	    font-weight:bold; 	    font-size:140%; 	    background-color:#4483C7;}channel description { 	    display:block; 	    float:left; 	    font-size:130%; 	    font-weight:bold; 	    margin:0.5em;}/* CONTENT *//*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/channel item { 	    background-color:#FFFFEE; 	    border:1px solid #538620; 	    clear:both; 	    display:block; 	    padding:0 0 0.5em; 	    margin:1em;}channel item title { 	    background-color:#538620; 	    border-bottom-width:0; 	    color:#FFF; 	    display:block; 	    font-size:110%; 	    font-weight:bold; 	    margin:0; 	    padding:0.3em 0.5em;}channel item description { 	    display: block; 	    float:none; 	    margin:0; 	    text-align: left; 	    padding:0.2em 0.5em 0.4em; 	    color: black; 	    font-size:100%; 	    font-weight:normal;}channel item link { 	    color:#666; 	    display:block; 	    font-size:86%; 	    padding:0 0.5em;}channel item pubDate { 	    color:#666; 	    display:block; 	    font-size:86%;	    padding:0 0.5em;}'! !!WARequestHandler methodsFor: '*rsrss2' stamp: 'mb 10/23/2006 09:42'!isFeed	^false! !!RRHandlerEditor methodsFor: 'accessing' stamp: 'pmm 4/9/2007 12:09'!handler	^handler! !!RRHandlerEditor methodsFor: 'accessing' stamp: 'pmm 4/9/2007 12:09'!handler: anObject	handler := anObject! !!RRHandlerEditor methodsFor: 'rendering' stamp: 'pmm 4/9/2007 19:51'!renderFormOn: html	html heading level1; with: 'Configuration'.	html table: [		html tableRow: [			html tableHeading: 'Root Component'.			html tableData: [				html select					list: self rootComponents;					on: #rootComponent of: self handler ] ].		html tableRow: [			html tableHeading: 'Open Debugger on Errors'.			html tableData: [				html checkbox					on: #openDebugger of: self handler ] ] ]! !!RRHandlerEditor methodsFor: 'accessing' stamp: 'pmm 4/9/2007 20:27'!rootComponents	^RRComponent allSubclasses select: [ :each |		each canBeRoot			and: [ each isFeed ] ] ! !!RRRssRenderCanvas class methodsFor: 'instance creation' stamp: 'pmm 8/16/2007 23:00'!builder	^super builder		rootClass: RRRssRoot;		yourself! !!RRRssRenderCanvas class methodsFor: 'instance creation' stamp: 'pmm 9/25/2006 16:22'!context: aRenderingContext callbacks: aCallbackStore	^ self basicNew initializeWithContext: aRenderingContext callbacks: aCallbackStore! !!RRRssRenderCanvas class methodsFor: 'encoding' stamp: 'pmm 3/1/2007 22:49'!encode: anObject	^(Smalltalk hasClassNamed: #WAAbstractHtmlBuilder)		ifTrue: [ (Smalltalk classNamed: #WAAbstractHtmlBuilder) encode: anObject ]		ifFalse: [ super encode: anObject ]! !!RRRssRenderCanvas class methodsFor: 'generating-tags' stamp: 'pmm 9/22/2006 15:20'!generateBinaryFor: aCollection	(aCollection size = 4 and: [(self includesSelector: aCollection third) not]) ifTrue: [		self 			compile: aCollection third, ' aBlock	self ', aCollection second, ' with: aBlock'			classified: aCollection fourth]! !!RRRssRenderCanvas class methodsFor: 'generating-tags' stamp: 'pmm 9/22/2006 15:20'!generateUnaryFor: aCollection	(self includesSelector: aCollection second) ifFalse: [		self 			compile: aCollection second, '	^ self ', (self patternFor: aCollection first)			classified: aCollection fourth ]! !!RRRssRenderCanvas class methodsFor: 'accessing-tags' stamp: 'pmm 9/29/2006 00:55'!tags	"	self generateTags	"	^ #(		('item' item item: 'item')			('title' title title: 'channel-required')		('link' link link: 'channel-required')		('description' description description: 'channel-required')				('language' language language: 'channel-optional')		('copyright' copyright copyright: 'channel-optional')		('managingEditor' managingEditor managingEditor: 'channel-optional')		('webMaster' webMaster webMaster: 'channel-optional')		('pubDate' publicationDate publicationDate: 'channel-optional')		('lastBuildDate' lastBuildDate lastBuildDate: 'channel-optional')		('category' category category: 'channel-optional')		('generator' generator generator: 'channel-optional')		('docs' documentation documentation: 'channel-optional')		('cloud' cloud cloud: 'channel-optional')		('ttl' timeToLive timeToLive: 'channel-optional')		('image' image image: 'channel-optional')		('rating' rating rating: 'channel-optional')		('textInput' textInput textInput: 'channel-optional')		('skipHours' skipHours skipHours: 'channel-optional')		('skipDays' skipDays skipDays: 'channel-optional')				('author' author author: 'item-optional')		('comments' comments comments: 'item-optional')		('enclosure' enclosure enclosure: 'item-optional')		('guid' guid guid: 'item-optional')		('source' source source: 'item-optional')		('language' language language: 'item-optional')				('width' width width: 'image-optional')		('height' height height: 'image-optional')				('name' name name: 'textinput-required')				('hour' hour hour: 'skipHours')		('day' day day: 'skipDays')				('url' url url: 'image')		)! !!RRRssRenderCanvas methodsFor: 'item-optional' stamp: 'pmm 9/29/2006 11:34'!author	"Email address of the author of the item.		It's the email address of the author of the item. For newspapers and magazines syndicating via RSS, the author is the person who wrote the article that the <item> describes. For collaborative weblogs, the author of the item might be different from the managing editor or webmaster. For a weblog authored by a single individual it would make sense to omit the <author> element."	^ self tag: 'author'! !!RRRssRenderCanvas methodsFor: 'item-optional' stamp: 'pmm 9/22/2006 14:56'!author: aBlock	self author with: aBlock! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/29/2006 11:49'!category	"---- as optional subelement of channel ----	Specify one or more categories that the channel belongs to. Follows the same rules as the <item>-level category element below.		---- as optional subelement of item ----	Includes the item in one or more categories.		The value of the element is a forward-slash-separated string that identifies a hierarchic location in the indicated taxonomy. Processors may establish conventions for the interpretation of categories.		You may include as many category elements as you need to, for different domains, and to have an item cross-referenced in different parts of the same domain.		It has one optional attribute, domain, a string that identifies a categorization taxonomy.		In RSS 2.0, a provision is made for linking a channel to its identifier in a cataloging system, using the channel-level category feature, described above. For example, to link a channel to its Syndic8 identifier, include a category element as a sub-element of <channel>, with domain 'Syndic8', and value the identifier for your channel in the Syndic8 database. The appropriate category element for Scripting News would be		rss category		domain: 'Syndic8';		with: 1765"	^ self brush: RRCategoryTag new! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/22/2006 14:56'!category: aBlock	self category with: aBlock! !!RRRssRenderCanvas methodsFor: 'convenience' stamp: 'pmm 4/9/2007 11:33'!cdata: aString	"aString must not include ']]>'		Google says if there is an error in the feed, there is a 0.02% chance	that this is the cause, combined with the fact that about 7% of all feeds	have errors there is a (2 / 10000) * (7 / 100) chance this goes wrong.	Do you deal in chance?		http://googlereader.blogspot.com/2005/12/xml-errors-in-feeds.html"	self flush.	self document nextPutAll: '<!![CDATA['.	self document nextPutAll: aString.	self document nextPutAll: ']]>'! !!RRRssRenderCanvas methodsFor: 'private' stamp: 'pmm 9/25/2006 16:28'!close	self flush! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/29/2006 00:37'!cloud	"Allows processes to register with a cloud to be notified of updates to the channel, implementing a lightweight publish-subscribe protocol for RSS feeds.		for more info see RRCloudTag"	^ self brush: RRCloudTag new! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/29/2006 00:56'!cloud: aBlock	self cloud with: aBlock! !!RRRssRenderCanvas methodsFor: 'well-formed-web' stamp: 'pmm 2/23/2007 09:04'!comment	"This element appears in RSS feeds and contains the URI that comment entries are to be POSTed to. The details of this are outlined in the CommentAPI Specification (http://wellformedweb.org/story/9)"	^self tag: 'wfw:comment'! !!RRRssRenderCanvas methodsFor: 'private' stamp: 'lr 2/28/2007 09:28'!comment: aString! !!RRRssRenderCanvas methodsFor: 'well-formed-web' stamp: 'pmm 2/23/2007 09:06'!commentRss	"This element also appears in RSS feeds and contains the URI of the RSS feed for comments on that Item. This is documented in Chris Sells' Specification(http://www.sellsbrothers.com/spout/default.aspx?content=archive.htm#exposingRssComments). Note that for quite a while this page has had a typo and erroneously referred to this element as 'commentRSS' as opposed to the correct 'commentRss'. Feed consumers should be aware that they may run into both spellings in the wild. Please see this page (http://www.intertwingly.net/blog/2006/04/16/commentRss) for more information."	^self tag: 'wfw:commentRss'! !!RRRssRenderCanvas methodsFor: 'well-formed-web' stamp: 'pmm 2/23/2007 09:06'!commentRss: aBlock	^self commentRss with: aBlock! !!RRRssRenderCanvas methodsFor: 'item-optional' stamp: 'pmm 9/29/2006 11:37'!comments	"URL of a page for comments relating to the item.		If present, it is the url of the comments page for the item."	^ self tag: 'comments'! !!RRRssRenderCanvas methodsFor: 'item-optional' stamp: 'pmm 9/22/2006 14:56'!comments: aBlock	self comments with: aBlock! !!RRRssRenderCanvas methodsFor: 'content' stamp: 'pmm 2/22/2007 22:48'!contentEncoded	"A module for the actual content of websites, in multiple formats.	http://web.resource.org/rss/1.0/modules/content/		example:	rss contentEncoded: '<p>What a <em>beautiful</em> day!!</p>'"	^ self tag: 'content:encoded'! !!RRRssRenderCanvas methodsFor: 'content' stamp: 'pmm 2/23/2007 09:25'!contentEncoded: aString	"A module for the actual content of websites.		aString must not include ']]>'"	self contentEncoded		with: [ self cdata: aString ]! !!RRRssRenderCanvas methodsFor: 'accessing' stamp: 'pmm 9/25/2006 16:25'!context	^context! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/27/2006 11:07'!copyright	"Copyright notice for content in the channel."	^ self tag: 'copyright'! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/22/2006 14:56'!copyright: aBlock	self copyright with: aBlock! !!RRRssRenderCanvas methodsFor: 'dublin-core' stamp: 'pmm 2/23/2007 08:58'!creator	"An entity primarily responsible for making the resource.	Examples of a Creator include a person, an organization, or a service. Typically, the name of a Creator should be used to indicate the entity.		http://dublincore.org/documents/dces/	http://purl.org/dc/elements/1.1/creator"	^ self tag: 'dc:creator'! !!RRRssRenderCanvas methodsFor: 'dublin-core' stamp: 'pmm 2/23/2007 08:58'!creator: aBlock	self creator with: aBlock! !!RRRssRenderCanvas methodsFor: 'skipDays' stamp: 'pmm 9/29/2006 00:56'!day	^ self brush: RRDayTag new! !!RRRssRenderCanvas methodsFor: 'skipDays' stamp: 'pmm 9/29/2006 00:56'!day: aBlock	self day with: aBlock! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/23/2006 12:17'!defaultDocumentation	self documentation: 'http://www.rssboard.org/rss-specification'! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/29/2006 00:34'!defaultGenerator	self generator: self defaultGeneratorString! !!RRRssRenderCanvas methodsFor: 'private' stamp: 'lr 2/28/2007 09:27'!defaultGeneratorString	^SeasidePlatformSupport defaultRSSGeneratorString! !!RRRssRenderCanvas methodsFor: 'channel-required' stamp: 'pmm 9/29/2006 11:33'!description	"	---- as required subelement of channel ----	Phrase or sentence describing the channel.	e.g.: 'The latest news from GoUpstate.com, a Spartanburg Herald-Journal Web site.'		---- a required subelement of item ----	The item synopsis.		---- as required subelement of textInput ----	Explains the text input area.		----  as an optional subelement of image ----	contains text that is included in the TITLE attribute of the link formed around the image in the HTML rendering."	^ self tag: 'description'! !!RRRssRenderCanvas methodsFor: 'channel-required' stamp: 'pmm 9/22/2006 14:56'!description: aBlock	self description with: aBlock! !!RRRssRenderCanvas methodsFor: 'accessing' stamp: 'pmm 9/25/2006 16:24'!document	^self context document! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/29/2006 00:36'!documentation	"A URL that points to the documentation for the format used in the RSS file. It's probably a pointer to this page. It's for people who might stumble across an RSS file on a Web server 25 years from now and wonder what it is.	e.g. 'http://www.rssboard.org/rss-specification'	see #defaultDocumentation"	^ self tag: 'docs'! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/22/2006 14:56'!documentation: aBlock	self documentation with: aBlock! !!RRRssRenderCanvas methodsFor: 'item-optional' stamp: 'pmm 9/29/2006 11:47'!enclosure	"Describes a media object that is attached to the item.		It has three required attributes. url says where the enclosure is located, length says how big it is in bytes, and type says what its type is, a standard MIME type.		The url must be an http url.		e.g.:	rss enclosure		url: 'http://www.scripting.com/mp3s/weatherReportSuite.mp3';		length: 12216320;		type: 'audio/mpeg'"	^ self brush: RREnclosureTag new! !!RRRssRenderCanvas methodsFor: 'item-optional' stamp: 'pmm 9/22/2006 14:56'!enclosure: aBlock	self enclosure with: aBlock! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/29/2006 00:36'!generator	"A string indicating the program used to generate the channel.	e.g.: 'RSRSS-pmm.3'	see #defaultGenerator"	^ self tag: 'generator'! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/22/2006 14:56'!generator: aBlock	self generator with: aBlock! !!RRRssRenderCanvas methodsFor: 'item-optional' stamp: 'pmm 9/29/2006 12:02'!guid	"A string that uniquely identifies the item.		guid stands for globally unique identifier. It's a string that uniquely identifies the item. When present, an aggregator may choose to use this string to determine if an item is new.		e.g.: 'http://some.server.com/weblogItem3207'		There are no rules for the syntax of a guid. Aggregators must view them as a string. It's up to the source of the feed to establish the uniqueness of the string.		If the guid element has an attribute named isPermaLink with a value of true, the reader may assume that it is a permalink to the item, that is, a url that can be opened in a Web browser, that points to the full item described by the <item> element. An example:		e.g.:	rss guid		bePermaLink;		with: 'http://inessential.com/2002/09/01.php#a2'			isPermaLink is optional, its default value is true. If its value is false, the guid may not be assumed to be a url, or a url to anything in particular."	^ self brush: RRGuidTag new! !!RRRssRenderCanvas methodsFor: 'item-optional' stamp: 'pmm 9/22/2006 14:56'!guid: aBlock	self guid with: aBlock! !!RRRssRenderCanvas methodsFor: 'image-optional' stamp: 'pmm 9/29/2006 11:29'!height	"Optional elements include <width> and <height>, numbers, indicating the width and height of the image in pixels.		Maximum value for height is 400, default value is 31."	^ self tag: 'height'! !!RRRssRenderCanvas methodsFor: 'image-optional' stamp: 'pmm 9/22/2006 14:56'!height: aBlock	self height with: aBlock! !!RRRssRenderCanvas methodsFor: 'skipHours' stamp: 'pmm 9/29/2006 00:56'!hour	^ self tag: 'hour'! !!RRRssRenderCanvas methodsFor: 'skipHours' stamp: 'pmm 9/29/2006 00:56'!hour: aBlock	self hour with: aBlock! !!RRRssRenderCanvas methodsFor: 'private' stamp: 'pmm 4/12/2007 20:39'!html: aString	self flush.	self document nextPutAll: aString! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/29/2006 00:45'!image	"Specifies a GIF, JPEG or PNG image that can be displayed with the channel.	the following subelements are required:		url		title		link	the following subelements are optional:		width		height		description	"	^ self tag: 'image'! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/22/2006 14:56'!image: aBlock	self image with: aBlock! !!RRRssRenderCanvas methodsFor: 'initialize-release' stamp: 'pmm 9/25/2006 16:22'!initializeWithContext: aRenderingContext callbacks: aCallbackStore	context := aRenderingContext.	callbacks := aCallbackStore! !!RRRssRenderCanvas methodsFor: 'item' stamp: 'pmm 9/22/2006 14:56'!item	^ self tag: 'item'! !!RRRssRenderCanvas methodsFor: 'item' stamp: 'pmm 9/22/2006 14:56'!item: aBlock	self item with: aBlock! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/27/2006 11:05'!language	"The language the channel is written in. This allows aggregators to group all Italian language sites, for example, on a single page. A list of allowable values for this element, as provided by Netscape, is implemented in the 'languages-generated' protocl of RRLanguageTag. You may also use values defined by the W3C (http://www.w3.org/TR/REC-html40/struct/dirlang.html#langcodes)."	^ self brush: RRLanguageTag new! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/22/2006 14:56'!language: aBlock	self language with: aBlock! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/29/2006 00:17'!lastBuildDate	"The last time the content of the channel changed.	again an RFC 822 date like all the other dates	e.g.: 'Sat, 07 Sep 2002 09:42:31 GMT'"	^ self tag: 'lastBuildDate'! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/22/2006 14:56'!lastBuildDate: aBlock	self lastBuildDate with: aBlock! !!RRRssRenderCanvas methodsFor: 'channel-required' stamp: 'pmm 9/27/2006 11:02'!link	"---- as required subelement of channel ----	The URL to the HTML website corresponding to the channel.	e.g.: 'http://www.goupstate.com/'		---- as required subelement of item ----	The URL of the item.		---- as required subelement of image ----	is the URL of the site, when the channel is rendered, the image is a link to the site. (Note, in practice the image <title> and <link> should have the same value as the channel's <title> and <link>		---- as required subelement of textInput ----	The URL of the CGI script that processes text input requests."		^ self tag: 'link'! !!RRRssRenderCanvas methodsFor: 'channel-required' stamp: 'pmm 9/22/2006 14:56'!link: aBlock	self link with: aBlock! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/27/2006 11:28'!managingEditor	"Email address for person responsible for editorial content.	e.g.: 'George Matesky <geo@herald.com>'"	^ self tag: 'managingEditor'! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/22/2006 14:56'!managingEditor: aBlock	self managingEditor with: aBlock! !!RRRssRenderCanvas methodsFor: 'textinput-required' stamp: 'pmm 9/29/2006 11:31'!name	"The name of the text object in the text input area."	^ self tag: 'name'! !!RRRssRenderCanvas methodsFor: 'textinput-required' stamp: 'pmm 9/22/2006 14:56'!name: aBlock	self name with: aBlock! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/29/2006 12:04'!publicationDate	"---- as optional subelement of channel ----	The publication date for the content in the channel. For example, the New York Times publishes on a daily basis, the publication date flips once every 24 hours. That's when the pubDate of the channel changes. All date-times in RSS conform to the Date and Time Specification of RFC 822(http://asg.web.cmu.edu/rfc/rfc822.html#sec-5), with the exception that the year may be expressed with two characters or four characters (four preferred).		---- as optional subelement of item ----	Indicates when the item was published.	Its value is a date, indicating when the item was published. If it's a date in the future, aggregators may choose to not display the item until that date.		e.g: 'Sat, 07 Sep 2002 00:00:01 GMT'	minimal: '20 Jun 82 23:59 EST'"	^ self tag: 'pubDate'! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/22/2006 14:56'!publicationDate: aBlock	self publicationDate with: aBlock! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/29/2006 00:47'!rating	"The PICS (http://www.w3.org/PICS/) rating for the channel."	^ self tag: 'rating'! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/22/2006 14:56'!rating: aBlock	self rating with: aBlock! !!RRRssRenderCanvas methodsFor: 'convenience' stamp: 'pmm 4/9/2007 19:42'!renderContentEncoded: aOneArgumentBlock	"renders the html content of an item	a render canvas will be passed as an argument to the block"	self contentEncoded		with: [			self renderHtml: aOneArgumentBlock ]! !!RRRssRenderCanvas methodsFor: 'convenience' stamp: 'pmm 8/16/2007 22:49'!renderHtml: aOneArgumentBlock	"convenvience method to render html	aOneArgumentBlock will be passed an html canvas"	self text: (WARenderCanvas builder render: aOneArgumentBlock)! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/29/2006 00:53'!skipDays	"A hint for aggregators telling them which days they can skip.		An XML element that contains up to seven <day> sub-elements whose value is Monday, Tuesday, Wednesday, Thursday, Friday, Saturday or Sunday. Aggregators may not read the channel during days listed in the skipDays element."	^ self tag: 'skipDays'! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/22/2006 14:56'!skipDays: aBlock	self skipDays with: aBlock! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/29/2006 00:50'!skipHours	"A hint for aggregators telling them which hours they can skip.		An XML element that contains up to 24 <hour> sub-elements whose value is a number between 0 and 23, representing a time in GMT, when aggregators, if they support the feature, may not read the channel on hours listed in the skipHours element. The hour beginning at midnight is hour zero."	^ self tag: 'skipHours'! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/22/2006 14:56'!skipHours: aBlock	self skipHours with: aBlock! !!RRRssRenderCanvas methodsFor: 'item-optional' stamp: 'pmm 9/29/2006 12:07'!source	"The RSS channel that the item came from.		Its value is the name of the RSS channel that the item came from, derived from its <title>. It has one required attribute, url, which links to the XMLization of the source.		rss source		url: 'http://www.tomalak.org/links2.xml';		with: 'Tomalak''s Realm'		The purpose of this element is to propagate credit for links, to publicize the sources of news items. It can be used in the Post command of an aggregator. It should be generated automatically when forwarding an item from an aggregator to a weblog authoring tool."	^ self brush: RRSourceTag new! !!RRRssRenderCanvas methodsFor: 'item-optional' stamp: 'pmm 9/22/2006 14:56'!source: aBlock	self source with: aBlock! !!RRRssRenderCanvas methodsFor: 'convenience' stamp: 'pmm 1/7/2008 20:00'!space	self html: self spaceEntity! !!RRRssRenderCanvas methodsFor: 'xml' stamp: 'mb 11/4/2006 10:23'!spaceEntity	^'&#160;'! !!RRRssRenderCanvas methodsFor: 'private' stamp: 'pmm 2/23/2007 09:33'!tag: aString	"copy pasted from WAHtmlCanvas"	^ self brush: (WAGenericTag tag: aString)! !!RRRssRenderCanvas methodsFor: 'private' stamp: 'pmm 4/9/2007 11:31'!text: anObject	"copy pasted from WAHtmlCanvas"	self document print: anObject! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/29/2006 00:49'!textInput	"Specifies a text input box that can be displayed with the channel.	The purpose of the <textInput> element is something of a mystery. You can use it to specify a search engine box. Or to allow a reader to provide feedback. Most aggregators ignore it.		It has the following required subelements:		title		description		name		link"	^ self tag: 'textInput'! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/22/2006 14:56'!textInput: aBlock	self textInput with: aBlock! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/29/2006 00:39'!timeToLive	"It's a number of minutes that indicates how long a channel can be cached before refreshing from the source. This makes it possible for RSS sources to be managed by a file-sharing network such as Gnutella.		e.g.: 60"	^ self tag: 'ttl'! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/22/2006 14:56'!timeToLive: aBlock	self timeToLive with: aBlock! !!RRRssRenderCanvas methodsFor: 'channel-required' stamp: 'pmm 9/27/2006 11:01'!title	"----- as required subelement of channel ----	The name of the channel. It's how people refer to your service. If you have an HTML website that contains the same information as your RSS file, the title of your channel should be the same as the title of your website.	e.g.: 'GoUpstate.com News Headlines'		---- as required subelement of item ----	The title of the item.		---- as required subelement of image ----	describes the image, it's used in the ALT attribute of the HTML <img> tag when the channel is rendered in HTML		---- as required subelement of textInput ----	The label of the Submit button in the text input area."		^ self tag: 'title'! !!RRRssRenderCanvas methodsFor: 'channel-required' stamp: 'pmm 9/22/2006 14:56'!title: aBlock	self title with: aBlock! !!RRRssRenderCanvas methodsFor: 'image-required' stamp: 'pmm 9/29/2006 11:27'!url	"is the URL of a GIF, JPEG or PNG image that represents the channel."	^ self tag: 'url'! !!RRRssRenderCanvas methodsFor: 'image-required' stamp: 'pmm 9/29/2006 00:56'!url: aBlock	self url with: aBlock! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/27/2006 11:29'!webMaster	"Email address for person responsible for technical issues relating to channel.	e.g.: 'Betty Guernsey <betty@herald.com>'"	^ self tag: 'webMaster'! !!RRRssRenderCanvas methodsFor: 'channel-optional' stamp: 'pmm 9/22/2006 14:56'!webMaster: aBlock	self webMaster with: aBlock! !!RRRssRenderCanvas methodsFor: 'image-optional' stamp: 'pmm 9/29/2006 11:28'!width	"Optional elements include <width> and <height>, numbers, indicating the width and height of the image in pixels.		Maximum value for width is 144, default value is 88."	^ self tag: 'width'! !!RRRssRenderCanvas methodsFor: 'image-optional' stamp: 'pmm 9/22/2006 14:56'!width: aBlock	self width with: aBlock! !!RRRssRenderCanvas methodsFor: 'convenience' stamp: 'pmm 9/5/2007 23:06'!withLineBreaks: aString	aString isEmptyOrNil ifTrue: [ ^self ].	self renderHtml: [ :html |		html withLineBreaks: aString ]! !!RRRssHandler class methodsFor: 'accessing' stamp: 'pmm 4/9/2007 13:48'!description	^'RSS feed'! !!RRRssHandler methodsFor: 'accessing' stamp: 'pmm 4/9/2007 12:09'!configurationComponent	^RRHandlerEditor new		handler: self;		yourself! !!RRRssHandler methodsFor: 'private' stamp: 'pmm 7/1/2007 21:57'!createRoot	^self rootComponent new! !!RRRssHandler methodsFor: 'processing' stamp: 'pmm 1/7/2008 19:58'!handleRequest: aRequest	| response document context canvas root component |	response := WAResponse new contentType: 'application/rss+xml'.	document := WAHtmlStreamDocument new.	root := RRRssRoot new.		document stream: response stream.	document open: root.	context := WARenderingContext new document: document.	canvas := RRRssRenderCanvas context: context callbacks: Dictionary new.		component := self createRoot.		[component initialRequest: aRequest.	component updateRoot: aRequest.	canvas render: component ]		on: Error		do: [ :err |			self openDebugger				ifTrue: [ SeasidePlatformSupport openDebuggerOn: err ]				ifFalse: [ response := WAResponse internalError: err ] ].	document close: root.	^response! !!RRRssHandler methodsFor: 'initialize-release' stamp: 'pmm 4/9/2007 18:54'!initialize	super initialize.	self openDebugger: true! !!RRRssHandler methodsFor: 'testing' stamp: 'pmm 4/9/2007 20:26'!isFeed	^true! !!RRRssHandler methodsFor: 'accessing' stamp: 'pmm 4/9/2007 18:53'!openDebugger	^openDebugger! !!RRRssHandler methodsFor: 'accessing' stamp: 'pmm 4/9/2007 18:54'!openDebugger: aBoolean 	openDebugger := aBoolean! !!RRRssHandler methodsFor: 'accessing' stamp: 'pmm 4/9/2007 12:23'!rootComponent	^rootComponent! !!RRRssHandler methodsFor: 'accessing' stamp: 'pmm 4/9/2007 18:54'!rootComponent: aClass 	rootComponent := aClass! !!RRChange methodsFor: 'api' stamp: 'mb 11/1/2006 17:22'!addParametersTo: anUrl	self hasChangedClass ifFalse: [^self].	anUrl addParameter: 'class' value: self changedClassName.	self hasChangedSelector ifTrue: [		anUrl addParameter: 'method' value: self changedSelector ].	self isMeta ifTrue: [		anUrl addParameter: 'meta']! !!RRChange methodsFor: 'accessing' stamp: 'mb 10/29/2006 19:12'!author	^author! !!RRChange methodsFor: 'accessing' stamp: 'mb 10/29/2006 19:11'!author: anObject	author := anObject! !!RRChange methodsFor: 'accessing' stamp: 'mb 10/28/2006 16:16'!changedClass	^ changedClass! !!RRChange methodsFor: 'accessing' stamp: 'mb 10/28/2006 16:16'!changedClass: anObject	changedClass := anObject! !!RRChange methodsFor: 'api' stamp: 'mb 11/1/2006 17:22'!changedClassName	self hasChangedClass ifFalse: [^nil].	^ self changedClass theNonMetaClass fullName! !!RRChange methodsFor: 'accessing' stamp: 'mb 10/28/2006 16:34'!changedSelector	^ changedSelector! !!RRChange methodsFor: 'accessing' stamp: 'mb 10/28/2006 16:34'!changedSelector: aSymbol	changedSelector := aSymbol! !!RRChange methodsFor: 'accessing' stamp: 'mb 11/2/2006 10:50'!description	^description ifNil: [ self sourceCode ].! !!RRChange methodsFor: 'accessing' stamp: 'mb 10/30/2006 06:51'!description: aString	description := aString! !!RRChange methodsFor: 'testing' stamp: 'mb 11/6/2006 07:48'!hasChangedClass	"Some VW changes are not about any specific class"	^self changedClass notNil! !!RRChange methodsFor: 'testing' stamp: 'mb 11/1/2006 17:21'!hasChangedSelector	^self changedSelector notNil! !!RRChange methodsFor: 'testing' stamp: 'mb 10/29/2006 11:17'!isMeta	^self changedClass isMeta! !!RRChange methodsFor: 'accessing' stamp: 'mb 11/2/2006 10:03'!sourceCode	^sourceCode! !!RRChange methodsFor: 'accessing' stamp: 'mb 11/2/2006 10:04'!sourceCode: aString	sourceCode := aString! !!RRChange methodsFor: 'api' stamp: 'mb 11/2/2006 10:36'!sourceCodeLimitedTo: max	self sourceCode ifNil: [ ^String new ].	^self sourceCode copyFrom: 1 to: (max min: self sourceCode size)! !!RRChange methodsFor: 'accessing' stamp: 'mb 10/29/2006 19:12'!timestamp	^timestamp! !!RRChange methodsFor: 'accessing' stamp: 'mb 10/29/2006 19:12'!timestamp: aTimestamp	timestamp := aTimestamp! !!RRChange methodsFor: 'accessing' stamp: 'mb 11/2/2006 10:24'!title	^title! !!RRChange methodsFor: 'accessing' stamp: 'mb 11/2/2006 10:24'!title: aString	title := aString! !!RREmailAddress class methodsFor: 'instance creation' stamp: 'pmm 10/12/2006 23:35'!address: aString	^self new		address: aString;		yourself! !!RREmailAddress class methodsFor: 'instance creation' stamp: 'pmm 10/12/2006 23:35'!address: anAddressString username: aUsernameString	^self new		address: anAddressString;		username: aUsernameString;		yourself! !!RREmailAddress methodsFor: 'accessing' stamp: 'pmm 10/12/2006 23:31'!address	^address! !!RREmailAddress methodsFor: 'accessing' stamp: 'pmm 10/12/2006 23:31'!address: anObject	address := anObject! !!RREmailAddress methodsFor: 'displaying' stamp: 'pmm 10/12/2006 23:34'!displayString	^String streamContents: [ :stream |		username isNil ifFalse: [			stream				nextPutAll: username;				nextPutAll: ' <'].		stream nextPutAll: address.		username isNil ifFalse: [			stream nextPut: $> ] ]! !!RREmailAddress methodsFor: 'printing' stamp: 'pmm 10/12/2006 23:44'!printOn: aStream	super printOn: aStream.	aStream nextPut: $(.	aStream nextPutAll: self displayString.	aStream nextPut: $)! !!RREmailAddress methodsFor: 'accessing' stamp: 'pmm 10/12/2006 23:31'!username	^username! !!RREmailAddress methodsFor: 'accessing' stamp: 'pmm 10/12/2006 23:31'!username: anObject	username := anObject! !!RRRfc822DateTime class methodsFor: 'instance creation' stamp: 'pmm 10/23/2006 10:14'!dateAndTime: aDateAndTime timezoneString: aString	^self new		dateAndTime: aDateAndTime;		timezoneString: aString;		yourself! !!RRRfc822DateTime class methodsFor: 'instance creation' stamp: 'pmm 10/23/2006 10:43'!newDateAndTime: aDateAndTime	^self		newDateAndTime: aDateAndTime		offset: aDateAndTime offset! !!RRRfc822DateTime class methodsFor: 'instance creation' stamp: 'pmm 10/23/2006 10:32'!newDateAndTime: aDateAndTime offset: aDuration	^self		dateAndTime: aDateAndTime		timezoneString: (self offsetString:  aDuration)! !!RRRfc822DateTime class methodsFor: 'instance creation' stamp: 'pmm 10/23/2006 11:01'!newUtc: aDateAndTime	^self		dateAndTime: aDateAndTime asUTC		timezoneString: 'UT'! !!RRRfc822DateTime class methodsFor: 'private' stamp: 'pmm 8/28/2008 14:34'!offsetString: aDuration	^String streamContents: [ :stream |		| positive |		positive := aDuration asSeconds > 0		 	or: [ aDuration asSeconds = 0				and: [ aDuration nanoSeconds > 0 ] ].		stream nextPut: (positive ifTrue: [ $+ ] ifFalse: [ $- ]).		stream nextPutAll: (aDuration hours printPaddedWith: $0 to: 2 base: 10).		stream nextPutAll: (aDuration minutes printPaddedWith: $0 to: 2 base: 10) ]! !!RRRfc822DateTime methodsFor: 'accessing' stamp: 'pmm 10/23/2006 10:14'!dateAndTime	^dateAndTime! !!RRRfc822DateTime methodsFor: 'accessing' stamp: 'pmm 10/23/2006 10:14'!dateAndTime: anObject	dateAndTime := anObject! !!RRRfc822DateTime methodsFor: 'printing' stamp: 'pmm 10/23/2006 10:42'!printString	^String streamContents: [ :stream |		stream			nextPutAll: (dateAndTime dayOfWeekName first: 3);			nextPutAll: ', ';			nextPutAll: (dateAndTime dayOfMonth printPaddedWith: $0 to: 2);			space;			nextPutAll: (dateAndTime monthName first: 3);			space;			nextPutAll: dateAndTime year displayString;			space;			nextPutAll: (dateAndTime hour24 printPaddedWith: $0 to: 2);			nextPut: $:;			nextPutAll: (dateAndTime minute printPaddedWith: $0 to: 2); 			nextPut: $:;			nextPutAll: (dateAndTime second printPaddedWith: $0 to: 2);			space;			nextPutAll: timezoneString ]! !!RRRfc822DateTime methodsFor: 'accessing' stamp: 'pmm 10/23/2006 10:14'!timezoneString	^timezoneString! !!RRRfc822DateTime methodsFor: 'accessing' stamp: 'pmm 10/23/2006 10:14'!timezoneString: anObject	timezoneString := anObject! !!RSRssVWInfo class methodsFor: 'accessing' stamp: 'pmm 4/9/2007 19:33'!addonName	^'RSRSS2'! !!RRCategoryTag methodsFor: 'attributes' stamp: 'pmm 9/29/2006 00:22'!category: aString	self attributeAt: 'category' put: aString! !!RRCategoryTag methodsFor: 'accessing' stamp: 'pmm 9/29/2006 00:22'!tag	^'category'! !!RRCloudTag class methodsFor: 'accessing-tags' stamp: 'pmm 9/22/2006 14:43'!tags	"	self generateTags	"	^ #(		('item' item item: 'item')			('title' title title: 'channel-required')		('link' link link: 'channel-required')		('description' description description: 'channel-required')				('language' language language: 'channel-optional')		('copyright' copyright copyright: 'channel-optional')		('managingEditor' managingEditor managingEditor: 'channel-optional')		('webMaster' webMaster webMaster: 'channel-optional')		('pubDate' publicationDate publicationDate: 'channel-optional')		('lastBuildDate' lastBuildDate lastBuildDate: 'channel-optional')		('category' category category: 'channel-optional')		('generator' generator generator: 'channel-optional')		('docs' documentation documentation: 'channel-optional')		('cloud' cloud cloud: 'channel-optional')		('ttl' timeToLive timeToLive: 'channel-optional')		('image' image image: 'channel-optional')		('rating' rating rating: 'channel-optional')		('textInput' textInput textInput: 'channel-optional')		('skipHours' skipHours skipHours: 'channel-optional')		('skipDays' skipDays skipDays: 'channel-optional')				('comments' comments comments: 'item-optional')		('enclosure' enclosure enclosure: 'item-optional')		('guid' guid guid: 'item-optional')				('name' name name: 'image-required')				)! !!RRCloudTag methodsFor: 'protocols' stamp: 'pmm 9/22/2006 14:37'!beSoap	self protocol: 'soap'! !!RRCloudTag methodsFor: 'protocols' stamp: 'pmm 9/22/2006 14:37'!beXmlRpc	self protocol: 'xml-rpc'! !!RRCloudTag methodsFor: 'attributes' stamp: 'pmm 9/22/2006 14:34'!domain: aString	^self attributeAt: 'domain' put: aString! !!RRCloudTag methodsFor: 'attributes' stamp: 'pmm 9/22/2006 14:35'!path: aString	^self attributeAt: 'path' put: aString! !!RRCloudTag methodsFor: 'attributes' stamp: 'pmm 9/22/2006 14:35'!port: anInteger	^self attributeAt: 'port' put: anInteger! !!RRCloudTag methodsFor: 'attributes' stamp: 'pmm 9/22/2006 14:37'!protocol: aString	^self attributeAt: 'protocol' put: aString! !!RRCloudTag methodsFor: 'attributes' stamp: 'pmm 9/22/2006 14:35'!registerProcedure: aString	^self attributeAt: 'registerProcedure' put: aString! !!RRCloudTag methodsFor: 'accessing' stamp: 'pmm 9/22/2006 14:34'!tag	^'cloud'! !!RRDayTag methodsFor: 'attributes' stamp: 'pmm 9/29/2006 00:52'!monday	^self with: 'Monday'! !!RRDayTag methodsFor: 'attributes' stamp: 'pmm 9/29/2006 00:53'!saturday	^self with: 'Saturday'! !!RRDayTag methodsFor: 'attributes' stamp: 'pmm 9/29/2006 00:53'!sunday	^self with: 'Sunday'! !!RRDayTag methodsFor: 'accessing' stamp: 'pmm 9/29/2006 00:52'!tag	^'day'! !!RRDayTag methodsFor: 'attributes' stamp: 'pmm 9/29/2006 00:52'!thursday	^self with: 'Thursday'! !!RRDayTag methodsFor: 'attributes' stamp: 'pmm 9/29/2006 00:53'!triday	^self with: 'Friday'! !!RRDayTag methodsFor: 'attributes' stamp: 'pmm 9/29/2006 00:52'!tuesday	^self with: 'Tuesday'! !!RRDayTag methodsFor: 'attributes' stamp: 'pmm 9/29/2006 00:52'!wednesday	^self with: 'Wednesday'! !!RREnclosureTag methodsFor: 'attributes' stamp: 'pmm 9/29/2006 11:40'!length: anInteger	self attributeAt: 'length' put: anInteger! !!RREnclosureTag methodsFor: 'accessing' stamp: 'pmm 9/29/2006 11:39'!tag	^'enclosure'! !!RREnclosureTag methodsFor: 'attributes' stamp: 'pmm 9/29/2006 11:41'!type: aString	self attributeAt: 'type' put: aString! !!RREnclosureTag methodsFor: 'attributes' stamp: 'pmm 9/29/2006 11:41'!url: aString	self attributeAt: 'url' put: aString! !!RRGuidTag methodsFor: 'attributes' stamp: 'pmm 10/23/2006 10:52'!beNoPermaLink	self isPermaLink: false! !!RRGuidTag methodsFor: 'attributes' stamp: 'pmm 10/23/2006 10:52'!bePermaLink	self isPermaLink: true! !!RRGuidTag methodsFor: 'attributes' stamp: 'pmm 10/23/2006 10:52'!isPermaLink: aBoolean	"the value really must be a string else seaside makes	isPermaLink='isPermaLink'"	self attributeAt: 'isPermaLink' put: aBoolean displayString! !!RRGuidTag methodsFor: 'accessing' stamp: 'pmm 9/29/2006 12:00'!tag	^'guid'! !!RRLanguageTag class methodsFor: 'accessing' stamp: 'pmm 9/22/2006 15:16'!codes	^Array streamContents: [ :stream |		self codesString lines do: [ :line |			stream nextPut: (Array				with: (line copyUpTo: Character tab) asLegalSelector				with: (line copyAfter: Character tab)) ] ]! !!RRLanguageTag class methodsFor: 'accessing' stamp: 'pmm 9/22/2006 15:09'!codesString	^'Afrikaans	afAlbanian	sqBasque	euBelarusian	beBulgarian	bgCatalan	caChinese (Simplified)	zh-cnChinese (Traditional)	zh-twCroatian	hrCzech	csDanish	daDutch	nlDutch (Belgium)	nl-beDutch (Netherlands)	nl-nlEnglish	enEnglish (Australia)	en-auEnglish (Belize)	en-bzEnglish (Canada)	en-caEnglish (Ireland)	en-ieEnglish (Jamaica)	en-jmEnglish (New Zealand)	en-nzEnglish (Phillipines)	en-phEnglish (South Africa)	en-zaEnglish (Trinidad)	en-ttEnglish (United Kingdom)	en-gbEnglish (United States)	en-usEnglish (Zimbabwe)	en-zwEstonian	etFaeroese	foFinnish	fiFrench	frFrench (Belgium)	fr-beFrench (Canada)	fr-caFrench (France)	fr-frFrench (Luxembourg)	fr-luFrench (Monaco)	fr-mcFrench (Switzerland)	fr-chGalician	glGaelic	gdGerman	deGerman (Austria)	de-atGerman (Germany)	de-deGerman (Liechtenstein)	de-liGerman (Luxembourg)	de-luGerman (Switzerland)	de-chGreek	elHawaiian	hawHungarian	huIcelandic	isIndonesian	inIrish	gaItalian	itItalian (Italy)	it-itItalian (Switzerland)	it-chJapanese	jaKorean	koMacedonian	mkNorwegian	noPolish	plPortuguese	ptPortuguese (Brazil)	pt-brPortuguese (Portugal)	pt-ptRomanian	roRomanian (Moldova)	ro-moRomanian (Romania)	ro-roRussian	ruRussian (Moldova)	ru-moRussian (Russia)	ru-ruSerbian	srSlovak	skSlovenian	slSpanish	esSpanish (Argentina)	es-arSpanish (Bolivia)	es-boSpanish (Chile)	es-clSpanish (Colombia)	es-coSpanish (Costa Rica)	es-crSpanish (Dominican Republic)	es-doSpanish (Ecuador)	es-ecSpanish (El Salvador)	es-svSpanish (Guatemala)	es-gtSpanish (Honduras)	es-hnSpanish (Mexico)	es-mxSpanish (Nicaragua)	es-niSpanish (Panama)	es-paSpanish (Paraguay)	es-pySpanish (Peru)	es-peSpanish (Puerto Rico)	es-prSpanish (Spain)	es-esSpanish (Uruguay)	es-uySpanish (Venezuela)	es-veSwedish	svSwedish (Finland)	sv-fiSwedish (Sweden)	sv-seTurkish	trUkranian	uk'! !!RRLanguageTag class methodsFor: 'generating' stamp: 'pmm 9/22/2006 15:27'!generateFor: aPair	(self includesSelector: aPair first) ifFalse: [		self 			compile: aPair first, '	self with: ''', aPair last, ''''			classified: self generatedCategory ]! !!RRLanguageTag class methodsFor: 'generating' stamp: 'pmm 9/22/2006 15:26'!generateTags	^self codes do: [ :each |		self generateFor: each ]! !!RRLanguageTag class methodsFor: 'accessing' stamp: 'pmm 9/22/2006 15:18'!generatedCategory	^'languages-generated'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!afrikaans	self with: 'af'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!albanian	self with: 'sq'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!basque	self with: 'eu'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!belarusian	self with: 'be'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!bulgarian	self with: 'bg'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!catalan	self with: 'ca'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!chineseSimplified	self with: 'zh-cn'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!chineseTraditional	self with: 'zh-tw'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!croatian	self with: 'hr'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!czech	self with: 'cs'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!danish	self with: 'da'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!dutch	self with: 'nl'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!dutchBelgium	self with: 'nl-be'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!dutchNetherlands	self with: 'nl-nl'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!english	self with: 'en'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!englishAustralia	self with: 'en-au'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!englishBelize	self with: 'en-bz'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!englishCanada	self with: 'en-ca'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!englishIreland	self with: 'en-ie'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!englishJamaica	self with: 'en-jm'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!englishNewZealand	self with: 'en-nz'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!englishPhillipines	self with: 'en-ph'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!englishSouthAfrica	self with: 'en-za'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!englishTrinidad	self with: 'en-tt'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!englishUnitedKingdom	self with: 'en-gb'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!englishUnitedStates	self with: 'en-us'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!englishZimbabwe	self with: 'en-zw'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!estonian	self with: 'et'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!faeroese	self with: 'fo'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!finnish	self with: 'fi'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!french	self with: 'fr'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!frenchBelgium	self with: 'fr-be'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!frenchCanada	self with: 'fr-ca'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!frenchFrance	self with: 'fr-fr'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!frenchLuxembourg	self with: 'fr-lu'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!frenchMonaco	self with: 'fr-mc'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!frenchSwitzerland	self with: 'fr-ch'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!gaelic	self with: 'gd'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!galician	self with: 'gl'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!german	self with: 'de'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!germanAustria	self with: 'de-at'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!germanGermany	self with: 'de-de'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!germanLiechtenstein	self with: 'de-li'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!germanLuxembourg	self with: 'de-lu'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!germanSwitzerland	self with: 'de-ch'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!greek	self with: 'el'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!hawaiian	self with: 'haw'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!hungarian	self with: 'hu'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!icelandic	self with: 'is'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!indonesian	self with: 'in'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!irish	self with: 'ga'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!italian	self with: 'it'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!italianItaly	self with: 'it-it'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!italianSwitzerland	self with: 'it-ch'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!japanese	self with: 'ja'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!korean	self with: 'ko'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!macedonian	self with: 'mk'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!norwegian	self with: 'no'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!polish	self with: 'pl'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!portuguese	self with: 'pt'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!portugueseBrazil	self with: 'pt-br'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!portuguesePortugal	self with: 'pt-pt'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!romanian	self with: 'ro'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!romanianMoldova	self with: 'ro-mo'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!romanianRomania	self with: 'ro-ro'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!russian	self with: 'ru'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!russianMoldova	self with: 'ru-mo'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!russianRussia	self with: 'ru-ru'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!serbian	self with: 'sr'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!slovak	self with: 'sk'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!slovenian	self with: 'sl'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanish	self with: 'es'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishArgentina	self with: 'es-ar'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishBolivia	self with: 'es-bo'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishChile	self with: 'es-cl'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishColombia	self with: 'es-co'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishCostaRica	self with: 'es-cr'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishDominicanRepublic	self with: 'es-do'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishEcuador	self with: 'es-ec'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishElSalvador	self with: 'es-sv'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishGuatemala	self with: 'es-gt'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishHonduras	self with: 'es-hn'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishMexico	self with: 'es-mx'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishNicaragua	self with: 'es-ni'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishPanama	self with: 'es-pa'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishParaguay	self with: 'es-py'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishPeru	self with: 'es-pe'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishPuertoRico	self with: 'es-pr'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishSpain	self with: 'es-es'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishUruguay	self with: 'es-uy'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!spanishVenezuela	self with: 'es-ve'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!swedish	self with: 'sv'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!swedishFinland	self with: 'sv-fi'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!swedishSweden	self with: 'sv-se'! !!RRLanguageTag methodsFor: 'accessing' stamp: 'pmm 9/25/2006 16:27'!tag	^'language'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!turkish	self with: 'tr'! !!RRLanguageTag methodsFor: 'languages-generated' stamp: 'pmm 9/22/2006 15:27'!ukranian	self with: 'uk'! !!RRSourceTag methodsFor: 'accessing' stamp: 'pmm 9/29/2006 12:06'!tag	^'source'! !!RRSourceTag methodsFor: 'attributes' stamp: 'pmm 9/29/2006 12:06'!url: aString	self attributeAt: 'url' put: aString! !!WADispatcherComponent methodsFor: '*rsrss2' stamp: 'pmm 4/9/2007 20:23'!addRssLinksToRoot: anHtmlRoot 	| entryPoints |	entryPoints := self entryPoints select: [ :each | each isFeed ].	entryPoints do: [ :each | anHtmlRoot rss		url: each basePath;		title: each description ]! !!RRRenderTest methodsFor: 'private' stamp: 'pmm 8/16/2007 22:50'!render: aBlock	^RRRssRenderCanvas builder render: aBlock! !!RRRenderTest methodsFor: 'private' stamp: 'pmm 8/16/2007 22:56'!renderFull: aBlock	^RRRssRenderCanvas builder		fullDocument: true;		render: aBlock! !!RRRenderTest methodsFor: 'testing' stamp: 'pmm 3/1/2007 22:47'!testExample	| acutalContent expectedContent |	acutalContent := self render: [ :rss |		rss description: 'Das super geile Blog.'.		rss contentEncoded: '<p>Das super geile Blog.</p>'.		rss generator: 'Pier 1.0.9-alpha'.		rss language english ].	expectedContent := '<description>Das super geile Blog.</description><content:encoded><!![CDATA[<p>Das super geile Blog.</p>]]></content:encoded><generator>Pier 1.0.9-alpha</generator><language>en</language>'.	self assert: acutalContent = expectedContent! !!RRRenderTest methodsFor: 'testing' stamp: 'pmm 4/9/2007 19:43'!testRenderExample	| acutalContent expectedContent |	acutalContent := self render: [ :rss |		rss description: 'Das super geile Blog.'.		rss renderContentEncoded: [ :html |			html paragraph:  'Das super geile Blog.' ].		rss generator: 'Pier 1.0.9-alpha'.		rss language english ].	expectedContent := '<description>Das super geile Blog.</description><content:encoded>&lt;p&gt;Das super geile Blog.&lt;/p&gt;</content:encoded><generator>Pier 1.0.9-alpha</generator><language>en</language>'.	self assert: acutalContent = expectedContent! !!RRRenderTest methodsFor: 'testing' stamp: 'pmm 8/16/2007 23:03'!testRenderExampleFull	| acutalContent expectedContent |	acutalContent := self renderFull: [ :rss |		rss description: 'Das super geile Blog.'.		rss renderContentEncoded: [ :html |			html paragraph:  'Das super geile Blog.' ].		rss generator: 'Pier 1.0.9-alpha'.		rss language english ].	expectedContent := '<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><description>Das super geile Blog.</description><content:encoded>&lt;p&gt;Das super geile Blog.&lt;/p&gt;</content:encoded><generator>Pier 1.0.9-alpha</generator><language>en</language></channel></rss>'.	self assert: acutalContent = expectedContent! !!RRRenderTest methodsFor: 'testing' stamp: 'pmm 9/5/2007 23:08'!testWithLineBreaks	| acutalContent expectedContent |	acutalContent := self render: [ :rss |		rss withLineBreaks: 'dassupergeileBlog' ].	expectedContent := 'das&lt;br/&gt;super&lt;br/&gt;geile&lt;br/&gt;Blog'.	self assert: acutalContent = expectedContent! !!RRRfc822DateTimeTest methodsFor: 'testing' stamp: 'pmm 8/28/2008 14:34'!testOffsetString	| duration formatted |	duration := Duration days: 0 hours: 2 minutes: 3 seconds: 0.	formatted := RRRfc822DateTime offsetString: duration.	self assert: '+0203' = formatted! !!RRRssRoot class methodsFor: 'instance creation' stamp: 'pmm 8/16/2007 23:00'!context: aRenderingContext	^ self new! !!RRRssRoot class methodsFor: 'accessing' stamp: 'pmm 4/9/2007 13:33'!defaultCharSet	^'utf-8'! !!RRRssRoot class methodsFor: 'accessing' stamp: 'pmm 9/22/2006 14:10'!defaultContentType	^'application/rss+xml' "; charset=utf-8"! !!RRRssRoot methodsFor: 'accessing' stamp: 'pmm 4/9/2007 13:31'!channelAttrs	^channelAttrs! !!RRRssRoot methodsFor: 'accessing' stamp: 'pmm 9/5/2007 22:40'!charSet	charSet isNil ifTrue: [		charSet := self class defaultCharSet ].	^charSet! !!RRRssRoot methodsFor: 'accessing' stamp: 'pmm 9/5/2007 22:41'!charSet: aString	charSet := aString! !!RRRssRoot methodsFor: 'writing' stamp: 'pmm 4/9/2007 20:21'!close: aDocument	self writeFootOn: aDocument! !!RRRssRoot methodsFor: 'accessing' stamp: 'pmm 9/22/2006 14:11'!contentType	^self class defaultContentType! !!RRRssRoot methodsFor: 'initialize-release' stamp: 'pmm 4/9/2007 13:30'!initialize		super initialize.	rssAttrs := WAHtmlAttributes new		at: 'version' put: '2.0';		at: 'xmlns:content' put: 'http://purl.org/rss/1.0/modules/content/';		at: 'xmlns:wfw' put: 'http://wellformedweb.org/CommentAPI/';		at: 'xmlns:dc' put: 'http://purl.org/dc/elements/1.1/';		yourself.	channelAttrs := WAHtmlAttributes new.! !!RRRssRoot methodsFor: 'writing' stamp: 'pmm 4/9/2007 20:21'!open: aDocument	self writeHeadOn: aDocument! !!RRRssRoot methodsFor: 'accessing' stamp: 'pmm 4/9/2007 13:31'!rssAttrs	^rssAttrs! !!RRRssRoot methodsFor: 'accessing' stamp: 'pmm 4/20/2007 23:23'!styles	styles isNil ifTrue: [		styles := OrderedCollection new ].	^styles! !!RRRssRoot methodsFor: 'elements' stamp: 'pmm 4/20/2007 23:26'!stylesheet	^ self add: (RRXmlStyleSheet root: self)! !!RRRssRoot methodsFor: 'writing' stamp: 'pmm 4/9/2007 13:19'!writeFootOn: aDocument	aDocument closeTag: 'channel'.	aDocument closeTag: 'rss'! !!RRRssRoot methodsFor: 'writing' stamp: 'pmm 4/9/2007 13:27'!writeHeadOn: aDocument	self writePreamleOn: aDocument.	self writeStylesOn: aDocument.		aDocument openTag: 'rss' attributes: rssAttrs.	aDocument openTag: 'channel' attributes: channelAttrs.! !!RRRssRoot methodsFor: 'writing' stamp: 'pmm 4/9/2007 13:25'!writePreamleOn: aDocument	aDocument nextPutAll: '<?xml version="1.0" encoding="'.	aDocument nextPutAll: self charSet.	aDocument nextPutAll: '"?>'! !!RRRssRoot methodsFor: 'writing' stamp: 'pmm 4/20/2007 23:26'!writeStylesOn: aDocument	styles isNil ifTrue: [ ^self ].	styles do: [ :each |		aDocument print: each ]! !!SeasidePlatformSupport class methodsFor: '*rsrss2-squeak' stamp: 'mb 10/20/2006 17:34'!defaultRSSGeneratorString	^(MCWorkingCopy allManagers		detect: [ :each | each package name = 'RSRSS' ]		ifNone: [ ^'RSRSS' ]) ancestry ancestorString! !!SeasidePlatformSupport class methodsFor: '*rsrss2-squeak' stamp: 'pmm 10/30/2006 22:15'!emailAddressFor: aString	| account |	account := SMSqueakMap default accounts		detect: [ :each | each initials = aString ]		ifNone: [ ^RREmailAddress			address: aString, '@mailinator.com'			username: aString ].	^RREmailAddress			address: account email			username: account name! !!SeasidePlatformSupport class methodsFor: '*rsrss2-squeak' stamp: 'mb 11/1/2006 17:41'!imageName	^SmalltalkImage current imageName! !!SeasidePlatformSupport class methodsFor: '*rsrss2-squeak' stamp: 'pmm 11/9/2006 23:03'!recentChanges	^(Utilities recentMethodSubmissions reversed		select: [ :each | each isValid and: [ each methodSymbol ~= #Comment ] ])		collect: [ :each |			| timeStamp initials class selector dateAndTime time date |			timeStamp := each timeStamp.			initials := timeStamp copyUpTo: Character space.			class := each actualClass.			selector := each methodSymbol.			dateAndTime := timeStamp copyAfter: Character space.			date := dateAndTime copyUpTo: Character space.			time := dateAndTime copyAfter: Character space.		RRChange new			changedClass: class;			changedSelector: selector;			author: (self emailAddressFor: initials);			title: class theNonMetaClass name , '>>' , selector;			description: each sourceString;			timestamp: (				DateAndTime					date: (Date readFromString: date)					time: (Time readFromString: time));			yourself ]! !!SeasidePlatformSupport class methodsFor: '*rsrss2-squeak' stamp: 'mb 11/1/2006 17:49'!shortImageName	^(self imageName findTokens: FileDirectory pathNameDelimiter) last! !!RRXmlStyleSheet methodsFor: 'attributes' stamp: 'pmm 4/20/2007 23:23'!beXsl	self type: 'text/xsl'! !!RRXmlStyleSheet methodsFor: 'printing' stamp: 'pmm 4/20/2007 23:22'!encodeOn: aDocument	aDocument nextPutAll: '<?xml-stylesheet'.		attributes encodeOn: self.	self childrenDo: [ :each | each encodeOn: aDocument ].		aDocument nextPutAll: '?>'! !!RRXmlStyleSheet methodsFor: 'accessing' stamp: 'pmm 4/21/2007 00:17'!tag	self shouldNotImplement! !!RRChangesDemo class methodsFor: 'testing' stamp: 'mb 10/28/2006 08:29'!canBeRoot	^true! !!RRChangesDemo class methodsFor: 'accessing' stamp: 'mb 11/1/2006 17:52'!description	^'An RSS feed about recent changes to image '		, SeasidePlatformSupport shortImageName! !!RRChangesDemo class methodsFor: 'initialization' stamp: 'mb 11/6/2006 08:04'!initialize		"self registerAsApplication: 'changes.rss'"! !!RRChangesDemo class methodsFor: 'testing' stamp: 'SW 2/3/2008 18:47'!isFeed	^true! !!RRChangesDemo methodsFor: 'rendering' stamp: 'mb 10/30/2006 07:04'!basePath	^WADispatcher default basePath! !!RRChangesDemo methodsFor: 'rendering' stamp: 'pmm 10/30/2006 21:49'!baseUrl	^WAUrl new		scheme: #http;		hostname: self session currentRequest host; "that looks a bit unsafe, better use #application"		addToPath: self basePath;		yourself! !!RRChangesDemo methodsFor: 'model' stamp: 'mb 10/28/2006 08:41'!dateOfImage	^DateAndTime now! !!RRChangesDemo methodsFor: 'model' stamp: 'mb 10/28/2006 08:41'!dateOfLastChange	^DateAndTime now! !!RRChangesDemo methodsFor: 'model' stamp: 'mb 10/28/2006 16:19'!recentChanges	^SeasidePlatformSupport recentChanges! !!RRChangesDemo methodsFor: 'rendering' stamp: 'mb 11/11/2006 15:06'!renderChange: aChange on: rss	| url |	url := self baseUrl addToPath: WABrowser appName; yourself.	aChange addParametersTo: url.	rss item: [		rss title: aChange title.		rss author: aChange author. "has to be an email address"		rss link: url.		rss description: [				rss renderHtml: [ :h | self renderDescription:  aChange description on: h ]].		rss publicationDate: (RRRfc822DateTime newDateAndTime: aChange timestamp) ]! !!RRChangesDemo methodsFor: 'rendering' stamp: 'mb 11/1/2006 17:51'!renderChannelOn: rss	rss title: [		rss text: 'Recent changes to the Seaside image'.		rss space.		rss text: SeasidePlatformSupport shortImageName].	rss link: self baseUrl asString , '/'. "Should go to the default app if defined"	rss description: [		rss text: 'Changes that were recently made to the Seaside image.'.		rss space.		rss text: SeasidePlatformSupport imageName].	rss language englishUnitedStates.	rss publicationDate:			(RRRfc822DateTime newDateAndTime: self dateOfLastChange).	rss lastBuildDate:			(RRRfc822DateTime newDateAndTime: self dateOfImage).	rss defaultDocumentation.	rss defaultGenerator.! !!RRChangesDemo methodsFor: 'rendering' stamp: 'mb 10/28/2006 17:10'!renderContentOn: rss	self renderChannelOn: rss.	self renderRecentChangesOn: rss.! !!RRChangesDemo methodsFor: 'rendering' stamp: 'mb 11/11/2006 15:54'!renderDescription: aString on: html	| aStream |	aString isNil ifTrue: [^self].	aStream := aString readStream.	html preformatted: [		html bold: aStream nextLine.		aStream atEnd ifFalse:			[html text: (String with: Character cr).			html text: aStream upToEnd]].! !!RRChangesDemo methodsFor: 'rendering' stamp: 'mb 10/28/2006 17:00'!renderRecentChangesOn: rss	self recentChanges do: [:each | self renderChange: each on: rss].! !!RRChangesDemo methodsFor: 'rendering' stamp: 'mb 11/2/2006 12:36'!updateRoot: xmlRoot	"Here as a reminder"	super updateRoot: xmlRoot! !!RRComponent class methodsFor: 'initialization' stamp: 'pmm 4/9/2007 13:10'!registerAsApplication: aString	WADispatcher default 		register: ((RRRssHandler named: aString)			rootComponent: self;			yourself)! !!RRComponent methodsFor: 'adding' stamp: 'pmm 4/9/2007 13:45'!addDecoration: newDecoration	self shouldNotImplement! !!RRComponent methodsFor: 'call/answer' stamp: 'pmm 4/9/2007 13:44'!answer: aComponent	self shouldNotImplement ! !!RRComponent methodsFor: 'call/answer' stamp: 'pmm 4/9/2007 13:44'!call: aComponent	self shouldNotImplement ! !!RRComponent methodsFor: 'initialize-release' stamp: 'pmm 4/9/2007 13:36'!initializeDecoration	"we don't support decorations"! !!RRComponent methodsFor: 'rendering' stamp: 'pmm 4/9/2007 13:38'!renderOn: aRenderer	self renderWithContext: aRenderer context! !!RRComponent methodsFor: 'rendering' stamp: 'pmm 9/22/2006 14:45'!rendererClass	^RRRssRenderCanvas! !!RRComponent methodsFor: 'convenience' stamp: 'pmm 4/9/2007 13:56'!session	self shouldNotImplement ! !!RRDemo class methodsFor: 'testing' stamp: 'pmm 9/23/2006 12:33'!canBeRoot	^true! !!RRDemo class methodsFor: 'accessing' stamp: 'pmm 10/23/2006 11:11'!description	^'RSS Demo'! !!RRDemo class methodsFor: 'testing' stamp: 'SW 2/6/2008 22:31'!isFeed	^true! !!RRDemo methodsFor: 'private' stamp: 'pmm 10/23/2006 10:50'!firstPublicationDate	^DateAndTime		year: 2003		month: 6		day: 3		hour: 9		minute: 39		second: 21! !!RRDemo methodsFor: 'private' stamp: 'pmm 10/23/2006 10:52'!fourthPublicationDate	^DateAndTime		year: 2003		month: 5		day: 20		hour: 8		minute: 56		second: 02! !!RRDemo methodsFor: 'rendering' stamp: 'pmm 9/23/2006 12:18'!renderChannelOn: rss	rss title: 'Liftoff News'.	rss link: 'http://liftoff.msfc.nasa.gov/'.	rss description: 'Liftoff to Space Exploration.'.	rss language englishUnitedStates.	rss publicationDate: 'Tue, 10 Jun 2003 04:00:00 GMT'.	rss lastBuildDate: 'Tue, 10 Jun 2003 09:41:01 GMT'.	rss defaultDocumentation.	rss generator: 'Weblog Editor 2.0'.	rss managingEditor: 'editor@example.com'.	rss webMaster: 'webmaster@example.com'! !!RRDemo methodsFor: 'rendering' stamp: 'pmm 9/23/2006 12:26'!renderContentOn: rss	self renderChannelOn: rss.	self renderFirstItemOn: rss.	self renderSecondItemOn: rss.	self renderThirdItemOn: rss.	self renderFourthtemOn: rss! !!RRDemo methodsFor: 'rendering' stamp: 'pmm 10/23/2006 10:50'!renderFirstItemOn: rss	rss item: [		rss title: 'Star City'.		rss author: 'joesmith@example.com (Joe Smith)'.		rss link: 'http://liftoff.msfc.nasa.gov/news/2003/news-starcity.asp'.		rss description: 'How do Americans get ready to work with Russians aboard the International Space Station? They take a crash course in culture, language and protocol at Russia''s Star City.'.		rss publicationDate: (RRRfc822DateTime newDateAndTime: self firstPublicationDate).		rss guid: 'http://liftoff.msfc.nasa.gov/2003/06/03.html#item573' ]! !!RRDemo methodsFor: 'rendering' stamp: 'pmm 10/12/2006 23:44'!renderFourthtemOn: rss	rss item: [		rss title: 'Astronauts'' Dirty Laundry'.		rss author: (RREmailAddress address: 'joesmith@example.com').		rss link: 'http://liftoff.msfc.nasa.gov/news/2003/news-laundry.asp'.		rss description: 'Compared to earlier spacecraft, the International Space Station has many luxuries, but laundry facilities are not one of them. Instead, astronauts have other options.'.		rss publicationDate: 'Tue, 20 May 2003 08:56:02 GMT'.		rss guid: 'http://liftoff.msfc.nasa.gov/2003/05/20.html#item570' ]! !!RRDemo methodsFor: 'rendering' stamp: 'pmm 10/23/2006 10:49'!renderSecondItemOn: rss	rss item: [		rss title: 'Space Exploration'.		rss author: 'Joe Smith <joesmith@example.com>'.		rss link: 'http://liftoff.msfc.nasa.gov/'.		rss description: 'Sky watchers in Europe, Asia, and parts of Alaska and Canada will experience a partial eclipse of the Sun on Saturday, May 31st.'.		rss publicationDate: (RRRfc822DateTime newUtc: self secondPublicationDate).		rss guid: 'http://liftoff.msfc.nasa.gov/2003/05/30.html#item572' ]! !!RRDemo methodsFor: 'rendering' stamp: 'pmm 10/23/2006 10:49'!renderThirdItemOn: rss	rss item: [		rss title: 'The Engine That Does More'.		rss author: (RREmailAddress address: 'joesmith@example.com' username: 'Joe Smith').		rss link: 'http://liftoff.msfc.nasa.gov/news/2003/news-VASIMR.asp'.		rss description: 'Before man travels to Mars, NASA hopes to design new engines that will let us fly through the Solar System more quickly.  The proposed VASIMR engine would do that.'.		rss publicationDate: (RRRfc822DateTime dateAndTime: self thirdPublicationDate timezoneString: 'EST').		rss guid: 'http://liftoff.msfc.nasa.gov/2003/05/27.html#item571' ]! !!RRDemo methodsFor: 'private' stamp: 'pmm 10/23/2006 10:49'!secondPublicationDate	^DateAndTime		year: 2003		month: 5		day: 30		hour: 11		minute: 6		second: 42! !!RRDemo methodsFor: 'private' stamp: 'pmm 10/23/2006 10:49'!thirdPublicationDate	^DateAndTime		year: 2003		month: 5		day: 27		hour: 8		minute: 37		second: 32! !!WAHtmlRoot methodsFor: '*rsrss2' stamp: 'pmm 4/6/2007 22:09'!rss	^self link beAlternate; beRss; yourself! !"RSRSS2"!!SUExecuter commentStamp: 'lr 2/27/2007 21:20' prior: 0!This is a simple facility for periodical execution of a function. This essentially encapsulates the native clearInterval/setInterval mechanism found in native Window objects.!!SUFactory commentStamp: 'lr 1/4/2007 21:07' prior: 0!I am a factory to create Scriptaculous objects. Actually I should be a Trait.!!SUElement commentStamp: 'lr 2/27/2007 20:57' prior: 0!The Element object sports a flurry of powerful DOM methods which you can access either as methods of Element (but that's rather old-fashioned now) or directly as methods of an extended element (thanks to Element.extend for that added bit of syntactic sugar).!!SUForm commentStamp: 'lr 2/27/2007 21:14' prior: 0!Form is a namespace and a module for all things form-related, packed with form manipulation and serialization goodness. While it holds methods dealing with forms as whole, its submodule Form.Element deals with specific form controls.!!SUFormElement commentStamp: 'lr 2/27/2007 21:16' prior: 0!This is a collection of methods that assist in dealing with form controls. They provide ways to focus, serialize, disable/enable or extract current value from a specific control.!!SUEnumerable commentStamp: 'lr 6/16/2007 18:28' prior: 0!Enumerable provides a large set of useful methods for enumerations, that is, objects that act as collections of values. It is a cornerstone of Prototype.!!SUSelector commentStamp: 'lr 4/25/2007 10:20' prior: 0!Takes an arbitrary number of CSS selectors (strings) and returns a document-order array of extended DOM elements that match any of them.!!SULogger commentStamp: 'lr 11/28/2006 10:40' prior: 0!I am a logger class to be used together with FireBug. I have nothing to do with Scriptaculous directly, but I nicely fit in here as everybody should be using FireBug for Script debugging anyway.!!SURequest commentStamp: 'lr 2/27/2007 20:39' prior: 0!Initiates and processes an AJAX request.!!SUEvaluator commentStamp: 'lr 2/27/2007 20:40' prior: 0!Initiates and processes an AJAX request. It automatically injects the JavaScript generated during the callback into the page.!!SUPeriodicalEvaluator commentStamp: 'rjl 3/5/2009 17:20' prior: 0!Periodically performs an AJAX request and gives you the ability to update multiple elements on the page with a single callaback. Offers a mechanism for decay, which lets it trigger at widening intervals while the response is unchanged.!!SUUpdater commentStamp: 'lr 2/27/2007 20:38' prior: 0!Performs an AJAX request and updates a container's contents based on the response text.!!SUPeriodical commentStamp: 'lr 2/27/2007 20:37' prior: 0!Periodically performs an AJAX request and updates a container's contents based on the response text. Offers a mechanism for decay, which lets it trigger at widening intervals while the response is unchanged.!!SUEvent commentStamp: 'lr 2/27/2007 21:13' prior: 0!Event management is one of the really sore spots of cross-browser scripting.True, the prominent issue is: everybody does it the W3C way, and MSIE does it another way altogether. But there are quite a few subtler, sneakier issues here and there waiting to bite your ankle, such as the keypress/keydown issue with KHTML-based browsers (Konqueror and Safari). Also, MSIE has a tendency to leak memory when it comes to discarding event handlers.!!SUInsertion commentStamp: 'lr 2/27/2007 21:19' prior: 0!Insertion provides a cross-browser solution to the dynamic insertion of HTML snippets (or plain text, obviously). Comes in four flavors: After, Before, Bottom and Top, which behave just as expected.!!SUResponders commentStamp: 'lr 2/27/2007 20:41' prior: 0!A repository of global listeners notified about every step of Prototype-based AJAX requests.!!SUTimedObserver commentStamp: 'kdt 1/19/2009 10:58' prior: 0!This is an abstract class which corresponds to the class Abstract.TimedObserver in the prototype.js library.All of the prototype.js observers watch an element (specified by #id) at a particular #frequency and evaluate a javascript #function if the element has changed. The function takes two arguments, element (the element that changed) and value (the new value).So the simplest use of an observer looks something like this:html textInput id: 'watchMe'.html script: (html formElementObserver	id: 'watchMe';	frequency: 2 seconds;	function: 'alert(value)')or you can put something more interesting in the function, e.g.:	function: (html updater ... )!!SUFormElementObserver commentStamp: 'lr 5/19/2009 09:09' prior: 0!This class corresponds to the Form.Observer class in the prototype.js library. It is typically instantiated via a canvas, e.g. (html scriptaculous formElementObserver).See the comment on SUTimedObserver for more details.!!SUFormObserver commentStamp: 'lr 5/19/2009 09:09' prior: 0!This class corresponds to the Form.Observer class in the prototype.js library. It is typically instantiated via a canvas, e.g. (html scriptaculous formObserver).See the comment on SUTimedObserver for more details.!!DateAndTime methodsFor: '*scriptaculous' stamp: 'lr 3/13/2007 09:05'!javascriptMonthIndex	^ self monthIndex - 1! !!DateAndTime methodsFor: '*scriptaculous' stamp: 'lr 3/13/2007 09:05'!javascriptOn: aStream	aStream nextPutAll: 'new Date('.	#( year javascriptMonthIndex dayOfMonth hour minute second )		do: [ :each | aStream print: (self perform: each) ]		separatedBy: [ aStream nextPut: $, ].	aStream nextPut: $)! !!SUAllTests class methodsFor: 'initialization' stamp: 'lr 11/21/2006 22:06'!canBeRoot	^ true! !!SUAllTests class methodsFor: 'accessing' stamp: 'lr 5/11/2007 18:53'!description	^ 'Functional Scriptaculous Test Suite'! !!SUAllTests class methodsFor: 'initialization' stamp: 'lr 11/18/2007 15:26'!initialize	(self registerAsApplication: 'tests/scriptaculous')		addLibrary: SULibrary;		addLibrary: SUAllTestLibrary! !!SUAllTests methodsFor: 'accessing' stamp: 'lr 3/12/2006 15:29'!children	^ selected collect: [ :each | each value ]! !!SUAllTests methodsFor: 'initialization' stamp: 'lr 12/8/2007 18:51'!initialize	super initialize.	tabs := OrderedCollection new		add: 'Welcome' -> (Array			with: 'Welcome' -> SUWelcomeTest new			with: 'Counter' -> SUCounterTest new);		add: 'Ajax' -> (Array			with: 'Updater' -> SUUpdaterTest new			with: 'Periodical' -> SUPeriodicalTest new			with: 'Evaluator' -> SUEvaluatorTest new);		add: 'Form' -> (Array			with: 'Elements' -> SUFormTest new);		add: 'Controls' -> (Array			with: 'Autocompleter' -> SUAutocompleterTest new			with: 'In Place Editor' -> SUInPlaceEditorTest new			with: 'Slider' -> SUSliderTest new);		add: 'Drag & Drop' -> (Array			with: 'Drag & Drop' -> SUDragDropTest new			with: 'Sortable' -> SUSortableTest new			with: 'Sortable (two lists)' -> SUSortableDoubleTest new			with: 'Tree' -> SUTreeTest new);		add: 'Effects' -> (Array			with: 'Effects' -> SUEffectsTest new			with: 'Toggles' -> SUTogglesTest new			with: 'Morph' -> SUMorphTest new);		yourself.	selected := tabs first value! !!SUAllTests methodsFor: 'rendering' stamp: 'lr 4/19/2006 00:06'!renderChildrenOn: html	html div id: 'content'; with: [		selected do: [ :each |			html heading: each key.			html paragraph; render: each value.			each value showSource ifTrue: [				html paragraph: [					html anchor						callback: [ self lightbox: (SUClassBrowser new setClass: each value class) ];						with: 'View Source' ] ].			html paragraph ] ]! !!SUAllTests methodsFor: 'rendering' stamp: 'lr 3/12/2006 16:03'!renderContentOn: html	self renderHeaderOn: html.	self renderMenuOn: html.	self renderChildrenOn: html! !!SUAllTests methodsFor: 'rendering' stamp: 'pmm 9/25/2007 06:44'!renderHeaderOn: html	html div id: 'header'; with: [		html image			id: 'logo';			url: SUAllTestLibrary / #logoGif;			altText: self title ]! !!SUAllTests methodsFor: 'rendering' stamp: 'lr 3/30/2006 22:10'!renderMenuOn: html	html unorderedList id: 'menu'; with: [		tabs do: [ :each |			html listItem: [				html anchor					class: (selected = each value						ifTrue: [ 'active' ]);					callback: [ selected := each value ];					with: each key ] ] ]! !!SUAllTests methodsFor: 'accessing' stamp: 'lr 5/18/2007 22:38'!states	^ Array with: self! !!SUAllTests methodsFor: 'accessing' stamp: 'lr 3/13/2006 20:59'!title	^ 'Seaside - script.aculo.us'! !!SUAllTests methodsFor: 'updating' stamp: 'lr 2/19/2007 11:40'!updateRoot: aHtmlRoot	super updateRoot: aHtmlRoot.	aHtmlRoot title: self title! !!SUClassBrowser methodsFor: 'accessing' stamp: 'lr 3/12/2006 14:12'!categories	^ class organization categories asSortedCollection! !!SUClassBrowser methodsFor: 'rendering' stamp: 'lr 4/25/2007 10:19'!renderCategoriesOn: html	html select		size: 5;		id: 'categoryList';		selected: category;		list: self categories;		callback: [ :value | self setCategory: value ];		onChange: (html updater			id: 'selectors';			triggerFormElement: 'categoryList';			on: #renderSelectorsOn: of: self;			onSuccess: (html updater				id: 'source';				on: #renderSourceOn: of: self))! !!SUClassBrowser methodsFor: 'rendering' stamp: 'lr 2/19/2007 13:45'!renderCloseOn: html	html form: [		html submitButton			callback: [ self answer ];			text: 'close' ]! !!SUClassBrowser methodsFor: 'rendering' stamp: 'lr 4/19/2006 08:16'!renderContentOn: html	html div id: 'categories'; with: [ self renderCategoriesOn: html ].	html div id: 'selectors'; with: [ self renderSelectorsOn: html ].	html div class: 'clear'.	html div id: 'source'; with: [ self renderSourceOn: html ].	html div class: 'clear'.	html div id: 'close'; with: [ self renderCloseOn: html ]! !!SUClassBrowser methodsFor: 'rendering' stamp: 'lr 8/7/2006 09:47'!renderSelectorsOn: html	html select		size: 5;		id: 'selectorList';		selected: selector;		list: self selectors;		callback: [ :value | self setSelector: value ];		onChange: (html updater			id: 'source';			triggerFormElement: 'selectorList';			on: #renderSourceOn: of: self)! !!SUClassBrowser methodsFor: 'rendering' stamp: 'lr 4/19/2006 07:54'!renderSourceOn: html	| source |	source := (class sourceCodeAt: selector ifAbsent: [ ^ self ])		asString readStream.	html strong: class name , '>>' , source nextLine; break.	[ source atEnd ] whileFalse: [		[ source peek = Character tab ]			whileTrue: [ html space; space; space. source next ].		html render: source nextLine; break ]! !!SUClassBrowser methodsFor: 'accessing' stamp: 'lr 3/12/2006 14:12'!selectors	^ (category isNil		ifTrue: [ class selectors ]		ifFalse: [ class organization listAtCategoryNamed: category ])			asSortedCollection! !!SUClassBrowser methodsFor: 'initialization' stamp: 'lr 3/12/2006 14:20'!setCategory: aSymbol	category := aSymbol.	self setSelector: (self selectors isEmpty		ifFalse: [ self selectors first ])! !!SUClassBrowser methodsFor: 'initialization' stamp: 'lr 3/13/2006 22:15'!setClass: aClass	class := aClass.	self setCategory: #rendering.	self setSelector: #renderContentOn:! !!SUClassBrowser methodsFor: 'initialization' stamp: 'lr 3/12/2006 14:07'!setSelector: aSymbol	selector := aSymbol! !!SUClassBrowser methodsFor: 'rendering' stamp: 'pmm 9/25/2007 06:44'!style	^ 'div#lightbox {	background: url(', (SUAllTestLibrary / #demoGif) displayString, ') repeat white;	border: 1px solid #e8a400;	padding: 1em;	width: 640px;}div#categories, div#selectors {	float: left;	width: 50%;}div.clear {	clear: both;	height: 1em;}div#categories select, div#selectors select {	width: 100%;}div#source {	padding: 1em;	border: 1px solid #dddddd;	background-color: #f5f5f5;	font: 12px Lucida Sans Typewriter, Courier, monospace;}div#close {	text-align: center;}'! !!SUComponent methodsFor: 'accessing-url' stamp: 'lr 3/12/2006 13:04'!scriptaculous	^ WAUrl new hostname: 'script.aculo.us'! !!SUComponent methodsFor: 'accessing-url' stamp: 'lr 3/12/2006 13:04'!seaside	^ WAUrl new hostname: 'seaside.st'! !!SUAutocompleterTest methodsFor: 'rendering' stamp: 'lr 5/15/2006 11:35'!renderContentOn: html	html paragraph: 'Start to type a Smalltalk class-name:'.	html paragraph: [		html textInput			id: 'text';			value: text;			callback: [ :value | text := value ].		html div			class: 'autocomplete';			script: (html autocompleter				element: 'text';				onSelected: (html request					triggerFormElement: 'text');				on: #renderListOn: of: self) ]! !!SUAutocompleterTest methodsFor: 'rendering' stamp: 'pmm 9/21/2006 18:11'!renderListOn: html	| items |	items := Smalltalk allClasses select: [ :each | each name includesSubstring: text caseSensitive: false ].	html unorderedList list: (items first: (items size min: 10))! !!SUAutocompleterTest methodsFor: 'rendering' stamp: 'lr 4/9/2006 00:19'!style	^ 'input#text {	width: 250px;}div.autocomplete {	position: absolute;	background-color: white;	border: 1px solid #888;	margin: 0px;	padding: 0px;	z-index: 1000;}div.autocomplete ul, div.autocomplete ul li {	list-style-type: none;	line-height: 1.7;	margin: 0px;	padding: 0px;}div.autocomplete ul li.selected {	background-color: #ffb;}'! !!SUCounterTest methodsFor: 'actions' stamp: 'lr 3/12/2006 13:23'!decrease	count := count - 1! !!SUCounterTest methodsFor: 'actions' stamp: 'lr 3/12/2006 13:23'!increase	count := count + 1! !!SUCounterTest methodsFor: 'initialization' stamp: 'lr 3/12/2006 13:23'!initialize	super initialize.	count := 0! !!SUCounterTest methodsFor: 'rendering' stamp: 'lr 10/3/2006 09:12'!renderContentOn: html	| id |	id := html nextId.	html paragraph: [		html span			id: 'counter_' , id;			with: count.		html space.		html anchor			onClick: (html updater				id: 'counter_' , id;				callback: [ :render | self increase; renderCountOn: render ]);			with: '++'.		html space.		html anchor			onClick: (html updater				id: 'counter_' , id;				callback: [ :render | self decrease; renderCountOn: render ]);			with: '--' ]! !!SUCounterTest methodsFor: 'rendering' stamp: 'lr 3/12/2006 13:26'!renderCountOn: html	html render: count! !!SUDragDropTest methodsFor: 'accessing' stamp: 'lr 8/8/2007 14:56'!cart	^ cart ifNil: [ cart := Bag new ]! !!SUDragDropTest methodsFor: 'accessing' stamp: 'lr 8/8/2007 14:57'!inventory	^ #( 'Broccoli' 'Brussels sprout' 'Cabbage' 'Cauliflower' 'Kale' 'Rapini' )! !!SUDragDropTest methodsFor: 'rendering' stamp: 'lr 8/8/2007 15:05'!renderCartItemsOn: html	self cart isEmpty		ifTrue: [ ^ html text: 'Drop items here to add them to your cart.' ].	self cart sortedCounts do: [ :each |		html div			class: 'cart-item';			passenger: each value;			script: (html draggable revert: true);			with: [				html render: each value.				each key > 1					ifTrue: [ html text: ' ('; render: each key; text: ')' ] ] ]! !!SUDragDropTest methodsFor: 'rendering' stamp: 'lr 4/25/2007 10:19'!renderCartOn: html	html div		id: 'cart';		script: (html droppable			accept: 'inventory-item';			hoverclass: 'hover';			onDrop: (html updater				id: 'cart';				triggerPassenger: [ :value | self cart add: value ];				callback: [ :renderer | self renderCartItemsOn: renderer ]));		with: [ self renderCartItemsOn: html ]! !!SUDragDropTest methodsFor: 'rendering' stamp: 'lr 3/30/2006 22:10'!renderContentOn: html	self		renderInventoryOn: html;		renderCartOn: html;		renderTrashOn: html! !!SUDragDropTest methodsFor: 'rendering' stamp: 'lr 8/8/2007 14:57'!renderInventoryOn: html	html div id: 'inventory'; with: [		self inventory			do: [ :each |				html span					passenger: each;					class: 'inventory-item';					script: (html draggable revert: true);					with: each ]			separatedBy: [ html text: ', ' ] ]! !!SUDragDropTest methodsFor: 'rendering' stamp: 'lr 4/25/2007 10:19'!renderTrashOn: html	html div		id: 'trash';		script: (html droppable			accept: 'cart-item';			hoverclass: 'hover';			onDrop: (html updater				id: 'cart';				triggerPassenger: [ :value | self cart remove: value ];				callback: [ :renderer | self renderCartItemsOn: renderer ];				onSuccess: (html effect id: 'cart'; shake)));		with: 'Drop items here to remove them from the cart.'! !!SUDragDropTest methodsFor: 'rendering' stamp: 'lr 3/13/2006 23:38'!style	^ 'div#inventory {	margin: 1em;	cursor: move;}div#cart {	margin: 1em;	padding: 1em;	border: 1px dashed #e8a400;	cursor: move;}div#trash {	margin: 1em;	padding: 1em;	border: 1px dashed #c5dea1;	cursor: move;}.hover {	background-color: #eeeeee;}'! !!SUEffectsTest methodsFor: 'accessing' stamp: 'lr 3/28/2006 23:07'!effects	^ #( appear fade puff blindDown blindUp switchOff slideDown slideUp dropOut shake pulsate squish fold grow shrink highlight )! !!SUEffectsTest methodsFor: 'rendering' stamp: 'lr 11/16/2006 18:56'!renderContentOn: html	html paragraph: [		self effects do: [ :each |			html anchor				onClick: (html effect					id: 'effect';					perform: each);				with: (self labelForSelector: each) ]			separatedBy: [ html text: ', ' ] ].	self renderBox: 'effect' on: html! !!SUEvaluatorTest methodsFor: 'rendering' stamp: 'lr 5/2/2006 08:52'!renderContentOn: html	html paragraph: 'CSS Selector:'.	html paragraph: [		html form: [			html textInput				id: 'selector';				value: (selector ifNil: [ 'h1' ]);				callback: [ :value | selector := value ].			html submitButton				onClick: (html evaluator					triggerFormElement: 'selector';					on: #renderEvaluatorOn: of: self;					return: false);				text: 'highlight' ] ]! !!SUEvaluatorTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:40'!renderEvaluatorOn: aScript	aScript selector		add: selector;		do: [ :each | each effect highlight ]! !!SUFormTest methodsFor: 'initialization' stamp: 'lr 3/28/2006 22:19'!initialize	super initialize.	textInput := 'Text Input'.	textArea := 'Text Area'.	checkBox := false.	radioButton := 1.	selectList := 1.	mutliSelectList := 1 to: 2! !!SUFormTest methodsFor: 'rendering-elements' stamp: 'lr 5/2/2006 10:14'!renderCheckBoxOn: html	self		renderLabel: 'Check-Box'		control: [ :fid :mid |			html checkbox				value: checkBox;				callback: [ :value | checkBox := value ];				onClick: (html updater					id: mid;					triggerForm: fid;					callback: [ :r | r render: checkBox ]) ]		model: checkBox		on: html! !!SUFormTest methodsFor: 'rendering' stamp: 'lr 3/28/2006 22:19'!renderContentOn: html	self renderTextInputOn: html.	self renderTextAreaOn: html.	self renderCheckBoxOn: html.	self renderRadioButtonOn: html.	self renderSelectListOn: html.	self renderMultiSelectListOn: html! !!SUFormTest methodsFor: 'rendering-utilities' stamp: 'lr 6/6/2006 10:53'!renderLabel: aString control: aBlock model: anObject on: html	| fid mid |	fid := mid := nil.	html div class: 'row'; with: [		html div class: 'label'; with: aString.		html div class: 'control'; with: [			html form				id: (fid := html nextId);				with: [ aBlock value: fid value: (mid := html nextId) ] ].		html div class: 'model'; id: mid; with: anObject.		html div class: 'clear' ]! !!SUFormTest methodsFor: 'rendering-elements' stamp: 'lr 6/14/2007 21:04'!renderMultiSelectListOn: html	self		renderLabel: 'Multi-Select-List'		control: [ :fid :mid |			html multiSelect				size: 3;				list: (1 to: 9);				selected: mutliSelectList;				callback: [ :value | mutliSelectList := value ];				onChange: (html updater					id: mid;					triggerForm: fid;					callback: [ :r | r render: mutliSelectList ]) ]		model: mutliSelectList		on: html! !!SUFormTest methodsFor: 'rendering-elements' stamp: 'lr 12/31/2007 21:10'!renderRadioButtonOn: html	self		renderLabel: 'Radio-Button'		control: [ :fid :mid |			html radioGroup: [ :group |				1 to: 3 do: [ :each |					html label: [						html radioButton							group: group;							selected: radioButton = each;							callback: [ radioButton := each ];							onChange: (html updater								id: mid;								triggerForm: fid;								callback: [ :r | r render: radioButton ]).					 		html text: each ].					html break ] ] ]		model: radioButton		on: html! !!SUFormTest methodsFor: 'rendering-elements' stamp: 'lr 5/2/2006 10:15'!renderSelectListOn: html	self		renderLabel: 'Select-List'		control: [ :fid :mid |			html select				list: (1 to: 9);				selected: selectList;				callback: [ :value | selectList := value ];				onChange: (html updater					id: mid;					triggerForm: fid;					callback: [ :r | r render: selectList ]) ]		model: selectList		on: html! !!SUFormTest methodsFor: 'rendering-elements' stamp: 'lr 12/31/2007 21:10'!renderTextAreaOn: html	self		renderLabel: 'Text-Area'		control: [ :fid :mid |			html textArea				value: textArea;				callback: [ :value | textArea := value ];				onChange: (html updater					id: mid;					triggerForm: fid;					callback: [ :r | r render: textArea ]) ]		model: textArea		on: html! !!SUFormTest methodsFor: 'rendering-elements' stamp: 'lr 12/31/2007 21:10'!renderTextInputOn: html	self		renderLabel: 'Text-Input'		control: [ :fid :mid |			html textInput				value: textInput;				callback: [ :value | textInput := value ];				onChange: (html updater					id: mid;					triggerForm: fid;					callback: [ :r | r render: textInput ]) ]		model: textInput		on: html! !!SUFormTest methodsFor: 'rendering' stamp: 'lr 3/28/2006 22:38'!style	^ 'div.row { margin: 5px; }div.label { float: left; width: 20%; font-weight: bold; }div.control { float: left; width: 50% }div.model { float: left; width: 30%; }div.clear { clear: both; }select { width: 100px; }'! !!SUFunctionalTest methodsFor: 'rendering' stamp: 'lr 3/30/2006 22:10'!renderBox: aString on: html	html div id: aString; class: 'box'; with: [		html div class: 'header'.		html div			class: 'content';			with: 'Smalltalk Enterprise Aubergines' ]! !!SUFunctionalTest methodsFor: 'testing' stamp: 'lr 3/12/2006 15:36'!showSource	^ true! !!SUInPlaceEditorTest methodsFor: 'initialization' stamp: 'lr 8/7/2006 09:04'!initialize	super initialize.	text := 'Click me, edit me.'! !!SUInPlaceEditorTest methodsFor: 'rendering' stamp: 'lr 11/7/2007 21:50'!renderContentOn: html	html paragraph		script: (html inPlaceEditor			cancelControl: 'button';			triggerInPlaceEditor: [ :value | text := value ];			callback: [ :r | r render: text ]);		with: text! !!SUMorphTest methodsFor: 'rendering' stamp: 'lr 2/19/2007 13:45'!renderContentOn: html	html div: [		html textInput			id: 'rules';			style: 'width: 75%';			value: 'margin-left: 120px; height: 140px; font-size: 20pt; width: 360px'.		html submitButton			onClick: (html effect				morph;				id: 'morph';				style: (html formElement					id: 'rules';					value));			text: 'Morph' ].	self renderBox: 'morph' on: html! !!SUPeriodicalTest methodsFor: 'rendering' stamp: 'lr 6/14/2007 21:05'!renderContentOn: html	html paragraph		script: (html updater			every: 1 second;			on: #renderTimeOn: of: self);		with: [ self renderTimeOn: html ]! !!SUPeriodicalTest methodsFor: 'rendering' stamp: 'lr 3/12/2006 16:00'!renderTimeOn: html	html render: Time now! !!SUSliderTest methodsFor: 'initialization' stamp: 'lr 3/20/2006 19:49'!initialize	super initialize.	position := 50! !!SUSliderTest methodsFor: 'rendering' stamp: 'lr 8/7/2006 09:30'!renderContentOn: html	html div id: 'track'; with: [ html div id: 'handle' ].	html paragraph id: 'position'; with: position.	html script: (html slider		handleId: 'handle';		trackId: 'track';		value: position;		range: (0 to: 100);		onChange: (html updater			id: 'position';			triggerSliderCallback: [ :value | position := value asInteger ];			callback: [ :renderer | renderer render: position ]))! !!SUSliderTest methodsFor: 'rendering' stamp: 'lr 3/30/2006 20:20'!style	^ 'div#track {	width: 200px; height: 5px;	background-color: #eee;}div#handle {	width: 5px; height: 10px;	background-color: #e8a400;	cursor: move;}'! !!SUSortableDoubleTest methodsFor: 'private' stamp: 'lr 4/2/2006 12:30'!classForObject: anObject	^ anObject species = SmallInteger		ifFalse: [ 'orange' ]		ifTrue: [ 'green' ]! !!SUSortableDoubleTest methodsFor: 'private' stamp: 'lr 3/12/2006 17:04'!labelForObject: anObject	^ anObject class name , ': ' , anObject displayString! !!SUSortableDoubleTest methodsFor: 'accessing' stamp: 'lr 5/2/2006 11:26'!left	^ left ifNil: [ left := $a to: $b ]! !!SUSortableDoubleTest methodsFor: 'accessing' stamp: 'lr 3/17/2006 13:50'!left: aCollection	left := aCollection! !!SUSortableDoubleTest methodsFor: 'rendering' stamp: 'lr 4/7/2006 14:22'!renderContentOn: html	html div		style: 'float: left;';		with: [ self renderList: #left titled: 'Left List' on: html ].	html div		style: 'float: left;';		with: [ self renderList: #right titled: 'Right List' on: html ].	html div		style: 'clear: both'! !!SUSortableDoubleTest methodsFor: 'rendering' stamp: 'lr 4/3/2007 10:43'!renderList: aSelector titled: aString on: html	html heading level: 3; with: aString.	html paragraph		id: aSelector , 'status';		with: [ self renderListModel: aSelector on: html ].	self renderListItems: aSelector on: html! !!SUSortableDoubleTest methodsFor: 'rendering' stamp: 'lr 5/15/2006 15:39'!renderListItems: aSelector on: html	html unorderedList		id: aSelector asString;		style: 'width: 200px; min-height: 50px;';		script: (html sortable			constraint: false;			dropOnEmpty: true;			containment: #( left right );			onUpdate: (html updater				id: aSelector , 'status';				triggerSortable: aSelector asString					callback: [ :values | self perform: aSelector asMutator with: values ];				callback: [ :renderer | self renderListModel: aSelector on: renderer ]));		with: [			(self perform: aSelector) do: [ :each |				html listItem					passenger: each;					class: (self classForObject: each);					with: (self labelForObject: each) ] ]! !!SUSortableDoubleTest methodsFor: 'rendering' stamp: 'lr 3/30/2006 22:10'!renderListModel: aSelector on: html	html text: 'Model: '.	(self perform: aSelector)		do: [ :each | html render: each ]		separatedBy: [ html text: ', ' ]! !!SUSortableDoubleTest methodsFor: 'accessing' stamp: 'lr 5/2/2006 11:26'!right	^ right ifNil: [ right := 1 to: 2 ]! !!SUSortableDoubleTest methodsFor: 'accessing' stamp: 'lr 3/17/2006 13:50'!right: aCollection	right := aCollection! !!SUSortableDoubleTest methodsFor: 'rendering' stamp: 'lr 4/2/2006 12:31'!style	^ 'li.green, li.orange {	margin: 4px;	padding: 2px;  	cursor: move;}li.green {	background-color: #ecf3e1;  	border: 1px solid #c5dea1;}li.orange {	background-color: #fff4d8;  	border: 1px solid #e8a400;}'! !!SUSortableTest methodsFor: 'initialization' stamp: 'lr 8/28/2007 23:54'!initialize	super initialize.	collection := #( 'San Salvatore' 'Monte Bre' 'Calvagione' )! !!SUSortableTest methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:40'!renderContentOn: html	| id |	html unorderedList		id: (id := html nextId);		script: (html sortable			onUpdate: (html request				triggerSortable: id				callback: [ :value | collection := value ]));		with: [ self renderListItemsOn: html ]! !!SUSortableTest methodsFor: 'rendering' stamp: 'lr 8/28/2007 23:54'!renderListItemsOn: html	collection do: [ :each |		html listItem			passenger: each;			with: each ]! !!SUTogglesTest methodsFor: 'rendering' stamp: 'lr 11/16/2006 18:56'!renderContentOn: html	html paragraph: [		self toggles do: [ :each |			html anchor				onClick: (html effect					id: 'toggle';					perform: each);				with: (self labelForSelector: each) ]			separatedBy: [ html text: ', ' ] ].	self renderBox: 'toggle' on: html! !!SUTogglesTest methodsFor: 'accessing' stamp: 'lr 5/2/2006 13:59'!toggles	^ #( toggleAppear toggleBlind toggleSlide )! !!SUTreeTest methodsFor: 'private' stamp: 'lr 5/2/2006 11:38'!childrenOf: anObject	^ Array streamContents: [ :stream |		tree do: [ :each |			each key = anObject				ifTrue: [ stream nextPut: each value ] ] ]! !!SUTreeTest methodsFor: 'initialization' stamp: 'lr 5/2/2006 11:49'!initialize	super initialize.	tree := OrderedCollection new		add: nil -> 'Eukaryota';			add: 'Eukaryota' -> 'Opisthokonts';				add: 'Opisthokonts' -> 'Animalia';				add: 'Opisthokonts' -> 'Choanoflagellates';				add: 'Opisthokonts' -> 'Nucleariids';				add: 'Opisthokonts' -> 'Fungi';			add: 'Eukaryota' -> 'Amoebozoa';				add: 'Amoebozoa' -> 'Plantae';				add: 'Amoebozoa' -> 'Red algae';				add: 'Amoebozoa' -> 'Glaucophytes';			add: 'Eukaryota' -> 'Plants';				add: 'Plants' -> 'Cercozoa';				add: 'Plants' -> 'Foraminifera';				add: 'Plants' -> 'Polycystinea';				add: 'Plants' -> 'Acantharea';				add: 'Plants' -> 'Sticholonche';			add: 'Eukaryota' -> 'Rhizaria';		yourself! !!SUTreeTest methodsFor: 'rendering' stamp: 'lr 5/2/2006 11:39'!renderChildren: aCollection on: html	aCollection do: [ :each |		html listItem			passenger: each;			with: [ self renderNode: each on: html ] ]! !!SUTreeTest methodsFor: 'rendering' stamp: 'lr 5/10/2006 22:45'!renderContentOn: html	html unorderedList		id: 'evolution';		script: (html sortable			create;			tree: true;			onUpdate: (html request				triggerTree: 'evolution'				callback: [ :values | tree := values ]));		with: [ self renderChildren: (self childrenOf: nil) on: html ]! !!SUTreeTest methodsFor: 'rendering' stamp: 'lr 2/19/2007 13:45'!renderNode: anObject on: html	| children |	html text: anObject.	(children := self childrenOf: anObject) isEmpty ifFalse: [		html unorderedList: [			self renderChildren: children on: html ] ]! !!SUTreeTest methodsFor: 'rendering' stamp: 'lr 4/7/2006 01:08'!style	^ 'ul#evolution li {	list-style: none;	cursor: move;}'! !!SUUpdaterTest methodsFor: 'accessing' stamp: 'lr 5/2/2006 10:43'!insertions	^ Array with: SUInsertion before with: SUInsertion top with: SUInsertion bottom with: SUInsertion after! !!SUUpdaterTest methodsFor: 'rendering' stamp: 'lr 11/16/2006 18:57'!renderContentOn: html	html paragraph: [		self insertions do: [ :each |			html anchor				onClick: (html updater					id: 'element';					insertion: each;					on: #renderElementOn: of: self);				with: each.			html break ] ].	html paragraph: [		html div id: 'element'; with: 'Target Element' ]! !!SUUpdaterTest methodsFor: 'rendering' stamp: 'lr 4/3/2006 11:36'!renderElementOn: html	html div: Time now! !!SUUpdaterTest methodsFor: 'accessing' stamp: 'lr 4/3/2006 11:34'!style	^ '#element { background-color: #fff4d8; }'! !!SUWelcomeTest methodsFor: 'rendering' stamp: 'lr 5/31/2007 07:44'!renderContentOn: html	 html paragraph: [		html anchor url: self seaside; with: 'Seaside'.		html text: ' provides a complete integration of '.		html anchor url: self scriptaculous; with: 'script.aculo.us'.		html text: ', allowing the use of the library without having to write a single line of JavaScript code. Everything can be configured and plugged together using Smalltalk objects. Try by yourself, by clicking through this functional test suite and by browsing the source-code.' ].	html heading level: 2; with: 'Seaside'.	html paragraph: [		html anchor url: self seaside; with: 'Seaside'.		html text: ' is a framework for developing sophisticated web applications in Smalltalk. It provides a layered set of abstractions over HTTP and HTML that let you build highly interactive web applications quickly, reusably and maintainably.' ].	html heading level: 2; with: 'script.aculo.us'.	html paragraph: [		html anchor url: self scriptaculous; with: 'script.aculo.us'.		html text: ' provides you with easy-to-use, compatible and, ultimately, totally cool JavaScript libraries to make your web sites and web applications fly, Web 2.0 style.' ]! !!SUWelcomeTest methodsFor: 'testing' stamp: 'lr 3/12/2006 15:36'!showSource	^ false! !!SULightboxTest class methodsFor: 'initialization' stamp: 'lr 11/18/2007 15:26'!initialize	(self registerAsApplication: 'tests/lightbox-dialog') addLibrary: SULibrary! !!SULightboxTest methodsFor: 'user interface' stamp: 'RJT 5/8/2007 12:43'!inform: aString	self lightbox: (WAFormDialog new addMessage: aString; yourself).	self lightbox: (WAFormDialog new addMessage: 'Back for more'; yourself)! !!SULightboxTest methodsFor: 'rendering' stamp: 'lr 2/19/2007 13:45'!renderContentOn: html	html form		style: 'text-align: center';		with:			[html text: 'What is your favorite transportation system ?'.			3 timesRepeat:[html break].			html select				list:    #(Automobile Airplane Truck Boat Bicycle Horse Walking Swimming);				selected: value;				callback: [:v | value := v].			3 timesRepeat:[html break].			html submitButton callback: [self inform: value]]! !!SULightboxTest methodsFor: 'rendering' stamp: 'mb 6/6/2006 15:01'!style	^'div#lightbox {	background: white;	border: 1px solid #0000e8;	padding: 2em;	width: 10em;	text-align: center;}div#overlay {	background-color: black;	filter: alpha(opacity=30);	-moz-opacity: 0.3;	opacity: 0.3;}'! !!SUAccordion class methodsFor: 'examples' stamp: 'lr 8/6/2006 14:58'!example	^ self new		maxVisible: 2;		add: SUCounterTest new label: 'Counter 1';		add: SUCounterTest new label: 'Counter 2';		add: SUCounterTest new label: 'Counter 3';		yourself! !!SUAccordion methodsFor: 'accessing' stamp: 'lr 6/28/2006 10:27'!cssClass	^ 'accordion'! !!SUAccordion methodsFor: 'actions' stamp: 'lr 6/28/2006 11:46'!hide: aComponent	self visible remove: aComponent ifAbsent: [ ^ self ]! !!SUAccordion methodsFor: 'initialization' stamp: 'lr 6/28/2006 11:46'!initialize	super initialize.	visible := OrderedCollection new! !!SUAccordion methodsFor: 'testing' stamp: 'lr 2/20/2007 10:43'!isVisible: aComponent	^ self visible includes: aComponent! !!SUAccordion methodsFor: 'accessing' stamp: 'lr 6/28/2006 09:56'!maxVisible	^ maxVisible! !!SUAccordion methodsFor: 'accessing' stamp: 'lr 6/28/2006 09:57'!maxVisible: anInteger	maxVisible := anInteger! !!SUAccordion methodsFor: 'rendering' stamp: 'lr 2/20/2007 10:35'!renderBody: aString component: aComponent index: anInteger on: html	html div		class: 'body';		class: 'active' if: (self isVisible: aComponent);		id: (self uid: 'body' at: anInteger);		style: ((self isVisible: aComponent)			ifFalse: [ 'display: none' ]);		with: aComponent! !!SUAccordion methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:40'!renderHead: aString component: aComponent index: anInteger on: html	html div		class: 'head';		class: 'active' if: (self isVisible: aComponent);		id: (self uid: 'head' at: anInteger);		with: [			html anchor				onClick: (html evaluator					callback: [ :script | self scriptToggle: aComponent on: script ];					return: false);				callback: [ self toggle: aComponent ];				with: aString ]! !!SUAccordion methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:40'!renderNavigationOn: html	elements withIndexDo: [ :assoc :index |		self			renderHead: assoc key component: assoc value			index: index on: html.		self			renderBody: assoc key component: assoc value			index: index on: html ]! !!SUAccordion methodsFor: 'scripting' stamp: 'lr 2/20/2007 10:46'!scriptHide: aComponent  on: aScript	| index |	index := self findIndex: aComponent ifAbsent: [ ^ self ].	aScript effect		id: (self uid: 'body' at: index);		blindUp.	aScript element		id: (self uid: 'body' at: index);		removeClassName: 'active'.	aScript element		id: (self uid: 'head' at: index);		removeClassName: 'active'! !!SUAccordion methodsFor: 'scripting' stamp: 'lr 2/20/2007 10:46'!scriptShow: aComponent on: aScript	| index |	index := self findIndex: aComponent ifAbsent: [ ^ self ].	aScript effect		id: (self uid: 'body' at: index);		blindDown.	aScript element		id: (self uid: 'body' at: index);		addClassName: 'active'.	aScript element		id: (self uid: 'head' at: index);		addClassName: 'active'! !!SUAccordion methodsFor: 'scripting' stamp: 'lr 2/20/2007 10:44'!scriptToggle: aComponent on: aScript	| previous |	previous := self visible copy.	self toggle: aComponent.	(previous difference: self visible)		do: [ :each | self scriptHide: each on: aScript ].	(self visible difference: previous)		do: [ :each | self scriptShow: each on: aScript ]! !!SUAccordion methodsFor: 'actions' stamp: 'lr 6/28/2006 11:46'!show: aComponent	self visible addLast: aComponent.	self maxVisible isNil ifFalse: [		[ self maxVisible < self visible size ]			whileTrue: [ self hide: self visible first ] ]! !!SUAccordion methodsFor: 'actions' stamp: 'lr 2/20/2007 10:39'!toggle: aComponent	(self isVisible: aComponent)		ifTrue: [ self hide: aComponent ]		ifFalse: [ self show: aComponent ]! !!SUAccordion methodsFor: 'accessing' stamp: 'lr 6/28/2006 11:46'!visible	^ visible! !!SUNavigation class methodsFor: 'class initialization' stamp: 'lr 11/18/2007 15:25'!initialize	(WAExampleBrowser registerAsApplication: 'examples/examplebrowser')		addLibrary: SULibrary! !!SUNavigation methodsFor: 'public' stamp: 'lr 6/28/2006 09:14'!add: aComponent label: aString	elements add: aString -> aComponent! !!SUNavigation methodsFor: 'accessing' stamp: 'lr 3/22/2007 15:30'!children	^ elements collect: [ :each | each value ]! !!SUNavigation methodsFor: 'accessing' stamp: 'lr 2/19/2007 12:27'!cssClass	self subclassResponsibility! !!SUNavigation methodsFor: 'private' stamp: 'lr 6/28/2006 11:57'!findIndex: aComponent ifAbsent: aBlock	| index |	index := elements findFirst: [ :each | each value = aComponent ].	index isZero ifTrue: [ aBlock value ].	^ index! !!SUNavigation methodsFor: 'initialization' stamp: 'lr 6/28/2006 12:14'!initialize	super initialize.	elements := OrderedCollection new! !!SUNavigation methodsFor: 'rendering' stamp: 'lr 2/19/2007 13:45'!renderContentOn: html	uid := html nextId.	html div		class: self cssClass;		with: [ self renderNavigationOn: html ]! !!SUNavigation methodsFor: 'rendering' stamp: 'lr 2/19/2007 12:27'!renderNavigationOn: html	self subclassResponsibility! !!SUNavigation methodsFor: 'private' stamp: 'lr 6/28/2006 09:20'!uid: aString at: anInteger	^ uid , '_' , aString , '_' , anInteger asString! !!SUTabPanel class methodsFor: 'examples' stamp: 'lr 8/6/2006 14:55'!example	^ self new		add: SUCounterTest new label: 'Counter 1';		add: SUCounterTest new label: 'Counter 2';		add: SUCounterTest new label: 'Counter 3';		yourself! !!SUTabPanel methodsFor: 'accessing' stamp: 'lr 6/28/2006 11:49'!cssClass	^ 'tabpanel'! !!SUTabPanel methodsFor: 'rendering' stamp: 'lr 6/28/2006 11:51'!renderNavigationOn: html	self renderTabsOn: html.	self renderPanelOn: html! !!SUTabPanel methodsFor: 'rendering' stamp: 'lr 2/19/2007 13:45'!renderPanelOn: html	html div		id: (self uid: 'body' at: 0);		class: 'body';		with: self selected! !!SUTabPanel methodsFor: 'rendering' stamp: 'lr 2/19/2007 13:45'!renderTabsOn: html	| active |	html unorderedList class: 'head'; with: [		elements withIndexDo: [ :assoc :index |			active := self selected = assoc value.			html listItem				id: (self uid: 'head' at: index);				class: (active ifTrue: [ 'active' ]);				with: [					html anchor						onClick: (html evaluator							callback: [ :script | self scriptSelected: assoc value on: script ];							return: false);						callback: [ self selected: assoc value ];						with: assoc key ] ] ]! !!SUTabPanel methodsFor: 'scripting' stamp: 'lr 12/14/2007 15:09'!scriptSelected: aComponent on: aScript	aScript element		id: (self uid: 'head' at: (self			findIndex: self selected			ifAbsent: [ ]));		removeClassName: 'active'.	self selected: aComponent.	aScript element		id: (self uid: 'head' at: (self			findIndex: self selected			ifAbsent: [ ^ self ]));		addClassName: 'active'.	aScript element		id: (self uid: 'body' at: 0);		update: self selected! !!SUTabPanel methodsFor: 'accessing' stamp: 'lr 11/12/2007 09:59'!selected	^ selected ifNil: [ selected := elements isEmpty ifFalse: [ elements first value ] ]! !!SUTabPanel methodsFor: 'accessing' stamp: 'lr 6/28/2006 12:07'!selected: aComponent	selected := aComponent! !!SUTieredList class methodsFor: 'examples' stamp: 'lr 8/9/2007 14:57'!example	^ self new		labels: [ :node | node fullName ];		children: [ :node | node subclasses ];		selection: (OrderedCollection with: Object with: Boolean);		yourself! !!SUTieredList methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:40'!children: aOneArgumentBlock	"Define a one argument block that answers a collection of children for a given node."	childrenBlock := aOneArgumentBlock! !!SUTieredList methodsFor: 'initialization' stamp: 'lr 8/9/2007 14:50'!initialize	super initialize.	selectionPath := OrderedCollection new.	childrenBlock := [ :value | #() ].	labelBlock := [ :value | value printString ]! !!SUTieredList methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:40'!labels: aOneArgumentBlock	"Define a one argument block that answers a string for a given node."	labelBlock := aOneArgumentBlock! !!SUTieredList methodsFor: 'rendering' stamp: 'lr 8/9/2007 14:43'!renderContentOn: html	html div		id: (uid := html nextId);		with: [ self renderListOn: html ]! !!SUTieredList methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:40'!renderList: aCollection level: anInteger on: html	| id selected |	aCollection isEmpty ifTrue: [ ^ self ].	html select		beOptional;		list: aCollection;		labels: labelBlock;		id: (id := html nextId);		optionalLabel: '(select)';		selected: (selected := selectionPath			at: anInteger			ifAbsent: [ nil ]);		callback: [ :value |			[ selectionPath size < anInteger ]		 		whileFalse: [ selectionPath removeLast ].			selectionPath addLast: value ];		onChange: (html updater			id: uid;			triggerFormElement: id;			callback: [ :r | self renderListOn: r ]).	selected isNil		ifFalse: [ self renderList: (childrenBlock value: selected) level: anInteger + 1 on: html ]! !!SUTieredList methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:40'!renderListOn: html	selectionPath isEmpty		ifFalse: [ self renderList: (childrenBlock value: selectionPath first) level: 2 on: html ]! !!SUTieredList methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:40'!selection	"Answer the selection path including the root node."	^ selectionPath! !!SUTieredList methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:40'!selection: anOrderedCollection	"Set the selection path including the root node."	selectionPath := anOrderedCollection! !!SUTreeReport methodsFor: 'accessing' stamp: 'lr 11/29/2007 16:59'!addColumn: aBlock label: aString	columns add: aString -> aBlock! !!SUTreeReport methodsFor: 'accessing' stamp: 'lr 11/29/2007 17:00'!children: aBlock	childrenBlock := aBlock! !!SUTreeReport methodsFor: 'scripts' stamp: 'lr 11/29/2007 19:57'!collapse: anObject level: anInteger on: aScript	self recursiveCollapse: anObject on: aScript.	aScript element		down: '.indent a';		removeClassName: 'expanded';		id: (self uid: anObject on: aScript)! !!SUTreeReport methodsFor: 'scripts' stamp: 'lr 6/5/2009 17:26'!expand: anObject level: anInteger on: aScript	| children parentId |	children := childrenBlock value: anObject.	children isEmpty ifTrue: [ ^ self ].	parentId := self uid: anObject on: aScript.	aScript element		id: parentId;		down: '.indent a';		addClassName: 'expanded'.	aScript insertion		id: parentId;		after: [ :html |			children do: [ :each |				self renderRow: each level: anInteger + 1 on: html ] ].	expanded add: anObject! !!SUTreeReport methodsFor: 'accessing' stamp: 'lr 11/29/2007 17:00'!expandable: aBlock	expandableBlock := aBlock! !!SUTreeReport methodsFor: 'initialization' stamp: 'lr 11/29/2007 17:00'!initialize	super initialize.	roots := OrderedCollection new.	columns := OrderedCollection new.	expanded := IdentitySet new.	childrenBlock := [ :value | #() ].	expandableBlock := [ :value | (childrenBlock value: value) notEmpty ]! !!SUTreeReport methodsFor: 'private' stamp: 'lr 11/29/2007 19:57'!recursiveCollapse: anObject on: aScript	expanded remove: anObject.	(childrenBlock value: anObject) do: [ :each |		aScript element			id: (self uid: each on: aScript);			remove.		(expanded includes: each)			ifTrue: [ self recursiveCollapse: each on: aScript ] ]! !!SUTreeReport methodsFor: 'rendering' stamp: 'lr 6/5/2009 17:26'!renderBodyOn: html	"Render the body of the tree report."	self renderRows: roots level: 0 on: html! !!SUTreeReport methodsFor: 'rendering' stamp: 'lr 11/29/2007 12:46'!renderContentOn: html	uids := IdentityDictionary new.	html table class: 'tree'; cellspacing: 0; with: [		html tableHead: [ self renderHeadOn: html ].		html tableBody: [ self renderBodyOn: html ] ]! !!SUTreeReport methodsFor: 'rendering' stamp: 'lr 6/5/2009 17:26'!renderHeadOn: html	"Display the column titles of the tree report."	html tableRow: [		columns do: [ :each |			html tableHeading: each key ] ]! !!SUTreeReport methodsFor: 'rendering' stamp: 'lr 6/5/2009 17:26'!renderRow: anObject level: anInteger on: html	"Render a specific row anObject at level anInteger."	html tableRow id: (self uid: anObject on: html); with: [		columns withIndexDo: [ :each :index |			html tableData: [				index = 1					ifTrue: [ self renderRowIndent: anObject level: anInteger on: html ].				html render: (each value value: anObject) ] ] ]! !!SUTreeReport methodsFor: 'rendering' stamp: 'lr 6/5/2009 17:26'!renderRowIndent: anObject level: anInteger on: html	anInteger timesRepeat: [ html div class: 'indent' ].	html div class: 'indent'; with: [		(expandableBlock value: anObject) ifTrue: [			html anchor				class: 'expanded' if: (expanded includes: anObject);				onClick: (html evaluator					callback: [ :script | self toggle: anObject level: anInteger on: script ];					return: false) ] ]! !!SUTreeReport methodsFor: 'rendering' stamp: 'lr 6/5/2009 17:26'!renderRows: aCollection level: anInteger on: html	aCollection do: [ :each |		self			renderRow: each level: anInteger on: html.		(expanded includes: each) ifTrue: [			self				renderRows: (childrenBlock value: each)				level: anInteger + 1 on: html ] ]! !!SUTreeReport methodsFor: 'accessing' stamp: 'lr 11/29/2007 17:00'!roots: aCollection	roots := aCollection! !!SUTreeReport methodsFor: 'scripts' stamp: 'lr 11/29/2007 08:52'!toggle: anObject level: anInteger on: aScript	(expanded includes: anObject)		ifTrue: [ self collapse: anObject level: anInteger on: aScript ]		ifFalse: [ self expand: anObject level: anInteger on: aScript ]! !!SUTreeReport methodsFor: 'private' stamp: 'lr 11/22/2007 22:45'!uid: anObject on: html	^ uids at: anObject ifAbsentPut: [ html nextId ]! !!SUTreeReportExample class methodsFor: 'as yet unclassified' stamp: 'lr 11/29/2007 14:52'!initialize	(self registerAsApplication: 'examples/treereport')		addLibrary: SULibrary;		addLibrary: SUTreeReportLibrary! !!SUTreeReportExample methodsFor: 'accessing' stamp: 'lr 11/29/2007 14:53'!children	^ Array with: treeReport! !!SUTreeReportExample methodsFor: 'initialize-release' stamp: 'lr 6/5/2009 17:26'!initialize	super initialize.	treeReport := SUTreeReport new		roots: (Array with: Object);		children: [ :value |			value subclasses				asSortedCollection: [ :a :b | a name < b name ] ];		addColumn: [ :value | value name ]			label: 'Class Name';		addColumn: [ :value |			[ :html |				value instVarNames					do: [ :each | html text: each ]					separatedBy: [ html text: ', ' ] ] ]			label: 'Instance Variables';		yourself! !!WAComponent methodsFor: '*scriptaculous' stamp: 'lr 4/19/2007 19:05'!lightbox: aComponent	^ AnswerContinuation currentDo: [ :cc |		self			show: aComponent			onAnswer: cc			delegation: (SULightbox new				delegate: aComponent;				yourself).		WARenderNotification raiseSignal ]! !!Color methodsFor: '*scriptaculous' stamp: 'lr 4/11/2006 19:43'!javascriptOn: aStream	aStream nextPut: $'; nextPut: $#.	aStream nextPutAll: (((self red * 255) asInteger printStringBase: 16)		padded: #left to: 2 with: $0).	aStream nextPutAll: (((self green * 255) asInteger printStringBase: 16)		padded: #left to: 2 with: $0).	aStream nextPutAll: (((self blue * 255) asInteger printStringBase: 16)		padded: #left to: 2 with: $0).	aStream nextPut: $'! !!Character methodsFor: '*scriptaculous' stamp: 'lr 7/12/2006 12:09'!javascriptOn: aStream	(String with: self) javascriptOn: aStream! !!Date methodsFor: '*scriptaculous' stamp: 'lr 3/13/2007 09:04'!javascriptMonthIndex	^ self monthIndex - 1! !!Date methodsFor: '*scriptaculous' stamp: 'lr 3/13/2007 09:04'!javascriptOn: aStream	aStream nextPutAll: 'new Date('.	#( year javascriptMonthIndex dayOfMonth )		do: [ :each | aStream print: (self perform: each) ]		separatedBy: [ aStream nextPut: $, ].	aStream nextPut: $)! !!WACallbackRegistry methodsFor: '*scriptaculous' stamp: 'lr 8/8/2007 14:41'!registerAjaxCallback: aBlock	^ self storeCallback: (SUCallback new block: aBlock)! !!WAUrl methodsFor: '*scriptaculous' stamp: 'pmm 6/21/2007 21:09'!javascriptOn: aStream	aStream print: self displayString! !!SUCallback methodsFor: 'testing' stamp: 'lr 8/8/2007 17:57'!isEnabled	^ true! !!Timespan methodsFor: '*scriptaculous' stamp: 'lr 3/13/2007 09:10'!javascriptOn: aStream	Dictionary new		at: #start put: self start;		at: #end put: self end;		javascriptOn: aStream! !!Dictionary methodsFor: '*scriptaculous' stamp: 'lr 2/19/2007 13:45'!javascriptOn: aStream	aStream nextPut: ${.	self associations		do: [ :each | aStream javascript: each key; nextPut: $:; javascript: each value ]		separatedBy: [ aStream nextPut: $, ].	aStream nextPut: $}! !!WASmallDictionary methodsFor: '*scriptaculous' stamp: 'lr 9/30/2008 18:29'!javascriptOn: aStream	aStream nextPut: ${.	self associations		do: [ :each | aStream javascript: each key; nextPut: $:; javascript: each value ]		separatedBy: [ aStream nextPut: $, ].	aStream nextPut: $}! !!ScriptaculousDolphinInfo class methodsFor: 'as yet unclassified' stamp: 'eam 11/2/2007 12:43'!addonName	^'Scriptaculous'! !!ScriptaculousDolphinInfo methodsFor: 'as yet unclassified' stamp: 'lr 6/5/2009 17:26'!packageName	"Answer the package name of receiver."	^ self addonName! !!ScriptaculousVWInfo class methodsFor: 'accessing' stamp: 'mb 10/18/2006 13:47'!addonName	^'Scriptaculous'! !!ScriptaculousVWInfo methodsFor: 'accessing' stamp: 'mb 7/6/2007 12:23'!packageName	"With the 'vw' suffix, extensions are not exported.	What is this 'vw' suffix for ?"	^ self addonName! !!String methodsFor: '*scriptaculous' stamp: 'lr 11/8/2008 09:45'!asFunction: aCollection	^ (SUStream on: self) asFunction: aCollection! !!String methodsFor: '*scriptaculous' stamp: 'lr 4/21/2006 02:43'!javascriptOn: aStream	SUStream encode: self to: aStream! !!Collection methodsFor: '*scriptaculous' stamp: 'lr 2/19/2007 13:45'!javascriptOn: aStream	aStream nextPut: $[.	self		do: [ :each | aStream javascript: each ]		separatedBy: [ aStream nextPut: $, ].	aStream nextPut: $]! !!WARenderingContext methodsFor: '*scriptaculous' stamp: 'lr 2/14/2006 20:55'!callbacks	^ callbacks! !!WARenderingContext methodsFor: '*scriptaculous' stamp: 'lr 4/7/2006 13:40'!storePassenger: anObject	| key |	callbacks at: (key := self advanceKey) put: anObject.	^ key! !!SULightbox methodsFor: 'accessing' stamp: 'lr 5/29/2007 20:15'!lighter	^ 'updateLightbox();Event.observe(window,"resize",function(){updateLightbox();});'! !!SULightbox methodsFor: 'processing' stamp: 'lr 4/19/2006 00:30'!nextPresentersDo: aBlock	super nextPresentersDo: aBlock.	aBlock value: self owner! !!SULightbox methodsFor: 'rendering' stamp: 'lr 10/28/2007 14:40'!renderContentOn: html	self renderOwnerOn: html.	html div id: 'overlay'.	html div		id: 'lightbox';		style: 'display: none';		with: self delegate.	self session addLoadScript: self lighter! !!SULightbox methodsFor: 'accessing' stamp: 'lr 5/29/2007 20:14'!script	^ 'Object.extend(Position, {	windowBounds: function() {		var x = window.innerWidth			|| document.documentElement.clientWidth			|| document.body.clientWidth			|| 0;		var y = window.innerHeight			|| document.documentElement.clientHeight			|| document.body.clientHeight			|| 0;		return [x, y];	}});Object.extend(Element, {	fullscreen: function(element) {		element = $(element);		var bounds = Position.windowBounds();		element.style.position = "absolute";		element.style.left = element.style.top = 0;		element.style.width = bounds[0] + "px";		element.style.height = bounds[1] + "px";	},	center: function(element) {		element = $(element);		var extent = Element.getDimensions(element);		var bounds = Position.windowBounds();		var x = (bounds[0] - extent.width) / 2;		var y = (bounds[1] - extent.height) / 2;		x = x < 0 ? 0 : x; y = y < 0 ? 0 : y;		element.style.position = "absolute";		element.style.left = x + "px";		element.style.top = y + "px";	}});function updateLightbox() {	Element.fullscreen("overlay");	Element.center("lightbox");	Element.show("lightbox");};'! !!SULightbox methodsFor: 'accessing' stamp: 'lr 10/12/2006 16:05'!style	^ 'html { overflow: hidden; }body { overflow: hidden; }div#overlay {	z-index: 9998;	background-color: black;	filter: alpha(opacity=40);	-moz-opacity: 0.4;	opacity: 0.4;}div#overlay[id] { position: fixed; }div#lightbox { z-index: 9999; }'! !!SUDocument methodsFor: 'public' stamp: 'lr 4/30/2007 20:32'!close	| session attributes |	session := WACurrentSession value.	(session isNil or: [ session onLoadScripts isEmpty ])		ifTrue: [ ^ self ].	attributes := WAHtmlAttributes new.	attributes at: 'type' put: 'text/javascript'.	self openTag: 'script' attributes: attributes.	stream nextPutAll: '/*<!![CDATA[*/'.	session onLoadScripts		do: [ :each | stream nextPutAll: each displayString ]		separatedBy: [ stream nextPut: $; ].	stream nextPutAll: '/*]]>*/'.	self closeTag: 'script'.	session clearLoadScripts! !!SUDocument methodsFor: 'public' stamp: 'lr 4/30/2007 20:32'!close: aHtmlRoot	self close! !!SUDocument methodsFor: 'public' stamp: 'lr 4/30/2007 20:32'!open: aHtmlRoot! !!WATagBrush methodsFor: '*scriptaculous' stamp: 'lr 4/7/2006 13:57'!passenger: anObject	self id: SUSortable passengerPrefix , (canvas context storePassenger: anObject)! !!WATagBrush methodsFor: '*scriptaculous' stamp: 'lr 2/19/2007 13:45'!script: aPrototype	aPrototype isNil		ifTrue: [ ^ self ].	(aPrototype respondsTo: #id:)		ifTrue: [ aPrototype id: self ensureId ].	aPrototype session addLoadScript: aPrototype! !!WARenderCanvas methodsFor: '*scriptaculous-controls' stamp: 'lr 5/15/2006 11:01'!autocompleter	^ SUAutocompleter on: self! !!WARenderCanvas methodsFor: '*scriptaculous-dragging' stamp: 'lr 5/10/2006 19:16'!draggable	^ SUDraggable on: self! !!WARenderCanvas methodsFor: '*scriptaculous-dragging' stamp: 'lr 5/10/2006 19:16'!droppable	^ SUDroppable on: self! !!WARenderCanvas methodsFor: '*scriptaculous-elements' stamp: 'lr 5/10/2006 19:16'!effect	^ SUEffect on: self! !!WARenderCanvas methodsFor: '*scriptaculous-elements' stamp: 'lr 5/10/2006 19:16'!element	^ SUElement on: self! !!WARenderCanvas methodsFor: '*scriptaculous-ajax' stamp: 'lr 4/20/2006 16:04'!evaluator	^ SUEvaluator on: self! !!WARenderCanvas methodsFor: '*scriptaculous-elements' stamp: 'lr 11/21/2006 23:02'!formElement	^ SUFormElement on: self! !!WARenderCanvas methodsFor: '*scriptaculous-observers' stamp: 'kdt 1/17/2009 23:10'!formElementObserver	^ SUFormElementObserver on: self! !!WARenderCanvas methodsFor: '*scriptaculous-observers' stamp: 'kdt 1/17/2009 22:39'!formObserver	^ SUFormObserver on: self! !!WARenderCanvas methodsFor: '*scriptaculous-controls' stamp: 'lr 8/6/2006 13:43'!inPlaceEditor	^ SUInPlaceEditor on: self! !!WARenderCanvas methodsFor: '*scriptaculous-elements' stamp: 'lr 11/22/2006 23:35'!insertion	^ SUInsertion on: self! !!WARenderCanvas methodsFor: '*scriptaculous-elements' stamp: 'lr 5/3/2006 20:14'!javascript	^ SUScript on: self! !!WARenderCanvas methodsFor: '*scriptaculous-elements' stamp: 'lr 11/28/2006 10:40'!logger	^ SULogger on: self! !!WARenderCanvas methodsFor: '*scriptaculous-ajax' stamp: 'lr 4/20/2006 15:37'!periodical	^ SUPeriodical on: self! !!WARenderCanvas methodsFor: '*scriptaculous-ajax' stamp: 'rjl 3/5/2009 14:59'!periodicalEvaluator	^ SUPeriodicalEvaluator on: self! !!WARenderCanvas methodsFor: '*scriptaculous-ajax' stamp: 'lr 4/20/2006 15:37'!request	^ SURequest on: self! !!WARenderCanvas methodsFor: '*scriptaculous' stamp: 'lr 2/19/2007 13:45'!scriptaculous	"Answer a Scriptaculous factory in the context of the receiver."	^ SUFactory on: self! !!WARenderCanvas methodsFor: '*scriptaculous-elements' stamp: 'lr 5/10/2006 19:16'!selector	^ SUSelector on: self! !!WARenderCanvas methodsFor: '*scriptaculous-controls' stamp: 'lr 5/15/2006 13:38'!slider	^ SUSlider on: self! !!WARenderCanvas methodsFor: '*scriptaculous-dragging' stamp: 'lr 5/10/2006 19:16'!sortable	^ SUSortable on: self! !!WARenderCanvas methodsFor: '*scriptaculous-ajax' stamp: 'lr 4/20/2006 15:37'!updater	^ SUUpdater on: self! !!SUAllTestLibrary methodsFor: 'uploaded' stamp: 'lr 10/28/2006 14:33'!backgroundGif	| xxxCache |	xxxCache := #(nil) beMutable.	(xxxCache at: 1) isNil ifTrue: [		xxxCache at: 1 put: #(71 73 70 56 57 97 6 0 244 1 213 0 0 201 237 174 210 240 188 226 246 212 234 248 224 243 251 237 219 243 201 202 238 176 247 252 243 250 254 248 222 244 206 248 253 245 252 254 251 253 254 252 241 250 234 214 242 194 206 239 182 230 247 218 229 246 216 249 253 246 238 250 230 240 250 233 236 249 226 237 249 228 216 242 197 212 241 190 221 244 204 209 240 186 228 246 214 204 238 178 220 244 203 205 239 180 232 248 221 217 243 198 224 245 209 213 241 192 208 240 185 225 245 210 244 252 239 254 255 254 245 252 240 246 252 241 244 251 238 254 255 253 250 253 247 233 248 222 232 247 220 234 248 223 223 245 207 238 249 230 207 240 184 239 250 231 229 247 217 207 239 183 251 254 249 220 243 202 226 245 211 231 247 219 222 244 205 250 253 248 215 242 195 241 251 235 214 242 193 218 243 199 255 255 255 33 249 4 0 0 0 0 0 44 0 0 0 0 6 0 244 1 0 6 255 64 192 239 39 28 18 135 194 98 18 105 60 30 149 78 67 83 250 147 82 173 67 106 118 123 173 110 141 221 240 247 139 253 113 204 195 179 81 125 102 163 223 233 184 219 189 142 123 134 247 251 79 143 239 235 243 125 70 15 67 131 131 63 133 132 77 134 136 135 63 52 67 143 70 145 143 147 142 144 77 149 149 49 151 70 155 63 155 158 155 35 67 163 70 165 163 167 63 169 70 26 164 63 173 175 177 178 67 176 173 181 178 176 180 67 1 63 188 189 191 192 187 194 190 188 24 194 70 198 63 198 201 203 67 201 206 208 204 202 208 200 209 214 211 213 211 210 210 70 34 67 222 222 63 224 223 77 225 227 63 61 232 67 233 70 14 67 238 238 63 240 239 77 59 244 246 63 246 248 248 67 251 249 253 255 2 14 185 48 240 7 65 131 8 19 22 68 120 144 96 195 38 32 10 70 252 17 113 226 196 33 22 41 98 252 225 99 163 145 142 28 67 134 4 9 114 8 201 31 5 76 162 28 146 210 72 203 148 47 87 202 100 73 211 198 16 155 45 109 26 233 112 243 7 79 255 159 64 131 14 249 201 147 104 208 159 67 50 12 253 161 148 169 211 167 73 163 54 85 58 181 73 142 33 87 175 254 72 240 67 43 87 35 95 185 134 253 241 98 72 89 35 103 203 166 37 107 182 201 218 183 109 141 132 24 50 119 238 143 186 116 155 216 197 251 131 196 221 188 70 252 246 29 60 88 176 224 33 134 127 220 24 178 120 177 226 38 2 134 68 142 252 99 178 100 200 151 41 91 174 140 153 243 134 203 159 127 132 30 18 250 115 105 209 164 155 156 94 157 218 72 232 8 63 96 199 158 77 123 200 12 219 63 110 231 222 205 27 247 110 8 67 128 3 255 49 60 184 241 225 194 141 27 193 49 132 57 243 31 206 155 55 121 30 29 186 245 235 67 90 72 215 254 67 59 119 238 217 195 127 24 50 126 252 15 243 67 88 164 255 161 158 189 251 247 235 221 183 87 63 191 73 123 23 63 240 231 223 207 127 136 126 252 3 12 17 96 128 63 16 40 224 129 4 14 120 160 17 9 22 120 96 5 11 14 1 225 15 16 78 88 161 132 77 88 72 33 134 26 26 161 255 225 135 24 122 56 132 5 63 144 88 226 137 40 142 168 162 137 36 178 216 132 139 38 194 240 131 140 51 54 65 163 140 55 254 48 193 16 52 14 177 163 142 64 254 32 131 144 67 12 105 132 145 67 34 73 228 146 69 54 73 129 147 67 60 105 132 148 79 82 249 131 149 83 70 121 165 150 82 54 208 68 151 63 120 25 230 152 100 14 193 195 16 94 158 249 195 153 106 170 105 230 155 109 254 64 192 155 70 204 41 231 157 119 218 105 231 16 122 226 57 103 159 117 242 233 231 160 129 230 41 168 157 41 52 145 232 15 137 46 218 232 16 139 66 42 233 162 37 252 80 169 165 77 92 90 233 165 39 252 208 169 167 77 124 218 169 168 160 150 58 4 169 164 162 112 106 19 170 254 160 106 171 175 14 209 170 172 180 194 234 42 173 70 216 122 0 173 187 254 208 235 16 189 238 26 172 175 192 54 49 236 177 197 26 161 64 177 203 254 176 108 179 205 14 1 173 179 210 82 107 109 181 212 78 59 173 178 213 74 80 109 179 222 114 251 131 183 225 146 59 68 184 231 166 91 195 238 184 233 26 177 110 184 43 176 251 67 188 70 208 27 175 189 243 14 161 67 19 244 238 139 128 190 63 252 251 195 190 70 8 252 175 193 63 212 48 132 192 67 40 156 240 195 15 59 236 112 195 20 75 12 241 196 23 103 108 177 17 11 12 209 113 199 63 124 236 113 19 32 139 28 242 201 40 143 124 114 201 40 131 172 178 201 29 51 48 132 204 70 208 44 179 205 63 224 92 243 204 57 243 172 51 207 61 227 252 243 15 42 12 81 116 209 61 35 141 180 209 76 155 208 52 211 70 56 253 131 211 82 83 61 132 212 87 103 93 245 212 89 55 209 196 214 88 123 45 246 216 100 151 109 246 217 104 167 173 246 218 108 183 237 246 219 112 199 45 247 220 116 215 109 247 221 120 231 173 247 222 124 247 237 247 223 128 7 46 248 224 122 7 1 0 59) asByteArray ].	^ xxxCache at: 1! !!SUAllTestLibrary methodsFor: 'uploaded' stamp: 'lr 10/28/2006 14:34'!demoGif	| xxxCache |	xxxCache := #(nil) beMutable.	(xxxCache at: 1) isNil ifTrue: [		xxxCache at: 1 put: #(71 73 70 56 57 97 120 0 120 0 128 0 0 247 224 168 255 255 255 33 249 4 0 0 0 0 0 44 0 0 0 0 120 0 120 0 0 2 255 68 98 120 201 235 10 91 124 178 210 59 179 213 120 167 14 114 162 23 146 99 137 158 138 201 166 173 250 198 238 37 195 179 141 215 250 115 239 121 15 252 157 124 196 96 81 216 58 42 141 76 36 166 185 116 74 163 6 42 244 58 5 90 179 220 173 9 235 5 139 57 225 238 56 92 78 159 155 107 179 91 173 126 183 139 241 250 60 117 151 235 151 246 125 62 249 23 232 167 34 216 103 232 112 56 152 88 85 216 168 200 243 24 185 136 232 56 233 103 137 57 86 185 249 152 41 121 231 25 202 246 73 122 40 90 42 118 170 122 195 185 154 229 10 11 18 139 42 213 106 43 55 155 75 73 171 139 115 219 11 200 251 123 5 60 44 98 92 76 134 188 108 147 60 203 236 188 27 45 60 49 237 10 141 61 148 93 108 205 188 253 93 13 174 219 77 45 33 126 78 46 154 110 124 94 142 178 238 14 239 217 62 78 143 45 127 107 239 174 188 223 141 79 173 47 214 191 73 3 57 5 188 119 176 159 194 133 53 18 174 42 136 10 98 34 135 203 36 54 178 72 138 162 66 140 99 118 56 10 210 168 14 164 45 143 145 68 198 51 73 16 165 65 134 7 73 194 81 73 11 102 74 150 52 45 184 204 35 115 211 205 75 57 51 214 180 183 19 77 207 62 67 47 22 237 116 52 78 210 64 65 215 52 213 179 20 233 207 169 140 168 130 139 250 210 234 207 167 91 176 130 242 138 11 108 87 173 245 200 34 52 75 83 172 83 181 102 184 106 66 43 144 237 146 2 0 59) asByteArray ].	^ xxxCache at: 1! !!SUAllTestLibrary methodsFor: 'uploaded' stamp: 'lr 10/28/2006 14:34'!demologoGif	| xxxCache |	xxxCache := #(nil) beMutable.	(xxxCache at: 1) isNil ifTrue: [		xxxCache at: 1 put: #(71 73 70 56 57 97 120 0 23 0 230 0 0 149 176 109 146 177 101 172 195 138 241 245 234 169 195 132 218 229 200 137 170 89 150 183 102 162 189 123 203 219 179 167 200 118 144 177 98 128 160 81 145 174 102 179 202 145 190 208 162 130 162 84 149 180 105 196 212 171 208 221 187 157 190 109 225 234 211 252 253 250 159 186 118 166 191 130 159 193 111 132 164 86 187 208 156 155 187 107 141 175 95 142 173 97 138 169 93 166 199 118 154 182 114 152 185 105 128 159 81 186 205 157 237 243 229 194 212 166 140 170 97 158 190 109 205 219 184 160 193 112 135 168 85 152 181 110 179 203 142 167 200 120 230 237 219 177 200 144 155 188 107 158 191 110 166 199 117 164 197 115 140 172 92 127 160 79 160 193 111 215 226 198 134 166 86 142 175 95 221 231 207 139 171 92 139 172 92 182 202 151 232 239 222 176 198 144 136 169 87 201 218 175 131 165 81 200 215 178 221 232 203 238 244 230 141 170 100 138 172 90 151 184 105 162 194 113 244 248 238 141 172 94 139 168 97 239 243 232 234 240 224 154 185 110 144 172 103 159 185 120 132 164 84 163 197 115 157 190 109 140 174 93 199 215 175 133 166 84 135 168 88 147 179 100 164 197 116 161 195 114 163 198 116 236 242 227 134 167 85 174 198 139 185 196 117 153 186 106 249 251 245 211 223 192 136 167 88 152 186 104 156 190 107 151 183 104 166 192 126 129 163 79 175 194 116 153 185 107 154 185 105 154 185 107 209 223 188 143 176 96 233 240 222 134 165 88 130 163 84 133 165 86 127 160 81 164 198 116 167 199 120 135 167 88 134 161 81 137 169 90 129 161 83 162 195 114 168 201 120 184 196 117 159 191 114 33 249 4 0 0 0 0 0 44 0 0 0 0 120 0 23 0 0 7 255 128 121 130 131 132 133 132 123 134 137 138 139 140 141 142 143 144 140 12 12 117 117 148 150 149 148 154 149 35 12 123 152 153 149 156 35 161 147 151 164 162 35 157 162 161 172 152 157 170 147 164 154 151 151 174 153 155 117 179 184 162 185 188 150 147 152 123 195 196 197 198 197 16 199 202 203 204 205 206 207 208 209 205 115 212 115 16 16 213 214 217 217 83 212 215 222 216 219 216 227 214 225 223 219 229 232 225 232 212 12 54 228 222 213 235 235 241 242 244 242 236 230 116 251 252 253 254 253 57 254 105 248 215 111 224 64 127 7 9 42 164 147 112 223 156 6 82 62 52 92 72 112 34 69 129 26 240 104 196 147 101 163 199 143 26 245 116 228 56 82 227 200 146 26 115 124 193 147 67 13 201 142 57 60 162 220 88 102 166 198 41 30 6 236 144 179 18 228 203 141 89 102 150 44 99 242 99 80 142 38 59 102 209 195 212 0 211 166 79 163 62 229 33 181 106 85 44 4 158 72 105 128 67 192 23 3 65 12 4 96 2 245 169 1 167 86 159 14 145 96 1 192 20 180 105 255 225 166 157 107 118 110 141 30 61 106 220 197 139 119 175 94 30 124 153 244 224 193 35 8 146 32 132 195 174 224 177 34 72 88 43 95 66 164 0 144 98 201 137 21 72 12 188 169 224 1 137 94 176 135 17 103 6 203 56 72 143 21 96 17 88 144 96 35 172 233 190 165 75 247 112 205 99 47 95 189 121 243 222 181 157 123 240 94 194 29 130 11 23 174 163 67 113 226 197 225 4 95 64 128 0 24 43 58 210 16 32 17 160 57 24 33 44 46 8 24 129 97 204 3 31 80 224 248 176 240 32 128 113 36 44 124 32 64 0 70 11 115 24 14 2 108 112 96 5 12 1 36 5 126 208 185 224 128 192 5 36 86 116 96 197 2 36 208 103 159 21 105 8 0 195 2 86 120 112 156 14 197 65 40 225 112 18 30 103 28 132 29 44 160 225 134 28 118 200 161 123 65 192 224 5 2 21 160 241 6 17 8 120 1 195 18 9 120 177 131 7 47 236 160 69 5 59 132 224 68 2 76 188 128 195 30 13 68 128 96 9 15 68 49 192 27 17 20 225 195 3 21 152 96 129 255 0 105 88 0 4 24 99 16 32 192 18 2 8 48 34 20 17 32 241 192 146 170 1 129 128 17 2 188 16 2 26 30 150 105 166 135 90 164 169 230 154 108 182 137 192 6 78 76 112 194 3 3 132 112 194 17 59 84 112 2 9 19 8 49 0 0 15 44 33 69 0 3 60 32 65 157 204 5 160 69 17 21 208 97 66 9 1 36 240 2 19 81 132 80 194 21 13 196 145 2 140 41 16 58 193 16 41 140 40 197 2 80 148 64 4 140 19 176 176 193 15 56 68 129 192 5 11 180 41 235 172 108 30 96 235 173 184 230 138 43 26 139 146 96 130 17 4 20 241 68 18 7 152 176 4 2 86 124 208 192 15 87 32 80 194 27 4 20 80 64 8 21 164 160 69 11 21 8 1 197 0 41 164 81 232 5 52 46 192 134 16 37 92 96 194 0 23 108 48 0 1 14 28 235 45 9 30 224 240 198 3 78 32 112 238 5 5 60 240 0 176 8 4 160 235 191 0 235 42 194 192 4 23 108 112 193 109 28 224 3 1 18 60 192 2 6 56 108 64 0 17 229 153 33 2 255 26 68 108 80 192 14 62 152 240 64 3 122 72 112 5 1 44 76 96 130 22 68 76 64 64 10 14 3 129 67 127 64 76 144 32 25 4 96 64 6 24 33 144 0 198 21 62 120 224 198 4 87 8 32 179 0 52 47 108 40 172 73 28 172 244 210 7 115 224 244 211 78 199 0 53 212 49 72 29 195 2 81 28 193 4 175 77 68 209 64 19 30 68 45 134 30 2 12 0 198 7 90 139 16 131 7 71 4 144 196 9 30 136 112 194 9 1 220 73 102 215 1 44 208 132 162 123 107 209 68 3 7 120 144 117 216 98 192 29 64 223 123 195 209 192 17 39 28 80 245 212 81 67 78 245 227 82 71 93 69 21 50 92 142 2 10 152 87 193 249 229 158 99 46 3 10 50 100 46 186 233 165 155 94 197 25 42 84 240 6 26 151 167 158 121 234 164 207 30 59 234 179 231 126 122 236 152 215 46 250 239 162 127 174 249 237 157 111 94 58 233 155 247 222 249 232 55 52 223 188 10 208 67 159 193 13 42 100 32 61 244 74 60 127 195 244 214 67 255 124 245 50 8 241 68 255 26 49 168 176 125 245 209 103 48 61 245 212 71 239 126 247 230 187 175 61 247 237 175 207 190 249 205 195 127 126 250 221 111 207 189 250 249 163 223 13 248 64 192 2 26 240 128 92 56 160 2 23 72 64 1 96 0 5 8 76 32 3 249 32 193 9 34 208 130 19 172 160 1 149 64 65 12 30 208 14 32 220 66 23 236 64 3 59 108 33 132 32 76 97 8 79 168 66 21 142 48 133 84 56 131 12 90 104 66 20 166 176 132 53 164 1 21 104 8 194 23 110 129 133 45 4 98 15 131 200 195 20 10 209 136 53 164 161 2 150 168 0 16 128 128 137 80 92 226 19 103 48 131 38 46 177 138 10 192 34 20 157 248 196 45 70 17 4 90 140 98 22 197 56 3 48 90 209 140 100 236 226 24 195 40 198 43 118 17 141 83 116 34 19 227 216 135 58 218 241 142 120 204 163 30 247 200 199 62 250 241 143 128 12 164 32 93 112 135 66 26 242 144 136 188 3 33 251 144 72 66 18 50 145 134 124 36 34 29 169 200 70 30 82 146 145 172 164 34 49 169 201 71 186 128 59 147 150 140 36 37 37 233 201 59 252 225 148 168 76 165 42 87 201 202 86 186 242 149 176 140 165 44 103 73 75 63 216 242 150 184 244 67 24 114 105 203 53 240 242 151 192 12 166 48 135 73 204 98 14 115 151 195 12 4 0 59) asByteArray ].	^ xxxCache at: 1! !!SUAllTestLibrary methodsFor: 'uploaded' stamp: 'lr 10/28/2006 14:34'!headerGif	| xxxCache |	xxxCache := #(nil) beMutable.	(xxxCache at: 1) isNil ifTrue: [		xxxCache at: 1 put: #(71 73 70 56 57 97 41 0 110 0 230 0 0 112 148 66 113 149 68 108 143 63 144 183 93 152 191 99 157 198 105 150 190 98 148 188 96 135 174 86 122 158 74 130 168 82 132 170 84 154 193 102 110 146 65 120 156 73 118 154 71 126 164 79 154 196 102 154 192 102 152 192 101 145 184 94 147 186 96 131 170 82 109 144 64 144 183 94 124 162 78 110 144 64 138 176 89 111 146 66 127 164 80 119 155 72 116 152 69 134 172 85 133 172 84 116 152 70 141 180 90 142 180 91 143 182 92 130 166 81 137 175 88 128 166 80 141 179 90 142 180 92 110 146 66 130 166 80 140 177 89 123 162 76 123 161 76 156 196 103 114 152 69 150 188 98 118 152 70 126 162 78 152 192 102 136 176 88 129 164 80 148 186 97 116 150 69 122 160 75 121 156 74 146 188 96 132 172 84 140 177 90 153 192 99 144 184 93 134 174 86 155 196 103 151 191 99 158 198 105 148 189 98 119 154 72 121 158 74 124 161 77 153 192 101 154 194 104 149 189 97 137 176 88 111 147 66 148 189 97 127 164 79 151 190 97 146 185 95 109 143 64 143 183 93 142 179 90 109 145 64 158 198 106 131 168 84 148 190 98 117 153 70 142 181 91 120 157 73 129 166 81 140 179 89 138 177 90 146 188 95 151 190 99 141 180 91 134 173 85 131 167 82 121 157 74 120 156 71 125 161 78 153 193 102 129 165 80 110 145 65 156 197 104 157 197 105 156 196 104 157 197 104 156 197 105 124 161 75 122 158 73 153 193 101 139 179 89 155 195 103 157 196 105 158 197 105 154 194 101 148 188 95 157 196 104 157 197 106 158 199 106 147 185 96 123 159 75 156 196 105 112 147 67 135 175 87 33 249 4 0 0 0 0 0 44 0 0 0 0 41 0 110 0 0 7 255 128 23 2 131 132 133 134 135 136 137 138 130 140 141 142 143 139 144 146 147 145 149 148 151 152 85 153 155 154 156 157 158 160 161 105 26 159 163 166 165 13 168 162 170 167 173 169 164 175 174 177 77 172 178 181 182 179 185 184 180 188 186 190 191 189 187 28 192 195 196 194 43 193 197 198 202 204 205 201 207 206 209 210 208 0 211 214 77 213 216 218 219 220 126 217 221 222 223 224 225 227 228 230 231 1 232 226 234 235 236 238 237 0 233 239 242 241 244 246 247 248 249 245 251 250 253 254 255 0 3 10 28 72 208 223 135 0 49 114 40 76 120 48 33 194 134 15 29 50 156 72 49 226 7 17 24 47 106 220 120 49 221 66 142 29 63 66 4 153 37 35 73 147 39 81 166 92 89 178 165 75 150 47 99 202 156 73 179 166 205 155 56 141 120 200 185 211 101 79 159 64 31 8 253 57 180 168 209 163 68 145 150 73 202 180 169 206 167 74 61 56 136 10 181 106 207 169 82 177 102 213 186 149 107 215 175 96 195 122 29 235 96 75 217 179 104 197 170 77 107 150 173 219 183 96 255 143 180 125 43 151 46 218 4 117 239 238 200 139 151 111 95 50 112 252 6 158 59 248 47 96 194 130 15 27 174 203 71 49 99 199 139 229 54 134 28 121 50 101 203 149 37 27 126 193 185 113 231 23 9 64 135 246 156 89 52 105 204 167 63 171 30 205 103 181 14 213 176 89 191 150 141 36 118 6 216 184 107 191 214 205 249 118 239 55 188 125 187 16 110 134 184 241 226 193 143 35 87 206 188 185 243 231 52 50 64 128 46 157 250 244 232 216 179 95 223 94 157 187 118 239 224 195 139 31 223 157 188 249 39 231 211 67 64 179 30 125 123 20 29 110 196 135 63 159 190 252 247 248 221 231 103 111 191 63 151 255 0 214 199 159 127 1 226 55 198 129 3 22 72 160 130 12 162 97 66 131 16 178 240 224 132 8 86 8 160 133 24 82 152 225 134 28 118 120 161 135 10 28 24 34 136 36 142 120 197 137 34 90 160 162 137 40 182 200 226 139 43 186 24 227 140 52 46 48 134 141 56 222 136 227 142 60 246 232 227 2 64 6 41 228 144 68 134 80 228 145 70 38 169 36 255 146 75 54 201 164 147 77 138 1 229 148 84 130 96 165 148 87 70 169 101 150 92 118 233 37 150 95 130 41 230 152 97 146 137 64 16 102 150 169 102 154 103 254 209 230 155 112 142 233 102 156 114 210 121 194 157 120 218 169 231 158 121 194 217 167 159 128 206 25 232 159 132 22 106 232 161 76 228 185 129 23 137 54 186 168 163 144 70 250 232 164 148 86 106 105 11 151 98 170 169 164 153 50 186 233 167 160 118 26 234 168 62 116 161 233 8 165 82 106 234 170 167 162 202 106 169 175 182 10 171 28 177 186 90 107 24 179 222 138 171 174 90 216 218 235 174 191 82 1 172 176 196 166 224 43 175 193 38 59 130 178 198 50 235 236 179 208 146 32 173 10 97 68 107 237 180 37 100 139 173 182 215 114 75 173 183 221 130 251 171 184 228 150 107 238 0 232 158 155 46 6 83 244 186 238 187 90 192 43 239 188 244 214 219 46 5 217 2 129 175 189 236 242 219 239 187 250 6 188 239 192 4 23 108 240 193 8 39 28 5 5 11 51 236 112 195 15 67 28 241 196 18 87 108 241 255 197 20 95 252 69 5 81 108 220 177 199 28 239 113 0 200 123 64 60 50 201 31 167 140 242 29 33 99 44 242 203 27 179 124 50 204 52 207 28 178 205 56 231 172 114 5 58 243 236 179 19 63 227 32 52 208 57 23 113 50 209 69 47 17 244 210 72 55 173 244 18 80 71 125 180 19 82 79 93 245 213 86 99 157 245 214 90 27 125 0 20 94 131 45 182 12 99 27 0 134 217 101 167 141 133 218 103 179 141 246 219 110 119 13 119 220 116 215 61 132 221 4 180 173 247 222 124 223 237 247 223 128 7 158 183 224 132 15 110 248 225 136 23 158 120 18 139 55 238 248 15 113 48 62 129 228 148 67 62 185 229 149 71 142 121 230 151 111 206 249 231 160 219 209 121 232 12 136 78 250 233 168 159 81 250 234 154 179 174 186 233 176 183 238 186 4 179 191 110 187 18 181 231 174 59 238 188 223 30 251 238 192 71 32 124 239 174 15 79 124 241 200 11 49 135 242 204 39 31 60 27 207 55 47 253 244 203 87 79 189 245 215 51 143 7 27 48 168 129 61 247 223 123 175 125 76 248 228 139 95 190 249 232 131 159 190 250 231 175 239 254 246 236 183 209 253 251 244 215 63 254 26 246 231 95 0 254 250 187 209 255 254 0 36 2 255 244 240 63 53 16 48 128 8 52 224 0 23 152 64 1 54 240 129 16 244 31 3 35 72 193 10 90 240 130 24 204 224 1 35 24 8 0 59) asByteArray ].	^ xxxCache at: 1! !!SUAllTestLibrary methodsFor: 'uploaded' stamp: 'lr 10/28/2006 14:34'!logoGif	| xxxCache |	xxxCache := #(nil) beMutable.	(xxxCache at: 1) isNil ifTrue: [		xxxCache at: 1 put: #(71 73 70 56 57 97 43 2 110 0 247 0 0 176 184 196 251 251 252 146 185 95 121 153 78 136 150 170 102 123 148 137 173 90 227 226 225 200 204 211 154 165 181 113 132 155 90 114 137 165 174 188 241 245 235 89 118 119 132 170 84 136 174 86 142 181 92 124 162 77 137 176 88 100 134 89 134 172 85 119 155 72 242 242 244 161 191 120 84 109 134 141 180 90 101 134 100 140 177 89 220 220 220 126 164 79 152 190 100 89 120 104 143 178 96 187 193 203 119 156 72 120 156 72 218 218 218 135 170 88 130 169 81 121 160 75 234 234 236 113 152 68 195 199 207 123 161 76 217 220 227 152 192 102 124 141 162 249 251 246 144 182 93 128 164 79 209 213 222 204 208 215 124 156 80 236 237 240 148 185 96 104 141 62 226 228 233 210 211 214 141 176 94 126 163 80 225 224 223 113 148 105 150 190 100 113 150 68 89 121 93 109 143 98 127 160 84 222 222 221 100 130 64 109 143 64 78 106 123 127 163 78 136 176 87 131 168 84 108 146 64 102 133 116 150 190 97 118 155 85 148 189 97 109 144 86 220 220 219 78 103 131 82 111 121 224 223 222 150 188 98 155 193 104 112 149 67 222 222 222 94 125 107 113 149 82 128 166 80 120 158 74 116 150 69 125 162 92 130 167 82 108 144 64 100 134 76 147 159 177 103 137 77 231 232 237 222 225 231 144 155 173 120 156 74 129 166 99 146 186 95 121 158 76 221 221 220 96 129 87 111 146 77 126 165 80 154 195 102 114 149 92 111 148 66 106 142 64 148 190 98 231 229 227 105 141 77 152 194 100 120 154 73 142 184 93 110 144 64 110 146 65 131 170 82 219 219 219 118 154 77 246 246 246 154 196 104 106 142 69 233 232 230 216 215 217 147 188 96 94 117 143 106 144 64 114 150 72 95 127 115 131 171 82 108 145 68 139 179 89 123 159 102 151 192 100 147 187 95 109 146 67 121 157 73 249 247 249 129 165 81 102 137 69 219 219 218 215 216 219 132 172 82 107 144 68 142 156 175 137 176 95 128 168 80 127 168 79 110 148 69 233 239 223 238 243 231 111 146 66 157 198 105 235 241 228 153 192 101 157 197 104 122 158 75 154 193 102 110 146 66 152 191 99 154 189 106 157 197 105 146 188 95 150 190 98 146 180 98 188 210 158 229 237 218 158 198 105 154 194 101 154 196 102 216 228 198 118 150 76 123 159 75 152 192 101 152 192 99 122 159 74 149 184 101 151 186 104 124 159 78 116 147 74 132 166 87 140 174 94 200 218 175 147 182 100 113 145 71 153 193 102 155 193 103 154 192 102 148 182 102 107 138 68 171 199 132 182 206 148 156 191 108 158 199 106 112 142 72 158 197 106 136 168 90 177 203 140 165 196 121 157 188 113 158 192 113 111 143 68 161 197 112 152 184 109 155 194 104 149 189 97 219 220 219 130 167 85 151 190 97 151 190 100 117 155 71 156 196 103 150 191 99 110 147 66 149 188 95 129 167 81 221 220 222 111 147 68 248 248 249 152 193 101 150 189 99 151 191 98 248 247 247 154 193 103 119 161 73 117 156 79 132 173 84 223 223 223 240 241 244 240 239 239 140 179 93 239 239 242 109 145 65 110 145 66 112 145 66 219 220 220 115 152 69 112 148 66 145 184 94 117 153 70 111 147 66 109 144 64 113 149 68 155 196 103 108 143 63 110 145 65 148 188 96 156 197 104 255 255 255 33 249 4 0 0 0 0 0 44 0 0 0 0 43 2 110 0 0 8 255 0 247 9 28 72 176 160 193 131 8 19 42 92 200 176 161 67 124 251 150 8 132 56 144 162 195 139 19 35 102 172 168 208 34 70 132 16 37 238 243 232 209 32 190 146 31 77 106 28 73 16 101 75 151 31 67 110 156 121 240 36 203 150 5 109 190 44 121 82 103 197 158 60 129 166 84 41 146 100 71 136 62 39 10 29 154 115 165 209 132 54 147 50 149 121 147 166 73 164 72 115 46 125 136 181 42 83 150 69 113 66 237 154 117 167 212 175 80 157 138 5 73 246 166 197 160 61 9 74 228 7 55 233 220 186 30 239 162 205 24 150 227 216 145 89 41 190 149 40 21 104 222 125 116 247 242 165 9 83 41 96 150 130 43 46 193 43 23 113 100 179 135 19 63 198 92 89 243 217 148 84 159 178 125 92 118 112 225 173 26 61 55 198 24 122 109 205 182 113 21 131 101 124 148 180 91 201 168 1 199 22 168 119 115 77 181 126 71 71 189 61 113 178 225 211 187 83 11 38 249 86 107 242 222 73 125 34 183 107 217 241 207 159 154 209 182 14 254 218 246 229 145 198 143 19 255 158 158 121 249 75 236 137 41 15 132 206 28 189 122 222 213 125 251 62 201 143 238 123 229 214 243 211 183 159 254 62 251 243 74 213 71 159 127 241 69 247 22 62 2 34 168 224 129 9 210 149 157 82 207 21 216 94 128 252 45 232 28 117 170 1 8 88 131 11 118 104 27 103 235 73 168 225 126 3 218 71 22 129 25 94 71 97 137 113 69 165 160 110 40 154 167 226 134 21 154 72 218 139 32 194 151 162 126 8 214 216 34 86 246 93 88 94 126 243 245 200 162 139 27 38 7 227 144 242 73 103 164 130 54 186 104 98 140 68 58 201 161 137 165 80 217 36 131 62 34 57 96 110 134 117 38 35 143 24 142 89 228 149 63 38 121 156 144 98 86 201 229 145 39 206 72 34 148 61 149 210 95 79 65 230 136 223 150 238 209 233 101 135 199 61 201 102 136 59 158 217 229 137 83 30 199 225 146 21 50 58 224 160 58 154 105 229 161 55 38 106 24 135 165 140 119 82 166 248 112 218 169 113 119 126 73 151 166 47 94 58 224 100 144 238 105 96 159 14 166 249 101 160 79 230 255 249 83 132 133 78 10 167 157 90 174 186 34 157 124 238 218 234 166 141 154 170 160 113 158 230 153 229 139 70 36 107 196 130 163 214 9 170 146 97 18 58 33 141 183 86 152 199 167 175 14 88 172 176 169 254 39 103 172 29 226 170 96 30 158 96 11 40 179 88 225 121 42 80 54 234 233 45 143 104 254 105 41 187 21 66 73 170 128 142 14 203 174 186 249 54 171 46 137 253 226 19 94 135 245 133 138 238 192 38 22 108 112 133 8 227 169 112 186 162 10 188 239 126 5 155 155 40 127 11 175 251 111 143 21 103 172 239 198 10 183 186 237 196 21 195 200 240 196 28 11 216 170 64 89 178 92 42 201 18 227 105 196 62 114 100 49 197 2 132 176 33 7 139 1 55 76 177 202 10 226 122 108 171 215 10 40 180 209 21 219 153 116 200 157 134 124 47 210 10 47 65 151 210 5 75 61 181 211 245 21 141 175 176 254 190 202 116 171 14 242 83 244 166 207 146 12 117 211 81 103 125 117 218 98 111 13 179 207 41 131 13 165 216 232 82 93 159 213 121 44 205 118 222 37 115 255 29 179 215 15 203 157 53 179 90 243 83 238 218 85 171 253 176 221 252 224 29 50 226 119 43 206 52 227 142 63 14 121 227 146 63 142 118 226 109 91 14 53 231 124 123 126 121 229 162 95 142 121 231 165 31 189 119 233 245 41 13 49 130 51 3 2 66 1 4 44 0 128 2 65 204 108 196 215 116 14 206 95 222 155 71 14 58 235 252 184 158 183 221 170 15 207 186 241 197 43 108 231 208 227 46 142 53 234 162 51 143 124 243 193 159 30 122 245 2 30 239 124 243 208 211 181 253 232 153 123 110 253 247 207 135 143 207 248 228 83 111 126 247 205 23 252 124 241 165 168 207 126 251 247 135 124 190 252 224 215 143 63 241 251 107 93 255 236 116 15 251 89 238 112 6 124 156 39 254 183 60 248 93 47 125 4 76 96 200 22 184 190 248 9 16 130 252 40 32 3 83 231 64 133 189 3 31 239 0 1 33 40 1 128 2 8 98 5 25 8 131 28 222 49 189 252 125 79 124 22 212 223 0 51 200 56 254 101 143 116 220 131 225 3 233 23 193 247 109 48 135 21 220 97 253 255 122 104 57 165 73 80 97 11 76 34 130 158 199 162 251 37 209 112 71 44 216 19 61 145 60 225 185 144 127 58 68 31 15 105 232 195 42 106 15 128 29 228 31 6 53 88 68 1 34 16 123 148 43 95 25 233 162 193 27 170 241 113 174 187 199 15 125 136 15 57 106 240 142 115 92 99 16 181 88 10 57 214 143 62 114 116 163 251 244 104 71 60 250 47 120 248 40 68 24 50 32 130 127 188 128 0 147 16 132 2 64 48 17 1 102 81 140 91 36 35 28 207 104 196 62 18 144 126 80 44 133 39 12 105 39 42 138 242 30 164 12 229 40 239 49 202 62 230 17 142 97 188 96 38 107 104 201 82 22 16 149 159 244 159 41 87 233 137 86 166 114 151 168 236 165 47 93 73 204 95 214 143 151 189 44 230 43 101 200 198 12 178 50 130 126 140 102 241 252 184 204 23 238 17 147 67 228 226 26 109 217 71 92 102 16 148 192 100 101 50 149 233 186 52 14 18 150 151 148 101 54 53 201 76 110 162 146 149 75 140 223 16 165 169 52 99 158 82 156 166 28 90 52 235 153 255 203 82 30 51 152 227 244 228 23 27 216 204 96 70 144 147 173 59 164 57 103 134 3 7 40 32 0 41 40 0 3 14 64 4 6 76 65 18 59 179 39 50 243 201 74 99 122 211 143 254 188 167 48 231 217 202 81 26 174 163 2 165 98 48 111 233 79 128 178 20 138 46 45 5 61 52 10 80 142 150 84 142 163 108 229 76 135 9 83 113 162 84 131 42 245 105 47 95 26 212 161 14 85 166 62 77 105 55 141 186 202 126 170 178 166 36 45 160 73 115 250 81 112 254 19 159 81 61 229 73 121 73 212 165 230 148 171 74 117 233 80 81 250 77 93 94 117 164 245 67 233 84 59 138 210 157 182 178 172 33 221 104 86 215 202 85 158 22 245 171 43 181 171 87 125 218 209 163 2 117 175 99 253 170 94 197 90 87 97 118 149 176 121 21 230 96 133 122 211 173 230 149 166 88 77 107 99 169 218 87 92 206 148 31 251 160 192 17 16 240 143 22 48 178 7 7 16 129 20 84 248 14 120 20 214 176 144 69 235 105 3 107 212 149 134 149 177 137 69 173 97 121 73 143 183 255 130 244 169 145 237 227 100 217 74 217 100 218 214 170 34 13 168 90 113 202 91 222 82 113 148 181 253 105 75 97 219 87 197 214 148 183 201 125 45 83 99 203 218 222 214 118 177 211 109 174 108 91 203 202 235 98 23 175 218 173 46 116 157 43 93 240 10 86 188 180 85 236 48 147 171 83 161 166 86 184 187 173 43 64 79 57 83 167 134 19 173 186 149 42 113 229 43 78 250 42 183 167 217 61 239 42 233 199 94 229 38 247 189 54 213 175 99 251 170 135 119 200 1 4 10 184 192 63 68 176 0 4 244 160 7 43 40 0 27 70 162 7 3 35 147 165 7 54 172 39 163 139 216 240 110 116 188 234 5 104 125 51 184 226 123 204 180 192 138 133 177 48 233 33 227 94 210 248 142 47 46 160 91 155 11 226 141 10 86 199 238 61 234 142 193 75 192 28 215 216 19 55 62 114 146 149 252 226 250 14 153 175 76 118 241 76 129 220 218 177 58 57 200 171 156 178 125 207 10 95 5 247 214 184 254 181 113 148 111 236 98 170 198 184 201 168 188 114 149 179 156 102 51 207 24 255 205 46 46 115 120 151 156 230 56 35 117 205 117 150 115 121 249 42 224 231 166 55 197 226 124 177 155 197 44 229 60 159 151 206 113 158 242 122 125 140 79 57 31 186 201 122 0 131 36 142 208 200 0 92 66 1 130 160 66 15 104 160 0 54 224 96 31 122 8 48 62 209 27 76 239 78 23 188 83 102 47 154 239 236 230 60 171 186 208 84 110 117 156 29 13 103 28 39 250 198 172 230 241 172 95 77 102 71 143 26 209 57 14 244 59 107 59 230 84 207 218 198 195 70 114 172 117 157 234 156 214 90 205 178 110 118 119 97 61 235 92 163 186 205 211 238 181 180 31 13 235 96 35 187 205 90 126 178 149 177 173 108 109 215 217 218 80 38 247 179 235 92 108 118 171 56 217 83 94 246 181 105 77 109 99 67 155 217 234 174 183 187 107 140 111 122 155 59 209 82 30 52 146 225 156 227 44 201 129 13 132 200 193 63 46 160 0 49 208 97 13 68 16 196 11 130 240 233 80 191 185 219 199 86 54 184 223 57 235 50 199 187 219 130 214 110 62 228 205 202 145 147 220 19 249 255 72 174 201 79 206 102 127 199 219 222 82 110 114 187 1 46 236 141 15 59 213 5 23 119 203 121 253 242 125 47 249 222 243 230 249 176 125 46 243 123 172 252 228 41 63 186 210 85 78 229 165 207 220 219 26 247 56 199 201 156 100 203 26 157 227 41 167 177 153 157 78 15 174 167 124 148 35 175 241 200 209 141 242 174 123 93 205 95 159 51 193 51 254 242 168 131 124 215 96 15 120 95 211 30 118 173 95 61 235 93 167 241 149 71 126 118 41 227 29 149 116 143 185 222 227 126 15 7 131 128 0 1 248 71 10 22 192 0 58 116 96 13 88 32 0 197 247 241 14 192 235 61 229 49 223 58 141 255 110 244 228 78 57 233 249 8 251 213 223 137 119 204 235 253 242 161 119 49 231 65 47 250 192 159 190 234 126 215 187 229 67 223 250 174 99 253 242 50 71 125 216 251 254 122 179 239 62 239 100 102 125 156 147 14 252 207 251 126 248 192 95 253 241 103 74 124 219 147 30 247 130 223 124 234 129 175 249 188 243 254 245 180 87 253 224 175 222 251 93 51 95 219 155 151 125 255 231 179 255 253 172 55 223 248 228 31 127 248 153 222 125 156 107 63 248 203 87 127 241 149 159 254 230 227 189 248 179 159 190 252 239 143 255 241 235 223 254 189 71 127 255 151 124 151 119 123 225 23 125 203 119 127 2 88 123 230 55 83 239 32 9 82 208 72 255 48 3 11 32 2 7 208 1 68 208 1 146 135 3 96 240 14 1 56 125 252 183 128 8 232 123 161 103 118 6 152 119 8 72 126 252 39 115 215 119 122 42 216 126 225 39 130 229 183 126 216 71 123 160 215 127 194 55 131 197 231 130 54 104 118 206 103 121 7 248 129 191 247 122 49 151 116 39 104 122 53 56 132 167 87 132 38 248 124 65 152 132 239 183 132 184 151 125 78 136 130 66 24 133 178 55 133 37 40 131 251 215 123 36 120 131 231 151 127 12 72 131 60 72 123 62 104 132 85 136 132 101 136 133 63 199 122 52 40 134 200 215 128 66 88 130 186 183 133 196 135 134 64 104 133 80 184 131 136 182 15 97 80 0 45 240 15 255 192 0 10 160 3 84 128 129 223 176 129 148 23 125 47 72 132 90 255 40 135 122 184 134 124 200 130 190 23 131 172 215 130 186 199 134 148 104 134 214 119 137 152 40 125 74 152 133 150 216 128 118 104 131 71 152 123 160 168 137 76 200 137 96 104 131 169 151 134 168 152 128 48 216 137 164 232 137 84 152 135 106 152 137 147 184 138 116 216 138 174 24 134 254 55 134 147 248 133 103 72 139 159 40 139 142 56 138 150 248 133 102 120 118 93 112 140 141 40 133 202 232 131 195 232 138 197 232 137 167 248 140 39 72 15 239 96 4 135 151 120 1 240 2 47 224 120 143 183 6 138 120 15 87 32 140 43 72 140 91 120 134 191 152 15 93 240 140 36 24 143 158 72 143 204 104 143 239 136 143 239 248 78 93 96 140 174 120 15 242 216 139 0 9 143 1 249 142 35 247 140 4 105 139 54 168 143 6 153 144 204 248 139 168 84 144 210 71 143 18 121 124 8 233 144 13 185 144 207 184 145 5 153 145 161 71 145 31 185 145 180 7 146 217 119 145 7 233 138 12 233 145 24 169 146 35 41 146 35 121 131 149 136 119 243 112 7 163 240 8 54 153 11 67 255 176 11 187 144 11 143 176 146 44 25 146 240 184 144 62 249 147 39 137 146 29 73 148 9 105 146 8 153 146 72 25 145 73 9 148 15 73 148 76 201 146 244 160 7 114 144 1 12 32 136 1 80 0 9 64 7 213 240 120 137 56 121 232 232 145 21 105 134 21 105 146 191 72 146 31 73 150 71 137 148 47 121 145 28 25 148 47 201 150 114 185 150 42 169 150 117 105 144 243 176 151 79 57 151 119 233 146 118 201 146 83 233 150 128 249 140 42 208 151 129 169 146 135 57 148 249 176 151 124 137 152 240 248 152 144 137 150 191 56 15 147 153 145 246 16 9 58 185 153 156 169 153 163 32 145 75 89 144 146 121 153 63 121 152 131 105 131 142 57 154 164 201 146 139 137 151 148 217 144 139 153 151 174 24 155 171 169 152 54 24 155 241 8 14 241 16 6 35 36 136 45 64 8 0 112 129 136 184 129 96 48 150 168 217 146 121 249 154 168 233 152 141 217 5 169 57 15 5 233 156 210 73 144 150 9 157 73 105 153 241 136 157 206 25 146 150 9 148 206 57 154 207 217 5 135 255 25 158 166 185 157 141 89 157 213 137 152 221 73 145 123 105 15 213 105 152 205 217 152 174 248 158 249 160 2 227 73 143 214 9 157 228 25 148 250 73 158 224 121 159 230 57 159 233 121 157 218 201 151 214 105 159 42 208 157 238 9 160 6 106 152 246 73 160 245 73 123 9 74 157 250 25 154 221 89 160 26 185 151 93 176 160 146 73 159 8 218 157 231 233 152 226 73 157 230 105 15 151 153 147 197 192 10 42 170 162 157 0 3 48 16 11 187 48 4 255 41 157 249 249 157 6 26 122 177 89 158 26 250 148 124 153 157 249 249 142 13 90 159 15 42 143 254 201 160 53 234 152 57 90 164 207 216 159 243 160 2 75 106 163 78 250 158 24 42 161 84 250 164 72 234 156 19 26 153 52 10 164 21 90 159 87 0 6 16 150 120 255 80 66 52 64 4 124 240 120 145 23 4 114 192 13 64 32 162 229 105 165 123 25 165 9 170 160 231 73 123 77 26 167 207 169 161 9 234 164 42 224 158 205 201 164 122 218 164 226 233 158 251 25 143 241 216 167 119 154 168 110 74 144 135 255 106 15 28 170 168 110 42 168 136 58 15 143 58 167 74 58 169 246 96 169 52 234 156 246 176 169 148 186 161 137 106 169 151 74 168 153 58 170 237 41 170 129 202 167 164 58 167 70 186 164 127 186 157 62 186 161 217 185 164 168 10 157 123 58 168 167 138 167 169 41 158 146 186 170 186 250 170 204 153 154 33 90 168 134 218 167 132 26 169 124 74 161 163 176 11 171 224 162 206 250 172 188 176 147 158 218 169 126 90 161 121 106 171 140 58 168 199 138 172 184 74 169 172 122 173 188 170 170 185 170 168 149 122 173 169 218 173 165 74 174 166 234 173 120 74 163 157 74 157 195 106 171 189 58 174 150 74 168 54 122 174 42 0 4 96 224 0 9 32 136 255 112 105 7 16 5 81 208 1 88 80 2 19 183 15 108 42 175 226 202 174 234 218 159 149 90 171 181 26 174 232 250 173 237 169 161 237 249 157 238 185 173 10 59 177 186 74 169 22 251 169 21 171 177 27 139 169 20 235 177 14 139 177 38 59 173 160 10 174 183 74 178 29 107 175 23 27 178 31 203 173 46 219 176 24 255 139 178 48 187 174 233 90 175 31 219 169 50 11 168 52 235 171 54 27 179 30 155 179 121 42 177 53 203 179 208 169 153 177 240 172 207 202 10 49 74 161 178 122 175 248 42 180 74 123 179 63 123 175 229 250 156 181 58 178 86 235 152 57 235 179 69 59 179 38 27 180 244 154 167 93 235 181 103 91 177 39 155 181 64 16 7 99 144 1 52 224 175 143 68 5 242 208 1 29 176 105 157 22 17 109 202 178 243 202 176 87 155 178 68 155 177 100 155 177 199 234 168 142 26 170 104 123 173 132 59 167 217 240 168 217 160 179 37 27 182 56 91 184 148 122 184 136 11 185 30 235 184 151 171 184 92 203 184 157 203 185 136 235 185 169 217 181 134 171 185 153 155 168 145 155 185 91 91 186 160 59 186 187 218 178 95 203 182 88 59 182 128 106 184 96 155 185 143 139 186 172 171 186 151 107 15 57 137 1 1 224 180 46 218 10 58 249 11 70 39 185 47 219 179 149 123 187 157 219 158 186 235 158 187 43 189 212 91 189 69 58 189 214 123 189 217 59 147 219 219 189 163 187 187 185 255 11 187 200 250 184 218 235 177 224 203 182 244 192 6 5 16 14 130 24 81 12 144 129 29 16 5 84 192 105 108 0 6 244 0 4 162 219 187 177 219 164 228 155 184 231 123 190 191 155 184 137 107 178 167 235 189 163 59 192 164 26 192 6 44 192 9 92 180 189 11 192 189 139 192 33 203 186 11 140 187 4 172 192 223 59 192 10 252 188 9 76 193 25 140 185 7 220 192 5 76 193 243 0 193 169 43 193 14 236 193 254 171 193 17 44 194 24 76 194 38 28 194 108 59 194 42 92 194 3 124 7 58 9 10 196 11 3 1 128 1 187 32 11 196 144 188 21 204 193 19 172 194 169 123 190 119 48 196 40 76 195 70 108 195 32 204 192 51 252 194 77 124 190 43 252 196 22 220 193 70 92 195 224 171 2 87 112 15 14 64 0 254 186 2 11 176 2 107 16 191 29 48 191 157 134 15 244 0 189 89 172 196 46 220 198 112 28 189 153 107 1 217 155 196 214 75 199 21 140 199 216 107 15 116 236 196 243 96 1 123 140 199 126 12 200 119 252 184 129 252 193 122 124 200 136 255 92 189 130 28 195 142 74 200 115 252 192 143 252 193 225 11 197 23 28 199 152 156 13 137 92 200 246 64 190 187 139 199 85 92 201 87 92 196 152 156 197 154 201 10 59 12 3 189 16 163 69 16 196 156 12 190 224 75 200 211 235 196 160 60 201 157 252 201 138 60 199 217 144 203 136 203 203 142 250 184 128 188 203 172 91 203 191 252 200 187 236 201 44 172 203 123 220 203 204 28 201 172 59 189 194 236 204 114 124 203 124 60 15 64 80 7 83 192 89 130 200 0 132 32 8 2 59 176 61 160 3 105 188 198 197 44 205 205 76 205 209 140 184 181 12 205 134 124 204 157 252 206 229 172 206 20 204 206 183 44 204 134 220 203 190 12 207 232 236 206 247 252 203 154 236 207 248 156 207 244 188 203 185 160 153 38 16 9 18 176 201 254 156 206 182 60 205 246 204 207 250 188 203 144 44 207 207 140 207 245 124 207 236 12 200 10 125 209 2 109 209 199 140 209 248 172 209 29 13 208 31 253 206 25 173 201 12 205 199 243 108 209 185 176 12 188 208 0 169 28 173 208 64 12 208 255 64 161 35 189 207 246 28 209 40 29 204 55 253 208 57 125 210 60 221 211 237 252 211 33 141 210 37 173 204 41 77 204 58 125 209 38 93 212 65 125 204 123 153 190 132 96 3 254 74 0 10 48 176 120 219 1 7 64 3 5 16 6 239 208 183 253 124 203 34 253 209 238 108 206 62 13 210 254 60 214 100 173 201 79 61 210 35 144 212 243 252 214 187 252 214 195 204 186 114 253 207 212 188 208 31 157 200 119 13 200 114 61 2 143 160 147 38 48 216 203 80 216 163 128 189 125 45 204 163 192 3 140 205 216 60 25 200 137 61 215 101 173 206 111 125 215 217 96 217 151 189 214 128 189 209 107 141 210 155 141 216 156 189 214 193 140 217 233 28 217 12 61 2 132 108 218 146 45 218 254 76 215 115 252 214 124 29 205 58 217 11 169 204 12 203 48 0 173 236 9 206 25 219 171 77 214 22 16 218 190 61 217 143 12 219 10 173 218 194 236 218 142 138 218 153 45 209 172 157 215 149 221 217 191 253 184 114 157 185 202 77 215 119 77 218 145 173 203 136 139 218 173 93 210 215 255 125 204 109 29 185 224 0 2 98 32 166 238 208 112 101 140 183 107 112 0 8 176 0 97 160 7 109 10 222 60 253 215 208 61 223 199 108 220 154 12 219 35 128 223 109 253 219 250 253 220 162 109 223 123 237 223 52 105 1 255 61 215 143 48 218 9 46 209 7 222 219 3 126 223 190 77 224 217 160 147 206 208 180 48 208 10 197 96 216 203 253 209 6 93 216 30 254 225 54 105 224 249 109 217 164 205 214 16 62 224 6 126 7 120 237 224 12 62 226 123 221 224 18 45 226 6 110 217 191 205 219 123 125 217 11 206 214 48 206 214 254 237 226 242 29 221 37 30 221 44 94 227 35 160 226 126 125 204 60 176 12 24 144 202 198 187 12 196 64 211 240 136 227 193 252 219 119 96 227 224 189 225 253 29 224 252 173 229 50 190 223 40 174 209 59 94 227 26 109 229 204 141 218 97 94 227 38 190 187 176 157 177 80 176 1 14 224 0 89 176 1 27 208 6 116 76 228 62 30 227 209 45 228 150 237 158 215 44 5 218 60 129 21 72 4 3 43 176 116 64 3 238 237 9 123 255 25 228 2 254 227 69 190 211 70 205 227 99 62 215 61 46 210 93 78 227 104 174 231 147 190 211 91 190 203 33 62 233 94 254 227 145 126 217 153 14 230 149 158 13 143 160 218 154 41 188 78 203 10 133 93 234 145 240 225 38 176 162 42 106 12 38 144 208 155 62 224 168 45 230 103 158 231 163 237 223 157 238 233 150 206 235 146 110 224 9 222 224 191 14 236 199 14 236 166 110 230 62 126 234 87 206 233 9 46 230 202 190 236 201 78 228 133 221 10 169 236 12 203 0 196 53 205 199 252 44 226 204 205 233 128 29 237 210 62 237 120 30 234 185 190 217 149 94 236 46 126 234 224 254 232 87 94 237 186 126 231 144 158 230 233 190 211 242 126 204 238 110 15 134 176 1 25 160 0 102 32 6 47 80 0 11 144 1 112 14 5 70 62 226 209 254 223 228 126 224 126 170 190 100 224 175 20 70 3 135 136 183 124 80 232 238 125 15 148 186 217 227 94 238 229 206 241 236 206 220 190 110 224 51 62 242 254 109 230 13 143 242 228 238 241 53 46 239 229 206 238 51 190 242 118 255 30 243 44 207 241 37 63 227 166 238 242 210 254 8 133 205 9 196 219 195 203 240 216 33 206 2 131 237 243 196 203 9 188 16 244 196 78 242 251 125 242 75 111 230 233 142 218 58 47 230 11 95 236 55 223 244 48 191 223 50 175 235 86 223 244 37 31 242 83 223 242 38 95 242 128 173 238 100 127 234 97 255 219 11 191 238 210 254 234 198 144 202 172 62 4 185 237 237 208 206 242 59 239 223 200 110 247 105 111 1 107 207 247 91 239 241 125 111 147 127 255 242 120 239 247 79 127 245 82 207 244 10 79 236 102 78 2 246 176 1 5 207 0 18 246 15 1 96 3 43 32 6 10 64 8 83 144 5 80 32 11 35 238 244 86 63 242 204 62 15 191 112 4 253 234 175 12 80 0 58 32 232 241 123 241 20 24 6 26 207 199 106 95 248 33 110 246 77 95 246 238 174 238 184 15 245 76 111 147 182 143 242 101 79 246 196 142 246 131 127 247 36 111 248 28 223 241 118 47 246 199 95 251 197 142 251 68 14 252 185 111 230 22 208 210 197 144 202 189 112 208 191 190 11 177 255 158 202 25 30 9 82 190 247 9 206 2 141 45 3 229 207 3 179 32 254 180 95 236 207 79 252 203 207 252 185 238 252 49 63 238 197 79 245 235 255 244 184 47 248 239 63 251 205 15 16 143 44 140 16 56 130 224 8 9 38 66 52 128 209 208 33 140 6 33 76 64 35 6 45 159 189 129 5 7 142 176 176 209 130 198 142 143 56 102 28 145 237 145 72 129 29 13 146 20 233 145 35 65 148 4 59 186 140 233 50 99 76 153 42 95 214 92 185 19 231 201 153 65 133 126 84 25 178 224 209 142 24 29 136 73 176 224 69 139 127 81 165 206 96 240 98 193 148 13 80 236 145 40 250 17 169 65 148 92 237 81 88 64 67 234 133 23 4 74 172 233 208 150 79 160 25 11 194 196 153 103 15 168 76 176 48 79 158 204 73 243 32 81 11 163 80 2 13 76 88 48 225 194 122 83 30 22 172 56 101 224 198 123 247 90 96 1 180 50 226 81 163 100 30 238 200 120 243 228 194 143 52 127 222 155 11 179 230 147 185 150 25 123 248 48 150 137 93 155 121 44 147 214 218 97 255 175 101 203 186 204 243 218 249 228 232 156 145 85 27 48 144 123 89 113 227 95 12 255 54 8 115 102 102 189 148 37 63 71 141 50 180 245 208 212 97 58 15 13 28 251 97 129 151 65 67 222 62 30 58 223 233 226 65 123 222 101 162 151 237 134 198 76 212 40 98 17 227 233 242 232 175 115 247 156 119 185 232 230 98 18 8 188 232 134 26 74 180 193 36 123 236 188 4 71 136 76 65 196 12 204 78 61 145 14 122 132 132 108 128 88 0 0 58 68 80 64 10 6 108 144 74 42 63 104 96 224 67 7 54 208 130 4 174 58 171 78 47 153 186 152 130 128 0 164 202 129 16 6 14 136 34 10 183 2 105 97 129 49 226 184 207 65 212 246 211 143 64 190 30 236 207 66 7 127 147 12 172 197 152 243 175 73 4 247 130 50 74 0 167 100 236 73 197 76 91 79 74 38 183 180 82 175 7 75 91 166 24 248 96 96 197 0 30 238 24 37 48 19 76 136 5 62 78 36 146 229 23 140 202 132 208 201 71 18 50 128 21 64 3 13 116 7 3 244 220 83 204 71 188 252 255 50 203 48 249 228 139 204 212 32 148 238 73 67 33 68 20 75 239 14 186 244 74 240 76 139 100 25 103 210 124 109 25 98 136 185 199 158 108 100 42 109 207 73 173 228 172 187 0 53 117 180 194 189 192 11 79 65 42 19 221 243 86 74 211 195 21 188 74 21 188 148 87 62 213 176 192 158 124 28 32 128 142 3 116 72 32 3 5 16 24 113 68 50 16 48 227 170 44 132 176 32 27 18 102 77 233 140 177 22 152 97 196 184 68 208 177 131 29 39 177 225 199 49 46 58 67 82 10 115 21 44 88 96 31 177 37 82 75 127 171 206 55 70 81 202 204 94 4 29 203 183 202 90 11 190 87 215 129 207 11 86 178 97 15 203 230 56 78 108 11 0 131 66 239 8 108 23 3 208 132 175 24 3 134 48 21 85 124 133 213 87 48 140 89 73 83 190 216 4 179 69 229 81 238 109 89 180 131 249 253 87 96 145 9 118 84 229 85 19 254 151 216 36 11 126 249 101 151 239 93 217 222 150 89 94 121 225 90 115 33 110 78 248 164 49 64 150 138 186 200 104 160 194 86 62 255 26 105 62 109 37 24 103 4 173 206 236 85 198 254 245 250 95 172 171 212 186 222 131 57 139 183 222 162 19 60 84 44 67 216 32 196 92 42 122 88 65 129 12 46 17 113 218 168 194 177 193 67 108 161 56 131 4 53 0 70 144 132 17 218 152 226 146 105 1 32 4 129 30 120 68 55 138 11 216 117 183 230 174 249 180 37 104 162 127 30 90 180 204 102 1 24 232 204 14 86 80 81 134 71 134 121 104 209 55 135 185 115 211 13 46 154 236 145 103 49 250 107 179 67 31 165 117 215 73 127 89 193 108 236 25 194 0 12 2 104 109 77 221 62 146 128 184 136 109 235 165 184 138 242 201 136 247 222 133 46 253 17 30 120 145 134 33 219 90 33 46 228 212 65 159 119 115 193 102 161 126 232 177 231 173 125 247 219 105 23 223 118 219 57 63 58 118 125 137 190 58 119 246 227 111 95 253 247 217 183 250 17 140 49 35 77 107 26 66 125 46 242 17 249 93 79 88 187 179 215 230 142 102 63 220 133 45 127 69 171 30 236 44 197 62 8 186 239 107 240 163 160 45 206 23 255 186 6 146 15 131 233 195 31 7 173 230 65 151 193 175 112 246 0 2 32 64 16 173 30 172 129 10 88 96 0 33 8 1 128 112 240 77 42 1 104 65 2 20 64 136 41 100 1 10 90 232 3 23 184 240 8 53 156 65 113 47 112 199 136 2 64 128 23 240 129 8 60 226 195 142 46 64 134 2 80 64 5 38 113 224 235 230 119 65 219 93 207 119 250 219 220 44 28 56 191 175 141 130 5 31 100 159 26 205 23 194 163 133 145 5 106 220 95 9 253 215 50 20 58 176 116 105 92 227 27 207 168 59 58 210 145 141 114 28 197 29 186 0 13 140 97 128 105 173 224 152 1 116 145 143 84 153 224 79 116 10 1 47 126 17 61 91 244 209 118 115 244 163 30 119 39 201 247 192 199 25 188 104 83 159 4 105 62 77 182 140 5 169 92 25 39 205 55 139 85 190 146 130 171 100 101 209 92 249 74 56 2 114 142 153 185 165 249 78 41 75 88 198 210 151 94 11 166 48 201 184 187 65 242 50 123 171 232 4 157 136 83 42 72 166 166 150 43 67 165 44 137 9 203 98 255 178 32 129 191 123 196 52 145 185 198 76 174 178 142 18 52 33 30 205 232 201 171 169 209 155 213 204 164 53 139 198 206 53 210 82 155 173 139 223 10 187 192 143 48 28 65 1 58 208 81 20 122 64 3 2 100 224 5 101 208 225 180 76 244 130 2 100 32 136 27 160 192 6 64 112 132 167 76 107 29 5 72 0 29 218 34 185 14 4 128 12 10 96 3 111 206 144 204 64 210 49 156 115 220 230 47 125 9 191 62 230 178 141 187 20 105 38 213 56 82 91 186 147 154 216 108 103 44 191 233 57 216 173 147 166 241 92 227 77 219 57 204 119 210 212 30 191 64 36 113 120 97 212 137 64 67 106 145 48 192 246 30 210 0 134 20 131 23 53 168 200 60 220 212 75 14 98 19 155 74 224 5 6 24 194 61 135 176 130 23 187 80 234 71 116 10 78 158 194 15 150 170 60 171 25 211 234 83 113 98 53 127 125 52 38 5 191 233 214 96 170 149 164 113 205 69 91 107 218 83 243 73 210 100 173 137 234 84 63 102 210 172 210 181 174 215 68 107 94 225 58 199 197 6 181 255 177 54 69 37 91 213 233 215 183 86 54 156 151 101 65 95 101 122 215 191 234 85 149 86 43 220 177 238 129 131 48 76 225 5 144 219 81 15 14 0 128 132 2 96 29 5 157 86 11 68 192 128 75 16 64 1 47 184 4 0 46 192 55 27 108 232 0 232 154 220 26 254 177 142 23 100 193 170 48 147 44 94 41 187 214 205 202 179 175 157 165 229 116 169 187 74 235 94 87 187 177 148 192 26 187 171 221 236 174 146 7 223 5 175 60 105 57 11 242 90 55 188 231 37 111 121 205 75 203 241 186 87 158 134 36 70 17 116 49 188 177 14 160 84 120 26 5 47 120 17 11 168 66 21 34 48 120 158 1 170 234 166 190 142 34 23 237 85 175 120 253 59 167 175 6 184 19 171 224 197 157 16 44 223 247 98 56 195 241 213 112 134 27 156 97 243 162 215 188 237 237 112 134 73 220 97 174 122 53 192 1 134 65 44 158 169 84 83 150 248 189 18 56 177 140 71 220 221 238 126 24 196 180 164 49 118 171 187 99 121 246 152 5 53 182 113 144 191 139 227 85 126 55 190 40 255 224 194 29 84 176 4 28 20 65 159 8 56 215 26 232 32 136 75 72 65 1 227 162 237 180 2 224 7 50 184 163 70 58 164 1 33 86 16 185 182 116 128 15 7 136 74 2 64 96 136 17 216 2 5 69 230 241 145 77 188 99 33 155 56 207 51 166 49 145 135 220 103 63 3 122 207 55 22 52 158 105 172 4 37 72 146 23 132 50 65 142 127 76 203 71 228 227 146 69 160 116 165 15 44 201 98 172 56 192 173 160 176 46 14 75 103 73 26 67 211 1 54 198 14 60 198 95 58 39 217 206 51 30 49 11 56 156 100 67 11 58 208 178 238 238 171 135 236 234 246 126 87 199 64 22 178 4 22 13 224 81 131 194 105 178 176 143 26 103 45 235 91 131 152 214 56 62 118 161 123 252 97 91 19 218 217 72 86 54 173 255 124 235 93 199 186 199 40 40 9 16 150 32 135 34 128 160 0 230 98 75 7 122 192 135 187 45 64 12 191 237 114 187 71 228 195 18 16 33 205 29 152 68 10 162 34 130 35 180 33 206 115 86 53 178 123 204 236 65 243 88 219 128 190 54 255 192 15 109 130 69 39 252 168 15 136 68 192 235 140 236 72 180 71 225 59 32 212 23 60 208 108 130 211 248 1 6 152 248 196 121 240 113 25 68 219 144 20 169 116 17 162 214 167 29 12 163 21 163 110 128 84 135 48 0 133 80 156 56 13 119 120 146 35 193 139 97 128 130 229 177 160 56 52 96 92 243 63 251 27 201 128 70 52 199 21 110 130 134 15 188 207 5 15 122 196 17 222 113 37 208 124 207 138 166 120 213 23 142 241 165 255 155 5 8 23 53 203 197 26 137 79 183 215 3 27 55 122 213 13 192 112 172 255 123 232 203 166 49 213 59 222 232 100 235 89 232 183 166 241 23 220 46 115 180 215 248 226 105 103 118 157 87 105 139 110 127 27 7 65 88 0 3 136 64 5 116 201 144 18 12 88 64 1 86 144 67 119 183 59 45 116 192 168 154 253 16 149 50 20 96 3 217 200 36 193 171 61 247 190 179 224 226 174 6 249 120 63 206 131 144 75 32 190 171 87 61 15 202 110 117 216 27 192 226 181 86 189 222 153 218 113 216 83 28 238 61 230 1 194 115 255 47 243 134 27 93 26 129 10 48 40 164 170 4 218 187 222 191 85 167 56 47 150 161 95 104 224 9 78 59 96 5 203 123 65 168 223 235 254 244 169 87 254 162 171 94 125 150 99 224 247 187 167 241 222 121 95 123 9 92 124 239 123 183 123 246 205 190 125 187 63 32 209 139 150 125 250 251 108 254 244 251 222 253 218 199 255 235 153 191 3 250 179 63 26 187 189 241 155 189 189 187 57 149 219 185 158 251 185 242 107 191 253 3 62 1 188 63 65 219 62 211 43 191 9 180 63 255 251 191 163 26 47 246 203 64 153 251 130 8 172 59 19 208 192 255 171 56 11 28 192 16 68 63 252 83 65 64 27 47 251 251 59 53 176 135 43 40 4 28 192 1 54 152 2 51 224 39 116 169 134 53 232 1 4 120 129 12 32 128 28 136 60 218 10 7 138 234 39 116 161 132 64 24 179 127 72 128 35 128 2 46 152 51 252 115 193 21 164 66 64 83 191 22 44 63 10 68 63 26 163 194 211 67 189 152 219 1 99 96 133 149 91 49 64 169 58 242 107 61 212 51 61 174 170 186 255 97 0 20 157 51 195 82 35 20 1 172 128 7 196 62 103 0 54 77 43 134 74 162 192 59 44 37 55 121 128 29 216 158 81 107 133 97 168 186 49 220 52 177 162 67 243 203 64 66 28 53 86 8 1 73 204 61 54 57 193 62 179 66 9 212 56 3 64 68 86 232 133 21 3 133 72 100 180 7 76 65 30 104 67 138 123 67 86 136 195 0 99 133 57 172 68 213 179 67 69 98 185 86 24 37 169 187 185 7 68 62 12 164 62 150 107 185 29 160 42 93 8 140 244 251 130 178 67 197 50 12 176 94 96 133 67 100 196 45 116 193 46 212 194 47 228 62 64 227 184 88 44 68 105 216 1 243 179 197 253 195 197 211 211 191 49 44 70 168 58 67 254 35 69 75 12 65 15 248 184 20 44 199 211 147 128 92 48 22 67 224 6 48 192 1 73 120 33 17 160 131 114 243 167 53 112 156 27 130 60 34 28 145 22 152 27 196 115 139 30 208 199 127 176 1 2 56 130 13 128 3 242 106 70 114 188 66 115 52 63 115 84 72 116 60 61 15 184 56 137 20 192 219 11 1 255 240 107 128 94 112 134 16 200 67 51 148 196 70 91 70 9 248 2 94 152 68 50 108 128 88 16 191 76 211 180 88 224 72 164 27 73 73 244 198 21 155 67 103 80 197 143 36 37 1 52 128 16 40 6 155 52 70 137 48 54 15 160 56 61 92 49 62 220 73 153 132 170 89 148 136 3 12 129 156 219 69 167 92 177 164 52 64 145 188 196 6 44 201 16 192 0 79 52 67 142 28 134 94 72 202 73 196 0 65 89 185 102 8 129 168 187 70 157 148 196 147 76 201 29 96 134 81 107 201 29 8 201 47 136 201 93 228 67 87 116 189 16 232 186 81 187 190 151 28 187 16 120 68 77 211 203 79 35 73 73 124 67 111 4 197 16 216 1 143 108 128 80 228 5 169 11 65 23 172 192 244 227 129 41 60 52 185 100 57 186 204 201 187 220 197 94 80 202 189 179 202 140 220 200 142 28 202 72 148 136 169 132 200 47 148 76 138 252 56 44 148 128 72 248 66 36 144 0 91 80 131 108 80 1 110 144 131 26 100 131 5 72 0 62 232 129 52 139 2 58 160 1 51 144 130 255 23 160 132 125 28 17 216 90 11 116 41 129 30 40 7 190 185 0 199 153 2 7 56 132 13 16 2 234 116 2 235 180 78 56 160 78 237 220 78 237 132 3 39 16 47 212 156 200 1 84 77 213 59 64 242 148 76 157 76 204 6 224 180 73 76 192 0 227 57 178 52 79 244 28 204 140 28 205 146 28 74 168 138 133 62 92 30 140 220 197 209 116 134 163 68 201 29 8 1 149 201 191 142 220 69 67 140 207 143 211 201 149 252 75 166 204 74 4 61 196 178 12 202 100 148 196 6 213 180 57 156 68 13 221 79 249 164 72 241 100 205 5 149 68 172 212 180 86 16 63 13 141 5 158 115 6 78 240 58 14 189 184 179 124 195 85 60 204 251 108 203 253 212 201 140 116 80 107 180 63 133 112 134 8 85 208 101 194 79 168 226 132 67 36 54 89 24 133 222 59 76 174 204 203 10 189 202 77 19 63 198 236 208 242 252 208 214 148 204 40 253 208 146 188 209 21 219 204 16 168 195 3 149 69 9 61 189 244 212 67 246 28 76 111 132 207 90 132 210 240 148 210 243 156 72 255 54 149 79 216 84 131 110 171 205 40 3 129 23 88 1 42 152 34 30 233 1 34 16 129 2 200 77 129 140 60 221 234 39 117 72 1 24 160 45 27 88 129 4 120 1 5 88 0 70 109 84 71 125 84 72 101 84 7 72 145 33 40 71 25 136 132 72 152 200 75 197 84 54 221 84 15 216 84 65 116 207 6 232 132 72 36 171 93 88 133 140 236 132 78 40 181 188 195 84 193 236 79 168 234 132 235 11 129 33 136 132 16 128 80 85 85 85 73 148 0 65 84 209 92 253 85 248 76 213 95 237 4 62 28 130 95 116 53 91 13 1 0 27 86 85 189 204 143 83 2 166 44 198 92 53 68 12 104 5 208 172 86 235 3 192 76 229 207 195 172 76 150 220 208 13 13 201 144 203 84 79 229 212 78 189 57 180 148 48 85 141 133 67 52 129 1 128 134 33 232 207 105 28 214 89 133 63 207 252 213 122 61 85 92 205 213 93 125 128 171 100 86 85 21 82 90 5 74 161 4 88 98 229 76 25 208 73 182 4 216 82 35 43 93 48 210 179 196 203 81 85 213 80 220 5 255 98 163 184 21 13 88 39 253 84 78 37 215 142 245 0 115 61 215 76 101 42 38 157 216 95 21 216 33 48 210 144 43 88 128 117 86 190 20 85 82 13 129 93 32 134 83 21 86 99 64 216 113 213 212 143 245 216 145 5 89 157 229 212 114 5 217 248 146 0 46 200 134 121 200 135 82 176 77 220 100 0 65 24 174 106 136 2 197 107 138 2 160 1 38 116 55 17 16 129 20 96 135 11 168 218 46 11 0 175 245 90 74 160 1 177 165 129 50 248 90 179 53 219 112 104 1 4 0 0 2 72 40 33 24 192 145 149 1 54 197 212 76 109 83 76 93 180 125 45 53 253 146 133 16 88 216 92 237 5 10 131 63 17 29 74 248 212 175 26 128 213 21 235 4 73 148 1 138 219 215 92 197 128 60 100 134 140 29 86 158 51 0 104 56 86 198 221 73 147 197 215 85 232 197 92 136 132 204 237 133 150 197 0 78 40 181 85 144 68 191 149 48 129 229 212 81 200 134 124 80 8 97 237 4 168 18 63 250 40 149 253 194 147 1 248 220 77 181 56 186 109 83 144 69 87 255 245 220 52 142 156 217 82 57 220 234 3 210 78 224 4 142 140 4 53 146 1 104 189 74 194 61 93 195 69 92 147 149 196 231 69 222 85 149 217 34 101 1 25 40 201 11 141 213 152 221 129 17 248 220 231 13 80 253 12 129 95 192 19 9 24 208 97 64 222 80 212 175 82 89 52 111 76 80 164 11 217 137 116 213 223 229 221 222 157 200 235 29 53 85 109 88 169 49 208 11 197 215 74 234 147 143 107 92 117 213 91 98 224 219 76 227 92 82 178 223 223 5 89 185 189 223 253 157 219 72 248 130 186 5 93 159 149 91 25 144 129 238 130 211 121 152 7 112 176 205 212 122 1 17 232 1 52 67 23 187 121 1 41 16 3 50 40 78 24 142 225 46 115 135 26 18 2 212 187 96 252 165 91 87 237 221 7 88 5 21 251 85 99 88 5 253 210 133 85 40 6 122 13 92 76 237 225 85 240 219 128 229 72 143 33 6 227 101 214 88 160 48 133 48 98 128 101 5 69 114 6 175 186 226 85 24 2 254 42 197 104 5 88 129 173 129 220 229 129 10 88 5 103 184 98 255 210 45 74 253 98 74 131 101 134 85 64 187 81 232 130 1 88 5 92 224 4 46 94 6 147 179 221 138 248 5 93 144 5 171 100 204 47 24 100 87 37 100 76 221 1 31 198 99 102 197 128 85 32 222 82 137 215 234 123 227 70 62 214 184 236 219 97 85 222 46 46 94 140 148 98 10 227 5 84 221 220 191 93 133 85 248 227 26 128 201 16 104 5 128 77 208 1 40 227 43 53 88 70 246 226 34 45 73 0 5 88 192 13 1 79 179 93 68 86 228 80 142 99 67 118 85 68 70 98 186 213 223 67 70 85 131 5 220 81 46 210 145 60 93 84 102 86 85 46 227 30 198 0 102 13 226 33 46 226 35 150 61 252 181 195 10 40 100 109 222 230 94 14 230 223 13 102 208 53 71 22 176 128 16 46 133 125 24 188 220 212 129 200 225 131 182 56 0 42 104 10 51 131 4 25 158 103 122 78 129 23 112 0 36 64 189 94 198 224 11 230 103 87 181 81 102 5 92 94 128 87 98 254 213 72 172 95 37 54 134 104 110 228 62 134 228 133 86 136 85 136 5 90 86 36 255 92 160 102 128 101 100 89 64 230 101 98 5 73 38 171 34 77 86 137 30 86 70 42 93 10 163 8 98 56 93 131 13 226 151 204 5 64 46 104 145 150 134 81 190 93 159 75 95 89 56 85 103 224 200 61 224 102 87 245 100 210 205 99 153 214 201 144 102 214 80 76 223 26 72 86 133 30 86 149 222 47 135 70 234 56 70 99 93 62 89 103 88 133 26 248 5 86 118 233 97 101 228 93 208 133 220 133 214 59 166 229 85 88 134 100 120 216 244 92 102 145 174 104 248 141 62 34 198 5 46 222 129 125 70 100 103 128 233 168 219 103 76 221 209 167 206 85 76 158 234 220 69 87 142 190 232 73 206 107 79 222 107 206 181 220 165 206 85 86 104 228 103 101 170 211 93 5 107 214 105 28 222 97 127 110 236 126 222 225 75 125 205 89 136 65 17 126 199 27 84 128 19 230 145 29 81 135 3 248 65 41 32 0 168 160 103 210 166 173 11 152 129 219 186 4 132 234 83 213 187 84 126 54 100 37 216 103 157 20 93 102 29 75 140 137 232 95 77 202 76 173 228 163 6 214 255 211 37 170 63 30 108 138 13 1 197 246 133 222 62 89 102 136 133 138 182 104 102 141 106 89 24 0 30 248 2 183 46 102 95 216 1 63 190 131 101 58 238 92 101 134 86 40 236 85 72 134 82 73 134 85 144 6 131 45 108 19 144 204 92 176 233 142 38 134 100 200 232 140 94 101 236 22 229 94 104 134 70 254 130 216 190 239 65 86 2 3 64 99 178 246 237 239 102 111 89 184 131 26 24 111 131 109 133 138 190 147 220 69 100 237 238 132 41 94 133 95 8 107 89 136 4 171 38 85 81 70 100 218 22 234 85 152 8 89 168 129 222 27 239 254 38 236 12 191 220 59 88 223 85 184 240 220 54 107 170 62 85 220 6 88 250 158 89 17 135 238 37 54 88 250 222 1 134 211 111 81 206 195 98 200 112 251 38 228 168 139 58 226 54 113 131 14 113 93 224 112 19 24 239 186 166 216 12 15 235 81 80 61 79 6 114 85 109 241 253 14 234 78 152 197 85 144 204 72 80 2 37 238 133 234 222 113 12 230 242 11 142 109 47 39 100 46 31 228 48 183 134 45 216 86 255 209 177 0 32 208 3 57 144 132 41 184 161 64 88 131 73 224 145 53 56 128 73 192 71 6 248 211 210 46 206 0 240 27 17 0 0 51 88 109 5 32 0 51 0 0 65 32 0 7 24 178 72 176 6 50 111 244 252 126 244 38 7 216 6 231 239 92 141 5 250 46 20 18 111 134 150 149 106 37 7 32 151 142 133 28 95 5 89 240 240 43 110 201 70 38 112 80 72 117 85 239 4 56 30 130 92 40 114 52 150 242 105 133 233 1 160 234 26 80 2 95 144 134 15 39 213 88 208 114 7 103 111 170 94 5 77 103 88 195 6 217 31 151 244 234 246 227 220 205 5 102 103 118 9 71 213 103 232 220 43 191 242 70 71 52 81 14 233 85 79 245 168 246 69 89 96 246 34 95 240 39 111 100 104 40 210 253 134 102 102 45 6 95 168 129 246 94 229 154 173 244 28 247 133 83 181 98 78 22 117 93 24 241 103 191 240 85 111 112 93 176 245 34 127 134 148 254 234 246 174 1 68 222 235 108 167 112 19 0 240 59 96 246 253 198 119 194 230 4 70 22 101 81 246 133 255 98 48 245 29 248 242 71 31 100 79 182 226 130 215 247 33 231 1 21 103 248 117 21 229 125 207 93 15 128 117 108 247 111 74 95 215 102 240 133 66 137 110 233 246 5 86 200 113 217 3 115 139 119 116 50 7 115 156 231 114 252 190 121 107 192 84 30 96 1 99 153 135 82 120 7 23 202 0 6 96 135 3 224 3 118 142 2 34 232 1 65 48 3 129 226 218 61 47 40 63 176 1 50 160 10 49 80 212 2 40 128 23 48 3 6 16 1 65 160 132 73 192 2 58 88 1 205 83 3 214 252 242 216 222 3 249 171 246 216 254 246 130 87 85 95 247 5 186 15 98 186 175 176 26 40 114 93 207 85 85 159 98 94 8 235 50 254 2 227 142 121 186 175 110 93 216 111 130 199 87 75 135 247 34 88 6 95 136 133 184 159 123 186 215 248 130 15 98 176 70 230 29 128 249 130 183 214 6 31 226 231 30 2 95 96 6 87 174 114 190 180 104 85 79 245 78 136 106 47 30 128 26 248 102 76 21 101 194 223 1 43 7 243 252 86 130 129 47 111 150 39 6 173 206 5 255 144 189 118 80 16 106 150 7 124 189 111 133 141 239 220 113 87 176 244 94 133 49 124 119 195 167 123 178 254 253 92 141 118 88 174 129 151 23 125 102 118 6 95 128 229 92 224 1 249 142 123 142 31 133 126 47 112 152 70 112 222 191 96 81 126 254 92 149 6 209 247 238 208 239 133 94 128 105 82 2 89 68 171 118 231 143 123 80 80 125 170 86 61 68 182 254 78 0 8 80 2 59 181 114 230 107 200 47 89 185 100 40 241 229 139 21 171 78 157 64 73 172 216 203 33 70 99 24 13 200 170 193 227 203 142 85 24 88 173 90 21 73 201 3 37 95 86 126 81 162 82 101 74 150 45 85 178 116 217 242 203 131 61 52 87 90 251 18 201 131 132 89 103 178 229 115 36 7 68 6 6 255 82 80 41 49 41 74 135 53 68 68 0 8 240 239 42 214 172 90 183 114 197 26 142 76 11 26 34 196 16 80 80 160 192 11 51 12 0 232 160 115 128 10 145 53 29 58 28 32 2 160 128 3 89 44 60 124 177 182 167 229 131 192 15 110 166 252 59 196 97 171 138 20 39 255 130 34 185 42 164 67 3 8 21 134 88 213 75 32 197 197 204 86 13 209 117 71 66 36 30 135 49 250 90 86 131 216 225 103 140 51 19 140 181 121 25 49 212 190 158 37 150 184 184 113 201 98 189 88 213 158 104 59 86 73 93 186 6 240 224 37 114 181 239 94 156 48 28 36 54 60 87 46 227 189 20 87 108 229 107 71 46 30 171 28 198 202 60 16 183 129 95 3 36 48 68 169 100 79 229 98 142 61 70 138 84 24 240 3 95 210 122 223 110 133 107 149 44 241 217 191 24 88 85 204 246 64 4 57 52 128 120 18 84 118 25 102 190 109 214 153 71 30 68 50 26 70 166 17 99 194 42 198 44 86 145 68 36 133 215 17 15 253 205 151 224 98 36 153 0 141 46 30 25 247 31 114 18 21 195 153 103 218 249 50 157 109 138 137 8 13 135 42 245 199 12 117 18 89 231 139 51 17 77 212 203 138 190 24 48 10 15 31 189 135 82 101 198 40 246 29 43 66 38 211 17 127 171 204 151 99 99 165 37 83 226 71 219 25 67 18 125 0 54 185 3 100 66 78 182 255 144 135 23 173 178 139 131 123 164 116 222 76 46 193 196 38 74 95 168 121 164 96 129 157 87 152 18 214 40 225 141 27 30 160 96 193 60 64 44 145 69 6 43 252 227 71 10 68 148 176 40 22 229 116 245 40 164 135 182 128 128 8 9 188 160 0 166 10 92 178 150 8 130 208 225 86 93 81 64 5 85 15 116 172 96 70 6 32 180 145 141 26 91 68 114 2 74 120 214 89 153 67 188 80 136 98 130 140 173 184 204 147 191 196 38 222 46 179 129 168 163 67 178 12 48 196 73 145 228 50 64 46 53 36 83 68 17 196 36 115 32 102 223 237 118 221 47 201 64 3 13 133 205 180 50 44 99 189 140 4 34 102 207 112 86 96 67 190 116 183 26 40 223 26 179 10 175 88 174 36 229 183 228 94 196 11 15 180 146 43 144 125 171 12 32 47 78 129 85 246 12 43 195 248 82 3 179 30 204 25 216 30 232 173 226 99 181 19 53 201 43 113 39 61 80 82 119 213 10 212 204 153 208 48 75 161 106 26 183 235 144 103 160 169 180 108 13 8 69 75 140 44 244 138 60 255 178 47 178 200 235 16 140 236 198 82 172 120 60 152 192 221 203 247 162 43 223 203 48 203 194 97 36 106 86 182 174 198 247 146 134 81 8 67 24 139 44 96 115 66 32 95 189 26 239 40 243 35 31 209 252 50 112 248 117 49 0 72 14 53 99 38 174 1 10 180 235 147 201 196 54 156 206 52 155 187 203 40 18 68 93 231 154 57 53 108 231 194 119 222 73 55 223 113 110 225 6 11 92 216 163 66 34 32 16 82 198 85 229 176 147 2 59 225 68 250 248 63 100 32 0 64 2 101 21 160 192 11 4 112 74 3 22 159 30 16 234 168 80 69 213 3 21 34 16 80 192 20 108 108 50 143 45 18 108 225 82 157 21 8 182 131 193 181 27 76 59 43 65 219 55 204 0 191 234 66 217 195 47 23 188 12 148 106 42 33 65 126 177 17 243 203 47 203 248 82 12 215 23 13 163 203 47 191 255 110 220 48 172 100 44 208 110 210 184 44 114 193 188 36 147 112 146 65 75 79 253 120 45 209 110 225 203 24 12 179 203 42 195 96 176 189 198 198 12 99 2 186 179 74 41 255 189 211 163 12 49 183 96 16 19 180 103 220 98 0 119 216 207 197 134 1 61 145 249 140 67 149 201 29 248 134 65 188 26 200 41 37 203 202 150 242 146 97 128 91 64 80 100 197 184 197 46 10 36 131 16 220 130 25 65 115 31 66 42 182 190 19 14 163 51 163 144 193 6 59 168 49 86 128 176 100 39 217 195 6 49 16 180 130 13 97 0 188 168 221 14 120 64 189 167 69 34 96 15 144 29 9 101 88 173 15 134 80 133 195 48 225 203 158 209 66 241 108 208 96 24 232 133 51 30 147 61 221 225 98 24 167 249 213 199 12 198 10 102 220 130 23 9 115 15 223 210 168 70 217 169 49 48 108 172 147 18 78 16 9 22 216 34 27 64 72 196 20 196 0 185 61 254 195 116 102 185 156 25 18 32 2 4 208 64 7 116 249 92 15 136 32 170 69 206 37 10 68 160 194 26 248 128 128 4 40 96 1 169 3 132 35 230 49 130 189 156 160 141 180 187 133 49 50 134 197 218 209 175 90 189 40 99 245 140 149 11 19 220 226 22 65 35 35 194 62 130 146 61 240 160 255 6 249 73 101 46 12 86 74 80 196 34 22 167 224 221 147 152 85 3 234 237 162 149 182 51 166 24 95 214 138 86 14 128 67 27 60 69 208 98 225 140 91 164 208 72 21 104 229 46 27 51 12 94 180 146 25 177 96 159 198 98 209 69 85 90 76 118 180 59 69 44 220 103 204 16 192 132 97 178 219 32 20 25 88 70 89 188 16 37 19 104 101 213 48 211 138 95 18 136 56 95 16 160 200 96 233 79 193 212 242 150 213 203 229 41 242 137 153 6 102 135 118 24 80 168 64 104 200 11 253 132 13 157 194 67 101 61 105 167 28 145 21 196 23 3 168 152 96 72 184 81 145 17 80 23 210 98 30 245 106 240 195 86 134 192 4 124 187 69 66 123 118 139 16 136 144 132 180 17 222 48 54 100 2 131 25 163 94 189 248 37 54 205 151 211 84 50 235 11 173 132 136 193 62 154 11 133 9 230 141 107 60 162 83 219 120 68 53 238 105 11 30 168 163 10 216 80 0 119 240 241 113 148 99 0 2 214 32 136 18 172 129 10 112 137 11 31 58 32 186 81 169 21 11 111 255 17 4 2 24 80 201 41 128 32 12 133 136 67 28 230 145 13 91 120 96 11 70 108 234 3 146 16 212 106 137 243 135 15 101 97 15 247 227 16 37 98 198 125 53 200 78 157 218 179 44 102 229 130 132 224 212 103 44 152 152 16 143 200 224 130 206 169 65 21 91 201 139 195 196 84 100 198 168 97 214 190 176 29 198 10 132 140 20 131 236 3 44 171 76 160 206 175 96 217 180 31 241 234 201 70 14 96 179 25 200 92 39 4 0 155 196 87 82 19 164 215 228 224 203 112 139 46 18 54 131 133 236 89 152 100 63 202 172 31 94 86 159 142 133 210 6 111 145 49 78 112 87 32 226 228 157 51 111 49 140 108 238 19 188 114 83 2 9 179 89 48 142 228 98 23 177 114 168 80 197 151 173 108 201 98 165 191 13 65 112 3 179 3 80 42 243 186 217 169 34 121 153 41 139 72 96 179 187 222 45 227 45 110 218 190 22 14 192 35 172 4 37 255 18 166 166 168 86 224 141 20 134 106 133 233 150 97 55 86 216 194 41 121 0 159 36 32 184 58 20 0 113 93 133 20 255 59 30 185 134 181 170 85 116 115 121 177 90 137 112 0 58 8 66 4 12 120 65 6 232 74 129 66 56 34 14 64 80 129 38 93 231 13 243 4 38 191 16 128 192 42 144 43 50 247 109 176 186 152 161 161 1 124 82 197 234 26 152 153 214 100 99 75 120 224 32 110 66 179 103 195 160 105 141 78 246 47 181 17 99 101 177 41 38 107 197 137 11 114 210 174 185 61 187 207 239 114 97 177 123 90 84 100 190 189 98 47 124 251 12 3 119 247 106 196 177 103 5 120 123 139 94 144 113 92 17 253 229 42 76 144 223 216 106 55 104 211 100 150 123 25 29 79 3 239 142 205 184 184 5 68 65 193 9 43 47 204 110 237 137 4 12 241 201 231 136 14 149 56 38 184 244 72 53 246 193 101 96 137 155 131 102 237 122 103 150 224 86 140 154 19 190 141 37 78 42 92 96 142 98 128 154 191 27 154 44 72 104 232 198 32 154 141 60 3 223 45 194 99 106 154 113 226 101 31 196 223 0 146 88 107 38 227 130 202 164 54 64 123 166 172 230 72 124 212 154 69 94 244 59 59 255 92 167 252 110 24 195 178 235 112 134 209 157 238 7 152 96 11 18 56 3 20 8 209 130 71 249 33 7 1 184 55 228 2 160 142 167 192 88 173 29 72 235 139 29 57 227 26 91 106 1 32 96 195 24 244 160 135 37 24 2 200 217 24 1 10 36 224 13 111 28 17 2 29 182 120 133 33 32 234 81 251 86 22 187 230 115 248 246 176 131 75 135 146 21 220 109 182 166 53 221 202 246 42 225 200 24 175 0 76 72 56 232 90 171 185 153 30 81 2 150 151 69 61 50 255 106 228 217 100 162 44 64 147 221 88 52 251 228 252 58 134 175 35 97 0 14 36 249 210 172 53 134 49 122 1 164 75 43 89 211 40 55 6 46 114 107 196 8 180 178 23 88 247 22 159 211 137 139 8 28 57 37 190 192 69 54 197 25 130 63 87 32 201 135 29 53 214 89 237 145 236 238 230 101 155 190 5 108 43 240 242 144 22 24 229 69 23 103 1 15 248 128 163 18 125 212 106 47 80 21 189 78 107 191 183 203 32 221 86 130 219 11 31 78 92 132 160 120 71 92 5 46 38 109 96 255 86 224 130 23 170 124 236 126 193 110 96 177 227 151 155 110 14 251 165 31 79 120 154 83 94 63 27 231 115 199 63 110 116 206 243 226 1 130 14 101 43 119 241 209 243 234 253 226 46 215 251 145 47 254 128 224 163 155 248 189 207 248 239 127 143 124 16 75 128 5 27 40 128 31 186 18 0 2 188 64 30 110 185 0 228 252 160 14 128 179 21 198 107 80 199 1 116 0 128 178 56 128 13 20 168 3 62 122 172 2 32 216 35 27 92 224 66 196 253 26 176 139 35 223 226 184 192 192 201 243 255 221 100 12 1 23 38 207 63 119 209 94 12 56 93 47 248 31 0 158 220 165 93 153 242 85 192 217 57 67 225 29 224 179 149 76 172 8 134 18 212 82 51 81 143 112 200 2 46 56 195 1 114 130 218 25 11 127 220 130 1 118 32 25 25 128 125 81 29 46 52 67 7 122 32 43 32 221 125 240 2 46 40 7 0 218 7 46 48 11 15 20 89 211 121 221 165 109 151 254 117 209 241 157 93 119 28 96 1 242 66 46 224 68 146 57 96 7 214 28 113 140 92 12 54 255 195 255 29 96 2 2 218 2 54 96 44 60 97 254 197 29 148 192 20 51 176 130 12 2 32 208 229 194 6 249 31 43 168 224 1 210 94 22 222 95 44 52 195 3 158 28 237 129 77 145 141 220 49 44 30 0 22 96 1 249 19 78 136 224 26 158 92 44 180 82 160 141 32 0 98 97 17 118 19 23 118 224 23 114 19 254 29 224 254 245 159 21 178 97 231 13 32 7 209 33 241 12 20 240 189 156 239 169 219 241 1 159 37 98 156 203 45 96 37 166 68 36 72 128 3 92 194 163 36 192 2 0 64 7 76 66 9 124 3 59 64 78 56 28 192 191 149 0 31 240 193 36 124 223 41 174 192 141 225 5 27 72 2 32 188 3 55 196 1 144 233 213 8 192 31 11 184 65 38 204 223 36 30 89 18 252 94 18 164 32 34 250 150 231 13 0 46 20 3 9 222 66 3 74 157 211 173 32 6 224 66 172 40 35 4 112 29 26 174 96 1 174 66 206 224 156 50 22 134 104 64 7 116 240 0 51 30 32 25 233 94 113 56 157 28 230 95 56 82 221 49 64 68 23 10 255 33 46 80 157 1 132 80 146 229 33 39 180 33 15 144 99 43 29 195 55 229 35 51 172 160 173 225 194 4 36 99 67 160 93 7 22 160 1 180 205 6 126 83 7 114 30 241 72 192 200 13 218 7 45 226 201 101 227 183 5 95 50 114 221 45 204 15 51 220 35 119 209 224 71 25 213 45 168 7 46 196 35 119 125 160 15 29 21 231 25 67 7 102 99 15 69 2 230 205 143 111 113 36 214 193 141 61 9 154 73 190 164 51 224 130 211 88 19 55 153 208 10 250 214 4 136 212 1 162 36 216 180 18 75 186 164 7 222 135 177 192 160 118 53 99 231 149 72 52 146 32 61 90 99 214 237 94 57 113 227 38 110 98 50 130 164 203 37 99 89 66 64 90 158 229 88 38 65 90 202 206 9 192 65 6 80 2 87 4 0 0 36 197 1 200 69 20 240 193 26 68 223 85 4 192 58 208 155 91 168 131 58 208 1 22 32 128 25 20 192 2 148 159 37 232 1 61 168 0 144 181 95 48 178 128 4 72 128 27 108 193 9 116 82 253 181 229 38 158 218 158 157 100 62 158 255 2 85 14 64 49 209 228 12 186 96 49 184 134 104 174 227 1 98 221 42 232 93 90 50 29 46 156 130 55 73 99 83 14 101 98 125 1 108 174 101 217 193 9 78 108 229 12 166 94 190 28 85 80 122 32 1 109 32 111 4 32 231 113 36 231 117 222 46 24 20 16 178 35 81 22 33 163 165 96 102 137 224 41 112 228 201 97 221 14 148 29 83 10 225 41 240 66 24 18 164 49 28 34 0 62 195 41 60 86 211 93 39 107 254 33 229 153 0 111 158 93 230 93 103 80 154 225 169 69 99 115 118 32 214 41 65 180 205 230 110 204 38 71 170 221 0 220 167 26 54 195 108 30 164 23 158 2 154 40 26 4 0 104 18 62 131 66 98 201 240 65 64 8 100 39 66 114 103 133 214 103 231 13 104 62 178 228 41 232 39 46 232 94 133 198 224 19 210 224 41 156 194 218 145 38 40 53 37 122 70 163 107 204 166 238 21 85 197 185 229 89 174 37 141 146 37 90 242 38 141 150 229 141 146 37 89 86 24 15 28 194 11 116 197 93 50 192 1 136 202 139 77 194 1 88 255 197 63 148 129 2 204 27 164 56 74 14 136 65 6 56 64 22 0 194 18 92 193 143 181 223 251 177 0 101 122 128 27 120 195 9 204 73 253 185 101 18 44 36 154 154 169 236 68 231 84 158 194 14 60 167 122 90 40 0 114 222 41 244 66 44 180 40 105 249 163 7 138 38 126 185 165 160 249 103 26 234 41 43 132 39 61 229 90 141 226 168 203 185 212 253 33 34 229 21 147 127 106 39 39 48 131 104 34 40 39 96 221 164 2 96 26 194 212 105 36 3 243 12 77 133 250 227 173 237 194 57 85 91 26 226 130 47 236 130 156 130 104 119 234 151 31 246 96 104 166 38 214 125 102 15 158 137 8 170 97 49 156 130 67 56 36 163 190 32 154 202 103 157 102 106 170 110 167 54 134 225 22 174 166 84 162 167 163 62 195 139 58 232 156 102 29 12 206 103 51 160 40 76 229 97 180 206 217 129 38 161 8 46 131 120 252 79 239 85 40 164 86 42 46 236 128 183 182 102 136 26 192 164 14 234 108 30 171 130 194 148 178 74 106 225 249 210 125 236 66 137 228 194 126 49 255 39 160 102 35 46 112 155 13 78 168 90 218 168 142 162 37 50 230 104 90 154 233 4 164 233 153 30 236 153 166 105 240 249 64 6 204 0 87 32 64 6 136 193 1 124 67 232 64 69 9 172 226 63 216 64 1 16 192 227 204 0 234 176 1 32 112 195 21 168 128 100 218 66 196 129 233 22 136 105 39 97 88 191 30 217 66 30 236 66 186 28 7 64 0 72 208 230 201 161 103 10 137 234 41 136 30 27 158 66 40 73 42 229 253 139 185 82 234 28 174 166 209 250 236 55 5 171 30 158 104 44 49 104 203 30 42 89 26 85 66 97 234 137 158 40 172 234 233 79 237 236 201 221 234 137 146 33 35 162 168 44 156 148 177 52 152 9 40 45 39 112 109 213 166 102 214 226 199 16 216 236 10 222 170 1 148 93 5 156 130 109 182 230 41 16 76 164 86 109 30 250 82 218 102 22 174 234 194 208 130 99 213 14 46 210 90 106 133 154 230 21 14 46 68 156 232 200 5 229 224 166 102 180 18 165 219 230 223 160 86 173 87 210 212 50 208 109 60 222 170 18 244 135 213 130 255 168 130 38 4 117 150 29 47 76 46 4 158 130 162 249 44 185 86 237 226 134 103 157 30 224 227 150 234 228 226 44 176 140 28 207 6 32 210 2 109 8 32 140 140 170 229 88 250 46 91 34 163 143 18 172 91 166 169 193 22 44 241 194 172 91 86 128 23 76 65 2 60 236 2 152 129 58 244 91 192 245 0 86 0 192 2 152 88 87 208 128 193 213 193 143 233 21 252 73 0 152 122 67 38 76 88 135 149 37 242 22 111 18 112 192 4 176 111 193 114 128 251 78 64 112 17 152 156 182 32 225 162 83 254 181 194 150 36 173 104 114 4 176 193 20 164 170 230 108 58 97 44 244 2 122 210 6 136 26 192 159 197 109 252 66 64 3 195 111 193 202 47 252 152 173 129 234 70 102 33 174 254 181 168 105 242 173 230 178 97 139 134 208 149 40 21 15 60 8 170 222 174 113 158 104 212 249 173 155 254 47 254 34 162 8 242 199 252 14 67 11 175 160 223 222 66 230 98 48 119 221 170 5 31 3 63 13 13 0 211 48 208 210 173 246 24 240 137 154 128 44 220 173 75 222 255 41 210 114 237 73 208 45 59 210 173 212 157 168 191 28 49 2 103 112 118 170 230 41 112 4 245 84 40 207 210 41 235 10 97 228 142 137 12 236 38 4 40 193 108 234 233 119 125 4 18 99 42 122 134 18 19 43 129 19 3 160 164 142 205 218 50 171 253 18 238 26 234 175 246 88 234 87 18 17 78 248 233 3 67 240 251 70 48 251 194 175 251 38 111 251 182 47 4 35 108 250 34 108 18 200 206 33 20 0 25 108 69 25 44 0 1 244 128 58 176 88 35 205 5 246 253 131 59 20 192 243 118 133 13 16 2 8 108 130 10 60 156 45 32 129 12 124 65 38 140 169 38 190 108 194 166 41 251 30 172 32 39 114 4 79 128 9 136 6 10 115 23 144 176 174 63 142 97 213 42 176 116 73 151 213 234 233 156 70 235 137 222 99 21 66 4 15 63 22 78 196 111 252 18 178 34 183 111 112 161 170 178 174 96 11 86 177 28 103 177 214 114 66 43 160 103 114 254 35 122 174 48 243 48 203 255 76 96 190 196 113 7 182 66 229 130 208 216 250 80 7 235 95 180 242 255 194 46 148 157 210 221 173 49 219 239 20 39 243 10 26 195 137 166 168 205 21 115 83 30 243 63 219 146 46 148 110 221 206 33 54 136 38 183 121 156 217 122 32 215 154 81 51 237 128 233 202 99 139 18 15 176 181 204 221 202 96 43 72 42 210 206 97 68 15 145 131 49 240 66 234 108 49 36 241 60 139 70 133 38 180 60 158 232 45 52 180 47 60 52 22 155 64 137 236 50 39 244 242 137 106 79 25 162 173 48 55 216 16 116 46 73 67 243 45 15 50 4 23 181 45 15 242 80 23 178 82 39 242 44 27 50 4 48 172 161 104 69 25 160 133 32 80 193 38 251 155 90 85 131 60 4 2 86 36 64 1 216 0 145 78 65 27 204 195 35 164 114 202 186 114 198 153 233 82 27 245 82 39 178 6 112 192 91 199 245 252 30 11 235 242 134 75 238 6 48 255 51 127 14 77 202 12 193 16 160 140 12 251 172 78 203 225 110 160 237 153 220 47 225 54 45 4 40 50 251 198 53 4 59 54 4 63 64 36 84 104 118 182 130 101 179 224 56 247 194 101 111 246 79 225 255 130 46 172 194 71 123 115 21 122 52 138 14 192 149 204 43 26 169 105 36 212 128 12 59 225 73 182 66 21 250 243 63 55 147 13 46 11 104 187 182 101 179 2 122 238 110 61 227 242 23 208 107 78 199 194 226 85 225 56 239 0 176 181 237 71 211 90 21 6 179 48 53 75 71 4 246 22 230 113 97 87 109 8 44 67 51 1 155 12 235 134 55 195 182 110 51 46 239 126 212 137 122 211 201 17 154 75 91 247 48 195 148 122 108 55 59 35 243 238 126 212 99 217 82 125 213 53 209 89 182 114 143 17 117 35 132 103 140 52 99 195 28 105 225 54 59 163 39 103 156 35 122 107 118 125 143 51 17 126 84 71 132 183 112 211 26 121 159 130 59 167 84 93 111 246 101 227 53 50 163 168 238 141 109 13 184 135 162 181 239 91 79 128 6 64 54 92 135 56 252 118 248 135 135 120 137 191 245 136 143 120 135 15 178 99 151 184 34 64 128 23 28 65 2 56 78 86 144 1 85 19 193 85 207 5 31 136 14 31 88 239 85 216 64 41 214 37 1 100 65 54 156 129 4 100 255 2 206 1 159 34 168 56 7 240 130 137 163 120 92 67 185 136 131 248 91 7 151 211 68 219 137 242 176 150 111 249 224 86 30 74 221 129 71 224 196 201 228 199 6 113 185 153 35 93 67 79 48 117 239 194 16 196 232 16 12 223 147 171 56 100 159 56 7 152 192 23 12 128 185 34 118 120 211 55 159 183 66 52 28 3 131 156 194 153 51 174 44 104 75 126 243 64 111 55 246 91 43 1 194 128 54 98 243 48 103 184 247 57 127 65 15 81 246 49 108 185 113 191 249 250 78 0 155 203 66 230 62 58 103 188 179 46 32 183 160 11 186 150 31 132 123 39 75 46 144 249 108 14 250 169 235 107 115 127 148 163 155 249 169 142 66 202 64 7 179 192 212 253 118 30 239 250 117 45 213 192 42 12 250 169 74 186 170 231 71 13 88 250 165 155 186 178 31 195 218 73 139 44 28 208 79 66 246 3 84 250 153 155 81 155 83 58 176 39 187 182 31 195 176 191 183 45 213 64 171 155 249 14 124 55 176 133 128 171 139 251 45 145 147 161 198 57 92 211 121 187 83 57 147 71 255 185 156 79 57 157 163 56 7 40 2 46 59 128 2 112 85 86 184 3 166 232 128 85 35 105 90 85 131 139 137 10 17 248 229 63 148 5 88 107 69 0 40 192 6 112 129 220 100 220 210 25 178 33 195 123 187 79 121 4 68 192 135 107 128 198 187 59 205 174 186 120 44 3 178 39 251 153 56 141 180 144 200 71 181 249 240 157 169 157 131 252 47 212 0 43 149 250 165 151 70 140 34 248 206 145 153 182 132 240 71 28 25 187 111 60 189 203 245 111 87 37 46 156 250 167 47 120 159 251 179 113 211 182 243 104 57 175 239 220 161 239 2 108 130 248 180 255 75 182 39 187 115 14 179 36 86 192 111 151 136 165 79 49 216 24 128 34 211 172 210 155 187 160 151 6 129 168 210 95 195 247 210 67 186 100 140 45 183 202 206 106 223 18 104 221 194 182 251 130 9 192 141 123 31 139 170 83 125 215 155 70 71 176 199 46 4 189 44 168 249 49 68 186 164 227 4 155 247 147 165 223 135 45 29 126 220 194 28 200 143 207 46 192 32 151 159 137 179 24 122 131 33 186 3 203 255 123 4 212 249 157 115 189 150 175 29 150 236 130 100 243 61 201 75 70 131 165 204 73 252 118 51 237 66 215 247 16 101 73 128 104 124 84 137 16 254 150 159 234 115 138 109 71 32 75 180 95 188 198 139 120 136 255 190 189 115 60 7 100 252 198 31 63 199 35 255 241 3 63 138 227 59 19 200 155 86 184 195 11 20 192 10 244 192 85 187 24 140 65 5 198 54 169 20 136 192 86 52 252 6 120 192 17 77 128 34 148 191 242 39 255 249 111 124 199 159 127 199 175 191 111 175 122 6 142 237 208 236 92 182 144 72 156 157 115 212 183 111 5 60 136 204 0 196 175 100 196 6 38 75 6 77 151 46 89 178 106 12 200 213 80 86 66 129 191 20 58 252 82 129 131 134 8 17 52 116 212 216 113 163 199 143 26 57 152 136 84 67 214 65 131 208 146 133 56 197 170 85 76 153 173 98 157 58 213 144 199 144 1 186 4 38 155 152 80 214 128 26 67 148 84 128 144 113 35 71 143 19 118 229 138 168 114 37 80 135 60 34 61 56 202 97 194 3 157 186 14 18 35 70 113 255 0 15 19 188 50 114 48 96 130 199 128 148 44 11 82 12 58 228 75 209 72 67 100 77 140 170 107 170 85 3 88 31 204 141 216 147 224 47 193 21 7 8 133 171 228 193 132 10 74 182 174 52 88 177 6 143 47 16 12 64 96 188 83 96 224 138 67 34 77 134 0 97 23 93 158 5 17 226 29 26 73 201 213 172 115 119 242 148 138 217 224 96 195 145 76 64 152 128 84 164 6 8 95 114 13 16 8 141 32 194 1 67 30 36 49 16 250 111 108 183 195 37 83 94 236 84 240 239 100 155 121 236 122 160 132 71 111 160 65 213 38 247 185 60 23 103 196 183 71 230 54 127 30 36 72 165 235 203 163 23 169 72 209 4 31 25 68 252 179 111 63 28 129 2 8 14 116 136 210 1 192 0 163 248 47 192 14 248 72 225 190 252 94 184 224 190 251 204 56 100 11 68 32 128 207 61 145 216 243 72 169 145 50 60 143 151 190 134 128 168 176 238 18 26 49 168 240 16 179 10 41 142 176 74 34 180 194 36 26 81 170 240 134 160 42 146 222 66 44 140 135 230 12 104 175 255 66 243 32 232 75 173 209 116 217 229 148 102 102 154 169 152 83 76 8 235 139 185 80 130 145 187 240 172 187 141 3 14 66 194 176 163 231 130 252 169 68 241 12 216 139 164 9 46 131 114 184 93 192 84 138 41 157 90 155 174 162 92 58 51 42 137 10 106 140 136 196 194 114 249 2 197 48 77 248 66 205 132 124 242 73 161 46 81 171 141 188 227 116 250 11 168 211 80 196 106 207 173 234 28 238 34 42 57 168 128 207 39 183 155 10 207 20 53 40 137 49 136 22 250 148 206 54 135 216 133 208 140 120 236 232 172 67 235 36 234 75 14 118 235 45 212 133 20 5 115 130 61 181 171 243 180 218 170 108 84 173 94 69 124 52 188 184 42 32 75 163 13 215 227 40 195 43 211 43 246 84 100 53 52 86 61 248 22 145 34 129 0 26 12 64 140 5 68 56 96 64 2 3 172 166 131 106 254 27 183 132 64 26 156 65 10 26 26 180 47 129 67 188 169 96 2 69 122 60 239 194 101 67 114 54 169 144 44 155 235 161 26 252 245 87 168 211 170 50 138 188 124 51 52 224 255 1 62 251 13 241 95 170 30 48 10 2 19 30 216 229 139 138 41 126 248 76 131 239 77 234 217 143 176 146 243 195 134 106 56 229 152 94 142 140 169 151 105 134 9 235 129 202 24 123 40 96 69 43 72 2 55 131 177 228 203 73 134 195 139 132 84 220 98 216 8 231 15 103 51 51 69 160 87 27 2 102 127 197 179 13 55 137 145 22 89 102 154 63 138 97 83 132 21 110 232 70 165 7 173 114 36 179 148 168 17 106 241 198 194 77 3 67 147 206 21 204 98 39 237 235 236 200 30 48 161 74 141 249 250 58 151 179 3 222 153 212 180 53 222 56 232 134 121 190 13 232 125 133 110 248 97 178 191 220 5 236 128 57 51 65 239 181 249 133 90 103 206 72 133 216 231 98 53 182 220 89 102 241 189 252 216 143 144 221 91 3 69 208 152 226 133 117 214 77 64 91 110 1 28 119 245 2 253 3 176 4 58 172 181 111 29 5 8 152 253 190 21 166 240 34 94 204 55 190 87 61 207 45 255 153 227 124 59 198 10 225 137 35 89 126 121 139 37 214 123 239 207 205 122 96 255 226 38 155 199 152 233 178 38 248 146 50 172 184 230 136 234 8 136 143 254 115 224 53 80 76 226 138 125 57 198 152 147 99 138 230 24 164 83 67 30 97 196 149 152 28 250 232 49 63 191 2 19 238 191 24 123 190 243 8 242 254 151 183 202 137 111 83 107 43 160 18 24 7 184 124 205 205 98 12 196 200 212 52 18 190 8 184 202 106 204 195 147 4 179 39 55 94 84 160 122 131 26 86 209 244 149 190 138 97 140 88 6 35 32 197 80 195 64 7 142 79 124 70 51 192 255 154 164 4 37 56 47 127 48 140 129 14 87 184 11 252 249 14 125 55 196 83 3 15 8 193 255 17 81 133 31 52 161 6 1 72 68 159 233 112 135 249 218 97 20 147 50 69 24 26 15 138 81 156 162 20 127 86 182 67 20 128 12 235 2 192 2 0 112 128 73 240 193 117 29 32 66 15 232 208 70 58 28 96 13 3 154 196 1 112 247 15 17 72 33 7 235 202 65 6 224 48 33 69 28 139 138 156 171 34 23 99 104 197 65 86 49 6 222 219 30 247 90 69 30 43 237 77 139 85 255 44 11 89 182 231 189 20 234 143 144 136 212 34 21 35 105 72 163 153 37 6 207 136 70 44 220 199 10 101 172 98 0 145 104 28 253 188 247 196 44 254 108 139 23 92 100 35 57 192 139 232 69 49 129 123 185 141 45 95 121 193 77 241 2 2 73 72 194 37 97 152 203 69 154 10 145 198 75 32 253 190 164 75 18 198 144 99 231 227 30 149 200 183 169 89 186 178 152 231 163 100 14 3 41 190 29 122 143 145 140 76 224 45 97 153 204 11 242 194 153 190 227 24 253 208 233 187 110 82 137 152 217 52 102 101 154 73 73 164 244 50 150 157 140 165 55 185 24 73 126 194 114 159 86 212 64 59 38 192 4 66 204 64 140 25 96 0 21 8 212 208 14 244 64 7 12 32 192 11 40 154 0 29 244 135 15 61 8 71 131 106 39 134 117 93 64 1 76 56 74 177 172 120 197 100 142 207 159 250 12 100 73 189 185 67 119 118 211 144 249 44 167 39 91 186 73 150 194 116 139 50 45 100 64 13 169 129 99 60 195 100 39 139 197 51 158 177 184 123 202 19 159 156 156 41 255 79 115 90 82 128 102 51 169 196 83 41 241 234 17 213 141 76 85 147 54 141 233 62 51 132 83 155 94 117 169 84 172 170 50 77 10 86 104 254 179 172 255 60 105 57 179 218 82 179 62 21 165 91 189 41 87 9 25 87 126 190 212 171 79 125 107 77 55 82 213 168 178 21 172 54 245 200 124 0 176 46 4 44 128 1 61 136 163 128 136 64 132 18 36 128 16 11 200 2 5 234 64 1 7 20 128 1 81 88 131 58 252 144 208 48 222 39 0 9 200 130 9 38 192 207 192 106 181 169 155 172 199 88 35 224 87 167 58 213 175 171 141 237 14 101 75 91 218 174 214 182 184 141 65 109 119 219 219 221 234 182 170 192 5 238 111 99 59 92 217 22 119 182 199 197 69 52 140 228 62 102 68 35 4 163 2 19 114 115 123 220 219 38 247 184 212 237 109 118 133 139 93 238 94 183 186 223 197 109 107 193 187 93 238 6 183 188 193 61 239 111 211 75 220 236 18 183 189 231 85 111 119 195 251 222 247 194 215 188 226 189 47 111 231 107 95 255 250 150 191 238 181 238 119 217 255 75 223 252 250 215 186 183 197 111 128 229 235 222 234 58 24 190 27 89 68 6 60 218 32 26 44 64 12 84 32 130 183 30 74 5 0 20 32 3 27 48 68 54 70 64 98 21 108 32 3 102 136 2 103 215 69 6 204 174 139 6 71 240 130 34 0 234 90 220 18 152 193 230 77 175 113 215 75 96 223 234 24 194 12 238 241 125 127 172 222 235 26 185 199 187 141 198 40 221 23 11 101 220 68 149 26 209 110 127 7 76 100 27 179 215 193 83 22 112 109 125 124 229 238 26 121 193 91 190 177 149 167 8 230 42 107 185 193 93 46 51 150 207 140 230 33 39 184 200 108 230 114 130 133 172 95 56 123 25 185 84 118 179 157 121 27 231 47 111 185 192 119 94 51 125 53 128 9 7 40 96 163 247 105 193 2 204 160 198 2 173 129 14 8 32 64 6 178 160 133 108 100 3 5 153 70 1 23 70 128 98 6 208 161 28 235 250 135 24 10 96 131 6 229 160 0 62 248 163 130 195 156 230 55 215 86 0 245 136 117 172 227 251 106 220 10 96 214 178 214 53 173 91 109 235 255 170 226 250 215 187 22 118 174 99 0 236 92 11 224 24 209 128 137 251 154 17 13 94 240 224 1 59 8 180 125 143 173 235 95 243 90 182 213 142 245 173 183 93 236 109 107 219 186 192 214 181 183 87 11 238 109 195 250 219 178 6 247 123 197 61 107 99 11 155 187 235 206 174 188 143 251 238 92 199 187 218 214 190 118 185 213 125 111 126 103 123 216 231 109 119 189 245 29 112 127 215 59 221 249 158 119 194 9 126 112 115 23 60 219 233 46 56 189 1 14 240 123 187 212 160 101 56 117 1 8 16 5 34 180 206 177 31 158 130 16 70 128 2 22 120 192 13 91 216 130 7 60 176 105 10 208 39 209 167 206 64 97 19 116 137 67 148 182 216 2 151 248 196 245 125 238 123 227 218 222 16 47 247 206 127 14 116 138 15 253 223 240 54 186 195 225 61 239 93 187 187 30 216 96 46 41 79 214 139 104 224 162 6 102 250 237 209 213 157 244 162 3 221 224 58 247 186 181 151 222 117 133 35 124 236 223 54 122 191 3 142 239 180 15 29 236 107 63 123 196 223 222 111 99 199 255 189 225 66 31 182 187 185 62 112 126 171 61 238 120 159 59 210 123 78 118 185 11 62 239 231 78 60 223 251 78 116 178 91 28 238 85 157 112 125 238 147 3 5 40 160 4 107 120 93 7 168 208 1 51 80 90 11 35 56 185 55 78 80 1 211 35 98 15 91 144 0 10 80 76 249 117 17 64 1 166 190 143 8 50 96 141 118 228 220 237 133 7 124 172 83 33 128 27 236 186 31 218 238 253 13 102 29 252 97 247 190 237 11 47 247 240 131 255 123 223 203 154 248 199 127 190 239 131 174 248 122 244 30 249 199 30 254 240 5 160 140 104 4 245 72 177 104 182 73 118 180 117 1 244 254 252 184 230 62 243 157 79 252 234 111 127 253 242 142 63 184 231 95 252 234 139 189 231 245 183 255 244 221 127 255 220 159 223 249 216 47 0 111 64 255 210 47 253 164 143 0 179 79 216 82 161 253 202 110 240 186 78 247 224 238 238 236 45 240 228 46 248 168 47 249 234 161 249 232 173 31 54 176 241 150 143 248 208 15 251 168 15 253 228 110 215 224 143 255 150 110 0 235 1 15 255 48 97 10 46 1 119 214 225 5 20 64 7 24 42 64 32 234 5 66 140 11 80 192 13 190 32 29 8 38 94 38 32 9 16 193 27 36 128 5 178 96 1 90 64 212 202 64 10 86 96 227 124 64 3 240 0 1 13 112 233 4 176 10 73 176 31 214 47 11 59 48 11 177 48 21 58 144 250 112 173 3 191 112 11 207 175 249 184 208 247 184 144 0 125 111 254 176 111 13 5 96 12 131 143 249 230 48 215 184 240 11 211 239 14 117 109 26 162 129 25 220 167 21 88 225 234 134 0 110 244 141 14 205 80 253 192 176 255 228 80 253 0 112 13 137 175 1 225 176 12 71 48 4 183 176 12 19 113 17 241 240 13 113 109 18 247 143 248 226 16 19 185 143 0 155 79 11 125 175 17 217 80 251 128 142 12 239 208 13 61 113 21 239 48 20 73 113 254 88 17 0 41 81 21 103 49 15 103 13 253 100 145 1 41 177 11 101 237 2 221 111 12 13 145 0 7 16 21 23 145 1 111 32 14 101 113 0 131 145 1 65 113 248 160 15 14 211 176 14 33 113 21 187 112 23 255 139 79 17 145 241 6 220 207 21 215 208 23 213 111 13 239 208 12 229 48 13 210 160 30 152 160 0 242 200 62 46 224 5 10 128 6 84 7 64 112 208 1 160 224 28 88 64 19 16 33 29 228 5 15 196 135 5 227 35 9 50 193 13 208 193 1 74 103 93 194 129 162 58 235 62 8 224 16 172 36 13 0 48 21 1 16 27 33 145 22 169 49 25 83 145 22 43 242 34 183 144 12 47 114 35 57 146 11 49 178 35 65 242 35 237 48 14 67 146 36 53 178 3 151 140 234 194 111 201 40 102 2 98 64 36 71 242 36 191 208 36 63 210 34 107 210 38 75 82 38 101 242 38 119 146 39 117 210 39 103 82 40 113 210 38 45 50 35 141 146 38 131 210 14 145 146 23 131 50 21 54 178 39 149 50 11 153 146 23 163 82 41 159 18 35 81 82 42 177 178 42 129 242 42 141 50 38 191 50 25 135 82 44 27 1 15 208 128 62 64 203 12 246 131 91 8 228 0 16 64 1 178 0 29 36 192 13 246 32 29 146 224 143 234 161 28 27 161 17 26 146 106 134 208 13 255 180 32 3 18 64 212 16 64 10 16 234 62 0 32 3 76 32 6 210 128 40 173 210 41 71 18 50 125 146 43 137 114 44 201 114 43 193 146 50 119 18 50 151 108 217 78 198 24 162 97 24 4 81 3 124 209 35 51 243 50 57 115 51 181 82 44 155 82 53 87 51 41 81 211 53 127 50 50 89 211 41 53 243 53 107 51 54 91 211 50 103 147 54 119 243 54 83 147 54 183 210 43 131 211 55 115 82 42 195 210 39 159 224 9 198 176 47 35 128 9 20 96 118 66 171 0 86 192 140 6 100 13 14 96 5 10 96 3 206 65 2 238 113 66 90 171 30 248 114 11 249 82 0 98 64 17 32 224 4 60 64 8 50 64 93 26 4 164 110 231 62 108 32 213 90 171 17 138 82 56 37 51 57 43 147 56 147 179 57 251 225 63 59 144 26 148 147 50 113 115 56 149 242 63 247 176 24 252 208 234 162 97 84 56 192 52 79 147 55 251 83 42 255 51 64 251 97 64 9 148 51 13 84 63 253 179 3 47 52 67 53 148 39 57 20 57 43 244 67 63 50 68 69 84 50 255 73 244 36 77 20 64 81 244 55 143 19 63 101 52 63 101 210 66 97 244 35 255 147 26 116 244 63 39 211 70 79 244 35 235 1 45 17 224 62 24 128 62 204 8 64 214 160 7 0 224 16 232 209 3 78 160 18 38 64 202 210 128 60 63 178 28 235 33 2 20 33 29 50 65 2 178 64 1 62 107 246 50 64 227 238 227 18 28 160 52 239 243 69 211 84 64 71 242 9 50 180 35 125 116 68 107 180 69 17 20 72 215 52 71 51 116 71 63 180 71 139 179 64 199 82 37 253 176 24 160 75 235 198 241 26 120 116 77 85 65 69 63 178 80 17 53 81 185 176 80 155 147 81 27 181 3 11 53 79 155 115 79 109 179 79 105 84 83 129 20 68 217 20 79 45 212 80 49 180 31 84 161 82 95 52 84 7 148 84 23 85 82 167 82 78 91 149 11 111 148 11 83 20 64 63 85 79 79 117 84 169 225 26 74 213 82 109 53 85 169 65 87 1 244 9 84 117 85 49 181 31 250 50 6 124 64 1 76 199 142 200 72 117 214 128 10 40 161 93 156 128 46 79 32 31 255 53 160 216 170 52 71 139 117 16 176 84 17 42 33 19 156 224 8 42 108 62 11 64 92 255 97 5 22 0 13 240 160 17 6 225 80 113 213 87 127 149 57 11 117 36 133 181 31 114 213 82 77 53 88 45 20 85 95 21 67 225 53 95 63 116 95 41 145 94 115 181 10 242 53 82 9 118 96 169 161 10 30 117 84 19 118 97 159 96 14 84 193 51 25 52 16 77 32 2 140 210 97 11 117 14 252 85 94 103 117 84 251 1 27 34 181 57 125 85 100 251 85 21 74 150 100 73 245 94 119 181 99 219 244 99 177 33 99 33 22 87 159 224 96 21 86 99 113 53 102 55 246 26 174 33 98 59 176 96 175 225 103 171 32 104 133 54 88 133 246 97 107 246 97 117 150 103 153 179 97 81 150 26 78 54 67 171 160 103 157 22 106 235 149 102 29 213 102 101 118 103 231 192 96 177 54 105 113 150 107 119 246 106 39 53 107 149 54 108 121 22 81 85 214 84 129 181 101 247 21 102 169 150 84 235 53 103 193 54 88 151 22 82 175 65 21 230 118 107 235 54 108 105 182 108 255 233 54 87 211 32 2 14 161 90 150 181 140 6 164 7 168 96 5 94 96 3 78 46 19 162 52 10 235 161 27 92 182 31 164 118 104 171 128 26 186 1 75 39 0 17 52 161 61 137 180 65 24 96 1 192 52 0 8 193 7 100 109 71 145 246 102 247 150 117 185 54 100 243 86 111 151 182 117 175 1 27 252 54 118 207 54 108 231 128 118 109 87 88 95 119 103 23 213 119 197 246 110 243 246 97 105 22 120 25 53 20 248 112 37 105 130 21 154 55 80 121 97 80 119 20 102 105 54 100 143 87 108 85 161 122 241 22 100 79 246 119 13 54 123 79 22 100 173 23 111 243 150 122 97 151 123 17 21 102 197 247 124 213 55 111 97 119 108 167 23 123 205 183 125 187 55 126 119 118 125 237 55 120 11 245 122 59 48 125 203 215 126 231 215 126 165 247 122 191 23 128 241 118 102 235 119 124 241 246 119 83 149 125 21 56 128 241 183 126 253 55 129 97 215 128 237 183 129 41 152 129 221 151 81 211 247 130 23 24 103 41 88 130 239 183 130 29 152 97 231 183 120 53 152 128 255 73 56 131 233 247 131 187 119 103 251 178 29 14 129 1 254 225 194 18 160 243 168 128 14 34 170 73 191 115 15 130 201 62 27 97 64 177 65 128 7 56 111 7 84 0 34 32 9 42 193 13 188 212 29 26 164 12 8 97 134 239 163 93 66 32 13 198 129 123 197 214 130 67 184 128 227 23 118 67 214 20 200 1 129 211 183 118 171 0 133 229 87 133 91 24 139 33 184 139 85 193 20 168 225 139 59 248 129 73 184 110 241 54 120 189 152 26 192 184 31 150 76 143 247 88 143 111 97 8 12 32 6 8 16 143 243 183 110 97 247 105 175 1 140 107 225 141 225 120 132 65 120 129 235 152 141 239 56 145 9 217 130 115 53 111 201 97 144 195 120 103 107 119 145 41 217 129 15 25 147 39 89 148 25 121 133 211 152 142 175 216 142 49 153 148 209 88 127 213 120 147 35 89 149 61 217 144 47 25 147 135 152 118 71 25 151 115 89 151 53 121 119 201 24 130 55 121 147 159 192 20 86 185 146 91 249 148 215 184 141 99 121 149 181 216 128 53 87 17 8 23 1 10 32 1 255 122 160 7 14 160 4 24 64 1 54 192 9 60 224 113 147 160 29 34 160 28 185 23 102 135 153 153 73 181 17 234 33 61 17 1 92 163 248 62 72 77 89 255 161 5 50 0 13 210 192 87 105 151 118 59 249 158 119 249 140 139 121 152 191 88 21 106 1 27 200 1 145 49 57 111 219 248 105 199 89 160 237 25 27 190 88 160 245 217 160 177 247 26 252 25 160 27 154 160 35 154 100 17 154 151 23 58 161 97 86 163 201 161 30 246 112 143 143 97 7 120 1 122 73 243 252 240 185 163 17 57 127 191 184 22 16 25 165 25 90 165 29 250 162 35 26 140 87 154 28 90 154 28 76 193 166 113 90 167 101 250 160 105 26 123 125 26 162 253 57 160 175 1 167 107 250 119 113 245 165 85 153 28 2 122 169 27 218 169 159 58 166 77 65 162 139 58 148 11 122 166 137 186 161 255 217 170 43 250 161 49 218 170 141 122 160 33 122 103 149 90 170 155 58 167 223 248 168 201 58 87 35 186 170 41 26 140 45 250 167 181 26 145 17 153 171 225 26 171 231 186 166 27 186 174 255 215 154 131 205 154 28 244 58 168 241 182 17 4 64 17 124 128 16 8 65 12 218 8 1 176 217 1 180 128 5 234 50 60 199 211 87 209 122 160 227 250 171 105 154 26 198 161 31 168 38 29 78 160 61 223 211 62 202 128 140 238 99 29 82 77 3 113 149 163 97 26 173 169 154 162 125 119 181 153 58 170 95 219 20 20 217 165 133 26 172 249 90 160 123 218 181 105 26 152 83 186 181 223 24 147 23 218 182 115 154 160 39 250 178 243 90 21 110 32 4 76 64 85 2 229 45 118 129 3 96 50 163 123 91 161 89 123 182 7 154 184 135 217 184 141 251 183 177 59 173 105 187 184 25 218 186 99 27 170 195 91 187 107 155 187 201 187 188 243 249 188 123 123 184 213 251 182 211 186 189 129 59 187 227 123 188 49 153 170 247 123 163 221 123 170 133 187 169 229 187 187 247 155 191 191 91 182 209 27 191 215 91 191 9 188 190 193 27 190 3 60 191 233 155 193 251 219 190 17 28 194 21 92 194 39 220 192 223 27 192 183 123 190 249 155 189 9 28 104 5 64 3 118 225 16 255 164 128 0 204 64 1 8 193 1 132 0 5 184 217 42 104 76 0 128 24 123 5 60 196 25 156 170 3 183 30 38 32 29 60 224 16 20 160 137 19 50 89 241 163 93 192 249 146 35 58 187 27 124 193 113 220 181 39 92 201 57 92 188 49 156 201 9 60 195 233 155 194 29 188 195 109 124 201 77 161 10 154 59 52 0 70 105 30 52 144 197 154 160 57 56 20 28 154 22 110 122 152 35 218 182 217 60 205 21 249 202 15 252 193 61 124 192 167 188 201 169 156 191 239 58 185 35 154 22 206 252 172 239 251 194 63 220 206 191 216 201 93 187 205 107 155 22 254 220 194 233 252 198 153 188 202 249 27 206 55 252 191 201 1 24 128 225 169 43 253 208 107 33 209 47 61 211 55 189 211 169 90 211 213 156 211 253 252 205 169 186 212 77 33 209 227 28 202 129 65 151 23 189 182 175 161 27 142 24 2 172 65 8 14 225 16 54 0 14 78 78 19 246 0 94 172 53 13 22 214 165 13 93 190 221 28 212 105 193 182 77 33 248 34 128 115 135 96 10 202 181 5 164 0 116 255 105 248 8 208 0 136 149 186 207 93 155 213 245 252 170 145 156 22 250 60 167 55 29 213 67 93 145 81 157 165 53 189 22 198 125 151 73 125 191 141 221 219 201 221 212 53 61 20 78 61 213 207 221 216 209 93 222 203 189 222 93 59 213 89 93 145 177 225 204 171 160 30 120 193 4 66 99 46 124 168 103 234 225 6 16 89 221 223 189 207 141 125 205 17 189 216 207 253 220 81 29 211 201 33 20 22 62 220 27 94 220 77 29 223 39 254 139 19 29 227 217 61 222 53 253 222 111 218 220 237 221 20 66 193 182 85 30 213 67 193 20 44 61 209 53 253 139 249 253 229 93 158 210 213 28 24 92 62 228 225 157 221 105 161 226 223 216 210 169 156 230 115 62 229 21 121 231 53 190 219 129 97 229 21 249 218 115 254 219 215 157 231 73 94 233 75 158 222 61 158 28 64 126 226 89 94 229 169 254 228 245 189 232 225 124 232 117 190 22 142 126 228 147 158 228 69 125 222 187 254 227 191 62 229 159 158 225 203 222 231 73 158 234 187 189 219 209 222 20 84 161 9 26 1 61 255 183 212 3 36 64 2 184 217 46 33 192 90 103 28 140 115 154 232 85 94 235 225 221 237 51 158 170 169 225 136 255 113 62 156 16 63 40 42 209 90 128 16 22 225 215 89 154 227 77 62 223 215 94 229 229 254 220 115 254 226 23 95 228 123 126 234 233 62 244 47 62 20 126 126 245 185 190 243 175 158 237 47 62 229 125 190 222 23 254 21 108 31 247 23 254 247 66 0 157 122 95 218 118 235 103 201 222 244 229 190 222 69 127 245 133 95 234 137 63 245 47 94 244 73 63 234 205 158 238 139 95 245 141 223 249 145 62 238 163 127 249 143 95 245 171 31 238 79 191 219 179 223 248 71 223 221 51 190 251 149 191 22 140 63 252 197 31 220 75 63 249 177 255 252 167 95 245 85 223 245 173 30 235 141 94 231 105 255 220 227 221 238 57 159 254 1 194 84 168 90 181 4 134 18 72 11 24 45 130 161 104 133 34 103 138 150 169 137 11 29 86 76 88 139 150 198 133 181 128 133 250 232 241 163 72 141 228 10 70 52 85 50 35 193 137 228 36 14 44 216 144 96 200 80 51 255 77 141 19 16 97 66 133 61 39 246 236 169 0 65 81 132 122 253 168 169 138 8 44 227 70 153 34 103 142 116 248 240 218 143 70 49 20 165 203 116 168 0 153 127 92 17 72 153 193 213 221 11 31 2 198 9 116 250 81 99 218 146 20 81 138 76 11 21 106 72 96 164 30 158 52 245 234 45 176 164 16 105 38 172 187 183 86 95 133 116 237 210 202 251 17 226 97 97 136 19 71 124 37 204 48 228 196 136 201 33 102 28 120 240 223 80 216 84 221 168 39 224 134 128 126 55 250 245 171 242 240 114 99 199 139 69 90 254 136 153 239 217 205 192 86 135 2 156 26 246 43 143 184 107 223 206 60 187 240 222 188 46 246 202 246 43 156 183 242 80 152 155 255 102 254 60 114 116 221 192 34 59 23 150 217 118 93 82 30 165 11 235 61 157 57 169 235 203 189 143 39 31 74 59 243 221 214 61 66 102 207 220 61 118 190 187 137 135 255 46 44 50 119 232 226 243 211 180 15 204 73 25 69 180 145 65 234 233 215 29 108 231 253 247 214 109 252 237 103 158 127 181 29 40 18 255 132 10 74 248 223 43 219 37 104 202 7 85 220 80 149 34 34 42 162 65 12 105 220 240 4 54 18 177 117 82 74 28 177 228 210 74 31 53 102 83 63 49 112 144 14 15 83 16 112 65 88 10 92 18 14 87 9 28 18 65 63 14 73 247 209 134 252 225 23 153 71 192 76 227 160 147 233 229 245 100 96 20 86 24 159 146 17 54 249 138 134 52 33 201 93 113 232 65 166 208 97 211 144 114 101 146 89 166 215 96 93 72 58 136 93 93 121 89 216 31 151 94 86 87 33 48 98 222 183 224 132 128 129 169 39 158 86 130 215 37 77 211 248 246 150 155 137 174 57 39 77 142 22 90 229 123 120 98 151 30 118 26 189 114 102 161 139 190 233 102 97 115 166 9 167 167 183 189 82 156 123 109 242 167 102 156 108 162 233 194 152 150 154 137 230 157 143 82 121 40 100 132 210 90 219 119 190 185 224 23 123 213 221 106 104 174 220 129 218 169 156 163 182 186 23 148 220 37 229 37 157 76 102 248 103 158 123 10 199 32 171 216 53 39 208 15 253 52 82 79 12 17 12 85 154 255 42 45 129 52 107 176 182 250 233 168 123 184 138 195 89 26 49 76 128 8 28 82 48 16 0 87 0 100 144 130 189 14 180 83 197 54 143 101 170 33 154 167 74 55 172 134 46 200 170 174 185 186 118 73 202 193 164 0 27 233 194 6 7 12 113 173 18 55 76 113 197 194 250 233 240 195 15 167 59 165 194 5 99 236 177 199 32 67 106 241 200 29 151 156 236 52 196 50 122 236 181 254 237 166 241 185 12 175 236 177 113 211 184 92 243 197 56 63 156 236 111 26 182 28 240 201 184 218 60 113 201 64 87 249 36 207 203 238 28 48 181 9 71 172 114 198 75 31 218 115 213 74 63 77 87 214 28 91 205 181 201 82 162 188 241 205 96 39 219 245 199 99 31 189 176 207 25 127 100 202 15 227 60 97 90 21 227 168 24 81 185 84 127 189 53 218 38 155 82 133 0 138 36 129 200 6 25 136 192 21 25 5 36 192 213 10 11 96 210 15 54 140 156 93 229 214 31 39 9 75 230 128 105 94 177 62 211 120 94 23 232 136 113 78 138 232 68 3 253 240 43 193 124 190 186 255 178 166 151 30 58 233 176 203 222 122 111 180 43 91 27 119 104 190 94 123 239 183 222 238 251 236 192 187 206 58 238 67 239 30 252 240 202 159 174 59 154 193 196 46 124 244 203 67 63 125 245 210 91 207 124 215 170 147 98 61 239 215 227 230 253 232 224 99 31 126 242 228 83 127 190 241 165 103 74 215 243 170 107 14 140 62 164 76 3 11 241 165 135 242 198 27 166 216 97 199 73 18 1 3 139 242 101 14 22 37 91 221 234 96 65 23 2 198 111 126 245 123 131 56 250 81 15 69 84 224 4 76 200 0 13 184 194 128 5 172 227 31 34 112 0 38 158 64 139 55 152 111 124 181 123 152 230 86 247 164 239 1 77 128 1 252 195 43 244 193 194 248 177 80 31 46 180 223 8 81 120 166 238 13 240 15 31 211 7 1 51 71 63 2 122 204 128 244 155 97 13 149 231 67 33 62 140 136 8 228 30 119 228 71 63 250 5 3 22 175 32 160 17 49 21 64 246 145 194 125 83 68 160 248 174 88 68 36 214 79 31 171 219 98 12 171 168 196 45 78 227 128 62 252 156 255 22 185 152 57 26 98 49 137 105 100 98 27 61 71 198 51 5 35 137 5 92 99 24 221 120 70 4 194 80 116 132 44 158 25 173 200 189 31 42 177 48 62 76 36 253 208 247 200 66 26 50 24 217 75 221 243 234 119 195 67 229 80 146 1 220 225 36 1 168 68 230 152 131 141 99 252 28 21 97 184 57 61 238 108 139 38 36 32 14 185 135 71 97 152 3 27 159 145 224 22 14 65 136 21 252 35 5 132 96 192 63 18 144 133 118 164 1 27 194 240 99 39 1 121 202 55 106 18 150 97 172 163 49 239 104 202 221 128 177 147 245 179 98 166 60 23 196 61 94 115 103 153 219 99 32 57 9 11 111 78 178 145 48 220 102 54 203 9 78 113 150 115 119 220 12 39 58 215 249 194 118 170 115 144 111 116 94 28 143 152 196 72 234 48 115 127 240 163 30 91 169 198 20 102 177 147 233 124 39 12 51 89 80 60 14 82 155 104 106 159 61 91 56 71 32 90 49 139 13 101 229 251 32 218 76 125 194 19 155 221 52 40 25 225 233 208 139 214 166 137 9 253 220 66 233 255 201 206 115 42 244 160 131 44 105 75 189 137 210 120 170 212 164 44 109 169 231 186 40 199 140 78 20 134 98 116 35 48 158 39 63 205 145 142 46 233 124 195 43 176 241 4 60 88 133 7 135 200 64 2 252 32 6 5 32 160 0 62 16 38 54 66 97 199 82 250 80 154 162 131 105 75 199 56 198 152 114 20 22 254 40 43 56 253 113 214 114 154 213 115 104 157 6 90 211 170 86 122 190 53 174 131 92 171 93 217 218 210 178 190 245 173 110 205 107 91 231 170 143 181 158 233 174 120 44 227 30 173 88 215 189 162 179 175 137 149 171 95 91 202 88 24 174 213 177 141 181 105 100 3 11 88 24 138 2 175 149 109 233 102 47 59 217 65 110 150 179 146 205 172 62 70 75 90 204 218 244 180 144 77 105 71 87 250 209 213 130 149 166 116 45 237 106 81 171 218 192 190 19 180 166 197 237 95 31 107 83 223 214 54 183 158 205 43 101 109 27 92 227 218 246 183 157 21 173 114 117 75 88 154 70 183 174 169 53 171 81 183 49 8 165 166 67 19 66 200 128 2 20 144 1 255 66 28 194 4 245 120 2 35 108 26 90 205 62 87 189 212 149 172 110 61 90 89 190 182 119 157 122 221 236 116 221 11 89 192 166 151 181 243 69 235 92 105 155 88 197 174 212 180 188 189 237 115 253 75 207 213 170 182 192 201 237 239 123 97 91 89 6 23 215 193 255 85 240 100 37 236 92 10 39 120 181 161 197 48 123 241 11 221 13 163 87 191 2 150 174 130 61 204 95 16 35 24 190 200 45 109 137 231 107 89 18 27 88 195 234 213 43 126 63 55 215 21 179 22 197 194 117 239 92 237 251 98 16 15 210 129 219 104 68 4 172 114 2 39 108 224 16 135 96 130 53 218 129 135 31 136 67 27 7 126 48 128 205 42 88 25 55 88 197 15 182 175 139 5 12 100 84 220 247 193 22 246 239 94 193 76 88 81 248 35 204 108 78 243 154 171 219 219 42 255 248 189 54 230 177 156 157 123 230 191 162 25 200 248 85 179 125 219 236 230 63 179 182 172 168 80 179 141 223 235 231 192 242 25 209 111 110 244 105 1 237 15 183 74 186 120 129 86 52 162 55 43 10 76 99 255 182 208 122 117 235 158 45 253 99 76 87 218 209 232 28 179 105 31 107 215 81 123 89 173 159 38 53 94 51 125 218 70 155 185 180 98 86 181 149 209 10 105 79 231 186 172 134 118 239 27 180 241 10 114 52 66 187 233 56 65 38 50 177 135 36 20 137 17 249 123 175 137 21 44 89 65 207 181 214 102 133 181 159 109 108 237 53 99 123 211 134 142 52 175 15 253 214 68 187 154 218 184 230 118 167 191 45 107 78 151 85 215 232 238 115 163 87 173 15 114 199 186 213 240 150 119 183 221 45 237 65 218 91 175 244 126 240 190 249 141 111 80 235 27 224 221 246 71 173 167 113 240 90 7 124 220 4 231 119 161 205 189 110 116 139 219 224 221 102 183 182 123 205 232 124 195 240 223 132 198 180 168 239 13 235 142 159 91 219 23 7 183 102 223 125 235 121 219 24 224 25 23 248 198 27 174 215 135 219 58 179 28 167 56 102 103 62 112 108 59 28 200 222 222 25 91 119 246 6 43 188 162 200 120 208 64 18 210 1 129 36 36 65 3 105 152 3 179 115 94 237 157 223 220 223 255 48 239 248 205 61 189 114 133 183 156 225 58 143 57 207 63 129 243 151 119 221 234 122 5 123 191 167 93 117 155 151 221 224 235 22 179 40 166 161 140 93 147 252 218 108 151 187 161 233 238 246 176 199 59 237 50 47 43 216 107 141 140 178 34 3 236 132 215 123 205 251 238 143 191 155 60 214 26 223 251 216 213 238 119 182 47 94 220 245 230 251 215 37 159 238 138 75 156 228 121 23 252 39 18 190 102 184 7 58 240 160 127 187 50 18 143 122 195 243 221 242 55 87 60 186 207 14 117 92 75 125 237 98 134 225 43 24 241 132 52 224 33 2 28 136 0 30 78 132 191 201 163 28 237 100 143 60 181 13 173 110 84 160 66 31 133 215 171 43 32 125 122 127 12 30 21 102 135 189 216 163 238 245 214 99 30 249 200 95 254 39 160 47 252 63 147 126 244 205 47 171 43 106 93 126 127 156 127 230 227 79 255 250 201 239 121 234 19 218 239 224 15 255 224 81 95 125 245 215 186 254 248 231 247 251 69 129 126 162 224 126 251 167 117 225 54 124 177 167 114 144 135 122 199 39 255 114 6 231 125 0 72 127 159 23 129 125 167 110 254 16 125 137 199 127 223 55 128 188 38 102 165 183 129 107 214 129 240 247 9 237 23 128 159 103 104 211 103 118 33 136 129 38 216 127 206 71 128 108 87 128 39 39 126 31 8 129 33 248 124 162 240 6 250 176 27 228 240 4 141 208 8 253 48 8 78 247 107 137 71 131 33 40 102 174 192 129 48 168 126 153 118 122 0 168 12 69 168 132 55 216 132 168 240 132 170 54 120 25 40 128 159 160 133 90 152 122 230 247 130 54 200 132 32 88 133 80 8 134 162 48 133 99 40 10 131 247 9 143 198 120 122 69 130 22 232 10 100 200 118 82 40 134 132 39 128 93 168 127 73 88 134 103 104 135 102 135 111 247 55 130 24 8 113 22 88 118 89 184 133 92 152 127 255 103 132 75 104 134 117 184 130 140 40 10 55 24 137 114 120 132 97 232 132 125 152 135 43 200 105 133 151 136 95 56 135 150 72 133 152 120 126 148 200 136 124 248 136 163 136 133 135 184 133 146 24 135 114 88 131 159 216 136 151 120 138 212 39 128 37 184 255 137 137 199 138 90 104 139 106 70 120 207 167 134 41 102 84 226 192 8 219 64 11 140 32 14 111 224 15 218 160 138 90 24 135 120 168 136 81 8 138 104 8 118 168 248 121 168 48 120 106 216 130 94 168 135 176 104 138 26 168 127 26 168 124 215 136 136 164 72 135 178 232 141 212 24 142 35 56 142 228 24 141 162 72 139 213 40 142 132 183 133 206 232 137 149 24 139 161 56 139 224 104 141 234 40 143 243 216 137 219 104 143 221 120 135 232 184 143 216 184 140 244 8 144 165 232 136 231 248 142 233 104 144 7 249 143 32 8 141 247 40 141 223 88 139 5 185 142 170 136 144 18 185 135 11 57 144 13 137 145 253 8 145 254 87 143 10 41 139 108 39 129 202 16 135 2 152 134 90 8 136 36 153 144 229 136 143 12 169 143 241 72 132 135 104 93 254 208 108 201 8 135 26 120 135 17 89 131 90 216 146 186 136 12 185 248 121 159 96 148 212 215 140 64 185 136 50 89 145 4 105 147 203 184 133 67 249 121 69 153 148 72 137 148 153 54 137 71 25 135 75 9 147 28 201 255 141 30 57 141 32 25 149 82 249 125 106 88 149 174 160 150 90 217 138 74 137 149 236 72 145 238 88 147 252 120 147 203 72 149 214 168 150 94 233 130 49 217 142 249 120 145 101 41 149 119 105 149 93 201 150 186 136 149 173 8 151 2 57 150 115 249 144 129 137 150 120 169 150 88 185 145 175 24 144 98 105 145 240 72 151 102 121 150 204 88 146 78 41 151 127 153 153 102 41 152 121 121 152 87 121 109 56 201 148 19 169 146 173 120 149 93 41 149 173 249 150 170 184 150 153 214 150 135 249 154 122 169 141 96 89 153 230 248 145 140 153 145 170 56 154 145 217 149 164 137 148 176 137 152 135 24 153 137 105 153 80 25 154 142 185 133 144 233 154 121 201 154 184 153 137 148 105 146 51 217 155 160 217 152 118 249 152 131 89 154 201 153 156 147 217 148 125 73 147 218 249 155 135 24 156 209 73 156 224 89 152 92 25 155 200 217 138 111 168 146 62 233 143 95 105 157 158 137 129 164 57 156 224 57 157 237 233 150 199 185 138 241 169 156 188 185 152 230 41 146 192 169 134 29 73 108 160 151 233 144 231 57 149 221 169 159 197 201 159 254 105 155 203 24 158 169 169 160 216 89 160 152 185 157 8 250 156 222 185 159 211 57 160 26 202 160 33 89 151 30 74 148 17 42 157 204 216 138 226 169 154 203 73 150 205 201 157 31 170 162 235 201 154 20 234 154 22 26 159 40 41 102 243 201 146 245 185 151 186 121 157 79 25 163 29 138 158 16 42 156 18 42 162 197 137 163 239 25 160 46 89 126 1 1 0 59) asByteArray ].	^ xxxCache at: 1! !!SUAllTestLibrary methodsFor: 'uploaded' stamp: 'lr 10/28/2006 14:34'!menuGif	| xxxCache |	xxxCache := #(nil) beMutable.	(xxxCache at: 1) isNil ifTrue: [		xxxCache at: 1 put: #(71 73 70 56 57 97 220 0 42 0 230 0 0 132 170 84 150 189 98 243 244 242 156 197 104 118 155 72 149 188 98 141 179 92 140 177 90 144 183 94 127 165 80 125 161 78 223 223 223 146 186 97 150 188 100 129 166 81 115 150 69 151 190 101 191 196 183 154 194 102 141 180 93 139 176 90 126 164 79 219 232 201 120 157 73 132 168 83 124 160 77 207 207 206 117 154 71 143 181 93 203 210 194 214 237 194 157 194 106 191 215 161 160 188 123 135 170 90 120 156 74 203 204 201 169 189 141 232 240 222 153 189 106 219 219 219 213 242 191 249 249 249 148 186 97 196 196 196 212 243 191 145 183 97 179 179 179 151 191 99 213 244 192 237 237 237 150 190 98 212 242 190 238 238 238 149 189 97 148 188 97 152 191 102 213 242 190 156 193 105 134 172 86 145 182 97 178 178 178 148 189 97 151 190 99 148 186 99 129 167 82 123 159 75 134 169 90 151 189 97 152 191 100 248 248 248 150 188 97 251 251 251 114 149 69 154 193 102 136 174 88 197 197 197 114 148 68 134 168 90 215 226 199 119 156 73 122 158 75 214 226 198 149 187 97 136 175 88 143 182 93 149 186 97 115 151 69 135 173 87 137 175 89 231 231 231 149 187 98 213 243 191 116 151 70 215 227 199 149 186 99 122 159 75 135 169 91 149 187 99 143 182 94 137 175 88 156 194 105 214 226 199 252 252 252 211 240 188 220 220 220 142 178 94 115 149 69 214 214 214 146 183 98 131 164 88 134 169 91 134 173 87 137 173 91 135 169 90 150 189 97 232 232 232 153 193 102 119 155 73 136 170 91 202 203 201 213 243 192 151 190 98 151 191 101 152 191 99 152 191 101 255 255 255 255 255 255 33 249 4 1 0 0 127 0 44 0 0 0 0 220 0 42 0 0 7 255 128 55 54 131 130 132 62 135 134 137 133 139 138 1 5 143 144 142 68 147 148 149 115 150 71 153 154 152 146 145 157 140 136 161 160 162 141 163 166 164 165 167 170 169 171 172 173 174 175 176 168 178 63 122 182 51 183 181 186 185 184 159 188 191 192 193 187 195 194 156 155 199 200 201 198 202 203 205 151 206 208 209 180 190 196 197 213 215 216 212 214 219 211 179 221 222 223 220 226 227 228 229 230 69 124 48 234 232 233 237 238 239 236 189 218 231 244 242 245 246 247 243 249 248 252 253 254 255 250 226 193 19 56 176 224 186 131 4 13 34 84 184 15 160 67 134 16 19 70 92 40 241 161 197 134 19 51 106 220 72 145 163 199 143 32 67 138 28 73 176 129 201 47 64 82 170 92 201 178 229 138 151 48 99 202 156 57 133 166 149 155 54 115 186 220 9 4 130 207 159 29 11 234 172 57 180 168 81 162 71 197 240 68 185 116 69 167 160 239 60 125 40 163 131 234 212 170 88 179 106 221 202 245 106 215 175 86 193 138 245 154 21 135 207 47 146 34 186 0 144 97 67 146 38 112 255 223 202 141 75 119 174 221 186 119 243 234 221 139 183 47 95 185 27 20 0 224 1 116 79 159 195 134 19 67 80 9 194 2 26 63 126 242 64 78 49 185 114 100 203 146 47 107 166 129 185 243 102 207 45 64 139 254 188 217 2 136 147 133 17 43 6 18 71 193 149 215 93 30 192 158 77 187 182 237 216 183 115 227 214 205 187 183 109 5 75 156 54 48 75 92 177 36 11 164 67 39 31 29 131 185 243 229 208 149 75 103 110 161 143 240 226 198 197 44 1 179 161 187 247 239 224 195 19 16 79 126 124 121 243 231 211 171 71 31 30 76 28 159 74 234 196 159 175 100 49 4 228 153 243 63 215 31 125 191 255 254 0 158 70 152 113 137 1 161 70 6 23 216 145 32 20 10 46 216 160 131 15 142 16 33 132 20 86 40 161 133 12 102 120 161 134 28 118 56 33 134 25 42 192 193 112 18 148 72 223 10 60 128 0 32 127 44 254 215 220 138 46 198 8 130 11 78 153 120 34 91 81 228 168 163 16 60 130 177 99 143 63 2 25 164 144 68 14 233 99 145 72 38 169 228 255 146 0 212 72 159 4 16 208 232 88 140 48 86 153 3 149 87 90 105 153 128 16 60 9 165 11 21 100 32 166 2 100 150 105 230 153 104 166 169 230 154 108 182 233 230 152 111 102 144 192 128 54 90 167 134 14 148 105 169 103 158 124 98 233 231 114 101 168 1 68 157 123 76 161 70 5 136 38 144 232 162 140 54 234 168 162 144 62 42 233 164 145 82 106 105 165 152 86 32 168 18 3 116 58 128 18 86 196 161 195 159 125 238 73 234 169 126 232 16 7 3 137 153 232 66 28 65 56 16 235 172 178 210 90 235 173 182 230 138 171 174 187 246 234 43 175 192 6 251 235 170 156 122 42 65 168 163 190 216 162 169 204 46 171 44 170 202 170 234 194 30 158 126 234 130 28 0 96 144 237 182 220 118 235 173 182 223 134 11 174 184 227 146 91 174 185 232 126 43 199 180 213 246 193 131 8 120 66 43 111 179 49 234 32 2 187 158 70 41 194 14 252 246 235 239 191 0 99 1 71 192 4 23 44 176 193 8 39 124 240 194 12 55 124 47 181 198 94 59 42 189 20 59 59 239 255 116 154 217 139 111 167 238 134 145 197 18 32 127 76 6 21 33 151 108 242 201 34 163 156 242 202 44 171 76 242 203 48 187 60 178 204 52 63 220 174 196 21 95 172 115 116 26 23 203 241 181 7 4 45 244 208 68 23 109 244 209 72 39 173 244 210 76 35 109 115 196 240 114 150 243 212 89 150 90 181 188 61 223 124 199 4 92 27 224 245 215 93 135 45 54 216 100 151 61 246 217 102 167 173 246 218 108 143 253 116 167 199 194 187 51 23 115 239 172 196 219 214 222 91 5 2 124 239 221 247 223 128 143 33 120 224 126 19 94 56 7 136 15 110 248 226 137 51 222 248 227 144 43 238 247 186 62 231 157 108 221 84 207 157 53 212 12 116 238 2 15 158 135 142 128 232 162 243 48 250 232 164 127 94 122 232 165 255 237 185 233 170 183 254 57 224 12 16 94 251 235 176 227 78 57 199 133 170 225 70 3 207 102 46 60 198 22 195 8 129 27 155 22 232 59 78 73 53 191 133 243 208 35 37 125 244 47 33 223 147 187 46 168 33 135 2 46 96 94 60 241 222 123 198 131 255 2 34 168 49 59 15 218 115 127 254 250 236 183 239 254 251 240 199 47 255 252 244 147 111 254 181 67 184 225 154 8 195 135 79 117 28 77 80 128 27 134 64 192 252 237 47 12 111 40 160 2 23 232 4 6 54 208 129 8 140 224 3 37 8 65 10 86 112 130 24 188 160 6 23 24 192 1 14 225 15 127 80 65 13 80 48 165 254 153 80 106 86 139 145 5 80 80 3 21 128 16 132 70 144 1 10 84 67 67 2 213 208 134 56 204 225 13 119 200 195 30 234 208 135 44 116 225 11 69 72 66 255 125 207 136 158 89 97 11 95 24 66 25 250 240 135 79 140 34 20 83 35 69 236 76 17 49 65 100 98 12 139 120 196 19 34 49 57 74 20 34 12 157 88 197 43 154 145 138 101 76 99 21 179 56 68 25 74 33 133 94 140 99 23 91 96 4 41 176 113 140 40 248 192 25 213 200 199 62 250 81 53 58 184 99 19 23 32 5 1 200 241 139 115 244 131 0 158 32 72 36 200 96 1 37 248 227 30 209 40 201 73 90 81 49 37 88 192 18 219 184 0 13 152 0 255 142 87 59 164 40 179 228 1 13 104 18 9 76 116 228 2 34 80 201 86 186 82 146 17 56 101 42 5 160 5 13 116 192 144 160 68 228 23 61 208 1 13 208 65 0 168 28 34 45 59 16 130 75 190 242 152 150 52 99 8 58 176 0 96 206 82 11 108 32 65 7 60 160 203 81 122 134 151 36 96 131 22 156 41 76 104 70 160 152 138 49 38 50 195 57 206 52 158 32 2 218 228 38 39 53 192 130 14 152 192 3 70 176 166 60 99 160 2 1 240 146 5 166 220 164 22 31 169 129 23 128 147 156 229 12 168 31 67 240 130 124 138 241 133 103 160 37 10 240 16 129 8 116 192 11 79 128 168 20 34 58 81 138 154 193 162 18 205 40 70 53 186 209 142 122 244 162 28 13 233 71 63 218 129 134 146 0 5 219 12 230 51 23 26 129 18 252 83 160 48 53 103 8 74 16 1 60 160 84 157 43 101 103 4 94 192 211 158 250 244 167 64 237 65 80 133 74 212 161 26 245 168 72 77 106 81 35 192 4 13 220 84 165 76 12 161 66 117 170 212 162 86 245 170 88 255 205 170 85 125 202 84 167 166 52 170 8 53 2 45 23 192 6 13 224 129 5 104 77 171 90 153 176 86 182 186 181 173 112 141 171 92 231 74 215 186 162 149 4 26 96 195 2 126 169 2 168 166 82 172 116 32 171 89 237 74 216 183 22 246 176 136 133 43 30 242 186 87 96 158 1 172 8 69 130 0 100 160 5 45 44 96 1 40 200 172 102 55 203 217 206 122 246 179 160 13 173 104 71 155 6 206 94 182 178 50 112 44 100 35 59 217 202 94 150 180 176 141 173 108 103 11 218 211 106 161 6 170 93 109 88 5 48 89 25 248 246 183 192 173 65 112 135 43 92 226 22 247 184 198 69 174 114 147 203 220 230 242 214 8 126 213 45 18 234 217 219 229 54 247 186 216 181 110 118 183 59 220 231 70 87 183 33 156 238 25 250 74 94 21 64 215 188 232 77 175 122 215 203 222 243 182 215 189 239 141 175 124 215 59 94 240 174 22 9 227 157 238 124 225 203 223 253 246 215 191 255 5 48 124 241 107 223 2 27 248 192 8 78 176 130 23 204 224 6 59 248 193 16 142 176 13 132 39 76 225 10 91 248 194 24 94 109 32 0 0 59) asByteArray ].	^ xxxCache at: 1! !!SUAllTestLibrary methodsFor: 'accessing' stamp: 'pmm 2/25/2007 13:51'!selectorsToInclude	^ #( styleCss )! !!SUAllTestLibrary methodsFor: 'uploaded' stamp: 'lr 2/19/2007 13:45'!styleCss	^ '/* Adapted from http://script.aculo.us, thanks to Thomas Fuchs */body {	margin: 0px;	font: 11px Lucida Grande, Verdana, Arial, Helvetica, sans serif;	background: url(background.gif) repeat-x #fff;}a, a:hover, a:visited, a:active {	color: #e8a400;}img {	border: 0px;}#header {	height: 110px;	text-align: right;	background: url(header.gif) #7e9e50;	color: #333;	margin-bottom:25px;}#logo {	float: left;}#menu {	list-style-type: none;	position: absolute;	right: 0px;	top: 95px;	margin: 0px;	padding: 0px;	margin-top: -10px;	padding-right: 5px;}#menu li {	text-transform: lowercase;	float: left;}#menu li a {	display: block;	width: 110px;	padding-top: 9px;	height: 16px;	text-align: center;	text-decoration: none;	color: #fff;	font-weight: bold;	background: url(menu.gif) 110px 0px;}#menu a.active {	color: #7f9f50;	background: url(menu.gif) 0px 0px;}#menu a:hover {	color: #7f9f50;	background: url(menu.gif) 0px 0px;}#content {	margin-left: 60px;	margin-right: 60px;}#content h1 {	font: 22px Georgia, serif;	color: #7e9e50;	font-weight: normal;	margin: 0px;	padding: 0px;	text-transform: lowercase;	font-style: italic;	padding-bottom: 4px;	border-bottom: 1px dotted #c5dea1;	clear: left;}#content h2 {	font: 18px Georgia, serif;	color: #7e9e50;	font-size: 15px;	font-weight: normal;	margin: 0px;	padding: 0px;	margin-top: 20px;	text-transform: lowercase;	font-style: italic;}#content h3 {	font: 13px Lucida Grande, Verdana, Arial, Helvetica, sans serif;	margin: 0px;	padding: 0px;	margin-left: 10px;	margin-top: 10px;	font-weight: bold;	text-transform: lowercase;	color: #444444;}#content p, div.paragraph {	font-size: 12px;	line-height: 1.7;	color: #444444;	margin-left: 10px;	margin-top: 10px;}/* demo box */div.box {	width: 120px;	height: 120px;	margin-right: 10px;	margin-bottom: 10px;	background: url(demo.gif);}div.box div.header {	height: 23px;	background: url(demo-logo.gif) repeat-x;}div.box div.content {	padding-top: 1em;	text-align: center;}/* source code */div.source {	margin: 5px;	padding: 5px;	border: 1px solid #dddddd;	background: #f5f5f5;	font: 12px Lucida Sans Typewriter, Courier, monospace;}'! !!SULibrary methodsFor: 'uploaded'!builderJs	^ '// script.aculo.us builder.js v1.8.1, Thu Jan 03 22:07:12 -0500 2008var Builder={NODEMAP:{AREA:"map",CAPTION:"table",COL:"table",COLGROUP:"table",LEGEND:"fieldset",OPTGROUP:"select",OPTION:"select",PARAM:"object",TBODY:"table",TD:"table",TFOOT:"table",TH:"table",THEAD:"table",TR:"table"},node:function(A){A=A.toUpperCase();var F=this.NODEMAP[A]||"div";var B=document.createElement(F);try{B.innerHTML="<"+A+"></"+A+">"}catch(E){}var D=B.firstChild||null;if(D&&(D.tagName.toUpperCase()!!=A)){D=D.getElementsByTagName(A)[0]}if(!!D){D=document.createElement(A)}if(!!D){return }if(arguments[1]){if(this._isStringOrNumber(arguments[1])||(arguments[1] instanceof Array)||arguments[1].tagName){this._children(D,arguments[1])}else{var C=this._attributes(arguments[1]);if(C.length){try{B.innerHTML="<"+A+" "+C+"></"+A+">"}catch(E){}D=B.firstChild||null;if(!!D){D=document.createElement(A);for(attr in arguments[1]){D[attr=="class"?"className":attr]=arguments[1][attr]}}if(D.tagName.toUpperCase()!!=A){D=B.getElementsByTagName(A)[0]}}}}if(arguments[2]){this._children(D,arguments[2])}return D},_text:function(A){return document.createTextNode(A)},ATTR_MAP:{"className":"class","htmlFor":"for"},_attributes:function(A){var B=[];for(attribute in A){B.push((attribute in this.ATTR_MAP?this.ATTR_MAP[attribute]:attribute)+''="''+A[attribute].toString().escapeHTML().gsub(/"/,"&quot;")+''"'')}return B.join(" ")},_children:function(B,A){if(A.tagName){B.appendChild(A);return }if(typeof A=="object"){A.flatten().each(function(C){if(typeof C=="object"){B.appendChild(C)}else{if(Builder._isStringOrNumber(C)){B.appendChild(Builder._text(C))}}})}else{if(Builder._isStringOrNumber(A)){B.appendChild(Builder._text(A))}}},_isStringOrNumber:function(A){return(typeof A=="string"||typeof A=="number")},build:function(B){var A=this.node("div");$(A).update(B.strip());return A.down()},dump:function(B){if(typeof B!!="object"&&typeof B!!="function"){B=window}var A=("A ABBR ACRONYM ADDRESS APPLET AREA B BASE BASEFONT BDO BIG BLOCKQUOTE BODY BR BUTTON CAPTION CENTER CITE CODE COL COLGROUP DD DEL DFN DIR DIV DL DT EM FIELDSET FONT FORM FRAME FRAMESET H1 H2 H3 H4 H5 H6 HEAD HR HTML I IFRAME IMG INPUT INS ISINDEX KBD LABEL LEGEND LI LINK MAP MENU META NOFRAMES NOSCRIPT OBJECT OL OPTGROUP OPTION P PARAM PRE Q S SAMP SCRIPT SELECT SMALL SPAN STRIKE STRONG STYLE SUB SUP TABLE TBODY TD TEXTAREA TFOOT TH THEAD TITLE TR TT U UL VAR").split(/\s+/);A.each(function(C){B[C]=function(){return Builder.node.apply(Builder,[C].concat($A(arguments)))}})}}'! !!SULibrary methodsFor: 'uploaded'!controlsJs	^ '// script.aculo.us controls.js v1.8.1, Thu Jan 03 22:07:12 -0500 2008if(typeof Effect=="undefined"){throw ("controls.js requires including script.aculo.us'' effects.js library")}var Autocompleter={};Autocompleter.Base=Class.create({baseInitialize:function(B,C,A){B=$(B);this.element=B;this.update=$(C);this.hasFocus=false;this.changed=false;this.active=false;this.index=0;this.entryCount=0;this.oldElementValue=this.element.value;if(this.setOptions){this.setOptions(A)}else{this.options=A||{}}this.options.paramName=this.options.paramName||this.element.name;this.options.tokens=this.options.tokens||[];this.options.frequency=this.options.frequency||0.4;this.options.minChars=this.options.minChars||1;this.options.onShow=this.options.onShow||function(D,E){if(!!E.style.position||E.style.position=="absolute"){E.style.position="absolute";Position.clone(D,E,{setHeight:false,offsetTop:D.offsetHeight})}Effect.Appear(E,{duration:0.15})};this.options.onHide=this.options.onHide||function(D,E){new Effect.Fade(E,{duration:0.15})};if(typeof (this.options.tokens)=="string"){this.options.tokens=new Array(this.options.tokens)}if(!!this.options.tokens.include("\n")){this.options.tokens.push("\n")}this.observer=null;this.element.setAttribute("autocomplete","off");Element.hide(this.update);Event.observe(this.element,"blur",this.onBlur.bindAsEventListener(this));Event.observe(this.element,"keydown",this.onKeyPress.bindAsEventListener(this))},show:function(){if(Element.getStyle(this.update,"display")=="none"){this.options.onShow(this.element,this.update)}if(!!this.iefix&&(Prototype.Browser.IE)&&(Element.getStyle(this.update,"position")=="absolute")){new Insertion.After(this.update,''<iframe id="''+this.update.id+''_iefix" style="display:none;position:absolute;filter:progid:DXImageTransform.Microsoft.Alpha(opacity=0);" src="javascript:false;" frameborder="0" scrolling="no"></iframe>'');this.iefix=$(this.update.id+"_iefix")}if(this.iefix){setTimeout(this.fixIEOverlapping.bind(this),50)}},fixIEOverlapping:function(){Position.clone(this.update,this.iefix,{setTop:(!!this.update.style.height)});this.iefix.style.zIndex=1;this.update.style.zIndex=2;Element.show(this.iefix)},hide:function(){this.stopIndicator();if(Element.getStyle(this.update,"display")!!="none"){this.options.onHide(this.element,this.update)}if(this.iefix){Element.hide(this.iefix)}},startIndicator:function(){if(this.options.indicator){Element.show(this.options.indicator)}},stopIndicator:function(){if(this.options.indicator){Element.hide(this.options.indicator)}},onKeyPress:function(A){if(this.active){switch(A.keyCode){case Event.KEY_TAB:case Event.KEY_RETURN:this.selectEntry();Event.stop(A);case Event.KEY_ESC:this.hide();this.active=false;Event.stop(A);return ;case Event.KEY_LEFT:case Event.KEY_RIGHT:return ;case Event.KEY_UP:this.markPrevious();this.render();Event.stop(A);return ;case Event.KEY_DOWN:this.markNext();this.render();Event.stop(A);return }}else{if(A.keyCode==Event.KEY_TAB||A.keyCode==Event.KEY_RETURN||(Prototype.Browser.WebKit>0&&A.keyCode==0)){return }}this.changed=true;this.hasFocus=true;if(this.observer){clearTimeout(this.observer)}this.observer=setTimeout(this.onObserverEvent.bind(this),this.options.frequency*1000)},activate:function(){this.changed=false;this.hasFocus=true;this.getUpdatedChoices()},onHover:function(B){var A=Event.findElement(B,"LI");if(this.index!!=A.autocompleteIndex){this.index=A.autocompleteIndex;this.render()}Event.stop(B)},onClick:function(B){var A=Event.findElement(B,"LI");this.index=A.autocompleteIndex;this.selectEntry();this.hide()},onBlur:function(A){setTimeout(this.hide.bind(this),250);this.hasFocus=false;this.active=false},render:function(){if(this.entryCount>0){for(var A=0;A<this.entryCount;A++){this.index==A?Element.addClassName(this.getEntry(A),"selected"):Element.removeClassName(this.getEntry(A),"selected")}if(this.hasFocus){this.show();this.active=true}}else{this.active=false;this.hide()}},markPrevious:function(){if(this.index>0){this.index--}else{this.index=this.entryCount-1}this.getEntry(this.index).scrollIntoView(true)},markNext:function(){if(this.index<this.entryCount-1){this.index++}else{this.index=0}this.getEntry(this.index).scrollIntoView(false)},getEntry:function(A){return this.update.firstChild.childNodes[A]},getCurrentEntry:function(){return this.getEntry(this.index)},selectEntry:function(){this.active=false;this.updateElement(this.getCurrentEntry())},updateElement:function(F){if(this.options.updateElement){this.options.updateElement(F);return }var D="";if(this.options.select){var A=$(F).select("."+this.options.select)||[];if(A.length>0){D=Element.collectTextNodes(A[0],this.options.select)}}else{D=Element.collectTextNodesIgnoreClass(F,"informal")}var C=this.getTokenBounds();if(C[0]!!=-1){var E=this.element.value.substr(0,C[0]);var B=this.element.value.substr(C[0]).match(/^\s+/);if(B){E+=B[0]}this.element.value=E+D+this.element.value.substr(C[1])}else{this.element.value=D}this.oldElementValue=this.element.value;this.element.focus();if(this.options.afterUpdateElement){this.options.afterUpdateElement(this.element,F)}},updateChoices:function(C){if(!!this.changed&&this.hasFocus){this.update.innerHTML=C;Element.cleanWhitespace(this.update);Element.cleanWhitespace(this.update.down());if(this.update.firstChild&&this.update.down().childNodes){this.entryCount=this.update.down().childNodes.length;for(var A=0;A<this.entryCount;A++){var B=this.getEntry(A);B.autocompleteIndex=A;this.addObservers(B)}}else{this.entryCount=0}this.stopIndicator();this.index=0;if(this.entryCount==1&&this.options.autoSelect){this.selectEntry();this.hide()}else{this.render()}}},addObservers:function(A){Event.observe(A,"mouseover",this.onHover.bindAsEventListener(this));Event.observe(A,"click",this.onClick.bindAsEventListener(this))},onObserverEvent:function(){this.changed=false;this.tokenBounds=null;if(this.getToken().length>=this.options.minChars){this.getUpdatedChoices()}else{this.active=false;this.hide()}this.oldElementValue=this.element.value},getToken:function(){var A=this.getTokenBounds();return this.element.value.substring(A[0],A[1]).strip()},getTokenBounds:function(){if(null!!=this.tokenBounds){return this.tokenBounds}var E=this.element.value;if(E.strip().empty()){return[-1,0]}var F=arguments.callee.getFirstDifferencePos(E,this.oldElementValue);var H=(F==this.oldElementValue.length?1:0);var D=-1,C=E.length;var G;for(var B=0,A=this.options.tokens.length;B<A;++B){G=E.lastIndexOf(this.options.tokens[B],F+H-1);if(G>D){D=G}G=E.indexOf(this.options.tokens[B],F+H);if(-1!!=G&&G<C){C=G}}return(this.tokenBounds=[D+1,C])}});Autocompleter.Base.prototype.getTokenBounds.getFirstDifferencePos=function(C,A){var D=Math.min(C.length,A.length);for(var B=0;B<D;++B){if(C[B]!!=A[B]){return B}}return D};Ajax.Autocompleter=Class.create(Autocompleter.Base,{initialize:function(C,D,B,A){this.baseInitialize(C,D,A);this.options.asynchronous=true;this.options.onComplete=this.onComplete.bind(this);this.options.defaultParams=this.options.parameters||null;this.url=B},getUpdatedChoices:function(){this.startIndicator();var A=encodeURIComponent(this.options.paramName)+"="+encodeURIComponent(this.getToken());this.options.parameters=this.options.callback?this.options.callback(this.element,A):A;if(this.options.defaultParams){this.options.parameters+="&"+this.options.defaultParams}new Ajax.Request(this.url,this.options)},onComplete:function(A){this.updateChoices(A.responseText)}});Autocompleter.Local=Class.create(Autocompleter.Base,{initialize:function(B,D,C,A){this.baseInitialize(B,D,A);this.options.array=C},getUpdatedChoices:function(){this.updateChoices(this.options.selector(this))},setOptions:function(A){this.options=Object.extend({choices:10,partialSearch:true,partialChars:2,ignoreCase:true,fullSearch:false,selector:function(B){var D=[];var C=[];var H=B.getToken();var G=0;for(var E=0;E<B.options.array.length&&D.length<B.options.choices;E++){var F=B.options.array[E];var I=B.options.ignoreCase?F.toLowerCase().indexOf(H.toLowerCase()):F.indexOf(H);while(I!!=-1){if(I==0&&F.length!!=H.length){D.push("<li><strong>"+F.substr(0,H.length)+"</strong>"+F.substr(H.length)+"</li>");break}else{if(H.length>=B.options.partialChars&&B.options.partialSearch&&I!!=-1){if(B.options.fullSearch||/\s/.test(F.substr(I-1,1))){C.push("<li>"+F.substr(0,I)+"<strong>"+F.substr(I,H.length)+"</strong>"+F.substr(I+H.length)+"</li>");break}}}I=B.options.ignoreCase?F.toLowerCase().indexOf(H.toLowerCase(),I+1):F.indexOf(H,I+1)}}if(C.length){D=D.concat(C.slice(0,B.options.choices-D.length))}return"<ul>"+D.join("")+"</ul>"}},A||{})}});Field.scrollFreeActivate=function(A){setTimeout(function(){Field.activate(A)},1)};Ajax.InPlaceEditor=Class.create({initialize:function(C,B,A){this.url=B;this.element=C=$(C);this.prepareOptions();this._controls={};arguments.callee.dealWithDeprecatedOptions(A);Object.extend(this.options,A||{});if(!!this.options.formId&&this.element.id){this.options.formId=this.element.id+"-inplaceeditor";if($(this.options.formId)){this.options.formId=""}}if(this.options.externalControl){this.options.externalControl=$(this.options.externalControl)}if(!!this.options.externalControl){this.options.externalControlOnly=false}this._originalBackground=this.element.getStyle("background-color")||"transparent";this.element.title=this.options.clickToEditText;this._boundCancelHandler=this.handleFormCancellation.bind(this);this._boundComplete=(this.options.onComplete||Prototype.emptyFunction).bind(this);this._boundFailureHandler=this.handleAJAXFailure.bind(this);this._boundSubmitHandler=this.handleFormSubmission.bind(this);this._boundWrapperHandler=this.wrapUp.bind(this);this.registerListeners()},checkForEscapeOrReturn:function(A){if(!!this._editing||A.ctrlKey||A.altKey||A.shiftKey){return }if(Event.KEY_ESC==A.keyCode){this.handleFormCancellation(A)}else{if(Event.KEY_RETURN==A.keyCode){this.handleFormSubmission(A)}}},createControl:function(G,C,B){var E=this.options[G+"Control"];var F=this.options[G+"Text"];if("button"==E){var A=document.createElement("input");A.type="submit";A.value=F;A.className="editor_"+G+"_button";if("cancel"==G){A.onclick=this._boundCancelHandler}this._form.appendChild(A);this._controls[G]=A}else{if("link"==E){var D=document.createElement("a");D.href="#";D.appendChild(document.createTextNode(F));D.onclick="cancel"==G?this._boundCancelHandler:this._boundSubmitHandler;D.className="editor_"+G+"_link";if(B){D.className+=" "+B}this._form.appendChild(D);this._controls[G]=D}}},createEditField:function(){var C=(this.options.loadTextURL?this.options.loadingText:this.getText());var B;if(1>=this.options.rows&&!!/\r|\n/.test(this.getText())){B=document.createElement("input");B.type="text";var A=this.options.size||this.options.cols||0;if(0<A){B.size=A}}else{B=document.createElement("textarea");B.rows=(1>=this.options.rows?this.options.autoRows:this.options.rows);B.cols=this.options.cols||40}B.name=this.options.paramName;B.value=C;B.className="editor_field";if(this.options.submitOnBlur){B.onblur=this._boundSubmitHandler}this._controls.editor=B;if(this.options.loadTextURL){this.loadExternalText()}this._form.appendChild(this._controls.editor)},createForm:function(){var B=this;function A(D,E){var C=B.options["text"+D+"Controls"];if(!!C||E===false){return }B._form.appendChild(document.createTextNode(C))}this._form=$(document.createElement("form"));this._form.id=this.options.formId;this._form.addClassName(this.options.formClassName);this._form.onsubmit=this._boundSubmitHandler;this.createEditField();if("textarea"==this._controls.editor.tagName.toLowerCase()){this._form.appendChild(document.createElement("br"))}if(this.options.onFormCustomization){this.options.onFormCustomization(this,this._form)}A("Before",this.options.okControl||this.options.cancelControl);this.createControl("ok",this._boundSubmitHandler);A("Between",this.options.okControl&&this.options.cancelControl);this.createControl("cancel",this._boundCancelHandler,"editor_cancel");A("After",this.options.okControl||this.options.cancelControl)},destroy:function(){if(this._oldInnerHTML){this.element.innerHTML=this._oldInnerHTML}this.leaveEditMode();this.unregisterListeners()},enterEditMode:function(A){if(this._saving||this._editing){return }this._editing=true;this.triggerCallback("onEnterEditMode");if(this.options.externalControl){this.options.externalControl.hide()}this.element.hide();this.createForm();this.element.parentNode.insertBefore(this._form,this.element);if(!!this.options.loadTextURL){this.postProcessEditField()}if(A){Event.stop(A)}},enterHover:function(A){if(this.options.hoverClassName){this.element.addClassName(this.options.hoverClassName)}if(this._saving){return }this.triggerCallback("onEnterHover")},getText:function(){return this.element.innerHTML},handleAJAXFailure:function(A){this.triggerCallback("onFailure",A);if(this._oldInnerHTML){this.element.innerHTML=this._oldInnerHTML;this._oldInnerHTML=null}},handleFormCancellation:function(A){this.wrapUp();if(A){Event.stop(A)}},handleFormSubmission:function(D){var B=this._form;var C=$F(this._controls.editor);this.prepareSubmission();var E=this.options.callback(B,C)||"";if(Object.isString(E)){E=E.toQueryParams()}E.editorId=this.element.id;if(this.options.htmlResponse){var A=Object.extend({evalScripts:true},this.options.ajaxOptions);Object.extend(A,{parameters:E,onComplete:this._boundWrapperHandler,onFailure:this._boundFailureHandler});new Ajax.Updater({success:this.element},this.url,A)}else{var A=Object.extend({method:"get"},this.options.ajaxOptions);Object.extend(A,{parameters:E,onComplete:this._boundWrapperHandler,onFailure:this._boundFailureHandler});new Ajax.Request(this.url,A)}if(D){Event.stop(D)}},leaveEditMode:function(){this.element.removeClassName(this.options.savingClassName);this.removeForm();this.leaveHover();this.element.style.backgroundColor=this._originalBackground;this.element.show();if(this.options.externalControl){this.options.externalControl.show()}this._saving=false;this._editing=false;this._oldInnerHTML=null;this.triggerCallback("onLeaveEditMode")},leaveHover:function(A){if(this.options.hoverClassName){this.element.removeClassName(this.options.hoverClassName)}if(this._saving){return }this.triggerCallback("onLeaveHover")},loadExternalText:function(){this._form.addClassName(this.options.loadingClassName);this._controls.editor.disabled=true;var A=Object.extend({method:"get"},this.options.ajaxOptions);Object.extend(A,{parameters:"editorId="+encodeURIComponent(this.element.id),onComplete:Prototype.emptyFunction,onSuccess:function(C){this._form.removeClassName(this.options.loadingClassName);var B=C.responseText;if(this.options.stripLoadedTextTags){B=B.stripTags()}this._controls.editor.value=B;this._controls.editor.disabled=false;this.postProcessEditField()}.bind(this),onFailure:this._boundFailureHandler});new Ajax.Request(this.options.loadTextURL,A)},postProcessEditField:function(){var A=this.options.fieldPostCreation;if(A){$(this._controls.editor)["focus"==A?"focus":"activate"]()}},prepareOptions:function(){this.options=Object.clone(Ajax.InPlaceEditor.DefaultOptions);Object.extend(this.options,Ajax.InPlaceEditor.DefaultCallbacks);[this._extraDefaultOptions].flatten().compact().each(function(A){Object.extend(this.options,A)}.bind(this))},prepareSubmission:function(){this._saving=true;this.removeForm();this.leaveHover();this.showSaving()},registerListeners:function(){this._listeners={};var A;$H(Ajax.InPlaceEditor.Listeners).each(function(B){A=this[B.value].bind(this);this._listeners[B.key]=A;if(!!this.options.externalControlOnly){this.element.observe(B.key,A)}if(this.options.externalControl){this.options.externalControl.observe(B.key,A)}}.bind(this))},removeForm:function(){if(!!this._form){return }this._form.remove();this._form=null;this._controls={}},showSaving:function(){this._oldInnerHTML=this.element.innerHTML;this.element.innerHTML=this.options.savingText;this.element.addClassName(this.options.savingClassName);this.element.style.backgroundColor=this._originalBackground;this.element.show()},triggerCallback:function(B,A){if("function"==typeof this.options[B]){this.options[B](this,A)}},unregisterListeners:function(){$H(this._listeners).each(function(A){if(!!this.options.externalControlOnly){this.element.stopObserving(A.key,A.value)}if(this.options.externalControl){this.options.externalControl.stopObserving(A.key,A.value)}}.bind(this))},wrapUp:function(A){this.leaveEditMode();this._boundComplete(A,this.element)}});Object.extend(Ajax.InPlaceEditor.prototype,{dispose:Ajax.InPlaceEditor.prototype.destroy});Ajax.InPlaceCollectionEditor=Class.create(Ajax.InPlaceEditor,{initialize:function($super,C,B,A){this._extraDefaultOptions=Ajax.InPlaceCollectionEditor.DefaultOptions;$super(C,B,A)},createEditField:function(){var A=document.createElement("select");A.name=this.options.paramName;A.size=1;this._controls.editor=A;this._collection=this.options.collection||[];if(this.options.loadCollectionURL){this.loadCollection()}else{this.checkForExternalText()}this._form.appendChild(this._controls.editor)},loadCollection:function(){this._form.addClassName(this.options.loadingClassName);this.showLoadingText(this.options.loadingCollectionText);var options=Object.extend({method:"get"},this.options.ajaxOptions);Object.extend(options,{parameters:"editorId="+encodeURIComponent(this.element.id),onComplete:Prototype.emptyFunction,onSuccess:function(transport){var js=transport.responseText.strip();if(!!/^\[.*\]$/.test(js)){throw"Server returned an invalid collection representation."}this._collection=eval(js);this.checkForExternalText()}.bind(this),onFailure:this.onFailure});new Ajax.Request(this.options.loadCollectionURL,options)},showLoadingText:function(B){this._controls.editor.disabled=true;var A=this._controls.editor.firstChild;if(!!A){A=document.createElement("option");A.value="";this._controls.editor.appendChild(A);A.selected=true}A.update((B||"").stripScripts().stripTags())},checkForExternalText:function(){this._text=this.getText();if(this.options.loadTextURL){this.loadExternalText()}else{this.buildOptionList()}},loadExternalText:function(){this.showLoadingText(this.options.loadingText);var A=Object.extend({method:"get"},this.options.ajaxOptions);Object.extend(A,{parameters:"editorId="+encodeURIComponent(this.element.id),onComplete:Prototype.emptyFunction,onSuccess:function(B){this._text=B.responseText.strip();this.buildOptionList()}.bind(this),onFailure:this.onFailure});new Ajax.Request(this.options.loadTextURL,A)},buildOptionList:function(){this._form.removeClassName(this.options.loadingClassName);this._collection=this._collection.map(function(D){return 2===D.length?D:[D,D].flatten()});var B=("value" in this.options)?this.options.value:this._text;var A=this._collection.any(function(D){return D[0]==B}.bind(this));this._controls.editor.update("");var C;this._collection.each(function(E,D){C=document.createElement("option");C.value=E[0];C.selected=A?E[0]==B:0==D;C.appendChild(document.createTextNode(E[1]));this._controls.editor.appendChild(C)}.bind(this));this._controls.editor.disabled=false;Field.scrollFreeActivate(this._controls.editor)}});Ajax.InPlaceEditor.prototype.initialize.dealWithDeprecatedOptions=function(A){if(!!A){return }function B(C,D){if(C in A||D===undefined){return }A[C]=D}B("cancelControl",(A.cancelLink?"link":(A.cancelButton?"button":A.cancelLink==A.cancelButton==false?false:undefined)));B("okControl",(A.okLink?"link":(A.okButton?"button":A.okLink==A.okButton==false?false:undefined)));B("highlightColor",A.highlightcolor);B("highlightEndColor",A.highlightendcolor)};Object.extend(Ajax.InPlaceEditor,{DefaultOptions:{ajaxOptions:{},autoRows:3,cancelControl:"link",cancelText:"cancel",clickToEditText:"Click to edit",externalControl:null,externalControlOnly:false,fieldPostCreation:"activate",formClassName:"inplaceeditor-form",formId:null,highlightColor:"#ffff99",highlightEndColor:"#ffffff",hoverClassName:"",htmlResponse:true,loadingClassName:"inplaceeditor-loading",loadingText:"Loading...",okControl:"button",okText:"ok",paramName:"value",rows:1,savingClassName:"inplaceeditor-saving",savingText:"Saving...",size:0,stripLoadedTextTags:false,submitOnBlur:false,textAfterControls:"",textBeforeControls:"",textBetweenControls:""},DefaultCallbacks:{callback:function(A){return Form.serialize(A)},onComplete:function(B,A){new Effect.Highlight(A,{startcolor:this.options.highlightColor,keepBackgroundImage:true})},onEnterEditMode:null,onEnterHover:function(A){A.element.style.backgroundColor=A.options.highlightColor;if(A._effect){A._effect.cancel()}},onFailure:function(B,A){alert("Error communication with the server: "+B.responseText.stripTags())},onFormCustomization:null,onLeaveEditMode:null,onLeaveHover:function(A){A._effect=new Effect.Highlight(A.element,{startcolor:A.options.highlightColor,endcolor:A.options.highlightEndColor,restorecolor:A._originalBackground,keepBackgroundImage:true})}},Listeners:{click:"enterEditMode",keydown:"checkForEscapeOrReturn",mouseover:"enterHover",mouseout:"leaveHover"}});Ajax.InPlaceCollectionEditor.DefaultOptions={loadingCollectionText:"Loading options..."};Form.Element.DelayedObserver=Class.create({initialize:function(B,A,C){this.delay=A||0.5;this.element=$(B);this.callback=C;this.timer=null;this.lastValue=$F(this.element);Event.observe(this.element,"keyup",this.delayedListener.bindAsEventListener(this))},delayedListener:function(A){if(this.lastValue==$F(this.element)){return }if(this.timer){clearTimeout(this.timer)}this.timer=setTimeout(this.onTimerEvent.bind(this),this.delay*1000);this.lastValue=$F(this.element)},onTimerEvent:function(){this.timer=null;this.callback(this.element,$F(this.element))}})'! !!SULibrary methodsFor: 'uploaded'!dragdropJs	^ '// script.aculo.us dragdrop.js v1.8.1, Thu Jan 03 22:07:12 -0500 2008if(Object.isUndefined(Effect)){throw ("dragdrop.js requires including script.aculo.us'' effects.js library")}var Droppables={drops:[],remove:function(A){this.drops=this.drops.reject(function(B){return B.element==$(A)})},add:function(B){B=$(B);var A=Object.extend({greedy:true,hoverclass:null,tree:false},arguments[1]||{});if(A.containment){A._containers=[];var C=A.containment;if(Object.isArray(C)){C.each(function(D){A._containers.push($(D))})}else{A._containers.push($(C))}}if(A.accept){A.accept=[A.accept].flatten()}Element.makePositioned(B);A.element=B;this.drops.push(A)},findDeepestChild:function(A){deepest=A[0];for(i=1;i<A.length;++i){if(Element.isParent(A[i].element,deepest.element)){deepest=A[i]}}return deepest},isContained:function(B,A){var C;if(A.tree){C=B.treeNode}else{C=B.parentNode}return A._containers.detect(function(D){return C==D})},isAffected:function(A,C,B){return((B.element!!=C)&&((!!B._containers)||this.isContained(C,B))&&((!!B.accept)||(Element.classNames(C).detect(function(D){return B.accept.include(D)})))&&Position.within(B.element,A[0],A[1]))},deactivate:function(A){if(A.hoverclass){Element.removeClassName(A.element,A.hoverclass)}this.last_active=null},activate:function(A){if(A.hoverclass){Element.addClassName(A.element,A.hoverclass)}this.last_active=A},show:function(A,C){if(!!this.drops.length){return }var B,D=[];this.drops.each(function(E){if(Droppables.isAffected(A,C,E)){D.push(E)}});if(D.length>0){B=Droppables.findDeepestChild(D)}if(this.last_active&&this.last_active!!=B){this.deactivate(this.last_active)}if(B){Position.within(B.element,A[0],A[1]);if(B.onHover){B.onHover(C,B.element,Position.overlap(B.overlap,B.element))}if(B!!=this.last_active){Droppables.activate(B)}}},fire:function(B,A){if(!!this.last_active){return }Position.prepare();if(this.isAffected([Event.pointerX(B),Event.pointerY(B)],A,this.last_active)){if(this.last_active.onDrop){this.last_active.onDrop(A,this.last_active.element,B);return true}}},reset:function(){if(this.last_active){this.deactivate(this.last_active)}}};var Draggables={drags:[],observers:[],register:function(A){if(this.drags.length==0){this.eventMouseUp=this.endDrag.bindAsEventListener(this);this.eventMouseMove=this.updateDrag.bindAsEventListener(this);this.eventKeypress=this.keyPress.bindAsEventListener(this);Event.observe(document,"mouseup",this.eventMouseUp);Event.observe(document,"mousemove",this.eventMouseMove);Event.observe(document,"keypress",this.eventKeypress)}this.drags.push(A)},unregister:function(A){this.drags=this.drags.reject(function(B){return B==A});if(this.drags.length==0){Event.stopObserving(document,"mouseup",this.eventMouseUp);Event.stopObserving(document,"mousemove",this.eventMouseMove);Event.stopObserving(document,"keypress",this.eventKeypress)}},activate:function(A){if(A.options.delay){this._timeout=setTimeout(function(){Draggables._timeout=null;window.focus();Draggables.activeDraggable=A}.bind(this),A.options.delay)}else{window.focus();this.activeDraggable=A}},deactivate:function(){this.activeDraggable=null},updateDrag:function(A){if(!!this.activeDraggable){return }var B=[Event.pointerX(A),Event.pointerY(A)];if(this._lastPointer&&(this._lastPointer.inspect()==B.inspect())){return }this._lastPointer=B;this.activeDraggable.updateDrag(A,B)},endDrag:function(A){if(this._timeout){clearTimeout(this._timeout);this._timeout=null}if(!!this.activeDraggable){return }this._lastPointer=null;this.activeDraggable.endDrag(A);this.activeDraggable=null},keyPress:function(A){if(this.activeDraggable){this.activeDraggable.keyPress(A)}},addObserver:function(A){this.observers.push(A);this._cacheObserverCallbacks()},removeObserver:function(A){this.observers=this.observers.reject(function(B){return B.element==A});this._cacheObserverCallbacks()},notify:function(B,A,C){if(this[B+"Count"]>0){this.observers.each(function(D){if(D[B]){D[B](B,A,C)}})}if(A.options[B]){A.options[B](A,C)}},_cacheObserverCallbacks:function(){["onStart","onEnd","onDrag"].each(function(A){Draggables[A+"Count"]=Draggables.observers.select(function(B){return B[A]}).length})}};var Draggable=Class.create({initialize:function(B){var C={handle:false,reverteffect:function(F,E,D){var G=Math.sqrt(Math.abs(E^2)+Math.abs(D^2))*0.02;new Effect.Move(F,{x:-D,y:-E,duration:G,queue:{scope:"_draggable",position:"end"}})},endeffect:function(E){var D=Object.isNumber(E._opacity)?E._opacity:1;new Effect.Opacity(E,{duration:0.2,from:0.7,to:D,queue:{scope:"_draggable",position:"end"},afterFinish:function(){Draggable._dragging[E]=false}})},zindex:1000,revert:false,quiet:false,scroll:false,scrollSensitivity:20,scrollSpeed:15,snap:false,delay:0};if(!!arguments[1]||Object.isUndefined(arguments[1].endeffect)){Object.extend(C,{starteffect:function(D){D._opacity=Element.getOpacity(D);Draggable._dragging[D]=true;new Effect.Opacity(D,{duration:0.2,from:D._opacity,to:0.7})}})}var A=Object.extend(C,arguments[1]||{});this.element=$(B);if(A.handle&&Object.isString(A.handle)){this.handle=this.element.down("."+A.handle,0)}if(!!this.handle){this.handle=$(A.handle)}if(!!this.handle){this.handle=this.element}if(A.scroll&&!!A.scroll.scrollTo&&!!A.scroll.outerHTML){A.scroll=$(A.scroll);this._isScrollChild=Element.childOf(this.element,A.scroll)}Element.makePositioned(this.element);this.options=A;this.dragging=false;this.eventMouseDown=this.initDrag.bindAsEventListener(this);Event.observe(this.handle,"mousedown",this.eventMouseDown);Draggables.register(this)},destroy:function(){Event.stopObserving(this.handle,"mousedown",this.eventMouseDown);Draggables.unregister(this)},currentDelta:function(){return([parseInt(Element.getStyle(this.element,"left")||"0"),parseInt(Element.getStyle(this.element,"top")||"0")])},initDrag:function(A){if(!!Object.isUndefined(Draggable._dragging[this.element])&&Draggable._dragging[this.element]){return }if(Event.isLeftClick(A)){var C=Event.element(A);if((tag_name=C.tagName.toUpperCase())&&(tag_name=="INPUT"||tag_name=="SELECT"||tag_name=="OPTION"||tag_name=="BUTTON"||tag_name=="TEXTAREA")){return }var B=[Event.pointerX(A),Event.pointerY(A)];var D=Position.cumulativeOffset(this.element);this.offset=[0,1].map(function(E){return(B[E]-D[E])});Draggables.activate(this);Event.stop(A)}},startDrag:function(B){this.dragging=true;if(!!this.delta){this.delta=this.currentDelta()}if(this.options.zindex){this.originalZ=parseInt(Element.getStyle(this.element,"z-index")||0);this.element.style.zIndex=this.options.zindex}if(this.options.ghosting){this._clone=this.element.cloneNode(true);this.element._originallyAbsolute=(this.element.getStyle("position")=="absolute");if(!!this.element._originallyAbsolute){Position.absolutize(this.element)}this.element.parentNode.insertBefore(this._clone,this.element)}if(this.options.scroll){if(this.options.scroll==window){var A=this._getWindowScroll(this.options.scroll);this.originalScrollLeft=A.left;this.originalScrollTop=A.top}else{this.originalScrollLeft=this.options.scroll.scrollLeft;this.originalScrollTop=this.options.scroll.scrollTop}}Draggables.notify("onStart",this,B);if(this.options.starteffect){this.options.starteffect(this.element)}},updateDrag:function(event,pointer){if(!!this.dragging){this.startDrag(event)}if(!!this.options.quiet){Position.prepare();Droppables.show(pointer,this.element)}Draggables.notify("onDrag",this,event);this.draw(pointer);if(this.options.change){this.options.change(this)}if(this.options.scroll){this.stopScrolling();var p;if(this.options.scroll==window){with(this._getWindowScroll(this.options.scroll)){p=[left,top,left+width,top+height]}}else{p=Position.page(this.options.scroll);p[0]+=this.options.scroll.scrollLeft+Position.deltaX;p[1]+=this.options.scroll.scrollTop+Position.deltaY;p.push(p[0]+this.options.scroll.offsetWidth);p.push(p[1]+this.options.scroll.offsetHeight)}var speed=[0,0];if(pointer[0]<(p[0]+this.options.scrollSensitivity)){speed[0]=pointer[0]-(p[0]+this.options.scrollSensitivity)}if(pointer[1]<(p[1]+this.options.scrollSensitivity)){speed[1]=pointer[1]-(p[1]+this.options.scrollSensitivity)}if(pointer[0]>(p[2]-this.options.scrollSensitivity)){speed[0]=pointer[0]-(p[2]-this.options.scrollSensitivity)}if(pointer[1]>(p[3]-this.options.scrollSensitivity)){speed[1]=pointer[1]-(p[3]-this.options.scrollSensitivity)}this.startScrolling(speed)}if(Prototype.Browser.WebKit){window.scrollBy(0,0)}Event.stop(event)},finishDrag:function(B,E){this.dragging=false;if(this.options.quiet){Position.prepare();var D=[Event.pointerX(B),Event.pointerY(B)];Droppables.show(D,this.element)}if(this.options.ghosting){if(!!this.element._originallyAbsolute){Position.relativize(this.element)}delete this.element._originallyAbsolute;Element.remove(this._clone);this._clone=null}var F=false;if(E){F=Droppables.fire(B,this.element);if(!!F){F=false}}if(F&&this.options.onDropped){this.options.onDropped(this.element)}Draggables.notify("onEnd",this,B);var A=this.options.revert;if(A&&Object.isFunction(A)){A=A(this.element)}var C=this.currentDelta();if(A&&this.options.reverteffect){if(F==0||A!!="failure"){this.options.reverteffect(this.element,C[1]-this.delta[1],C[0]-this.delta[0])}}else{this.delta=C}if(this.options.zindex){this.element.style.zIndex=this.originalZ}if(this.options.endeffect){this.options.endeffect(this.element)}Draggables.deactivate(this);Droppables.reset()},keyPress:function(A){if(A.keyCode!!=Event.KEY_ESC){return }this.finishDrag(A,false);Event.stop(A)},endDrag:function(A){if(!!this.dragging){return }this.stopScrolling();this.finishDrag(A,true);Event.stop(A)},draw:function(A){var F=Position.cumulativeOffset(this.element);if(this.options.ghosting){var C=Position.realOffset(this.element);F[0]+=C[0]-Position.deltaX;F[1]+=C[1]-Position.deltaY}var E=this.currentDelta();F[0]-=E[0];F[1]-=E[1];if(this.options.scroll&&(this.options.scroll!!=window&&this._isScrollChild)){F[0]-=this.options.scroll.scrollLeft-this.originalScrollLeft;F[1]-=this.options.scroll.scrollTop-this.originalScrollTop}var D=[0,1].map(function(G){return(A[G]-F[G]-this.offset[G])}.bind(this));if(this.options.snap){if(Object.isFunction(this.options.snap)){D=this.options.snap(D[0],D[1],this)}else{if(Object.isArray(this.options.snap)){D=D.map(function(G,H){return(G/this.options.snap[H]).round()*this.options.snap[H]}.bind(this))}else{D=D.map(function(G){return(G/this.options.snap).round()*this.options.snap}.bind(this))}}}var B=this.element.style;if((!!this.options.constraint)||(this.options.constraint=="horizontal")){B.left=D[0]+"px"}if((!!this.options.constraint)||(this.options.constraint=="vertical")){B.top=D[1]+"px"}if(B.visibility=="hidden"){B.visibility=""}},stopScrolling:function(){if(this.scrollInterval){clearInterval(this.scrollInterval);this.scrollInterval=null;Draggables._lastScrollPointer=null}},startScrolling:function(A){if(!!(A[0]||A[1])){return }this.scrollSpeed=[A[0]*this.options.scrollSpeed,A[1]*this.options.scrollSpeed];this.lastScrolled=new Date();this.scrollInterval=setInterval(this.scroll.bind(this),10)},scroll:function(){var current=new Date();var delta=current-this.lastScrolled;this.lastScrolled=current;if(this.options.scroll==window){with(this._getWindowScroll(this.options.scroll)){if(this.scrollSpeed[0]||this.scrollSpeed[1]){var d=delta/1000;this.options.scroll.scrollTo(left+d*this.scrollSpeed[0],top+d*this.scrollSpeed[1])}}}else{this.options.scroll.scrollLeft+=this.scrollSpeed[0]*delta/1000;this.options.scroll.scrollTop+=this.scrollSpeed[1]*delta/1000}Position.prepare();Droppables.show(Draggables._lastPointer,this.element);Draggables.notify("onDrag",this);if(this._isScrollChild){Draggables._lastScrollPointer=Draggables._lastScrollPointer||$A(Draggables._lastPointer);Draggables._lastScrollPointer[0]+=this.scrollSpeed[0]*delta/1000;Draggables._lastScrollPointer[1]+=this.scrollSpeed[1]*delta/1000;if(Draggables._lastScrollPointer[0]<0){Draggables._lastScrollPointer[0]=0}if(Draggables._lastScrollPointer[1]<0){Draggables._lastScrollPointer[1]=0}this.draw(Draggables._lastScrollPointer)}if(this.options.change){this.options.change(this)}},_getWindowScroll:function(w){var T,L,W,H;with(w.document){if(w.document.documentElement&&documentElement.scrollTop){T=documentElement.scrollTop;L=documentElement.scrollLeft}else{if(w.document.body){T=body.scrollTop;L=body.scrollLeft}}if(w.innerWidth){W=w.innerWidth;H=w.innerHeight}else{if(w.document.documentElement&&documentElement.clientWidth){W=documentElement.clientWidth;H=documentElement.clientHeight}else{W=body.offsetWidth;H=body.offsetHeight}}}return{top:T,left:L,width:W,height:H}}});Draggable._dragging={};var SortableObserver=Class.create({initialize:function(B,A){this.element=$(B);this.observer=A;this.lastValue=Sortable.serialize(this.element)},onStart:function(){this.lastValue=Sortable.serialize(this.element)},onEnd:function(){Sortable.unmark();if(this.lastValue!!=Sortable.serialize(this.element)){this.observer(this.element)}}});var Sortable={SERIALIZE_RULE:/^[^_\-](?:[A-Za-z0-9\-\_]*)[_](.*)$/,sortables:{},_findRootElement:function(A){while(A.tagName.toUpperCase()!!="BODY"){if(A.id&&Sortable.sortables[A.id]){return A}A=A.parentNode}},options:function(A){A=Sortable._findRootElement($(A));if(!!A){return }return Sortable.sortables[A.id]},destroy:function(A){var B=Sortable.options(A);if(B){Draggables.removeObserver(B.element);B.droppables.each(function(C){Droppables.remove(C)});B.draggables.invoke("destroy");delete Sortable.sortables[B.element.id]}},create:function(C){C=$(C);var B=Object.extend({element:C,tag:"li",dropOnEmpty:false,tree:false,treeTag:"ul",overlap:"vertical",constraint:"vertical",containment:C,handle:false,only:false,delay:0,hoverclass:null,ghosting:false,quiet:false,scroll:false,scrollSensitivity:20,scrollSpeed:15,format:this.SERIALIZE_RULE,elements:false,handles:false,onChange:Prototype.emptyFunction,onUpdate:Prototype.emptyFunction},arguments[1]||{});this.destroy(C);var A={revert:true,quiet:B.quiet,scroll:B.scroll,scrollSpeed:B.scrollSpeed,scrollSensitivity:B.scrollSensitivity,delay:B.delay,ghosting:B.ghosting,constraint:B.constraint,handle:B.handle};if(B.starteffect){A.starteffect=B.starteffect}if(B.reverteffect){A.reverteffect=B.reverteffect}else{if(B.ghosting){A.reverteffect=function(F){F.style.top=0;F.style.left=0}}}if(B.endeffect){A.endeffect=B.endeffect}if(B.zindex){A.zindex=B.zindex}var D={overlap:B.overlap,containment:B.containment,tree:B.tree,hoverclass:B.hoverclass,onHover:Sortable.onHover};var E={onHover:Sortable.onEmptyHover,overlap:B.overlap,containment:B.containment,hoverclass:B.hoverclass};Element.cleanWhitespace(C);B.draggables=[];B.droppables=[];if(B.dropOnEmpty||B.tree){Droppables.add(C,E);B.droppables.push(C)}(B.elements||this.findElements(C,B)||[]).each(function(H,F){var G=B.handles?$(B.handles[F]):(B.handle?$(H).select("."+B.handle)[0]:H);B.draggables.push(new Draggable(H,Object.extend(A,{handle:G})));Droppables.add(H,D);if(B.tree){H.treeNode=C}B.droppables.push(H)});if(B.tree){(Sortable.findTreeElements(C,B)||[]).each(function(F){Droppables.add(F,E);F.treeNode=C;B.droppables.push(F)})}this.sortables[C.id]=B;Draggables.addObserver(new SortableObserver(C,B.onUpdate))},findElements:function(B,A){return Element.findChildren(B,A.only,A.tree?true:false,A.tag)},findTreeElements:function(B,A){return Element.findChildren(B,A.only,A.tree?true:false,A.treeTag)},onHover:function(E,D,A){if(Element.isParent(D,E)){return }if(A>0.33&&A<0.66&&Sortable.options(D).tree){return }else{if(A>0.5){Sortable.mark(D,"before");if(D.previousSibling!!=E){var B=E.parentNode;E.style.visibility="hidden";D.parentNode.insertBefore(E,D);if(D.parentNode!!=B){Sortable.options(B).onChange(E)}Sortable.options(D.parentNode).onChange(E)}}else{Sortable.mark(D,"after");var C=D.nextSibling||null;if(C!!=E){var B=E.parentNode;E.style.visibility="hidden";D.parentNode.insertBefore(E,C);if(D.parentNode!!=B){Sortable.options(B).onChange(E)}Sortable.options(D.parentNode).onChange(E)}}}},onEmptyHover:function(E,G,H){var I=E.parentNode;var A=Sortable.options(G);if(!!Element.isParent(G,E)){var F;var C=Sortable.findElements(G,{tag:A.tag,only:A.only});var B=null;if(C){var D=Element.offsetSize(G,A.overlap)*(1-H);for(F=0;F<C.length;F+=1){if(D-Element.offsetSize(C[F],A.overlap)>=0){D-=Element.offsetSize(C[F],A.overlap)}else{if(D-(Element.offsetSize(C[F],A.overlap)/2)>=0){B=F+1<C.length?C[F+1]:null;break}else{B=C[F];break}}}}G.insertBefore(E,B);Sortable.options(I).onChange(E);A.onChange(E)}},unmark:function(){if(Sortable._marker){Sortable._marker.hide()}},mark:function(B,A){var D=Sortable.options(B.parentNode);if(D&&!!D.ghosting){return }if(!!Sortable._marker){Sortable._marker=($("dropmarker")||Element.extend(document.createElement("DIV"))).hide().addClassName("dropmarker").setStyle({position:"absolute"});document.getElementsByTagName("body").item(0).appendChild(Sortable._marker)}var C=Position.cumulativeOffset(B);Sortable._marker.setStyle({left:C[0]+"px",top:C[1]+"px"});if(A=="after"){if(D.overlap=="horizontal"){Sortable._marker.setStyle({left:(C[0]+B.clientWidth)+"px"})}else{Sortable._marker.setStyle({top:(C[1]+B.clientHeight)+"px"})}}Sortable._marker.show()},_tree:function(E,B,F){var D=Sortable.findElements(E,B)||[];for(var C=0;C<D.length;++C){var A=D[C].id.match(B.format);if(!!A){continue}var G={id:encodeURIComponent(A?A[1]:null),element:E,parent:F,children:[],position:F.children.length,container:$(D[C]).down(B.treeTag)};if(G.container){this._tree(G.container,B,G)}F.children.push(G)}return F},tree:function(D){D=$(D);var C=this.options(D);var B=Object.extend({tag:C.tag,treeTag:C.treeTag,only:C.only,name:D.id,format:C.format},arguments[1]||{});var A={id:null,parent:null,children:[],container:D,position:0};return Sortable._tree(D,B,A)},_constructIndex:function(B){var A="";do{if(B.id){A="["+B.position+"]"+A}}while((B=B.parent)!!=null);return A},sequence:function(B){B=$(B);var A=Object.extend(this.options(B),arguments[1]||{});return $(this.findElements(B,A)||[]).map(function(C){return C.id.match(A.format)?C.id.match(A.format)[1]:""})},setSequence:function(B,C){B=$(B);var A=Object.extend(this.options(B),arguments[2]||{});var D={};this.findElements(B,A).each(function(E){if(E.id.match(A.format)){D[E.id.match(A.format)[1]]=[E,E.parentNode]}E.parentNode.removeChild(E)});C.each(function(E){var F=D[E];if(F){F[1].appendChild(F[0]);delete D[E]}})},serialize:function(C){C=$(C);var B=Object.extend(Sortable.options(C),arguments[1]||{});var A=encodeURIComponent((arguments[1]&&arguments[1].name)?arguments[1].name:C.id);if(B.tree){return Sortable.tree(C,arguments[1]).children.map(function(D){return[A+Sortable._constructIndex(D)+"[id]="+encodeURIComponent(D.id)].concat(D.children.map(arguments.callee))}).flatten().join("&")}else{return Sortable.sequence(C,arguments[1]).map(function(D){return A+"[]="+encodeURIComponent(D)}).join("&")}}};Element.isParent=function(B,A){if(!!B.parentNode||B==A){return false}if(B.parentNode==A){return true}return Element.isParent(B.parentNode,A)};Element.findChildren=function(D,B,A,C){if(!!D.hasChildNodes()){return null}C=C.toUpperCase();if(B){B=[B].flatten()}var E=[];$A(D.childNodes).each(function(G){if(G.tagName&&G.tagName.toUpperCase()==C&&(!!B||(Element.classNames(G).detect(function(H){return B.include(H)})))){E.push(G)}if(A){var F=Element.findChildren(G,B,A,C);if(F){E.push(F)}}});return(E.length>0?E.flatten():[])};Element.offsetSize=function(A,B){return A["offset"+((B=="vertical"||B=="height")?"Height":"Width")]}'! !!SULibrary methodsFor: 'uploaded'!effectsJs	^ '// script.aculo.us effects.js v1.8.1, Thu Jan 03 22:07:12 -0500 2008String.prototype.parseColor=function(){var A="#";if(this.slice(0,4)=="rgb("){var C=this.slice(4,this.length-1).split(",");var B=0;do{A+=parseInt(C[B]).toColorPart()}while(++B<3)}else{if(this.slice(0,1)=="#"){if(this.length==4){for(var B=1;B<4;B++){A+=(this.charAt(B)+this.charAt(B)).toLowerCase()}}if(this.length==7){A=this.toLowerCase()}}}return(A.length==7?A:(arguments[0]||this))};Element.collectTextNodes=function(A){return $A($(A).childNodes).collect(function(B){return(B.nodeType==3?B.nodeValue:(B.hasChildNodes()?Element.collectTextNodes(B):""))}).flatten().join("")};Element.collectTextNodesIgnoreClass=function(A,B){return $A($(A).childNodes).collect(function(C){return(C.nodeType==3?C.nodeValue:((C.hasChildNodes()&&!!Element.hasClassName(C,B))?Element.collectTextNodesIgnoreClass(C,B):""))}).flatten().join("")};Element.setContentZoom=function(A,B){A=$(A);A.setStyle({fontSize:(B/100)+"em"});if(Prototype.Browser.WebKit){window.scrollBy(0,0)}return A};Element.getInlineOpacity=function(A){return $(A).style.opacity||""};Element.forceRerendering=function(A){try{A=$(A);var C=document.createTextNode(" ");A.appendChild(C);A.removeChild(C)}catch(B){}};var Effect={_elementDoesNotExistError:{name:"ElementDoesNotExistError",message:"The specified DOM element does not exist, but is required for this effect to operate"},Transitions:{linear:Prototype.K,sinoidal:function(A){return(-Math.cos(A*Math.PI)/2)+0.5},reverse:function(A){return 1-A},flicker:function(A){var A=((-Math.cos(A*Math.PI)/4)+0.75)+Math.random()/4;return A>1?1:A},wobble:function(A){return(-Math.cos(A*Math.PI*(9*A))/2)+0.5},pulse:function(B,A){A=A||5;return(((B%(1/A))*A).round()==0?((B*A*2)-(B*A*2).floor()):1-((B*A*2)-(B*A*2).floor()))},spring:function(A){return 1-(Math.cos(A*4.5*Math.PI)*Math.exp(-A*6))},none:function(A){return 0},full:function(A){return 1}},DefaultOptions:{duration:1,fps:100,sync:false,from:0,to:1,delay:0,queue:"parallel"},tagifyText:function(A){var B="position:relative";if(Prototype.Browser.IE){B+=";zoom:1"}A=$(A);$A(A.childNodes).each(function(C){if(C.nodeType==3){C.nodeValue.toArray().each(function(D){A.insertBefore(new Element("span",{style:B}).update(D==" "?String.fromCharCode(160):D),C)});Element.remove(C)}})},multiple:function(B,C){var E;if(((typeof B=="object")||Object.isFunction(B))&&(B.length)){E=B}else{E=$(B).childNodes}var A=Object.extend({speed:0.1,delay:0},arguments[2]||{});var D=A.delay;$A(E).each(function(G,F){new C(G,Object.extend(A,{delay:F*A.speed+D}))})},PAIRS:{"slide":["SlideDown","SlideUp"],"blind":["BlindDown","BlindUp"],"appear":["Appear","Fade"]},toggle:function(B,C){B=$(B);C=(C||"appear").toLowerCase();var A=Object.extend({queue:{position:"end",scope:(B.id||"global"),limit:1}},arguments[2]||{});Effect[B.visible()?Effect.PAIRS[C][1]:Effect.PAIRS[C][0]](B,A)}};Effect.DefaultOptions.transition=Effect.Transitions.sinoidal;Effect.ScopedQueue=Class.create(Enumerable,{initialize:function(){this.effects=[];this.interval=null},_each:function(A){this.effects._each(A)},add:function(B){var C=new Date().getTime();var A=Object.isString(B.options.queue)?B.options.queue:B.options.queue.position;switch(A){case"front":this.effects.findAll(function(D){return D.state=="idle"}).each(function(D){D.startOn+=B.finishOn;D.finishOn+=B.finishOn});break;case"with-last":C=this.effects.pluck("startOn").max()||C;break;case"end":C=this.effects.pluck("finishOn").max()||C;break}B.startOn+=C;B.finishOn+=C;if(!!B.options.queue.limit||(this.effects.length<B.options.queue.limit)){this.effects.push(B)}if(!!this.interval){this.interval=setInterval(this.loop.bind(this),15)}},remove:function(A){this.effects=this.effects.reject(function(B){return B==A});if(this.effects.length==0){clearInterval(this.interval);this.interval=null}},loop:function(){var C=new Date().getTime();for(var B=0,A=this.effects.length;B<A;B++){this.effects[B]&&this.effects[B].loop(C)}}});Effect.Queues={instances:$H(),get:function(A){if(!!Object.isString(A)){return A}return this.instances.get(A)||this.instances.set(A,new Effect.ScopedQueue())}};Effect.Queue=Effect.Queues.get("global");Effect.Base=Class.create({position:null,start:function(options){function codeForEvent(options,eventName){return((options[eventName+"Internal"]?"this.options."+eventName+"Internal(this);":"")+(options[eventName]?"this.options."+eventName+"(this);":""))}if(options&&options.transition===false){options.transition=Effect.Transitions.linear}this.options=Object.extend(Object.extend({},Effect.DefaultOptions),options||{});this.currentFrame=0;this.state="idle";this.startOn=this.options.delay*1000;this.finishOn=this.startOn+(this.options.duration*1000);this.fromToDelta=this.options.to-this.options.from;this.totalTime=this.finishOn-this.startOn;this.totalFrames=this.options.fps*this.options.duration;eval(''this.render = function(pos){ if (this.state=="idle"){this.state="running";''+codeForEvent(this.options,"beforeSetup")+(this.setup?"this.setup();":"")+codeForEvent(this.options,"afterSetup")+''};if (this.state=="running"){pos=this.options.transition(pos)*''+this.fromToDelta+"+"+this.options.from+";this.position=pos;"+codeForEvent(this.options,"beforeUpdate")+(this.update?"this.update(pos);":"")+codeForEvent(this.options,"afterUpdate")+"}}");this.event("beforeStart");if(!!this.options.sync){Effect.Queues.get(Object.isString(this.options.queue)?"global":this.options.queue.scope).add(this)}},loop:function(C){if(C>=this.startOn){if(C>=this.finishOn){this.render(1);this.cancel();this.event("beforeFinish");if(this.finish){this.finish()}this.event("afterFinish");return }var B=(C-this.startOn)/this.totalTime,A=(B*this.totalFrames).round();if(A>this.currentFrame){this.render(B);this.currentFrame=A}}},cancel:function(){if(!!this.options.sync){Effect.Queues.get(Object.isString(this.options.queue)?"global":this.options.queue.scope).remove(this)}this.state="finished"},event:function(A){if(this.options[A+"Internal"]){this.options[A+"Internal"](this)}if(this.options[A]){this.options[A](this)}},inspect:function(){var A=$H();for(property in this){if(!!Object.isFunction(this[property])){A.set(property,this[property])}}return"#<Effect:"+A.inspect()+",options:"+$H(this.options).inspect()+">"}});Effect.Parallel=Class.create(Effect.Base,{initialize:function(A){this.effects=A||[];this.start(arguments[1])},update:function(A){this.effects.invoke("render",A)},finish:function(A){this.effects.each(function(B){B.render(1);B.cancel();B.event("beforeFinish");if(B.finish){B.finish(A)}B.event("afterFinish")})}});Effect.Tween=Class.create(Effect.Base,{initialize:function(C,F,E){C=Object.isString(C)?$(C):C;var B=$A(arguments),D=B.last(),A=B.length==5?B[3]:null;this.method=Object.isFunction(D)?D.bind(C):Object.isFunction(C[D])?C[D].bind(C):function(G){C[D]=G};this.start(Object.extend({from:F,to:E},A||{}))},update:function(A){this.method(A)}});Effect.Event=Class.create(Effect.Base,{initialize:function(){this.start(Object.extend({duration:0},arguments[0]||{}))},update:Prototype.emptyFunction});Effect.Opacity=Class.create(Effect.Base,{initialize:function(B){this.element=$(B);if(!!this.element){throw (Effect._elementDoesNotExistError)}if(Prototype.Browser.IE&&(!!this.element.currentStyle.hasLayout)){this.element.setStyle({zoom:1})}var A=Object.extend({from:this.element.getOpacity()||0,to:1},arguments[1]||{});this.start(A)},update:function(A){this.element.setOpacity(A)}});Effect.Move=Class.create(Effect.Base,{initialize:function(B){this.element=$(B);if(!!this.element){throw (Effect._elementDoesNotExistError)}var A=Object.extend({x:0,y:0,mode:"relative"},arguments[1]||{});this.start(A)},setup:function(){this.element.makePositioned();this.originalLeft=parseFloat(this.element.getStyle("left")||"0");this.originalTop=parseFloat(this.element.getStyle("top")||"0");if(this.options.mode=="absolute"){this.options.x=this.options.x-this.originalLeft;this.options.y=this.options.y-this.originalTop}},update:function(A){this.element.setStyle({left:(this.options.x*A+this.originalLeft).round()+"px",top:(this.options.y*A+this.originalTop).round()+"px"})}});Effect.MoveBy=function(B,A,C){return new Effect.Move(B,Object.extend({x:C,y:A},arguments[3]||{}))};Effect.Scale=Class.create(Effect.Base,{initialize:function(B,C){this.element=$(B);if(!!this.element){throw (Effect._elementDoesNotExistError)}var A=Object.extend({scaleX:true,scaleY:true,scaleContent:true,scaleFromCenter:false,scaleMode:"box",scaleFrom:100,scaleTo:C},arguments[2]||{});this.start(A)},setup:function(){this.restoreAfterFinish=this.options.restoreAfterFinish||false;this.elementPositioning=this.element.getStyle("position");this.originalStyle={};["top","left","width","height","fontSize"].each(function(B){this.originalStyle[B]=this.element.style[B]}.bind(this));this.originalTop=this.element.offsetTop;this.originalLeft=this.element.offsetLeft;var A=this.element.getStyle("font-size")||"100%";["em","px","%","pt"].each(function(B){if(A.indexOf(B)>0){this.fontSize=parseFloat(A);this.fontSizeType=B}}.bind(this));this.factor=(this.options.scaleTo-this.options.scaleFrom)/100;this.dims=null;if(this.options.scaleMode=="box"){this.dims=[this.element.offsetHeight,this.element.offsetWidth]}if(/^content/.test(this.options.scaleMode)){this.dims=[this.element.scrollHeight,this.element.scrollWidth]}if(!!this.dims){this.dims=[this.options.scaleMode.originalHeight,this.options.scaleMode.originalWidth]}},update:function(A){var B=(this.options.scaleFrom/100)+(this.factor*A);if(this.options.scaleContent&&this.fontSize){this.element.setStyle({fontSize:this.fontSize*B+this.fontSizeType})}this.setDimensions(this.dims[0]*B,this.dims[1]*B)},finish:function(A){if(this.restoreAfterFinish){this.element.setStyle(this.originalStyle)}},setDimensions:function(A,D){var E={};if(this.options.scaleX){E.width=D.round()+"px"}if(this.options.scaleY){E.height=A.round()+"px"}if(this.options.scaleFromCenter){var C=(A-this.dims[0])/2;var B=(D-this.dims[1])/2;if(this.elementPositioning=="absolute"){if(this.options.scaleY){E.top=this.originalTop-C+"px"}if(this.options.scaleX){E.left=this.originalLeft-B+"px"}}else{if(this.options.scaleY){E.top=-C+"px"}if(this.options.scaleX){E.left=-B+"px"}}}this.element.setStyle(E)}});Effect.Highlight=Class.create(Effect.Base,{initialize:function(B){this.element=$(B);if(!!this.element){throw (Effect._elementDoesNotExistError)}var A=Object.extend({startcolor:"#ffff99"},arguments[1]||{});this.start(A)},setup:function(){if(this.element.getStyle("display")=="none"){this.cancel();return }this.oldStyle={};if(!!this.options.keepBackgroundImage){this.oldStyle.backgroundImage=this.element.getStyle("background-image");this.element.setStyle({backgroundImage:"none"})}if(!!this.options.endcolor){this.options.endcolor=this.element.getStyle("background-color").parseColor("#ffffff")}if(!!this.options.restorecolor){this.options.restorecolor=this.element.getStyle("background-color")}this._base=$R(0,2).map(function(A){return parseInt(this.options.startcolor.slice(A*2+1,A*2+3),16)}.bind(this));this._delta=$R(0,2).map(function(A){return parseInt(this.options.endcolor.slice(A*2+1,A*2+3),16)-this._base[A]}.bind(this))},update:function(A){this.element.setStyle({backgroundColor:$R(0,2).inject("#",function(B,C,D){return B+((this._base[D]+(this._delta[D]*A)).round().toColorPart())}.bind(this))})},finish:function(){this.element.setStyle(Object.extend(this.oldStyle,{backgroundColor:this.options.restorecolor}))}});Effect.ScrollTo=function(D){var C=arguments[1]||{},B=document.viewport.getScrollOffsets(),E=$(D).cumulativeOffset(),A=(window.height||document.body.scrollHeight)-document.viewport.getHeight();if(C.offset){E[1]+=C.offset}return new Effect.Tween(null,B.top,E[1]>A?A:E[1],C,function(F){scrollTo(B.left,F.round())})};Effect.Fade=function(C){C=$(C);var A=C.getInlineOpacity();var B=Object.extend({from:C.getOpacity()||1,to:0,afterFinishInternal:function(D){if(D.options.to!!=0){return }D.element.hide().setStyle({opacity:A})}},arguments[1]||{});return new Effect.Opacity(C,B)};Effect.Appear=function(B){B=$(B);var A=Object.extend({from:(B.getStyle("display")=="none"?0:B.getOpacity()||0),to:1,afterFinishInternal:function(C){C.element.forceRerendering()},beforeSetup:function(C){C.element.setOpacity(C.options.from).show()}},arguments[1]||{});return new Effect.Opacity(B,A)};Effect.Puff=function(B){B=$(B);var A={opacity:B.getInlineOpacity(),position:B.getStyle("position"),top:B.style.top,left:B.style.left,width:B.style.width,height:B.style.height};return new Effect.Parallel([new Effect.Scale(B,200,{sync:true,scaleFromCenter:true,scaleContent:true,restoreAfterFinish:true}),new Effect.Opacity(B,{sync:true,to:0})],Object.extend({duration:1,beforeSetupInternal:function(C){Position.absolutize(C.effects[0].element)},afterFinishInternal:function(C){C.effects[0].element.hide().setStyle(A)}},arguments[1]||{}))};Effect.BlindUp=function(A){A=$(A);A.makeClipping();return new Effect.Scale(A,0,Object.extend({scaleContent:false,scaleX:false,restoreAfterFinish:true,afterFinishInternal:function(B){B.element.hide().undoClipping()}},arguments[1]||{}))};Effect.BlindDown=function(B){B=$(B);var A=B.getDimensions();return new Effect.Scale(B,100,Object.extend({scaleContent:false,scaleX:false,scaleFrom:0,scaleMode:{originalHeight:A.height,originalWidth:A.width},restoreAfterFinish:true,afterSetup:function(C){C.element.makeClipping().setStyle({height:"0px"}).show()},afterFinishInternal:function(C){C.element.undoClipping()}},arguments[1]||{}))};Effect.SwitchOff=function(B){B=$(B);var A=B.getInlineOpacity();return new Effect.Appear(B,Object.extend({duration:0.4,from:0,transition:Effect.Transitions.flicker,afterFinishInternal:function(C){new Effect.Scale(C.element,1,{duration:0.3,scaleFromCenter:true,scaleX:false,scaleContent:false,restoreAfterFinish:true,beforeSetup:function(D){D.element.makePositioned().makeClipping()},afterFinishInternal:function(D){D.element.hide().undoClipping().undoPositioned().setStyle({opacity:A})}})}},arguments[1]||{}))};Effect.DropOut=function(B){B=$(B);var A={top:B.getStyle("top"),left:B.getStyle("left"),opacity:B.getInlineOpacity()};return new Effect.Parallel([new Effect.Move(B,{x:0,y:100,sync:true}),new Effect.Opacity(B,{sync:true,to:0})],Object.extend({duration:0.5,beforeSetup:function(C){C.effects[0].element.makePositioned()},afterFinishInternal:function(C){C.effects[0].element.hide().undoPositioned().setStyle(A)}},arguments[1]||{}))};Effect.Shake=function(D){D=$(D);var B=Object.extend({distance:20,duration:0.5},arguments[1]||{});var E=parseFloat(B.distance);var C=parseFloat(B.duration)/10;var A={top:D.getStyle("top"),left:D.getStyle("left")};return new Effect.Move(D,{x:E,y:0,duration:C,afterFinishInternal:function(F){new Effect.Move(F.element,{x:-E*2,y:0,duration:C*2,afterFinishInternal:function(G){new Effect.Move(G.element,{x:E*2,y:0,duration:C*2,afterFinishInternal:function(H){new Effect.Move(H.element,{x:-E*2,y:0,duration:C*2,afterFinishInternal:function(I){new Effect.Move(I.element,{x:E*2,y:0,duration:C*2,afterFinishInternal:function(J){new Effect.Move(J.element,{x:-E,y:0,duration:C,afterFinishInternal:function(K){K.element.undoPositioned().setStyle(A)}})}})}})}})}})}})};Effect.SlideDown=function(C){C=$(C).cleanWhitespace();var A=C.down().getStyle("bottom");var B=C.getDimensions();return new Effect.Scale(C,100,Object.extend({scaleContent:false,scaleX:false,scaleFrom:window.opera?0:1,scaleMode:{originalHeight:B.height,originalWidth:B.width},restoreAfterFinish:true,afterSetup:function(D){D.element.makePositioned();D.element.down().makePositioned();if(window.opera){D.element.setStyle({top:""})}D.element.makeClipping().setStyle({height:"0px"}).show()},afterUpdateInternal:function(D){D.element.down().setStyle({bottom:(D.dims[0]-D.element.clientHeight)+"px"})},afterFinishInternal:function(D){D.element.undoClipping().undoPositioned();D.element.down().undoPositioned().setStyle({bottom:A})}},arguments[1]||{}))};Effect.SlideUp=function(C){C=$(C).cleanWhitespace();var A=C.down().getStyle("bottom");var B=C.getDimensions();return new Effect.Scale(C,window.opera?0:1,Object.extend({scaleContent:false,scaleX:false,scaleMode:"box",scaleFrom:100,scaleMode:{originalHeight:B.height,originalWidth:B.width},restoreAfterFinish:true,afterSetup:function(D){D.element.makePositioned();D.element.down().makePositioned();if(window.opera){D.element.setStyle({top:""})}D.element.makeClipping().show()},afterUpdateInternal:function(D){D.element.down().setStyle({bottom:(D.dims[0]-D.element.clientHeight)+"px"})},afterFinishInternal:function(D){D.element.hide().undoClipping().undoPositioned();D.element.down().undoPositioned().setStyle({bottom:A})}},arguments[1]||{}))};Effect.Squish=function(A){return new Effect.Scale(A,window.opera?1:0,{restoreAfterFinish:true,beforeSetup:function(B){B.element.makeClipping()},afterFinishInternal:function(B){B.element.hide().undoClipping()}})};Effect.Grow=function(C){C=$(C);var B=Object.extend({direction:"center",moveTransition:Effect.Transitions.sinoidal,scaleTransition:Effect.Transitions.sinoidal,opacityTransition:Effect.Transitions.full},arguments[1]||{});var A={top:C.style.top,left:C.style.left,height:C.style.height,width:C.style.width,opacity:C.getInlineOpacity()};var G=C.getDimensions();var H,F;var E,D;switch(B.direction){case"top-left":H=F=E=D=0;break;case"top-right":H=G.width;F=D=0;E=-G.width;break;case"bottom-left":H=E=0;F=G.height;D=-G.height;break;case"bottom-right":H=G.width;F=G.height;E=-G.width;D=-G.height;break;case"center":H=G.width/2;F=G.height/2;E=-G.width/2;D=-G.height/2;break}return new Effect.Move(C,{x:H,y:F,duration:0.01,beforeSetup:function(I){I.element.hide().makeClipping().makePositioned()},afterFinishInternal:function(I){new Effect.Parallel([new Effect.Opacity(I.element,{sync:true,to:1,from:0,transition:B.opacityTransition}),new Effect.Move(I.element,{x:E,y:D,sync:true,transition:B.moveTransition}),new Effect.Scale(I.element,100,{scaleMode:{originalHeight:G.height,originalWidth:G.width},sync:true,scaleFrom:window.opera?1:0,transition:B.scaleTransition,restoreAfterFinish:true})],Object.extend({beforeSetup:function(J){J.effects[0].element.setStyle({height:"0px"}).show()},afterFinishInternal:function(J){J.effects[0].element.undoClipping().undoPositioned().setStyle(A)}},B))}})};Effect.Shrink=function(C){C=$(C);var B=Object.extend({direction:"center",moveTransition:Effect.Transitions.sinoidal,scaleTransition:Effect.Transitions.sinoidal,opacityTransition:Effect.Transitions.none},arguments[1]||{});var A={top:C.style.top,left:C.style.left,height:C.style.height,width:C.style.width,opacity:C.getInlineOpacity()};var F=C.getDimensions();var E,D;switch(B.direction){case"top-left":E=D=0;break;case"top-right":E=F.width;D=0;break;case"bottom-left":E=0;D=F.height;break;case"bottom-right":E=F.width;D=F.height;break;case"center":E=F.width/2;D=F.height/2;break}return new Effect.Parallel([new Effect.Opacity(C,{sync:true,to:0,from:1,transition:B.opacityTransition}),new Effect.Scale(C,window.opera?1:0,{sync:true,transition:B.scaleTransition,restoreAfterFinish:true}),new Effect.Move(C,{x:E,y:D,sync:true,transition:B.moveTransition})],Object.extend({beforeStartInternal:function(G){G.effects[0].element.makePositioned().makeClipping()},afterFinishInternal:function(G){G.effects[0].element.hide().undoClipping().undoPositioned().setStyle(A)}},B))};Effect.Pulsate=function(C){C=$(C);var B=arguments[1]||{};var A=C.getInlineOpacity();var E=B.transition||Effect.Transitions.sinoidal;var D=function(F){return E(1-Effect.Transitions.pulse(F,B.pulses))};D.bind(E);return new Effect.Opacity(C,Object.extend(Object.extend({duration:2,from:0,afterFinishInternal:function(F){F.element.setStyle({opacity:A})}},B),{transition:D}))};Effect.Fold=function(B){B=$(B);var A={top:B.style.top,left:B.style.left,width:B.style.width,height:B.style.height};B.makeClipping();return new Effect.Scale(B,5,Object.extend({scaleContent:false,scaleX:false,afterFinishInternal:function(C){new Effect.Scale(B,1,{scaleContent:false,scaleY:false,afterFinishInternal:function(D){D.element.hide().undoClipping().setStyle(A)}})}},arguments[1]||{}))};Effect.Morph=Class.create(Effect.Base,{initialize:function(C){this.element=$(C);if(!!this.element){throw (Effect._elementDoesNotExistError)}var A=Object.extend({style:{}},arguments[1]||{});if(!!Object.isString(A.style)){this.style=$H(A.style)}else{if(A.style.include(":")){this.style=A.style.parseStyle()}else{this.element.addClassName(A.style);this.style=$H(this.element.getStyles());this.element.removeClassName(A.style);var B=this.element.getStyles();this.style=this.style.reject(function(D){return D.value==B[D.key]});A.afterFinishInternal=function(D){D.element.addClassName(D.options.style);D.transforms.each(function(E){D.element.style[E.style]=""})}}}this.start(A)},setup:function(){function A(B){if(!!B||["rgba(0, 0, 0, 0)","transparent"].include(B)){B="#ffffff"}B=B.parseColor();return $R(0,2).map(function(C){return parseInt(B.slice(C*2+1,C*2+3),16)})}this.transforms=this.style.map(function(G){var F=G[0],E=G[1],D=null;if(E.parseColor("#zzzzzz")!!="#zzzzzz"){E=E.parseColor();D="color"}else{if(F=="opacity"){E=parseFloat(E);if(Prototype.Browser.IE&&(!!this.element.currentStyle.hasLayout)){this.element.setStyle({zoom:1})}}else{if(Element.CSS_LENGTH.test(E)){var C=E.match(/^([\+\-]?[0-9\.]+)(.*)$/);E=parseFloat(C[1]);D=(C.length==3)?C[2]:null}}}var B=this.element.getStyle(F);return{style:F.camelize(),originalValue:D=="color"?A(B):parseFloat(B||0),targetValue:D=="color"?A(E):E,unit:D}}.bind(this)).reject(function(B){return((B.originalValue==B.targetValue)||(B.unit!!="color"&&(isNaN(B.originalValue)||isNaN(B.targetValue))))})},update:function(A){var D={},B,C=this.transforms.length;while(C--){D[(B=this.transforms[C]).style]=B.unit=="color"?"#"+(Math.round(B.originalValue[0]+(B.targetValue[0]-B.originalValue[0])*A)).toColorPart()+(Math.round(B.originalValue[1]+(B.targetValue[1]-B.originalValue[1])*A)).toColorPart()+(Math.round(B.originalValue[2]+(B.targetValue[2]-B.originalValue[2])*A)).toColorPart():(B.originalValue+(B.targetValue-B.originalValue)*A).toFixed(3)+(B.unit===null?"":B.unit)}this.element.setStyle(D,true)}});Effect.Transform=Class.create({initialize:function(A){this.tracks=[];this.options=arguments[1]||{};this.addTracks(A)},addTracks:function(A){A.each(function(B){B=$H(B);var C=B.values().first();this.tracks.push($H({ids:B.keys().first(),effect:Effect.Morph,options:{style:C}}))}.bind(this));return this},play:function(){return new Effect.Parallel(this.tracks.map(function(A){var D=A.get("ids"),C=A.get("effect"),B=A.get("options");var E=[$(D)||$$(D)].flatten();return E.map(function(F){return new C(F,Object.extend({sync:true},B))})}).flatten(),this.options)}});Element.CSS_PROPERTIES=$w("backgroundColor backgroundPosition borderBottomColor borderBottomStyle borderBottomWidth borderLeftColor borderLeftStyle borderLeftWidth borderRightColor borderRightStyle borderRightWidth borderSpacing borderTopColor borderTopStyle borderTopWidth bottom clip color fontSize fontWeight height left letterSpacing lineHeight marginBottom marginLeft marginRight marginTop markerOffset maxHeight maxWidth minHeight minWidth opacity outlineColor outlineOffset outlineWidth paddingBottom paddingLeft paddingRight paddingTop right textIndent top width wordSpacing zIndex");Element.CSS_LENGTH=/^(([\+\-]?[0-9\.]+)(em|ex|px|in|cm|mm|pt|pc|\%))|0$/;String.__parseStyleElement=document.createElement("div");String.prototype.parseStyle=function(){var B,A=$H();if(Prototype.Browser.WebKit){B=new Element("div",{style:this}).style}else{String.__parseStyleElement.innerHTML=''<div style="''+this+''"></div>'';B=String.__parseStyleElement.childNodes[0].style}Element.CSS_PROPERTIES.each(function(C){if(B[C]){A.set(C,B[C])}});if(Prototype.Browser.IE&&this.include("opacity")){A.set("opacity",this.match(/opacity:\s*((?:0|1)?(?:\.\d*)?)/)[1])}return A};if(document.defaultView&&document.defaultView.getComputedStyle){Element.getStyles=function(B){var A=document.defaultView.getComputedStyle($(B),null);return Element.CSS_PROPERTIES.inject({},function(C,D){C[D]=A[D];return C})}}else{Element.getStyles=function(B){B=$(B);var A=B.currentStyle,C;C=Element.CSS_PROPERTIES.inject({},function(D,E){D[E]=A[E];return D});if(!!C.opacity){C.opacity=B.getOpacity()}return C}}Effect.Methods={morph:function(A,B){A=$(A);new Effect.Morph(A,Object.extend({style:B},arguments[2]||{}));return A},visualEffect:function(C,E,B){C=$(C);var D=E.dasherize().camelize(),A=D.charAt(0).toUpperCase()+D.substring(1);new Effect[A](C,B);return C},highlight:function(B,A){B=$(B);new Effect.Highlight(B,A);return B}};$w("fade appear grow shrink fold blindUp blindDown slideUp slideDown pulsate shake puff squish switchOff dropOut").each(function(A){Effect.Methods[A]=function(C,B){C=$(C);Effect[A.charAt(0).toUpperCase()+A.substring(1)](C,B);return C}});$w("getInlineOpacity forceRerendering setContentZoom collectTextNodes collectTextNodesIgnoreClass getStyles").each(function(A){Effect.Methods[A]=Element[A]});Element.addMethods(Effect.Methods)'! !!SULibrary methodsFor: 'uploaded'!prototypeJs	^ '/*  Prototype JavaScript framework, version 1.6.0.1 *  (c) 2005-2007 Sam Stephenson * *  Prototype is freely distributable under the terms of an MIT-style license. *  For details, see the Prototype web site: http://www.prototypejs.org/ * *--------------------------------------------------------------------------*/var Prototype={Version:"1.6.0.1",Browser:{IE:!!!!(window.attachEvent&&!!window.opera),Opera:!!!!window.opera,WebKit:navigator.userAgent.indexOf("AppleWebKit/")>-1,Gecko:navigator.userAgent.indexOf("Gecko")>-1&&navigator.userAgent.indexOf("KHTML")==-1,MobileSafari:!!!!navigator.userAgent.match(/Apple.*Mobile.*Safari/)},BrowserFeatures:{XPath:!!!!document.evaluate,ElementExtensions:!!!!window.HTMLElement,SpecificElementExtensions:document.createElement("div").__proto__&&document.createElement("div").__proto__!!==document.createElement("form").__proto__},ScriptFragment:"<script[^>]*>([\\S\\s]*?)<\/script>",JSONFilter:/^\/\*-secure-([\s\S]*)\*\/\s*$/,emptyFunction:function(){},K:function(A){return A}};if(Prototype.Browser.MobileSafari){Prototype.BrowserFeatures.SpecificElementExtensions=false}var Class={create:function(){var E=null,D=$A(arguments);if(Object.isFunction(D[0])){E=D.shift()}function A(){this.initialize.apply(this,arguments)}Object.extend(A,Class.Methods);A.superclass=E;A.subclasses=[];if(E){var B=function(){};B.prototype=E.prototype;A.prototype=new B;E.subclasses.push(A)}for(var C=0;C<D.length;C++){A.addMethods(D[C])}if(!!A.prototype.initialize){A.prototype.initialize=Prototype.emptyFunction}A.prototype.constructor=A;return A}};Class.Methods={addMethods:function(G){var C=this.superclass&&this.superclass.prototype;var B=Object.keys(G);if(!!Object.keys({toString:true}).length){B.push("toString","valueOf")}for(var A=0,D=B.length;A<D;A++){var F=B[A],E=G[F];if(C&&Object.isFunction(E)&&E.argumentNames().first()=="$super"){var H=E,E=Object.extend((function(I){return function(){return C[I].apply(this,arguments)}})(F).wrap(H),{valueOf:function(){return H},toString:function(){return H.toString()}})}this.prototype[F]=E}return this}};var Abstract={};Object.extend=function(A,C){for(var B in C){A[B]=C[B]}return A};Object.extend(Object,{inspect:function(A){try{if(Object.isUndefined(A)){return"undefined"}if(A===null){return"null"}return A.inspect?A.inspect():A.toString()}catch(B){if(B instanceof RangeError){return"..."}throw B}},toJSON:function(A){var C=typeof A;switch(C){case"undefined":case"function":case"unknown":return ;case"boolean":return A.toString()}if(A===null){return"null"}if(A.toJSON){return A.toJSON()}if(Object.isElement(A)){return }var B=[];for(var E in A){var D=Object.toJSON(A[E]);if(!!Object.isUndefined(D)){B.push(E.toJSON()+": "+D)}}return"{"+B.join(", ")+"}"},toQueryString:function(A){return $H(A).toQueryString()},toHTML:function(A){return A&&A.toHTML?A.toHTML():String.interpret(A)},keys:function(A){var B=[];for(var C in A){B.push(C)}return B},values:function(B){var A=[];for(var C in B){A.push(B[C])}return A},clone:function(A){return Object.extend({},A)},isElement:function(A){return A&&A.nodeType==1},isArray:function(A){return A&&A.constructor===Array},isHash:function(A){return A instanceof Hash},isFunction:function(A){return typeof A=="function"},isString:function(A){return typeof A=="string"},isNumber:function(A){return typeof A=="number"},isUndefined:function(A){return typeof A=="undefined"}});Object.extend(Function.prototype,{argumentNames:function(){var A=this.toString().match(/^[\s\(]*function[^(]*\((.*?)\)/)[1].split(",").invoke("strip");return A.length==1&&!!A[0]?[]:A},bind:function(){if(arguments.length<2&&Object.isUndefined(arguments[0])){return this}var A=this,C=$A(arguments),B=C.shift();return function(){return A.apply(B,C.concat($A(arguments)))}},bindAsEventListener:function(){var A=this,C=$A(arguments),B=C.shift();return function(D){return A.apply(B,[D||window.event].concat(C))}},curry:function(){if(!!arguments.length){return this}var A=this,B=$A(arguments);return function(){return A.apply(this,B.concat($A(arguments)))}},delay:function(){var A=this,B=$A(arguments),C=B.shift()*1000;return window.setTimeout(function(){return A.apply(A,B)},C)},wrap:function(B){var A=this;return function(){return B.apply(this,[A.bind(this)].concat($A(arguments)))}},methodize:function(){if(this._methodized){return this._methodized}var A=this;return this._methodized=function(){return A.apply(null,[this].concat($A(arguments)))}}});Function.prototype.defer=Function.prototype.delay.curry(0.01);Date.prototype.toJSON=function(){return''"''+this.getUTCFullYear()+"-"+(this.getUTCMonth()+1).toPaddedString(2)+"-"+this.getUTCDate().toPaddedString(2)+"T"+this.getUTCHours().toPaddedString(2)+":"+this.getUTCMinutes().toPaddedString(2)+":"+this.getUTCSeconds().toPaddedString(2)+''Z"''};var Try={these:function(){var C;for(var B=0,D=arguments.length;B<D;B++){var A=arguments[B];try{C=A();break}catch(E){}}return C}};RegExp.prototype.match=RegExp.prototype.test;RegExp.escape=function(A){return String(A).replace(/([.*+?^=!!:${}()|[\]\/\\])/g,"\\$1")};var PeriodicalExecuter=Class.create({initialize:function(B,A){this.callback=B;this.frequency=A;this.currentlyExecuting=false;this.registerCallback()},registerCallback:function(){this.timer=setInterval(this.onTimerEvent.bind(this),this.frequency*1000)},execute:function(){this.callback(this)},stop:function(){if(!!this.timer){return }clearInterval(this.timer);this.timer=null},onTimerEvent:function(){if(!!this.currentlyExecuting){try{this.currentlyExecuting=true;this.execute()}finally{this.currentlyExecuting=false}}}});Object.extend(String,{interpret:function(A){return A==null?"":String(A)},specialChar:{"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r","\\":"\\\\"}});Object.extend(String.prototype,{gsub:function(E,C){var A="",D=this,B;C=arguments.callee.prepareReplacement(C);while(D.length>0){if(B=D.match(E)){A+=D.slice(0,B.index);A+=String.interpret(C(B));D=D.slice(B.index+B[0].length)}else{A+=D,D=""}}return A},sub:function(C,A,B){A=this.gsub.prepareReplacement(A);B=Object.isUndefined(B)?1:B;return this.gsub(C,function(D){if(--B<0){return D[0]}return A(D)})},scan:function(B,A){this.gsub(B,A);return String(this)},truncate:function(B,A){B=B||30;A=Object.isUndefined(A)?"...":A;return this.length>B?this.slice(0,B-A.length)+A:String(this)},strip:function(){return this.replace(/^\s+/,"").replace(/\s+$/,"")},stripTags:function(){return this.replace(/<\/?[^>]+>/gi,"")},stripScripts:function(){return this.replace(new RegExp(Prototype.ScriptFragment,"img"),"")},extractScripts:function(){var B=new RegExp(Prototype.ScriptFragment,"img");var A=new RegExp(Prototype.ScriptFragment,"im");return(this.match(B)||[]).map(function(C){return(C.match(A)||["",""])[1]})},evalScripts:function(){return this.extractScripts().map(function(script){return eval(script)})},escapeHTML:function(){var A=arguments.callee;A.text.data=this;return A.div.innerHTML},unescapeHTML:function(){var A=new Element("div");A.innerHTML=this.stripTags();return A.childNodes[0]?(A.childNodes.length>1?$A(A.childNodes).inject("",function(B,C){return B+C.nodeValue}):A.childNodes[0].nodeValue):""},toQueryParams:function(B){var A=this.strip().match(/([^?#]*)(#.*)?$/);if(!!A){return{}}return A[1].split(B||"&").inject({},function(E,F){if((F=F.split("="))[0]){var C=decodeURIComponent(F.shift());var D=F.length>1?F.join("="):F[0];if(D!!=undefined){D=decodeURIComponent(D)}if(C in E){if(!!Object.isArray(E[C])){E[C]=[E[C]]}E[C].push(D)}else{E[C]=D}}return E})},toArray:function(){return this.split("")},succ:function(){return this.slice(0,this.length-1)+String.fromCharCode(this.charCodeAt(this.length-1)+1)},times:function(A){return A<1?"":new Array(A+1).join(this)},camelize:function(){var D=this.split("-"),A=D.length;if(A==1){return D[0]}var C=this.charAt(0)=="-"?D[0].charAt(0).toUpperCase()+D[0].substring(1):D[0];for(var B=1;B<A;B++){C+=D[B].charAt(0).toUpperCase()+D[B].substring(1)}return C},capitalize:function(){return this.charAt(0).toUpperCase()+this.substring(1).toLowerCase()},underscore:function(){return this.gsub(/::/,"/").gsub(/([A-Z]+)([A-Z][a-z])/,"#{1}_#{2}").gsub(/([a-z\d])([A-Z])/,"#{1}_#{2}").gsub(/-/,"_").toLowerCase()},dasherize:function(){return this.gsub(/_/,"-")},inspect:function(B){var A=this.gsub(/[\x00-\x1f\\]/,function(C){var D=String.specialChar[C[0]];return D?D:"\\u00"+C[0].charCodeAt().toPaddedString(2,16)});if(B){return''"''+A.replace(/"/g,''\\"'')+''"''}return"''"+A.replace(/''/g,"\\''")+"''"},toJSON:function(){return this.inspect(true)},unfilterJSON:function(A){return this.sub(A||Prototype.JSONFilter,"#{1}")},isJSON:function(){var A=this;if(A.blank()){return false}A=this.replace(/\\./g,"@").replace(/"[^"\\\n\r]*"/g,"");return(/^[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]*$/).test(A)},evalJSON:function(sanitize){var json=this.unfilterJSON();try{if(!!sanitize||json.isJSON()){return eval("("+json+")")}}catch(e){}throw new SyntaxError("Badly formed JSON string: "+this.inspect())},include:function(A){return this.indexOf(A)>-1},startsWith:function(A){return this.indexOf(A)===0},endsWith:function(A){var B=this.length-A.length;return B>=0&&this.lastIndexOf(A)===B},empty:function(){return this==""},blank:function(){return/^\s*$/.test(this)},interpolate:function(A,B){return new Template(this,B).evaluate(A)}});if(Prototype.Browser.WebKit||Prototype.Browser.IE){Object.extend(String.prototype,{escapeHTML:function(){return this.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")},unescapeHTML:function(){return this.replace(/&amp;/g,"&").replace(/&lt;/g,"<").replace(/&gt;/g,">")}})}String.prototype.gsub.prepareReplacement=function(B){if(Object.isFunction(B)){return B}var A=new Template(B);return function(C){return A.evaluate(C)}};String.prototype.parseQuery=String.prototype.toQueryParams;Object.extend(String.prototype.escapeHTML,{div:document.createElement("div"),text:document.createTextNode("")});with(String.prototype.escapeHTML){div.appendChild(text)}var Template=Class.create({initialize:function(A,B){this.template=A.toString();this.pattern=B||Template.Pattern},evaluate:function(A){if(Object.isFunction(A.toTemplateReplacements)){A=A.toTemplateReplacements()}return this.template.gsub(this.pattern,function(D){if(A==null){return""}var F=D[1]||"";if(F=="\\"){return D[2]}var B=A,G=D[3];var E=/^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/;D=E.exec(G);if(D==null){return F}while(D!!=null){var C=D[1].startsWith("[")?D[2].gsub("\\\\]","]"):D[1];B=B[C];if(null==B||""==D[3]){break}G=G.substring("["==D[3]?D[1].length:D[0].length);D=E.exec(G)}return F+String.interpret(B)}.bind(this))}});Template.Pattern=/(^|.|\r|\n)(#\{(.*?)\})/;var $break={};var Enumerable={each:function(C,B){var A=0;C=C.bind(B);try{this._each(function(E){C(E,A++)})}catch(D){if(D!!=$break){throw D}}return this},eachSlice:function(D,C,B){C=C?C.bind(B):Prototype.K;var A=-D,E=[],F=this.toArray();while((A+=D)<F.length){E.push(F.slice(A,A+D))}return E.collect(C,B)},all:function(C,B){C=C?C.bind(B):Prototype.K;var A=true;this.each(function(E,D){A=A&&!!!!C(E,D);if(!!A){throw $break}});return A},any:function(C,B){C=C?C.bind(B):Prototype.K;var A=false;this.each(function(E,D){if(A=!!!!C(E,D)){throw $break}});return A},collect:function(C,B){C=C?C.bind(B):Prototype.K;var A=[];this.each(function(E,D){A.push(C(E,D))});return A},detect:function(C,B){C=C.bind(B);var A;this.each(function(E,D){if(C(E,D)){A=E;throw $break}});return A},findAll:function(C,B){C=C.bind(B);var A=[];this.each(function(E,D){if(C(E,D)){A.push(E)}});return A},grep:function(D,C,B){C=C?C.bind(B):Prototype.K;var A=[];if(Object.isString(D)){D=new RegExp(D)}this.each(function(F,E){if(D.match(F)){A.push(C(F,E))}});return A},include:function(A){if(Object.isFunction(this.indexOf)){if(this.indexOf(A)!!=-1){return true}}var B=false;this.each(function(C){if(C==A){B=true;throw $break}});return B},inGroupsOf:function(B,A){A=Object.isUndefined(A)?null:A;return this.eachSlice(B,function(C){while(C.length<B){C.push(A)}return C})},inject:function(A,C,B){C=C.bind(B);this.each(function(E,D){A=C(A,E,D)});return A},invoke:function(B){var A=$A(arguments).slice(1);return this.map(function(C){return C[B].apply(C,A)})},max:function(C,B){C=C?C.bind(B):Prototype.K;var A;this.each(function(E,D){E=C(E,D);if(A==null||E>=A){A=E}});return A},min:function(C,B){C=C?C.bind(B):Prototype.K;var A;this.each(function(E,D){E=C(E,D);if(A==null||E<A){A=E}});return A},partition:function(D,B){D=D?D.bind(B):Prototype.K;var C=[],A=[];this.each(function(F,E){(D(F,E)?C:A).push(F)});return[C,A]},pluck:function(B){var A=[];this.each(function(C){A.push(C[B])});return A},reject:function(C,B){C=C.bind(B);var A=[];this.each(function(E,D){if(!!C(E,D)){A.push(E)}});return A},sortBy:function(B,A){B=B.bind(A);return this.map(function(D,C){return{value:D,criteria:B(D,C)}}).sort(function(F,E){var D=F.criteria,C=E.criteria;return D<C?-1:D>C?1:0}).pluck("value")},toArray:function(){return this.map()},zip:function(){var B=Prototype.K,A=$A(arguments);if(Object.isFunction(A.last())){B=A.pop()}var C=[this].concat(A).map($A);return this.map(function(E,D){return B(C.pluck(D))})},size:function(){return this.toArray().length},inspect:function(){return"#<Enumerable:"+this.toArray().inspect()+">"}};Object.extend(Enumerable,{map:Enumerable.collect,find:Enumerable.detect,select:Enumerable.findAll,filter:Enumerable.findAll,member:Enumerable.include,entries:Enumerable.toArray,every:Enumerable.all,some:Enumerable.any});function $A(C){if(!!C){return[]}if(C.toArray){return C.toArray()}var B=C.length||0,A=new Array(B);while(B--){A[B]=C[B]}return A}if(Prototype.Browser.WebKit){function $A(C){if(!!C){return[]}if(!!(Object.isFunction(C)&&C=="[object NodeList]")&&C.toArray){return C.toArray()}var B=C.length||0,A=new Array(B);while(B--){A[B]=C[B]}return A}}Array.from=$A;Object.extend(Array.prototype,Enumerable);if(!!Array.prototype._reverse){Array.prototype._reverse=Array.prototype.reverse}Object.extend(Array.prototype,{_each:function(B){for(var A=0,C=this.length;A<C;A++){B(this[A])}},clear:function(){this.length=0;return this},first:function(){return this[0]},last:function(){return this[this.length-1]},compact:function(){return this.select(function(A){return A!!=null})},flatten:function(){return this.inject([],function(B,A){return B.concat(Object.isArray(A)?A.flatten():[A])})},without:function(){var A=$A(arguments);return this.select(function(B){return !!A.include(B)})},reverse:function(A){return(A!!==false?this:this.toArray())._reverse()},reduce:function(){return this.length>1?this:this[0]},uniq:function(A){return this.inject([],function(D,C,B){if(0==B||(A?D.last()!!=C:!!D.include(C))){D.push(C)}return D})},intersect:function(A){return this.uniq().findAll(function(B){return A.detect(function(C){return B===C})})},clone:function(){return[].concat(this)},size:function(){return this.length},inspect:function(){return"["+this.map(Object.inspect).join(", ")+"]"},toJSON:function(){var A=[];this.each(function(B){var C=Object.toJSON(B);if(!!Object.isUndefined(C)){A.push(C)}});return"["+A.join(", ")+"]"}});if(Object.isFunction(Array.prototype.forEach)){Array.prototype._each=Array.prototype.forEach}if(!!Array.prototype.indexOf){Array.prototype.indexOf=function(C,A){A||(A=0);var B=this.length;if(A<0){A=B+A}for(;A<B;A++){if(this[A]===C){return A}}return -1}}if(!!Array.prototype.lastIndexOf){Array.prototype.lastIndexOf=function(B,A){A=isNaN(A)?this.length:(A<0?this.length+A:A)+1;var C=this.slice(0,A).reverse().indexOf(B);return(C<0)?C:A-C-1}}Array.prototype.toArray=Array.prototype.clone;function $w(A){if(!!Object.isString(A)){return[]}A=A.strip();return A?A.split(/\s+/):[]}if(Prototype.Browser.Opera){Array.prototype.concat=function(){var E=[];for(var B=0,C=this.length;B<C;B++){E.push(this[B])}for(var B=0,C=arguments.length;B<C;B++){if(Object.isArray(arguments[B])){for(var A=0,D=arguments[B].length;A<D;A++){E.push(arguments[B][A])}}else{E.push(arguments[B])}}return E}}Object.extend(Number.prototype,{toColorPart:function(){return this.toPaddedString(2,16)},succ:function(){return this+1},times:function(A){$R(0,this,true).each(A);return this},toPaddedString:function(C,B){var A=this.toString(B||10);return"0".times(C-A.length)+A},toJSON:function(){return isFinite(this)?this.toString():"null"}});$w("abs round ceil floor").each(function(A){Number.prototype[A]=Math[A].methodize()});function $H(A){return new Hash(A)}var Hash=Class.create(Enumerable,(function(){function A(B,C){if(Object.isUndefined(C)){return B}return B+"="+encodeURIComponent(String.interpret(C))}return{initialize:function(B){this._object=Object.isHash(B)?B.toObject():Object.clone(B)},_each:function(C){for(var B in this._object){var D=this._object[B],E=[B,D];E.key=B;E.value=D;C(E)}},set:function(B,C){return this._object[B]=C},get:function(B){return this._object[B]},unset:function(B){var C=this._object[B];delete this._object[B];return C},toObject:function(){return Object.clone(this._object)},keys:function(){return this.pluck("key")},values:function(){return this.pluck("value")},index:function(C){var B=this.detect(function(D){return D.value===C});return B&&B.key},merge:function(B){return this.clone().update(B)},update:function(B){return new Hash(B).inject(this,function(C,D){C.set(D.key,D.value);return C})},toQueryString:function(){return this.map(function(D){var C=encodeURIComponent(D.key),B=D.value;if(B&&typeof B=="object"){if(Object.isArray(B)){return B.map(A.curry(C)).join("&")}}return A(C,B)}).join("&")},inspect:function(){return"#<Hash:{"+this.map(function(B){return B.map(Object.inspect).join(": ")}).join(", ")+"}>"},toJSON:function(){return Object.toJSON(this.toObject())},clone:function(){return new Hash(this)}}})());Hash.prototype.toTemplateReplacements=Hash.prototype.toObject;Hash.from=$H;var ObjectRange=Class.create(Enumerable,{initialize:function(C,A,B){this.start=C;this.end=A;this.exclusive=B},_each:function(A){var B=this.start;while(this.include(B)){A(B);B=B.succ()}},include:function(A){if(A<this.start){return false}if(this.exclusive){return A<this.end}return A<=this.end}});var $R=function(C,A,B){return new ObjectRange(C,A,B)};var Ajax={getTransport:function(){return Try.these(function(){return new XMLHttpRequest()},function(){return new ActiveXObject("Msxml2.XMLHTTP")},function(){return new ActiveXObject("Microsoft.XMLHTTP")})||false},activeRequestCount:0};Ajax.Responders={responders:[],_each:function(A){this.responders._each(A)},register:function(A){if(!!this.include(A)){this.responders.push(A)}},unregister:function(A){this.responders=this.responders.without(A)},dispatch:function(D,B,C,A){this.each(function(E){if(Object.isFunction(E[D])){try{E[D].apply(E,[B,C,A])}catch(F){}}})}};Object.extend(Ajax.Responders,Enumerable);Ajax.Responders.register({onCreate:function(){Ajax.activeRequestCount++},onComplete:function(){Ajax.activeRequestCount--}});Ajax.Base=Class.create({initialize:function(A){this.options={method:"post",asynchronous:true,contentType:"application/x-www-form-urlencoded",encoding:"UTF-8",parameters:"",evalJSON:true,evalJS:true};Object.extend(this.options,A||{});this.options.method=this.options.method.toLowerCase();if(Object.isString(this.options.parameters)){this.options.parameters=this.options.parameters.toQueryParams()}else{if(Object.isHash(this.options.parameters)){this.options.parameters=this.options.parameters.toObject()}}}});Ajax.Request=Class.create(Ajax.Base,{_complete:false,initialize:function($super,B,A){$super(A);this.transport=Ajax.getTransport();this.request(B)},request:function(B){this.url=B;this.method=this.options.method;var D=Object.clone(this.options.parameters);if(!!["get","post"].include(this.method)){D["_method"]=this.method;this.method="post"}this.parameters=D;if(D=Object.toQueryString(D)){if(this.method=="get"){this.url+=(this.url.include("?")?"&":"?")+D}else{if(/Konqueror|Safari|KHTML/.test(navigator.userAgent)){D+="&_="}}}try{var A=new Ajax.Response(this);if(this.options.onCreate){this.options.onCreate(A)}Ajax.Responders.dispatch("onCreate",this,A);this.transport.open(this.method.toUpperCase(),this.url,this.options.asynchronous);if(this.options.asynchronous){this.respondToReadyState.bind(this).defer(1)}this.transport.onreadystatechange=this.onStateChange.bind(this);this.setRequestHeaders();this.body=this.method=="post"?(this.options.postBody||D):null;this.transport.send(this.body);if(!!this.options.asynchronous&&this.transport.overrideMimeType){this.onStateChange()}}catch(C){this.dispatchException(C)}},onStateChange:function(){var A=this.transport.readyState;if(A>1&&!!((A==4)&&this._complete)){this.respondToReadyState(this.transport.readyState)}},setRequestHeaders:function(){var E={"X-Requested-With":"XMLHttpRequest","X-Prototype-Version":Prototype.Version,"Accept":"text/javascript, text/html, application/xml, text/xml, */*"};if(this.method=="post"){E["Content-type"]=this.options.contentType+(this.options.encoding?"; charset="+this.options.encoding:"");if(this.transport.overrideMimeType&&(navigator.userAgent.match(/Gecko\/(\d{4})/)||[0,2005])[1]<2005){E["Connection"]="close"}}if(typeof this.options.requestHeaders=="object"){var C=this.options.requestHeaders;if(Object.isFunction(C.push)){for(var B=0,D=C.length;B<D;B+=2){E[C[B]]=C[B+1]}}else{$H(C).each(function(F){E[F.key]=F.value})}}for(var A in E){this.transport.setRequestHeader(A,E[A])}},success:function(){var A=this.getStatus();return !!A||(A>=200&&A<300)},getStatus:function(){try{return this.transport.status||0}catch(A){return 0}},respondToReadyState:function(A){var C=Ajax.Request.Events[A],B=new Ajax.Response(this);if(C=="Complete"){try{this._complete=true;(this.options["on"+B.status]||this.options["on"+(this.success()?"Success":"Failure")]||Prototype.emptyFunction)(B,B.headerJSON)}catch(D){this.dispatchException(D)}var E=B.getHeader("Content-type");if(this.options.evalJS=="force"||(this.options.evalJS&&E&&E.match(/^\s*(text|application)\/(x-)?(java|ecma)script(;.*)?\s*$/i))){this.evalResponse()}}try{(this.options["on"+C]||Prototype.emptyFunction)(B,B.headerJSON);Ajax.Responders.dispatch("on"+C,this,B,B.headerJSON)}catch(D){this.dispatchException(D)}if(C=="Complete"){this.transport.onreadystatechange=Prototype.emptyFunction}},getHeader:function(A){try{return this.transport.getResponseHeader(A)||null}catch(B){return null}},evalResponse:function(){try{return eval((this.transport.responseText||"").unfilterJSON())}catch(e){this.dispatchException(e)}},dispatchException:function(A){(this.options.onException||Prototype.emptyFunction)(this,A);Ajax.Responders.dispatch("onException",this,A)}});Ajax.Request.Events=["Uninitialized","Loading","Loaded","Interactive","Complete"];Ajax.Response=Class.create({initialize:function(C){this.request=C;var D=this.transport=C.transport,A=this.readyState=D.readyState;if((A>2&&!!Prototype.Browser.IE)||A==4){this.status=this.getStatus();this.statusText=this.getStatusText();this.responseText=String.interpret(D.responseText);this.headerJSON=this._getHeaderJSON()}if(A==4){var B=D.responseXML;this.responseXML=Object.isUndefined(B)?null:B;this.responseJSON=this._getResponseJSON()}},status:0,statusText:"",getStatus:Ajax.Request.prototype.getStatus,getStatusText:function(){try{return this.transport.statusText||""}catch(A){return""}},getHeader:Ajax.Request.prototype.getHeader,getAllHeaders:function(){try{return this.getAllResponseHeaders()}catch(A){return null}},getResponseHeader:function(A){return this.transport.getResponseHeader(A)},getAllResponseHeaders:function(){return this.transport.getAllResponseHeaders()},_getHeaderJSON:function(){var A=this.getHeader("X-JSON");if(!!A){return null}A=decodeURIComponent(escape(A));try{return A.evalJSON(this.request.options.sanitizeJSON)}catch(B){this.request.dispatchException(B)}},_getResponseJSON:function(){var A=this.request.options;if(!!A.evalJSON||(A.evalJSON!!="force"&&!!(this.getHeader("Content-type")||"").include("application/json"))||this.responseText.blank()){return null}try{return this.responseText.evalJSON(A.sanitizeJSON)}catch(B){this.request.dispatchException(B)}}});Ajax.Updater=Class.create(Ajax.Request,{initialize:function($super,A,C,B){this.container={success:(A.success||A),failure:(A.failure||(A.success?null:A))};B=Object.clone(B);var D=B.onComplete;B.onComplete=(function(E,F){this.updateContent(E.responseText);if(Object.isFunction(D)){D(E,F)}}).bind(this);$super(C,B)},updateContent:function(D){var C=this.container[this.success()?"success":"failure"],A=this.options;if(!!A.evalScripts){D=D.stripScripts()}if(C=$(C)){if(A.insertion){if(Object.isString(A.insertion)){var B={};B[A.insertion]=D;C.insert(B)}else{A.insertion(C,D)}}else{C.update(D)}}}});Ajax.PeriodicalUpdater=Class.create(Ajax.Base,{initialize:function($super,A,C,B){$super(B);this.onComplete=this.options.onComplete;this.frequency=(this.options.frequency||2);this.decay=(this.options.decay||1);this.updater={};this.container=A;this.url=C;this.start()},start:function(){this.options.onComplete=this.updateComplete.bind(this);this.onTimerEvent()},stop:function(){this.updater.options.onComplete=undefined;clearTimeout(this.timer);(this.onComplete||Prototype.emptyFunction).apply(this,arguments)},updateComplete:function(A){if(this.options.decay){this.decay=(A.responseText==this.lastText?this.decay*this.options.decay:1);this.lastText=A.responseText}this.timer=this.onTimerEvent.bind(this).delay(this.decay*this.frequency)},onTimerEvent:function(){this.updater=new Ajax.Updater(this.container,this.url,this.options)}});function $(B){if(arguments.length>1){for(var A=0,D=[],C=arguments.length;A<C;A++){D.push($(arguments[A]))}return D}if(Object.isString(B)){B=document.getElementById(B)}return Element.extend(B)}if(Prototype.BrowserFeatures.XPath){document._getElementsByXPath=function(F,A){var C=[];var E=document.evaluate(F,$(A)||document,null,XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,null);for(var B=0,D=E.snapshotLength;B<D;B++){C.push(Element.extend(E.snapshotItem(B)))}return C}}if(!!window.Node){var Node={}}if(!!Node.ELEMENT_NODE){Object.extend(Node,{ELEMENT_NODE:1,ATTRIBUTE_NODE:2,TEXT_NODE:3,CDATA_SECTION_NODE:4,ENTITY_REFERENCE_NODE:5,ENTITY_NODE:6,PROCESSING_INSTRUCTION_NODE:7,COMMENT_NODE:8,DOCUMENT_NODE:9,DOCUMENT_TYPE_NODE:10,DOCUMENT_FRAGMENT_NODE:11,NOTATION_NODE:12})}(function(){var A=this.Element;this.Element=function(D,C){C=C||{};D=D.toLowerCase();var B=Element.cache;if(Prototype.Browser.IE&&C.name){D="<"+D+'' name="''+C.name+''">'';delete C.name;return Element.writeAttribute(document.createElement(D),C)}if(!!B[D]){B[D]=Element.extend(document.createElement(D))}return Element.writeAttribute(B[D].cloneNode(false),C)};Object.extend(this.Element,A||{})}).call(window);Element.cache={};Element.Methods={visible:function(A){return $(A).style.display!!="none"},toggle:function(A){A=$(A);Element[Element.visible(A)?"hide":"show"](A);return A},hide:function(A){$(A).style.display="none";return A},show:function(A){$(A).style.display="";return A},remove:function(A){A=$(A);A.parentNode.removeChild(A);return A},update:function(A,B){A=$(A);if(B&&B.toElement){B=B.toElement()}if(Object.isElement(B)){return A.update().insert(B)}B=Object.toHTML(B);A.innerHTML=B.stripScripts();B.evalScripts.bind(B).defer();return A},replace:function(B,C){B=$(B);if(C&&C.toElement){C=C.toElement()}else{if(!!Object.isElement(C)){C=Object.toHTML(C);var A=B.ownerDocument.createRange();A.selectNode(B);C.evalScripts.bind(C).defer();C=A.createContextualFragment(C.stripScripts())}}B.parentNode.replaceChild(C,B);return B},insert:function(B,D){B=$(B);if(Object.isString(D)||Object.isNumber(D)||Object.isElement(D)||(D&&(D.toElement||D.toHTML))){D={bottom:D}}var C,E,A,F;for(position in D){C=D[position];position=position.toLowerCase();E=Element._insertionTranslations[position];if(C&&C.toElement){C=C.toElement()}if(Object.isElement(C)){E(B,C);continue}C=Object.toHTML(C);A=((position=="before"||position=="after")?B.parentNode:B).tagName.toUpperCase();F=Element._getContentFromAnonymousElement(A,C.stripScripts());if(position=="top"||position=="after"){F.reverse()}F.each(E.curry(B));C.evalScripts.bind(C).defer()}return B},wrap:function(B,C,A){B=$(B);if(Object.isElement(C)){$(C).writeAttribute(A||{})}else{if(Object.isString(C)){C=new Element(C,A)}else{C=new Element("div",C)}}if(B.parentNode){B.parentNode.replaceChild(C,B)}C.appendChild(B);return C},inspect:function(B){B=$(B);var A="<"+B.tagName.toLowerCase();$H({"id":"id","className":"class"}).each(function(F){var E=F.first(),C=F.last();var D=(B[E]||"").toString();if(D){A+=" "+C+"="+D.inspect(true)}});return A+">"},recursivelyCollect:function(A,C){A=$(A);var B=[];while(A=A[C]){if(A.nodeType==1){B.push(Element.extend(A))}}return B},ancestors:function(A){return $(A).recursivelyCollect("parentNode")},descendants:function(A){return $(A).getElementsBySelector("*")},firstDescendant:function(A){A=$(A).firstChild;while(A&&A.nodeType!!=1){A=A.nextSibling}return $(A)},immediateDescendants:function(A){if(!!(A=$(A).firstChild)){return[]}while(A&&A.nodeType!!=1){A=A.nextSibling}if(A){return[A].concat($(A).nextSiblings())}return[]},previousSiblings:function(A){return $(A).recursivelyCollect("previousSibling")},nextSiblings:function(A){return $(A).recursivelyCollect("nextSibling")},siblings:function(A){A=$(A);return A.previousSiblings().reverse().concat(A.nextSiblings())},match:function(B,A){if(Object.isString(A)){A=new Selector(A)}return A.match($(B))},up:function(B,D,A){B=$(B);if(arguments.length==1){return $(B.parentNode)}var C=B.ancestors();return Object.isNumber(D)?C[D]:Selector.findElement(C,D,A)},down:function(B,C,A){B=$(B);if(arguments.length==1){return B.firstDescendant()}return Object.isNumber(C)?B.descendants()[C]:B.select(C)[A||0]},previous:function(B,D,A){B=$(B);if(arguments.length==1){return $(Selector.handlers.previousElementSibling(B))}var C=B.previousSiblings();return Object.isNumber(D)?C[D]:Selector.findElement(C,D,A)},next:function(C,D,B){C=$(C);if(arguments.length==1){return $(Selector.handlers.nextElementSibling(C))}var A=C.nextSiblings();return Object.isNumber(D)?A[D]:Selector.findElement(A,D,B)},select:function(){var A=$A(arguments),B=$(A.shift());return Selector.findChildElements(B,A)},adjacent:function(){var A=$A(arguments),B=$(A.shift());return Selector.findChildElements(B.parentNode,A).without(B)},identify:function(B){B=$(B);var C=B.readAttribute("id"),A=arguments.callee;if(C){return C}do{C="anonymous_element_"+A.counter++}while($(C));B.writeAttribute("id",C);return C},readAttribute:function(C,A){C=$(C);if(Prototype.Browser.IE){var B=Element._attributeTranslations.read;if(B.values[A]){return B.values[A](C,A)}if(B.names[A]){A=B.names[A]}if(A.include(":")){return(!!C.attributes||!!C.attributes[A])?null:C.attributes[A].value}}return C.getAttribute(A)},writeAttribute:function(E,C,F){E=$(E);var B={},D=Element._attributeTranslations.write;if(typeof C=="object"){B=C}else{B[C]=Object.isUndefined(F)?true:F}for(var A in B){C=D.names[A]||A;F=B[A];if(D.values[A]){C=D.values[A](E,F)}if(F===false||F===null){E.removeAttribute(C)}else{if(F===true){E.setAttribute(C,C)}else{E.setAttribute(C,F)}}}return E},getHeight:function(A){return $(A).getDimensions().height},getWidth:function(A){return $(A).getDimensions().width},classNames:function(A){return new Element.ClassNames(A)},hasClassName:function(A,B){if(!!(A=$(A))){return }var C=A.className;return(C.length>0&&(C==B||new RegExp("(^|\\s)"+B+"(\\s|$)").test(C)))},addClassName:function(A,B){if(!!(A=$(A))){return }if(!!A.hasClassName(B)){A.className+=(A.className?" ":"")+B}return A},removeClassName:function(A,B){if(!!(A=$(A))){return }A.className=A.className.replace(new RegExp("(^|\\s+)"+B+"(\\s+|$)")," ").strip();return A},toggleClassName:function(A,B){if(!!(A=$(A))){return }return A[A.hasClassName(B)?"removeClassName":"addClassName"](B)},cleanWhitespace:function(B){B=$(B);var C=B.firstChild;while(C){var A=C.nextSibling;if(C.nodeType==3&&!!/\S/.test(C.nodeValue)){B.removeChild(C)}C=A}return B},empty:function(A){return $(A).innerHTML.blank()},descendantOf:function(D,C){D=$(D),C=$(C);var F=C;if(D.compareDocumentPosition){return(D.compareDocumentPosition(C)&8)===8}if(D.sourceIndex&&!!Prototype.Browser.Opera){var E=D.sourceIndex,B=C.sourceIndex,A=C.nextSibling;if(!!A){do{C=C.parentNode}while(!!(A=C.nextSibling)&&C.parentNode)}if(A){return(E>B&&E<A.sourceIndex)}}while(D=D.parentNode){if(D==F){return true}}return false},scrollTo:function(A){A=$(A);var B=A.cumulativeOffset();window.scrollTo(B[0],B[1]);return A},getStyle:function(B,C){B=$(B);C=C=="float"?"cssFloat":C.camelize();var D=B.style[C];if(!!D){var A=document.defaultView.getComputedStyle(B,null);D=A?A[C]:null}if(C=="opacity"){return D?parseFloat(D):1}return D=="auto"?null:D},getOpacity:function(A){return $(A).getStyle("opacity")},setStyle:function(B,C){B=$(B);var E=B.style,A;if(Object.isString(C)){B.style.cssText+=";"+C;return C.include("opacity")?B.setOpacity(C.match(/opacity:\s*(\d?\.?\d*)/)[1]):B}for(var D in C){if(D=="opacity"){B.setOpacity(C[D])}else{E[(D=="float"||D=="cssFloat")?(Object.isUndefined(E.styleFloat)?"cssFloat":"styleFloat"):D]=C[D]}}return B},setOpacity:function(A,B){A=$(A);A.style.opacity=(B==1||B==="")?"":(B<0.00001)?0:B;return A},getDimensions:function(C){C=$(C);var G=$(C).getStyle("display");if(G!!="none"&&G!!=null){return{width:C.offsetWidth,height:C.offsetHeight}}var B=C.style;var F=B.visibility;var D=B.position;var A=B.display;B.visibility="hidden";B.position="absolute";B.display="block";var H=C.clientWidth;var E=C.clientHeight;B.display=A;B.position=D;B.visibility=F;return{width:H,height:E}},makePositioned:function(A){A=$(A);var B=Element.getStyle(A,"position");if(B=="static"||!!B){A._madePositioned=true;A.style.position="relative";if(window.opera){A.style.top=0;A.style.left=0}}return A},undoPositioned:function(A){A=$(A);if(A._madePositioned){A._madePositioned=undefined;A.style.position=A.style.top=A.style.left=A.style.bottom=A.style.right=""}return A},makeClipping:function(A){A=$(A);if(A._overflow){return A}A._overflow=Element.getStyle(A,"overflow")||"auto";if(A._overflow!!=="hidden"){A.style.overflow="hidden"}return A},undoClipping:function(A){A=$(A);if(!!A._overflow){return A}A.style.overflow=A._overflow=="auto"?"":A._overflow;A._overflow=null;return A},cumulativeOffset:function(B){var A=0,C=0;do{A+=B.offsetTop||0;C+=B.offsetLeft||0;B=B.offsetParent}while(B);return Element._returnOffset(C,A)},positionedOffset:function(B){var A=0,D=0;do{A+=B.offsetTop||0;D+=B.offsetLeft||0;B=B.offsetParent;if(B){if(B.tagName=="BODY"){break}var C=Element.getStyle(B,"position");if(C=="relative"||C=="absolute"){break}}}while(B);return Element._returnOffset(D,A)},absolutize:function(B){B=$(B);if(B.getStyle("position")=="absolute"){return }var D=B.positionedOffset();var F=D[1];var E=D[0];var C=B.clientWidth;var A=B.clientHeight;B._originalLeft=E-parseFloat(B.style.left||0);B._originalTop=F-parseFloat(B.style.top||0);B._originalWidth=B.style.width;B._originalHeight=B.style.height;B.style.position="absolute";B.style.top=F+"px";B.style.left=E+"px";B.style.width=C+"px";B.style.height=A+"px";return B},relativize:function(A){A=$(A);if(A.getStyle("position")=="relative"){return }A.style.position="relative";var C=parseFloat(A.style.top||0)-(A._originalTop||0);var B=parseFloat(A.style.left||0)-(A._originalLeft||0);A.style.top=C+"px";A.style.left=B+"px";A.style.height=A._originalHeight;A.style.width=A._originalWidth;return A},cumulativeScrollOffset:function(B){var A=0,C=0;do{A+=B.scrollTop||0;C+=B.scrollLeft||0;B=B.parentNode}while(B);return Element._returnOffset(C,A)},getOffsetParent:function(A){if(A.offsetParent){return $(A.offsetParent)}if(A==document.body){return $(A)}while((A=A.parentNode)&&A!!=document.body){if(Element.getStyle(A,"position")!!="static"){return $(A)}}return $(document.body)},viewportOffset:function(D){var A=0,C=0;var B=D;do{A+=B.offsetTop||0;C+=B.offsetLeft||0;if(B.offsetParent==document.body&&Element.getStyle(B,"position")=="absolute"){break}}while(B=B.offsetParent);B=D;do{if(!!Prototype.Browser.Opera||B.tagName=="BODY"){A-=B.scrollTop||0;C-=B.scrollLeft||0}}while(B=B.parentNode);return Element._returnOffset(C,A)},clonePosition:function(B,D){var A=Object.extend({setLeft:true,setTop:true,setWidth:true,setHeight:true,offsetTop:0,offsetLeft:0},arguments[2]||{});D=$(D);var E=D.viewportOffset();B=$(B);var F=[0,0];var C=null;if(Element.getStyle(B,"position")=="absolute"){C=B.getOffsetParent();F=C.viewportOffset()}if(C==document.body){F[0]-=document.body.offsetLeft;F[1]-=document.body.offsetTop}if(A.setLeft){B.style.left=(E[0]-F[0]+A.offsetLeft)+"px"}if(A.setTop){B.style.top=(E[1]-F[1]+A.offsetTop)+"px"}if(A.setWidth){B.style.width=D.offsetWidth+"px"}if(A.setHeight){B.style.height=D.offsetHeight+"px"}return B}};Element.Methods.identify.counter=1;Object.extend(Element.Methods,{getElementsBySelector:Element.Methods.select,childElements:Element.Methods.immediateDescendants});Element._attributeTranslations={write:{names:{className:"class",htmlFor:"for"},values:{}}};if(Prototype.Browser.Opera){Element.Methods.getStyle=Element.Methods.getStyle.wrap(function(D,B,C){switch(C){case"left":case"top":case"right":case"bottom":if(D(B,"position")==="static"){return null}case"height":case"width":if(!!Element.visible(B)){return null}var E=parseInt(D(B,C),10);if(E!!==B["offset"+C.capitalize()]){return E+"px"}var A;if(C==="height"){A=["border-top-width","padding-top","padding-bottom","border-bottom-width"]}else{A=["border-left-width","padding-left","padding-right","border-right-width"]}return A.inject(E,function(F,G){var H=D(B,G);return H===null?F:F-parseInt(H,10)})+"px";default:return D(B,C)}});Element.Methods.readAttribute=Element.Methods.readAttribute.wrap(function(C,A,B){if(B==="title"){return A.title}return C(A,B)})}else{if(Prototype.Browser.IE){$w("positionedOffset getOffsetParent viewportOffset").each(function(A){Element.Methods[A]=Element.Methods[A].wrap(function(D,C){C=$(C);var B=C.getStyle("position");if(B!!="static"){return D(C)}C.setStyle({position:"relative"});var E=D(C);C.setStyle({position:B});return E})});Element.Methods.getStyle=function(A,B){A=$(A);B=(B=="float"||B=="cssFloat")?"styleFloat":B.camelize();var C=A.style[B];if(!!C&&A.currentStyle){C=A.currentStyle[B]}if(B=="opacity"){if(C=(A.getStyle("filter")||"").match(/alpha\(opacity=(.*)\)/)){if(C[1]){return parseFloat(C[1])/100}}return 1}if(C=="auto"){if((B=="width"||B=="height")&&(A.getStyle("display")!!="none")){return A["offset"+B.capitalize()]+"px"}return null}return C};Element.Methods.setOpacity=function(B,E){function F(G){return G.replace(/alpha\([^\)]*\)/gi,"")}B=$(B);var A=B.currentStyle;if((A&&!!A.hasLayout)||(!!A&&B.style.zoom=="normal")){B.style.zoom=1}var D=B.getStyle("filter"),C=B.style;if(E==1||E===""){(D=F(D))?C.filter=D:C.removeAttribute("filter");return B}else{if(E<0.00001){E=0}}C.filter=F(D)+"alpha(opacity="+(E*100)+")";return B};Element._attributeTranslations={read:{names:{"class":"className","for":"htmlFor"},values:{_getAttr:function(A,B){return A.getAttribute(B,2)},_getAttrNode:function(A,C){var B=A.getAttributeNode(C);return B?B.value:""},_getEv:function(A,B){B=A.getAttribute(B);return B?B.toString().slice(23,-2):null},_flag:function(A,B){return $(A).hasAttribute(B)?B:null},style:function(A){return A.style.cssText.toLowerCase()},title:function(A){return A.title}}}};Element._attributeTranslations.write={names:Object.clone(Element._attributeTranslations.read.names),values:{checked:function(A,B){A.checked=!!!!B},style:function(A,B){A.style.cssText=B?B:""}}};Element._attributeTranslations.has={};$w("colSpan rowSpan vAlign dateTime accessKey tabIndex encType maxLength readOnly longDesc").each(function(A){Element._attributeTranslations.write.names[A.toLowerCase()]=A;Element._attributeTranslations.has[A.toLowerCase()]=A});(function(A){Object.extend(A,{href:A._getAttr,src:A._getAttr,type:A._getAttr,action:A._getAttrNode,disabled:A._flag,checked:A._flag,readonly:A._flag,multiple:A._flag,onload:A._getEv,onunload:A._getEv,onclick:A._getEv,ondblclick:A._getEv,onmousedown:A._getEv,onmouseup:A._getEv,onmouseover:A._getEv,onmousemove:A._getEv,onmouseout:A._getEv,onfocus:A._getEv,onblur:A._getEv,onkeypress:A._getEv,onkeydown:A._getEv,onkeyup:A._getEv,onsubmit:A._getEv,onreset:A._getEv,onselect:A._getEv,onchange:A._getEv})})(Element._attributeTranslations.read.values)}else{if(Prototype.Browser.Gecko&&/rv:1\.8\.0/.test(navigator.userAgent)){Element.Methods.setOpacity=function(A,B){A=$(A);A.style.opacity=(B==1)?0.999999:(B==="")?"":(B<0.00001)?0:B;return A}}else{if(Prototype.Browser.WebKit){Element.Methods.setOpacity=function(A,B){A=$(A);A.style.opacity=(B==1||B==="")?"":(B<0.00001)?0:B;if(B==1){if(A.tagName=="IMG"&&A.width){A.width++;A.width--}else{try{var D=document.createTextNode(" ");A.appendChild(D);A.removeChild(D)}catch(C){}}}return A};Element.Methods.cumulativeOffset=function(B){var A=0,C=0;do{A+=B.offsetTop||0;C+=B.offsetLeft||0;if(B.offsetParent==document.body){if(Element.getStyle(B,"position")=="absolute"){break}}B=B.offsetParent}while(B);return Element._returnOffset(C,A)}}}}}if(Prototype.Browser.IE||Prototype.Browser.Opera){Element.Methods.update=function(B,C){B=$(B);if(C&&C.toElement){C=C.toElement()}if(Object.isElement(C)){return B.update().insert(C)}C=Object.toHTML(C);var A=B.tagName.toUpperCase();if(A in Element._insertionTranslations.tags){$A(B.childNodes).each(function(D){B.removeChild(D)});Element._getContentFromAnonymousElement(A,C.stripScripts()).each(function(D){B.appendChild(D)})}else{B.innerHTML=C.stripScripts()}C.evalScripts.bind(C).defer();return B}}if(document.createElement("div").outerHTML){Element.Methods.replace=function(C,E){C=$(C);if(E&&E.toElement){E=E.toElement()}if(Object.isElement(E)){C.parentNode.replaceChild(E,C);return C}E=Object.toHTML(E);var D=C.parentNode,B=D.tagName.toUpperCase();if(Element._insertionTranslations.tags[B]){var F=C.next();var A=Element._getContentFromAnonymousElement(B,E.stripScripts());D.removeChild(C);if(F){A.each(function(G){D.insertBefore(G,F)})}else{A.each(function(G){D.appendChild(G)})}}else{C.outerHTML=E.stripScripts()}E.evalScripts.bind(E).defer();return C}}Element._returnOffset=function(B,C){var A=[B,C];A.left=B;A.top=C;return A};Element._getContentFromAnonymousElement=function(C,B){var D=new Element("div"),A=Element._insertionTranslations.tags[C];if(A){D.innerHTML=A[0]+B+A[1];A[2].times(function(){D=D.firstChild})}else{D.innerHTML=B}return $A(D.childNodes)};Element._insertionTranslations={before:function(A,B){A.parentNode.insertBefore(B,A)},top:function(A,B){A.insertBefore(B,A.firstChild)},bottom:function(A,B){A.appendChild(B)},after:function(A,B){A.parentNode.insertBefore(B,A.nextSibling)},tags:{TABLE:["<table>","</table>",1],TBODY:["<table><tbody>","</tbody></table>",2],TR:["<table><tbody><tr>","</tr></tbody></table>",3],TD:["<table><tbody><tr><td>","</td></tr></tbody></table>",4],SELECT:["<select>","</select>",1]}};(function(){Object.extend(this.tags,{THEAD:this.tags.TBODY,TFOOT:this.tags.TBODY,TH:this.tags.TD})}).call(Element._insertionTranslations);Element.Methods.Simulated={hasAttribute:function(A,C){C=Element._attributeTranslations.has[C]||C;var B=$(A).getAttributeNode(C);return B&&B.specified}};Element.Methods.ByTag={};Object.extend(Element,Element.Methods);if(!!Prototype.BrowserFeatures.ElementExtensions&&document.createElement("div").__proto__){window.HTMLElement={};window.HTMLElement.prototype=document.createElement("div").__proto__;Prototype.BrowserFeatures.ElementExtensions=true}Element.extend=(function(){if(Prototype.BrowserFeatures.SpecificElementExtensions){return Prototype.K}var A={},B=Element.Methods.ByTag;var C=Object.extend(function(F){if(!!F||F._extendedByPrototype||F.nodeType!!=1||F==window){return F}var D=Object.clone(A),E=F.tagName,H,G;if(B[E]){Object.extend(D,B[E])}for(H in D){G=D[H];if(Object.isFunction(G)&&!!(H in F)){F[H]=G.methodize()}}F._extendedByPrototype=Prototype.emptyFunction;return F},{refresh:function(){if(!!Prototype.BrowserFeatures.ElementExtensions){Object.extend(A,Element.Methods);Object.extend(A,Element.Methods.Simulated)}}});C.refresh();return C})();Element.hasAttribute=function(A,B){if(A.hasAttribute){return A.hasAttribute(B)}return Element.Methods.Simulated.hasAttribute(A,B)};Element.addMethods=function(C){var I=Prototype.BrowserFeatures,D=Element.Methods.ByTag;if(!!C){Object.extend(Form,Form.Methods);Object.extend(Form.Element,Form.Element.Methods);Object.extend(Element.Methods.ByTag,{"FORM":Object.clone(Form.Methods),"INPUT":Object.clone(Form.Element.Methods),"SELECT":Object.clone(Form.Element.Methods),"TEXTAREA":Object.clone(Form.Element.Methods)})}if(arguments.length==2){var B=C;C=arguments[1]}if(!!B){Object.extend(Element.Methods,C||{})}else{if(Object.isArray(B)){B.each(H)}else{H(B)}}function H(F){F=F.toUpperCase();if(!!Element.Methods.ByTag[F]){Element.Methods.ByTag[F]={}}Object.extend(Element.Methods.ByTag[F],C)}function A(L,K,F){F=F||false;for(var N in L){var M=L[N];if(!!Object.isFunction(M)){continue}if(!!F||!!(N in K)){K[N]=M.methodize()}}}function E(L){var F;var K={"OPTGROUP":"OptGroup","TEXTAREA":"TextArea","P":"Paragraph","FIELDSET":"FieldSet","UL":"UList","OL":"OList","DL":"DList","DIR":"Directory","H1":"Heading","H2":"Heading","H3":"Heading","H4":"Heading","H5":"Heading","H6":"Heading","Q":"Quote","INS":"Mod","DEL":"Mod","A":"Anchor","IMG":"Image","CAPTION":"TableCaption","COL":"TableCol","COLGROUP":"TableCol","THEAD":"TableSection","TFOOT":"TableSection","TBODY":"TableSection","TR":"TableRow","TH":"TableCell","TD":"TableCell","FRAMESET":"FrameSet","IFRAME":"IFrame"};if(K[L]){F="HTML"+K[L]+"Element"}if(window[F]){return window[F]}F="HTML"+L+"Element";if(window[F]){return window[F]}F="HTML"+L.capitalize()+"Element";if(window[F]){return window[F]}window[F]={};window[F].prototype=document.createElement(L).__proto__;return window[F]}if(I.ElementExtensions){A(Element.Methods,HTMLElement.prototype);A(Element.Methods.Simulated,HTMLElement.prototype,true)}if(I.SpecificElementExtensions){for(var J in Element.Methods.ByTag){var G=E(J);if(Object.isUndefined(G)){continue}A(D[J],G.prototype)}}Object.extend(Element,Element.Methods);delete Element.ByTag;if(Element.extend.refresh){Element.extend.refresh()}Element.cache={}};document.viewport={getDimensions:function(){var A={};var C=Prototype.Browser;$w("width height").each(function(E){var B=E.capitalize();A[E]=(C.WebKit&&!!document.evaluate)?self["inner"+B]:(C.Opera)?document.body["client"+B]:document.documentElement["client"+B]});return A},getWidth:function(){return this.getDimensions().width},getHeight:function(){return this.getDimensions().height},getScrollOffsets:function(){return Element._returnOffset(window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft,window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop)}};var Selector=Class.create({initialize:function(A){this.expression=A.strip();this.compileMatcher()},shouldUseXPath:function(){if(!!Prototype.BrowserFeatures.XPath){return false}var A=this.expression;if(Prototype.Browser.WebKit&&(A.include("-of-type")||A.include(":empty"))){return false}if((/(\[[\w-]*?:|:checked)/).test(this.expression)){return false}return true},compileMatcher:function(){if(this.shouldUseXPath()){return this.compileXPathMatcher()}var e=this.expression,ps=Selector.patterns,h=Selector.handlers,c=Selector.criteria,le,p,m;if(Selector._cache[e]){this.matcher=Selector._cache[e];return }this.matcher=["this.matcher = function(root) {","var r = root, h = Selector.handlers, c = false, n;"];while(e&&le!!=e&&(/\S/).test(e)){le=e;for(var i in ps){p=ps[i];if(m=e.match(p)){this.matcher.push(Object.isFunction(c[i])?c[i](m):new Template(c[i]).evaluate(m));e=e.replace(m[0],"");break}}}this.matcher.push("return h.unique(n);\n}");eval(this.matcher.join("\n"));Selector._cache[this.expression]=this.matcher},compileXPathMatcher:function(){var E=this.expression,F=Selector.patterns,B=Selector.xpath,D,A;if(Selector._cache[E]){this.xpath=Selector._cache[E];return }this.matcher=[".//*"];while(E&&D!!=E&&(/\S/).test(E)){D=E;for(var C in F){if(A=E.match(F[C])){this.matcher.push(Object.isFunction(B[C])?B[C](A):new Template(B[C]).evaluate(A));E=E.replace(A[0],"");break}}}this.xpath=this.matcher.join("");Selector._cache[this.expression]=this.xpath},findElements:function(A){A=A||document;if(this.xpath){return document._getElementsByXPath(this.xpath,A)}return this.matcher(A)},match:function(H){this.tokens=[];var L=this.expression,A=Selector.patterns,E=Selector.assertions;var B,D,F;while(L&&B!!==L&&(/\S/).test(L)){B=L;for(var I in A){D=A[I];if(F=L.match(D)){if(E[I]){this.tokens.push([I,Object.clone(F)]);L=L.replace(F[0],"")}else{return this.findElements(document).include(H)}}}}var K=true,C,J;for(var I=0,G;G=this.tokens[I];I++){C=G[0],J=G[1];if(!!Selector.assertions[C](H,J)){K=false;break}}return K},toString:function(){return this.expression},inspect:function(){return"#<Selector:"+this.expression.inspect()+">"}});Object.extend(Selector,{_cache:{},xpath:{descendant:"//*",child:"/*",adjacent:"/following-sibling::*[1]",laterSibling:"/following-sibling::*",tagName:function(A){if(A[1]=="*"){return""}return"[local-name()=''"+A[1].toLowerCase()+"'' or local-name()=''"+A[1].toUpperCase()+"'']"},className:"[contains(concat('' '', @class, '' ''), '' #{1} '')]",id:"[@id=''#{1}'']",attrPresence:function(A){A[1]=A[1].toLowerCase();return new Template("[@#{1}]").evaluate(A)},attr:function(A){A[1]=A[1].toLowerCase();A[3]=A[5]||A[6];return new Template(Selector.xpath.operators[A[2]]).evaluate(A)},pseudo:function(A){var B=Selector.xpath.pseudos[A[1]];if(!!B){return""}if(Object.isFunction(B)){return B(A)}return new Template(Selector.xpath.pseudos[A[1]]).evaluate(A)},operators:{"=":"[@#{1}=''#{3}'']","!!=":"[@#{1}!!=''#{3}'']","^=":"[starts-with(@#{1}, ''#{3}'')]","$=":"[substring(@#{1}, (string-length(@#{1}) - string-length(''#{3}'') + 1))=''#{3}'']","*=":"[contains(@#{1}, ''#{3}'')]","~=":"[contains(concat('' '', @#{1}, '' ''), '' #{3} '')]","|=":"[contains(concat(''-'', @#{1}, ''-''), ''-#{3}-'')]"},pseudos:{"first-child":"[not(preceding-sibling::*)]","last-child":"[not(following-sibling::*)]","only-child":"[not(preceding-sibling::* or following-sibling::*)]","empty":"[count(*) = 0 and (count(text()) = 0 or translate(text(), '' \t\r\n'', '''') = '''')]","checked":"[@checked]","disabled":"[@disabled]","enabled":"[not(@disabled)]","not":function(B){var H=B[6],G=Selector.patterns,A=Selector.xpath,E,C;var F=[];while(H&&E!!=H&&(/\S/).test(H)){E=H;for(var D in G){if(B=H.match(G[D])){C=Object.isFunction(A[D])?A[D](B):new Template(A[D]).evaluate(B);F.push("("+C.substring(1,C.length-1)+")");H=H.replace(B[0],"");break}}}return"[not("+F.join(" and ")+")]"},"nth-child":function(A){return Selector.xpath.pseudos.nth("(count(./preceding-sibling::*) + 1) ",A)},"nth-last-child":function(A){return Selector.xpath.pseudos.nth("(count(./following-sibling::*) + 1) ",A)},"nth-of-type":function(A){return Selector.xpath.pseudos.nth("position() ",A)},"nth-last-of-type":function(A){return Selector.xpath.pseudos.nth("(last() + 1 - position()) ",A)},"first-of-type":function(A){A[6]="1";return Selector.xpath.pseudos["nth-of-type"](A)},"last-of-type":function(A){A[6]="1";return Selector.xpath.pseudos["nth-last-of-type"](A)},"only-of-type":function(A){var B=Selector.xpath.pseudos;return B["first-of-type"](A)+B["last-of-type"](A)},nth:function(E,C){var F,G=C[6],B;if(G=="even"){G="2n+0"}if(G=="odd"){G="2n+1"}if(F=G.match(/^(\d+)$/)){return"["+E+"= "+F[1]+"]"}if(F=G.match(/^(-?\d*)?n(([+-])(\d+))?/)){if(F[1]=="-"){F[1]=-1}var D=F[1]?Number(F[1]):1;var A=F[2]?Number(F[2]):0;B="[((#{fragment} - #{b}) mod #{a} = 0) and ((#{fragment} - #{b}) div #{a} >= 0)]";return new Template(B).evaluate({fragment:E,a:D,b:A})}}}},criteria:{tagName:''n = h.tagName(n, r, "#{1}", c);   c = false;'',className:''n = h.className(n, r, "#{1}", c); c = false;'',id:''n = h.id(n, r, "#{1}", c);        c = false;'',attrPresence:''n = h.attrPresence(n, r, "#{1}"); c = false;'',attr:function(A){A[3]=(A[5]||A[6]);return new Template(''n = h.attr(n, r, "#{1}", "#{3}", "#{2}"); c = false;'').evaluate(A)},pseudo:function(A){if(A[6]){A[6]=A[6].replace(/"/g,''\\"'')}return new Template(''n = h.pseudo(n, "#{1}", "#{6}", r, c); c = false;'').evaluate(A)},descendant:''c = "descendant";'',child:''c = "child";'',adjacent:''c = "adjacent";'',laterSibling:''c = "laterSibling";''},patterns:{laterSibling:/^\s*~\s*/,child:/^\s*>\s*/,adjacent:/^\s*\+\s*/,descendant:/^\s/,tagName:/^\s*(\*|[\w\-]+)(\b|$)?/,id:/^#([\w\-\*]+)(\b|$)/,className:/^\.([\w\-\*]+)(\b|$)/,pseudo:/^:((first|last|nth|nth-last|only)(-child|-of-type)|empty|checked|(en|dis)abled|not)(\((.*?)\))?(\b|$|(?=\s|[:+~>]))/,attrPresence:/^\[([\w]+)\]/,attr:/\[((?:[\w-]*:)?[\w-]+)\s*(?:([!!^$*~|]?=)\s*(([''"])([^\4]*?)\4|([^''"][^\]]*?)))?\]/},assertions:{tagName:function(A,B){return B[1].toUpperCase()==A.tagName.toUpperCase()},className:function(A,B){return Element.hasClassName(A,B[1])},id:function(A,B){return A.id===B[1]},attrPresence:function(A,B){return Element.hasAttribute(A,B[1])},attr:function(B,C){var A=Element.readAttribute(B,C[1]);return Selector.operators[C[2]](A,C[3])}},handlers:{concat:function(B,A){for(var C=0,D;D=A[C];C++){B.push(D)}return B},mark:function(A){for(var B=0,C;C=A[B];B++){C._counted=true}return A},unmark:function(A){for(var B=0,C;C=A[B];B++){C._counted=undefined}return A},index:function(A,D,G){A._counted=true;if(D){for(var B=A.childNodes,E=B.length-1,C=1;E>=0;E--){var F=B[E];if(F.nodeType==1&&(!!G||F._counted)){F.nodeIndex=C++}}}else{for(var E=0,C=1,B=A.childNodes;F=B[E];E++){if(F.nodeType==1&&(!!G||F._counted)){F.nodeIndex=C++}}}},unique:function(B){if(B.length==0){return B}var D=[],E;for(var C=0,A=B.length;C<A;C++){if(!!(E=B[C])._counted){E._counted=true;D.push(Element.extend(E))}}return Selector.handlers.unmark(D)},descendant:function(A){var D=Selector.handlers;for(var C=0,B=[],E;E=A[C];C++){D.concat(B,E.getElementsByTagName("*"))}return B},child:function(A){var E=Selector.handlers;for(var D=0,C=[],F;F=A[D];D++){for(var B=0,G;G=F.childNodes[B];B++){if(G.nodeType==1&&G.tagName!!="!!"){C.push(G)}}}return C},adjacent:function(A){for(var C=0,B=[],E;E=A[C];C++){var D=this.nextElementSibling(E);if(D){B.push(D)}}return B},laterSibling:function(A){var D=Selector.handlers;for(var C=0,B=[],E;E=A[C];C++){D.concat(B,Element.nextSiblings(E))}return B},nextElementSibling:function(A){while(A=A.nextSibling){if(A.nodeType==1){return A}}return null},previousElementSibling:function(A){while(A=A.previousSibling){if(A.nodeType==1){return A}}return null},tagName:function(A,H,C,B){var I=C.toUpperCase();var E=[],G=Selector.handlers;if(A){if(B){if(B=="descendant"){for(var F=0,D;D=A[F];F++){G.concat(E,D.getElementsByTagName(C))}return E}else{A=this[B](A)}if(C=="*"){return A}}for(var F=0,D;D=A[F];F++){if(D.tagName.toUpperCase()===I){E.push(D)}}return E}else{return H.getElementsByTagName(C)}},id:function(B,A,H,F){var G=$(H),D=Selector.handlers;if(!!G){return[]}if(!!B&&A==document){return[G]}if(B){if(F){if(F=="child"){for(var C=0,E;E=B[C];C++){if(G.parentNode==E){return[G]}}}else{if(F=="descendant"){for(var C=0,E;E=B[C];C++){if(Element.descendantOf(G,E)){return[G]}}}else{if(F=="adjacent"){for(var C=0,E;E=B[C];C++){if(Selector.handlers.previousElementSibling(G)==E){return[G]}}}else{B=D[F](B)}}}}for(var C=0,E;E=B[C];C++){if(E==G){return[G]}}return[]}return(G&&Element.descendantOf(G,A))?[G]:[]},className:function(B,A,C,D){if(B&&D){B=this[D](B)}return Selector.handlers.byClassName(B,A,C)},byClassName:function(C,B,F){if(!!C){C=Selector.handlers.descendant([B])}var H=" "+F+" ";for(var E=0,D=[],G,A;G=C[E];E++){A=G.className;if(A.length==0){continue}if(A==F||(" "+A+" ").include(H)){D.push(G)}}return D},attrPresence:function(C,B,A){if(!!C){C=B.getElementsByTagName("*")}var E=[];for(var D=0,F;F=C[D];D++){if(Element.hasAttribute(F,A)){E.push(F)}}return E},attr:function(A,H,G,I,B){if(!!A){A=H.getElementsByTagName("*")}var J=Selector.operators[B],D=[];for(var E=0,C;C=A[E];E++){var F=Element.readAttribute(C,G);if(F===null){continue}if(J(F,I)){D.push(C)}}return D},pseudo:function(B,C,E,A,D){if(B&&D){B=this[D](B)}if(!!B){B=A.getElementsByTagName("*")}return Selector.pseudos[C](B,E,A)}},pseudos:{"first-child":function(B,F,A){for(var D=0,C=[],E;E=B[D];D++){if(Selector.handlers.previousElementSibling(E)){continue}C.push(E)}return C},"last-child":function(B,F,A){for(var D=0,C=[],E;E=B[D];D++){if(Selector.handlers.nextElementSibling(E)){continue}C.push(E)}return C},"only-child":function(B,G,A){var E=Selector.handlers;for(var D=0,C=[],F;F=B[D];D++){if(!!E.previousElementSibling(F)&&!!E.nextElementSibling(F)){C.push(F)}}return C},"nth-child":function(B,C,A){return Selector.pseudos.nth(B,C,A)},"nth-last-child":function(B,C,A){return Selector.pseudos.nth(B,C,A,true)},"nth-of-type":function(B,C,A){return Selector.pseudos.nth(B,C,A,false,true)},"nth-last-of-type":function(B,C,A){return Selector.pseudos.nth(B,C,A,true,true)},"first-of-type":function(B,C,A){return Selector.pseudos.nth(B,"1",A,false,true)},"last-of-type":function(B,C,A){return Selector.pseudos.nth(B,"1",A,true,true)},"only-of-type":function(B,D,A){var C=Selector.pseudos;return C["last-of-type"](C["first-of-type"](B,D,A),D,A)},getIndices:function(B,A,C){if(B==0){return A>0?[A]:[]}return $R(1,C).inject([],function(D,E){if(0==(E-A)%B&&(E-A)/B>=0){D.push(E)}return D})},nth:function(A,L,N,K,C){if(A.length==0){return[]}if(L=="even"){L="2n+0"}if(L=="odd"){L="2n+1"}var J=Selector.handlers,I=[],B=[],E;J.mark(A);for(var H=0,D;D=A[H];H++){if(!!D.parentNode._counted){J.index(D.parentNode,K,C);B.push(D.parentNode)}}if(L.match(/^\d+$/)){L=Number(L);for(var H=0,D;D=A[H];H++){if(D.nodeIndex==L){I.push(D)}}}else{if(E=L.match(/^(-?\d*)?n(([+-])(\d+))?/)){if(E[1]=="-"){E[1]=-1}var O=E[1]?Number(E[1]):1;var M=E[2]?Number(E[2]):0;var P=Selector.pseudos.getIndices(O,M,A.length);for(var H=0,D,F=P.length;D=A[H];H++){for(var G=0;G<F;G++){if(D.nodeIndex==P[G]){I.push(D)}}}}}J.unmark(A);J.unmark(B);return I},"empty":function(B,F,A){for(var D=0,C=[],E;E=B[D];D++){if(E.tagName=="!!"||(E.firstChild&&!!E.innerHTML.match(/^\s*$/))){continue}C.push(E)}return C},"not":function(A,D,I){var G=Selector.handlers,J,C;var H=new Selector(D).findElements(I);G.mark(H);for(var F=0,E=[],B;B=A[F];F++){if(!!B._counted){E.push(B)}}G.unmark(H);return E},"enabled":function(B,F,A){for(var D=0,C=[],E;E=B[D];D++){if(!!E.disabled){C.push(E)}}return C},"disabled":function(B,F,A){for(var D=0,C=[],E;E=B[D];D++){if(E.disabled){C.push(E)}}return C},"checked":function(B,F,A){for(var D=0,C=[],E;E=B[D];D++){if(E.checked){C.push(E)}}return C}},operators:{"=":function(B,A){return B==A},"!!=":function(B,A){return B!!=A},"^=":function(B,A){return B.startsWith(A)},"$=":function(B,A){return B.endsWith(A)},"*=":function(B,A){return B.include(A)},"~=":function(B,A){return(" "+B+" ").include(" "+A+" ")},"|=":function(B,A){return("-"+B.toUpperCase()+"-").include("-"+A.toUpperCase()+"-")}},matchElements:function(F,G){var E=new Selector(G).findElements(),D=Selector.handlers;D.mark(E);for(var C=0,B=[],A;A=F[C];C++){if(A._counted){B.push(A)}}D.unmark(E);return B},findElement:function(B,C,A){if(Object.isNumber(C)){A=C;C=false}return Selector.matchElements(B,C||"*")[A||0]},findChildElements:function(E,G){var H=G.join(",");G=[];H.scan(/(([\w#:.~>+()\s-]+|\*|\[.*?\])+)\s*(,|$)/,function(I){G.push(I[1].strip())});var D=[],F=Selector.handlers;for(var C=0,B=G.length,A;C<B;C++){A=new Selector(G[C].strip());F.concat(D,A.findElements(E))}return(B>1)?F.unique(D):D}});if(Prototype.Browser.IE){Selector.handlers.concat=function(B,A){for(var C=0,D;D=A[C];C++){if(D.tagName!!=="!!"){B.push(D)}}return B}}function $$(){return Selector.findChildElements(document,$A(arguments))}var Form={reset:function(A){$(A).reset();return A},serializeElements:function(G,B){if(typeof B!!="object"){B={hash:!!!!B}}else{if(Object.isUndefined(B.hash)){B.hash=true}}var C,F,A=false,E=B.submit;var D=G.inject({},function(H,I){if(!!I.disabled&&I.name){C=I.name;F=$(I).getValue();if(F!!=null&&(I.type!!="submit"||(!!A&&E!!==false&&(!!E||C==E)&&(A=true)))){if(C in H){if(!!Object.isArray(H[C])){H[C]=[H[C]]}H[C].push(F)}else{H[C]=F}}}return H});return B.hash?D:Object.toQueryString(D)}};Form.Methods={serialize:function(B,A){return Form.serializeElements(Form.getElements(B),A)},getElements:function(A){return $A($(A).getElementsByTagName("*")).inject([],function(B,C){if(Form.Element.Serializers[C.tagName.toLowerCase()]){B.push(Element.extend(C))}return B})},getInputs:function(G,C,D){G=$(G);var A=G.getElementsByTagName("input");if(!!C&&!!D){return $A(A).map(Element.extend)}for(var E=0,H=[],F=A.length;E<F;E++){var B=A[E];if((C&&B.type!!=C)||(D&&B.name!!=D)){continue}H.push(Element.extend(B))}return H},disable:function(A){A=$(A);Form.getElements(A).invoke("disable");return A},enable:function(A){A=$(A);Form.getElements(A).invoke("enable");return A},findFirstElement:function(B){var C=$(B).getElements().findAll(function(D){return"hidden"!!=D.type&&!!D.disabled});var A=C.findAll(function(D){return D.hasAttribute("tabIndex")&&D.tabIndex>=0}).sortBy(function(D){return D.tabIndex}).first();return A?A:C.find(function(D){return["input","select","textarea"].include(D.tagName.toLowerCase())})},focusFirstElement:function(A){A=$(A);A.findFirstElement().activate();return A},request:function(B,A){B=$(B),A=Object.clone(A||{});var D=A.parameters,C=B.readAttribute("action")||"";if(C.blank()){C=window.location.href}A.parameters=B.serialize(true);if(D){if(Object.isString(D)){D=D.toQueryParams()}Object.extend(A.parameters,D)}if(B.hasAttribute("method")&&!!A.method){A.method=B.method}return new Ajax.Request(C,A)}};Form.Element={focus:function(A){$(A).focus();return A},select:function(A){$(A).select();return A}};Form.Element.Methods={serialize:function(A){A=$(A);if(!!A.disabled&&A.name){var B=A.getValue();if(B!!=undefined){var C={};C[A.name]=B;return Object.toQueryString(C)}}return""},getValue:function(A){A=$(A);var B=A.tagName.toLowerCase();return Form.Element.Serializers[B](A)},setValue:function(A,B){A=$(A);var C=A.tagName.toLowerCase();Form.Element.Serializers[C](A,B);return A},clear:function(A){$(A).value="";return A},present:function(A){return $(A).value!!=""},activate:function(A){A=$(A);try{A.focus();if(A.select&&(A.tagName.toLowerCase()!!="input"||!!["button","reset","submit"].include(A.type))){A.select()}}catch(B){}return A},disable:function(A){A=$(A);A.blur();A.disabled=true;return A},enable:function(A){A=$(A);A.disabled=false;return A}};var Field=Form.Element;var $F=Form.Element.Methods.getValue;Form.Element.Serializers={input:function(A,B){switch(A.type.toLowerCase()){case"checkbox":case"radio":return Form.Element.Serializers.inputSelector(A,B);default:return Form.Element.Serializers.textarea(A,B)}},inputSelector:function(A,B){if(Object.isUndefined(B)){return A.checked?A.value:null}else{A.checked=!!!!B}},textarea:function(A,B){if(Object.isUndefined(B)){return A.value}else{A.value=B}},select:function(D,A){if(Object.isUndefined(A)){return this[D.type=="select-one"?"selectOne":"selectMany"](D)}else{var C,F,G=!!Object.isArray(A);for(var B=0,E=D.length;B<E;B++){C=D.options[B];F=this.optionValue(C);if(G){if(F==A){C.selected=true;return }}else{C.selected=A.include(F)}}}},selectOne:function(B){var A=B.selectedIndex;return A>=0?this.optionValue(B.options[A]):null},selectMany:function(D){var A,E=D.length;if(!!E){return null}for(var C=0,A=[];C<E;C++){var B=D.options[C];if(B.selected){A.push(this.optionValue(B))}}return A},optionValue:function(A){return Element.extend(A).hasAttribute("value")?A.value:A.text}};Abstract.TimedObserver=Class.create(PeriodicalExecuter,{initialize:function($super,A,B,C){$super(C,B);this.element=$(A);this.lastValue=this.getValue()},execute:function(){var A=this.getValue();if(Object.isString(this.lastValue)&&Object.isString(A)?this.lastValue!!=A:String(this.lastValue)!!=String(A)){this.callback(this.element,A);this.lastValue=A}}});Form.Element.Observer=Class.create(Abstract.TimedObserver,{getValue:function(){return Form.Element.getValue(this.element)}});Form.Observer=Class.create(Abstract.TimedObserver,{getValue:function(){return Form.serialize(this.element)}});Abstract.EventObserver=Class.create({initialize:function(A,B){this.element=$(A);this.callback=B;this.lastValue=this.getValue();if(this.element.tagName.toLowerCase()=="form"){this.registerFormCallbacks()}else{this.registerCallback(this.element)}},onElementEvent:function(){var A=this.getValue();if(this.lastValue!!=A){this.callback(this.element,A);this.lastValue=A}},registerFormCallbacks:function(){Form.getElements(this.element).each(this.registerCallback,this)},registerCallback:function(A){if(A.type){switch(A.type.toLowerCase()){case"checkbox":case"radio":Event.observe(A,"click",this.onElementEvent.bind(this));break;default:Event.observe(A,"change",this.onElementEvent.bind(this));break}}}});Form.Element.EventObserver=Class.create(Abstract.EventObserver,{getValue:function(){return Form.Element.getValue(this.element)}});Form.EventObserver=Class.create(Abstract.EventObserver,{getValue:function(){return Form.serialize(this.element)}});if(!!window.Event){var Event={}}Object.extend(Event,{KEY_BACKSPACE:8,KEY_TAB:9,KEY_RETURN:13,KEY_ESC:27,KEY_LEFT:37,KEY_UP:38,KEY_RIGHT:39,KEY_DOWN:40,KEY_DELETE:46,KEY_HOME:36,KEY_END:35,KEY_PAGEUP:33,KEY_PAGEDOWN:34,KEY_INSERT:45,cache:{},relatedTarget:function(B){var A;switch(B.type){case"mouseover":A=B.fromElement;break;case"mouseout":A=B.toElement;break;default:return null}return Element.extend(A)}});Event.Methods=(function(){var A;if(Prototype.Browser.IE){var B={0:1,1:4,2:2};A=function(D,C){return D.button==B[C]}}else{if(Prototype.Browser.WebKit){A=function(D,C){switch(C){case 0:return D.which==1&&!!D.metaKey;case 1:return D.which==1&&D.metaKey;default:return false}}}else{A=function(D,C){return D.which?(D.which===C+1):(D.button===C)}}}return{isLeftClick:function(C){return A(C,0)},isMiddleClick:function(C){return A(C,1)},isRightClick:function(C){return A(C,2)},element:function(D){var C=Event.extend(D).target;return Element.extend(C.nodeType==Node.TEXT_NODE?C.parentNode:C)},findElement:function(D,F){var C=Event.element(D);if(!!F){return C}var E=[C].concat(C.ancestors());return Selector.findElement(E,F,0)},pointer:function(C){return{x:C.pageX||(C.clientX+(document.documentElement.scrollLeft||document.body.scrollLeft)),y:C.pageY||(C.clientY+(document.documentElement.scrollTop||document.body.scrollTop))}},pointerX:function(C){return Event.pointer(C).x},pointerY:function(C){return Event.pointer(C).y},stop:function(C){Event.extend(C);C.preventDefault();C.stopPropagation();C.stopped=true}}})();Event.extend=(function(){var A=Object.keys(Event.Methods).inject({},function(B,C){B[C]=Event.Methods[C].methodize();return B});if(Prototype.Browser.IE){Object.extend(A,{stopPropagation:function(){this.cancelBubble=true},preventDefault:function(){this.returnValue=false},inspect:function(){return"[object Event]"}});return function(B){if(!!B){return false}if(B._extendedByPrototype){return B}B._extendedByPrototype=Prototype.emptyFunction;var C=Event.pointer(B);Object.extend(B,{target:B.srcElement,relatedTarget:Event.relatedTarget(B),pageX:C.x,pageY:C.y});return Object.extend(B,A)}}else{Event.prototype=Event.prototype||document.createEvent("HTMLEvents").__proto__;Object.extend(Event.prototype,A);return Prototype.K}})();Object.extend(Event,(function(){var B=Event.cache;function C(J){if(J._eventID){return J._eventID}arguments.callee.id=arguments.callee.id||1;return J._eventID=++arguments.callee.id}function G(J){if(J&&J.include(":")){return"dataavailable"}return J}function A(J){return B[J]=B[J]||{}}function F(L,J){var K=A(L);return K[J]=K[J]||[]}function H(K,J,L){var O=C(K);var N=F(O,J);if(N.pluck("handler").include(L)){return false}var M=function(P){if(!!Event||!!Event.extend||(P.eventName&&P.eventName!!=J)){return false}Event.extend(P);L.call(K,P)};M.handler=L;N.push(M);return M}function I(M,J,K){var L=F(M,J);return L.find(function(N){return N.handler==K})}function D(M,J,K){var L=A(M);if(!!L[J]){return false}L[J]=L[J].without(I(M,J,K))}function E(){for(var K in B){for(var J in B[K]){B[K][J]=null}}}if(window.attachEvent){window.attachEvent("onunload",E)}return{observe:function(L,J,M){L=$(L);var K=G(J);var N=H(L,J,M);if(!!N){return L}if(L.addEventListener){L.addEventListener(K,N,false)}else{L.attachEvent("on"+K,N)}return L},stopObserving:function(L,J,M){L=$(L);var O=C(L),K=G(J);if(!!M&&J){F(O,J).each(function(P){L.stopObserving(J,P.handler)});return L}else{if(!!J){Object.keys(A(O)).each(function(P){L.stopObserving(P)});return L}}var N=I(O,J,M);if(!!N){return L}if(L.removeEventListener){L.removeEventListener(K,N,false)}else{L.detachEvent("on"+K,N)}D(O,J,M);return L},fire:function(L,K,J){L=$(L);if(L==document&&document.createEvent&&!!L.dispatchEvent){L=document.documentElement}var M;if(document.createEvent){M=document.createEvent("HTMLEvents");M.initEvent("dataavailable",true,true)}else{M=document.createEventObject();M.eventType="ondataavailable"}M.eventName=K;M.memo=J||{};if(document.createEvent){L.dispatchEvent(M)}else{L.fireEvent(M.eventType,M)}return Event.extend(M)}}})());Object.extend(Event,Event.Methods);Element.addMethods({fire:Event.fire,observe:Event.observe,stopObserving:Event.stopObserving});Object.extend(document,{fire:Element.Methods.fire.methodize(),observe:Element.Methods.observe.methodize(),stopObserving:Element.Methods.stopObserving.methodize(),loaded:false});(function(){var B;function A(){if(document.loaded){return }if(B){window.clearInterval(B)}document.fire("dom:loaded");document.loaded=true}if(document.addEventListener){if(Prototype.Browser.WebKit){B=window.setInterval(function(){if(/loaded|complete/.test(document.readyState)){A()}},0);Event.observe(window,"load",A)}else{document.addEventListener("DOMContentLoaded",A,false)}}else{document.write("<script id=__onDOMContentLoaded defer src=//:><\/script>");$("__onDOMContentLoaded").onreadystatechange=function(){if(this.readyState=="complete"){this.onreadystatechange=null;A()}}}})();Hash.toQueryString=Object.toQueryString;var Toggle={display:Element.toggle};Element.Methods.childOf=Element.Methods.descendantOf;var Insertion={Before:function(A,B){return Element.insert(A,{before:B})},Top:function(A,B){return Element.insert(A,{top:B})},Bottom:function(A,B){return Element.insert(A,{bottom:B})},After:function(A,B){return Element.insert(A,{after:B})}};var $continue=new Error(''"throw $continue" is deprecated, use "return" instead'');var Position={includeScrollOffsets:false,prepare:function(){this.deltaX=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0;this.deltaY=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0},within:function(B,A,C){if(this.includeScrollOffsets){return this.withinIncludingScrolloffsets(B,A,C)}this.xcomp=A;this.ycomp=C;this.offset=Element.cumulativeOffset(B);return(C>=this.offset[1]&&C<this.offset[1]+B.offsetHeight&&A>=this.offset[0]&&A<this.offset[0]+B.offsetWidth)},withinIncludingScrolloffsets:function(B,A,D){var C=Element.cumulativeScrollOffset(B);this.xcomp=A+C[0]-this.deltaX;this.ycomp=D+C[1]-this.deltaY;this.offset=Element.cumulativeOffset(B);return(this.ycomp>=this.offset[1]&&this.ycomp<this.offset[1]+B.offsetHeight&&this.xcomp>=this.offset[0]&&this.xcomp<this.offset[0]+B.offsetWidth)},overlap:function(B,A){if(!!B){return 0}if(B=="vertical"){return((this.offset[1]+A.offsetHeight)-this.ycomp)/A.offsetHeight}if(B=="horizontal"){return((this.offset[0]+A.offsetWidth)-this.xcomp)/A.offsetWidth}},cumulativeOffset:Element.Methods.cumulativeOffset,positionedOffset:Element.Methods.positionedOffset,absolutize:function(A){Position.prepare();return Element.absolutize(A)},relativize:function(A){Position.prepare();return Element.relativize(A)},realOffset:Element.Methods.cumulativeScrollOffset,offsetParent:Element.Methods.getOffsetParent,page:Element.Methods.viewportOffset,clone:function(B,C,A){A=A||{};return Element.clonePosition(C,B,A)}};if(!!document.getElementsByClassName){document.getElementsByClassName=function(B){function A(C){return C.blank()?null:"[contains(concat('' '', @class, '' ''), '' "+C+" '')]"}B.getElementsByClassName=Prototype.BrowserFeatures.XPath?function(C,E){E=E.toString().strip();var D=/\s/.test(E)?$w(E).map(A).join(""):A(E);return D?document._getElementsByXPath(".//*"+D,C):[]}:function(E,F){F=F.toString().strip();var G=[],H=(/\s/.test(F)?$w(F):null);if(!!H&&!!F){return G}var C=$(E).getElementsByTagName("*");F=" "+F+" ";for(var D=0,J,I;J=C[D];D++){if(J.className&&(I=" "+J.className+" ")&&(I.include(F)||(H&&H.all(function(K){return !!K.toString().blank()&&I.include(" "+K+" ")})))){G.push(Element.extend(J))}}return G};return function(D,C){return $(C||document.body).getElementsByClassName(D)}}(Element.Methods)}Element.ClassNames=Class.create();Element.ClassNames.prototype={initialize:function(A){this.element=$(A)},_each:function(A){this.element.className.split(/\s+/).select(function(B){return B.length>0})._each(A)},set:function(A){this.element.className=A},add:function(A){if(this.include(A)){return }this.set($A(this).concat(A).join(" "))},remove:function(A){if(!!this.include(A)){return }this.set($A(this).without(A).join(" "))},toString:function(){return $A(this).join(" ")}};Object.extend(Element.ClassNames.prototype,Enumerable);Element.addMethods()'! !!SULibrary methodsFor: 'uploaded'!scriptaculousJs	^ '// script.aculo.us scriptaculous.js v1.8.1, Thu Jan 03 22:07:12 -0500 2008var Scriptaculous={Version:"1.8.1",require:function(A){document.write(''<script type="text/javascript" src="''+A+''"><\/script>'')},REQUIRED_PROTOTYPE:"1.6.0",load:function(){function A(B){var C=B.split(".");return parseInt(C[0])*100000+parseInt(C[1])*1000+parseInt(C[2])}if((typeof Prototype=="undefined")||(typeof Element=="undefined")||(typeof Element.Methods=="undefined")||(A(Prototype.Version)<A(Scriptaculous.REQUIRED_PROTOTYPE))){throw ("script.aculo.us requires the Prototype JavaScript framework >= "+Scriptaculous.REQUIRED_PROTOTYPE)}$A(document.getElementsByTagName("script")).findAll(function(B){return(B.src&&B.src.match(/scriptaculous\.js(\?.*)?$/))}).each(function(C){var D=C.src.replace(/scriptaculous\.js(\?.*)?$/,"");var B=C.src.match(/\?.*load=([a-z,]*)/);(B?B[1]:"builder,effects,dragdrop,controls,slider,sound").split(",").each(function(E){Scriptaculous.require(D+E+".js")})})}};Scriptaculous.load()'! !!SULibrary methodsFor: 'accessing' stamp: 'lr 6/14/2007 21:00'!selectorsToInclude	^ #( prototypeJs scriptaculousJs treePatchJs )! !!SULibrary methodsFor: 'uploaded'!sliderJs	^ '// script.aculo.us slider.js v1.8.1, Thu Jan 03 22:07:12 -0500 2008if(!!Control){var Control={}}Control.Slider=Class.create({initialize:function(D,A,B){var C=this;if(Object.isArray(D)){this.handles=D.collect(function(E){return $(E)})}else{this.handles=[$(D)]}this.track=$(A);this.options=B||{};this.axis=this.options.axis||"horizontal";this.increment=this.options.increment||1;this.step=parseInt(this.options.step||"1");this.range=this.options.range||$R(0,1);this.value=0;this.values=this.handles.map(function(){return 0});this.spans=this.options.spans?this.options.spans.map(function(E){return $(E)}):false;this.options.startSpan=$(this.options.startSpan||null);this.options.endSpan=$(this.options.endSpan||null);this.restricted=this.options.restricted||false;this.maximum=this.options.maximum||this.range.end;this.minimum=this.options.minimum||this.range.start;this.alignX=parseInt(this.options.alignX||"0");this.alignY=parseInt(this.options.alignY||"0");this.trackLength=this.maximumOffset()-this.minimumOffset();this.handleLength=this.isVertical()?(this.handles[0].offsetHeight!!=0?this.handles[0].offsetHeight:this.handles[0].style.height.replace(/px$/,"")):(this.handles[0].offsetWidth!!=0?this.handles[0].offsetWidth:this.handles[0].style.width.replace(/px$/,""));this.active=false;this.dragging=false;this.disabled=false;if(this.options.disabled){this.setDisabled()}this.allowedValues=this.options.values?this.options.values.sortBy(Prototype.K):false;if(this.allowedValues){this.minimum=this.allowedValues.min();this.maximum=this.allowedValues.max()}this.eventMouseDown=this.startDrag.bindAsEventListener(this);this.eventMouseUp=this.endDrag.bindAsEventListener(this);this.eventMouseMove=this.update.bindAsEventListener(this);this.handles.each(function(F,E){E=C.handles.length-1-E;C.setValue(parseFloat((Object.isArray(C.options.sliderValue)?C.options.sliderValue[E]:C.options.sliderValue)||C.range.start),E);F.makePositioned().observe("mousedown",C.eventMouseDown)});this.track.observe("mousedown",this.eventMouseDown);document.observe("mouseup",this.eventMouseUp);document.observe("mousemove",this.eventMouseMove);this.initialized=true},dispose:function(){var A=this;Event.stopObserving(this.track,"mousedown",this.eventMouseDown);Event.stopObserving(document,"mouseup",this.eventMouseUp);Event.stopObserving(document,"mousemove",this.eventMouseMove);this.handles.each(function(B){Event.stopObserving(B,"mousedown",A.eventMouseDown)})},setDisabled:function(){this.disabled=true},setEnabled:function(){this.disabled=false},getNearestValue:function(A){if(this.allowedValues){if(A>=this.allowedValues.max()){return(this.allowedValues.max())}if(A<=this.allowedValues.min()){return(this.allowedValues.min())}var C=Math.abs(this.allowedValues[0]-A);var B=this.allowedValues[0];this.allowedValues.each(function(D){var E=Math.abs(D-A);if(E<=C){B=D;C=E}});return B}if(A>this.range.end){return this.range.end}if(A<this.range.start){return this.range.start}return A},setValue:function(B,A){if(!!this.active){this.activeHandleIdx=A||0;this.activeHandle=this.handles[this.activeHandleIdx];this.updateStyles()}A=A||this.activeHandleIdx||0;if(this.initialized&&this.restricted){if((A>0)&&(B<this.values[A-1])){B=this.values[A-1]}if((A<(this.handles.length-1))&&(B>this.values[A+1])){B=this.values[A+1]}}B=this.getNearestValue(B);this.values[A]=B;this.value=this.values[0];this.handles[A].style[this.isVertical()?"top":"left"]=this.translateToPx(B);this.drawSpans();if(!!this.dragging||!!this.event){this.updateFinished()}},setValueBy:function(B,A){this.setValue(this.values[A||this.activeHandleIdx||0]+B,A||this.activeHandleIdx||0)},translateToPx:function(A){return Math.round(((this.trackLength-this.handleLength)/(this.range.end-this.range.start))*(A-this.range.start))+"px"},translateToValue:function(A){return((A/(this.trackLength-this.handleLength)*(this.range.end-this.range.start))+this.range.start)},getRange:function(B){var A=this.values.sortBy(Prototype.K);B=B||0;return $R(A[B],A[B+1])},minimumOffset:function(){return(this.isVertical()?this.alignY:this.alignX)},maximumOffset:function(){return(this.isVertical()?(this.track.offsetHeight!!=0?this.track.offsetHeight:this.track.style.height.replace(/px$/,""))-this.alignY:(this.track.offsetWidth!!=0?this.track.offsetWidth:this.track.style.width.replace(/px$/,""))-this.alignX)},isVertical:function(){return(this.axis=="vertical")},drawSpans:function(){var A=this;if(this.spans){$R(0,this.spans.length-1).each(function(B){A.setSpan(A.spans[B],A.getRange(B))})}if(this.options.startSpan){this.setSpan(this.options.startSpan,$R(0,this.values.length>1?this.getRange(0).min():this.value))}if(this.options.endSpan){this.setSpan(this.options.endSpan,$R(this.values.length>1?this.getRange(this.spans.length-1).max():this.value,this.maximum))}},setSpan:function(B,A){if(this.isVertical()){B.style.top=this.translateToPx(A.start);B.style.height=this.translateToPx(A.end-A.start+this.range.start)}else{B.style.left=this.translateToPx(A.start);B.style.width=this.translateToPx(A.end-A.start+this.range.start)}},updateStyles:function(){this.handles.each(function(A){Element.removeClassName(A,"selected")});Element.addClassName(this.activeHandle,"selected")},startDrag:function(C){if(Event.isLeftClick(C)){if(!!this.disabled){this.active=true;var D=Event.element(C);var E=[Event.pointerX(C),Event.pointerY(C)];var A=D;if(A==this.track){var B=Position.cumulativeOffset(this.track);this.event=C;this.setValue(this.translateToValue((this.isVertical()?E[1]-B[1]:E[0]-B[0])-(this.handleLength/2)));var B=Position.cumulativeOffset(this.activeHandle);this.offsetX=(E[0]-B[0]);this.offsetY=(E[1]-B[1])}else{while((this.handles.indexOf(D)==-1)&&D.parentNode){D=D.parentNode}if(this.handles.indexOf(D)!!=-1){this.activeHandle=D;this.activeHandleIdx=this.handles.indexOf(this.activeHandle);this.updateStyles();var B=Position.cumulativeOffset(this.activeHandle);this.offsetX=(E[0]-B[0]);this.offsetY=(E[1]-B[1])}}}Event.stop(C)}},update:function(A){if(this.active){if(!!this.dragging){this.dragging=true}this.draw(A);if(Prototype.Browser.WebKit){window.scrollBy(0,0)}Event.stop(A)}},draw:function(B){var C=[Event.pointerX(B),Event.pointerY(B)];var A=Position.cumulativeOffset(this.track);C[0]-=this.offsetX+A[0];C[1]-=this.offsetY+A[1];this.event=B;this.setValue(this.translateToValue(this.isVertical()?C[1]:C[0]));if(this.initialized&&this.options.onSlide){this.options.onSlide(this.values.length>1?this.values:this.value,this)}},endDrag:function(A){if(this.active&&this.dragging){this.finishDrag(A,true);Event.stop(A)}this.active=false;this.dragging=false},finishDrag:function(A,B){this.active=false;this.dragging=false;this.updateFinished()},updateFinished:function(){if(this.initialized&&this.options.onChange){this.options.onChange(this.values.length>1?this.values:this.value,this)}this.event=null}})'! !!SULibrary methodsFor: 'uploaded' stamp: 'lr 3/4/2008 13:30'!soundJs	^ '// script.aculo.us sound.js v1.8.1, Thu Jan 03 22:07:12 -0500 2008Sound={tracks:{},_enabled:true,template:new Template(''<embed style="height:0" type="audio/mpeg" id="sound_#{track}_#{id}" src="#{url}" loop="false" autostart="true" hidden="true"/>''),enable:function(){Sound._enabled=true},disable:function(){Sound._enabled=false},play:function(B){if(!!Sound._enabled){return }var A=Object.extend({track:"global",url:B,replace:false},arguments[1]||{});if(A.replace&&this.tracks[A.track]){$R(0,this.tracks[A.track].id).each(function(D){var C=$("sound_"+A.track+"_"+D);C.Stop&&C.Stop();C.remove()});this.tracks[A.track]=null}if(!!this.tracks[A.track]){this.tracks[A.track]={id:0}}else{this.tracks[A.track].id++}A.id=this.tracks[A.track].id;$$("body")[0].insert(Prototype.Browser.IE?new Element("bgsound",{id:"sound_"+A.track+"_"+A.id,src:A.url,loop:1,autostart:true}):Sound.template.evaluate(A))}};if(Prototype.Browser.Gecko&&navigator.userAgent.indexOf("Win")>0){if(navigator.plugins&&$A(navigator.plugins).detect(function(A){return A.name.indexOf("QuickTime")!!=-1})){Sound.template=new Template(''<object id="sound_#{track}_#{id}" width="0" height="0" type="audio/mpeg" data="#{url}"/>'')}else{Sound.play=function(){}}}'! !!SULibrary methodsFor: 'patches' stamp: 'lr 2/19/2007 11:47'!treePatchJs	^ 'Object.extend(Sortable, {	tree_sequence: function(element, options) {		return Sortable.tree(element, options).children.map(function(each) {			return [encodeURIComponent(each.parent.id) + ":" + encodeURIComponent(each.id)]				.concat(each.children.map(arguments.callee));		}).flatten().join(","); } });'! !!SULibrary methodsFor: 'uploaded'!unittestJs	^ '// script.aculo.us unittest.js v1.8.1, Thu Jan 03 22:07:12 -0500 2008Event.simulateMouse=function(D,B){var C=Object.extend({pointerX:0,pointerY:0,buttons:0,ctrlKey:false,altKey:false,shiftKey:false,metaKey:false},arguments[2]||{});var A=document.createEvent("MouseEvents");A.initMouseEvent(B,true,true,document.defaultView,C.buttons,C.pointerX,C.pointerY,C.pointerX,C.pointerY,C.ctrlKey,C.altKey,C.shiftKey,C.metaKey,0,$(D));if(this.mark){Element.remove(this.mark)}this.mark=document.createElement("div");this.mark.appendChild(document.createTextNode(" "));document.body.appendChild(this.mark);this.mark.style.position="absolute";this.mark.style.top=C.pointerY+"px";this.mark.style.left=C.pointerX+"px";this.mark.style.width="5px";this.mark.style.height="5px;";this.mark.style.borderTop="1px solid red;";this.mark.style.borderLeft="1px solid red;";if(this.step){alert("["+new Date().getTime().toString()+"] "+B+"/"+Test.Unit.inspect(C))}$(D).dispatchEvent(A)};Event.simulateKey=function(D,B){var C=Object.extend({ctrlKey:false,altKey:false,shiftKey:false,metaKey:false,keyCode:0,charCode:0},arguments[2]||{});var A=document.createEvent("KeyEvents");A.initKeyEvent(B,true,true,window,C.ctrlKey,C.altKey,C.shiftKey,C.metaKey,C.keyCode,C.charCode);$(D).dispatchEvent(A)};Event.simulateKeys=function(B,C){for(var A=0;A<C.length;A++){Event.simulateKey(B,"keypress",{charCode:C.charCodeAt(A)})}};var Test={};Test.Unit={};Test.Unit.inspect=Object.inspect;Test.Unit.Logger=Class.create();Test.Unit.Logger.prototype={initialize:function(A){this.log=$(A);if(this.log){this._createLogTable()}},start:function(A){if(!!this.log){return }this.testName=A;this.lastLogLine=document.createElement("tr");this.statusCell=document.createElement("td");this.nameCell=document.createElement("td");this.nameCell.className="nameCell";this.nameCell.appendChild(document.createTextNode(A));this.messageCell=document.createElement("td");this.lastLogLine.appendChild(this.statusCell);this.lastLogLine.appendChild(this.nameCell);this.lastLogLine.appendChild(this.messageCell);this.loglines.appendChild(this.lastLogLine)},finish:function(A,B){if(!!this.log){return }this.lastLogLine.className=A;this.statusCell.innerHTML=A;this.messageCell.innerHTML=this._toHTML(B);this.addLinksToResults()},message:function(A){if(!!this.log){return }this.messageCell.innerHTML=this._toHTML(A)},summary:function(A){if(!!this.log){return }this.logsummary.innerHTML=this._toHTML(A)},_createLogTable:function(){this.log.innerHTML=''<div id="logsummary"></div><table id="logtable"><thead><tr><th>Status</th><th>Test</th><th>Message</th></tr></thead><tbody id="loglines"></tbody></table>'';this.logsummary=$("logsummary");this.loglines=$("loglines")},_toHTML:function(A){return A.escapeHTML().replace(/\n/g,"<br/>")},addLinksToResults:function(){$$("tr.failed .nameCell").each(function(A){A.title="Run only this test";Event.observe(A,"click",function(){window.location.search="?tests="+A.innerHTML})});$$("tr.passed .nameCell").each(function(A){A.title="Run all tests";Event.observe(A,"click",function(){window.location.search=""})})}};Test.Unit.Runner=Class.create();Test.Unit.Runner.prototype={initialize:function(A){this.options=Object.extend({testLog:"testlog"},arguments[1]||{});this.options.resultsURL=this.parseResultsURLQueryParameter();this.options.tests=this.parseTestsQueryParameter();if(this.options.testLog){this.options.testLog=$(this.options.testLog)||null}if(this.options.tests){this.tests=[];for(var C=0;C<this.options.tests.length;C++){if(/^test/.test(this.options.tests[C])){this.tests.push(new Test.Unit.Testcase(this.options.tests[C],A[this.options.tests[C]],A["setup"],A["teardown"]))}}}else{if(this.options.test){this.tests=[new Test.Unit.Testcase(this.options.test,A[this.options.test],A["setup"],A["teardown"])]}else{this.tests=[];for(var B in A){if(/^test/.test(B)){this.tests.push(new Test.Unit.Testcase(this.options.context?" -> "+this.options.titles[B]:B,A[B],A["setup"],A["teardown"]))}}}}this.currentTest=0;this.logger=new Test.Unit.Logger(this.options.testLog);setTimeout(this.runTests.bind(this),1000)},parseResultsURLQueryParameter:function(){return window.location.search.parseQuery()["resultsURL"]},parseTestsQueryParameter:function(){if(window.location.search.parseQuery()["tests"]){return window.location.search.parseQuery()["tests"].split(",")}},getResult:function(){var B=false;for(var A=0;A<this.tests.length;A++){if(this.tests[A].errors>0){return"ERROR"}if(this.tests[A].failures>0){B=true}}if(B){return"FAILURE"}else{return"SUCCESS"}},postResults:function(){if(this.options.resultsURL){new Ajax.Request(this.options.resultsURL,{method:"get",parameters:"result="+this.getResult(),asynchronous:false})}},runTests:function(){var A=this.tests[this.currentTest];if(!!A){this.postResults();this.logger.summary(this.summary());return }if(!!A.isWaiting){this.logger.start(A.name)}A.run();if(A.isWaiting){this.logger.message("Waiting for "+A.timeToWait+"ms");setTimeout(this.runTests.bind(this),A.timeToWait||1000)}else{this.logger.finish(A.status(),A.summary());this.currentTest++;this.runTests()}},summary:function(){var D=0;var B=0;var E=0;var C=[];for(var A=0;A<this.tests.length;A++){D+=this.tests[A].assertions;B+=this.tests[A].failures;E+=this.tests[A].errors}return((this.options.context?this.options.context+": ":"")+this.tests.length+" tests, "+D+" assertions, "+B+" failures, "+E+" errors")}};Test.Unit.Assertions=Class.create();Test.Unit.Assertions.prototype={initialize:function(){this.assertions=0;this.failures=0;this.errors=0;this.messages=[]},summary:function(){return(this.assertions+" assertions, "+this.failures+" failures, "+this.errors+" errors\n"+this.messages.join("\n"))},pass:function(){this.assertions++},fail:function(A){this.failures++;this.messages.push("Failure: "+A)},info:function(A){this.messages.push("Info: "+A)},error:function(A){this.errors++;this.messages.push(A.name+": "+A.message+"("+Test.Unit.inspect(A)+")")},status:function(){if(this.failures>0){return"failed"}if(this.errors>0){return"error"}return"passed"},assert:function(C){var A=arguments[1]||''assert: got "''+Test.Unit.inspect(C)+''"'';try{C?this.pass():this.fail(A)}catch(B){this.error(B)}},assertEqual:function(B,D){var A=arguments[2]||"assertEqual";try{(B==D)?this.pass():this.fail(A+'': expected "''+Test.Unit.inspect(B)+''", actual "''+Test.Unit.inspect(D)+''"'')}catch(C){this.error(C)}},assertInspect:function(B,D){var A=arguments[2]||"assertInspect";try{(B==D.inspect())?this.pass():this.fail(A+'': expected "''+Test.Unit.inspect(B)+''", actual "''+Test.Unit.inspect(D)+''"'')}catch(C){this.error(C)}},assertEnumEqual:function(B,D){var A=arguments[2]||"assertEnumEqual";try{$A(B).length==$A(D).length&&B.zip(D).all(function(E){return E[0]==E[1]})?this.pass():this.fail(A+": expected "+Test.Unit.inspect(B)+", actual "+Test.Unit.inspect(D))}catch(C){this.error(C)}},assertNotEqual:function(B,D){var A=arguments[2]||"assertNotEqual";try{(B!!=D)?this.pass():this.fail(A+'': got "''+Test.Unit.inspect(D)+''"'')}catch(C){this.error(C)}},assertIdentical:function(B,D){var A=arguments[2]||"assertIdentical";try{(B===D)?this.pass():this.fail(A+'': expected "''+Test.Unit.inspect(B)+''", actual "''+Test.Unit.inspect(D)+''"'')}catch(C){this.error(C)}},assertNotIdentical:function(B,D){var A=arguments[2]||"assertNotIdentical";try{!!(B===D)?this.pass():this.fail(A+'': expected "''+Test.Unit.inspect(B)+''", actual "''+Test.Unit.inspect(D)+''"'')}catch(C){this.error(C)}},assertNull:function(C){var A=arguments[1]||"assertNull";try{(C==null)?this.pass():this.fail(A+'': got "''+Test.Unit.inspect(C)+''"'')}catch(B){this.error(B)}},assertMatch:function(C,E){var B=arguments[2]||"assertMatch";var A=new RegExp(C);try{(A.exec(E))?this.pass():this.fail(B+'' : regex: "''+Test.Unit.inspect(C)+" did not match: "+Test.Unit.inspect(E)+''"'')}catch(D){this.error(D)}},assertHidden:function(A){var B=arguments[1]||"assertHidden";this.assertEqual("none",A.style.display,B)},assertNotNull:function(A){var B=arguments[1]||"assertNotNull";this.assert(A!!=null,B)},assertType:function(B,D){var A=arguments[2]||"assertType";try{(D.constructor==B)?this.pass():this.fail(A+'': expected "''+Test.Unit.inspect(B)+''", actual "''+(D.constructor)+''"'')}catch(C){this.error(C)}},assertNotOfType:function(B,D){var A=arguments[2]||"assertNotOfType";try{(D.constructor!!=B)?this.pass():this.fail(A+'': expected "''+Test.Unit.inspect(B)+''", actual "''+(D.constructor)+''"'')}catch(C){this.error(C)}},assertInstanceOf:function(B,D){var A=arguments[2]||"assertInstanceOf";try{(D instanceof B)?this.pass():this.fail(A+": object was not an instance of the expected type")}catch(C){this.error(C)}},assertNotInstanceOf:function(B,D){var A=arguments[2]||"assertNotInstanceOf";try{!!(D instanceof B)?this.pass():this.fail(A+": object was an instance of the not expected type")}catch(C){this.error(C)}},assertRespondsTo:function(D,C){var A=arguments[2]||"assertRespondsTo";try{(C[D]&&typeof C[D]=="function")?this.pass():this.fail(A+": object doesn''t respond to ["+D+"]")}catch(B){this.error(B)}},assertReturnsTrue:function(E,D){var B=arguments[2]||"assertReturnsTrue";try{var A=D[E];if(!!A){A=D["is"+E.charAt(0).toUpperCase()+E.slice(1)]}A()?this.pass():this.fail(B+": method returned false")}catch(C){this.error(C)}},assertReturnsFalse:function(E,D){var B=arguments[2]||"assertReturnsFalse";try{var A=D[E];if(!!A){A=D["is"+E.charAt(0).toUpperCase()+E.slice(1)]}!!A()?this.pass():this.fail(B+": method returned true")}catch(C){this.error(C)}},assertRaise:function(A,D){var B=arguments[2]||"assertRaise";try{D();this.fail(B+": exception expected but none was raised")}catch(C){((A==null)||(C.name==A))?this.pass():this.error(C)}},assertElementsMatch:function(){var A=$A(arguments),B=$A(A.shift());if(B.length!!=A.length){this.fail("assertElementsMatch: size mismatch: "+B.length+" elements, "+A.length+" expressions");return false}B.zip(A).all(function(F,C){var D=$(F.first()),E=F.last();if(D.match(E)){return true}this.fail("assertElementsMatch: (in index "+C+") expected "+E.inspect()+" but got "+D.inspect())}.bind(this))&&this.pass()},assertElementMatches:function(A,B){this.assertElementsMatch([A],B)},benchmark:function(C,D){var B=new Date();(D||1).times(C);var A=((new Date())-B);this.info((arguments[2]||"Operation")+" finished "+D+" iterations in "+(A/1000)+"s");return A},_isVisible:function(A){A=$(A);if(!!A.parentNode){return true}this.assertNotNull(A);if(A.style&&Element.getStyle(A,"display")=="none"){return false}return this._isVisible(A.parentNode)},assertNotVisible:function(A){this.assert(!!this._isVisible(A),Test.Unit.inspect(A)+" was not hidden and didn''t have a hidden parent either. "+(""||arguments[1]))},assertVisible:function(A){this.assert(this._isVisible(A),Test.Unit.inspect(A)+" was not visible. "+(""||arguments[1]))},benchmark:function(C,D){var B=new Date();(D||1).times(C);var A=((new Date())-B);this.info((arguments[2]||"Operation")+" finished "+D+" iterations in "+(A/1000)+"s");return A}};Test.Unit.Testcase=Class.create();Object.extend(Object.extend(Test.Unit.Testcase.prototype,Test.Unit.Assertions.prototype),{initialize:function(name,test,setup,teardown){Test.Unit.Assertions.prototype.initialize.bind(this)();this.name=name;if(typeof test=="string"){test=test.gsub(/(\.should[^\(]+\()/,"#{0}this,");test=test.gsub(/(\.should[^\(]+)\(this,\)/,"#{1}(this)");this.test=function(){eval("with(this){"+test+"}")}}else{this.test=test||function(){}}this.setup=setup||function(){};this.teardown=teardown||function(){};this.isWaiting=false;this.timeToWait=1000},wait:function(B,A){this.isWaiting=true;this.test=A;this.timeToWait=B},run:function(){try{try{if(!!this.isWaiting){this.setup.bind(this)()}this.isWaiting=false;this.test.bind(this)()}finally{if(!!this.isWaiting){this.teardown.bind(this)()}}}catch(A){this.error(A)}}});Test.setupBDDExtensionMethods=function(){var B={shouldEqual:"assertEqual",shouldNotEqual:"assertNotEqual",shouldEqualEnum:"assertEnumEqual",shouldBeA:"assertType",shouldNotBeA:"assertNotOfType",shouldBeAn:"assertType",shouldNotBeAn:"assertNotOfType",shouldBeNull:"assertNull",shouldNotBeNull:"assertNotNull",shouldBe:"assertReturnsTrue",shouldNotBe:"assertReturnsFalse",shouldRespondTo:"assertRespondsTo"};var A=function(C,E,D){this[C].apply(this,(E||[]).concat([D]))};Test.BDDMethods={};$H(B).each(function(C){Test.BDDMethods[C.key]=function(){var D=$A(arguments);var E=D.shift();A.apply(E,[C.value,D,this])}});[Array.prototype,String.prototype,Number.prototype,Boolean.prototype].each(function(C){Object.extend(C,Test.BDDMethods)})};Test.context=function(D,C,F){Test.setupBDDExtensionMethods();var E={};var G={};for(specName in C){switch(specName){case"setup":case"teardown":E[specName]=C[specName];break;default:var B="test"+specName.gsub(/\s+/,"-").camelize();var A=C[specName].toString().split("\n").slice(1);if(/^\{/.test(A[0])){A=A.slice(1)}A.pop();A=A.map(function(H){return H.strip()});E[B]=A.join("\n");G[B]=specName}}new Test.Unit.Runner(E,{titles:G,testLog:F||"testlog",context:D})}'! !!SUTreeReportLibrary methodsFor: 'uploaded' stamp: 'lr 11/29/2007 16:51'!collapsedGif	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(71 73 70 56 57 97 16 0 16 0 179 0 0 139 150 171 1 70 122 249 253 255 213 243 255 241 251 255 236 250 255 238 251 255 243 252 255 246 253 255 250 255 255 252 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 11 0 44 0 0 0 0 16 0 16 0 0 4 70 112 201 73 171 189 56 91 192 187 7 21 48 140 36 9 82 98 161 6 170 122 78 162 33 7 131 108 188 146 72 236 244 78 224 11 81 96 72 12 28 128 34 196 136 102 10 13 4 80 26 84 128 28 36 174 180 107 162 170 232 42 6 94 228 231 163 41 155 23 17 0 59) asByteArray ].	^ cache at: 1! !!SUTreeReportLibrary methodsFor: 'uploaded' stamp: 'lr 11/29/2007 16:51'!expandedGif	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(71 73 70 56 57 97 16 0 16 0 179 0 0 139 150 171 1 70 122 249 253 255 213 243 255 241 251 255 236 250 255 238 251 255 246 253 255 250 255 255 252 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 10 0 44 0 0 0 0 16 0 16 0 0 4 63 80 201 73 171 189 56 91 192 187 7 21 48 140 36 9 82 98 161 174 234 57 137 70 44 199 174 36 18 120 142 215 138 24 252 192 0 129 39 58 148 76 161 129 96 201 92 18 7 136 168 52 250 76 88 175 86 226 231 163 233 122 21 17 0 59) asByteArray ].	^ cache at: 1! !!SUTreeReportLibrary methodsFor: 'accessing' stamp: 'lr 11/29/2007 14:50'!selectorsToInclude	^ #(treeLibraryCss)! !!SUTreeReportLibrary methodsFor: 'styles' stamp: 'lr 11/29/2007 17:01'!treeLibraryCss	^ '.tree {	font-family: Veranda, Arial, sans-serif;}.tree th {	text-align: left;}.tree td {	vertical-align: top;	white-space: nowrap;}.tree .indent {	float: left;	height: 16px;	width: 16px;}.tree .indent a {	float: right;	width: 16px;	height: 16px;	display: block;	background-position: center center;	background-image: url(collapsed.gif);}.tree .indent a.expanded {	background-image: url(expanded.gif);}'! !!SUObjectTest methodsFor: 'utilities' stamp: 'lr 2/19/2007 13:45'!assert: anObject equals: aString	self		assert: anObject asJavascript = aString		description: anObject printString , ' expected to be ' , aString printString		resumable: true! !!SUObjectTest methodsFor: 'utilities' stamp: 'lr 10/28/2007 14:40'!assertEnumerable: aBlock prefix: aString	self assert: (aBlock value isKindOf: SUEnumerable).	self		assert: (aBlock value allSatisfy: [ :each | each element visible ])		equals: aString , '.all(function(){return $(arguments[0]).visible()})'.	self		assert: (aBlock value anySatisfy: [ :each | each element visible not ])		equals: aString , '.any(function(){return !!$(arguments[0]).visible()})'.	self		assert: (aBlock value collect: [ :each | each element up ])		equals: aString , '.map(function(){return $(arguments[0]).up()})'.	self		assert: (aBlock value detect: [ :each | each element empty ])		equals: aString , '.find(function(){return $(arguments[0]).empty()})'.	self		assert: (aBlock value detectMax: [ :each | each element width ])		equals: aString , '.max(function(){return $(arguments[0]).getWidth()})'.	self		assert: (aBlock value detectMin: [ :each | each element height ])		equals: aString , '.min(function(){return $(arguments[0]).getHeight()})'.	self		assert: (aBlock value do: [ :each | each effect scroll ])		equals: aString , '.each(function(){new Effect.ScrollTo(arguments[0])})'.	self		assert: (aBlock value select: [ :each | each element empty ])		equals: aString , '.findAll(function(){return $(arguments[0]).empty()})'.	self		assert: (aBlock value reject: [ :each | each element empty not ])		equals: aString , '.reject(function(){return !!$(arguments[0]).empty()})'.	self		assert: (aBlock value sortBy: [ :each | each element height ])		equals: aString , '.sortBy(function(){return $(arguments[0]).getHeight()})'.	self		assert: (aBlock value grep: '[a-z]+')		equals: aString , '.grep(''[a-z]+'')'.	self		assert: (aBlock value include: nil)		equals: aString , '.include(null)'.	self		assert: (aBlock value invoke: 'zork')		equals: aString , '.invoke(''zork'')'.	self		assert: (aBlock value invoke: 'zork' with: 1)		equals: aString , '.invoke(''zork'',1)'.	self		assert: (aBlock value invoke: 'zork' withAll: #(1 2))		equals: aString , '.invoke(''zork'',1,2)'.	self		assert: (aBlock value pluck: 'id')		equals: aString , '.pluck(''id'')'.	self		assert: (aBlock value size)		equals: aString , '.size()'! !!SUObjectTest methodsFor: 'accessing-conveniance' stamp: 'lr 1/4/2007 20:54'!effect	^ self factory effect! !!SUObjectTest methodsFor: 'accessing-conveniance' stamp: 'lr 1/4/2007 20:53'!element	^ self factory element! !!SUObjectTest methodsFor: 'accessing-conveniance' stamp: 'lr 1/4/2007 20:53'!event	^ self factory event! !!SUObjectTest methodsFor: 'accessing' stamp: 'lr 1/4/2007 19:23'!factory	^ factory! !!SUObjectTest methodsFor: 'accessing-conveniance' stamp: 'lr 1/4/2007 21:01'!form	^ self factory form! !!SUObjectTest methodsFor: 'accessing-conveniance' stamp: 'lr 1/4/2007 21:01'!formElement	^ self factory formElement! !!SUObjectTest methodsFor: 'accessing-conveniance' stamp: 'lr 5/19/2009 09:11'!formElementObserver	^ self factory formElementObserver! !!SUObjectTest methodsFor: 'accessing-conveniance' stamp: 'lr 5/19/2009 09:11'!formObserver	^ self factory formObserver! !!SUObjectTest methodsFor: 'accessing-conveniance' stamp: 'lr 1/4/2007 21:57'!function	^ self factory function! !!SUObjectTest methodsFor: 'accessing-conveniance' stamp: 'lr 1/4/2007 21:06'!insertion	^ self factory insertion! !!SUObjectTest methodsFor: 'accessing-conveniance' stamp: 'lr 1/4/2007 21:08'!logger	^ self factory logger! !!SUObjectTest methodsFor: 'accessing-conveniance' stamp: 'lr 1/4/2007 20:32'!mock	^ (self factory create: SUObject) alias: 'mock'! !!SUObjectTest methodsFor: 'running' stamp: 'lr 5/9/2009 10:15'!performTest	WACurrentSession		use: WASession new		during: [ super performTest ]! !!SUObjectTest methodsFor: 'accessing-conveniance' stamp: 'lr 2/27/2007 20:51'!responders	^ self factory responders! !!SUObjectTest methodsFor: 'accessing-conveniance' stamp: 'lr 1/4/2007 21:59'!script	^ self factory script! !!SUObjectTest methodsFor: 'running' stamp: 'lr 6/5/2009 17:26'!setUp	factory := SUFactory on: (WARenderCanvas		context: WARenderingContext new		callbacks: WACallbackRegistry new)! !!SUObjectTest methodsFor: 'accessing-conveniance' stamp: 'lr 3/12/2007 16:43'!sound	^ self factory sound! !!SUObjectTest methodsFor: 'accessing' stamp: 'lr 1/4/2007 20:14'!stream	^ SUStream new! !!SUObjectTest methodsFor: 'testing-convertion' stamp: 'lr 1/4/2007 20:50'!testArray	self assert: #(1 2 3) equals: '[1,2,3]'! !!SUObjectTest methodsFor: 'testing-other' stamp: 'pmm 8/22/2007 06:35'!testAsUnicode	"check if your dialect implements Character >> #asUnicode which returns the Unicode codepoint"	self assert: $@ asUnicode = 64! !!SUObjectTest methodsFor: 'testing-convertion' stamp: 'lr 5/18/2006 09:04'!testAssociation	self assert: ('a' -> 'b') equals: '''a=b'''.	self assert: ('a' -> 1) equals: '''a=''+1'.	self assert: ('a' -> nil) equals: '''a'''! !!SUObjectTest methodsFor: 'testing-convertion' stamp: 'lr 7/12/2006 12:13'!testCharacter	self assert: (Character value: 0) equals: '''\0'''.	self assert: Character lf equals: '''\n'''.	self assert: $a equals: '''a'''! !!SUObjectTest methodsFor: 'testing-convertion' stamp: 'lr 5/18/2006 09:04'!testColor	self assert: Color red equals: '''#FF0000'''! !!SUObjectTest methodsFor: 'testing-convertion' stamp: 'lr 3/13/2007 09:05'!testDateAndTime	self assert: (DateAndTime year: 1980 month: 6 day: 11 hour: 12 minute: 45 second: 23) equals: 'new Date(1980,5,11,12,45,23)'.	self assert: (Date year: 1980 month: 6 day: 11) equals: 'new Date(1980,5,11)'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 2/19/2007 13:45'!testDecorationAccess	self		assert: (self mock access: 'foo')		equals: 'mock.foo'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 1/4/2007 20:44'!testDecorationAfter	self		assert: (self mock after: (self stream nextPutAll: 'after'))		equals: 'mock;after'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 1/4/2007 20:33'!testDecorationAlias	| mock |	mock := self mock.	mock alias: 'foo'.	self assert: mock equals: 'foo'.	mock alias: 'bar'; call: 'zork'.	self assert: mock equals: 'bar.zork()'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 2/19/2007 13:45'!testDecorationApply	self		assert: (self mock apply: #())		equals: 'mock()'.	self		assert: (self mock apply: #(1))		equals: 'mock(1)'.	self		assert: (self mock apply: #(1 true))		equals: 'mock(1,true)'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 7/4/2007 07:48'!testDecorationAssign	self		assert: (self mock assign: 1)		equals: 'mock=1'.	self		assert: (self mock assign: self element)		equals: 'mock=$(this)'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 2/19/2007 13:45'!testDecorationAssignLocalTo	self		assert: (self mock assignLocalTo: 'x')		equals: 'var x=mock'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 1/4/2007 20:45'!testDecorationAssignTo	self		assert: (self mock assignTo: 'x')		equals: 'x=mock'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 1/4/2007 20:45'!testDecorationBefore	self		assert: (self mock before: (self stream nextPutAll: 'before'))		equals: 'before;mock'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 7/10/2007 10:26'!testDecorationBinary	self		assert: (self mock & false)		equals: 'mock&&false'.	self		assert: (self mock | 1)		equals: 'mock||1'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 1/4/2007 20:46'!testDecorationCall	self		assert: (self mock call: 'foo')		equals: 'mock.foo()'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 1/4/2007 20:46'!testDecorationCallArgument	self		assert: (self mock call: 'foo' argument: 1)		equals: 'mock.foo(1)'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 1/4/2007 20:46'!testDecorationCallArguments	self		assert: (self mock call: 'foo' arguments: #( 'bar' 1 ))		equals: 'mock.foo(''bar'',1)'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 1/4/2007 20:46'!testDecorationCondition	self		assert: (self mock condition: true)		equals: 'if(true){mock}'.	self		assert: (self mock condition: false)		equals: 'if(false){mock}'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 1/4/2007 20:47'!testDecorationConfirm	self		assert: (self mock confirm: 'Sure?')		equals: 'if(confirm(''Sure?'')){mock}'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 1/4/2007 20:47'!testDecorationCreate	self		assert: self mock create		equals: 'new mock'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 2/19/2007 13:45'!testDecorationEvery	self		assert: (self mock every: 123)		equals: 'new PeriodicalExecuter(function(){mock},123)'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 1/4/2007 20:47'!testDecorationNot	self		assert: self mock not		equals: '!!mock'.	self		assert: self mock not not		equals: '!!!!mock'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 2/19/2007 13:45'!testDecorationOrder	self		assert: (self mock before: 1; after: 2)		equals: '1;mock;2'.	self		assert: (self mock after: 2; before: 1)		equals: '1;mock;2'.	self		assert: (self mock after: 1; condition: true)		equals: 'if(true){mock;1}'.	self		assert: (self mock condition: false; after: 1)		equals: 'if(false){mock};1'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 1/4/2007 20:49'!testDecorationProperty	self		assert: (self mock property: 'foo')		equals: 'mock[''foo'']'.	self		assert: (self mock property: 123)		equals: 'mock[123]'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 2/19/2007 13:45'!testDecorationReturn	self		assert: (self mock return: 1)		equals: 'mock;return 1'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 10/28/2007 14:40'!testDecorationThenElse	| mock |	mock := self mock.	mock then: 1.	self assert: mock equals: '(mock?1:null)'.	mock := self mock.	mock then: 1 else: 2.	self assert: mock equals: '(mock?1:2)'! !!SUObjectTest methodsFor: 'testing-decoration' stamp: 'lr 4/17/2007 14:33'!testDecorationTimeout	| mock |	mock := self mock.	mock timeout: 123.	self assert: mock equals: 'setTimeout(function(){mock},123)'! !!SUObjectTest methodsFor: 'testing-convertion' stamp: 'lr 4/21/2006 02:51'!testDictionary	self assert: (#('{1:2,3:4}' '{3:4,1:2}') includes: (Dictionary new at: 1 put: 2; at: 3 put: 4; yourself) asJavascript)! !!SUObjectTest methodsFor: 'testing-convertion' stamp: 'lr 5/18/2006 09:04'!testDuration	self assert: (Duration seconds: 123) equals: '123'! !!SUObjectTest methodsFor: 'testing-effect' stamp: 'lr 2/19/2007 13:45'!testEffect	self		assert: self effect		equals: 'Effect.toggle(this)'.	self		assert: (self effect id: 'foo'; fps: 24)		equals: 'Effect.toggle(''foo'',{''fps'':24})'.	self		assert: (self effect id: 'bar'; duration: 2; shake)		equals: 'new Effect.Shake(''bar'',{''duration'':2})'! !!SUObjectTest methodsFor: 'testing-effect' stamp: 'lr 2/19/2007 13:45'!testEffectMorph	self		assert: (self effect style: 'color: #f00;'; morph)		equals: 'new Effect.Morph(this,{''style'':''color: #f00;''})'.	self		assert: (self effect id: 'foo'; style: 'color: #f00;'; morph)		equals: 'new Effect.Morph(''foo'',{''style'':''color: #f00;''})'! !!SUObjectTest methodsFor: 'testing-effect' stamp: 'lr 9/30/2008 18:26'!testEffectMove	self		assert: (self effect move: 1 @ 2)		equals: 'new Effect.Move(this,{''x'':1,''y'':2})'.	self		assert: (self effect id: 'foo'; absolute; move: 3 @ 5)		equals: 'new Effect.Move(''foo'',{''mode'':''absolute'',''x'':3,''y'':5})'! !!SUObjectTest methodsFor: 'testing-effect' stamp: 'lr 1/4/2007 20:54'!testEffectOpacitiy	self		assert: (self effect opacity)		equals: 'new Effect.Opacity(this)'.	self		assert: (self effect opacity; id: 'foo'; duration: 1)		equals: 'new Effect.Opacity(''foo'',{''duration'':1})'! !!SUObjectTest methodsFor: 'testing-effect' stamp: 'lr 2/19/2007 13:45'!testEffectParallel	self		assert: (self effect parallel: (Array with: self factory effect fade with: self factory effect slideUp))		equals: 'new Effect.Parallel([new Effect.Fade(this),new Effect.SlideUp(this)])'.	self		assert: (self effect fps: 12; parallel: (Array with: self factory effect fade with: self factory effect slideUp))		equals: 'new Effect.Parallel([new Effect.Fade(this),new Effect.SlideUp(this)],{''fps'':12})'! !!SUObjectTest methodsFor: 'testing-effect' stamp: 'lr 2/19/2007 13:45'!testEffectScale	self		assert: (self effect scale: 50)		equals: 'new Effect.Scale(this,50)'.	self		assert: (self effect id: 'foo'; duration: 1; scale: 25)		equals: 'new Effect.Scale(''foo'',25,{''duration'':1})'! !!SUObjectTest methodsFor: 'testing-effect' stamp: 'lr 2/19/2007 13:45'!testEffectToggle	self		assert: self effect toggleAppear		equals: 'Effect.toggle(this,''Appear'')'.	self		assert: (self effect id: 'foo'; toggleSlide)		equals: 'Effect.toggle(''foo'',''Slide'')'.	self		assert: (self effect fps: 15; toggleBlind)		equals: 'Effect.toggle(this,''Blind'',{''fps'':15})'! !!SUObjectTest methodsFor: 'testing-effect' stamp: 'lr 11/7/2007 22:04'!testEffectTween	self		assert: (self effect tweenFrom: 5 to: 0 using: 'blech')		equals: 'new Effect.Tween(this,5,0,''blech'')'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 6/11/2007 07:50'!testElementDisplaying	self		assert: (self element hide)		equals: '$(this).hide()'.	self		assert: (self element id: 'foo'; show)		equals: '$(''foo'').show()'.	self		assert: (self element toggle)		equals: '$(this).toggle()'.	self		assert: (self element id: 'bar'; scroll)		equals: '$(''bar'').scrollTo()'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 12/2/2007 19:15'!testElementEnumerating	self		assertEnumerable: [ self element ancestors ]		prefix: '$(this).ancestors()'.	self		assertEnumerable: [ self element childElements ]		prefix: '$(this).childElements()'.	self		assertEnumerable: [ self element descendants ]		prefix: '$(this).descendants()'.	self		assertEnumerable: [ self element nextSiblings ]		prefix: '$(this).nextSiblings()'.	self		assertEnumerable: [ self element previousSiblings ]		prefix: '$(this).previousSiblings()'.	self		assertEnumerable: [ self element select: 'div.foo' ]		prefix: '$(this).select(''div.foo'')'.	self		assertEnumerable: [ self element siblings ]		prefix: '$(this).siblings()'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 12/2/2007 19:17'!testElementEvents	self		assert: (self element fire: 'foo')		equals: '$(this).fire(''foo'')'.	self		assert: (self element fire: 'foo' with: 123)		equals: '$(this).fire(''foo'',123)'.	self		assert: (self element on: 'click' do: self event stop)		equals: '$(this).observe(''click'',function(event){Event.stop(event)})'.	self		assert: (self element id: 'foo'; on: 'mouseout' do: self element hide)		equals: '$(''foo'').observe(''mouseout'',function(event){$(this).hide()})'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 12/2/2007 19:22'!testElementGeometric	self		assert: (self element absolutize)		equals: '$(this).absolutize()'.	self		assert: (self element clonePosition: 'foo')		equals: '$(this).clonePosition(''foo'')'.	self		assert: (self element cumulativeOffset)		equals: '$(this).cumulativeOffset()'.	self		assert: (self element cumulativeScrollOffset)		equals: '$(this).cumulativeScrollOffset()'.	self		assert: (self element dimensions)		equals: '$(this).getDimensions()'.	self		assert: (self element height)		equals: '$(this).getHeight()'.	self		assert: (self element makeClipping)		equals: '$(this).makeClipping()'.	self		assert: (self element makePositioned)		equals: '$(this).makePositioned()'.	self		assert: (self element offsetParent)		equals: '$(this).getOffsetParent()'.	self		assert: (self element positionedOffset)		equals: '$(this).positionedOffset()'.	self		assert: (self element relativize)		equals: '$(this).relativize()'.	self		assert: (self element undoClipping)		equals: '$(this).undoClipping()'.	self		assert: (self element undoPositioned)		equals: '$(this).undoPositioned()'.	self		assert: (self element viewportOffset)		equals: '$(this).viewportOffset()'.	self		assert: (self element width)		equals: '$(this).getWidth()'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 12/2/2007 19:52'!testElementModifying	self		assert: (self element cleanWhitespace)		equals: '$(this).cleanWhitespace()'.	self		assert: (self element id: 'foo'; remove)		equals: '$(''foo'').remove()'.	self		assert: (self element wrap: 'p')		equals: '$(this).wrap(''p'',{})'.	self		assert: (self element wrap: 'p' attributes: (Dictionary new at: 'id' put: 'foo'; yourself))		equals: '$(this).wrap(''p'',{''id'':''foo''})'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 12/2/2007 20:03'!testElementModifyingInsert	self		assert: (self element insert: 1)		equals: '$(this).insert(''1'')'.	self		assert: (self element insertAfter: [ :r | r div ])		equals: '$(this).insert({''after'':''<div></div>''})'.	self		assert: (self element insertBefore: 'abc')		equals: '$(this).insert({''before'':''abc''})'.	self		assert: (self element insertTop: [ :r | r span: 5 ])		equals: '$(this).insert({''top'':''<span>5</span>''})'.	self		assert: (self element insertBottom: '5')		equals: '$(this).insert({''bottom'':''5''})'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 12/2/2007 19:52'!testElementModifyingReplace	self		assert: (self element replace: 'foo')		equals: '$(this).replace(''foo'')'.	self		assert: (self element replace: [ :r | r div id: 'foo'])		equals: '$(this).replace(''<div id="foo"></div>'')'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 6/5/2009 17:26'!testElementModifyingUpdate	self		assert: (self element id: 'foo'; update: 'bar')		equals: '$(''foo'').update(''bar'')'.	self		assert: (self element update: [ :r | r div: 'bar' ])		equals: '$(this).update(''<div>bar</div>'')'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 12/2/2007 19:54'!testElementModifyingWrap	self		assert: (self element wrap: 'p')		equals: '$(this).wrap(''p'',{})'.	self		assert: (self element wrap: 'p' attributes: (Dictionary new at: 'id' put: 'foo'; yourself))		equals: '$(this).wrap(''p'',{''id'':''foo''})'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 12/2/2007 19:28'!testElementNavigationDown	self		assert: (self element down)		equals: '$(this).down()'.	self		assert: (self element down: 'div')		equals: '$(this).down(''div'')'.	self		assert: (self element down: 'div' at: 2)		equals: '$(this).down(''div'',2)'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 12/2/2007 19:28'!testElementNavigationNext	self		assert: (self element next)		equals: '$(this).next()'.	self		assert: (self element next: 'div')		equals: '$(this).next(''div'')'.	self		assert: (self element next: 'div' at: 2)		equals: '$(this).next(''div'',2)'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 12/2/2007 19:29'!testElementNavigationPrevious	self		assert: (self element previous)		equals: '$(this).previous()'.	self		assert: (self element previous: 'div')		equals: '$(this).previous(''div'')'.	self		assert: (self element previous: 'div' at: 2)		equals: '$(this).previous(''div'',2)'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 12/2/2007 19:29'!testElementNavigationUp	self		assert: (self element up)		equals: '$(this).up()'.	self		assert: (self element up: 'div')		equals: '$(this).up(''div'')'.	self		assert: (self element up: 'div' at: 2)		equals: '$(this).up(''div'',2)'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 12/2/2007 19:30'!testElementQuerying	self		assert: (self element descendantOf: 'foo')		equals: '$(this).descendantOf(''foo'')'.	self		assert: (self element empty)		equals: '$(this).empty()'.	self		assert: (self element firstDescendant)		equals: '$(this).firstDescendant()'.	self		assert: (self element identify)		equals: '$(this).identify()'.	self		assert: (self element match: 'first-child')		equals: '$(this).match(''first-child'')'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 12/2/2007 19:23'!testElementStylingClasses	self		assert: (self element id: 'foo'; addClassName: 'bar')		equals: '$(''foo'').addClassName(''bar'')'.	self		assert: (self element id: 'foo'; hasClassName: 'bar')		equals: '$(''foo'').hasClassName(''bar'')'.	self		assert: (self element removeClassName: 'bar')		equals: '$(this).removeClassName(''bar'')'.	self		assert: (self element id: 'foo'; toggleClassName: 'bar')		equals: '$(''foo'').toggleClassName(''bar'')'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 12/2/2007 19:31'!testElementStylingStyles	self		assert: (self element id: 'foo'; styleAt: 'width')		equals: '$(''foo'').getStyle(''width'')'.	self		assert: (self element styleAt: 'height')		equals: '$(this).getStyle(''height'')'.	self		assert: (self element id: 'foo'; styleAt: 'width' put: '100px')		equals: '$(''foo'').setStyle({''width'':''100px''})'.	self		assert: (self element styleAt: 'background-color' put: Color white)		equals: '$(this).setStyle({''background-color'':''#FFFFFF''})'! !!SUObjectTest methodsFor: 'testing-other' stamp: 'lr 6/11/2007 08:07'!testEventActions	self		assert: (self event stop)		equals: 'Event.stop(event)'.	self		assert: (self event observe: 'foo' on: 'click' do: self element toggle)		equals: 'Event.observe(''foo'',''click'',function(event){$(this).toggle()})'! !!SUObjectTest methodsFor: 'testing-other' stamp: 'lr 2/19/2007 13:45'!testEventQuerying	self		assert: (self event element)		equals: 'Event.element(event)'.	self		assert: (self event event: 'bar'; x)		equals: 'Event.pointerX(''bar'')'.	self		assert: self event y		equals: 'Event.pointerY(event)'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 9/12/2007 07:38'!testForm	self		assert: self form disable		equals: '$(this).disable()'.	self		assert: self form enable		equals: '$(this).enable()'.	self		assert: self form findFirstElement		equals: '$(this).findFirstElement()'.	self		assert: self form focusFirstElement		equals: '$(this).focusFirstElement()'.	self		assert: self form request		equals: '$(this).request()'.	self		assert: self form reset		equals: '$(this).reset()'.	self		assert: (self form id: 'foo'; serialize)		equals: '$(''foo'').serialize()'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 10/28/2007 14:40'!testFormElement	self		assert: self formElement activate		equals: '$(this).activate()'.	self		assert: self formElement clear		equals: '$(this).clear()'.	self		assert: self formElement disable		equals: '$(this).disable()'.	self		assert: self formElement enable		equals: '$(this).enable()'.	self		assert: self formElement focus		equals: '$(this).focus()'.	self		assert: self formElement present		equals: '$(this).present()'.	self		assert: self formElement select		equals: '$(this).select()'.	self		assert: (self formElement id: 'foo'; serialize)		equals: '$(''foo'').serialize()'.	self		assert: (self formElement id: 'foo'; value)		equals: '$(''foo'').getValue()'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 6/5/2009 17:26'!testFormElementObserver	self		assert: self factory formElementObserver		equals: 'new Form.Element.Observer(this,1,function(){})'.	self		assert: (self factory formElementObserver			id: 'foo';			frequency: 2 seconds;			function: self script refresh)		equals: 'new Form.Element.Observer(''foo'',2,function(element,value){window.location=null})'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 10/28/2007 14:40'!testFormEnumerating	self		assertEnumerable: [ self form elements ]		prefix: '$(this).getElements()'.	self		assertEnumerable: [ self form inputs ]		prefix: '$(this).getInputs()'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 6/5/2009 17:26'!testFormObserver	self		assert: self factory formObserver		equals: 'new Form.Observer(this,1,function(){})'.	self		assert: (self factory formObserver			id: 'foo';			frequency: 2 seconds;			function: self script refresh)		equals: 'new Form.Observer(''foo'',2,function(element,value){window.location=null})'! !!SUObjectTest methodsFor: 'testing-script' stamp: 'lr 2/19/2007 13:45'!testFunction	self		assert: self function		equals: 'function(){}'! !!SUObjectTest methodsFor: 'testing-script' stamp: 'lr 2/19/2007 13:45'!testFunctionArguments	self		assert: (self function arguments: #(a))		equals: 'function(a){}'.	self		assert: (self function arguments: #(a b))		equals: 'function(a,b){}'.	self		assert: (self function arguments: #(a b c))		equals: 'function(a,b,c){}'! !!SUObjectTest methodsFor: 'testing-script' stamp: 'lr 1/4/2007 16:07'!testFunctionReturn	| function |	function := self function.	function add: (self stream nextPutAll: 'foo').	function add: (self stream nextPutAll: 'bar').	function add: (self stream nextPutAll: 'baz').	self assert: function equals: 'function(){foo;bar;baz}'.	function := self function return: true.	function add: (self stream nextPutAll: 'foo').	function add: (self stream nextPutAll: 'bar').	function add: (self stream nextPutAll: 'baz').	self assert: function equals: 'function(){foo;bar;return baz}'! !!SUObjectTest methodsFor: 'testing-other' stamp: 'lr 2/19/2007 13:45'!testInsertion	| element |	element := SUInsertion top.	self assert: element equals: 'Insertion.Top'.	element := SUInsertion bottom.	self assert: element equals: 'Insertion.Bottom'.	element := SUInsertion before.	self assert: element equals: 'Insertion.Before'.	element := SUInsertion after.	self assert: element equals: 'Insertion.After'! !!SUObjectTest methodsFor: 'testing-other' stamp: 'lr 12/2/2007 20:05'!testInsertionBasic	| element |	element := self insertion top; with: 'foo'.	self assert: element equals: 'new Insertion.Top(this,''foo'')'.	element := self insertion bottom; id: 'bar'; with: 'foo'.	self assert: element equals: 'new Insertion.Bottom(''bar'',''foo'')'.	element := self insertion before; with: 'foo'.	self assert: element equals: 'new Insertion.Before(this,''foo'')'.	element := self insertion after; id: 'bar'; with: 'foo'.	self assert: element equals: 'new Insertion.After(''bar'',''foo'')'! !!SUObjectTest methodsFor: 'testing-other' stamp: 'lr 12/2/2007 20:05'!testInsertionShort	| element |	element := self insertion top: 'foo'.	self assert: element equals: 'new Insertion.Top(this,''foo'')'.	element := self insertion id: 'bar'; bottom: 'foo'.	self assert: element equals: 'new Insertion.Bottom(''bar'',''foo'')'.	element := self insertion before: 'foo'.	self assert: element equals: 'new Insertion.Before(this,''foo'')'.	element := self insertion id: 'bar'; after: 'foo'.	self assert: element equals: 'new Insertion.After(''bar'',''foo'')'! !!SUObjectTest methodsFor: 'testing-other' stamp: 'lr 2/19/2007 13:45'!testInsertionWith	self		assert: (self insertion id: 'foo'; top: 'bar')		equals: 'new Insertion.Top(''foo'',''bar'')'.	self		assert: (self insertion bottom: 'bar')		equals: 'new Insertion.Bottom(this,''bar'')'.	self		assert: (self insertion id: 'foo'; before: 'bar')		equals: 'new Insertion.Before(''foo'',''bar'')'.	self		assert: (self insertion after: 'bar')		equals: 'new Insertion.After(this,''bar'')'! !!SUObjectTest methodsFor: 'testing-convertion' stamp: 'lr 5/18/2006 09:04'!testInterval	self assert: (1 to: 2) equals: '$R(1,2)'! !!SUObjectTest methodsFor: 'testing-convertion' stamp: 'lr 5/18/2006 09:05'!testJoin	self assert: (SUJoin join: #( 'a' 'b' ) with: '&') equals: '[''a'',''b''].join(''&'')'! !!SUObjectTest methodsFor: 'testing-convertion' stamp: 'lr 5/18/2006 09:05'!testLiteral	self assert: true equals: 'true'.	self assert: false equals: 'false'.	self assert: nil equals: 'null'! !!SUObjectTest methodsFor: 'testing-logging' stamp: 'lr 2/19/2007 13:45'!testLoggerAssert	| logger |	logger :=self logger assert: true.	self assert: logger equals: 'console.assert(true)'.	logger := self logger assertTrue: true.	self assert: logger equals: 'console.assertTrue(true)'.	logger := self logger assertFalse: false.	self assert: logger equals: 'console.assertFalse(false)'.	logger := self logger assertNull: nil.	self assert: logger equals: 'console.assertNull(null)'.	logger := self logger assertNotNull: true.	self assert: logger equals: 'console.assertNotNull(true)'! !!SUObjectTest methodsFor: 'testing-logging' stamp: 'lr 1/4/2007 21:54'!testLoggerComparison	self		assert: (self logger assert: 1 equals: 1)		equals: 'console.assertEquals(1,1)'.	self		assert: (self logger assert: 1 notEquals: 2)		equals: 'console.assertNotEquals(1,2)'.	self		assert: (self logger assert: 1 greater: 2)		equals: 'console.assertGreater(1,2)'.	self		assert: (self logger assert: 2 notGreater: 1)		equals: 'console.assertNotGreater(2,1)'.	self		assert: (self logger assert: 2 less: 1)		equals: 'console.assertLess(2,1)'.	self		assert: (self logger assert: 1 notLess: 2)		equals: 'console.assertNotLess(1,2)'! !!SUObjectTest methodsFor: 'testing-logging' stamp: 'lr 2/19/2007 13:45'!testLoggerLogging	self		assert: (self logger log: 'done')		equals: 'console.log(''done'')'.	self		assert: (self logger log: 'done %s and %s' format: #( 'this' 'that' ))		equals: 'console.log(''done %s and %s'',''this'',''that'')'! !!SUObjectTest methodsFor: 'testing-logging' stamp: 'lr 12/19/2007 11:10'!testLoggerMessages	self		assert: (self logger debug: 3)		equals: 'console.debug(3)'.	self		assert: (self logger info: 'eye m here 2')		equals: 'console.info(''eye m here 2'')'.	self		assert: (self logger warn: 'don''t 4get ur grlfrnd')		equals: 'console.warn(''don\''t 4get ur grlfrnd'')'.	self		assert: (self logger error: 'gone gone gone')		equals: 'console.error(''gone gone gone'')'! !!SUObjectTest methodsFor: 'testing-convertion' stamp: 'lr 12/19/2007 11:13'!testNumber	self assert: 123 equals: '123'! !!SUObjectTest methodsFor: 'testing-convertion' stamp: 'lr 7/12/2006 12:13'!testPoint	self assert: 1 @ 2 equals: '[1,2]'! !!SUObjectTest methodsFor: 'testing-other' stamp: 'lr 2/27/2007 20:55'!testResponders	self		assert: (self responders)		equals: 'Ajax.Responders.register({})'.	self		assert: (self responders register)		equals: 'Ajax.Responders.register({})'.	self		assert: (self responders unregister)		equals: 'Ajax.Responders.unregister({})'.	self		assert: (self responders onCreate: self function)		equals: 'Ajax.Responders.register({''onCreate'':function(){}})'.	self		assert: (self responders onComplete: self function)		equals: 'Ajax.Responders.register({''onComplete'':function(){}})'! !!SUObjectTest methodsFor: 'testing-script' stamp: 'lr 2/19/2007 13:45'!testScript	self		assert: self script		equals: ''! !!SUObjectTest methodsFor: 'testing-script' stamp: 'lr 6/11/2007 07:56'!testScriptAdd	| script |	script := self script.	script add: self mock.	self assert: script equals: 'mock'.	script add: self element.	self assert: script equals: 'mock;$(this)'! !!SUObjectTest methodsFor: 'testing-script' stamp: 'lr 6/11/2007 07:56'!testScriptConcatenate	| script |	script := SUElement new.	self assert: script equals: '$(this)'.	script := script , (self stream nextPutAll: 'foo').	self assert: script equals: '$(this);foo'.	script := script , (self stream nextPutAll: 'bar').	self assert: script equals: '$(this);foo;bar'.	script := script , (self script , (self stream nextPutAll: 'zork')).	self assert: script equals: '$(this);foo;bar;zork'! !!SUObjectTest methodsFor: 'testing-element' stamp: 'lr 10/28/2007 14:40'!testSelector	| selector |	selector := self factory selector add: '*'.	self assert: selector equals: '$$(''*'')'.	selector := self factory selector add: 'div.zork'; add: 'p#zork'.	self assert: selector equals: '$$(''div.zork'',''p#zork'')'.	self		assertEnumerable: [ self factory selector add: 'p>a' ]		prefix: '$$(''p>a'')'! !!SUObjectTest methodsFor: 'testing-other' stamp: 'lr 3/12/2007 20:52'!testSound	self		assert: (self sound play: 'blah.mp3')		equals: 'Sound.play(''blah.mp3'')'.	self		assert: (self sound play: 'blah.mp3'; replace: true)		equals: 'Sound.play(''blah.mp3'',{''replace'':true})'.	self		assert: (self sound play: 'blah.mp3'; track: 'mytrack')		equals: 'Sound.play(''blah.mp3'',{''track'':''mytrack''})'! !!SUObjectTest methodsFor: 'testing-stream' stamp: 'lr 4/21/2006 02:44'!testStreamArgument	| stream |	stream := self stream argument: 1.	self assert: stream contents = '(1)'! !!SUObjectTest methodsFor: 'testing-stream' stamp: 'lr 4/21/2006 02:44'!testStreamArguments	| stream |	stream := self stream arguments: #(1 2 3).	self assert: stream contents = '(1,2,3)'! !!SUObjectTest methodsFor: 'testing-stream' stamp: 'lr 4/21/2006 02:44'!testStreamCopy	| stream1 stream2 |	stream1 := self stream nextPutAll: 'foo'.	stream2 := stream1 copy nextPutAll: 'bar'.	stream1 nextPutAll: 'zork'.	self assert: stream1 contents = 'foozork'.	self assert: stream2 contents = 'foobar'! !!SUObjectTest methodsFor: 'testing-stream' stamp: 'lr 4/21/2006 02:44'!testStreamJavascript	| stream |	stream := self stream javascript: #(1 2).	self assert: stream contents = '[1,2]'! !!SUObjectTest methodsFor: 'testing-stream' stamp: 'lr 4/21/2006 02:44'!testStreamNew	self assert: self stream contents = ''! !!SUObjectTest methodsFor: 'testing-stream' stamp: 'lr 4/21/2006 02:44'!testStreamNextPut	| stream |	stream := self stream nextPut: $f.	self assert: stream contents = 'f'! !!SUObjectTest methodsFor: 'testing-stream' stamp: 'lr 4/21/2006 02:44'!testStreamNextPutAll	| stream |	stream := self stream nextPutAll: 'foo'.	self assert: stream contents = 'foo'! !!SUObjectTest methodsFor: 'testing-stream' stamp: 'lr 1/4/2007 22:03'!testStreamOn	self assert: (SUStream on: 'mock') equals: 'mock'! !!SUObjectTest methodsFor: 'testing-convertion' stamp: 'lr 5/18/2006 09:05'!testStringBasic	self assert: 'abc' equals: '''abc'''.	self assert: '123' equals: '''123'''! !!SUObjectTest methodsFor: 'testing-convertion' stamp: 'lr 5/18/2006 09:05'!testStringEscaping	self assert: '''' equals: '''\'''''.	self assert: '"' equals: '''"'''.	self assert: '\' equals: '''\\'''! !!SUObjectTest methodsFor: 'testing-convertion' stamp: 'lr 10/28/2007 14:40'!testStringSpecial	self assert: (String with: Character cr) equals: '''\r'''.	self assert: (String with: Character lf) equals: '''\n'''.	self assert: (String with: Character tab) equals: '''\t'''.	self assert: (String with: (Character value: 0)) equals: '''\0'''.	self assert: (String with: (Character value: 1)) equals: '''\x01'''.	self assert: (String with: (Character value: 31)) equals: '''\x1F'''! !!SUObjectTest methodsFor: 'testing-convertion' stamp: 'lr 8/27/2007 13:40'!testStringUnicode	self assert: (String with: (Character value: 1024)) equals: '''\u0400'''.	self assert: (String with: (Character value: 8364)) equals: '''\u20AC'''! !!Point methodsFor: '*scriptaculous' stamp: 'lr 4/11/2006 19:48'!javascriptOn: aStream	aStream nextPut: $[; javascript: self x; nextPut: $,; javascript: self y; nextPut: $]! !!Duration methodsFor: '*scriptaculous' stamp: 'lr 4/19/2006 09:45'!javascriptOn: aStream	aStream javascript: self asSeconds! !!Stream methodsFor: '*scriptaculous' stamp: 'lr 5/10/2006 20:31'!arguments: aCollection	self nextPut: $(.	aCollection		do: [ :each | self javascript: each ]		separatedBy: [ self nextPut: $, ].	self nextPut: $)! !!Stream methodsFor: '*scriptaculous' stamp: 'lr 4/11/2006 19:45'!javascript: anObject	anObject javascriptOn: self! !!Interval methodsFor: '*scriptaculous' stamp: 'lr 4/11/2006 19:47'!javascriptOn: aStream	aStream nextPutAll: '$R('; javascript: self first; nextPut: $,; javascript: self last; nextPut: $)! !!Association methodsFor: '*scriptaculous' stamp: 'lr 2/19/2007 13:45'!javascriptOn: aStream	aStream nextPut: $'; nextPutAll: self key asString.	self value isNil		ifTrue: [ aStream nextPut: $' ]		ifFalse: [			aStream nextPut: $=.			self value isString				ifTrue: [ aStream nextPutAll: self value; nextPut: $' ]				ifFalse: [ aStream nextPut: $'; nextPut: $+; javascript: self value ] ]! !!WASession methodsFor: '*scriptaculous' stamp: 'avi 9/24/2005 19:43'!effect	^ self addLoadScript: SUEffect new! !!WASession methodsFor: '*scriptaculous' stamp: 'lr 6/5/2009 17:26'!rememberScripts: aBlock	| old |	old := scripts. scripts := nil.	^ aBlock ensure: [ scripts := old ]! !!Object methodsFor: '*scriptaculous' stamp: 'lr 1/4/2007 17:20'!asFunction	^ self asFunction: #()! !!Object methodsFor: '*scriptaculous' stamp: 'lr 1/4/2007 17:21'!asFunction: aCollection	^ SUFunction new add: self; arguments: aCollection! !!Object methodsFor: '*scriptaculous' stamp: 'lr 4/11/2006 19:49'!asJavascript	^ String streamContents: [ :stream | self javascriptOn: stream ]! !!Object methodsFor: '*scriptaculous-printing' stamp: 'lr 4/20/2006 21:10'!javascriptOn: aStream	self printOn: aStream! !!SUApply methodsFor: 'accessing' stamp: 'lr 5/9/2006 20:49'!arguments	^ arguments! !!SUApply methodsFor: 'accessing' stamp: 'lr 5/9/2006 20:49'!arguments: aCollection	arguments := aCollection! !!SUApply methodsFor: 'printing' stamp: 'lr 5/10/2006 21:23'!printContentOn: aStream	super printContentOn: aStream.	aStream arguments: self arguments! !!SUAssignment methodsFor: 'accessing' stamp: 'lr 7/4/2007 07:43'!object	^ object! !!SUAssignment methodsFor: 'accessing' stamp: 'lr 7/4/2007 07:44'!object: anObject	object := anObject! !!SUAssignment methodsFor: 'printing' stamp: 'lr 10/28/2007 14:40'!printContentOn: aStream	super printContentOn: aStream.	aStream nextPutAll: '='; javascript: self object! !!SUCreate methodsFor: 'printing' stamp: 'lr 5/10/2006 08:39'!printContentOn: aStream	aStream nextPutAll: 'new '.	super printContentOn: aStream! !!SUDecoration methodsFor: 'accessing' stamp: 'lr 5/9/2006 20:09'!owner	^ owner! !!SUDecoration methodsFor: 'accessing' stamp: 'lr 5/9/2006 20:09'!owner: anObject	owner := anObject! !!SUDecoration methodsFor: 'printing' stamp: 'lr 5/9/2006 20:34'!printContentOn: aStream	self owner printContentOn: aStream! !!SUExecuter methodsFor: 'accessing' stamp: 'lr 8/23/2006 14:51'!callback	^ callback ifNil: [ callback := self defaultCallback ]! !!SUExecuter methodsFor: 'accessing' stamp: 'lr 8/23/2006 14:51'!callback: anObject	callback := anObject! !!SUExecuter methodsFor: 'private' stamp: 'lr 8/23/2006 14:57'!defaultArguments	^ Array with: self callback with: self frequency! !!SUExecuter methodsFor: 'private' stamp: 'lr 8/23/2006 14:52'!defaultCallback	| stream |	stream := SUStream new.	self owner printContentOn: stream.	^ stream asFunction! !!SUExecuter methodsFor: 'private' stamp: 'lr 8/23/2006 14:51'!defaultFrequency	^ 1 second! !!SUExecuter methodsFor: 'accessing' stamp: 'lr 8/23/2006 14:51'!frequency	^ frequency ifNil: [ frequency := self defaultFrequency ]! !!SUExecuter methodsFor: 'accessing' stamp: 'lr 8/23/2006 14:39'!frequency: anInteger	frequency := anInteger! !!SUExecuter methodsFor: 'printing' stamp: 'lr 11/22/2006 11:09'!printContentOn: aStream	aStream nextPutAll: 'new PeriodicalExecuter'; arguments: self defaultArguments! !!SUIfThenElse methodsFor: 'accessing' stamp: 'lr 7/10/2007 10:16'!falseStatement	^ falseStatement! !!SUIfThenElse methodsFor: 'accessing' stamp: 'lr 7/10/2007 10:16'!falseStatement: anObject	falseStatement := anObject! !!SUIfThenElse methodsFor: 'printing' stamp: 'lr 8/8/2007 14:17'!printContentOn: aStream	aStream nextPut: $(.	super printContentOn: aStream.	aStream nextPut: $?.	aStream javascript: self trueStatement.	aStream nextPut: $:.	aStream javascript: self falseStatement.	aStream nextPut: $)! !!SUIfThenElse methodsFor: 'accessing' stamp: 'lr 7/10/2007 10:16'!trueStatement	^ trueStatement! !!SUIfThenElse methodsFor: 'accessing' stamp: 'lr 7/10/2007 10:16'!trueStatement: anObject	trueStatement := anObject! !!SUAccess methodsFor: 'printing' stamp: 'lr 5/9/2006 20:48'!printContentOn: aStream	super printContentOn: aStream.	aStream nextPut: $.; nextPutAll: self name! !!SUAlias methodsFor: 'printing' stamp: 'lr 5/18/2006 08:22'!printContentOn: aStream	aStream nextPutAll: self name! !!SUAssign methodsFor: 'printing' stamp: 'lr 7/6/2006 16:27'!printContentOn: aStream	aStream nextPutAll: self name; nextPut: $=.	super printContentOn: aStream! !!SUAssignLocal methodsFor: 'printing' stamp: 'lr 7/6/2006 16:28'!printContentOn: aStream	aStream nextPutAll: 'var '.	super printContentOn: aStream! !!SUMember methodsFor: 'accessing' stamp: 'lr 5/9/2006 20:46'!name	^ name! !!SUMember methodsFor: 'accessing' stamp: 'lr 5/9/2006 20:46'!name: aString	name := aString! !!SUProperty methodsFor: 'printing' stamp: 'lr 5/9/2006 20:48'!printContentOn: aStream	super printContentOn: aStream.	aStream nextPut: $[; javascript: self name; nextPut: $]! !!SUNegation methodsFor: 'printing' stamp: 'lr 1/4/2007 17:37'!printContentOn: aStream	aStream nextPut: $!!.	super printContentOn: aStream! !!SUAfter methodsFor: 'printing' stamp: 'lr 5/9/2006 20:29'!printContentOn: aStream	super printContentOn: aStream.	aStream nextPut: $;; javascript: self statement! !!SUBefore methodsFor: 'printing' stamp: 'lr 5/9/2006 20:29'!printContentOn: aStream	aStream javascript: self statement; nextPut: $;.	super printContentOn: aStream! !!SUBinary methodsFor: 'accessing' stamp: 'lr 7/10/2007 10:22'!operator	^ operator! !!SUBinary methodsFor: 'accessing' stamp: 'lr 7/10/2007 10:22'!operator: aString	operator := aString! !!SUBinary methodsFor: 'printing' stamp: 'lr 7/10/2007 10:23'!printContentOn: aStream	super printContentOn: aStream.	aStream nextPutAll: self operator; javascript: self statement! !!SUCondition methodsFor: 'printing' stamp: 'lr 5/9/2006 20:29'!printContentOn: aStream	aStream nextPutAll: 'if('; javascript: self statement; nextPutAll: '){'.	super printContentOn: aStream.	aStream nextPut: $}! !!SUStatement class methodsFor: 'instance-creation' stamp: 'lr 5/9/2006 20:19'!on: anObject	^ self new statement: anObject! !!SUStatement methodsFor: 'accessing' stamp: 'lr 5/9/2006 20:14'!statement	^ statement! !!SUStatement methodsFor: 'accessing' stamp: 'lr 5/9/2006 20:14'!statement: anObject	statement := anObject! !!SUTimeout class methodsFor: 'instance-creation' stamp: 'lr 4/17/2007 14:26'!duration: aDuration	^ self new duration: aDuration! !!SUTimeout methodsFor: 'accessing' stamp: 'lr 4/17/2007 14:21'!duration	^ duration! !!SUTimeout methodsFor: 'accessing' stamp: 'lr 4/17/2007 14:22'!duration: aDuration	duration := aDuration! !!SUTimeout methodsFor: 'printing' stamp: 'lr 4/17/2007 14:29'!printContentOn: aStream	aStream nextPutAll: 'setTimeout(function(){'.	super printContentOn: aStream.	aStream nextPutAll: '},'; javascript: self duration; nextPut: $)! !!SUFactory class methodsFor: 'instance-creation' stamp: 'lr 6/18/2007 06:48'!on: aCanvas	^ self on: aCanvas using: nil! !!SUFactory class methodsFor: 'instance-creation' stamp: 'lr 6/18/2007 06:48'!on: aCanvas using: aBlock	^ self basicNew initializeOn: aCanvas using: aBlock! !!SUFactory methodsFor: 'creational-controls' stamp: 'lr 1/4/2007 19:18'!autocompleter	^ self create: SUAutocompleter! !!SUFactory methodsFor: 'private' stamp: 'lr 1/4/2007 20:30'!create: aClass	^ self register: (aClass on: context)! !!SUFactory methodsFor: 'creational' stamp: 'lr 1/4/2007 19:16'!document	^ (self create: SUObject) alias: 'document'! !!SUFactory methodsFor: 'creational-dragging' stamp: 'lr 1/4/2007 19:18'!draggable	^ self create: SUDraggable! !!SUFactory methodsFor: 'creational-dragging' stamp: 'lr 1/4/2007 19:18'!droppable	^ self create: SUDroppable! !!SUFactory methodsFor: 'creational-elements' stamp: 'lr 1/4/2007 19:18'!effect	^ self create: SUEffect! !!SUFactory methodsFor: 'creational-elements' stamp: 'lr 1/4/2007 19:18'!element	^ self create: SUElement! !!SUFactory methodsFor: 'creational-ajax' stamp: 'lr 1/4/2007 19:16'!evaluator	^ self create: SUEvaluator! !!SUFactory methodsFor: 'creational' stamp: 'lr 1/4/2007 20:56'!event	^ self create: SUEvent! !!SUFactory methodsFor: 'creational-elements' stamp: 'lr 1/4/2007 19:19'!form	^ self create: SUForm! !!SUFactory methodsFor: 'creational-elements' stamp: 'lr 1/4/2007 19:19'!formElement	^ self create: SUFormElement! !!SUFactory methodsFor: 'creational-observers' stamp: 'lr 5/19/2009 09:07'!formElementObserver	^ self create: SUFormElementObserver! !!SUFactory methodsFor: 'creational-observers' stamp: 'lr 5/19/2009 09:07'!formObserver	^ self create: SUFormObserver! !!SUFactory methodsFor: 'creational' stamp: 'lr 2/19/2007 13:44'!function	^ self create: SUFunction! !!SUFactory methodsFor: 'creational-controls' stamp: 'lr 1/4/2007 19:18'!inPlaceEditor	^ self create: SUInPlaceEditor! !!SUFactory methodsFor: 'initialization' stamp: 'lr 6/18/2007 06:49'!initializeOn: aContext using: aBlock	context := aContext.	block := aBlock! !!SUFactory methodsFor: 'creational-ajax' stamp: 'lr 1/4/2007 19:17'!insertion	^ self create: SUInsertion! !!SUFactory methodsFor: 'creational' stamp: 'lr 1/4/2007 21:09'!logger	^ self create: SULogger! !!SUFactory methodsFor: 'creational-ajax' stamp: 'lr 1/4/2007 19:17'!periodical	^ self create: SUPeriodical! !!SUFactory methodsFor: 'creational-ajax' stamp: 'lr 6/5/2009 17:26'!periodicalEvaluator	^ self create: SUPeriodicalEvaluator! !!SUFactory methodsFor: 'private' stamp: 'lr 6/18/2007 06:50'!register: anObject	^ block isNil		ifTrue: [ anObject ]		ifFalse: [ block value: anObject ]! !!SUFactory methodsFor: 'creational-ajax' stamp: 'lr 1/4/2007 19:17'!request	^ self create: SURequest! !!SUFactory methodsFor: 'creational-ajax' stamp: 'lr 2/27/2007 20:51'!responders	^ self create: SUResponders! !!SUFactory methodsFor: 'creational' stamp: 'lr 1/4/2007 19:20'!script	^ self create: SUScript! !!SUFactory methodsFor: 'creational-elements' stamp: 'lr 1/4/2007 19:19'!selector	^ self create: SUSelector! !!SUFactory methodsFor: 'creational-controls' stamp: 'lr 1/4/2007 19:18'!slider	^ self create: SUSlider! !!SUFactory methodsFor: 'creational-dragging' stamp: 'lr 1/4/2007 19:18'!sortable	^ self create: SUSortable! !!SUFactory methodsFor: 'creational-elements' stamp: 'lr 3/12/2007 16:44'!sound	^ self create: SUSound! !!SUFactory methodsFor: 'creational' stamp: 'lr 1/4/2007 20:31'!stream	^ self register: SUStream new! !!SUFactory methodsFor: 'creational-ajax' stamp: 'lr 1/4/2007 19:17'!updater	^ self create: SUUpdater! !!SUFactory methodsFor: 'creational' stamp: 'lr 1/4/2007 19:16'!window	^ (self create: SUObject) alias: 'window'! !!SUJoin class methodsFor: 'instance-creation' stamp: 'avi 9/27/2005 23:29'!join: aCollection with: aString	^ self new		collection: aCollection;		joiner: aString;		yourself! !!SUJoin methodsFor: 'accessing' stamp: 'avi 9/27/2005 23:40'!collection	^ collection! !!SUJoin methodsFor: 'accessing' stamp: 'lr 6/30/2006 19:33'!collection: aCollection	collection := aCollection! !!SUJoin methodsFor: 'accessing' stamp: 'avi 9/27/2005 23:40'!joiner	^ joiner! !!SUJoin methodsFor: 'accessing' stamp: 'lr 6/30/2006 19:33'!joiner: aString	joiner := aString! !!SUJoin methodsFor: 'printing' stamp: 'lr 4/21/2006 14:41'!printOn: aStream	aStream javascript: self collection; nextPutAll: '.join('; javascript: self joiner; nextPut: $)! !!SUElement methodsFor: 'geometric' stamp: 'lr 6/5/2009 17:26'!absolutize	"Turns element into an absolutely-positioned element without changing its position in the page layout."	self call: 'absolutize'! !!SUElement methodsFor: 'styling-classes' stamp: 'lr 6/11/2007 07:23'!addClassName: aString	"Adds a CSS class to element."	self call: 'addClassName' argument: aString! !!SUElement methodsFor: 'enumerating' stamp: 'lr 10/28/2007 14:40'!ancestors	"Collects all of element's ancestors and returns them as an array of extended elements."	^ self call: 'ancestors'; enumerator! !!SUElement methodsFor: 'enumerating' stamp: 'lr 10/28/2007 14:40'!childElements	"Collects all of the element's immediate descendants (i.e. children) and returns them as an array of extended elements."	^ self call: 'childElements'; enumerator! !!SUElement methodsFor: 'modifying' stamp: 'lr 6/11/2007 07:21'!cleanWhitespace	"Removes all of element's text nodes which contain only whitespace."	self call: 'cleanWhitespace'! !!SUElement methodsFor: 'geometric' stamp: 'lr 12/2/2007 18:16'!clonePosition: anElement	"Clones the position and/or dimensions of source onto element as defined by the optional argument options."	self call: 'clonePosition' argument: anElement! !!SUElement methodsFor: 'geometric' stamp: 'lr 12/2/2007 18:15'!cumulativeOffset	"Returns the offsets of element from the top left corner of the document."	self call: 'cumulativeOffset'! !!SUElement methodsFor: 'geometric' stamp: 'lr 12/2/2007 18:16'!cumulativeScrollOffset	"Calculates the cumulative scroll offset of an element in nested scrolling containers."	self call: 'cumulativeScrollOffset'! !!SUElement methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!descendantOf: anElement	"Checks if element is a descendant of ancestor."	self call: 'descendantOf' argument: anElement! !!SUElement methodsFor: 'enumerating' stamp: 'lr 10/28/2007 14:40'!descendants	"Collects all of element's descendants and returns them as an array of extended elements."	^ self call: 'descendants'; enumerator! !!SUElement methodsFor: 'geometric' stamp: 'lr 10/28/2007 14:40'!dimensions	"Finds the computed width and height of element and returns them as key/value pairs of an object."	self call: 'getDimensions'! !!SUElement methodsFor: 'navigation' stamp: 'lr 11/1/2007 16:56'!down	self down: nil at: nil! !!SUElement methodsFor: 'navigation' stamp: 'lr 11/1/2007 16:56'!down: aString	self down: aString at: nil! !!SUElement methodsFor: 'navigation' stamp: 'lr 11/1/2007 16:57'!down: aString at: anInteger	"Returns element's first descendant (or the index anInteger-th one, if anInteger is specified) that matches the css rule aString. If no aString is provided, all descendants are considered. If no descendant matches these criteria, undefined is returned."	self call: 'down' arguments: (self rule: aString at: anInteger)! !!SUElement methodsFor: 'deprecated' stamp: 'lr 6/5/2009 17:26'!elementsByClassName: aString	"Fetches all of element's descendants which have a CSS class of className and returns them as an array of extended elements."	self deprecatedApi: 'As of Prototype 1.6, #elementsByClassName: has been deprecated in favor of the more concise #select:.'.	^ self call: 'getElementsByClassName' argument: aString; enumerator! !!SUElement methodsFor: 'deprecated' stamp: 'lr 12/2/2007 18:26'!elementsBySelector: aString	"Takes an arbitrary number of CSS selectors (strings) and returns a document-order array of extended children of element that match any of them."	self deprecatedApi: 'As of Prototype 1.6, #elementsBySelector: has been deprecated in favor of the more concise #select:.'.	^ self call: 'getElementsBySelector' argument: aString; enumerator! !!SUElement methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!empty	"Tests whether element is empty (i.e. contains only whitespace)."	self call: 'empty'! !!SUElement methodsFor: 'events' stamp: 'lr 6/5/2009 17:26'!fire: aString	"Fires a custom event with the current element as its target."	self call: 'fire' argument: aString! !!SUElement methodsFor: 'events' stamp: 'lr 6/5/2009 17:26'!fire: aString with: anObject	"Fires a custom event with the current element as its target."	self call: 'fire' arguments: (Array with: aString with: anObject)! !!SUElement methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!firstDescendant	"Returns the first child that is an element. This is opposed to firstChild DOM property which will return any node (whitespace in most usual cases)."	self call: 'firstDescendant'! !!SUElement methodsFor: 'styling-classes' stamp: 'lr 6/11/2007 07:23'!hasClassName: aString	"Checks whether element has the given CSS className."	self call: 'hasClassName' argument: aString! !!SUElement methodsFor: 'geometric' stamp: 'lr 10/28/2007 14:40'!height	"Finds and returns the computed height of element."	self call: 'getHeight'! !!SUElement methodsFor: 'displaying' stamp: 'lr 6/11/2007 07:20'!hide	"Hides and returns element."	self call: 'hide'! !!SUElement methodsFor: 'accessing' stamp: 'lr 6/11/2007 07:46'!id	^ id ifNil: [ SUStream on: 'this' ]! !!SUElement methodsFor: 'accessing' stamp: 'lr 6/11/2007 07:02'!id: aString	id := aString! !!SUElement methodsFor: 'querying' stamp: 'lr 12/2/2007 18:29'!identify	"Returns element's id attribute if it exists, or sets and returns a unique, auto-generated id."	self call: 'identify'! !!SUElement methodsFor: 'deprecated' stamp: 'lr 12/2/2007 18:30'!immediateDescendants	"Collects all of the element's immediate descendants (i.e. children) and returns them as an array of extended elements."	self deprecatedApi: 'As of Prototype 1.6, #immediateDescendants has been deprecated in favor of the more concise #childElements.'.	^ self call: 'immediateDescendants'; enumerator! !!SUElement methodsFor: 'modifying' stamp: 'lr 12/2/2007 18:08'!insert: anObject	"Inserts content before, after, at the top of, or at the bottom of element, as specified by the position property of the argument. If the argument is the content itself, insert will append it to element."	self call: 'insert' argument: (self render: anObject)! !!SUElement methodsFor: 'modifying' stamp: 'lr 6/5/2009 17:26'!insert: anObject position: aString	"Inserts anObject before, after, at the top of, or at the bottom of element."	self call: 'insert' argument: (Dictionary new		at: aString put: (self render: anObject);		yourself)! !!SUElement methodsFor: 'modifying' stamp: 'lr 12/2/2007 18:10'!insertAfter: anObject	self insert: anObject position: 'after'! !!SUElement methodsFor: 'modifying' stamp: 'lr 12/2/2007 18:10'!insertBefore: anObject	self insert: anObject position: 'before'! !!SUElement methodsFor: 'modifying' stamp: 'lr 12/2/2007 18:10'!insertBottom: anObject	self insert: anObject position: 'bottom'! !!SUElement methodsFor: 'modifying' stamp: 'lr 12/2/2007 18:10'!insertTop: anObject	self insert: anObject position: 'top'! !!SUElement methodsFor: 'geometric' stamp: 'lr 6/11/2007 07:21'!makeClipping	"Simulates the poorly supported CSS clip property by setting element's overflow value to 'hidden'. Returns element."	self call: 'makeClipping'! !!SUElement methodsFor: 'geometric' stamp: 'lr 6/11/2007 07:21'!makePositioned	"Allows for the easy creation of CSS containing block by setting element's CSS position to 'relative' if its initial position is either 'static' or undefined. Returns element."	self call: 'makePositioned'! !!SUElement methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!match: aString	"Checks if element matches the given CSS selector."	self call: 'match' argument: aString! !!SUElement methodsFor: 'navigation' stamp: 'lr 11/1/2007 16:53'!next	self next: nil at: nil! !!SUElement methodsFor: 'navigation' stamp: 'lr 11/1/2007 16:53'!next: aString	self next: aString at: nil! !!SUElement methodsFor: 'navigation' stamp: 'lr 11/1/2007 16:51'!next: aString at: anInteger	"Returns element's following sibling (or the index anInteger-th one, if anInteger is specified) that matches the css rule aString. If no aString is provided, all following siblings are considered. If no following sibling matches these criteria, undefined is returned."	self call: 'next' arguments: (self rule: aString at: anInteger)! !!SUElement methodsFor: 'enumerating' stamp: 'lr 10/28/2007 14:40'!nextSiblings	"Collects all of element's next siblings and returns them as an array of extended elements."	^ self call: 'nextSiblings'; enumerator! !!SUElement methodsFor: 'geometric' stamp: 'lr 12/2/2007 19:22'!offsetParent	"Returns element's closest positioned ancestor. If none is found, the body element is returned."	self call: 'getOffsetParent'! !!SUElement methodsFor: 'events' stamp: 'lr 12/2/2007 18:22'!on: aString do: aHandlerObject	"Register the handler aBlock for the event aString on the receiving DOM element. Please refer to SUEvent>>#observe:on:do: for further information."	self call: 'observe' arguments: (Array with: aString with: (aHandlerObject asFunction: #('event')))! !!SUElement methodsFor: 'geometric' stamp: 'lr 12/2/2007 18:34'!positionedOffset	"Returns element's offset relative to its closest positioned ancestor (the element that would be returned by #offsetParent)."	self call: 'positionedOffset'! !!SUElement methodsFor: 'navigation' stamp: 'lr 11/1/2007 16:54'!previous	self previous: nil at: nil! !!SUElement methodsFor: 'navigation' stamp: 'lr 11/1/2007 16:54'!previous: aString	self previous: aString at: nil! !!SUElement methodsFor: 'navigation' stamp: 'lr 11/1/2007 16:57'!previous: aString at: anInteger	"Returns element's previous sibling (or the index anInteger-th one, if anInteger is specified) that matches the css rule aString. If no aString is provided, all previous siblings are considered. If no previous sibling matches these criteria, undefined is returned."	self call: 'previous' arguments: (self rule: aString at: anInteger)! !!SUElement methodsFor: 'enumerating' stamp: 'lr 10/28/2007 14:40'!previousSiblings	"Collects all of element's previous siblings and returns them as an array of extended elements."	^ self call: 'previousSiblings'; enumerator! !!SUElement methodsFor: 'printing' stamp: 'lr 6/11/2007 07:20'!printContentOn: aStream	aStream nextPut: $$; arguments: (Array with: self id)! !!SUElement methodsFor: 'attributes' stamp: 'lr 3/19/2008 19:18'!readAttribute: aString	"Answer the value of element's attribute or null if attribute has not been specified."	self call: 'readAttribute' argument: aString! !!SUElement methodsFor: 'enumerating' stamp: 'lr 12/2/2007 18:41'!recursivelyCollect: aString	"Recursively collects elements whose relationship is specified by aString. aString has to be a property of element that points to a single DOM node. Returns an array of extended elements."	^ self call: 'recursivelyCollect' argument: aString; enumerator! !!SUElement methodsFor: 'geometric' stamp: 'lr 6/5/2009 17:26'!relativize	"Turns element into an relatively-positioned element without changing its position in the page layout."	self call: 'relativize'! !!SUElement methodsFor: 'modifying' stamp: 'lr 6/11/2007 07:21'!remove	"Completely removes element from the document and returns it."	self call: 'remove'! !!SUElement methodsFor: 'attributes' stamp: 'lr 6/5/2009 17:26'!removeAttribute: aString	"Remove attribute aString."	self writeAttribute: aString value: nil! !!SUElement methodsFor: 'styling-classes' stamp: 'lr 6/11/2007 07:23'!removeClassName: aString	"Removes element's CSS className and returns element."	self call: 'removeClassName' argument: aString! !!SUElement methodsFor: 'modifying' stamp: 'lr 12/2/2007 18:42'!replace: anObject	"Replaces element by the content of the html argument and returns the removed element."	self call: 'replace' argument: (self render: anObject)! !!SUElement methodsFor: 'private' stamp: 'lr 11/1/2007 16:52'!rule: aString at: anInteger	^ Array streamContents: [ :stream |		(aString isNil or: [ aString isEmpty ])			ifFalse: [ stream nextPut: aString ].		(anInteger isNil or: [ anInteger isZero ])			ifFalse: [ stream nextPut: anInteger ] ]! !!SUElement methodsFor: 'displaying' stamp: 'lr 6/11/2007 07:20'!scroll	"Scrolls the window so that element appears at the top of the viewport."	self call: 'scrollTo'! !!SUElement methodsFor: 'enumerating' stamp: 'lr 12/2/2007 18:17'!select: aString	"Takes a CSS selector and returns an enumerable of extended descendants of element that match aString."	^ self call: 'select' argument: aString; enumerator! !!SUElement methodsFor: 'displaying' stamp: 'lr 6/11/2007 07:20'!show	"Displays and returns element."	self call: 'show'! !!SUElement methodsFor: 'enumerating' stamp: 'lr 10/28/2007 14:40'!siblings	"Collects all of element's siblings and returns them as an array of extended elements."	^ self call: 'siblings'; enumerator! !!SUElement methodsFor: 'styling-styles' stamp: 'lr 6/11/2007 07:24'!style: aDictionary	"Modifies element's CSS style properties. Styles are passed as a hash of property-value pairs in which the properties are specified in their camelized form."	self call: 'setStyle' argument: aDictionary! !!SUElement methodsFor: 'styling-styles' stamp: 'lr 6/11/2007 07:24'!styleAt: aString	"Returns the given CSS property value of element. property can be specified in either of its CSS or camelized form."	self call: 'getStyle' argument: aString! !!SUElement methodsFor: 'styling-styles' stamp: 'lr 2/27/2007 21:06'!styleAt: aPropertyString put: anObject	"Modifies element's CSS style properties. Styles are passed as a hash of property-value pairs in which the properties are specified in their camelized form."	self style: (Dictionary new		at: aPropertyString put: anObject;		yourself)! !!SUElement methodsFor: 'displaying' stamp: 'lr 6/11/2007 07:20'!toggle	"Toggles the visibility of element."	self call: 'toggle'! !!SUElement methodsFor: 'styling-classes' stamp: 'lr 6/11/2007 07:24'!toggleClassName: aString	"Toggles element's CSS className and returns element."	self call: 'toggleClassName' argument: aString! !!SUElement methodsFor: 'geometric' stamp: 'lr 6/11/2007 07:22'!undoClipping	"Sets element's CSS overflow property back to the value it had before Element.makeClipping() was applied. Returns element."	self call: 'undoClipping'! !!SUElement methodsFor: 'geometric' stamp: 'lr 6/11/2007 07:22'!undoPositioned	"Sets element back to the state it was before Element.makePositioned was applied to it. Returns element."	self call: 'undoPositioned'! !!SUElement methodsFor: 'navigation' stamp: 'lr 11/1/2007 16:58'!up	self up: nil at: nil! !!SUElement methodsFor: 'navigation' stamp: 'lr 11/1/2007 16:58'!up: aString	self up: aString at: nil! !!SUElement methodsFor: 'navigation' stamp: 'lr 11/1/2007 16:57'!up: aString at: anInteger	"Returns element's first ancestor (or the index anInteger-th one, if anInteger is specified) that matches the css rule aString. If no aString is provided, all ancestors are considered. If no ancestor matches these criteria, undefined is returned."	self call: 'up' arguments: (self rule: aString at: anInteger)! !!SUElement methodsFor: 'modifying' stamp: 'lr 12/2/2007 18:42'!update: anObject	"Replaces the content of element with the provided newContent argument and returns element."	self call: 'update' argument: (self render: anObject)! !!SUElement methodsFor: 'geometric' stamp: 'lr 12/2/2007 18:44'!viewportOffset	"Returns the X/Y coordinates of element relative to the viewport."	self call: 'viewportOffset'! !!SUElement methodsFor: 'displaying' stamp: 'lr 10/28/2007 14:40'!visible	"Returns a Boolean indicating whether or not element is visible (i.e. whether its inline style property is set to display: none;)"	self call: 'visible'! !!SUElement methodsFor: 'geometric' stamp: 'lr 10/28/2007 14:40'!width	"Finds and returns the computed width of element."	self call: 'getWidth'! !!SUElement methodsFor: 'modifying' stamp: 'lr 12/2/2007 19:26'!wrap: aString	"Wraps an element inside another, then returns the wrapper."	self wrap: aString attributes: Dictionary new! !!SUElement methodsFor: 'modifying' stamp: 'lr 12/2/2007 19:26'!wrap: aString attributes: aDictionary	"Wraps an element inside another, then returns the wrapper."	self call: 'wrap' arguments: (Array with: aString with: aDictionary)! !!SUElement methodsFor: 'attributes' stamp: 'lr 6/5/2009 17:26'!writeAttribute: aString value: anObject	"Add or replace attribute aString with anObject."	self call: 'writeAttribute' arguments: (Array with: aString with: anObject)! !!SUForm methodsFor: 'actions' stamp: 'lr 6/11/2007 07:59'!disable	"Disables the form as whole. Form controls will be visible but uneditable."	self call: 'disable'! !!SUForm methodsFor: 'enumerating' stamp: 'lr 9/12/2007 07:31'!elements	"Returns a collection of all form controls within a form."	^ self call: 'getElements'; enumerator! !!SUForm methodsFor: 'actions' stamp: 'lr 6/11/2007 08:00'!enable	"Enables a fully or partially disabled form."	self call: 'enable'! !!SUForm methodsFor: 'querying' stamp: 'lr 6/11/2007 08:00'!findFirstElement	"Finds first non-hidden, non-disabled form control."	self call: 'findFirstElement'! !!SUForm methodsFor: 'actions' stamp: 'lr 6/11/2007 08:00'!focusFirstElement	"Gives keyboard focus to the first element of the form."	self call: 'focusFirstElement'! !!SUForm methodsFor: 'enumerating' stamp: 'lr 9/12/2007 07:31'!inputs	"Returns a collection of all INPUT elements in a form. Use optional type and name arguments to restrict the search on these attributes."	^ self call: 'getInputs'; enumerator! !!SUForm methodsFor: 'actions' stamp: 'lr 6/11/2007 08:00'!request	"A convenience method for serializing and submitting the form via an SURequest to the URL of the form's action attribute."	self call: 'request'! !!SUForm methodsFor: 'actions' stamp: 'lr 6/11/2007 07:59'!reset	"Resets a form to its default values."	self call: 'reset'! !!SUForm methodsFor: 'querying' stamp: 'lr 6/11/2007 08:00'!serialize	"Serialize form data to a string suitable for Ajax requests (default behavior) or, if optional getHash evaluates to true, an object hash where keys are form control names and values are data."	self call: 'serialize'! !!SUForm methodsFor: 'actions' stamp: 'lr 6/12/2007 16:55'!submit	self call: 'submit'! !!SUFormElement methodsFor: 'actions' stamp: 'lr 10/28/2007 14:40'!activate	"Gives focus to a form control and selects its contents if it is a text input."	self call: 'activate'! !!SUFormElement methodsFor: 'actions' stamp: 'lr 10/28/2007 14:40'!clear	"Clears the contents of a text input."	self call: 'clear'! !!SUFormElement methodsFor: 'actions' stamp: 'lr 10/28/2007 14:40'!disable	"Disables a form control, effectively preventing its value to be changed until it is enabled again."	self call: 'disable'! !!SUFormElement methodsFor: 'actions' stamp: 'lr 10/28/2007 14:40'!enable	"Enables a previously disabled form control."	self call: 'enable'! !!SUFormElement methodsFor: 'actions' stamp: 'lr 10/28/2007 14:40'!focus	"Gives keyboard focus to an element."	self call: 'focus'! !!SUFormElement methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!present	"Returns true if a text input has contents, false otherwise."	self call: 'present'! !!SUFormElement methodsFor: 'actions' stamp: 'lr 10/28/2007 14:40'!select	"Selects the current text in a text input."	self call: 'select'! !!SUFormElement methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!serialize	"Creates an URL-encoded string representation of a form control in the name=value format."	self call: 'serialize'! !!SUFormElement methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!value	"Returns the current value of a form control. A string is returned for most controls; only multiple select boxes return an array of values. The global shortcut for this method is $F()."	self call: 'getValue'! !!SUEnumerable class methodsFor: 'instance-creation' stamp: 'lr 6/18/2007 06:25'!on: aCanvas receiver: anObject	^ (self on: aCanvas) receiver: anObject! !!SUEnumerable methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!all: anObject	"Determines whether all the elements are boolean-equivalent to true, either directly or through computation by the provided iterator."	self call: 'all' argument: (self iteratorFor: anObject)! !!SUEnumerable methodsFor: 'enumerating' stamp: 'lr 6/16/2007 18:46'!allSatisfy: anObject	^ self all: anObject! !!SUEnumerable methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!any: anObject	"Determines whether at least one element is boolean-equivalent to true, either directly or through computation by the provided iterator."	self call: 'any' argument: (self iteratorFor: anObject)! !!SUEnumerable methodsFor: 'enumerating' stamp: 'lr 6/16/2007 18:46'!anySatisfy: anObject	^ self any: anObject! !!SUEnumerable methodsFor: 'enumerating' stamp: 'lr 6/16/2007 18:42'!collect: anObject	^ self map: anObject! !!SUEnumerable methodsFor: 'enumerating' stamp: 'lr 6/16/2007 18:42'!detect: anObject	^ self find: anObject! !!SUEnumerable methodsFor: 'enumerating' stamp: 'lr 6/16/2007 18:43'!detectMax: anObject	^ self max: anObject! !!SUEnumerable methodsFor: 'enumerating' stamp: 'lr 6/16/2007 18:43'!detectMin: anObject	^ self min: anObject! !!SUEnumerable methodsFor: 'enumerating' stamp: 'lr 6/16/2007 18:42'!do: anObject	^ self each: anObject! !!SUEnumerable methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!each: anObject	"The cornerstone of Enumerable. It lets you iterate over all the elements in a generic fashion, then returns the Enumerable, thereby allowing chain-calling."	self call: 'each' argument: (self iteratorFor: anObject return: false)! !!SUEnumerable methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!find: anObject	"Finds the first element for which the iterator returns true."	self call: 'find' argument: (self iteratorFor: anObject)! !!SUEnumerable methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!findAll: anObject	"Returns all the elements for which the iterator returned true."	self call: 'findAll' argument: (self iteratorFor: anObject)! !!SUEnumerable methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!grep: aString	"Returns all the elements whose string representations match the regular expression."	self call: 'grep' argument: aString! !!SUEnumerable methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!include: anObject	"Determines whether a given object is in the Enumerable or not, based on the == comparison operator."	self call: 'include' argument: anObject! !!SUEnumerable methodsFor: 'querying' stamp: 'lr 6/18/2007 06:16'!invoke: aString	self invoke: aString withAll: #()! !!SUEnumerable methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!invoke: aString with: anObject	self invoke: aString withAll: (Array with: anObject)! !!SUEnumerable methodsFor: 'querying' stamp: 'lr 6/18/2007 06:16'!invoke: aString withAll: anArray	self call: 'invoke' arguments: (Array with: aString) , anArray! !!SUEnumerable methodsFor: 'private' stamp: 'lr 6/18/2007 09:04'!iteratorFor: anObject	^ self iteratorFor: anObject return: true! !!SUEnumerable methodsFor: 'private' stamp: 'lr 6/18/2007 09:05'!iteratorFor: anObject return: aBoolean	^ anObject isBlock		ifFalse: [ anObject asFunction ]		ifTrue: [ (SUFunction on: self canvas iterator: anObject) return: aBoolean ]! !!SUEnumerable methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!map: anObject	"Returns the results of applying the iterator to each element."	self call: 'map' argument: (self iteratorFor: anObject)! !!SUEnumerable methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!max: anObject	"Returns the maximum element (or element-based computation), or undefined if the enumeration is empty. Elements are either compared directly, or by first applying the iterator and comparing returned values."	self call: 'max' argument: (self iteratorFor: anObject)! !!SUEnumerable methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!min: anObject	"Returns the minimum element (or element-based computation), or undefined if the enumeration is empty. Elements are either compared directly, or by first applying the iterator and comparing returned values."	self call: 'min' argument: (self iteratorFor: anObject)! !!SUEnumerable methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!pluck: aString	"Optimization for a common use-case of collect: fetching the same property for all the elements. Returns the property values."	self call: 'pluck' argument: aString! !!SUEnumerable methodsFor: 'printing' stamp: 'lr 6/16/2007 18:30'!printContentOn: aStream	self receiver printOn: aStream! !!SUEnumerable methodsFor: 'accessing' stamp: 'lr 6/18/2007 06:23'!receiver	^ receiver! !!SUEnumerable methodsFor: 'accessing' stamp: 'lr 6/18/2007 06:26'!receiver: anObject	receiver := anObject! !!SUEnumerable methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!reject: anObject	"Returns all the elements for which the iterator returned false."	self call: 'reject' argument: (self iteratorFor: anObject)! !!SUEnumerable methodsFor: 'enumerating' stamp: 'lr 6/16/2007 18:42'!select: anObject	^ self findAll: anObject! !!SUEnumerable methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!size	"Return the size of the enumeration."	self call: 'size'! !!SUEnumerable methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!sortBy: anObject	"Provides a custom-sorted view of the elements based on the criteria computed, for each element, by the iterator."	self call: 'sortBy' argument: (self iteratorFor: anObject)! !!SUSelector methodsFor: 'adding' stamp: 'lr 10/28/2007 14:40'!add: aString	"Add the selector aString to the receiver."	selectors add: aString! !!SUSelector methodsFor: 'initialization' stamp: 'lr 5/15/2006 13:48'!initialize	super initialize.	selectors := OrderedCollection new! !!SUSelector methodsFor: 'printing' stamp: 'lr 6/18/2007 07:40'!printContentOn: aStream	aStream nextPutAll: '$$'; arguments: self selectors! !!SUSelector methodsFor: 'accessing' stamp: 'lr 5/15/2006 13:49'!selectors	^ selectors! !!SUSelector methodsFor: 'accessing' stamp: 'lr 5/15/2006 13:49'!selectors: aCollection	selectors := aCollection! !!SULogger methodsFor: 'assertions' stamp: 'lr 11/28/2006 10:36'!assert: anObject	self call: 'assert' argument: anObject! !!SULogger methodsFor: 'assertions' stamp: 'lr 11/28/2006 10:33'!assert: anObject equals: anotherObject	self call: 'assertEquals' arguments: (Array with: anObject with: anotherObject)! !!SULogger methodsFor: 'assertions' stamp: 'lr 11/28/2006 10:33'!assert: anObject greater: anotherObject	self call: 'assertGreater' arguments: (Array with: anObject with: anotherObject)! !!SULogger methodsFor: 'assertions' stamp: 'lr 11/28/2006 10:34'!assert: anObject less: anotherObject	self call: 'assertLess' arguments: (Array with: anObject with: anotherObject)! !!SULogger methodsFor: 'assertions' stamp: 'lr 11/28/2006 10:33'!assert: anObject notEquals: anotherObject	self call: 'assertNotEquals' arguments: (Array with: anObject with: anotherObject)! !!SULogger methodsFor: 'assertions' stamp: 'lr 11/28/2006 10:33'!assert: anObject notGreater: anotherObject	self call: 'assertNotGreater' arguments: (Array with: anObject with: anotherObject)! !!SULogger methodsFor: 'assertions' stamp: 'lr 11/28/2006 10:34'!assert: anObject notLess: anotherObject	self call: 'assertNotLess' arguments: (Array with: anObject with: anotherObject)! !!SULogger methodsFor: 'assertions' stamp: 'lr 11/28/2006 10:35'!assertFalse: anObject	self call: 'assertFalse' argument: anObject! !!SULogger methodsFor: 'assertions' stamp: 'lr 11/28/2006 10:35'!assertNotNull: anObject	self call: 'assertNotNull' argument: anObject! !!SULogger methodsFor: 'assertions' stamp: 'lr 11/28/2006 10:35'!assertNotUndefined: anObject	self call: 'assertNotUndefined' argument: anObject! !!SULogger methodsFor: 'assertions' stamp: 'lr 11/28/2006 10:35'!assertNull: anObject	self call: 'assertNull' argument: anObject! !!SULogger methodsFor: 'assertions' stamp: 'lr 11/28/2006 10:35'!assertTrue: anObject	self call: 'assertTrue' argument: anObject! !!SULogger methodsFor: 'assertions' stamp: 'lr 11/28/2006 10:35'!assertUndefined: anObject	self call: 'assertUndefined' argument: anObject! !!SULogger methodsFor: 'messages' stamp: 'lr 11/28/2006 10:14'!debug: anObject	self call: 'debug' argument: anObject! !!SULogger methodsFor: 'messages' stamp: 'lr 11/28/2006 10:15'!error: anObject	self call: 'error' argument: anObject! !!SULogger methodsFor: 'messages' stamp: 'lr 11/28/2006 10:15'!info: anObject	self call: 'info' argument: anObject! !!SULogger methodsFor: 'logging' stamp: 'lr 11/28/2006 10:37'!log: anObject	self call: 'log' argument: anObject! !!SULogger methodsFor: 'logging' stamp: 'lr 11/28/2006 10:38'!log: anObject format: anArray	self call: 'log' arguments: (Array with: anObject) , anArray! !!SULogger methodsFor: 'printing' stamp: 'lr 11/28/2006 10:13'!printContentOn: aStream	aStream nextPutAll: 'console'! !!SULogger methodsFor: 'messages' stamp: 'lr 11/28/2006 10:15'!warn: anObject	self call: 'warn' argument: anObject! !!SUObject class methodsFor: 'instance-creation' stamp: 'lr 5/10/2006 19:15'!new	^ self basicNew initialize! !!SUObject class methodsFor: 'instance-creation' stamp: 'lr 5/10/2006 19:15'!on: aCanvas	^ self new setCanvas: aCanvas! !!SUObject methodsFor: 'decorations' stamp: 'lr 10/28/2007 14:40'!& anObject	"Combine the receiver and anObject with a logical AND."	^ self addDecoration: (SUBinary new operator: '&&'; statement: anObject)! !!SUObject methodsFor: 'convenience' stamp: 'lr 12/2/2007 18:08'!, anObject	"Concatenate the receiver with anObject."	self after: anObject! !!SUObject methodsFor: 'decorations' stamp: 'lr 5/10/2006 21:47'!access: aString	"Access the member aString."	self addDecoration: (SUAccess new name: aString)! !!SUObject methodsFor: 'adding' stamp: 'lr 10/28/2007 14:40'!addDecoration: aDecoration	"Add a new decoration to the receiver."	aDecoration owner: decoration.	decoration := aDecoration! !!SUObject methodsFor: 'decorations' stamp: 'lr 5/10/2006 08:37'!after: anObject	"Call anObject directly after the receiver is evaluated."	self addDecoration: (SUAfter on: anObject)! !!SUObject methodsFor: 'decorations' stamp: 'lr 5/18/2006 09:18'!alias: aString	"Uses aString as an alias for the receiver."	self addDecoration: (SUAlias new name: aString)! !!SUObject methodsFor: 'decorations' stamp: 'lr 5/10/2006 21:49'!apply: aCollection	"Apply aCollection of arguments."	self addDecoration: (SUApply new arguments: aCollection)! !!SUObject methodsFor: 'decorations' stamp: 'lr 7/4/2007 07:47'!assign: anObject	"Assign anObject to the receiver."	self addDecoration: (SUAssignment new object: anObject)! !!SUObject methodsFor: 'decorations' stamp: 'lr 7/6/2006 16:30'!assignLocalTo: aString	"Assign the receiver to a local variable aString."	self addDecoration: (SUAssignLocal new name: aString)! !!SUObject methodsFor: 'decorations' stamp: 'lr 7/6/2006 16:29'!assignTo: aString	"Assign the receiver to a global variable aString."	self addDecoration: (SUAssign new name: aString)! !!SUObject methodsFor: 'decorations' stamp: 'lr 5/10/2006 08:37'!before: anObject	"Call anObject directly before the receiver is evaluated."	self addDecoration: (SUBefore on: anObject)! !!SUObject methodsFor: 'decorations' stamp: 'lr 5/10/2006 08:37'!call: aString	"Call the method aString."	self call: aString arguments: #()! !!SUObject methodsFor: 'decorations' stamp: 'lr 5/10/2006 08:37'!call: aString argument: anObject	"Call the method aString with anObject as its argument."	self call: aString arguments: (Array with: anObject)! !!SUObject methodsFor: 'decorations' stamp: 'lr 5/10/2006 21:46'!call: aString arguments: aCollection	"Call the method aString with aCollection as its arguments."	self access: aString; apply: aCollection! !!SUObject methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:40'!canvas	"Answer the current rendering canvas."	^ canvas! !!SUObject methodsFor: 'decorations' stamp: 'lr 5/10/2006 08:43'!condition: anObject	"Treat anObject as a condition to the execution of the receiver."	self addDecoration: (SUCondition on: anObject)! !!SUObject methodsFor: 'convenience' stamp: 'lr 10/28/2007 14:40'!confirm: anObject	"Show a confirmation with the message anObject before evaluating the receiver."	self condition: (SUStream new nextPutAll: 'confirm'; argument: anObject)! !!SUObject methodsFor: 'decorations' stamp: 'lr 5/10/2006 22:05'!create	"Instantiate the receiver."	self addDecoration: SUCreate new! !!SUObject methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:40'!decoration	"Answer the top-level decoration in the receivers decoration stack."	^ decoration! !!SUObject methodsFor: 'decorations' stamp: 'lr 10/28/2007 14:40'!enumerator	"Answer an enumerator on the receiver."	^ SUEnumerable on: self canvas receiver: self! !!SUObject methodsFor: 'decorations' stamp: 'lr 8/23/2006 14:43'!every: aDuration	"Execute the receiver every aDuration."	self addDecoration: (SUExecuter new frequency: aDuration)! !!SUObject methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:40'!factory	"Answer a factory object for JavaScript objects."	^ SUFactory on: self canvas! !!SUObject methodsFor: 'initialization' stamp: 'lr 5/10/2006 19:08'!initialize	decoration := self! !!SUObject methodsFor: 'decorations' stamp: 'lr 8/8/2007 14:12'!not	"Negate the receiver logically."	self addDecoration: SUNegation new! !!SUObject methodsFor: 'printing' stamp: 'lr 4/25/2007 10:13'!printContentOn: aStream	self subclassResponsibility! !!SUObject methodsFor: 'printing' stamp: 'lr 5/10/2006 08:26'!printOn: aStream	self decoration printContentOn: aStream! !!SUObject methodsFor: 'decorations' stamp: 'lr 5/10/2006 19:42'!property: aString	"Treat anObject as a condition to the execution of the receiver."	self addDecoration: (SUProperty new name: aString)! !!SUObject methodsFor: 'utilities' stamp: 'lr 12/2/2007 18:04'!render: anObject	^ String streamContents: [ :stream | self render: anObject on: stream ]! !!SUObject methodsFor: 'utilities' stamp: 'lr 12/28/2008 19:57'!render: anObject on: aStream	| previous document html |	previous := canvas context document.	self session rememberScripts: [		document := SUDocument new.		document stream: aStream; open: nil.		canvas context document: document.		html := canvas species			context: canvas context			callbacks: canvas callbacks.		html render: anObject; flush.		document close: nil ].	canvas context document: previous! !!SUObject methodsFor: 'convenience' stamp: 'lr 10/28/2007 14:40'!return: anObject	"Return anObject after evaluating the receiver."	self after: (SUStream new nextPutAll: 'return '; javascript: anObject)! !!SUObject methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:40'!session	"Answer the current session."	^ WACurrentSession value! !!SUObject methodsFor: 'initialization' stamp: 'lr 5/10/2006 19:14'!setCanvas: aCanvas	canvas := aCanvas! !!SUObject methodsFor: 'decorations' stamp: 'lr 10/28/2007 14:40'!then: anObject	"Evaluates anObject if the receiver treated as a boolean evaluates to true."	self then: anObject else: nil! !!SUObject methodsFor: 'decorations' stamp: 'lr 8/8/2007 14:15'!then: anObject else: anotherObject	"Evaluates anObject if the receiver treated as a boolean evaluates to true, otherwise evaluate anotherObject."	self addDecoration: (SUIfThenElse new trueStatement: anObject; falseStatement: anotherObject)! !!SUObject methodsFor: 'decorations' stamp: 'lr 4/17/2007 14:26'!timeout: aDuration	"Evaluates the receiver after aDuration."	self addDecoration: (SUTimeout duration: aDuration)! !!SUObject methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!toJson	"Return a JSON string."	self call: 'toJSON'! !!SUObject methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!toString	"Return a debug-oriented string representation of the object."	self call: 'inspect'! !!SUObject methodsFor: 'decorations' stamp: 'lr 8/8/2007 14:12'!| anObject	"Combine the receiver and anObject with a logical OR."	^ self addDecoration: (SUBinary new operator: '||'; statement: anObject)! !!SUAjax methodsFor: 'parameters' stamp: 'lr 10/28/2007 14:40'!addParameter: anObject	"Add the request parameter anObject, a single value or an association."	self parameters add: anObject! !!SUAjax methodsFor: 'parameters' stamp: 'lr 10/28/2007 14:40'!addParameters: aCollection	"Add multiple request parameters from aCollection."	self parameters addAll: aCollection associations! !!SUAjax methodsFor: 'options' stamp: 'lr 10/28/2007 14:40'!asynchronous: aBoolean	"Determines whether XMLHttpRequest is used asynchronously or not. Since synchronous usage is rather unsettling, and usually bad taste, you should avoid changing this. Seriously."	self optionAt: 'asynchronous' put: aBoolean! !!SUAjax methodsFor: 'callbacks' stamp: 'lr 10/2/2007 09:39'!callback: aBlock	"Register aBlock as a primary callback of the receiver. It only makes sense to have a single primary callback registered per instance. Depending on the actual evaluation strategy, see #handle:on:, aBlock will be evaluated with a renderer/script as its first argument."	callback := aBlock fixCallbackTemps! !!SUAjax methodsFor: 'callbacks' stamp: 'lr 10/28/2007 14:40'!callback: aBlock value: anObject	"Register aBlock as a secondary callback. anObject is interpreted as JavaScript on the client-side, the result will be sent back to the server and passed into aBlock. Multiple secondary callbacks can be defined with one receiver."	aBlock numArgs = 1		ifFalse: [ self error: 'aBlock expects one argument' ].	self addParameter: (self canvas callbacks registerCallback: aBlock) -> anObject! !!SUAjax methodsFor: 'options' stamp: 'lr 10/28/2007 14:40'!contentType: aString	"The Content-Type header for your request. You might want to send XML instead of the regular URL-encoded format, in which case you would have to change this."	self optionAt: 'contentType' put: aString! !!SUAjax methodsFor: 'private' stamp: 'lr 5/10/2006 21:33'!defaultArguments	^ (Array with: self url) , super defaultArguments! !!SUAjax methodsFor: 'private' stamp: 'lr 5/10/2006 21:25'!defaultResponse	^ WAResponse new doNotCache! !!SUAjax methodsFor: 'options' stamp: 'lr 10/28/2007 14:40'!encoding: aString	"The encoding for your request contents. It is best left as is, but should weird encoding issues arise, you may have to tweak it in accordance with other encoding-related parts of your page code and server side."	self optionAt: 'encoding' put: aString! !!SUAjax methodsFor: 'initialization' stamp: 'lr 5/10/2006 22:06'!initialize	super initialize.	self create! !!SUAjax methodsFor: 'options' stamp: 'lr 10/28/2007 14:40'!method: aString	"The HTTP method to use for the request. The other widespread possibility is 'get'."	self optionAt: 'method' put: aString! !!SUAjax methodsFor: 'callbacks' stamp: 'lr 4/20/2006 15:47'!on: aSelector of: anObject	self callback: (MessageSend receiver: anObject selector: aSelector)! !!SUAjax methodsFor: 'callbacks' stamp: 'lr 4/20/2006 15:33'!on: aSelector of: anObject value: anotherObject	self callback: (MessageSend receiver: anObject selector: aSelector) value: anotherObject! !!SUAjax methodsFor: 'events' stamp: 'lr 2/27/2007 20:33'!onComplete: anObject	"Triggered at the very end of a request's life-cycle, once the request completed, status-specific callbacks were called, and possible automatic behaviors were processed."	self optionAt: 'onComplete' put: anObject asFunction! !!SUAjax methodsFor: 'events' stamp: 'lr 2/27/2007 20:33'!onException: anObject	"Triggered whenever an XHR error arises. Has a custom signature: the first argument is the requester, the second is the exception object."	self optionAt: 'onException' put: anObject asFunction! !!SUAjax methodsFor: 'events' stamp: 'lr 2/27/2007 20:33'!onFailure: anObject	"Invoked when a request completes and its status code exists but is not in the 2xy family. This is skipped if a code-specific callback is defined, and happens before onComplete."	self optionAt: 'onFailure' put: anObject asFunction! !!SUAjax methodsFor: 'events' stamp: 'lr 2/27/2007 20:33'!onInteractive: anObject	"(Not guaranteed) Triggered whenever the requester receives a part of the response (but not the final part), should it be sent in several packets."	self optionAt: 'onInteractive' put: anObject asFunction! !!SUAjax methodsFor: 'events' stamp: 'lr 2/27/2007 20:33'!onLoaded: anObject	"(Not guaranteed) Triggered once the underlying XHR object is setup, the connection open, and ready to send its actual request."	self optionAt: 'onLoaded' put: anObject asFunction! !!SUAjax methodsFor: 'events' stamp: 'lr 2/27/2007 20:34'!onLoading: anObject	"(Not guaranteed) Triggered when the underlying XHR object is being setup, and its connection opened."	self optionAt: 'onLoading' put: anObject asFunction! !!SUAjax methodsFor: 'events' stamp: 'lr 2/27/2007 20:35'!onStatus: anInteger do: anObject	"With anInteger being an HTTP status code for the response. Invoked when the response just completed, and the status code is exactly the one we used in the callback name. Prevents execution of onSuccess / onFailure. Happens before onComplete."	self optionAt: 'on' , anInteger displayString put: anObject asFunction! !!SUAjax methodsFor: 'events' stamp: 'lr 2/27/2007 20:34'!onSuccess: anObject	"Invoked when a request completes and its status code is undefined or belongs in the 2xy family. This is skipped if a code-specific callback is defined, and happens before onComplete."	self optionAt: 'onSuccess' put: anObject asFunction! !!SUAjax methodsFor: 'events' stamp: 'lr 2/27/2007 20:34'!onUninitialized: anObject	"(Not guaranteed) Invoked when the XHR object was just created."	self optionAt: 'onUninitialized' put: anObject asFunction! !!SUAjax methodsFor: 'parameters' stamp: 'lr 10/28/2007 14:40'!parameters	"Answer the request parameters of the reciever."	^ (self options at: 'parameters' ifAbsentPut: [ SUJoin join: OrderedCollection new with: '&' ])		collection! !!SUAjax methodsFor: 'processing' stamp: 'lr 4/3/2007 10:20'!process	| response |	response := self defaultResponse.	self processOn: response stream.	self session returnResponse: response! !!SUAjax methodsFor: 'processing' stamp: 'lr 5/15/2006 11:39'!processOn: aStream	self subclassResponsibility! !!SUAjax methodsFor: 'options' stamp: 'lr 10/28/2007 14:40'!requestHeaders: aDictionary	"Prototype automatically provides a set of default headers, that this option can override and augment: X-Requested-With, X-Prototype-Version, Accept, and Content-type."	self optionAt: 'requestHeaders' put: aDictionary! !!SUAjax methodsFor: 'initialization' stamp: 'lr 8/8/2007 14:54'!setCanvas: aCanvas	super setCanvas: aCanvas.	self url: aCanvas context actionUrl withoutParameters.	self addParameters: aCanvas context actionUrl parameters.	self addParameter: (aCanvas callbacks registerAjaxCallback: [ self process ])! !!SUAjax methodsFor: 'triggers' stamp: 'lr 6/18/2007 07:05'!triggerArgument: anInteger callback: aBlock	"Triggers a JavaScript function argument and passes its value into aBlock."	self callback: aBlock value: (SUStream argumentAt: anInteger)! !!SUAjax methodsFor: 'triggers' stamp: 'lr 1/18/2007 11:05'!triggerAutocompleter: aBlock	"Triggers an autocompleter, not that you need to define a passanger for the list items to make this work."	self		callback: [ :value |			aBlock value: (canvas context callbacks				at: value ifAbsent: [ nil ]) ]		value: (SUStream new			nextPutAll: 'arguments[1].id.match';			argument: SUSortable passengerRegexp;			nextPutAll: '[1]')! !!SUAjax methodsFor: 'triggers' stamp: 'lr 8/9/2007 07:35'!triggerForm: aString	"Serialize a complete from and trigger all its associated callbacks. Note that the callbacks of submit buttons are ignored to preserve consistency, use the normal callback to trigger specific code evaluation."	self parameters copy do: [ :each |		(each isVariableBinding and: [ each key beginsWith: '_' ])			ifTrue: [ self parameters remove: each ] ].	self addParameter: (SUForm new		id: aString;		serialize)! !!SUAjax methodsFor: 'triggers' stamp: 'lr 10/28/2007 14:40'!triggerFormElement: aString	"Serializing a form element and trigger its associated callback. Note that this might not work for all form elements as one would expect: (1) check-boxes and multi-select lists do not work as Seaside internally depends on other hidden form elements. (2) submit-button callbacks are ignored, instead use the normal callback to trigger specific code evaluation."	self addParameter: (SUFormElement new		id: aString;		serialize)! !!SUAjax methodsFor: 'triggers' stamp: 'lr 1/18/2007 11:04'!triggerPassenger: aBlock	self		callback: [ :value |			aBlock value: (canvas context callbacks				at: value ifAbsent: [ nil ]) ]		value: (SUStream new			nextPutAll: 'arguments[0].id.match';			argument: SUSortable passengerRegexp;			nextPutAll: '[1]')! !!SUAjax methodsFor: 'triggers' stamp: 'lr 6/18/2007 07:05'!triggerSliderCallback: aBlock	self		callback: [ :value | aBlock value: value asNumber ]		value: (SUStream argumentAt: 1)! !!SUAjax methodsFor: 'triggers' stamp: 'lr 6/7/2006 09:42'!triggerSortable: aString callback: aBlock	self		callback: [ :value |			aBlock value: ((value findTokens: $,) collect: [ :each |				canvas context callbacks at: each ifAbsent: [ nil ] ]) ]		value: (SUSortable new id: aString; sequence)! !!SUAjax methodsFor: 'triggers' stamp: 'lr 5/2/2006 11:45'!triggerTree: aString callback: aBlock	self		callback: [ :values |			aBlock value: (Array streamContents: [ :stream |				(values findTokens: ',') do: [ :token |					| pair |					pair := (token findTokens: ':')						collect: [ :each | canvas context callbacks at: each ifAbsent: [ nil ] ].					pair size = 2						ifTrue: [ stream nextPut: pair first -> pair second ] ] ]) ]		value: (SUSortable new id: aString; tree)! !!SUAjax methodsFor: 'accessing' stamp: 'lr 4/20/2006 15:03'!url	^ url! !!SUAjax methodsFor: 'accessing' stamp: 'lr 4/20/2006 15:06'!url: aString	url := aString! !!SUEvaluator methodsFor: 'private' stamp: 'lr 5/12/2006 15:22'!defaultResponse	^ super defaultResponse contentType: 'text/javascript'! !!SUEvaluator methodsFor: 'processing' stamp: 'lr 6/7/2006 09:22'!processOn: aStream	| script |	script := SUScript on: canvas.	callback ifNotNil: [ callback value: script ].	self session onLoadScripts		do: [ :each | script add: each ].	self session clearLoadScripts.	aStream javascript: script! !!SUPeriodicalEvaluator methodsFor: 'options' stamp: 'rjl 3/5/2009 14:49'!decay: aNumber	"This controls the rate at which the request interval grows when the response is unchanged. It is used as a multiplier on the current period (which starts at the original value of the frequency parameter). Every time a request returns an unchanged response text, the current period is multiplied by the decay. Therefore, the default value means regular requests (no change of interval). Values higher than one will yield growing intervals. Values below one are dangerous: the longer the response text stays the same, the more often you'll check, until the interval is so short your browser is left with no other choice than suicide. Note that, as soon as the response text does change, the current period resets to the original one."	self options at: 'decay' put: aNumber! !!SUPeriodicalEvaluator methodsFor: 'private' stamp: 'rjl 3/5/2009 17:18'!defaultArguments	"first arg seems required even though not being used"	^ (Array with: '') , super defaultArguments! !!SUPeriodicalEvaluator methodsFor: 'private' stamp: 'rjl 3/5/2009 14:57'!defaultPrototype	^ 'Ajax.PeriodicalUpdater'! !!SUPeriodicalEvaluator methodsFor: 'options' stamp: 'rjl 3/5/2009 14:58'!frequency: aDuration	"Okay, this is not a frequency (e.g 0.5Hz), but a period (i.e. a number of seconds). Don't kill me, I didn't write this one!! This is the minimum interval at which AJAX requests are made. You don't want to make it too short (otherwise you may very well end up with multiple requests in parallel, if they take longer to process and return), but you technically can provide a number below one, e.g. 0.75 second."	self options at: 'frequency' put: aDuration! !!SUPeriodicalEvaluator methodsFor: 'actions' stamp: 'rjl 3/5/2009 14:58'!start	"If you wish to re-enable it later, just call its start method."	self call: 'start'! !!SUPeriodicalEvaluator methodsFor: 'actions' stamp: 'rjl 3/5/2009 14:58'!stop	"You can pull the brake on a running PeriodicalUpdater by simply calling its stop method."	self call: 'stop'! !!SURequest methodsFor: 'private' stamp: 'lr 5/10/2006 21:25'!defaultPrototype	^ 'Ajax.Request'! !!SURequest methodsFor: 'processing' stamp: 'lr 6/7/2006 09:17'!process	[ super process ] on: Error do: [ :err | err defaultAction ]! !!SURequest methodsFor: 'processing' stamp: 'lr 6/7/2006 09:21'!processOn: aStream	callback ifNotNil: [ callback value ]! !!SUAutocompleter methodsFor: 'actions' stamp: 'lr 2/19/2007 13:45'!activate	"Activate the autocompletion list."	self call: 'activate'! !!SUAutocompleter methodsFor: 'options' stamp: 'lr 9/5/2006 17:24'!autoSelect: aBoolean	self optionAt: 'autoSelect' put: aBoolean! !!SUAutocompleter methodsFor: 'private' stamp: 'lr 5/15/2006 11:17'!defaultArguments	^ (Array with: self element) , super defaultArguments! !!SUAutocompleter methodsFor: 'private' stamp: 'lr 5/15/2006 10:49'!defaultPrototype	^ 'Ajax.Autocompleter'! !!SUAutocompleter methodsFor: 'accessing' stamp: 'lr 5/15/2006 10:59'!element	^ element! !!SUAutocompleter methodsFor: 'accessing' stamp: 'lr 5/15/2006 11:00'!element: aString	element := aString! !!SUAutocompleter methodsFor: 'options' stamp: 'lr 3/12/2006 16:21'!frequency: aNumber	self optionAt: 'frequency' put: aNumber! !!SUAutocompleter methodsFor: 'actions' stamp: 'lr 2/19/2007 13:45'!hide	"Deactivate the autocompletion list."	self call: 'hide'! !!SUAutocompleter methodsFor: 'options' stamp: 'lr 5/15/2006 10:50'!indicator: aString	"When sending the Ajax request Autocompleter shows this element with Element.show. When the request has been completed it will be hidden with Element.hide."	self optionAt: 'indicator' put: aString! !!SUAutocompleter methodsFor: 'options' stamp: 'lr 2/19/2007 13:45'!minChars: aNumber	"The minimum number of characters required to start the autocompletion."	self optionAt: 'minChars' put: aNumber! !!SUAutocompleter methodsFor: 'actions' stamp: 'lr 2/19/2007 13:45'!next	"Mark the next entry in the list."	self call: 'markNext'! !!SUAutocompleter methodsFor: 'events' stamp: 'lr 4/6/2006 20:34'!onHide: anObject	self optionAt: 'onHide' put: anObject asFunction! !!SUAutocompleter methodsFor: 'events' stamp: 'lr 5/15/2006 11:24'!onSelected: anObject	"Hook for a custom function called after the element has been updated. This function is called after the built-in function that adds the list item text to the input field. The function receives two parameters, the autocompletion input field and the selected item."	self optionAt: 'afterUpdateElement' put: anObject asFunction! !!SUAutocompleter methodsFor: 'events' stamp: 'lr 4/6/2006 20:34'!onShow: anObject	self optionAt: 'onShow' put: anObject asFunction! !!SUAutocompleter methodsFor: 'events' stamp: 'lr 5/15/2006 11:23'!onUpdate: anObject	"Hook for a custom function called after the element has been updated. This function is called instead of the built-in function that adds the list item text to the input field. The function receives one parameter only, the selected item."	self optionAt: 'updateElement' put: anObject asFunction! !!SUAutocompleter methodsFor: 'actions' stamp: 'lr 2/19/2007 13:45'!previous	"Mark the previous entry in the list."	self call: 'markPrevious'! !!SUAutocompleter methodsFor: 'options' stamp: 'lr 2/19/2007 13:45'!selectClass: aString	"The CSS class name of the elements within the list-items that should be used when copying the text to the text-input."	self optionAt: 'select' put: aString! !!SUAutocompleter methodsFor: 'actions' stamp: 'lr 2/19/2007 13:45'!selectedIndex	"Answer the selected index in the list."	self access: 'index'! !!SUAutocompleter methodsFor: 'options' stamp: 'lr 2/19/2007 13:45'!tokens: anArray	"The token required to separate multiple autocompletion entries in one text-input."	self optionAt: 'tokens' put: anArray! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 11/7/2007 21:34'!autoRows: anInteger	self optionAt: 'autoRows' put: anInteger! !!SUInPlaceEditor methodsFor: 'deprecated' stamp: 'lr 6/5/2009 17:26'!cancelButton: aBoolean	self deprecatedApi.	self cancelControl: (aBoolean		ifTrue: [ 'button' ]		ifFalse: [ false ])! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 11/7/2007 21:39'!cancelControl: aString	"link|button|false"	self optionAt: 'cancelControl' put: aString! !!SUInPlaceEditor methodsFor: 'deprecated' stamp: 'lr 6/5/2009 17:26'!cancelLink: aBoolean	self deprecatedApi.	self cancelControl: (aBoolean		ifTrue: [ 'link' ]		ifFalse: [ false ])! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 6/5/2009 17:26'!cancelText: aString	"The text of the link that cancels editing."	self optionAt: 'cancelText' put: aString! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 6/5/2009 17:26'!clickToEditText: aString	"The text shown during mouseover the editable text."	self optionAt: 'clickToEditText' put: aString! !!SUInPlaceEditor methodsFor: 'private' stamp: 'lr 8/6/2006 13:46'!defaultPrototype	^ 'Ajax.InPlaceEditor'! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 6/5/2009 17:26'!externalControl: aString	"Id of an element that acts as an external control used to enter edit mode. The external control will be hidden when entering edit mode and shown again when leaving edit mode."	self optionAt: 'externalControl' put: aString! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 11/7/2007 21:33'!externalControlOnly: aBoolean	self optionAt: 'externalControlOnly' put: aBoolean! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 6/5/2009 17:26'!fieldPostCreation: aString	"activate|focus|false"	self optionAt: 'fieldPostCreation' put: aString! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 11/7/2007 21:33'!formClassName: aString	self optionAt: 'formClassName' put: aString! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 6/5/2009 17:26'!formId: aString	"Id of the element to edit."	self optionAt: 'formId' put: aString! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 11/7/2007 22:08'!highlightColor: aColor	"The highlight color."	self optionAt: 'highlightColor' put: aColor! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 11/7/2007 22:08'!highlightEndColor: aColor	"The color which the highlight fades to."	self optionAt: 'highlightEndColor' put: aColor! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 11/7/2007 21:32'!hoverClassName: aString	self optionAt: 'hoverClassName' put: aString! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 11/7/2007 21:32'!htmlResponse: aBoolean	self optionAt: 'htmlResponse' put: aBoolean! !!SUInPlaceEditor methodsFor: 'initialization' stamp: 'lr 4/30/2007 20:27'!initialize	super initialize.	self options removeKey: 'evalScripts'! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 11/7/2007 21:32'!loadingClassName: aString	self optionAt: 'loadingClassName' put: aString! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 11/7/2007 21:32'!loadingText: aString	self optionAt: 'loadingText' put: aString! !!SUInPlaceEditor methodsFor: 'deprecated' stamp: 'lr 6/5/2009 17:26'!okButton: aBoolean	self deprecatedApi.	self okControl: (aBoolean		ifTrue: [ 'button' ]		ifFalse: [ false ])! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 6/5/2009 17:26'!okControl: aString	"link|button|false"	self optionAt: 'okControl' put: aString! !!SUInPlaceEditor methodsFor: 'deprecated' stamp: 'lr 6/5/2009 17:26'!okLink: aBoolean	self deprecatedApi.	self okControl: (aBoolean		ifTrue: [ 'link' ]		ifFalse: [ false ])! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 8/7/2006 08:39'!okText: aString	"The text of the submit button that submits the changed value to the server."	self optionAt: 'okText' put: aString! !!SUInPlaceEditor methodsFor: 'events' stamp: 'lr 11/7/2007 21:36'!onEnterEditMode: anObject	self optionAt: 'onEnterEditMode' put: anObject asFunction! !!SUInPlaceEditor methodsFor: 'events' stamp: 'lr 11/7/2007 21:36'!onEnterHover: anObject	self optionAt: 'onEnterHover' put: anObject asFunction! !!SUInPlaceEditor methodsFor: 'events' stamp: 'lr 11/7/2007 21:36'!onFormCustomization: anObject	self optionAt: 'onFormCustomization' put: anObject asFunction! !!SUInPlaceEditor methodsFor: 'events' stamp: 'lr 11/7/2007 21:37'!onLeaveEditMode: anObject	self optionAt: 'onLeaveEditMode' put: anObject asFunction! !!SUInPlaceEditor methodsFor: 'events' stamp: 'lr 11/7/2007 21:37'!onLeaveHover: anObject	self optionAt: 'onLeaveHover' put: anObject asFunction! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 11/7/2007 21:32'!paramName: aString	self optionAt: 'paramName' put: aString! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 8/7/2006 08:44'!rows: anInteger	"The row height of the input field, anything greater than 1 uses a multiline textarea for input."	self optionAt: 'rows' put: anInteger! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 11/7/2007 21:31'!savingClassName: aString	self optionAt: 'savingClassName' put: aString! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 8/7/2006 08:40'!savingText: aString	"The text shown while the text is sent to the server."	self optionAt: 'savingText' put: aString! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 11/7/2007 21:30'!size: anInteger	self optionAt: 'size' put: anInteger! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 11/7/2007 21:30'!stripLoadedTextTags: aBoolean	self optionAt: 'stripLoadedTextTags' put: aBoolean! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 11/7/2007 21:30'!submitOnBlur: aBoolean	self optionAt: 'submitOnBlur' put: aBoolean! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 11/7/2007 21:29'!textAfterControls: aString	self optionAt: 'textAfterControls' put: aString! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 11/7/2007 21:29'!textBeforeControls: aString	self optionAt: 'textBeforeControls' put: aString! !!SUInPlaceEditor methodsFor: 'options' stamp: 'lr 11/7/2007 21:30'!textBetweenControls: aString	self optionAt: 'textBetweenControls' put: aString! !!SUInPlaceEditor methodsFor: 'triggers' stamp: 'lr 8/6/2006 14:50'!triggerInPlaceEditor: aBlock	self callback: aBlock value: (SUStream on: 'encodeURIComponent(arguments[1])').	self optionAt: 'callback' put: (SUFunction new		add: (self options removeKey: 'parameters');		return: true;		yourself)! !!SUPeriodical methodsFor: 'options' stamp: 'lr 4/25/2007 10:18'!decay: aNumber	"This controls the rate at which the request interval grows when the response is unchanged. It is used as a multiplier on the current period (which starts at the original value of the frequency parameter). Every time a request returns an unchanged response text, the current period is multiplied by the decay. Therefore, the default value means regular requests (no change of interval). Values higher than one will yield growing intervals. Values below one are dangerous: the longer the response text stays the same, the more often you'll check, until the interval is so short your browser is left with no other choice than suicide. Note that, as soon as the response text does change, the current period resets to the original one."	self options at: 'decay' put: aNumber! !!SUPeriodical methodsFor: 'private' stamp: 'lr 5/10/2006 21:26'!defaultPrototype	^ 'Ajax.PeriodicalUpdater'! !!SUPeriodical methodsFor: 'options' stamp: 'lr 2/27/2007 20:36'!frequency: aDuration	"Okay, this is not a frequency (e.g 0.5Hz), but a period (i.e. a number of seconds). Don't kill me, I didn't write this one!! This is the minimum interval at which AJAX requests are made. You don't want to make it too short (otherwise you may very well end up with multiple requests in parallel, if they take longer to process and return), but you technically can provide a number below one, e.g. 0.75 second."	self options at: 'frequency' put: aDuration! !!SUPeriodical methodsFor: 'actions' stamp: 'lr 10/28/2007 14:40'!start	"If you wish to re-enable it later, just call its start method."	self call: 'start'! !!SUPeriodical methodsFor: 'actions' stamp: 'lr 10/28/2007 14:40'!stop	"You can pull the brake on a running PeriodicalUpdater by simply calling its stop method."	self call: 'stop'! !!SUUpdater methodsFor: 'private' stamp: 'lr 5/10/2006 21:33'!defaultArguments	^ (Array with: self id) , super defaultArguments! !!SUUpdater methodsFor: 'private' stamp: 'lr 5/10/2006 21:34'!defaultId	^ SUStream on: 'this'! !!SUUpdater methodsFor: 'private' stamp: 'lr 5/10/2006 21:26'!defaultPrototype	^ 'Ajax.Updater'! !!SUUpdater methodsFor: 'options' stamp: 'lr 4/25/2007 10:17'!evalScripts: aBoolean	"This determines whether <script> elements in the response text are evaluated or not. The default implementation of Prototypes does not evaluate script, however this implementation changes this odd behavior."	self options at: 'evalScripts' put: aBoolean! !!SUUpdater methodsFor: 'accessing' stamp: 'lr 5/10/2006 21:33'!id	^ id ifNil: [ self defaultId ]! !!SUUpdater methodsFor: 'accessing' stamp: 'lr 4/20/2006 15:09'!id: aString	id := aString! !!SUUpdater methodsFor: 'initialization' stamp: 'lr 4/30/2007 20:27'!initialize	super initialize.	self evalScripts: true! !!SUUpdater methodsFor: 'options' stamp: 'lr 2/27/2007 20:38'!insertion: anInsertion	"By default, Element.update is used, which replaces the whole contents of the container with the response text. You may want to instead insert the response text around existing contents. You just need to pass a valid Insertion object for this, such as Insertion.Bottom."	self options at: 'insertion' put: anInsertion! !!SUUpdater methodsFor: 'processing' stamp: 'lr 4/3/2007 10:20'!processOn: aStream	callback ifNotNil: [ self render: callback on: aStream ]! !!SUEvent methodsFor: 'private' stamp: 'lr 5/17/2006 11:29'!defaultArguments	^ nil! !!SUEvent methodsFor: 'private' stamp: 'lr 5/10/2006 21:14'!defaultEvent	^ SUStream on: 'event'! !!SUEvent methodsFor: 'private' stamp: 'lr 5/10/2006 21:20'!defaultPrototype	^ 'Event'! !!SUEvent methodsFor: 'querying' stamp: 'lr 2/27/2007 21:11'!element	"Returns the DOM element on which the event occurred."	self call: 'element' argument: self event! !!SUEvent methodsFor: 'accessing' stamp: 'lr 5/10/2006 21:13'!event	^ event ifNil: [ self defaultEvent ]! !!SUEvent methodsFor: 'accessing' stamp: 'lr 5/10/2006 21:14'!event: anObject	event := anObject! !!SUEvent methodsFor: 'querying' stamp: 'lr 2/27/2007 21:11'!findElement: aString	"Returns the first DOM element with a given tag name, upwards from the one on which the event occurred."	self call: 'findElement' arguments: (Array with: self event with: aString)! !!SUEvent methodsFor: 'querying' stamp: 'lr 2/27/2007 21:11'!isLeftClick	"Determines whether a button-related mouse event was about the left (primary, actually) button."	self call: 'isLeftClick' argument: self event! !!SUEvent methodsFor: 'actions' stamp: 'lr 10/28/2007 14:40'!observe: anObservedObject on: anEventString do: aHandlerObject	"Define event handler aHandlerObject for anEventString."	self call: 'observe' arguments: (Array		with: anObservedObject with: anEventString		with: (aHandlerObject asFunction: #('event')))! !!SUEvent methodsFor: 'actions' stamp: 'lr 2/27/2007 21:12'!stop	"Stops the event's propagation and prevents its default action from being triggered eventually."	self call: 'stop' argument: self event! !!SUEvent methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!x	"Returns the absolute horizontal position for a mouse event."	self call: 'pointerX' argument: self event! !!SUEvent methodsFor: 'querying' stamp: 'lr 10/28/2007 14:40'!y	"Returns the absolute vertical position for a mouse event."	self call: 'pointerY' argument: self event! !!SUDraggable methodsFor: 'options' stamp: 'lr 3/7/2006 13:48'!constraint: aSymbol	"If set to #horizontal or #vertical the drag will be constrained to take place only horizontally or vertically."	self optionAt: 'constraint' put: aSymbol! !!SUDraggable methodsFor: 'options' stamp: 'lr 3/7/2006 13:48'!constraintHorizontal	self constraint: #horizontal! !!SUDraggable methodsFor: 'options' stamp: 'lr 3/7/2006 13:48'!constraintVertical	self constraint: #vertical! !!SUDraggable methodsFor: 'private' stamp: 'lr 6/30/2006 19:48'!defaultPrototype	^ 'Draggable'! !!SUDraggable methodsFor: 'options' stamp: 'lr 9/5/2006 17:23'!delay: aDuration	self optionAt: 'delay' put: aDuration! !!SUDraggable methodsFor: 'effects' stamp: 'lr 9/5/2006 17:28'!endEffect: anObject	self optionAt: 'endeffect' put: anObject asFunction! !!SUDraggable methodsFor: 'options' stamp: 'lr 3/7/2006 13:44'!ghosting: aBoolean	"Clones the element and drags the clone, leaving the original in place until the clone is dropped."	self optionAt: 'ghosting' put: aBoolean! !!SUDraggable methodsFor: 'options' stamp: 'lr 3/7/2006 13:45'!handle: aString	"Sets whether the element should only be draggable by an embedded handle. The value must be an element reference or element id."	self optionAt: 'handle' put: aString! !!SUDraggable methodsFor: 'options' stamp: 'lr 3/7/2006 13:54'!hoverclass: aString	"Gives the created Droppables a hoverclass."	self optionAt: 'hoverclass' put: aString! !!SUDraggable methodsFor: 'initialization' stamp: 'lr 6/30/2006 19:48'!initialize	super initialize.	self create! !!SUDraggable methodsFor: 'events' stamp: 'lr 9/5/2006 17:26'!onDrag: anObject	self optionAt: 'onDrag' put: anObject asFunction! !!SUDraggable methodsFor: 'events' stamp: 'lr 3/12/2007 16:50'!onDropped: anObject	self optionAt: 'onDropped' put: anObject asFunction! !!SUDraggable methodsFor: 'events' stamp: 'lr 9/5/2006 17:26'!onEnd: anObject	self optionAt: 'onEnd' put: anObject asFunction! !!SUDraggable methodsFor: 'events' stamp: 'lr 1/11/2007 09:24'!onSnap: anObject	self optionAt: 'snap' put: anObject asFunction! !!SUDraggable methodsFor: 'events' stamp: 'lr 9/5/2006 17:26'!onStart: anObject	self optionAt: 'onStart' put: anObject asFunction! !!SUDraggable methodsFor: 'options' stamp: 'lr 3/7/2006 13:45'!revert: aBoolean	"If set to true, the element returns to its original position when the drags ends."	self optionAt: 'revert' put: aBoolean! !!SUDraggable methodsFor: 'effects' stamp: 'lr 9/5/2006 17:29'!revertEffect: anObject	self optionAt: 'reverteffect' put: anObject asFunction! !!SUDraggable methodsFor: 'options' stamp: 'lr 4/7/2006 13:48'!scroll: aBoolean	self optionAt: 'scroll' put: aBoolean! !!SUDraggable methodsFor: 'options' stamp: 'lr 4/7/2006 13:48'!scrollSensitivity: anInteger	self optionAt: 'scrollSensitivity' put: anInteger! !!SUDraggable methodsFor: 'options' stamp: 'lr 4/7/2006 13:48'!scrollSpeed: anInteger	self optionAt: 'scrollSpeed' put: anInteger! !!SUDraggable methodsFor: 'options' stamp: 'lr 3/7/2006 13:45'!snap: aBooleanOrPoint	"If set to false no snapping occurs. Otherwise takes the forms [x,y]."	self optionAt: 'snap' put: aBooleanOrPoint! !!SUDraggable methodsFor: 'effects' stamp: 'lr 1/11/2007 08:38'!startEffect: anObject	self optionAt: 'starteffect' put: anObject asFunction! !!SUDraggable methodsFor: 'options' stamp: 'lr 3/7/2006 13:45'!zindex: anInteger	"The css zindex of the draggable item."	self optionAt: 'zindex' put: anInteger! !!SUDroppable methodsFor: 'options' stamp: 'lr 3/12/2006 16:26'!accept: aStringOrArray	"Set accept to a string or an array of strings describing CSS classes. The Droppable will only accept Draggables that have one or more of these CSS classes."	self optionAt: 'accept' put: aStringOrArray! !!SUDroppable methodsFor: 'actions' stamp: 'lr 2/19/2007 13:45'!add	"To make an element react when a Draggable is dropped onto it."	self method: 'add'! !!SUDroppable methodsFor: 'options' stamp: 'lr 3/12/2006 16:26'!containment: aStringOrArray	"The droppable will only accept the Draggable if the Draggable is contained in the given elements (or element ids). Can be a single element or an array of elements."	self optionAt: 'containment' put: aStringOrArray! !!SUDroppable methodsFor: 'private' stamp: 'lr 5/12/2006 14:15'!defaultMethod	^ 'add'! !!SUDroppable methodsFor: 'private' stamp: 'lr 5/12/2006 15:32'!defaultPrototype	^ 'Droppables'! !!SUDroppable methodsFor: 'options' stamp: 'lr 3/12/2006 16:26'!greedy: aBoolean	"If true stops processing hovering (don't look for other Droppables that are under the Draggable)."	self optionAt: 'greedy' put: aBoolean! !!SUDroppable methodsFor: 'options' stamp: 'lr 3/12/2006 16:26'!hoverclass: aString	"If set, the Droppable will have this additional CSS class when an accepted Draggable is hovered over it."	self optionAt: 'hoverclass' put: aString! !!SUDroppable methodsFor: 'events' stamp: 'lr 4/1/2006 11:17'!onDrop: anObject	"Called whenever a Draggable is released over the Droppable and the Droppable is accepts it."	self optionAt: 'onDrop' put: anObject asFunction! !!SUDroppable methodsFor: 'events' stamp: 'lr 4/1/2006 11:17'!onHover: anObject	"Called whenever a Draggable is moved over the Droppable and the Droppable is affected (would accept it). The callback gets 2 parameters, the passenger of the draggable and the percentage of overlapping as defined by the overlap option."	self optionAt: 'onHover' put: anObject asFunction! !!SUDroppable methodsFor: 'options' stamp: 'lr 3/12/2006 16:26'!overlap: aString	"If set to 'horizontal' or 'vertical' the droppable will only react to a Draggable if its overlapping by more than 50% in the given direction."	self optionAt: 'overlap' put: aString! !!SUDroppable methodsFor: 'options' stamp: 'lr 3/12/2006 16:26'!overlapHorizontal	self overlap: 'horizontal'! !!SUDroppable methodsFor: 'options' stamp: 'lr 3/12/2006 16:26'!overlapVertical	self overlap: 'vertical'! !!SUDroppable methodsFor: 'actions' stamp: 'lr 2/19/2007 13:45'!remove	"Remove any droppable capabilities from element."	self method: 'remove'! !!SUEffect methodsFor: 'options-move' stamp: 'lr 9/30/2008 18:16'!absolute	self mode: 'absolute'! !!SUEffect methodsFor: 'effects-combination' stamp: 'lr 5/12/2006 14:34'!appear	"Make an element appear. If the element was previously set to display:none; inside the style attribute of the element, the effect will automatically show the element. This means that it must be places under the style attribute of an object, and not in the CSS in the head of the document or a linked file."	self create; method: 'Appear'! !!SUEffect methodsFor: 'effects-combination' stamp: 'lr 5/12/2006 14:38'!blindDown	"Simulate a window blind, where the contents of the affected elements stay in place."	self create; method: 'BlindDown'! !!SUEffect methodsFor: 'effects-combination' stamp: 'lr 5/12/2006 14:38'!blindUp	"Simulate a window blind, where the contents of the affected elements stay in place."	self create; method: 'BlindUp'! !!SUEffect methodsFor: 'private' stamp: 'lr 5/12/2006 14:42'!defaultMethod	^ 'toggle'! !!SUEffect methodsFor: 'private' stamp: 'lr 5/12/2006 14:16'!defaultPrototype	^ 'Effect'! !!SUEffect methodsFor: 'options' stamp: 'lr 5/12/2006 14:20'!direction: aString	"Set the direction of the transition. Values can be either 'top-left', 'top-right', 'bottom-left', 'bottom-right' or 'center' (default). Applicable only on Grow and Shrink effects."	self optionAt: 'direction' put: aString! !!SUEffect methodsFor: 'effects-combination' stamp: 'lr 5/12/2006 14:36'!dropOut	"Make the element drop and fade out at the same time."	self create; method: 'DropOut'! !!SUEffect methodsFor: 'options' stamp: 'lr 5/2/2006 13:50'!duration: aNumber	"Duration of the effect in seconds, given as a float. Defaults to 1.0."	self optionAt: 'duration' put: aNumber! !!SUEffect methodsFor: 'options-highlight' stamp: 'lr 5/2/2006 13:50'!endColor: aColor	"Sets the color of the last frame of the highlight. This is best set to the background color of the highlighted element."	self optionAt: 'endcolor' put: aColor! !!SUEffect methodsFor: 'effects' stamp: 'lr 11/14/2006 19:17'!event	"One-shot events that follow timelines defined by effect queues."	self create; method: 'Event'; arguments: #()! !!SUEffect methodsFor: 'effects-combination' stamp: 'lr 5/12/2006 14:35'!fade	"Make an element fade away and takes it out of the document flow at the end of the effect by setting the CSS display property to none."	self create; method: 'Fade'! !!SUEffect methodsFor: 'effects-combination' stamp: 'lr 5/12/2006 14:41'!fold	"Reduce the element to its top then to left to make it disappear."	self create; method: 'Fold'! !!SUEffect methodsFor: 'options' stamp: 'lr 5/2/2006 13:50'!fps: aNumber	"Target this many frames per second. Default to 25. Can't be higher than 100."	self optionAt: 'fps' put: aNumber! !!SUEffect methodsFor: 'options' stamp: 'lr 5/2/2006 13:50'!from: aNumber	"Sets the starting point of the transition, a float between 0.0 and 1.0. Defaults to 0.0."	self optionAt: 'from' put: aNumber! !!SUEffect methodsFor: 'effects-combination' stamp: 'lr 5/12/2006 14:41'!grow	"See a demo."	self create; method: 'Grow'! !!SUEffect methodsFor: 'effects' stamp: 'lr 5/12/2006 14:37'!highlight	"This effect Flashes a color as the background of an element. It is mostly used to draw attention to a part of the page that has been updated via javascript or AJAX, when the update would not otherwise be obvious."	self create; method: 'Highlight'! !!SUEffect methodsFor: 'options-move' stamp: 'lr 6/5/2009 17:26'!mode: aString	"Defaults to 'relative', can also be 'absolute', specifies if the element is moved absolutely or relative to its own position."	self optionAt: 'mode' put: aString! !!SUEffect methodsFor: 'effects' stamp: 'lr 11/21/2006 22:10'!morph	"This effect morphs to a given CSS style rule. It does take orginal styles given by CSS style rules or the style attribute into consideration when calculating the transforms. It works with all length and color based CSS properties, including margins, paddings, borders, opacity and text/background colors."	self create; method: 'Morph'! !!SUEffect methodsFor: 'effects' stamp: 'lr 6/5/2009 17:26'!move	"This effect moves an element by modifying its position attributes."	self create; method: 'Move'! !!SUEffect methodsFor: 'effects' stamp: 'lr 9/30/2008 18:27'!move: aPoint	self x: aPoint x; y: aPoint y; move! !!SUEffect methodsFor: 'options-scroll' stamp: 'lr 2/19/2007 13:45'!offset: anInteger	"Negative or positive number of pixels as offset to the top of view."	self optionAt: 'offset' put: anInteger! !!SUEffect methodsFor: 'events' stamp: 'lr 4/22/2006 20:24'!onAfterFinish: anObject	"Called after the last redraw of the effect was made."	self options at: 'afterFinish' put: anObject asFunction! !!SUEffect methodsFor: 'events' stamp: 'lr 4/22/2006 20:24'!onAfterUpdate: anObject	"Called on each iteration of the effects rendering loop, after the redraw takes places."	self options at: 'afterUpdate' put: anObject asFunction! !!SUEffect methodsFor: 'events' stamp: 'lr 4/22/2006 20:24'!onBeforeStart: anObject	"Called before the main effects rendering loop is started."	self options at: 'beforeStart' put: anObject asFunction! !!SUEffect methodsFor: 'events' stamp: 'lr 4/22/2006 20:24'!onBeforeUpdate: anObject	"Called on each iteration of the effects rendering loop, before the redraw takes places."	self options at: 'beforeUpdate' put: anObject asFunction! !!SUEffect methodsFor: 'effects' stamp: 'mb 5/29/2006 13:00'!opacity	"This effect changes an element's opacity"	self create; method: 'Opacity'! !!SUEffect methodsFor: 'effects' stamp: 'lr 5/12/2006 14:56'!parallel: aCollection	"This is a special effect to allow to combine more than one core effect into a parallel effect."	self create; method: 'Parallel'; arguments: (Array with: aCollection)! !!SUEffect methodsFor: 'effects-combination' stamp: 'lr 5/12/2006 14:36'!puff	"Give the illusion of the element puffing away (like a in a cloud of smoke)."	self create; method: 'Puff'! !!SUEffect methodsFor: 'effects-combination' stamp: 'lr 5/12/2006 14:39'!pulsate	"Pulsate the element, loops over five times over fading out and in."	self create; method: 'Pulsate'! !!SUEffect methodsFor: 'options-pulsate' stamp: 'lr 2/19/2007 13:45'!pulses: anInteger	"Control the amount of pulses."	self optionAt: 'pulses' put: anInteger! !!SUEffect methodsFor: 'options' stamp: 'lr 11/14/2006 19:18'!queue: aString	"Sets queuing options. When used with a string, can be 'front' or 'end' or 'with-last' to queue the effect in the global effects queue at the beginning or end, or a queue parameter object that can have {position: 'front/end', scope: 'scope', limit:1}."	self optionAt: 'queue' put: aString! !!SUEffect methodsFor: 'options-move' stamp: 'lr 9/30/2008 18:16'!relative	self mode: 'relative'! !!SUEffect methodsFor: 'options-highlight' stamp: 'lr 5/2/2006 13:50'!restoreColor: aColor	"Sets the background color of the element after the highlight has finished."	self optionAt: 'restorecolor' put: aColor! !!SUEffect methodsFor: 'effects' stamp: 'lr 5/12/2006 14:59'!scale: aNumber	"This effect changes an elements width and height dimensions and the base for em units. This allows for smooth, automatic relative scaling of elements contained within the scaled element."	self create; method: 'Scale'; arguments: self arguments , (Array with: aNumber)! !!SUEffect methodsFor: 'options-scale' stamp: 'lr 5/12/2006 14:26'!scaleContent: aBoolean	"Set whether content scaling should be enabled, defaults to true."	self optionAt: 'scaleContent' put: aBoolean! !!SUEffect methodsFor: 'options-scale' stamp: 'lr 5/12/2006 14:27'!scaleFrom: aNumber	"Set the starting percentage for scaling, defaults to 100.0."	self optionAt: 'scaleFrom' put: aNumber! !!SUEffect methodsFor: 'options-scale' stamp: 'lr 5/12/2006 14:26'!scaleFromCenter: aBoolean	"If true, scale the element in a way that the center of the element stays on the same position on the screen, defaults to false."	self optionAt: 'scaleFromCenter' put: aBoolean! !!SUEffect methodsFor: 'options-scale' stamp: 'lr 5/12/2006 14:27'!scaleMode: anObject	"Either 'box' (default, scales the visible area of the element) or 'contents' (scales the complete element, that is parts normally only visible byscrolling are taken into account). You can also precisely control the size the element will become by assigning the originalHeight and originalWidth variables to scaleMode."	self optionAt: 'scaleMode' put: anObject! !!SUEffect methodsFor: 'options-scale' stamp: 'lr 5/12/2006 14:25'!scaleX: aBoolean	"Set whether the element should be scaled horizontally, defaults to true."	self optionAt: 'scaleX' put: aBoolean! !!SUEffect methodsFor: 'options-scale' stamp: 'lr 5/12/2006 14:25'!scaleY: aBoolean	"Set whether the element should be scaled vertically, defaults to true."	self optionAt: 'scaleY' put: aBoolean! !!SUEffect methodsFor: 'effects' stamp: 'lr 8/29/2006 13:46'!scroll	"Scroll page view to element."	self create; method: 'ScrollTo'! !!SUEffect methodsFor: 'effects-combination' stamp: 'lr 5/12/2006 14:36'!shake	"Move the element slightly to the left, then to the right, repeatedly."	self create; method: 'Shake'! !!SUEffect methodsFor: 'effects-combination' stamp: 'lr 5/12/2006 14:41'!shrink	"Reduce the element to its top-left corner."	self create; method: 'Shrink'! !!SUEffect methodsFor: 'effects-combination' stamp: 'lr 5/12/2006 14:39'!slideDown	"Simulate a window blind, where the contents of the affected elements scroll up and down accordingly."	self create; method: 'SlideDown'! !!SUEffect methodsFor: 'effects-combination' stamp: 'lr 5/12/2006 14:39'!slideUp	"Simulate a window blind, where the contents of the affected elements scroll up and down accordingly."	self create; method: 'SlideUp'! !!SUEffect methodsFor: 'effects-combination' stamp: 'lr 5/12/2006 14:40'!squish	"Reduce the element to its top-left corner."	self create; method: 'Squish'! !!SUEffect methodsFor: 'options-highlight' stamp: 'lr 9/30/2008 18:13'!startColor: aColor	"Sets the color of first frame of the highlight."	self optionAt: 'startcolor' put: aColor! !!SUEffect methodsFor: 'options-morph' stamp: 'lr 2/19/2007 13:45'!style: aString	"Target CSS style rule for a morph transition."	self optionAt: 'style' put: aString! !!SUEffect methodsFor: 'effects-combination' stamp: 'lr 5/12/2006 14:37'!switchOff	"Give the illusion of a TV-style switch off."	self create; method: 'SwitchOff'! !!SUEffect methodsFor: 'options' stamp: 'lr 5/2/2006 13:50'!sync: aBoolean	"Sets whether the effect should render new frames automatically (which it does by default). If true, you can render frames manually by calling the render() instance method of an effect. This is used by Effect.Parallel()."	self optionAt: 'sync' put: aBoolean! !!SUEffect methodsFor: 'options' stamp: 'lr 5/2/2006 13:51'!to: aNumber	"Sets the end point of the transition, a float between 0.0 and 1.0. Defaults to 1.0."	self optionAt: 'to' put: aNumber! !!SUEffect methodsFor: 'effects-toggles' stamp: 'lr 5/12/2006 15:00'!toggle: aString	"Allow for easily toggling elements with an animation."	self method: 'toggle'; arguments: self arguments , (Array with: aString)! !!SUEffect methodsFor: 'effects-toggles' stamp: 'lr 5/2/2006 13:58'!toggleAppear	self toggle: 'Appear'! !!SUEffect methodsFor: 'effects-toggles' stamp: 'lr 5/2/2006 13:58'!toggleBlind	self toggle: 'Blind'! !!SUEffect methodsFor: 'effects-toggles' stamp: 'lr 5/2/2006 13:58'!toggleSlide	self toggle: 'Slide'! !!SUEffect methodsFor: 'options' stamp: 'lr 5/2/2006 13:51'!transition: anObject	"Sets a function that modifies the current point of the animation, which is between 0 and 1. Following transitions are supplied: Effect.Transitions.sinoidal (default), Effect.Transitions.linear, Effect.Transitions.reverse, Effect.Transitions.wobble and Effect.Transitions.flicker."	self optionAt: 'transition' put: anObject asFunction! !!SUEffect methodsFor: 'effects' stamp: 'lr 11/7/2007 22:03'!tweenFrom: aFromInteger to: aToInteger using: aStringOrFunction	"This effect tweens between two values and sets a property or calls a method on an object; or allows for a callback method, which will be automatically bound to the object."	self create; method: 'Tween'; arguments: self arguments , (Array with: aFromInteger with: aToInteger with: aStringOrFunction)! !!SUEffect methodsFor: 'options-move' stamp: 'lr 6/5/2009 17:26'!x: anInteger	"Either the new absolute target of the effect elements top value or the modifier of its current top value, depending on the mode option."	self optionAt: 'x' put: anInteger! !!SUEffect methodsFor: 'options-move' stamp: 'lr 6/5/2009 17:26'!y: anInteger	"Either the new absolute target of the effect elements top value or the modifier of its current top value, depending on the mode option."	self optionAt: 'y' put: anInteger! !!SUInsertion class methodsFor: 'instance-creation' stamp: 'lr 5/2/2006 10:36'!after	^ self new after! !!SUInsertion class methodsFor: 'instance-creation' stamp: 'lr 5/2/2006 10:36'!before	^ self new before! !!SUInsertion class methodsFor: 'instance-creation' stamp: 'lr 5/2/2006 10:36'!bottom	^ self new bottom! !!SUInsertion class methodsFor: 'instance-creation' stamp: 'lr 5/2/2006 10:36'!top	^ self new top! !!SUInsertion methodsFor: 'accessing' stamp: 'lr 2/27/2007 21:19'!after	"Inserts the html into the page as the next sibling of element."	self access: 'After'! !!SUInsertion methodsFor: 'actions' stamp: 'lr 11/23/2006 00:14'!after: aBlock	self after; with: aBlock! !!SUInsertion methodsFor: 'accessing' stamp: 'lr 2/27/2007 21:19'!before	"Inserts the html into the page as the previous sibling of element."	self access: 'Before'! !!SUInsertion methodsFor: 'actions' stamp: 'lr 11/23/2006 00:14'!before: aBlock	self before; with: aBlock! !!SUInsertion methodsFor: 'accessing' stamp: 'lr 2/27/2007 21:19'!bottom	"Inserts the html into the page as the last child of element."	self access: 'Bottom'! !!SUInsertion methodsFor: 'actions' stamp: 'lr 11/23/2006 00:14'!bottom: aBlock	self bottom; with: aBlock! !!SUInsertion methodsFor: 'private' stamp: 'lr 5/17/2006 11:31'!defaultArguments	^ nil! !!SUInsertion methodsFor: 'private' stamp: 'lr 5/10/2006 21:45'!defaultPrototype	^ 'Insertion'! !!SUInsertion methodsFor: 'accessing' stamp: 'lr 2/27/2007 21:19'!top	"Inserts the html into the page as the first child of element."	self access: 'Top'! !!SUInsertion methodsFor: 'actions' stamp: 'lr 11/23/2006 00:14'!top: aBlock	self top; with: aBlock! !!SUInsertion methodsFor: 'public' stamp: 'lr 2/19/2007 13:45'!with: aBlock	self create; apply: (Array		with: self id		with: (String streamContents: [ :stream |			self render: aBlock on: stream ]))! !!SUNamed methodsFor: 'accessing' stamp: 'lr 5/12/2006 14:58'!arguments	^ arguments ifNil: [ Array with: self id ]! !!SUNamed methodsFor: 'accessing' stamp: 'lr 5/12/2006 14:11'!arguments: aCollection	arguments := aCollection! !!SUNamed methodsFor: 'private' stamp: 'lr 5/12/2006 14:58'!defaultArguments	^ self arguments , super defaultArguments! !!SUNamed methodsFor: 'private' stamp: 'lr 5/2/2006 16:17'!defaultId	^ SUStream on: 'this'! !!SUNamed methodsFor: 'private' stamp: 'lr 5/12/2006 14:12'!defaultMethod	^ nil! !!SUNamed methodsFor: 'accessing' stamp: 'lr 5/10/2006 20:38'!id	^ id ifNil: [ self defaultId ]! !!SUNamed methodsFor: 'accessing' stamp: 'lr 5/12/2006 14:58'!id: aString	id := aString! !!SUNamed methodsFor: 'accessing' stamp: 'lr 5/12/2006 14:11'!method	^ method ifNil: [ self defaultMethod ]! !!SUNamed methodsFor: 'accessing' stamp: 'lr 5/12/2006 14:12'!method: aString	method := aString! !!SUNamed methodsFor: 'printing' stamp: 'lr 5/16/2006 08:04'!printContentOn: aStream	self printPrototypeOn: aStream.	self method		ifNotNil: [ self printMethodOn: aStream ].	self printArgumentsOn: aStream! !!SUNamed methodsFor: 'printing' stamp: 'lr 5/15/2006 13:45'!printMethodOn: aStream	aStream nextPut: $.; nextPutAll: self method! !!SUResponders methodsFor: 'private' stamp: 'lr 2/27/2007 20:53'!defaultArguments	^ Array with: self options! !!SUResponders methodsFor: 'private' stamp: 'lr 2/27/2007 20:49'!defaultMethod	^ 'register'! !!SUResponders methodsFor: 'private' stamp: 'lr 2/27/2007 20:42'!defaultPrototype	^ 'Ajax.Responders'! !!SUResponders methodsFor: 'events' stamp: 'lr 2/27/2007 20:45'!onComplete: anObject	"Triggered at the very end of a request's life-cycle, once the request completed, status-specific callbacks were called, and possible automatic behaviors were processed."	self optionAt: 'onComplete' put: anObject asFunction! !!SUResponders methodsFor: 'events' stamp: 'lr 2/27/2007 20:45'!onCreate: anObject	"onCreate is only available to responders, as it wouldn't make a lot of sense to individual requests: you do know when your code creates them, don't you?"	self optionAt: 'onCreate' put: anObject asFunction! !!SUResponders methodsFor: 'events' stamp: 'lr 2/27/2007 20:45'!onException: anObject	"Triggered whenever an XHR error arises. Has a custom signature: the first argument is the requester, the second is the exception object."	self optionAt: 'onException' put: anObject asFunction! !!SUResponders methodsFor: 'events' stamp: 'lr 2/27/2007 20:45'!onFailure: anObject	"Invoked when a request completes and its status code exists but is not in the 2xy family. This is skipped if a code-specific callback is defined, and happens before onComplete."	self optionAt: 'onFailure' put: anObject asFunction! !!SUResponders methodsFor: 'events' stamp: 'lr 2/27/2007 20:45'!onInteractive: anObject	"(Not guaranteed) Triggered whenever the requester receives a part of the response (but not the final part), should it be sent in several packets."	self optionAt: 'onInteractive' put: anObject asFunction! !!SUResponders methodsFor: 'events' stamp: 'lr 2/27/2007 20:45'!onLoaded: anObject	"(Not guaranteed) Triggered once the underlying XHR object is setup, the connection open, and ready to send its actual request."	self optionAt: 'onLoaded' put: anObject asFunction! !!SUResponders methodsFor: 'events' stamp: 'lr 2/27/2007 20:45'!onLoading: anObject	"(Not guaranteed) Triggered when the underlying XHR object is being setup, and its connection opened."	self optionAt: 'onLoading' put: anObject asFunction! !!SUResponders methodsFor: 'events' stamp: 'lr 2/27/2007 20:45'!onStatus: anInteger do: anObject	"With anInteger being an HTTP status code for the response. Invoked when the response just completed, and the status code is exactly the one we used in the callback name. Prevents execution of onSuccess / onFailure. Happens before onComplete."	self optionAt: 'on' , anInteger displayString put: anObject asFunction! !!SUResponders methodsFor: 'events' stamp: 'lr 2/27/2007 20:45'!onSuccess: anObject	"Invoked when a request completes and its status code is undefined or belongs in the 2xy family. This is skipped if a code-specific callback is defined, and happens before onComplete."	self optionAt: 'onSuccess' put: anObject asFunction! !!SUResponders methodsFor: 'events' stamp: 'lr 2/27/2007 20:45'!onUninitialized: anObject	"(Not guaranteed) Invoked when the XHR object was just created."	self optionAt: 'onUninitialized' put: anObject asFunction! !!SUResponders methodsFor: 'actions' stamp: 'lr 2/27/2007 20:50'!register	method := 'register'! !!SUResponders methodsFor: 'actions' stamp: 'lr 2/27/2007 20:50'!unregister	method := 'unregister'! !!SUSortable class methodsFor: 'private' stamp: 'lr 5/3/2006 21:04'!passengerPrefix	^ '_p'! !!SUSortable class methodsFor: 'private' stamp: 'lr 2/19/2007 13:45'!passengerRegexp	^ SUStream new		nextPutAll: '/^';		nextPutAll: self passengerPrefix;		nextPutAll: '([0-9]+)$/'! !!SUSortable methodsFor: 'options' stamp: 'lr 4/1/2006 11:53'!constraint: aString	"If set to #horizontal or #vertical the drag will be constrained to take place only horizontally or vertically."	self optionAt: 'constraint' put: aString! !!SUSortable methodsFor: 'options' stamp: 'lr 4/1/2006 11:53'!constraintHorizontal	self constraint: #horizontal! !!SUSortable methodsFor: 'options' stamp: 'lr 4/1/2006 11:53'!constraintVertical	self constraint: #vertical! !!SUSortable methodsFor: 'options' stamp: 'lr 3/7/2006 13:54'!containment: aStringOrArray	"Enables dragging and dropping between Sortables. Takes an array of elements or element-ids (of the containers)."	self optionAt: 'containment' put: aStringOrArray! !!SUSortable methodsFor: 'actions' stamp: 'lr 5/12/2006 15:12'!create	self method: 'create'! !!SUSortable methodsFor: 'private' stamp: 'lr 5/12/2006 15:12'!defaultMethod	^ 'create'! !!SUSortable methodsFor: 'private' stamp: 'lr 5/10/2006 22:39'!defaultPrototype	^ 'Sortable'! !!SUSortable methodsFor: 'options' stamp: 'lr 9/5/2006 17:23'!delay: aDuration	self optionAt: 'delay' put: aDuration! !!SUSortable methodsFor: 'actions' stamp: 'lr 11/27/2006 22:50'!destroy	self method: 'destroy'! !!SUSortable methodsFor: 'options' stamp: 'lr 4/11/2006 14:53'!dropOnEmpty: aBoolean	"If set to true, the Sortable container will be made into a Droppable, that can receive a Draggable (as according to the containment rules) as a child element when there are no more elements inside."	self optionAt: 'dropOnEmpty' put: aBoolean! !!SUSortable methodsFor: 'options' stamp: 'lr 3/7/2006 13:55'!ghosting: aBoolean	"If set to true, dragged elements of the Sortable will e cloned and appear as 'ghost', i.e. a representation of their original element, instead of directly dragging the original element."	self optionAt: 'ghosting' put: aBoolean! !!SUSortable methodsFor: 'options' stamp: 'lr 3/7/2006 16:50'!handle: aString	"Further restricts the selection of child elements to only encompass elements with the given CSS class (or, if you provide an array of strings, on any of the classes)."	self optionAt: 'handle' put: aString! !!SUSortable methodsFor: 'options' stamp: 'lr 3/7/2006 13:54'!hoverclass: aString	"Gives the created Droppables a hoverclass."	self optionAt: 'hoverclass' put: aString! !!SUSortable methodsFor: 'initialization' stamp: 'lr 4/29/2006 18:46'!initialize	super initialize.	self optionAt: 'format' put: self class passengerRegexp! !!SUSortable methodsFor: 'events' stamp: 'lr 4/1/2006 11:19'!onChange: anObject	"Called whenever the sort order changes while dragging. When dragging from one Sortable to another, the callback is called once on each Sortable."	self optionAt: 'onChange' put: anObject asFunction! !!SUSortable methodsFor: 'events' stamp: 'lr 4/1/2006 11:19'!onUpdate: anObject	"Called when the drag ends and the Sortable's order is changed in any way. When dragging from one Sortable to another, the callback is called once on each Sortable."	self optionAt: 'onUpdate' put: anObject asFunction! !!SUSortable methodsFor: 'options' stamp: 'lr 3/7/2006 13:44'!only: aString	"Further restricts the selection of child elements to only encompass elements with the given CSS class (or, if you provide an array of strings, on any of the classes)."	self optionAt: 'only' put: aString! !!SUSortable methodsFor: 'options' stamp: 'lr 3/7/2006 13:48'!overlap: aSymbol	"Either #vertical or #horizontal. For floating sortables or horizontal lists, choose #horizontal. Vertical lists should use #vertical."	self optionAt: 'overlap' put: aSymbol! !!SUSortable methodsFor: 'options' stamp: 'lr 4/1/2006 11:53'!overlapHorizontal	self overlap: #horizontal! !!SUSortable methodsFor: 'options' stamp: 'lr 3/8/2006 09:39'!overlapVertical	self overlap: #vertical! !!SUSortable methodsFor: 'options' stamp: 'lr 4/6/2006 23:37'!scroll: aBoolean	self optionAt: 'scroll' put: aBoolean! !!SUSortable methodsFor: 'options' stamp: 'lr 4/6/2006 23:38'!scrollSensitivity: aNumber	self optionAt: 'scrollSensitivity' put: aNumber! !!SUSortable methodsFor: 'options' stamp: 'lr 4/6/2006 23:38'!scrollSpeed: aNumber	self optionAt: 'scrollSpeed' put: aNumber! !!SUSortable methodsFor: 'actions' stamp: 'lr 5/12/2006 15:13'!sequence	self method: 'sequence'! !!SUSortable methodsFor: 'actions' stamp: 'lr 5/12/2006 15:13'!serialize	self method: 'serialize'! !!SUSortable methodsFor: 'options' stamp: 'lr 3/7/2006 13:44'!tag: aString	"Sets the kind of tag (of the child elements of the container) that will be made sortable. For UL and OL containers, this is 'LI', you have to provide the tag kind for other sorts of child tags."	self optionAt: 'tag' put: aString! !!SUSortable methodsFor: 'actions' stamp: 'lr 5/12/2006 15:13'!tree	self method: 'tree_sequence'! !!SUSortable methodsFor: 'options' stamp: 'lr 4/6/2006 23:37'!tree: aBoolean	self optionAt: 'tree' put: aBoolean! !!SUSortable methodsFor: 'options' stamp: 'lr 4/6/2006 23:37'!treeTag: aString	self optionAt: 'treeTag' put: aString! !!SUSound methodsFor: 'private' stamp: 'lr 3/12/2007 16:37'!defaultMethod	^ 'play'! !!SUSound methodsFor: 'private' stamp: 'lr 3/12/2007 16:37'!defaultPrototype	^ 'Sound'! !!SUSound methodsFor: 'actions' stamp: 'lr 3/12/2007 16:38'!disable	self method: 'disable'! !!SUSound methodsFor: 'actions' stamp: 'lr 3/12/2007 16:38'!enable	self method: 'enable'! !!SUSound methodsFor: 'actions' stamp: 'lr 3/12/2007 16:38'!play	self method: 'play'! !!SUSound methodsFor: 'actions' stamp: 'lr 3/12/2007 16:40'!play: anUrl	self url: anUrl; play! !!SUSound methodsFor: 'options' stamp: 'lr 3/12/2007 16:40'!replace: aBoolean	self optionAt: 'replace' put: aBoolean! !!SUSound methodsFor: 'options' stamp: 'lr 3/12/2007 16:39'!track: aString	self optionAt: 'track' put: aString! !!SUSound methodsFor: 'accessing' stamp: 'lr 3/12/2007 20:51'!url	^ id! !!SUSound methodsFor: 'accessing' stamp: 'lr 3/12/2007 20:51'!url: anUrl	id := anUrl! !!SUFormElementObserver methodsFor: 'defaults' stamp: 'lr 5/19/2009 09:09'!defaultPrototype	^ 'Form.Element.Observer'! !!SUFormObserver methodsFor: 'defaults' stamp: 'kdt 1/16/2009 23:17'!defaultPrototype	^ 'Form.Observer'! !!SUTimedObserver methodsFor: 'defaults' stamp: 'lr 5/19/2009 09:12'!defaultArguments	^ super defaultArguments , (Array with: self frequency with: self function)! !!SUTimedObserver methodsFor: 'defaults' stamp: 'kdt 1/17/2009 22:32'!defaultFrequency	^ 1 second! !!SUTimedObserver methodsFor: 'defaults' stamp: 'lr 5/19/2009 09:13'!defaultFunction	^ SUFunction new! !!SUTimedObserver methodsFor: 'accessing' stamp: 'lr 5/19/2009 09:13'!frequency	^ frequency ifNil: [ self defaultFrequency ]! !!SUTimedObserver methodsFor: 'accessing' stamp: 'lr 5/19/2009 09:12'!frequency: aDuration	frequency := aDuration! !!SUTimedObserver methodsFor: 'accessing' stamp: 'lr 5/19/2009 09:13'!function	^ function ifNil: [ self defaultFunction ]! !!SUTimedObserver methodsFor: 'accessing' stamp: 'lr 6/5/2009 17:26'!function: anObject	function := anObject asFunction: #('element' 'value')! !!SUTimedObserver methodsFor: 'initialization' stamp: 'kdt 1/17/2009 22:32'!initialize	super initialize.	self create! !!SUPrototype methodsFor: 'private' stamp: 'lr 5/15/2006 13:43'!defaultArguments	^ options ifNil: [ Array new ] ifNotNil: [ Array with: options ]! !!SUPrototype methodsFor: 'private' stamp: 'lr 9/30/2008 18:28'!defaultOptions	^ WASmallDictionary new! !!SUPrototype methodsFor: 'private' stamp: 'lr 5/10/2006 21:18'!defaultPrototype	self subclassResponsibility! !!SUPrototype methodsFor: 'accessing' stamp: 'lr 5/9/2006 21:07'!optionAt: aKey put: anObject	self options at: aKey put: anObject! !!SUPrototype methodsFor: 'accessing' stamp: 'lr 5/9/2006 21:07'!options	^ options ifNil: [ options := self defaultOptions ]! !!SUPrototype methodsFor: 'printing' stamp: 'lr 5/17/2006 11:29'!printArgumentsOn: aStream	self defaultArguments ifNotNilDo: [ :args | aStream arguments: args ]! !!SUPrototype methodsFor: 'printing' stamp: 'lr 5/15/2006 13:44'!printContentOn: aStream	self printPrototypeOn: aStream.	self printArgumentsOn: aStream! !!SUPrototype methodsFor: 'printing' stamp: 'mb 5/29/2006 13:02'!printPrototypeOn: aStream	aStream nextPutAll: self defaultPrototype! !!SUSlider methodsFor: 'options' stamp: 'lr 3/13/2006 20:16'!alignX: anNumber	"This will move the starting point on the x-axis for the handle in relation to the track. It is often used to move the 'point' of the handle to where 0 should be. It can also be used to set a different starting point on the track."	self optionAt: 'alignX' put: anNumber! !!SUSlider methodsFor: 'options' stamp: 'lr 3/13/2006 20:17'!alignY: anNumber	"This will move the starting point on the y-axis for the handle in relation to the track. It is often used to move the 'point' of the handle to where 0 should be. It can also be used to set a different starting point on the track."	self optionAt: 'alignY' put: anNumber! !!SUSlider methodsFor: 'options' stamp: 'lr 3/13/2006 20:13'!axis: aSymbol	"Sets the direction that the slider will move in. It should either be horizontal or vertical."	self optionAt: 'axis' put: aSymbol! !!SUSlider methodsFor: 'private' stamp: 'lr 5/15/2006 13:40'!defaultArguments	^ (Array with: self handleId with: self trackId) , super defaultArguments! !!SUSlider methodsFor: 'private' stamp: 'lr 5/15/2006 13:41'!defaultPrototype	^ 'Control.Slider'! !!SUSlider methodsFor: 'options' stamp: 'lr 3/13/2006 20:17'!disabled: aBoolean	"This will lock the slider so that it will not move and thus is disabled."	self optionAt: 'disabled' put: aBoolean! !!SUSlider methodsFor: 'accessing' stamp: 'lr 3/30/2006 20:18'!handleId	^ handleId! !!SUSlider methodsFor: 'accessing' stamp: 'lr 3/30/2006 20:18'!handleId: aString	^ handleId := aString! !!SUSlider methodsFor: 'options' stamp: 'lr 3/13/2006 20:14'!increment: aNumber	"Defines the relationship of value to pixels. Setting this to 1 will mean each movement of 1 pixel equates to 1 value."	self optionAt: 'increment' put: aNumber! !!SUSlider methodsFor: 'initialization' stamp: 'lr 5/15/2006 13:41'!initialize	super initialize.	self create! !!SUSlider methodsFor: 'options' stamp: 'lr 3/13/2006 20:14'!maximum: aNumber	"The maximum value that the slider will move to. For horizontal this is to the right while vertical it is down."	self optionAt: 'maximum' put: aNumber! !!SUSlider methodsFor: 'options' stamp: 'lr 3/13/2006 20:14'!minimum: aNumber	"The minimum value that the slider can move to. For horizontal this is to the left while vertical it is up."	self optionAt: 'minimum' put: aNumber! !!SUSlider methodsFor: 'events' stamp: 'lr 4/1/2006 11:19'!onChange: anObject	"Called whenever the Slider has finished moving or has had its value changed. The called function gets the slider value as its parameter."	self optionAt: 'onChange' put: anObject asFunction! !!SUSlider methodsFor: 'events' stamp: 'lr 4/1/2006 11:19'!onSlide: anObject	"Called whenever the Slider is moved by dragging. The called function gets the slider value as its parameter."	self optionAt: 'onSlide' put: anObject asFunction! !!SUSlider methodsFor: 'options' stamp: 'lr 3/13/2006 20:15'!range: anInterval	self optionAt: 'range' put: anInterval! !!SUSlider methodsFor: 'accessing' stamp: 'lr 3/30/2006 20:16'!trackId	^ trackId! !!SUSlider methodsFor: 'accessing' stamp: 'lr 3/30/2006 20:16'!trackId: aString	trackId := aString! !!SUSlider methodsFor: 'options' stamp: 'lr 3/20/2006 19:39'!value: aNumber	"Will set the initial slider value. The handle will be set to this value, assuming it is within the minimum and maxium values."	self optionAt: 'sliderValue' put: aNumber! !!SUSlider methodsFor: 'options' stamp: 'lr 3/13/2006 20:18'!values: anArray	"Accepts an array of integers. If set these will be the only legal values for the slider to be at. Thus you can set specific slider values that the user can move the slider to."	self optionAt: 'values' put: anArray! !!SUFunction class methodsFor: 'instance-creation' stamp: 'lr 6/18/2007 06:35'!on: aCanvas iterator: aBlock	^ (self on: aCanvas) initializeWithIterator: aBlock! !!SUFunction methodsFor: 'accessing' stamp: 'lr 1/4/2007 15:57'!argument	^ arguments! !!SUFunction methodsFor: 'accessing' stamp: 'lr 1/4/2007 15:55'!arguments	^ arguments! !!SUFunction methodsFor: 'accessing' stamp: 'lr 1/4/2007 15:55'!arguments: aCollection	arguments := aCollection! !!SUFunction methodsFor: 'converting' stamp: 'lr 5/17/2006 11:27'!asFunction	^ self! !!SUFunction methodsFor: 'converting' stamp: 'lr 1/4/2007 17:22'!asFunction: aCollection	self arguments: aCollection! !!SUFunction methodsFor: 'initialization' stamp: 'lr 1/4/2007 15:59'!initialize	super initialize.	arguments := #()! !!SUFunction methodsFor: 'initialization' stamp: 'lr 10/28/2007 14:40'!initializeWithIterator: aBlock	aBlock value: (SUFactory		on: self canvas		using: [ :each |			(each respondsTo: #id:)				ifTrue: [ each id: (SUStream argumentAt: 1) ].			self add: each ])! !!SUFunction methodsFor: 'printing' stamp: 'lr 2/19/2007 13:45'!printContentOn: aStream	aStream nextPutAll: 'function('.	self arguments		do: [ :each | aStream nextPutAll: each ]		separatedBy: [ aStream nextPut: $, ].	aStream nextPutAll: '){'.	statements isEmpty ifFalse: [		statements allButLast			do: [ :each | aStream javascript: each; nextPut: $; ].		self return			ifTrue: [ aStream nextPutAll: 'return ' ].		aStream javascript: statements last ].	aStream nextPut: $}! !!SUFunction methodsFor: 'accessing' stamp: 'lr 5/15/2006 11:04'!return	^ return ifNil: [ false ]! !!SUFunction methodsFor: 'accessing' stamp: 'lr 5/15/2006 11:04'!return: aBoolean	return := aBoolean! !!SUScript methodsFor: 'adding' stamp: 'lr 8/29/2006 08:36'!, anObject	self add: anObject! !!SUScript methodsFor: 'adding' stamp: 'lr 8/4/2006 08:59'!add: anObject	^ statements add: anObject! !!SUScript methodsFor: 'conveniance' stamp: 'lr 2/19/2007 13:45'!alert: anObject	self add: (SUStream new		nextPutAll: 'alert';		argument: anObject;		yourself)! !!SUScript methodsFor: 'conveniance' stamp: 'lr 2/19/2007 13:45'!callback: aBlock	self goto: (canvas context actionUrl		withParameter: (canvas callbacks			registerActionCallback: aBlock))! !!SUScript methodsFor: 'adding' stamp: 'lr 8/4/2006 08:48'!effect	^ self add: (SUEffect on: canvas)! !!SUScript methodsFor: 'adding' stamp: 'lr 8/4/2006 08:48'!element	^ self add: (SUElement on: canvas)! !!SUScript methodsFor: 'adding' stamp: 'lr 11/21/2006 23:02'!formElement	^ self add: (SUFormElement on: canvas)! !!SUScript methodsFor: 'conveniance' stamp: 'lr 6/6/2006 14:25'!goto: anUrl	self add: (SUStream new nextPutAll: 'window.location='; javascript: anUrl)! !!SUScript methodsFor: 'initialization' stamp: 'lr 5/10/2006 19:47'!initialize	super initialize.	statements := OrderedCollection new! !!SUScript methodsFor: 'adding' stamp: 'lr 11/22/2006 23:36'!insertion	^ self add: (SUInsertion on: canvas)! !!SUScript methodsFor: 'adding' stamp: 'lr 11/28/2006 10:41'!logger	^ self add: (SULogger on: canvas)! !!SUScript methodsFor: 'printing' stamp: 'lr 2/19/2007 13:45'!printContentOn: aStream	statements		do: [ :each | aStream javascript: each ]		separatedBy: [ aStream nextPut: $; ]! !!SUScript methodsFor: 'conveniance' stamp: 'lr 6/6/2006 14:25'!refresh	self goto: canvas context actionUrl! !!SUScript methodsFor: 'adding' stamp: 'lr 8/4/2006 09:28'!selector	^ self add: (SUSelector on: canvas)! !!SUStream class methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:40'!argumentAt: anInteger	^ SUStream new		nextPutAll: 'arguments[';		javascript: anInteger - 1;		nextPutAll: ']'! !!SUStream class methodsFor: 'string-encoding' stamp: 'lr 10/28/2007 14:40'!encode: aString to: aStream	| char value encoded |	aStream nextPut: $'.	1 to: aString size do: [ :index |		char := aString at: index.		value := char asInteger.		value < JavascriptCharacters size			ifFalse: [				aStream nextPutAll: '\u'; nextPutAll: ((char asUnicode					printStringBase: 16) padded: #left to: 4 with: $0) ]			ifTrue: [				encoded := JavascriptCharacters at: value + 1.				encoded isString					ifTrue: [ aStream nextPutAll: encoded ]					ifFalse: [ aStream nextPut: encoded ] ] ].	aStream nextPut: $'! !!SUStream class methodsFor: 'string-encoding' stamp: 'pmm 8/26/2007 16:01'!initialize	| escapes |	JavascriptCharacters := Array new: 127.	0 to: 31 do: [ :each |		JavascriptCharacters			at: each + 1			put: '\x' , ((each printStringBase: 16)				padded: #left to: 2 with: $0) ].	32 to: 126 do: [ :each |		JavascriptCharacters			at: each + 1			put: each asCharacter ].	"don't use #pairsDo: doesn't work for JPMorgan"	escapes := #( 0 '\0' 7 '\a' 8 '\b' 9 '\t' 10 '\n' 12 '\f' 13 '\r' 39 '\''' 92 '\\' ).	1 to: escapes size - 1 by: 2 do: [ :index |		JavascriptCharacters			at: (escapes at: index) + 1			put: (escapes at: index + 1) ]! !!SUStream class methodsFor: 'instance-creation' stamp: 'lr 5/10/2006 20:36'!new	^ self basicNew initialize! !!SUStream class methodsFor: 'instance-creation' stamp: 'lr 5/10/2006 20:36'!on: aString	^ self new nextPutAll: aString! !!SUStream methodsFor: 'streaming' stamp: 'lr 8/4/2006 08:37'!argument: anObject	self arguments: (Array with: anObject)! !!SUStream methodsFor: 'streaming' stamp: 'lr 5/10/2006 20:32'!arguments: aCollection	self stream arguments: aCollection! !!SUStream methodsFor: 'accessing' stamp: 'lr 5/1/2006 17:06'!contents	^ self stream contents! !!SUStream methodsFor: 'copying' stamp: 'lr 5/10/2006 20:36'!copy	^ self class on: self contents! !!SUStream methodsFor: 'initialization' stamp: 'lr 5/10/2006 20:36'!initialize	stream := String new writeStream! !!SUStream methodsFor: 'streaming' stamp: 'lr 5/1/2006 17:07'!javascript: anObject	self stream javascript: anObject! !!SUStream methodsFor: 'streaming' stamp: 'lr 5/1/2006 17:07'!nextPut: aCharacter	self stream nextPut: aCharacter! !!SUStream methodsFor: 'streaming' stamp: 'lr 5/1/2006 17:07'!nextPutAll: aString	self stream nextPutAll: aString! !!SUStream methodsFor: 'printing' stamp: 'lr 5/1/2006 17:05'!printOn: aStream	aStream nextPutAll: self contents! !!SUStream methodsFor: 'accessing' stamp: 'lr 5/1/2006 17:06'!stream	^ stream! !!WAIframeTag methodsFor: '*scriptaculous' stamp: 'lr 3/10/2006 12:18'!callback: aBlock	self name: (canvas callbacks registerCallback: aBlock)! !!UndefinedObject methodsFor: '*scriptaculous' stamp: 'lr 4/11/2006 19:44'!javascriptOn: aStream	aStream nextPutAll: 'null'! !"Scriptaculous"!!CDHello class methodsFor: 'testing' stamp: 'pmm 8/5/2007 15:09'!canBeRoot	^true! !!CDHello methodsFor: 'rendering' stamp: 'pmm 8/5/2007 15:11'!renderContentOn: html	html heading level2;		with: 'hello, customer'.	html anchor		callback: [ self showPriceList ];		with: 'price list'! !!CDHello methodsFor: 'actions' stamp: 'pmm 8/5/2007 15:08'!showPriceList	self call: CDPriceList new! !!CDPriceList methodsFor: 'actions' stamp: 'pmm 8/5/2007 15:10'!back	self answer! !!CDPriceList methodsFor: 'rendering' stamp: 'pmm 8/5/2007 15:11'!renderContentOn: html	html heading level2;		with: 'price list'.	html anchor		callback: [ self back ];		with: 'back'! !"CallDemo"!!CETimeComponent class methodsFor: 'testing' stamp: 'pmm 8/7/2007 21:12'!canBeRoot	^true! !!CETimeComponent methodsFor: 'initialize-release' stamp: 'pmm 8/7/2007 21:00'!initialize	super initialize.	self showTime: true.	self showDay: true.	self showDate: true! !!CETimeComponent methodsFor: 'rendering' stamp: 'pmm 8/7/2007 21:12'!renderContentOn: html	html heading level1;		with: 'checkbox example'.		html form: [		html div: [			self renderSelectionOn: html.			self renderDateOn: html.			html submitButton				callback: [ "no need to do anything" ];				text: 'Send' ] ]! !!CETimeComponent methodsFor: 'rendering' stamp: 'pmm 8/7/2007 21:13'!renderDateOn: html	| date |	date := DateAndTime now.	self showTime ifTrue: [		html text: date asTime print24.		html space ].	self showDay ifTrue: [		html text: date dayOfWeekName.		html space ].	self showDate ifTrue: [		html text: (date asDate asDate printFormat: #(2 1 3 $. 1 1)).		html space ].	html break! !!CETimeComponent methodsFor: 'rendering' stamp: 'pmm 8/7/2007 21:13'!renderSelectionOn: html	html text: 'Time:'.	html checkbox		on: #showTime of: self.	html space.			html text: 'Day:'.	html checkbox		on: #showDay of: self.	html space.			html text: 'Date:'.	html checkbox		on: #showDate of: self.	html break! !!CETimeComponent methodsFor: 'accessing' stamp: 'pmm 8/7/2007 20:59'!showDate	^showDate! !!CETimeComponent methodsFor: 'accessing' stamp: 'pmm 8/7/2007 20:59'!showDate: aBoolean 	showDate := aBoolean! !!CETimeComponent methodsFor: 'accessing' stamp: 'pmm 8/7/2007 20:59'!showDay	^showDay! !!CETimeComponent methodsFor: 'accessing' stamp: 'pmm 8/7/2007 21:00'!showDay: aBoolean 	showDay := aBoolean! !!CETimeComponent methodsFor: 'accessing' stamp: 'pmm 8/7/2007 20:59'!showTime	^showTime! !!CETimeComponent methodsFor: 'accessing' stamp: 'pmm 8/7/2007 21:00'!showTime: aBoolean 	showTime := aBoolean! !!CETimeComponent methodsFor: 'path' stamp: 'pmm 8/7/2007 21:01'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'checkbox example'! !"CheckboxExample"!!CSSDockFileLibrary commentStamp: 'tbn 11/28/2007 01:24' prior: 0!This class includes the file library for the CSSDockDemo!!CSSDockDemo commentStamp: 'tbn 11/28/2007 01:24' prior: 0!This example wraps the CSS Dock Menu from http://www.ndesign-studio.com/blog/mac/css-dock-menu!!CSSDockFileLibrary methodsFor: 'images'!blankGif	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(71 73 70 56 57 97 1 0 1 0 128 0 0 255 255 255 0 0 0 33 249 4 1 0 0 0 0 44 0 0 0 0 1 0 1 0 0 2 2 68 1 0 59) asByteArray ].	^ cache at: 1! !!CSSDockFileLibrary methodsFor: 'images'!calendarPng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 128 0 0 0 128 8 6 0 0 0 195 62 97 203 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 10 79 105 67 67 80 80 104 111 116 111 115 104 111 112 32 73 67 67 32 112 114 111 102 105 108 101 0 0 120 218 157 83 103 84 83 233 22 61 247 222 244 66 75 136 128 148 75 111 82 21 8 32 82 66 139 128 20 145 38 42 33 9 16 74 136 33 161 217 21 81 193 17 69 69 4 27 200 160 136 3 142 142 128 140 21 81 44 12 138 10 216 7 228 33 162 142 131 163 136 138 202 251 225 123 163 107 214 188 247 230 205 254 181 215 62 231 172 243 157 179 207 7 192 8 12 150 72 51 81 53 128 12 169 66 30 17 224 131 199 196 198 225 228 46 64 129 10 36 112 0 16 8 179 100 33 115 253 35 1 0 248 126 60 60 43 34 192 7 190 0 1 120 211 11 8 0 192 77 155 192 48 28 135 255 15 234 66 153 92 1 128 132 1 192 116 145 56 75 8 128 20 0 64 122 142 66 166 0 64 70 1 128 157 152 38 83 0 160 4 0 96 203 99 98 227 0 80 45 0 96 39 127 230 211 0 128 157 248 153 123 1 0 91 148 33 21 1 160 145 0 32 19 101 136 68 0 104 59 0 172 207 86 138 69 0 88 48 0 20 102 75 196 57 0 216 45 0 48 73 87 102 72 0 176 183 0 192 206 16 11 178 0 8 12 0 48 81 136 133 41 0 4 123 0 96 200 35 35 120 0 132 153 0 20 70 242 87 60 241 43 174 16 231 42 0 0 120 153 178 60 185 36 57 69 129 91 8 45 113 7 87 87 46 30 40 206 73 23 43 20 54 97 2 97 154 64 46 194 121 153 25 50 129 52 15 224 243 204 0 0 160 145 21 17 224 131 243 253 120 206 14 174 206 206 54 142 182 14 95 45 234 191 6 255 34 98 98 227 254 229 207 171 112 64 0 0 225 116 126 209 254 44 47 179 26 128 59 6 128 109 254 162 37 238 4 104 94 11 160 117 247 139 102 178 15 64 181 0 160 233 218 87 243 112 248 126 60 60 69 161 144 185 217 217 229 228 228 216 74 196 66 91 97 202 87 125 254 103 194 95 192 87 253 108 249 126 60 252 247 245 224 190 226 36 129 50 93 129 71 4 248 224 194 204 244 76 165 28 207 146 9 132 98 220 230 143 71 252 183 11 255 252 29 211 34 196 73 98 185 88 42 20 227 81 18 113 142 68 154 140 243 50 165 34 137 66 146 41 197 37 210 255 100 226 223 44 251 3 62 223 53 0 176 106 62 1 123 145 45 168 93 99 3 246 75 39 16 88 116 192 226 247 0 0 242 187 111 193 212 40 8 3 128 104 131 225 207 119 255 239 63 253 71 160 37 0 128 102 73 146 113 0 0 94 68 36 46 84 202 179 63 199 8 0 0 68 160 129 42 176 65 27 244 193 24 44 192 6 28 193 5 220 193 11 252 96 54 132 66 36 196 194 66 16 66 10 100 128 28 114 96 41 172 130 66 40 134 205 176 29 42 96 47 212 64 29 52 192 81 104 134 147 112 14 46 194 85 184 14 61 112 15 250 97 8 158 193 40 188 129 9 4 65 200 8 19 97 33 218 136 1 98 138 88 35 142 8 23 153 133 248 33 193 72 4 18 139 36 32 201 136 20 81 34 75 145 53 72 49 82 138 84 32 85 72 29 242 61 114 2 57 135 92 70 186 145 59 200 0 50 130 252 134 188 71 49 148 129 178 81 61 212 12 181 67 185 168 55 26 132 70 162 11 208 100 116 49 154 143 22 160 155 208 114 180 26 61 140 54 161 231 208 171 104 15 218 143 62 67 199 48 192 232 24 7 51 196 108 48 46 198 195 66 177 56 44 9 147 99 203 177 34 172 12 171 198 26 176 86 172 3 187 137 245 99 207 177 119 4 18 129 69 192 9 54 4 119 66 32 97 30 65 72 88 76 88 78 216 72 168 32 28 36 52 17 218 9 55 9 3 132 81 194 39 34 147 168 75 180 38 186 17 249 196 24 98 50 49 135 88 72 44 35 214 18 143 19 47 16 123 136 67 196 55 36 18 137 67 50 39 185 144 2 73 177 164 84 210 18 210 70 210 110 82 35 233 44 169 155 52 72 26 35 147 201 218 100 107 178 7 57 148 44 32 43 200 133 228 157 228 195 228 51 228 27 228 33 242 91 10 157 98 64 113 164 248 83 226 40 82 202 106 74 25 229 16 229 52 229 6 101 152 50 65 85 163 154 82 221 168 161 84 17 53 143 90 66 173 161 182 82 175 81 135 168 19 52 117 154 57 205 131 22 73 75 165 173 162 149 211 26 104 23 104 247 105 175 232 116 186 17 221 149 30 78 151 208 87 210 203 233 71 232 151 232 3 244 119 12 13 134 21 131 199 136 103 40 25 155 24 7 24 103 25 119 24 175 152 76 166 25 211 139 25 199 84 48 55 49 235 152 231 153 15 153 111 85 88 42 182 42 124 21 145 202 10 149 74 149 38 149 27 42 47 84 169 170 166 170 222 170 11 85 243 85 203 84 143 169 94 83 125 174 70 85 51 83 227 169 9 212 150 171 85 170 157 80 235 83 27 83 103 169 59 168 135 170 103 168 111 84 63 164 126 89 253 137 6 89 195 76 195 79 67 164 81 160 177 95 227 188 198 32 11 99 25 179 120 44 33 107 13 171 134 117 129 53 196 38 177 205 217 124 118 42 187 152 253 29 187 139 61 170 169 161 57 67 51 74 51 87 179 82 243 148 102 63 7 227 152 113 248 156 116 78 9 231 40 167 151 243 126 138 222 20 239 41 226 41 27 166 52 76 185 49 101 92 107 170 150 151 150 88 171 72 171 81 171 71 235 189 54 174 237 167 157 166 189 69 187 89 251 129 14 65 199 74 39 92 39 71 103 143 206 5 157 231 83 217 83 221 167 10 167 22 77 61 58 245 174 46 170 107 165 27 161 187 68 119 191 110 167 238 152 158 190 94 128 158 76 111 167 222 121 189 231 250 28 125 47 253 84 253 109 250 167 245 71 12 88 6 179 12 36 6 219 12 206 24 60 197 53 113 111 60 29 47 199 219 241 81 67 93 195 64 67 165 97 149 97 151 225 132 145 185 209 60 163 213 70 141 70 15 140 105 198 92 227 36 227 109 198 109 198 163 38 6 38 33 38 75 77 234 77 238 154 82 77 185 166 41 166 59 76 59 76 199 205 204 205 162 205 214 153 53 155 61 49 215 50 231 155 231 155 215 155 223 183 96 90 120 90 44 182 168 182 184 101 73 178 228 90 166 89 238 182 188 110 133 90 57 89 165 88 85 90 93 179 70 173 157 173 37 214 187 173 187 167 17 167 185 78 147 78 171 158 214 103 195 176 241 182 201 182 169 183 25 176 229 216 6 219 174 182 109 182 125 97 103 98 23 103 183 197 174 195 238 147 189 147 125 186 125 141 253 61 7 13 135 217 14 171 29 90 29 126 115 180 114 20 58 86 58 222 154 206 156 238 63 125 197 244 150 233 47 103 88 207 16 207 216 51 227 182 19 203 41 196 105 157 83 155 211 71 103 23 103 185 115 131 243 136 139 137 75 130 203 46 151 62 46 155 27 198 221 200 189 228 74 116 245 113 93 225 122 210 245 157 155 179 155 194 237 168 219 175 238 54 238 105 238 135 220 159 204 52 159 41 158 89 51 115 208 195 200 67 224 81 229 209 63 11 159 149 48 107 223 172 126 79 67 79 129 103 181 231 35 47 99 47 145 87 173 215 176 183 165 119 170 247 97 239 23 62 246 62 114 159 227 62 227 60 55 222 50 222 89 95 204 55 192 183 200 183 203 79 195 111 158 95 133 223 67 127 35 255 100 255 122 255 209 0 167 128 37 1 103 3 137 129 65 129 91 2 251 248 122 124 33 191 142 63 58 219 101 246 178 217 237 65 140 160 185 65 21 65 143 130 173 130 229 193 173 33 104 200 236 144 173 33 247 231 152 206 145 206 105 14 133 80 126 232 214 208 7 97 230 97 139 195 126 12 39 133 135 133 87 134 63 142 112 136 88 26 209 49 151 53 119 209 220 67 115 223 68 250 68 150 68 222 155 103 49 79 57 175 45 74 53 42 62 170 46 106 60 218 55 186 52 186 63 198 46 102 89 204 213 88 157 88 73 108 75 28 57 46 42 174 54 110 108 190 223 252 237 243 135 226 157 226 11 227 123 23 152 47 200 93 112 121 161 206 194 244 133 167 22 169 46 18 44 58 150 64 76 136 78 56 148 240 65 16 42 168 22 140 37 242 19 119 37 142 10 121 194 29 194 103 34 47 209 54 209 136 216 67 92 42 30 78 242 72 42 77 122 146 236 145 188 53 121 36 197 51 165 44 229 185 132 39 169 144 188 76 13 76 221 155 58 158 22 154 118 32 109 50 61 58 189 49 131 146 145 144 113 66 170 33 77 147 182 103 234 103 230 102 118 203 172 101 133 178 254 197 110 139 183 47 30 149 7 201 107 179 144 172 5 89 45 10 182 66 166 232 84 90 40 215 42 7 178 103 101 87 102 191 205 137 202 57 150 171 158 43 205 237 204 179 202 219 144 55 156 239 159 255 237 18 194 18 225 146 182 165 134 75 87 45 29 88 230 189 172 106 57 178 60 113 121 219 10 227 21 5 43 134 86 6 172 60 184 138 182 42 109 213 79 171 237 87 151 174 126 189 38 122 77 107 129 94 193 202 130 193 181 1 107 235 11 85 10 229 133 125 235 220 215 237 93 79 88 47 89 223 181 97 250 134 157 27 62 21 137 138 174 20 219 23 151 21 127 216 40 220 120 229 27 135 111 202 191 153 220 148 180 169 171 196 185 100 207 102 210 102 233 230 222 45 158 91 14 150 170 151 230 151 14 110 13 217 218 180 13 223 86 180 237 245 246 69 219 47 151 205 40 219 187 131 182 67 185 163 191 60 184 188 101 167 201 206 205 59 63 84 164 84 244 84 250 84 54 238 210 221 181 97 215 248 110 209 238 27 123 188 246 52 236 213 219 91 188 247 253 62 201 190 219 85 1 85 77 213 102 213 101 251 73 251 179 247 63 174 137 170 233 248 150 251 109 93 173 78 109 113 237 199 3 210 3 253 7 35 14 182 215 185 212 213 29 210 61 84 82 143 214 43 235 71 14 199 31 190 254 157 239 119 45 13 54 13 85 141 156 198 226 35 112 68 121 228 233 247 9 223 247 30 13 58 218 118 140 123 172 225 7 211 31 118 29 103 29 47 106 66 154 242 154 70 155 83 154 251 91 98 91 186 79 204 62 209 214 234 222 122 252 71 219 31 15 156 52 60 89 121 74 243 84 201 105 218 233 130 211 147 103 242 207 140 157 149 157 125 126 46 249 220 96 219 162 182 123 231 99 206 223 106 15 111 239 186 16 116 225 210 69 255 139 231 59 188 59 206 92 242 184 116 242 178 219 229 19 87 184 87 154 175 58 95 109 234 116 234 60 254 147 211 79 199 187 156 187 154 174 185 92 107 185 238 122 189 181 123 102 247 233 27 158 55 206 221 244 189 121 241 22 255 214 213 158 57 61 221 189 243 122 111 247 197 247 245 223 22 221 126 114 39 253 206 203 187 217 119 39 238 173 188 79 188 95 244 64 237 65 217 67 221 135 213 63 91 254 220 216 239 220 127 106 192 119 160 243 209 220 71 247 6 133 131 207 254 145 245 143 15 67 5 143 153 143 203 134 13 134 235 158 56 62 57 57 226 63 114 253 233 252 167 67 207 100 207 38 158 23 254 162 254 203 174 23 22 47 126 248 213 235 215 206 209 152 209 161 151 242 151 147 191 109 124 165 253 234 192 235 25 175 219 198 194 198 30 190 201 120 51 49 94 244 86 251 237 193 119 220 119 29 239 163 223 15 79 228 124 32 127 40 255 104 249 177 245 83 208 167 251 147 25 147 147 255 4 3 152 243 252 99 51 45 219 0 0 0 4 103 65 77 65 0 0 177 142 124 251 81 147 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 233 0 0 117 48 0 0 234 96 0 0 58 152 0 0 23 111 146 95 197 70 0 0 46 180 73 68 65 84 120 218 236 125 107 172 101 217 81 222 87 181 246 62 231 222 238 30 123 186 103 198 177 199 158 9 54 35 98 65 64 4 176 8 34 82 226 33 65 67 72 48 49 144 4 34 18 148 32 146 8 248 225 72 40 249 21 69 81 254 68 68 113 126 128 120 38 74 66 36 248 3 34 138 20 27 48 56 249 145 72 193 150 209 56 96 32 194 175 25 207 179 123 186 251 222 190 143 115 246 94 171 42 63 170 214 218 107 239 179 207 237 238 153 185 246 61 242 220 214 233 243 126 172 85 175 175 30 171 138 84 21 111 252 125 249 254 241 27 91 240 6 3 188 241 247 6 3 188 241 247 6 3 188 241 247 101 249 215 188 222 31 184 250 233 199 176 96 1 183 167 248 235 255 243 135 112 117 177 66 203 9 180 229 245 170 10 17 65 74 233 231 98 140 239 23 213 135 137 8 77 8 191 22 66 248 177 16 194 11 68 243 239 86 0 189 4 220 234 246 240 223 254 226 127 132 244 251 232 132 129 173 223 246 90 255 244 190 215 150 82 122 91 74 233 167 98 74 239 87 85 48 209 141 166 105 126 45 132 240 15 153 25 247 187 182 189 31 125 246 98 51 64 254 241 0 33 129 32 74 78 16 221 182 65 111 237 250 254 133 54 4 124 231 83 79 97 255 242 37 16 19 126 243 183 62 242 254 91 183 110 191 127 185 88 124 127 211 52 191 178 109 163 68 1 129 125 199 23 195 159 201 107 19 16 228 140 47 84 85 196 24 255 246 186 235 126 249 234 213 7 241 237 127 229 47 67 69 113 122 124 242 240 111 126 228 35 63 178 238 186 31 89 180 237 219 66 8 47 206 175 205 246 46 157 243 218 206 135 1 148 0 97 172 83 131 46 4 52 44 8 164 35 73 201 146 223 247 253 11 79 188 243 157 248 137 127 242 1 52 109 11 17 1 17 225 187 190 227 175 226 63 253 210 47 225 183 126 231 163 191 76 68 159 10 33 124 114 186 81 162 132 168 1 235 212 0 202 246 189 231 205 0 74 128 218 218 98 19 208 170 173 109 134 177 191 174 235 186 95 254 246 39 223 139 191 247 131 63 136 117 215 65 85 193 204 248 174 191 246 157 248 201 127 251 65 124 250 179 159 125 129 136 104 170 9 20 64 82 66 39 190 54 57 191 181 209 235 29 7 88 253 244 227 96 40 22 33 2 237 10 79 125 244 31 224 193 118 141 189 16 17 72 10 19 184 132 252 250 165 75 251 239 251 167 31 248 0 14 143 142 241 236 115 47 224 149 155 175 224 202 165 203 120 251 59 30 197 227 111 127 20 63 245 179 63 131 103 190 240 252 173 182 105 174 49 243 134 138 60 236 151 248 245 247 254 7 96 189 143 46 181 16 156 47 19 216 218 122 96 121 138 239 254 232 223 199 155 218 245 134 25 16 17 244 49 222 124 252 29 143 94 253 177 127 244 143 241 204 115 207 227 185 47 60 143 163 147 99 60 116 237 33 60 246 246 183 225 77 87 46 227 95 127 240 131 56 57 57 253 175 77 211 124 119 102 0 35 62 99 149 26 220 238 151 248 240 123 255 61 208 239 161 75 13 4 132 189 31 125 230 226 107 0 113 226 180 113 137 15 63 249 139 120 234 119 126 24 15 2 35 38 80 0 162 250 190 119 63 241 4 62 247 220 243 248 244 103 62 11 85 128 8 184 121 112 128 155 135 7 120 233 229 235 120 207 55 124 35 62 247 204 23 174 2 104 1 244 245 38 173 83 192 81 108 129 216 34 105 248 162 153 128 164 1 33 182 56 138 45 150 28 193 164 35 230 6 208 138 200 213 247 124 195 55 226 99 191 247 52 94 190 113 3 240 181 189 240 210 75 120 241 229 151 240 149 239 122 39 222 253 196 19 248 248 211 159 124 159 86 70 114 68 252 39 127 17 232 247 208 75 128 236 150 23 64 72 74 232 83 3 244 123 248 240 147 191 136 219 253 18 171 212 32 41 67 213 86 75 0 98 74 248 204 231 159 65 159 18 122 73 232 83 66 244 235 23 175 223 192 193 225 97 222 216 175 158 74 200 65 92 226 35 223 246 11 64 106 145 132 161 248 34 152 0 16 146 48 144 90 124 228 219 126 1 7 177 90 215 240 178 175 38 0 7 135 135 120 241 250 141 209 154 242 26 63 243 249 103 16 147 107 14 5 84 183 16 63 53 72 5 71 237 148 27 120 22 19 12 139 185 115 116 132 117 215 33 198 136 216 247 232 253 146 98 68 140 61 110 30 28 100 251 152 102 55 41 46 207 85 66 206 210 112 112 13 183 193 220 64 34 34 220 60 56 64 140 182 150 188 174 216 247 136 49 98 221 117 184 115 116 84 62 51 41 125 209 137 255 69 136 3 108 97 2 105 145 192 0 49 214 93 135 36 178 113 137 41 33 137 96 189 94 59 3 208 151 108 147 238 159 185 9 68 132 245 122 61 90 203 244 178 238 58 128 24 9 140 149 180 95 146 117 241 151 114 179 4 132 62 38 196 62 33 198 249 75 215 167 252 25 186 146 139 64 252 187 49 119 131 164 164 0 161 59 99 93 177 79 232 99 130 224 75 203 212 231 200 0 90 93 224 155 21 128 206 22 122 24 151 232 165 65 18 69 74 178 113 17 191 142 190 73 107 105 250 3 223 104 116 203 106 147 166 223 245 122 95 238 143 9 14 250 61 172 165 233 5 100 146 95 173 101 227 34 138 94 26 28 198 47 29 83 191 254 12 160 10 168 0 146 54 46 41 9 250 72 192 58 224 67 79 254 12 214 41 160 239 109 35 100 114 73 10 36 1 98 138 136 202 184 211 55 55 63 244 222 159 5 214 13 250 72 72 105 254 59 182 95 228 213 93 52 249 69 182 92 212 8 25 25 232 22 248 208 123 127 30 119 250 246 102 212 128 24 35 146 0 73 177 185 62 81 244 81 177 150 6 31 122 242 231 128 110 129 62 50 146 84 123 88 125 71 65 206 23 62 16 164 73 53 117 128 244 182 241 229 71 147 163 35 69 96 5 163 67 76 130 85 215 227 206 106 109 246 112 180 64 194 162 109 113 180 234 209 69 194 207 127 253 175 94 199 73 68 140 43 36 161 45 136 159 238 34 56 116 87 137 30 94 226 55 40 75 227 217 159 157 0 80 18 52 66 248 249 63 247 235 248 241 223 123 10 71 167 29 104 111 133 62 198 209 218 152 25 109 211 98 213 71 196 4 160 135 106 47 72 41 65 145 102 126 19 129 152 179 188 210 133 102 0 77 29 194 59 254 2 248 177 111 5 226 122 172 74 213 200 198 65 129 125 64 126 251 25 36 109 64 33 96 185 104 49 10 74 17 129 57 120 158 32 34 125 213 223 2 222 18 64 61 33 200 248 51 71 102 64 49 121 110 230 118 246 187 242 109 113 159 20 10 104 69 104 98 104 234 128 245 129 107 1 76 62 99 242 93 4 160 141 72 55 205 180 137 2 161 105 64 76 213 247 1 68 4 10 1 73 4 34 10 60 246 30 96 213 128 133 109 15 180 50 163 100 175 215 131 235 208 147 151 119 64 3 72 15 126 199 183 160 249 230 159 0 210 186 218 108 191 38 5 88 1 110 129 244 195 32 186 140 229 162 133 36 154 101 0 102 130 166 8 254 170 191 1 188 235 113 132 117 2 107 26 127 38 42 85 9 87 159 144 97 211 37 85 106 212 95 11 133 142 222 3 251 109 153 250 171 67 232 250 21 96 117 88 165 50 4 16 133 108 48 149 128 33 160 70 128 54 65 23 167 80 185 9 102 198 98 209 66 132 55 24 128 67 3 2 25 243 253 217 175 1 29 55 104 5 80 169 127 167 255 26 102 244 127 164 144 227 93 96 0 21 160 63 6 250 67 244 31 251 119 182 161 21 177 72 5 77 67 192 101 203 218 17 128 182 109 144 8 27 12 16 66 0 115 3 5 16 255 224 87 128 151 9 177 79 38 53 35 6 152 50 68 69 28 77 195 227 254 24 213 210 79 89 1 48 160 17 114 252 50 244 149 63 52 237 69 92 84 240 89 102 132 26 69 106 128 192 2 222 19 232 209 67 80 250 14 48 183 182 182 180 169 1 66 211 154 100 107 0 62 243 83 192 106 9 77 108 26 168 252 60 51 117 202 128 188 114 249 92 200 117 62 201 160 20 161 253 41 72 18 192 97 96 2 170 128 162 36 40 49 152 24 77 179 0 129 102 24 160 1 179 197 11 148 42 245 153 225 171 168 95 179 105 149 17 88 210 10 231 250 125 54 41 22 205 8 130 0 10 32 141 208 91 159 131 220 254 12 160 2 226 0 180 87 38 132 159 89 39 17 152 5 104 9 68 98 187 185 232 161 77 11 128 193 193 215 70 113 134 1 22 96 98 0 1 88 4 32 182 32 103 56 5 141 224 16 49 129 40 64 207 1 179 159 11 3 64 163 169 127 77 40 152 134 212 224 48 196 24 33 3 57 50 176 23 1 83 201 19 41 225 38 216 235 68 92 58 100 34 233 24 212 125 205 0 35 236 169 110 174 61 153 155 37 91 5 122 235 211 144 131 207 129 68 64 220 12 82 127 22 220 242 207 230 160 64 211 128 130 0 161 1 55 9 104 2 40 16 84 9 28 2 22 109 187 161 221 136 24 77 107 76 162 42 64 0 208 80 249 238 146 252 85 99 94 101 61 15 252 119 94 12 64 230 1 244 167 64 234 77 50 179 6 208 148 243 184 64 4 46 239 5 196 62 98 177 92 128 25 144 148 70 72 57 180 11 104 18 36 37 92 105 147 155 119 7 109 35 245 62 5 101 226 36 87 99 156 122 227 136 108 227 143 158 131 188 242 105 144 116 198 16 161 157 81 247 119 113 160 3 64 193 178 60 20 20 26 8 32 197 149 189 206 194 194 73 176 88 46 144 216 50 132 229 173 33 160 105 23 232 251 132 203 203 30 8 10 4 113 131 152 249 139 125 125 108 140 70 231 19 23 120 253 25 128 8 144 8 244 43 119 3 225 46 219 0 110 68 21 156 128 111 120 188 193 239 126 250 16 235 211 83 92 190 114 5 41 185 170 36 66 224 128 4 197 75 207 191 136 189 5 227 145 135 34 176 130 105 145 145 189 31 46 58 53 1 58 65 232 68 192 234 0 233 198 31 129 186 99 83 245 220 220 31 225 53 91 14 53 201 101 128 242 53 41 16 24 15 63 124 3 251 109 194 139 47 188 140 119 127 237 215 160 13 1 41 3 81 55 109 71 71 167 184 117 235 24 127 254 137 151 236 51 217 181 35 0 18 255 79 25 160 4 13 231 18 2 56 175 72 32 1 146 32 233 4 170 17 42 209 76 130 228 216 64 132 166 8 244 61 190 255 27 3 86 169 193 39 62 246 113 72 82 236 95 186 140 189 75 151 176 127 233 50 56 180 248 212 211 159 196 205 163 53 126 224 235 21 232 34 36 245 80 201 129 153 104 159 175 17 42 245 227 126 169 239 147 105 11 125 229 255 65 158 255 56 40 174 76 226 41 24 225 239 83 186 10 193 179 106 246 107 229 236 46 4 252 192 215 253 62 110 221 17 124 234 233 223 7 135 133 175 237 50 246 47 93 129 36 224 19 255 231 19 56 141 123 248 59 223 242 52 64 151 128 112 9 104 246 237 210 238 1 188 112 6 83 16 39 231 10 236 16 6 136 43 211 4 148 125 235 193 69 83 151 210 119 189 69 241 207 159 10 248 151 191 113 7 191 241 223 63 132 63 253 21 143 225 202 229 43 232 250 30 207 124 254 243 184 121 184 194 83 239 38 124 223 55 173 129 53 65 228 44 41 175 93 191 202 157 3 3 235 219 72 215 255 16 36 189 171 122 246 167 239 83 173 234 128 41 136 199 76 96 215 10 33 128 17 240 189 223 252 187 120 225 248 50 62 244 7 192 245 151 127 11 143 63 254 24 218 182 193 209 241 49 158 249 236 115 56 60 13 248 87 223 251 191 240 248 59 15 129 254 65 32 132 49 96 85 177 253 67 4 184 51 38 85 221 33 19 144 220 4 144 219 47 25 192 155 66 17 163 162 73 138 111 253 42 197 79 46 20 255 230 127 40 254 239 31 63 131 0 133 128 176 191 0 126 232 155 4 127 243 61 107 96 13 196 168 94 95 56 99 2 70 215 14 20 201 116 179 222 250 19 232 157 231 12 224 113 83 69 246 94 229 242 2 138 100 90 84 107 32 126 193 1 74 64 90 224 199 159 250 109 60 250 230 67 252 151 143 125 61 62 241 244 51 32 24 158 121 235 131 29 254 197 247 125 28 95 243 238 235 64 188 106 76 25 50 248 212 42 20 28 1 237 141 57 136 119 69 3 152 9 64 127 226 11 224 138 123 181 10 194 40 162 42 26 81 124 221 163 130 255 252 119 35 78 143 20 207 31 2 87 90 197 159 122 36 89 253 207 74 17 83 198 125 50 6 127 5 92 234 56 18 200 12 164 83 147 250 172 238 193 175 13 72 85 210 143 28 30 24 49 129 121 58 148 181 128 50 208 47 241 61 223 250 49 124 207 95 250 223 184 117 253 17 28 118 87 240 246 135 215 104 174 69 64 47 3 242 102 128 22 64 51 193 33 57 7 144 205 103 211 24 35 236 68 46 160 184 129 110 2 242 198 207 32 246 172 9 128 132 16 21 251 141 226 43 175 185 219 118 98 161 84 73 166 49 230 3 61 147 232 31 185 136 174 14 144 110 252 177 3 254 215 46 245 163 24 80 112 176 87 155 128 18 221 204 23 242 192 34 3 253 2 144 6 87 175 173 113 181 101 32 236 1 253 3 0 22 64 88 26 113 201 37 156 28 7 82 78 70 69 11 114 113 3 208 193 142 48 0 17 84 18 52 102 19 144 253 247 25 196 94 93 75 82 163 83 229 226 233 86 41 159 185 118 163 172 39 215 161 55 63 51 248 244 175 198 214 111 93 154 14 121 161 234 54 138 244 251 117 102 144 82 45 188 7 96 31 208 61 0 75 187 221 180 22 14 15 217 52 213 38 32 103 58 163 9 14 7 0 135 187 162 1 200 252 255 236 6 58 17 180 168 111 108 37 164 202 221 164 124 162 250 11 241 237 190 222 250 52 116 117 115 216 208 215 203 119 214 33 33 56 16 124 184 77 89 3 80 229 21 20 165 19 0 222 3 120 105 215 180 7 52 75 160 89 184 237 111 199 191 183 78 167 167 222 180 105 198 0 138 29 49 1 72 64 90 65 213 77 128 226 236 56 253 189 74 121 201 194 201 36 14 192 208 195 103 160 171 91 247 239 215 223 167 211 92 36 191 220 174 53 129 150 231 137 197 180 31 239 185 164 47 236 146 137 223 184 9 8 89 11 132 65 3 100 245 207 193 92 103 230 1 127 236 132 23 144 34 52 158 150 236 153 173 107 11 65 239 85 202 231 174 93 194 244 246 179 208 238 246 176 137 231 65 252 90 3 76 243 66 164 163 178 129 226 179 19 15 42 190 92 130 19 125 9 52 123 131 38 224 48 104 0 17 35 60 49 12 81 242 14 69 2 225 110 96 92 121 252 94 135 52 235 171 150 242 84 185 120 25 20 26 218 151 59 207 130 186 67 247 207 232 220 54 106 202 227 155 245 34 58 228 60 64 0 37 128 156 224 28 252 118 99 12 17 90 195 0 141 107 132 182 102 128 236 70 59 209 35 204 69 60 167 72 224 249 48 0 82 21 8 98 7 118 178 225 10 142 205 193 150 235 202 99 40 239 203 52 62 186 1 90 31 110 73 219 158 19 209 71 196 6 192 50 196 83 51 240 99 215 0 35 169 247 219 77 38 254 18 104 23 192 194 205 64 29 232 105 150 206 0 174 77 136 0 222 17 13 96 72 62 129 210 202 82 184 83 123 93 71 179 102 115 250 24 164 92 116 136 32 230 219 217 164 116 71 208 213 43 149 228 159 143 141 28 171 251 108 243 117 8 211 18 160 172 160 198 67 182 158 216 65 16 59 203 212 16 176 96 160 13 230 242 45 90 96 177 240 203 158 93 56 140 247 133 8 80 15 14 69 19 0 226 112 46 101 162 175 59 3 4 82 208 250 0 116 248 44 120 117 115 80 221 152 20 54 22 45 80 73 120 197 20 84 94 131 25 239 65 160 199 55 198 103 102 207 251 92 152 0 28 213 126 82 7 48 171 21 106 176 130 89 33 12 128 3 152 20 154 65 27 19 192 61 16 142 45 156 203 119 6 19 16 90 99 8 143 83 144 78 152 45 215 76 164 4 162 8 58 61 65 224 116 241 25 160 197 49 112 251 15 128 155 79 111 19 163 45 15 211 221 196 111 252 218 81 112 135 238 67 138 95 189 99 179 225 26 2 64 125 106 87 39 95 163 29 128 227 237 184 71 239 194 185 68 150 34 102 66 219 4 15 23 95 112 6 248 57 253 103 184 122 237 205 184 246 230 55 35 246 113 16 159 140 15 243 246 136 253 231 181 33 254 95 77 43 47 215 194 248 35 6 77 129 13 181 175 115 4 42 55 117 36 205 163 231 104 252 156 158 21 16 208 233 199 43 68 206 226 57 245 143 213 141 239 222 252 237 58 251 229 123 203 5 238 156 156 226 248 228 20 63 114 209 25 224 165 230 9 240 254 195 216 127 240 97 116 235 110 178 94 157 93 118 109 2 180 168 126 154 217 236 106 171 70 52 83 140 233 104 84 148 161 240 171 152 29 25 125 18 141 40 158 95 45 213 235 71 223 42 4 144 204 181 186 152 167 157 232 60 51 233 132 153 55 248 107 188 67 151 246 246 112 160 119 112 59 30 93 124 13 112 101 33 184 188 84 60 176 20 172 74 226 103 186 248 97 233 82 8 167 147 141 168 55 95 70 234 86 32 21 177 105 194 56 245 99 3 85 164 34 249 64 128 52 178 11 214 241 35 13 108 83 222 43 245 79 223 170 102 104 42 224 80 195 173 35 125 80 221 43 230 67 38 12 48 172 73 85 113 101 41 72 107 69 92 200 197 103 128 229 34 96 111 17 176 183 104 173 48 68 6 85 61 218 32 173 238 235 184 9 138 104 173 58 1 72 112 83 145 41 18 70 30 95 33 174 142 79 9 147 239 168 140 217 164 180 118 33 84 165 54 146 173 80 112 165 80 127 82 24 25 119 154 1 136 32 197 168 248 172 124 158 51 157 56 227 18 155 102 18 169 224 67 152 48 62 141 180 230 222 178 197 222 162 193 114 177 3 85 193 109 211 98 217 182 216 107 91 72 74 166 158 39 245 155 128 150 18 1 194 176 121 245 102 106 13 29 154 202 134 186 107 44 19 251 111 121 164 97 243 72 252 237 100 181 118 82 127 94 198 22 117 147 159 128 81 213 13 229 173 145 186 191 17 97 202 26 69 89 76 30 36 29 94 71 208 129 233 168 54 89 195 107 84 196 65 159 127 109 117 248 101 217 182 88 180 45 218 208 94 124 6 184 124 229 18 174 92 190 132 7 30 184 2 14 52 118 251 39 198 91 71 24 96 11 208 210 25 24 55 49 35 115 239 31 91 29 221 84 221 243 120 107 75 59 171 109 102 124 22 164 204 175 75 167 216 69 171 194 230 193 21 158 238 145 8 240 192 149 43 232 83 196 58 197 139 207 0 143 92 187 134 183 62 242 48 222 254 150 135 112 112 124 169 112 250 116 211 164 216 76 29 5 247 236 185 193 18 74 181 33 83 19 50 102 128 105 163 166 225 187 6 59 92 17 97 227 168 223 93 106 192 39 44 66 219 28 11 29 155 186 44 229 58 5 193 249 247 107 205 12 94 203 172 82 74 225 21 192 181 55 63 128 166 109 64 187 160 1 36 9 82 20 68 17 196 24 139 59 55 128 123 50 91 40 131 175 171 181 31 69 24 206 1 20 220 87 221 47 156 80 1 42 2 68 104 192 239 5 220 219 141 141 118 110 12 112 170 202 175 139 11 177 137 218 25 180 221 157 172 60 90 146 202 190 100 223 68 134 251 89 197 231 181 74 190 77 0 73 102 0 95 147 18 20 9 2 43 39 151 52 52 149 184 240 12 160 80 8 4 170 118 240 145 242 161 8 29 171 66 25 133 125 49 58 232 81 71 5 117 82 65 132 25 169 113 177 25 107 135 58 114 232 41 99 218 240 245 105 82 109 75 27 122 64 161 219 77 130 14 82 94 171 122 169 93 210 252 92 174 89 32 242 136 178 250 209 48 123 76 75 161 140 99 32 165 225 76 67 126 157 238 74 73 24 114 226 175 194 223 58 227 205 79 227 2 186 105 235 235 237 87 157 139 31 184 163 88 20 205 24 243 27 233 7 226 151 199 104 20 77 218 56 21 158 205 20 111 193 5 163 158 135 25 188 105 165 83 156 208 90 121 63 165 101 102 214 106 94 204 82 206 164 250 253 178 87 196 128 8 248 28 147 92 231 198 0 64 230 218 178 23 19 0 56 111 203 167 1 18 213 57 130 79 137 174 3 145 38 13 21 115 18 77 103 30 171 37 62 235 1 174 210 21 92 167 125 103 116 67 29 64 210 74 253 23 204 67 195 251 66 150 254 233 154 81 113 5 213 7 148 77 247 16 43 200 255 237 22 3 232 56 170 167 19 245 176 77 202 107 162 110 151 242 41 209 167 108 85 73 181 210 230 201 176 137 93 87 76 78 200 48 141 52 198 166 211 207 168 51 144 178 161 21 104 67 83 213 15 81 150 8 26 246 162 24 1 103 6 34 128 85 145 148 207 181 145 207 249 153 0 248 1 144 108 251 70 126 254 118 41 39 29 3 174 89 41 159 16 125 116 52 144 134 253 202 176 142 51 6 216 146 116 26 206 93 210 6 170 167 73 0 72 38 212 96 15 39 213 10 46 7 172 72 13 150 146 31 142 49 218 106 69 124 63 237 92 215 203 228 245 16 160 204 8 16 4 58 63 38 56 119 19 176 33 229 116 150 106 191 55 41 215 45 30 26 207 72 60 83 141 229 103 206 246 207 49 5 77 247 155 198 49 193 25 1 71 38 52 128 80 233 176 48 49 17 6 250 92 226 149 138 228 199 222 27 86 144 85 72 119 201 206 6 136 40 250 148 172 106 122 183 24 0 195 49 46 162 49 193 183 18 253 238 82 190 17 112 17 43 200 96 240 196 0 140 225 157 18 153 171 230 253 134 105 228 178 13 111 160 41 58 152 219 245 17 162 195 166 23 65 10 8 129 61 226 104 101 126 9 41 183 198 215 161 75 88 76 9 234 177 3 45 101 111 118 91 161 214 103 48 38 164 148 176 35 199 195 49 105 223 51 35 229 82 111 246 118 91 190 201 51 227 228 78 62 240 203 35 121 149 65 226 105 28 83 7 243 4 237 187 61 167 129 89 238 126 140 96 172 30 136 41 183 116 176 83 239 41 33 70 129 104 218 32 112 214 243 53 4 104 152 13 28 138 152 59 40 102 58 137 200 194 208 106 199 201 235 70 217 59 161 1 168 0 28 218 148 114 194 12 129 207 144 114 221 12 196 140 84 122 13 178 242 25 186 169 112 87 113 246 129 202 84 76 192 188 167 69 163 245 212 45 221 73 129 46 37 72 37 161 234 156 68 21 211 53 204 229 113 11 252 48 212 91 226 103 141 164 0 16 130 73 189 223 87 85 8 9 40 16 66 160 115 43 119 60 167 129 17 166 154 83 225 252 87 39 229 115 49 247 90 205 215 140 164 3 54 47 2 79 180 137 201 149 42 68 48 33 106 77 120 174 208 33 195 250 18 38 77 232 98 44 82 141 236 230 17 129 26 255 84 209 145 70 49 44 148 1 132 19 57 88 13 160 134 48 180 171 113 166 208 140 19 0 99 14 127 252 222 179 20 23 128 1 120 132 193 181 242 205 239 79 202 231 170 111 106 146 170 127 52 187 86 158 35 230 200 20 56 241 139 212 143 180 135 189 134 221 5 20 5 36 38 196 20 209 197 52 248 240 0 152 102 60 138 210 209 107 10 23 6 141 7 117 34 235 0 8 41 123 73 153 25 42 70 128 8 132 168 104 47 221 21 13 32 126 32 84 197 144 177 210 171 147 242 185 199 20 64 160 121 69 61 178 4 68 181 166 31 108 60 141 109 61 185 201 96 2 98 76 88 247 130 46 246 38 225 204 3 193 253 122 28 172 217 130 23 116 51 184 172 162 0 133 129 33 230 152 1 216 96 132 134 25 156 207 12 236 14 6 240 196 141 7 129 232 44 41 159 35 250 108 121 149 217 75 158 145 252 233 107 10 67 80 29 193 163 145 73 32 63 193 219 199 104 173 234 147 122 13 190 141 111 97 114 104 201 108 4 231 10 127 220 13 144 141 226 196 222 246 37 56 160 3 65 69 161 179 204 48 102 4 242 131 53 76 59 134 1 184 242 121 239 46 229 91 136 190 17 46 221 12 134 78 37 95 157 65 70 187 229 76 192 140 18 145 236 99 66 92 39 196 36 174 246 51 154 111 70 102 96 232 6 226 174 227 180 73 195 89 84 41 29 201 194 224 18 251 33 89 10 228 71 10 173 73 97 97 6 247 109 234 36 81 54 1 216 173 80 48 111 196 244 239 73 202 39 68 87 151 106 139 136 249 219 60 114 198 76 27 68 224 218 189 163 224 103 42 141 41 214 93 180 137 29 49 154 116 179 51 5 219 43 72 141 9 10 209 105 66 244 145 23 49 195 140 211 14 46 68 227 36 23 101 23 48 20 102 128 10 144 153 65 0 165 224 45 117 140 165 217 177 0 237 154 6 200 122 57 103 211 238 89 202 177 153 52 218 92 185 150 108 142 194 242 240 202 92 50 102 86 71 111 249 191 36 138 245 122 133 62 217 41 101 98 66 19 26 48 91 63 1 107 206 69 198 76 236 97 99 226 77 162 251 245 240 83 52 251 9 103 42 4 173 106 208 106 91 63 101 6 193 160 21 196 203 221 200 1 171 130 17 2 219 186 118 231 120 120 54 153 122 111 82 126 70 170 152 136 188 117 18 149 0 202 56 113 195 131 251 231 140 209 117 61 186 152 172 239 32 91 55 82 38 130 141 103 179 88 1 185 132 17 15 18 207 126 70 127 147 232 78 240 172 37 48 141 47 85 57 4 209 193 197 244 44 129 230 186 8 12 192 79 105 72 7 7 205 174 159 128 3 129 116 48 1 68 134 1 64 186 75 38 160 110 147 114 119 41 159 214 3 204 162 106 178 230 81 245 9 57 46 104 159 144 84 176 58 93 163 143 9 156 153 130 25 196 140 80 169 81 37 243 235 109 83 253 253 69 221 215 234 182 38 58 151 168 223 80 75 64 179 82 159 153 33 71 65 69 1 14 100 189 17 17 70 204 144 53 67 206 19 100 194 59 187 3 154 49 0 102 53 206 197 207 5 136 66 51 35 204 17 93 245 44 15 170 168 189 156 223 201 54 222 136 64 32 48 250 190 199 105 223 35 166 132 16 2 66 246 20 124 24 227 64 124 83 185 92 108 189 73 125 246 185 67 77 120 229 17 209 235 104 33 141 162 131 116 118 48 12 150 15 80 40 88 45 237 163 197 229 11 238 26 14 90 161 142 246 11 4 196 4 22 55 73 116 102 109 210 69 99 0 42 110 160 42 79 18 60 58 79 240 186 18 214 9 60 228 222 199 65 29 118 53 191 90 247 190 81 140 134 25 161 184 108 38 225 156 137 207 198 44 228 42 191 72 189 63 207 158 201 179 215 112 37 233 99 162 103 130 211 61 32 178 50 8 82 21 57 231 71 32 168 151 123 137 170 87 77 103 92 32 8 160 98 26 130 146 79 81 85 215 114 59 164 1 178 180 234 180 3 248 22 162 111 47 183 226 242 97 193 83 46 235 117 135 211 46 186 138 183 224 76 96 54 251 238 56 128 54 136 63 85 249 99 169 39 140 205 0 51 109 39 122 150 232 42 239 64 179 107 19 175 5 160 146 247 175 153 129 189 14 176 212 146 34 120 220 212 88 37 85 38 137 207 177 245 193 249 104 0 242 206 215 222 176 113 116 214 101 11 209 117 58 80 65 135 128 127 80 194 201 186 199 73 223 89 143 102 87 239 204 131 20 23 224 246 170 136 79 213 102 211 8 15 12 177 4 117 240 56 19 15 64 77 224 252 64 240 160 85 142 132 14 181 113 249 181 80 160 97 66 42 13 178 220 11 100 51 67 185 156 220 192 43 223 147 230 185 56 217 192 156 178 85 221 26 199 62 171 202 85 93 93 155 170 239 12 12 1 195 20 17 87 141 153 216 80 11 216 112 109 243 93 237 215 196 31 222 147 109 189 75 188 131 201 154 240 74 90 194 192 181 134 216 102 6 70 217 194 92 246 205 92 214 89 138 65 68 161 185 235 151 42 88 21 26 172 234 87 146 122 86 80 193 28 64 137 208 52 13 154 198 52 221 238 128 64 30 92 153 187 17 188 126 156 217 80 250 186 239 113 178 90 59 209 185 32 254 92 168 57 16 134 134 40 224 8 237 243 96 195 137 102 24 128 29 224 85 76 148 9 71 112 13 49 79 116 242 32 15 207 184 1 42 130 152 20 170 209 70 198 169 66 69 172 24 36 9 68 44 147 24 69 32 94 241 163 201 167 137 169 88 193 136 36 159 149 100 174 161 166 132 207 62 243 60 158 123 233 229 29 194 0 190 121 230 254 220 93 250 85 129 192 132 148 20 135 171 19 164 148 16 28 216 101 226 242 132 144 133 248 174 210 185 114 245 130 214 128 111 74 252 249 251 89 83 48 198 239 27 39 151 168 48 222 220 186 59 17 196 216 163 105 154 114 254 81 146 32 234 64 84 73 22 134 22 21 72 180 194 17 168 32 38 65 18 203 75 164 190 71 159 4 251 251 123 120 254 165 27 184 125 120 7 235 117 183 59 24 128 220 13 228 64 91 165 191 148 191 147 153 137 163 211 53 186 206 26 75 133 224 209 189 18 8 66 33 210 128 208 253 249 145 189 54 13 146 165 59 219 252 162 246 115 178 135 199 42 127 144 250 25 194 79 136 62 85 245 163 219 125 68 104 90 188 237 45 15 189 234 237 75 201 166 138 118 189 205 79 78 73 240 103 158 248 10 124 225 197 235 187 102 2 196 78 184 108 120 122 117 180 140 176 138 9 119 142 79 109 74 8 145 247 125 178 89 121 153 120 83 112 198 85 142 124 106 247 115 228 140 136 43 192 167 96 10 179 196 183 38 92 51 218 101 242 189 227 235 193 223 231 146 109 52 53 30 227 253 31 225 82 85 31 163 219 27 241 99 180 1 218 94 136 242 252 139 55 112 120 116 188 59 38 32 111 208 80 135 57 46 3 39 178 254 255 135 199 39 232 83 44 118 222 210 185 90 54 126 78 250 67 45 237 85 200 54 219 253 58 207 95 208 190 14 54 127 74 252 66 108 247 46 8 155 166 99 96 216 218 27 152 30 66 49 48 154 210 253 53 115 138 146 231 39 71 244 49 149 20 117 138 130 168 17 55 111 29 226 206 241 201 185 184 130 231 48 54 110 80 195 162 54 37 116 164 238 61 58 118 218 117 56 94 173 203 198 49 51 88 51 65 134 162 78 245 186 186 34 125 147 10 153 80 155 2 204 17 207 93 61 158 195 0 24 19 158 230 65 97 97 146 25 111 160 190 205 236 174 155 222 187 6 176 34 210 77 226 199 152 16 37 226 246 193 17 98 74 104 2 239 198 225 208 178 41 204 214 246 190 110 114 73 230 226 220 57 89 161 235 227 176 201 69 250 169 36 102 50 210 46 174 15 85 82 86 249 252 5 245 231 231 42 213 207 149 180 227 30 136 191 105 6 176 161 17 206 114 5 243 253 92 103 112 79 146 63 67 252 222 31 187 115 124 130 36 130 182 109 1 62 5 100 7 52 128 98 92 135 103 115 54 77 54 99 175 56 60 61 25 73 115 29 247 87 12 238 29 136 192 238 219 19 209 144 170 5 70 210 95 76 65 65 253 92 24 133 242 233 27 247 245 243 109 157 177 249 115 196 231 45 160 112 78 3 100 119 85 145 59 149 156 189 75 41 138 19 188 71 31 173 12 45 69 65 215 247 72 34 56 57 61 133 170 98 209 182 198 164 74 187 83 19 8 247 215 85 45 216 2 34 156 118 29 78 87 235 141 13 84 85 139 232 121 9 158 214 126 118 14 239 78 252 126 248 123 138 237 47 89 184 74 250 49 86 253 249 54 102 208 254 38 51 12 90 136 238 149 9 242 125 119 251 206 34 190 73 120 150 124 99 132 76 252 152 146 15 210 6 22 77 51 210 82 208 93 170 10 38 182 196 7 128 163 147 83 196 152 74 105 19 209 182 216 63 102 193 223 80 168 177 25 244 25 219 254 90 250 107 34 214 238 220 118 226 102 226 51 135 173 132 31 123 1 117 229 16 252 240 134 29 10 217 246 55 38 126 86 251 169 16 191 239 123 159 166 202 174 253 176 107 69 161 67 65 126 138 130 211 213 9 114 163 140 185 224 73 57 241 194 84 206 210 111 48 131 87 239 108 149 126 170 207 116 57 51 160 202 241 99 240 245 153 198 54 159 239 129 248 27 117 2 197 76 13 5 168 245 201 157 148 230 37 181 79 113 59 241 253 188 65 8 193 60 161 170 132 61 248 111 218 157 108 160 239 197 225 233 41 90 63 214 52 183 128 225 48 135 3 190 170 20 171 36 86 166 224 143 43 102 128 150 230 15 27 132 210 33 151 95 80 250 86 105 174 188 143 51 136 159 211 200 116 6 16 20 192 34 123 147 63 11 234 24 193 251 24 209 197 30 177 23 244 209 252 126 85 181 232 33 51 136 212 247 194 212 127 19 66 57 68 186 35 94 0 15 209 191 58 74 55 23 10 172 236 63 85 246 191 78 124 212 19 91 198 224 143 199 53 98 69 250 105 32 62 234 140 30 182 18 151 183 18 126 59 32 156 93 146 200 104 4 110 77 252 190 98 128 84 136 31 1 34 180 33 216 180 244 233 119 51 161 9 161 234 178 177 35 129 160 87 245 218 202 254 83 101 255 3 241 214 247 80 13 254 242 71 20 233 167 13 219 95 163 246 179 64 222 148 248 204 188 53 11 56 210 0 73 17 37 158 73 252 24 19 58 39 62 49 97 209 4 203 114 122 130 106 100 150 152 209 58 24 220 153 163 97 68 51 125 89 230 244 196 25 246 31 103 216 127 84 246 127 19 51 152 235 168 152 72 255 140 122 31 162 123 103 107 134 109 38 108 150 1 52 33 121 40 56 38 217 32 126 87 194 189 61 136 3 150 161 65 8 193 9 159 211 221 99 156 210 54 141 87 8 239 80 36 112 54 54 48 121 12 119 179 255 184 187 253 71 29 157 27 167 34 170 212 237 221 165 127 78 242 239 69 229 111 48 128 0 125 74 118 0 165 235 208 245 209 14 148 86 54 191 139 17 129 2 150 109 107 213 76 97 168 106 42 197 46 254 189 129 9 109 27 112 78 10 224 188 52 192 107 68 16 204 91 109 9 215 72 115 98 255 225 232 95 235 62 60 85 106 58 227 139 109 210 63 245 241 249 62 137 159 147 67 128 34 246 38 237 189 39 117 106 155 31 136 177 92 54 150 238 14 78 248 92 208 202 84 152 192 24 128 209 132 102 119 220 64 29 217 73 189 7 168 8 175 156 29 8 52 167 61 166 157 184 106 254 160 186 134 223 203 176 7 124 48 31 103 152 213 12 163 252 1 238 91 250 203 151 41 54 226 250 131 205 103 44 218 22 193 85 125 70 249 118 205 229 177 108 6 66 24 42 150 118 168 42 120 158 49 166 30 128 242 144 40 224 25 38 218 0 128 110 26 138 112 115 165 23 71 173 86 171 83 185 35 83 48 101 134 237 21 63 175 197 239 86 213 226 219 247 209 130 59 125 74 134 246 189 164 45 167 165 67 97 2 211 2 92 76 1 129 67 168 195 27 187 19 7 24 236 161 245 196 217 234 2 250 152 180 58 47 64 126 32 82 188 132 154 252 0 133 213 7 4 43 149 206 229 211 68 214 145 139 212 80 191 230 136 225 208 85 147 170 35 89 92 206 228 179 135 169 235 6 166 58 6 151 175 146 9 114 255 227 174 239 208 247 17 93 236 208 199 4 18 32 44 26 112 224 234 108 226 96 247 203 237 96 37 238 27 39 144 117 87 166 134 77 82 157 232 242 201 219 77 250 135 32 22 237 74 228 62 176 20 219 171 65 161 164 16 14 104 2 91 227 141 144 137 72 32 10 136 148 64 129 108 176 82 110 177 74 84 90 178 48 135 210 123 39 19 57 151 168 78 227 13 117 36 47 16 94 181 6 200 132 139 125 66 159 44 198 175 162 8 77 24 17 58 19 190 9 46 253 77 64 8 13 154 109 115 129 8 59 210 37 172 170 162 249 158 167 158 196 151 219 95 27 204 159 143 154 32 73 160 34 246 88 211 160 97 70 219 4 132 38 160 13 13 154 16 208 182 1 77 104 208 52 225 204 207 13 231 52 61 244 117 103 0 102 194 245 155 183 221 39 126 45 160 101 251 57 65 125 13 159 117 183 65 93 175 37 246 209 132 128 63 249 252 179 184 254 202 77 188 243 29 111 199 245 155 183 176 90 119 37 169 67 154 115 18 90 5 168 6 141 52 20 186 140 155 83 5 14 56 56 58 58 151 158 193 231 192 0 140 235 55 111 225 229 27 55 135 102 71 59 241 167 175 153 1 66 8 248 220 179 207 97 181 58 197 203 55 110 226 240 248 100 203 169 161 1 176 206 222 159 249 108 126 141 192 244 139 136 1 136 2 243 104 104 248 151 195 159 49 0 163 105 44 166 95 170 154 231 240 209 221 155 17 158 29 97 189 208 12 48 93 28 125 249 48 192 182 194 145 139 252 247 250 7 130 166 51 126 190 76 52 128 29 231 215 209 96 135 215 123 192 195 78 104 0 133 126 80 68 78 85 52 93 32 12 96 165 58 231 140 1 68 67 233 26 154 143 133 189 74 12 48 250 189 142 1 2 128 125 0 31 184 208 12 32 34 119 30 185 118 245 232 145 107 15 38 121 77 34 176 155 94 64 19 24 215 95 185 137 183 60 124 13 73 226 235 229 5 208 193 209 157 32 73 226 133 215 0 34 186 122 228 218 131 171 199 31 125 107 154 217 234 123 144 196 251 146 222 252 220 189 124 238 182 215 220 237 189 247 243 29 16 17 75 233 6 208 35 215 174 34 198 168 129 3 184 109 208 50 163 109 155 109 113 128 179 62 159 62 246 201 79 133 87 110 31 52 23 158 1 160 154 68 53 1 136 191 250 225 223 177 114 166 33 18 152 198 145 192 80 206 241 213 213 48 236 46 149 146 34 112 72 77 240 54 110 142 172 3 91 36 144 137 18 5 2 17 37 226 128 224 199 191 56 16 2 177 215 247 169 229 219 137 18 123 195 40 203 192 149 239 73 117 229 173 197 231 201 162 136 227 223 124 79 199 125 250 148 32 42 104 40 32 134 4 18 70 159 18 26 2 168 105 128 152 172 47 144 135 201 85 5 18 4 73 66 58 43 18 152 172 105 100 186 240 12 160 64 15 32 2 136 77 8 88 44 218 249 86 231 170 214 6 93 201 58 98 19 17 51 107 206 11 52 28 72 73 53 212 39 131 57 128 201 78 17 43 17 26 178 215 112 8 32 102 10 164 90 226 236 214 207 151 200 63 115 92 216 73 37 21 33 34 8 33 148 107 0 72 195 84 175 205 177 161 99 255 102 227 57 21 27 53 218 180 1 173 52 16 21 18 85 149 40 72 108 3 160 114 227 167 68 22 6 207 13 44 109 188 194 70 46 32 55 90 37 223 219 11 174 1 140 248 61 128 84 39 60 102 25 128 217 143 113 83 169 188 41 135 65 243 1 142 138 1 20 94 181 155 123 166 248 249 3 246 230 145 148 123 18 84 231 0 49 57 211 159 105 90 159 30 170 17 182 122 27 66 173 218 212 221 47 218 96 16 22 237 194 206 254 3 32 181 108 96 74 9 1 4 97 2 9 129 200 154 65 39 26 23 175 170 218 144 169 58 27 232 147 168 22 187 192 0 89 3 36 204 79 99 179 69 18 9 169 230 182 219 163 118 80 4 136 170 50 17 169 168 18 231 89 44 68 164 222 114 128 114 75 239 80 202 190 196 211 78 98 29 102 124 218 86 153 199 163 194 68 92 167 132 69 5 236 205 26 169 234 222 173 234 179 59 54 169 95 255 76 197 150 104 7 17 97 209 182 18 83 226 170 186 73 251 24 209 75 34 22 6 147 53 133 72 150 0 211 88 200 172 3 19 139 34 4 66 224 144 207 132 92 124 16 72 64 84 179 85 233 110 81 32 1 132 43 58 150 246 233 195 102 23 221 58 106 53 71 148 135 142 15 163 86 172 213 154 152 90 87 97 182 166 204 20 70 117 0 34 85 90 152 199 68 175 124 119 211 62 91 180 128 220 85 5 16 208 54 1 109 211 72 61 55 9 176 230 212 93 215 131 150 3 202 143 40 243 195 193 170 8 62 90 198 218 204 48 168 101 168 170 18 104 55 76 128 106 209 0 216 98 51 239 142 164 67 152 45 38 148 92 12 166 66 160 160 152 14 93 132 192 208 128 106 38 92 45 233 99 162 99 131 208 21 67 144 159 109 189 31 51 144 141 17 154 182 193 34 70 114 109 66 10 213 22 54 251 183 139 17 235 117 196 114 153 231 170 160 48 95 80 38 17 83 127 68 164 202 214 47 208 127 228 197 215 0 32 244 80 29 49 192 252 76 142 10 221 128 10 145 160 186 81 189 83 116 190 8 40 12 42 59 31 59 85 21 235 187 59 122 207 96 203 39 132 45 205 26 179 66 209 138 248 181 22 24 42 140 244 158 153 128 217 82 194 4 160 93 44 74 141 172 181 176 137 165 141 93 31 123 172 123 96 25 154 242 157 44 9 50 169 10 78 98 29 215 188 148 97 39 52 64 210 204 0 52 146 252 41 106 206 146 46 16 53 161 173 143 63 88 213 7 68 69 131 73 47 57 38 112 41 174 230 45 228 222 219 142 23 114 107 26 205 67 93 21 162 16 86 245 178 145 202 198 171 66 148 192 85 204 74 135 219 198 100 16 161 234 92 192 153 83 231 153 2 66 99 175 109 2 67 154 102 186 254 92 206 138 62 70 172 209 211 130 68 89 3 148 24 162 9 108 234 159 220 61 21 34 98 159 39 158 118 129 1 122 239 122 122 79 63 214 119 70 48 216 247 210 87 176 72 186 234 40 179 54 26 196 153 237 124 197 17 121 96 181 142 230 21 146 156 161 5 68 43 0 55 14 96 22 38 184 167 36 15 7 66 195 195 182 46 218 230 204 224 100 31 35 214 125 66 195 22 175 96 25 102 4 216 201 32 129 170 138 91 146 93 113 3 37 2 136 100 197 121 60 163 66 125 182 91 158 160 64 44 6 224 242 107 69 68 152 221 47 183 177 10 67 163 120 49 68 15 67 72 97 60 134 149 72 20 202 16 136 18 177 146 74 213 115 152 71 61 251 252 119 168 18 4 42 140 242 188 140 35 129 214 148 222 205 150 208 176 30 38 3 164 85 181 58 195 127 183 84 76 144 159 23 239 79 46 10 229 140 9 250 152 164 143 137 165 244 67 24 157 13 52 75 167 154 206 163 95 236 249 104 0 65 15 64 222 180 191 143 46 70 43 11 157 97 130 1 225 27 145 68 69 42 28 32 94 230 151 253 66 48 145 76 112 128 72 233 172 93 143 163 39 113 45 32 170 185 252 155 32 170 66 149 148 187 25 144 130 252 33 162 155 197 151 185 153 171 216 120 119 177 83 70 238 141 248 160 104 201 38 194 58 153 110 126 198 162 109 114 219 58 113 159 95 152 162 87 8 247 136 49 74 140 214 43 9 204 72 148 44 74 106 61 3 197 202 94 119 194 4 80 6 129 18 26 198 3 203 75 56 94 173 17 99 42 202 187 230 131 130 248 55 93 182 162 250 69 5 161 242 215 101 70 221 83 65 2 185 48 212 154 203 231 238 156 254 26 82 136 102 34 103 198 44 226 9 2 36 213 97 224 42 110 53 36 108 84 235 89 63 126 16 182 122 95 8 243 38 162 13 205 217 126 16 17 250 190 7 146 24 128 101 46 147 72 84 149 177 35 145 192 36 64 132 138 144 59 98 15 92 218 199 170 235 212 58 132 100 225 25 70 119 86 131 229 168 16 221 125 227 145 221 70 25 1 171 234 65 33 82 176 228 83 192 238 13 200 208 148 89 51 158 212 252 21 246 89 37 185 163 170 92 123 234 206 4 68 100 224 107 90 228 81 97 13 173 240 130 183 14 176 143 101 10 216 22 64 106 135 226 79 221 22 78 94 119 29 197 100 67 163 137 72 153 21 80 13 216 17 16 216 89 66 8 66 68 98 181 253 202 251 139 5 90 110 74 143 160 65 151 146 184 77 231 73 64 72 84 132 53 4 33 245 254 249 131 22 96 81 21 34 226 28 252 169 192 160 228 238 161 142 5 84 109 116 157 133 8 136 36 65 57 24 81 68 85 185 50 226 153 9 200 134 181 140 176 64 142 78 150 40 101 21 63 112 70 83 6 67 120 56 219 94 227 131 98 74 218 38 128 29 11 88 168 161 129 66 177 64 107 157 242 151 75 156 156 158 162 139 81 152 153 89 85 85 85 206 163 34 228 60 34 129 73 129 152 123 165 121 3 23 1 128 166 37 92 107 46 227 232 212 187 132 229 77 49 98 9 185 79 175 20 64 70 89 161 193 86 15 232 221 241 195 0 6 213 230 236 40 57 249 138 22 200 88 0 73 128 134 221 19 176 118 205 89 162 101 74 169 26 253 19 74 98 168 224 133 234 186 138 27 160 252 46 38 150 179 35 135 132 208 4 105 11 38 176 142 105 61 69 16 65 250 152 112 121 127 31 119 142 79 208 245 189 120 102 84 119 197 13 140 0 146 138 136 231 91 138 218 135 90 116 254 77 151 46 225 180 235 232 120 181 54 53 40 34 18 2 7 83 1 89 45 155 255 59 142 10 138 168 114 38 186 22 2 146 7 248 204 64 168 106 62 52 38 74 224 172 255 69 149 120 226 186 91 254 158 11 244 167 129 17 168 140 237 177 200 112 97 4 39 62 101 143 129 28 8 248 125 245 148 238 92 228 115 20 19 104 56 16 154 114 127 164 45 8 224 55 61 112 73 111 31 28 161 239 123 130 32 109 240 232 5 142 4 246 2 85 246 163 95 240 166 77 89 203 138 2 123 139 5 150 109 139 195 227 83 155 234 37 34 68 4 210 0 134 136 107 1 33 34 36 85 52 131 189 149 210 121 4 165 25 181 248 196 246 236 17 200 0 222 72 108 28 151 213 236 109 206 32 25 226 238 25 201 75 5 248 242 235 50 240 35 159 129 64 99 13 80 226 24 22 58 190 119 58 89 247 143 89 109 33 20 9 87 31 124 0 55 111 29 34 38 33 64 119 36 18 104 115 163 243 252 227 81 14 222 52 190 133 104 152 129 171 15 92 162 85 140 184 115 124 42 66 196 65 4 106 67 150 12 23 0 18 220 63 39 247 32 68 213 218 196 168 66 92 2 205 10 8 251 171 124 66 87 64 82 181 65 83 36 198 12 54 41 78 74 139 223 74 80 157 17 12 252 13 218 64 43 224 71 222 168 66 200 206 161 139 31 113 45 9 36 120 49 203 12 6 216 122 191 225 160 97 193 196 204 194 212 243 80 24 19 65 137 228 225 135 30 228 174 143 116 120 116 188 27 113 0 0 17 162 106 32 154 116 228 58 85 217 129 28 135 95 54 1 203 55 93 193 201 186 147 174 139 208 68 8 65 97 102 132 161 128 36 160 104 129 60 141 172 52 140 214 50 111 67 64 62 169 11 67 163 137 4 27 57 35 72 96 4 241 254 197 82 181 48 133 64 17 38 118 91 43 27 64 27 57 5 207 86 18 149 227 175 214 6 151 97 209 223 173 24 96 246 190 165 144 27 44 218 70 102 186 133 203 59 31 123 148 119 165 91 120 132 106 82 64 114 34 223 131 47 35 238 215 44 69 158 224 83 0 87 246 247 52 45 21 199 171 53 165 148 64 204 26 12 12 90 120 200 109 124 142 24 86 198 83 171 38 146 36 4 37 59 68 108 168 218 241 128 125 143 249 106 226 83 219 134 26 4 34 239 109 78 228 137 135 10 221 103 38 32 7 52 57 211 72 117 226 32 179 117 138 61 94 120 249 6 165 148 208 39 21 137 145 163 38 157 204 11 160 106 94 128 250 188 0 74 18 53 38 165 212 247 234 243 2 168 97 214 231 95 190 78 55 111 31 224 155 190 246 221 59 144 14 6 146 184 80 186 58 115 65 213 81 169 115 37 105 74 4 21 181 2 136 7 47 95 162 117 140 122 178 90 35 137 24 151 228 89 63 214 83 160 212 3 168 75 103 42 54 216 12 64 34 32 104 158 207 90 197 157 140 11 101 86 39 231 168 35 13 249 249 156 132 170 71 189 103 77 48 55 49 132 153 209 52 11 168 166 82 93 68 129 5 74 16 8 24 9 202 4 14 62 48 162 9 101 98 72 163 2 145 214 38 134 44 219 50 49 228 209 183 60 140 147 213 138 142 79 79 119 66 3 88 34 200 98 53 163 238 30 83 55 118 174 224 66 61 186 179 108 91 236 45 91 116 157 149 86 151 249 67 10 132 73 92 0 22 28 202 46 162 43 227 226 196 109 128 113 113 165 79 98 165 99 200 243 3 134 33 243 54 234 133 196 106 11 103 82 202 228 193 170 185 246 173 33 16 136 90 52 65 70 67 180 199 51 131 168 204 12 178 199 39 51 131 200 194 88 41 9 222 245 142 183 33 169 80 211 54 59 98 2 44 121 83 138 41 180 30 182 92 77 13 163 51 230 9 145 113 2 22 139 22 251 139 5 78 125 106 152 72 42 195 160 148 212 237 251 16 39 24 36 218 199 173 42 202 168 182 154 1 66 245 188 12 61 40 202 164 175 92 179 95 136 54 65 255 27 191 151 182 140 200 19 41 67 50 235 51 9 54 76 35 99 20 155 26 102 147 196 156 248 66 62 63 72 188 205 140 80 18 209 221 208 0 170 214 21 129 134 4 73 29 239 158 78 18 157 211 14 146 251 244 168 34 49 112 105 175 197 254 222 2 235 190 183 185 129 138 161 108 202 139 73 115 208 168 48 65 214 247 25 20 22 253 48 0 195 186 77 72 6 125 185 179 248 160 246 81 6 62 171 123 153 211 185 129 58 29 135 151 231 6 86 67 159 167 71 198 20 138 36 227 163 100 10 67 41 73 5 16 27 34 229 229 227 53 222 184 240 24 192 220 179 73 239 255 172 1 232 12 102 168 3 50 246 17 172 16 32 145 130 9 88 46 23 216 95 46 208 245 209 38 135 170 73 88 80 175 255 183 100 240 44 19 80 101 14 40 79 108 119 253 96 77 105 184 0 133 60 220 145 50 107 85 204 80 214 227 121 128 249 195 74 52 102 140 138 232 234 149 173 249 249 60 56 90 149 134 10 36 85 51 67 94 172 224 111 223 9 55 80 50 240 170 102 243 10 161 244 111 27 36 101 204 12 185 52 62 7 210 197 215 203 24 78 116 17 57 146 92 44 90 236 45 150 232 99 79 121 118 176 207 7 18 22 101 97 86 53 243 96 232 139 132 129 96 56 140 97 110 130 229 103 45 254 224 218 64 85 132 132 153 184 100 29 133 72 41 43 121 26 126 2 83 238 30 61 87 239 225 204 81 148 191 250 244 95 29 152 65 196 43 15 65 164 106 1 47 42 68 23 215 66 40 12 114 30 127 231 5 2 109 85 108 132 167 146 109 45 196 87 154 50 131 135 237 60 63 224 114 171 0 217 209 137 98 187 235 138 31 36 180 109 131 69 219 34 169 208 170 235 180 143 9 202 156 216 65 97 98 54 38 0 9 32 16 162 200 10 230 106 174 57 121 181 112 142 89 128 84 84 77 35 120 157 25 0 139 74 154 102 0 1 148 48 138 109 204 141 72 86 195 123 168 36 222 85 145 194 198 136 251 236 224 170 86 77 93 3 16 137 136 138 218 233 33 20 72 189 19 12 224 235 51 201 78 35 251 62 132 3 7 251 63 243 216 232 24 20 229 180 18 60 96 51 228 243 109 50 169 69 6 47 239 239 217 236 62 111 210 152 155 54 167 236 62 102 56 72 214 208 59 155 4 173 243 250 24 58 139 153 9 243 196 165 49 3 76 51 100 101 238 101 74 85 1 72 198 105 227 154 7 245 186 183 122 100 60 85 192 48 159 5 144 18 49 53 64 235 160 80 139 231 43 59 129 1 178 148 99 148 75 119 53 72 21 44 178 34 7 169 58 33 147 107 135 161 57 127 65 237 74 208 50 31 40 79 148 87 168 178 152 137 177 162 18 34 50 243 176 128 168 98 221 245 218 167 136 228 152 212 206 21 169 40 1 162 66 36 214 147 79 115 98 136 200 142 44 89 81 26 72 108 202 149 77 50 43 227 96 52 79 57 82 133 164 36 117 71 12 29 108 161 120 40 132 196 228 157 92 237 3 36 194 176 148 55 73 193 23 198 153 57 138 229 39 84 72 172 126 221 45 218 235 251 247 255 7 0 27 101 175 188 190 174 110 42 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!CSSDockFileLibrary methodsFor: 'images'!dockbg2Gif	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(71 73 70 56 57 97 10 0 60 0 247 0 0 23 26 28 76 86 94 60 68 74 38 43 47 74 84 92 25 28 30 63 71 78 31 35 38 50 57 62 48 54 59 25 29 31 62 70 77 51 58 63 72 81 89 28 31 34 65 74 80 34 39 42 39 44 48 29 33 36 37 42 46 59 67 73 61 69 75 41 47 51 35 39 43 75 85 93 27 31 33 35 40 43 47 53 58 73 83 91 28 32 35 49 56 61 32 36 39 70 80 87 24 28 30 71 81 88 66 75 82 64 73 79 57 64 70 44 51 55 61 69 76 43 48 52 26 30 32 43 49 54 39 45 48 75 84 93 69 78 85 73 82 90 69 78 86 66 75 81 68 77 84 33 38 41 68 76 84 26 29 32 24 27 29 56 63 69 71 80 88 68 78 85 34 38 42 40 46 50 75 84 92 37 42 45 64 72 80 52 58 63 32 36 40 75 86 93 23 27 29 36 40 44 29 34 36 45 51 55 67 75 83 33 37 40 56 64 70 36 41 44 67 76 82 52 59 65 40 46 49 58 65 72 55 63 69 54 62 67 29 32 35 74 83 91 49 56 60 73 83 90 53 61 66 72 82 89 76 85 94 30 34 37 30 35 37 74 84 91 52 59 64 40 45 50 68 77 85 27 30 33 55 61 67 70 79 86 72 82 90 27 30 34 58 66 71 28 33 35 33 37 41 41 46 51 50 57 61 23 26 29 57 65 70 43 49 53 54 61 66 54 61 67 65 73 81 70 80 86 22 26 27 22 26 28 42 48 53 63 72 78 52 60 65 36 41 45 64 72 79 32 37 40 67 76 83 42 48 52 55 64 69 58 65 71 24 27 30 75 85 92 62 71 76 53 60 66 27 31 34 45 52 56 48 55 59 23 26 27 73 82 89 23 25 27 62 71 77 71 80 87 71 81 87 58 66 72 59 66 72 65 74 81 45 51 56 42 47 51 25 28 31 46 51 57 47 52 58 76 85 93 74 83 90 57 66 71 70 78 86 59 66 73 38 43 46 44 49 54 35 41 44 53 61 67 43 47 52 66 74 81 67 75 82 43 47 53 47 52 57 45 50 55 66 76 83 64 72 78 27 32 34 36 40 45 23 27 28 22 25 27 76 86 93 55 62 68 28 32 34 24 28 29 46 52 57 44 50 54 46 52 56 51 58 64 27 29 32 53 60 65 45 52 57 69 79 86 30 35 38 44 50 55 26 29 31 74 85 93 46 53 58 32 37 39 54 62 68 24 26 29 41 47 50 49 55 61 57 65 71 59 67 72 73 84 91 31 36 38 61 70 75 44 49 53 33 38 42 71 81 89 64 73 80 56 64 69 25 29 30 31 35 39 68 77 83 30 34 38 33 38 40 41 45 50 31 34 37 53 59 65 45 50 54 73 84 92 69 77 85 55 62 67 37 41 45 46 51 56 67 77 84 74 82 91 47 55 59 54 60 66 26 30 33 27 30 32 31 34 38 70 79 87 25 29 32 50 56 62 43 50 54 49 55 60 29 33 37 46 53 57 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 44 0 0 0 0 10 0 60 0 0 8 255 0 221 8 106 227 6 64 27 64 128 4 137 2 96 6 128 195 135 14 131 212 8 197 208 86 13 137 65 242 132 216 88 163 128 169 16 26 11 12 91 180 168 128 201 147 10 82 42 136 69 35 155 202 106 52 82 88 163 177 42 69 138 152 25 50 112 1 195 37 39 207 12 14 250 148 114 16 148 232 39 7 79 58 36 125 34 166 67 211 14 18 162 74 232 54 68 194 144 170 215 174 92 177 146 204 138 177 87 91 121 29 24 75 108 236 216 15 180 232 252 248 240 67 237 135 183 99 140 200 144 97 228 24 221 49 50 32 252 202 1 129 47 95 8 16 46 104 16 60 152 240 5 57 160 144 200 169 132 4 137 144 199 60 38 72 126 22 89 50 143 1 152 7 76 202 140 121 197 138 8 159 35 128 22 173 101 201 18 29 58 150 32 211 162 67 139 34 11 22 94 147 185 69 6 54 10 77 118 236 92 122 131 2 5 111 52 219 40 169 64 163 66 133 47 21 168 136 152 32 194 9 214 242 101 38 76 64 75 196 200 207 169 68 126 82 49 106 213 104 131 119 239 179 26 109 255 242 246 39 193 159 105 9 210 171 143 226 193 3 123 15 220 220 227 66 64 191 126 25 4 101 180 249 80 197 160 63 3 31 62 244 167 4 43 89 100 161 132 50 113 40 17 71 22 212 168 49 197 20 124 164 145 6 132 150 116 225 68 45 164 168 225 140 133 22 218 112 71 19 54 132 40 76 19 31 230 114 68 9 37 156 120 198 25 39 134 97 8 30 76 224 225 34 19 76 64 66 129 36 20 228 120 136 46 135 228 40 192 143 64 6 89 193 144 21 156 96 100 47 69 46 176 199 32 11 52 185 192 32 123 44 0 135 1 84 86 57 165 39 36 144 208 131 150 193 108 57 199 28 107 60 32 166 152 136 60 176 6 34 48 96 2 195 8 108 178 9 3 12 153 212 81 68 29 73 36 81 68 39 118 198 48 67 12 49 68 19 67 49 51 4 218 66 51 45 108 177 5 14 45 224 128 195 22 47 68 226 202 11 45 120 241 130 23 146 130 0 2 54 132 88 74 8 27 108 128 112 67 33 34 132 90 200 13 55 136 112 67 3 168 82 65 69 3 34 160 10 76 32 46 184 70 64 69 32 95 184 32 69 173 82 112 32 13 7 185 114 240 8 7 80 16 128 133 176 80 12 11 197 46 204 236 64 128 178 178 16 64 128 30 44 16 192 2 6 212 98 48 45 11 59 232 49 138 35 1 0 225 72 21 64 0 81 69 21 1 148 107 238 185 1 1 0 59) asByteArray ].	^ cache at: 1! !!CSSDockFileLibrary methodsFor: 'images'!dockbgGif	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(71 73 70 56 57 97 10 0 60 0 247 0 0 23 26 28 76 86 94 60 68 74 38 43 47 74 84 92 25 28 30 63 71 78 31 35 38 50 57 62 48 54 59 25 29 31 62 70 77 51 58 63 72 81 89 28 31 34 65 74 80 34 39 42 39 44 48 29 33 36 37 42 46 59 67 73 61 69 75 41 47 51 35 39 43 75 85 93 27 31 33 35 40 43 47 53 58 73 83 91 28 32 35 49 56 61 32 36 39 70 80 87 24 28 30 71 81 88 66 75 82 64 73 79 57 64 70 44 51 55 61 69 76 43 48 52 26 30 32 43 49 54 39 45 48 75 84 93 69 78 85 73 82 90 69 78 86 66 75 81 68 77 84 33 38 41 68 76 84 26 29 32 24 27 29 56 63 69 71 80 88 68 78 85 34 38 42 40 46 50 75 84 92 37 42 45 64 72 80 52 58 63 32 36 40 75 86 93 23 27 29 36 40 44 29 34 36 45 51 55 67 75 83 33 37 40 56 64 70 36 41 44 67 76 82 52 59 65 40 46 49 58 65 72 55 63 69 54 62 67 29 32 35 74 83 91 49 56 60 73 83 90 53 61 66 72 82 89 76 85 94 30 34 37 30 35 37 74 84 91 52 59 64 40 45 50 68 77 85 27 30 33 55 61 67 70 79 86 72 82 90 27 30 34 58 66 71 28 33 35 33 37 41 41 46 51 50 57 61 23 26 29 57 65 70 43 49 53 54 61 66 54 61 67 65 73 81 70 80 86 22 26 27 22 26 28 42 48 53 63 72 78 52 60 65 36 41 45 64 72 79 32 37 40 67 76 83 42 48 52 55 64 69 58 65 71 24 27 30 75 85 92 62 71 76 53 60 66 27 31 34 45 52 56 48 55 59 23 26 27 73 82 89 23 25 27 62 71 77 71 80 87 71 81 87 58 66 72 59 66 72 65 74 81 45 51 56 42 47 51 25 28 31 46 51 57 47 52 58 76 85 93 74 83 90 57 66 71 70 78 86 59 66 73 38 43 46 44 49 54 35 41 44 53 61 67 43 47 52 66 74 81 67 75 82 43 47 53 47 52 57 45 50 55 66 76 83 64 72 78 27 32 34 36 40 45 23 27 28 22 25 27 76 86 93 55 62 68 28 32 34 24 28 29 46 52 57 44 50 54 46 52 56 51 58 64 27 29 32 53 60 65 45 52 57 69 79 86 30 35 38 44 50 55 26 29 31 74 85 93 46 53 58 32 37 39 54 62 68 24 26 29 41 47 50 49 55 61 57 65 71 59 67 72 73 84 91 31 36 38 61 70 75 44 49 53 33 38 42 71 81 89 64 73 80 56 64 69 25 29 30 31 35 39 68 77 83 30 34 38 33 38 40 41 45 50 31 34 37 53 59 65 45 50 54 73 84 92 69 77 85 55 62 67 37 41 45 46 51 56 67 77 84 74 82 91 47 55 59 54 60 66 26 30 33 27 30 32 31 34 38 70 79 87 25 29 32 50 56 62 43 50 54 49 55 60 29 33 37 46 53 57 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 0 0 0 0 0 44 0 0 0 0 10 0 60 0 0 8 255 0 3 8 28 72 176 74 21 32 64 170 56 2 18 192 209 40 61 59 88 96 144 136 161 34 11 2 44 244 16 32 32 139 192 14 143 204 118 65 33 128 5 10 22 146 4 160 112 120 196 129 131 20 14 210 92 186 248 34 101 102 32 42 46 92 4 2 214 160 129 136 6 84 168 244 108 112 67 196 141 27 133 68 40 45 116 3 4 27 54 132 64 128 32 132 77 234 11 47 94 174 182 120 225 42 210 139 45 56 112 180 192 177 101 75 139 102 45 102 168 45 22 35 90 140 24 51 98 20 73 210 105 110 146 58 69 234 100 130 1 99 132 95 191 48 48 193 64 180 230 1 162 7 136 17 175 153 51 135 68 143 96 61 28 147 32 225 201 0 28 3 152 51 195 89 176 103 208 130 207 11 6 237 89 112 162 66 175 19 168 43 168 174 32 160 181 235 215 20 40 28 210 117 40 54 5 73 20 32 49 97 98 40 12 30 38 120 122 151 56 114 230 204 240 18 195 115 53 185 211 68 152 141 231 203 109 56 233 50 221 153 26 82 181 166 91 226 51 37 77 26 238 83 212 80 255 203 18 71 73 28 101 74 178 100 97 165 132 1 3 31 62 220 187 87 229 67 91 25 4 247 17 232 215 143 43 138 7 110 30 120 224 159 128 9 20 104 224 52 127 36 240 135 55 155 52 50 203 6 16 66 216 72 43 140 164 226 71 34 167 248 193 72 34 208 152 96 194 50 68 152 0 11 39 33 18 129 138 10 190 168 160 2 26 42 80 178 13 26 40 188 129 66 140 151 216 97 135 38 40 88 96 1 25 183 144 97 129 34 58 42 162 133 14 90 32 179 132 14 58 44 177 132 22 17 68 176 66 147 78 58 185 194 0 84 82 57 73 149 3 240 48 193 150 60 60 179 229 4 60 8 33 38 18 72 84 34 7 18 160 200 113 129 6 26 92 176 102 155 109 66 32 103 14 16 208 153 195 47 16 200 48 134 17 50 28 195 167 12 70 140 241 193 160 63 208 241 195 7 133 210 242 193 1 140 30 64 76 163 188 88 113 197 43 198 88 145 140 164 87 92 35 193 16 67 108 218 141 4 160 74 208 65 7 98 144 250 68 7 167 62 225 192 39 14 56 208 71 171 165 188 81 154 1 23 96 100 48 43 24 92 216 154 2 13 41 164 176 10 13 214 236 90 141 2 196 102 67 67 44 196 18 91 192 178 204 46 178 200 48 5 132 144 71 8 166 20 80 67 8 216 230 17 68 13 219 218 98 6 0 161 112 11 192 184 228 142 251 173 40 130 0 2 72 27 0 184 209 134 32 110 4 4 0 59) asByteArray ].	^ cache at: 1! !!CSSDockFileLibrary methodsFor: 'images'!emailPng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 128 0 0 0 128 8 6 0 0 0 195 62 97 203 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 10 79 105 67 67 80 80 104 111 116 111 115 104 111 112 32 73 67 67 32 112 114 111 102 105 108 101 0 0 120 218 157 83 103 84 83 233 22 61 247 222 244 66 75 136 128 148 75 111 82 21 8 32 82 66 139 128 20 145 38 42 33 9 16 74 136 33 161 217 21 81 193 17 69 69 4 27 200 160 136 3 142 142 128 140 21 81 44 12 138 10 216 7 228 33 162 142 131 163 136 138 202 251 225 123 163 107 214 188 247 230 205 254 181 215 62 231 172 243 157 179 207 7 192 8 12 150 72 51 81 53 128 12 169 66 30 17 224 131 199 196 198 225 228 46 64 129 10 36 112 0 16 8 179 100 33 115 253 35 1 0 248 126 60 60 43 34 192 7 190 0 1 120 211 11 8 0 192 77 155 192 48 28 135 255 15 234 66 153 92 1 128 132 1 192 116 145 56 75 8 128 20 0 64 122 142 66 166 0 64 70 1 128 157 152 38 83 0 160 4 0 96 203 99 98 227 0 80 45 0 96 39 127 230 211 0 128 157 248 153 123 1 0 91 148 33 21 1 160 145 0 32 19 101 136 68 0 104 59 0 172 207 86 138 69 0 88 48 0 20 102 75 196 57 0 216 45 0 48 73 87 102 72 0 176 183 0 192 206 16 11 178 0 8 12 0 48 81 136 133 41 0 4 123 0 96 200 35 35 120 0 132 153 0 20 70 242 87 60 241 43 174 16 231 42 0 0 120 153 178 60 185 36 57 69 129 91 8 45 113 7 87 87 46 30 40 206 73 23 43 20 54 97 2 97 154 64 46 194 121 153 25 50 129 52 15 224 243 204 0 0 160 145 21 17 224 131 243 253 120 206 14 174 206 206 54 142 182 14 95 45 234 191 6 255 34 98 98 227 254 229 207 171 112 64 0 0 225 116 126 209 254 44 47 179 26 128 59 6 128 109 254 162 37 238 4 104 94 11 160 117 247 139 102 178 15 64 181 0 160 233 218 87 243 112 248 126 60 60 69 161 144 185 217 217 229 228 228 216 74 196 66 91 97 202 87 125 254 103 194 95 192 87 253 108 249 126 60 252 247 245 224 190 226 36 129 50 93 129 71 4 248 224 194 204 244 76 165 28 207 146 9 132 98 220 230 143 71 252 183 11 255 252 29 211 34 196 73 98 185 88 42 20 227 81 18 113 142 68 154 140 243 50 165 34 137 66 146 41 197 37 210 255 100 226 223 44 251 3 62 223 53 0 176 106 62 1 123 145 45 168 93 99 3 246 75 39 16 88 116 192 226 247 0 0 242 187 111 193 212 40 8 3 128 104 131 225 207 119 255 239 63 253 71 160 37 0 128 102 73 146 113 0 0 94 68 36 46 84 202 179 63 199 8 0 0 68 160 129 42 176 65 27 244 193 24 44 192 6 28 193 5 220 193 11 252 96 54 132 66 36 196 194 66 16 66 10 100 128 28 114 96 41 172 130 66 40 134 205 176 29 42 96 47 212 64 29 52 192 81 104 134 147 112 14 46 194 85 184 14 61 112 15 250 97 8 158 193 40 188 129 9 4 65 200 8 19 97 33 218 136 1 98 138 88 35 142 8 23 153 133 248 33 193 72 4 18 139 36 32 201 136 20 81 34 75 145 53 72 49 82 138 84 32 85 72 29 242 61 114 2 57 135 92 70 186 145 59 200 0 50 130 252 134 188 71 49 148 129 178 81 61 212 12 181 67 185 168 55 26 132 70 162 11 208 100 116 49 154 143 22 160 155 208 114 180 26 61 140 54 161 231 208 171 104 15 218 143 62 67 199 48 192 232 24 7 51 196 108 48 46 198 195 66 177 56 44 9 147 99 203 177 34 172 12 171 198 26 176 86 172 3 187 137 245 99 207 177 119 4 18 129 69 192 9 54 4 119 66 32 97 30 65 72 88 76 88 78 216 72 168 32 28 36 52 17 218 9 55 9 3 132 81 194 39 34 147 168 75 180 38 186 17 249 196 24 98 50 49 135 88 72 44 35 214 18 143 19 47 16 123 136 67 196 55 36 18 137 67 50 39 185 144 2 73 177 164 84 210 18 210 70 210 110 82 35 233 44 169 155 52 72 26 35 147 201 218 100 107 178 7 57 148 44 32 43 200 133 228 157 228 195 228 51 228 27 228 33 242 91 10 157 98 64 113 164 248 83 226 40 82 202 106 74 25 229 16 229 52 229 6 101 152 50 65 85 163 154 82 221 168 161 84 17 53 143 90 66 173 161 182 82 175 81 135 168 19 52 117 154 57 205 131 22 73 75 165 173 162 149 211 26 104 23 104 247 105 175 232 116 186 17 221 149 30 78 151 208 87 210 203 233 71 232 151 232 3 244 119 12 13 134 21 131 199 136 103 40 25 155 24 7 24 103 25 119 24 175 152 76 166 25 211 139 25 199 84 48 55 49 235 152 231 153 15 153 111 85 88 42 182 42 124 21 145 202 10 149 74 149 38 149 27 42 47 84 169 170 166 170 222 170 11 85 243 85 203 84 143 169 94 83 125 174 70 85 51 83 227 169 9 212 150 171 85 170 157 80 235 83 27 83 103 169 59 168 135 170 103 168 111 84 63 164 126 89 253 137 6 89 195 76 195 79 67 164 81 160 177 95 227 188 198 32 11 99 25 179 120 44 33 107 13 171 134 117 129 53 196 38 177 205 217 124 118 42 187 152 253 29 187 139 61 170 169 161 57 67 51 74 51 87 179 82 243 148 102 63 7 227 152 113 248 156 116 78 9 231 40 167 151 243 126 138 222 20 239 41 226 41 27 166 52 76 185 49 101 92 107 170 150 151 150 88 171 72 171 81 171 71 235 189 54 174 237 167 157 166 189 69 187 89 251 129 14 65 199 74 39 92 39 71 103 143 206 5 157 231 83 217 83 221 167 10 167 22 77 61 58 245 174 46 170 107 165 27 161 187 68 119 191 110 167 238 152 158 190 94 128 158 76 111 167 222 121 189 231 250 28 125 47 253 84 253 109 250 167 245 71 12 88 6 179 12 36 6 219 12 206 24 60 197 53 113 111 60 29 47 199 219 241 81 67 93 195 64 67 165 97 149 97 151 225 132 145 185 209 60 163 213 70 141 70 15 140 105 198 92 227 36 227 109 198 109 198 163 38 6 38 33 38 75 77 234 77 238 154 82 77 185 166 41 166 59 76 59 76 199 205 204 205 162 205 214 153 53 155 61 49 215 50 231 155 231 155 215 155 223 183 96 90 120 90 44 182 168 182 184 101 73 178 228 90 166 89 238 182 188 110 133 90 57 89 165 88 85 90 93 179 70 173 157 173 37 214 187 173 187 167 17 167 185 78 147 78 171 158 214 103 195 176 241 182 201 182 169 183 25 176 229 216 6 219 174 182 109 182 125 97 103 98 23 103 183 197 174 195 238 147 189 147 125 186 125 141 253 61 7 13 135 217 14 171 29 90 29 126 115 180 114 20 58 86 58 222 154 206 156 238 63 125 197 244 150 233 47 103 88 207 16 207 216 51 227 182 19 203 41 196 105 157 83 155 211 71 103 23 103 185 115 131 243 136 139 137 75 130 203 46 151 62 46 155 27 198 221 200 189 228 74 116 245 113 93 225 122 210 245 157 155 179 155 194 237 168 219 175 238 54 238 105 238 135 220 159 204 52 159 41 158 89 51 115 208 195 200 67 224 81 229 209 63 11 159 149 48 107 223 172 126 79 67 79 129 103 181 231 35 47 99 47 145 87 173 215 176 183 165 119 170 247 97 239 23 62 246 62 114 159 227 62 227 60 55 222 50 222 89 95 204 55 192 183 200 183 203 79 195 111 158 95 133 223 67 127 35 255 100 255 122 255 209 0 167 128 37 1 103 3 137 129 65 129 91 2 251 248 122 124 33 191 142 63 58 219 101 246 178 217 237 65 140 160 185 65 21 65 143 130 173 130 229 193 173 33 104 200 236 144 173 33 247 231 152 206 145 206 105 14 133 80 126 232 214 208 7 97 230 97 139 195 126 12 39 133 135 133 87 134 63 142 112 136 88 26 209 49 151 53 119 209 220 67 115 223 68 250 68 150 68 222 155 103 49 79 57 175 45 74 53 42 62 170 46 106 60 218 55 186 52 186 63 198 46 102 89 204 213 88 157 88 73 108 75 28 57 46 42 174 54 110 108 190 223 252 237 243 135 226 157 226 11 227 123 23 152 47 200 93 112 121 161 206 194 244 133 167 22 169 46 18 44 58 150 64 76 136 78 56 148 240 65 16 42 168 22 140 37 242 19 119 37 142 10 121 194 29 194 103 34 47 209 54 209 136 216 67 92 42 30 78 242 72 42 77 122 146 236 145 188 53 121 36 197 51 165 44 229 185 132 39 169 144 188 76 13 76 221 155 58 158 22 154 118 32 109 50 61 58 189 49 131 146 145 144 113 66 170 33 77 147 182 103 234 103 230 102 118 203 172 101 133 178 254 197 110 139 183 47 30 149 7 201 107 179 144 172 5 89 45 10 182 66 166 232 84 90 40 215 42 7 178 103 101 87 102 191 205 137 202 57 150 171 158 43 205 237 204 179 202 219 144 55 156 239 159 255 237 18 194 18 225 146 182 165 134 75 87 45 29 88 230 189 172 106 57 178 60 113 121 219 10 227 21 5 43 134 86 6 172 60 184 138 182 42 109 213 79 171 237 87 151 174 126 189 38 122 77 107 129 94 193 202 130 193 181 1 107 235 11 85 10 229 133 125 235 220 215 237 93 79 88 47 89 223 181 97 250 134 157 27 62 21 137 138 174 20 219 23 151 21 127 216 40 220 120 229 27 135 111 202 191 153 220 148 180 169 171 196 185 100 207 102 210 102 233 230 222 45 158 91 14 150 170 151 230 151 14 110 13 217 218 180 13 223 86 180 237 245 246 69 219 47 151 205 40 219 187 131 182 67 185 163 191 60 184 188 101 167 201 206 205 59 63 84 164 84 244 84 250 84 54 238 210 221 181 97 215 248 110 209 238 27 123 188 246 52 236 213 219 91 188 247 253 62 201 190 219 85 1 85 77 213 102 213 101 251 73 251 179 247 63 174 137 170 233 248 150 251 109 93 173 78 109 113 237 199 3 210 3 253 7 35 14 182 215 185 212 213 29 210 61 84 82 143 214 43 235 71 14 199 31 190 254 157 239 119 45 13 54 13 85 141 156 198 226 35 112 68 121 228 233 247 9 223 247 30 13 58 218 118 140 123 172 225 7 211 31 118 29 103 29 47 106 66 154 242 154 70 155 83 154 251 91 98 91 186 79 204 62 209 214 234 222 122 252 71 219 31 15 156 52 60 89 121 74 243 84 201 105 218 233 130 211 147 103 242 207 140 157 149 157 125 126 46 249 220 96 219 162 182 123 231 99 206 223 106 15 111 239 186 16 116 225 210 69 255 139 231 59 188 59 206 92 242 184 116 242 178 219 229 19 87 184 87 154 175 58 95 109 234 116 234 60 254 147 211 79 199 187 156 187 154 174 185 92 107 185 238 122 189 181 123 102 247 233 27 158 55 206 221 244 189 121 241 22 255 214 213 158 57 61 221 189 243 122 111 247 197 247 245 223 22 221 126 114 39 253 206 203 187 217 119 39 238 173 188 79 188 95 244 64 237 65 217 67 221 135 213 63 91 254 220 216 239 220 127 106 192 119 160 243 209 220 71 247 6 133 131 207 254 145 245 143 15 67 5 143 153 143 203 134 13 134 235 158 56 62 57 57 226 63 114 253 233 252 167 67 207 100 207 38 158 23 254 162 254 203 174 23 22 47 126 248 213 235 215 206 209 152 209 161 151 242 151 147 191 109 124 165 253 234 192 235 25 175 219 198 194 198 30 190 201 120 51 49 94 244 86 251 237 193 119 220 119 29 239 163 223 15 79 228 124 32 127 40 255 104 249 177 245 83 208 167 251 147 25 147 147 255 4 3 152 243 252 99 51 45 219 0 0 0 4 103 65 77 65 0 0 177 142 124 251 81 147 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 233 0 0 117 48 0 0 234 96 0 0 58 152 0 0 23 111 146 95 197 70 0 0 47 163 73 68 65 84 120 218 236 189 121 176 237 87 117 223 249 89 107 255 206 116 239 125 163 158 70 244 64 18 66 32 129 152 69 36 16 72 8 77 8 92 221 237 238 170 78 87 146 174 234 169 186 43 78 219 141 11 187 141 155 6 219 33 174 174 74 210 85 237 180 201 224 178 147 114 236 196 118 218 134 216 102 176 193 24 140 33 216 196 161 145 65 8 205 195 19 2 13 111 186 211 185 231 252 246 90 253 199 222 191 233 220 115 239 123 18 247 217 39 238 247 83 29 189 115 207 248 59 191 53 125 215 119 173 189 182 184 59 231 143 255 255 30 122 254 18 156 87 128 243 199 121 5 56 127 156 87 128 243 199 121 5 56 127 156 87 128 243 199 121 5 56 127 156 87 128 243 199 121 5 56 127 156 87 128 243 199 121 5 56 127 156 87 128 243 199 121 5 56 127 156 87 128 243 199 121 5 56 127 156 87 128 243 199 121 5 56 127 252 213 58 138 61 251 164 143 94 116 109 244 176 20 209 137 57 142 25 224 249 214 61 196 141 16 215 121 240 165 63 196 67 71 255 39 122 229 41 212 166 115 95 123 230 67 206 201 75 207 193 219 59 118 23 181 199 180 56 200 213 79 254 19 94 241 196 207 19 195 50 142 118 191 165 186 43 2 8 42 46 129 216 15 18 55 248 219 207 124 107 161 20 224 183 78 223 250 7 63 120 224 247 46 213 216 99 82 26 86 110 65 156 128 199 109 151 209 113 196 156 171 30 248 7 124 103 249 205 172 141 174 34 120 9 59 181 167 201 78 23 95 94 148 4 229 69 138 90 228 204 239 147 93 191 32 9 210 69 136 244 88 94 253 22 47 127 244 31 97 209 112 217 196 243 243 245 151 137 128 40 18 20 13 74 79 12 209 45 126 235 212 93 79 255 32 92 182 80 10 240 241 211 183 156 90 215 35 151 254 173 209 47 50 184 236 237 240 159 125 28 31 159 194 167 155 224 83 112 75 47 116 67 44 130 151 136 109 242 46 2 39 246 95 159 132 111 101 122 9 6 213 203 197 211 125 1 39 221 119 188 118 22 221 251 212 223 225 213 133 116 171 222 158 95 224 233 163 173 126 119 250 108 107 62 36 63 154 245 209 107 189 76 253 147 134 187 228 191 211 39 91 245 125 110 73 185 29 44 191 175 58 191 244 94 193 164 32 202 128 98 114 156 235 190 251 11 248 229 183 194 43 175 33 20 5 152 131 68 136 17 136 128 35 106 200 218 38 242 141 47 64 249 28 191 188 250 183 248 236 233 235 79 253 224 162 133 128 149 98 92 222 91 188 149 79 246 151 184 231 201 127 8 95 252 73 228 182 159 155 99 12 150 174 108 44 147 98 216 152 67 118 130 50 28 38 234 62 196 202 252 154 116 241 220 147 36 60 75 196 231 8 55 133 21 167 150 107 45 172 244 128 36 177 117 21 165 250 204 246 107 107 97 119 255 109 190 187 58 39 79 66 119 65 48 220 171 199 20 203 247 213 200 143 57 142 97 162 184 4 76 70 12 55 191 195 53 15 125 4 38 37 225 29 111 133 203 46 203 103 158 111 94 166 155 150 112 242 4 254 241 143 193 214 211 124 44 252 16 127 230 215 179 82 156 40 23 14 3 244 152 48 242 77 238 237 189 131 56 156 242 3 127 250 115 48 89 131 187 127 41 93 218 245 103 160 92 3 139 96 83 176 18 183 9 148 19 36 78 8 94 178 186 239 245 148 140 192 167 73 208 110 181 245 212 183 218 202 189 139 24 102 254 54 7 165 37 228 214 255 154 207 104 254 50 79 193 41 253 155 20 70 60 121 11 207 90 80 41 164 228 115 137 238 120 22 116 165 24 110 89 232 30 113 19 60 43 105 73 160 148 33 195 241 253 92 247 255 254 119 196 241 6 225 174 91 225 178 49 76 30 200 161 210 27 87 165 37 60 243 60 246 235 159 64 109 149 143 133 191 205 215 184 137 37 158 99 147 201 226 129 64 21 232 105 100 36 19 190 49 124 39 130 241 222 175 253 223 73 216 247 252 75 100 249 2 252 228 26 148 155 120 165 4 49 105 186 187 33 30 57 120 226 79 120 126 255 13 68 29 213 2 245 236 114 221 29 68 16 107 172 190 14 183 34 216 12 126 8 8 150 69 217 206 121 20 77 33 193 0 53 12 69 12 84 12 115 161 16 193 196 40 80 204 13 69 16 55 44 11 211 213 115 52 147 4 217 212 137 158 34 156 1 4 165 200 202 97 213 153 120 0 25 48 218 124 146 55 125 253 191 199 199 99 194 187 111 67 95 117 21 76 166 201 40 242 239 67 128 94 1 207 158 196 254 117 18 254 111 245 126 136 175 135 183 178 44 99 54 180 100 107 239 208 232 222 41 64 89 150 152 69 130 79 24 98 220 59 184 29 246 11 239 189 247 31 165 31 247 158 95 129 125 151 225 199 31 132 184 153 61 65 178 13 60 226 30 17 43 57 124 242 143 120 238 192 205 68 89 234 132 2 145 108 229 34 157 176 82 185 103 153 65 104 86 3 71 173 95 95 185 117 5 82 24 215 228 37 52 107 71 229 38 92 243 39 231 231 81 84 29 119 77 86 174 57 28 84 238 62 123 0 169 93 126 126 167 130 185 18 195 136 225 250 147 188 254 235 255 109 18 254 61 239 68 95 249 114 152 78 210 53 240 172 201 154 133 127 226 56 246 43 191 133 250 42 31 235 255 16 247 234 219 24 201 38 74 36 154 83 198 61 139 0 123 199 3 220 126 235 59 18 248 137 17 101 194 72 198 252 249 240 93 124 98 223 255 12 127 254 171 240 187 255 21 18 134 232 254 151 129 40 148 147 228 5 202 152 148 33 26 230 17 202 146 11 159 251 3 36 174 82 122 129 33 217 229 110 79 18 173 2 149 115 144 134 214 152 123 62 18 23 153 185 33 132 124 127 246 95 17 193 17 92 64 196 17 36 131 244 252 156 123 114 129 34 104 251 245 161 15 197 50 195 241 83 188 254 63 252 215 248 198 38 225 206 119 160 175 188 10 166 91 217 3 90 114 71 170 89 248 167 176 127 241 27 168 159 230 99 253 191 195 215 195 205 12 100 140 82 98 86 162 56 183 223 250 246 197 83 128 3 251 247 113 207 29 239 68 0 143 37 5 37 75 178 197 55 151 110 231 147 7 126 24 190 241 107 240 59 255 37 12 150 209 131 87 67 40 192 182 192 38 184 77 112 155 214 225 192 125 202 197 207 124 146 98 122 154 72 15 35 116 68 233 25 129 171 39 71 220 142 254 66 22 204 156 4 173 17 120 147 101 209 122 140 44 84 196 183 41 72 168 21 34 212 10 83 41 88 8 33 127 111 235 51 180 135 133 37 6 155 199 184 254 171 127 3 31 111 17 110 191 17 125 197 81 216 26 103 203 119 16 79 6 209 83 56 113 18 251 23 255 26 245 211 252 219 193 143 112 111 113 51 67 25 19 40 179 97 9 239 190 253 22 14 236 223 191 120 10 48 153 78 217 191 127 133 255 252 7 238 68 84 176 88 18 40 25 202 22 223 28 189 139 79 30 252 97 248 230 111 192 111 255 117 232 175 160 135 94 1 90 224 113 43 123 131 9 196 70 9 176 146 75 158 249 183 73 9 164 200 238 59 91 155 123 22 124 3 226 42 193 35 146 211 198 174 0 153 17 122 237 9 240 90 57 212 147 88 85 66 18 111 37 104 73 32 167 81 158 150 103 200 202 166 162 249 111 197 66 31 239 173 48 218 60 198 117 95 253 27 176 53 37 220 250 38 244 229 151 193 230 38 76 50 71 82 165 40 253 34 11 255 215 80 59 205 111 143 126 152 123 139 155 89 146 49 61 74 176 146 32 240 159 220 125 27 43 43 43 76 166 211 197 83 0 51 99 58 153 176 111 121 137 255 244 174 219 147 28 172 36 88 201 208 39 124 115 120 39 159 58 248 62 184 239 255 129 223 253 155 48 88 70 14 191 18 180 7 49 95 144 152 195 65 25 49 7 108 202 37 79 255 27 122 211 83 68 237 99 89 92 13 150 207 194 175 37 219 253 85 29 89 215 2 151 250 241 116 211 230 133 193 91 86 76 35 108 151 140 36 178 192 91 74 16 234 23 130 104 64 179 240 7 227 167 184 246 43 127 29 38 145 112 243 117 232 21 135 96 188 14 211 124 43 55 193 198 16 166 240 236 119 91 194 255 17 238 45 110 97 32 155 8 37 209 74 64 120 207 29 183 177 188 188 76 57 157 98 102 11 88 11 112 40 221 216 154 150 236 91 89 225 7 238 190 3 65 48 47 9 82 50 210 49 247 45 221 206 167 14 253 47 240 173 223 196 63 241 223 32 189 37 244 130 87 65 232 37 235 207 33 161 2 133 209 5 247 146 75 158 250 85 122 229 73 76 251 32 218 240 0 149 240 231 186 122 175 165 223 196 236 198 69 87 214 235 29 79 17 234 191 93 165 86 44 9 82 191 47 204 224 7 21 33 136 130 40 37 129 137 44 83 156 124 152 87 124 230 93 196 231 143 17 94 127 0 125 73 1 155 199 97 235 4 76 87 193 54 18 16 150 9 60 251 12 246 47 127 19 181 85 126 103 249 125 124 163 127 11 35 198 244 72 198 32 8 239 185 253 86 246 173 140 152 78 167 148 57 53 94 204 98 144 129 199 200 116 58 101 255 210 136 247 102 76 96 229 148 96 83 134 190 201 183 70 119 240 233 67 63 138 124 251 99 248 167 255 7 164 63 68 143 92 7 90 212 94 192 189 73 141 220 5 188 228 146 199 126 137 98 114 2 211 65 162 71 103 132 223 132 128 230 167 73 155 74 206 194 108 11 61 136 16 180 45 80 175 255 14 217 165 75 6 119 34 138 134 164 12 238 96 230 148 22 217 42 75 54 99 100 226 202 84 150 232 173 61 194 53 159 125 23 62 222 162 247 214 171 209 151 29 134 173 9 76 167 80 150 73 209 99 9 106 240 220 113 236 95 125 18 101 131 223 93 121 31 223 232 189 157 33 27 4 38 152 77 16 113 238 185 253 237 172 172 44 49 41 75 162 91 39 171 93 192 106 96 34 82 162 69 38 229 148 125 43 75 188 231 246 91 33 8 209 75 84 75 6 58 230 155 203 183 39 37 120 224 183 241 207 252 29 164 24 162 23 94 7 161 143 197 113 198 2 211 218 27 164 112 80 114 233 35 255 152 98 242 60 166 3 92 123 53 48 172 226 117 215 11 120 7 7 208 1 115 222 65 255 90 223 15 205 223 89 161 130 106 38 138 140 201 52 178 53 41 153 198 72 105 137 232 17 9 4 237 227 189 125 140 54 30 227 149 159 185 13 47 161 247 150 151 160 71 247 165 60 127 50 129 114 154 110 30 65 74 120 254 56 246 111 62 135 178 158 132 223 127 7 125 29 163 90 18 61 226 18 184 251 157 183 176 178 180 194 116 90 98 209 247 92 248 123 174 0 94 41 129 57 49 26 147 105 201 202 242 50 247 220 118 11 234 1 43 141 96 145 17 19 238 95 186 139 223 187 224 253 200 3 191 131 127 238 125 89 9 94 13 97 144 61 65 182 20 139 153 242 21 176 200 37 15 252 95 244 38 207 227 50 192 37 36 58 166 93 64 171 189 128 118 129 32 25 112 183 145 252 140 43 87 205 2 23 193 129 50 70 182 38 83 202 50 18 99 162 149 52 8 26 2 26 2 18 20 41 250 120 127 31 163 245 199 120 249 167 111 195 74 161 247 198 67 232 101 253 36 248 201 36 253 142 56 73 74 45 83 56 113 130 248 241 47 163 172 241 137 149 247 241 205 254 59 24 202 152 94 78 139 21 225 238 91 111 102 101 121 200 180 156 226 22 49 183 68 103 47 122 63 64 205 151 227 196 24 153 76 167 172 44 45 113 247 109 55 163 226 137 20 245 9 3 217 224 254 209 237 252 254 5 239 71 30 252 4 254 249 31 67 122 67 138 11 95 13 161 159 189 64 204 216 160 76 176 79 20 199 184 248 254 127 64 152 60 7 97 128 171 86 56 62 89 61 221 212 46 233 67 22 114 152 17 184 8 42 74 144 128 146 216 196 73 25 41 203 136 89 122 95 17 2 69 145 110 33 4 130 4 130 8 26 20 237 13 96 112 128 254 250 99 92 241 169 91 240 40 244 174 31 161 151 132 108 249 91 153 246 158 36 110 95 74 56 113 138 248 201 175 17 124 157 79 238 251 81 238 27 222 202 72 198 20 158 127 111 128 59 110 185 137 229 229 33 147 105 82 60 203 120 87 124 145 61 128 164 147 52 79 213 176 74 89 205 140 105 89 178 180 52 228 142 119 188 13 92 50 99 88 50 144 49 247 47 223 201 239 31 249 49 228 161 79 227 95 248 0 18 6 132 11 95 147 120 130 152 47 96 140 184 25 102 137 149 115 139 92 124 223 207 82 108 61 139 135 17 34 161 107 245 117 9 185 37 112 205 113 188 38 107 66 162 144 137 108 197 41 147 88 98 102 73 97 114 172 15 33 160 170 168 164 91 80 69 85 19 218 215 1 244 246 51 88 125 148 151 126 226 102 124 170 244 94 13 122 113 76 86 63 157 230 115 159 128 79 18 224 59 185 74 252 253 251 9 182 206 167 14 188 143 251 134 111 103 200 58 234 19 162 149 56 112 251 219 110 98 121 105 137 114 26 59 104 63 149 148 60 83 226 11 27 2 18 62 183 118 241 198 147 39 40 203 200 202 202 18 183 191 227 38 130 180 148 128 49 223 94 190 147 207 92 244 99 200 195 191 143 127 233 67 160 61 244 200 107 64 122 96 83 220 99 46 150 100 79 160 1 183 146 11 239 253 48 97 252 12 222 91 194 165 192 69 59 169 219 44 211 87 97 1 195 153 198 41 211 178 196 140 132 228 67 168 111 133 6 10 85 84 5 52 41 143 102 225 7 45 8 189 33 50 56 64 127 237 81 46 251 237 155 160 12 244 174 53 244 194 41 108 229 88 111 147 70 248 76 224 244 58 241 243 143 17 88 231 211 251 127 148 251 6 183 50 100 139 224 137 18 15 42 188 235 230 27 89 94 90 98 90 78 137 22 59 215 112 135 222 154 197 11 1 230 214 112 239 173 91 140 145 233 180 100 121 105 196 59 111 190 17 21 112 34 65 166 12 100 204 183 151 238 228 51 23 254 175 200 163 159 133 175 124 4 9 5 122 209 107 176 208 226 9 170 250 129 89 246 4 198 69 95 251 0 197 248 187 208 91 66 66 194 4 29 119 223 18 124 25 35 211 178 76 241 92 132 162 40 208 44 244 74 192 179 183 162 190 159 189 70 175 159 132 191 250 8 151 126 236 70 136 74 184 198 209 35 6 147 34 211 218 211 38 173 101 12 171 155 196 63 126 150 224 235 124 250 192 143 114 223 232 86 134 108 18 60 41 183 8 220 122 211 91 88 90 90 98 26 35 102 190 141 242 246 166 147 97 129 21 192 73 28 120 173 181 205 205 129 104 198 180 140 44 47 143 120 231 219 222 146 162 70 25 9 62 165 207 22 223 94 185 147 207 30 249 9 228 177 207 193 159 254 125 36 20 20 71 174 195 117 144 99 105 76 64 42 51 104 201 19 68 142 252 233 251 41 54 159 134 176 12 161 135 104 34 110 84 83 229 111 90 150 76 203 84 64 169 0 156 102 161 23 154 92 123 80 165 8 161 190 175 173 127 85 53 129 190 94 31 233 239 163 88 125 136 35 191 121 3 30 133 112 181 80 28 118 124 18 82 149 208 52 121 43 31 131 108 193 218 152 248 149 53 130 173 241 123 7 223 207 183 71 239 204 49 191 4 51 84 148 91 111 122 11 203 75 203 196 88 226 102 53 93 213 224 149 166 176 101 139 158 5 72 174 127 251 204 173 82 132 152 121 130 165 209 18 183 220 248 150 228 146 45 18 152 166 112 176 239 46 62 123 209 7 144 39 62 15 95 253 63 145 162 79 113 225 181 120 237 9 44 103 7 41 39 118 41 112 34 135 190 242 35 20 227 239 33 253 101 68 7 68 23 182 38 19 98 140 217 35 100 23 159 133 94 204 8 120 214 11 180 149 32 132 128 20 67 100 176 66 111 245 81 14 255 250 155 240 40 20 87 42 122 200 241 105 72 130 55 205 13 44 146 58 123 214 167 196 63 115 130 175 241 153 67 239 231 129 209 109 140 24 83 212 221 62 202 45 55 222 144 132 95 90 42 142 206 43 95 89 86 232 115 224 178 247 158 7 200 213 187 218 242 91 141 28 85 181 213 162 83 78 35 75 163 33 183 220 248 230 212 37 104 37 129 9 3 54 120 96 249 14 62 119 225 7 144 99 95 132 127 255 115 16 66 38 139 6 201 173 122 213 54 101 184 72 34 135 84 57 248 165 255 17 63 241 40 155 12 153 144 192 154 100 1 214 150 45 210 18 116 149 250 73 235 126 243 120 178 252 2 45 134 132 225 136 254 233 199 216 255 107 175 195 77 8 47 45 208 3 2 211 202 242 37 9 222 5 212 97 51 16 191 62 36 216 58 159 57 252 227 220 63 122 39 125 89 71 100 130 249 20 196 120 251 141 111 100 180 52 162 180 18 35 1 80 23 155 43 165 244 241 178 216 30 160 234 147 235 244 3 231 59 141 34 228 20 209 35 101 76 74 112 243 13 55 160 8 30 83 56 24 102 79 240 7 23 253 36 242 212 151 144 175 253 211 132 190 143 92 211 208 198 82 166 122 128 132 68 32 157 126 6 123 236 243 28 252 245 235 41 86 31 66 7 251 209 222 16 213 162 133 252 37 91 181 228 219 140 165 171 18 66 247 190 22 125 100 216 39 156 122 146 165 127 117 125 138 249 47 233 161 251 21 43 21 98 101 249 210 52 244 108 40 229 159 15 8 182 202 103 15 255 56 15 140 222 201 144 77 10 43 33 26 1 229 230 27 222 204 210 104 137 88 150 184 53 237 160 33 99 152 138 170 174 8 46 225 220 244 240 239 109 8 240 170 229 207 183 9 124 27 87 224 25 24 150 83 150 150 250 188 245 134 55 36 2 198 12 161 164 239 155 60 80 41 193 119 190 140 124 253 23 81 13 232 225 87 66 175 159 154 56 69 241 181 99 196 71 255 16 63 241 32 94 44 131 6 14 255 198 155 232 157 126 20 237 47 81 244 6 201 138 91 130 159 5 122 115 65 96 109 249 5 225 212 49 70 191 124 45 152 16 46 238 19 150 21 202 0 81 113 147 108 158 153 6 219 18 202 251 250 20 182 202 31 92 240 19 60 176 114 27 3 217 36 72 4 1 13 5 111 189 225 141 44 47 47 97 150 169 29 233 84 159 234 187 161 93 222 22 217 203 236 239 28 122 128 29 132 221 73 105 106 183 144 194 65 156 26 163 225 136 183 190 249 245 169 225 194 166 137 44 178 13 30 220 119 23 159 187 228 131 200 211 127 130 124 227 151 145 162 64 15 191 10 202 49 241 209 47 224 223 253 115 196 99 34 143 114 37 14 17 246 253 250 107 41 86 31 135 254 0 45 250 201 154 245 44 111 161 64 139 62 58 80 244 228 211 244 254 249 181 184 43 122 100 132 44 7 44 106 106 218 205 194 119 207 45 102 99 136 247 23 20 182 202 231 46 250 0 15 238 187 141 33 27 20 146 186 162 85 132 183 190 249 117 44 45 13 137 101 185 75 85 79 114 7 241 76 149 83 4 221 227 201 174 123 142 1 102 5 222 22 118 19 14 102 24 67 79 192 112 212 31 112 227 27 94 151 10 57 102 244 152 50 98 147 135 87 238 228 15 47 249 32 242 189 175 226 223 248 21 236 248 183 114 53 205 65 67 106 168 168 45 168 192 123 203 8 194 232 87 95 67 56 253 36 50 232 33 161 241 4 219 111 13 6 208 160 104 81 160 5 232 233 103 144 95 188 6 119 208 195 67 100 169 107 249 158 227 190 152 224 19 37 62 28 40 108 149 63 188 232 39 121 120 229 118 70 178 73 65 68 204 81 17 110 124 227 107 88 26 12 176 50 229 248 210 234 90 146 134 75 171 77 72 219 69 174 118 23 212 34 167 129 53 103 185 131 176 235 238 89 111 43 75 194 14 49 150 140 70 3 254 218 27 174 111 194 129 151 244 216 228 193 125 119 243 135 151 124 136 240 236 127 64 159 248 2 170 61 194 37 175 195 123 75 169 173 202 27 43 169 148 0 132 225 47 95 139 158 126 10 29 6 36 244 91 74 144 91 184 84 90 104 63 241 2 133 130 172 61 139 253 179 171 82 127 223 129 229 212 174 21 147 181 183 221 190 59 176 229 216 99 66 17 87 249 194 197 31 228 161 253 239 162 111 235 20 113 138 120 68 84 184 241 141 175 101 105 105 41 175 33 96 123 75 218 182 206 35 233 40 70 245 88 171 232 178 88 10 80 107 175 87 242 216 89 216 219 147 196 204 19 184 51 157 70 134 131 1 111 126 221 107 16 21 196 35 61 47 25 177 206 35 251 238 224 11 151 124 152 176 254 56 122 252 27 40 78 184 224 149 120 24 180 148 192 107 37 160 88 198 17 138 95 122 21 122 234 187 104 15 164 195 1 116 129 160 86 113 119 227 121 202 127 122 101 234 252 93 89 66 122 10 174 120 169 77 235 126 133 250 199 142 125 71 40 236 52 127 116 201 7 121 248 192 29 140 216 164 208 8 234 168 42 127 237 13 215 179 52 76 150 95 147 60 115 204 191 210 43 163 173 204 210 234 107 248 143 1 3 204 8 124 39 97 123 91 97 58 225 33 121 130 165 97 159 55 94 127 109 114 38 49 162 22 25 216 152 135 87 238 226 143 46 254 41 116 245 113 228 249 251 80 140 226 130 171 19 79 48 171 4 90 64 111 37 157 216 47 92 141 172 62 131 42 29 106 119 182 161 132 241 9 182 254 241 203 146 107 31 46 131 246 112 11 53 29 231 49 75 200 29 182 28 190 103 20 241 52 95 188 228 127 231 145 125 119 50 244 117 122 30 81 75 45 229 55 188 238 58 70 195 1 165 197 84 205 107 119 166 180 111 82 229 250 85 198 210 100 149 57 61 128 32 139 172 0 242 130 133 221 206 19 27 143 1 209 156 105 25 25 13 134 188 225 181 215 161 65 17 34 133 148 12 100 131 135 15 220 193 23 179 39 144 147 15 164 24 125 232 229 9 8 206 85 130 101 16 33 254 179 171 208 205 231 102 151 96 54 199 230 9 198 63 127 52 173 248 233 47 231 90 4 16 179 197 71 234 133 77 76 29 127 46 82 216 105 190 116 233 135 120 244 192 157 140 100 157 158 79 129 18 13 240 198 215 93 199 96 56 162 140 150 219 254 101 6 240 207 148 171 103 158 171 195 1 185 182 1 123 238 5 246 156 9 124 65 194 110 129 198 217 98 135 187 51 141 37 131 65 143 215 190 250 154 92 103 200 5 36 31 243 240 129 59 249 226 37 63 69 88 123 2 61 245 96 138 181 7 143 66 49 207 19 244 146 18 32 76 62 122 5 140 79 204 23 254 71 143 166 210 114 63 89 62 46 184 105 87 9 204 145 169 33 39 75 122 118 154 47 95 246 83 60 118 240 174 196 237 19 113 113 68 148 55 188 250 186 228 246 45 230 166 81 153 233 76 222 69 25 234 174 227 246 123 230 120 171 133 4 129 47 68 216 222 77 31 183 225 6 115 98 105 12 250 3 94 123 221 43 81 73 171 115 130 79 24 248 6 143 28 184 147 63 190 236 103 40 54 142 161 167 30 65 204 144 149 151 128 246 155 204 163 138 165 218 67 122 9 19 140 127 254 40 140 79 182 220 254 201 70 248 189 44 252 170 177 164 6 125 164 245 99 209 145 245 146 34 158 230 203 151 255 52 143 28 190 139 30 235 4 74 92 12 145 192 235 95 253 42 134 163 97 234 226 153 141 247 115 210 189 185 118 221 142 14 231 168 16 116 206 120 128 23 35 108 230 102 140 105 17 102 204 158 224 53 175 188 58 175 208 169 60 193 6 15 31 184 147 63 190 244 167 41 198 223 65 215 30 79 11 194 246 93 148 92 127 251 139 103 149 224 163 47 205 5 166 41 227 143 190 116 187 240 183 245 58 2 165 163 155 19 138 242 20 255 238 232 207 240 196 193 187 24 249 102 106 224 36 82 136 242 250 235 174 97 52 26 164 46 158 14 92 111 181 162 159 201 3 204 195 7 26 206 65 0 216 203 1 17 179 94 96 30 57 228 59 181 145 237 254 164 187 83 186 209 239 247 185 246 21 87 115 255 131 143 128 59 193 35 67 95 231 177 131 119 33 42 188 237 169 15 81 154 99 75 23 195 210 5 248 198 115 169 130 88 119 136 84 74 176 130 151 155 140 63 122 101 254 26 69 122 163 164 52 243 220 172 120 30 106 177 69 17 79 243 167 47 253 8 79 28 186 155 97 92 67 242 92 131 160 202 117 215 92 205 112 56 72 181 252 186 1 61 209 20 169 78 170 219 173 252 204 61 118 185 194 2 26 116 177 21 160 238 90 193 207 32 108 230 105 201 110 170 0 110 68 115 134 189 30 175 186 250 42 238 127 232 17 176 152 233 210 13 30 219 127 23 2 188 245 169 15 83 138 99 195 11 97 120 24 31 31 159 163 4 69 242 4 121 30 129 244 150 27 50 105 206 89 139 27 193 179 240 175 248 8 79 28 124 55 67 91 35 200 20 15 142 168 112 237 53 175 96 216 239 17 179 167 46 163 161 164 181 130 177 244 220 163 156 206 163 204 165 233 121 211 36 60 231 252 170 218 209 147 34 4 68 210 231 177 136 139 67 171 120 41 249 102 187 9 187 163 221 187 170 126 215 177 184 227 98 244 251 73 9 30 124 248 17 240 146 144 151 108 63 118 224 46 112 120 235 119 62 76 233 142 13 15 195 96 63 62 62 149 151 97 181 243 107 69 92 119 20 196 118 225 175 242 239 175 252 89 142 93 240 110 70 113 29 179 41 209 140 50 150 92 125 197 203 216 154 148 172 111 108 97 22 235 182 52 73 166 143 106 203 11 230 199 82 147 170 204 189 2 83 156 74 147 234 149 79 211 41 26 148 241 214 116 79 3 193 158 135 0 203 94 224 5 11 251 140 175 171 28 129 97 238 12 122 5 87 191 252 10 30 122 228 113 112 35 120 137 248 6 143 31 190 27 81 225 166 99 31 162 196 177 222 33 232 237 195 167 107 121 33 166 52 26 43 187 251 179 182 240 191 244 146 159 230 177 229 219 8 171 207 177 85 117 39 225 92 115 229 203 208 16 40 99 26 133 19 66 194 30 170 25 3 105 213 202 17 210 178 127 154 199 228 44 89 189 180 120 56 173 57 222 107 212 118 78 49 128 127 159 194 110 74 140 221 215 165 12 193 232 247 250 92 125 213 203 120 232 177 39 211 98 81 166 244 108 35 121 2 129 155 158 204 152 160 127 0 47 134 80 142 103 148 224 236 132 255 199 151 253 20 15 239 187 157 254 100 21 181 73 138 201 42 188 252 202 43 24 246 122 53 181 91 47 79 144 180 110 81 37 151 136 85 218 171 211 58 200 168 237 234 119 107 177 19 82 155 155 238 49 16 44 206 133 236 125 7 41 191 24 97 239 164 66 238 142 199 72 175 40 184 250 165 71 121 228 201 99 224 70 33 83 2 155 60 113 232 30 68 148 27 159 248 32 37 142 247 86 210 114 109 219 202 223 35 103 33 252 211 124 233 37 63 195 227 251 239 100 201 55 40 36 98 65 64 2 87 30 61 202 112 208 111 22 171 230 85 190 201 78 155 197 37 149 197 58 142 74 43 174 203 217 153 114 144 80 95 27 201 159 191 184 30 160 75 248 239 126 178 103 243 154 246 243 62 223 159 152 65 209 239 113 197 209 203 121 236 216 83 105 218 136 76 233 217 58 143 31 122 55 42 194 91 30 255 32 224 196 34 117 15 215 227 88 118 19 126 121 154 47 31 253 187 60 126 240 110 6 182 158 214 231 171 32 40 87 30 189 156 225 160 159 203 185 158 45 60 13 152 208 150 181 183 133 94 11 191 213 224 209 254 187 253 216 236 232 27 3 36 211 214 42 11 30 2 230 118 47 187 239 142 240 207 66 216 59 189 206 61 77 230 232 23 129 43 46 191 148 39 142 61 157 202 175 90 162 182 193 147 23 220 131 32 220 240 196 255 150 148 64 134 157 197 165 59 9 255 223 29 253 187 60 126 232 221 12 108 61 117 239 154 17 20 94 118 244 114 6 253 94 90 194 46 85 114 151 44 190 94 149 156 133 218 22 186 180 255 101 54 10 249 14 217 97 85 35 72 247 131 238 189 7 216 251 196 210 109 199 126 64 223 145 54 158 233 34 158 247 186 78 143 124 247 117 213 52 174 65 175 207 203 142 94 150 98 165 24 54 221 100 114 250 57 190 166 111 231 243 23 125 136 162 60 77 176 205 212 64 50 115 54 226 70 176 36 252 175 188 244 35 60 113 248 30 70 182 158 86 236 136 163 65 185 226 232 81 6 189 94 158 84 70 158 42 146 250 12 153 37 115 84 235 127 171 101 103 154 39 140 104 155 223 247 52 143 96 222 173 122 94 90 5 162 60 219 230 63 22 12 48 223 165 157 209 178 207 194 11 180 95 95 89 156 1 65 11 246 31 216 207 195 143 31 67 84 40 164 96 24 34 143 28 184 147 16 148 183 63 253 211 16 32 50 192 171 148 172 18 126 60 205 159 188 236 239 241 228 225 119 51 136 171 168 102 146 7 225 232 75 46 101 208 47 48 39 143 135 147 142 224 235 243 104 45 44 21 153 33 128 60 185 242 234 231 105 144 206 239 168 220 123 85 49 174 159 55 207 238 95 145 189 109 7 216 251 16 208 137 99 231 64 216 93 130 206 235 74 218 250 120 139 141 173 9 147 233 148 160 202 75 46 185 136 103 159 59 14 2 61 137 244 216 224 177 67 239 70 85 121 219 83 31 130 176 159 72 63 1 45 155 100 146 231 103 121 242 200 61 12 202 53 84 45 89 159 6 46 191 248 18 250 189 144 72 24 111 4 65 46 252 236 38 248 54 216 19 173 158 147 110 167 215 76 72 82 153 97 80 53 143 138 205 100 208 194 122 128 60 73 133 232 254 162 227 251 238 108 96 51 17 36 121 67 225 244 230 152 205 241 22 209 172 94 244 41 34 12 250 61 46 189 248 34 158 125 254 249 180 188 11 35 176 145 129 161 114 211 147 31 68 194 114 82 128 184 198 87 175 252 63 120 234 200 123 25 149 171 136 88 234 54 83 225 210 75 46 162 87 4 34 158 221 117 219 221 107 115 62 59 8 190 121 92 234 133 170 204 120 174 157 175 167 212 33 78 68 40 170 254 5 95 96 15 144 198 51 230 241 172 123 32 236 238 21 145 60 122 198 88 93 223 100 125 60 169 11 41 42 51 23 214 160 40 10 46 190 240 8 207 63 127 28 21 199 125 74 240 13 142 93 112 15 95 13 194 13 143 252 56 0 127 246 242 191 207 83 71 222 195 192 19 189 107 238 20 65 185 228 194 35 20 69 145 135 70 202 182 88 239 210 158 37 80 45 70 221 174 20 117 77 64 100 190 224 101 247 11 211 93 224 186 183 65 96 207 61 64 245 219 196 230 115 214 103 43 236 78 29 173 37 248 211 107 155 108 140 39 121 120 195 156 11 218 242 14 184 81 132 192 69 23 30 225 185 147 167 210 84 49 73 140 225 177 11 238 161 103 155 136 8 79 93 248 30 6 182 65 160 4 21 122 40 23 29 57 76 209 219 93 248 161 45 224 138 240 153 17 252 54 161 75 53 129 208 59 180 240 220 203 34 13 176 174 138 65 123 221 19 176 183 30 160 26 169 210 250 161 47 84 216 204 17 124 52 99 173 37 120 213 249 150 84 135 0 151 92 219 73 202 16 138 130 11 15 31 226 248 241 83 168 56 42 83 212 215 57 118 209 15 160 34 244 125 35 245 237 167 72 203 69 23 28 162 215 11 59 10 191 9 53 173 37 232 186 139 224 43 161 119 210 64 221 118 238 204 176 157 13 87 16 154 185 133 139 14 2 43 170 114 167 16 224 103 165 71 82 15 134 62 189 62 102 99 115 43 21 241 118 16 124 39 35 64 50 104 242 60 1 76 114 118 160 92 120 228 16 167 78 159 198 5 122 234 168 148 89 73 242 138 102 85 142 28 60 68 175 151 199 201 238 32 252 89 65 215 238 121 142 224 165 58 143 57 33 96 55 107 238 180 130 187 215 169 228 226 122 128 118 191 35 153 162 203 163 86 206 76 32 250 182 31 190 49 222 98 117 115 12 238 187 10 190 65 206 210 226 222 147 133 213 228 75 158 195 91 168 114 232 224 126 78 158 94 75 46 85 83 10 88 9 241 240 193 253 132 240 194 132 95 9 165 173 12 109 193 159 73 248 243 24 193 14 3 72 211 18 174 90 44 120 8 72 195 242 118 181 116 223 1 24 86 96 110 50 141 172 174 175 51 141 150 5 112 102 173 223 201 250 37 43 96 173 28 164 206 154 67 7 246 179 182 182 158 210 200 140 172 15 237 223 71 17 138 60 243 87 91 197 157 221 133 175 162 157 248 239 82 9 172 11 6 219 217 75 151 17 148 29 195 169 182 174 87 13 116 23 57 11 16 153 31 203 206 12 28 147 208 78 173 109 176 89 197 121 57 123 119 183 155 245 87 99 159 147 112 188 158 251 115 96 255 126 214 215 215 113 17 14 236 91 73 27 54 144 134 81 107 253 57 51 104 191 35 124 109 166 139 105 99 245 213 196 208 109 130 111 241 4 59 225 151 157 60 162 153 229 53 140 138 44 122 45 64 21 44 111 162 112 86 197 35 17 198 211 9 167 214 54 91 238 94 94 220 15 221 213 250 187 214 88 4 101 101 101 57 229 215 153 96 169 120 253 54 154 159 69 251 219 132 159 173 190 26 56 213 77 1 187 130 159 39 252 246 239 172 136 31 237 40 67 154 69 172 45 156 225 139 153 6 86 51 119 3 234 74 156 237 9 154 81 136 202 197 158 90 219 96 60 157 110 179 154 179 47 64 166 213 55 82 181 76 236 96 253 205 86 60 205 132 239 52 245 171 77 182 52 188 126 37 157 48 215 237 119 133 31 230 45 243 154 81 132 234 187 189 230 12 188 30 120 57 91 34 110 95 43 151 132 167 234 218 194 162 98 128 106 239 157 180 69 195 206 30 160 186 48 101 52 78 172 173 227 121 225 36 47 114 249 115 18 126 22 184 52 159 191 147 245 55 163 131 165 94 154 157 86 225 40 154 155 110 182 45 214 96 254 58 190 29 133 63 239 123 183 101 4 186 35 6 144 182 82 2 132 208 2 156 11 28 2 170 153 251 59 122 251 172 33 235 227 45 214 54 199 157 233 219 47 86 233 180 77 153 182 46 176 206 97 218 106 11 202 224 175 118 181 210 184 254 42 132 52 44 223 76 170 231 173 152 191 131 224 183 131 198 221 51 130 121 130 159 253 91 91 139 69 22 152 8 74 51 246 64 49 143 157 14 168 234 194 159 92 223 100 58 157 118 44 228 197 187 29 175 58 46 107 240 87 7 214 22 194 175 26 51 234 243 201 117 245 74 64 117 251 150 176 157 195 111 51 124 52 68 215 60 97 207 21 254 28 108 176 29 7 156 89 17 218 37 230 133 246 0 146 183 79 163 213 118 33 121 16 212 169 181 13 162 251 158 197 178 218 253 183 154 44 107 247 175 77 124 213 153 225 210 85 235 117 199 250 153 101 250 168 5 46 25 228 117 173 154 51 10 127 246 177 89 37 216 73 17 218 130 159 245 6 123 92 10 216 91 5 208 60 51 191 51 180 155 20 239 79 174 173 207 164 125 223 63 230 168 220 127 77 179 86 157 56 204 153 30 222 22 120 43 190 59 212 177 191 41 56 117 179 9 105 53 119 250 28 193 110 255 123 231 245 255 243 73 161 157 48 64 163 4 77 184 210 197 245 0 158 103 240 164 93 190 210 201 111 77 167 172 111 142 207 76 124 124 31 238 191 211 88 155 221 127 245 224 172 251 175 21 39 11 89 209 36 216 246 235 132 186 137 99 214 245 119 50 0 120 65 194 239 42 1 13 222 96 123 107 150 215 63 197 186 239 211 69 77 3 29 196 53 207 219 111 132 191 186 177 185 55 241 126 39 247 63 147 93 236 234 254 171 148 177 101 77 82 181 219 207 52 109 54 177 159 29 93 191 110 179 254 51 11 191 122 141 207 9 77 243 210 102 151 80 247 3 192 222 15 140 222 227 16 224 136 166 33 204 155 211 9 27 155 91 231 68 248 243 200 31 118 65 255 181 80 219 203 173 42 70 85 183 151 146 219 177 95 90 27 14 239 230 210 231 197 252 138 52 234 52 139 136 118 194 213 78 215 165 114 253 50 19 35 84 23 152 7 16 85 138 160 108 77 167 172 173 143 9 65 95 60 171 247 130 226 191 118 46 84 227 13 206 194 253 179 61 239 111 35 255 58 246 207 132 176 29 233 222 29 132 95 175 241 159 3 4 207 166 34 200 94 135 208 186 122 187 151 76 96 218 94 139 241 214 164 229 46 207 129 213 87 187 108 58 219 251 228 171 231 178 98 248 78 41 87 46 226 108 219 108 34 247 249 123 203 19 48 3 50 183 51 125 219 179 130 121 97 65 91 74 241 253 212 91 22 84 1 218 96 64 57 71 14 127 87 118 177 242 66 237 181 158 218 82 12 109 1 48 207 128 106 246 202 86 224 79 187 93 155 115 60 69 147 82 234 14 158 128 25 188 176 55 214 43 139 172 0 66 81 4 244 92 12 182 223 49 255 247 221 205 162 21 255 183 121 131 150 231 234 184 255 54 9 36 121 111 193 57 121 124 123 165 206 252 112 224 123 44 252 133 14 1 9 160 132 162 168 173 241 47 250 232 148 126 219 130 109 197 255 202 75 105 221 168 217 70 255 222 241 10 77 123 155 238 72 218 236 140 3 232 196 252 61 51 49 101 49 231 4 122 110 163 238 229 194 197 95 212 49 187 204 83 207 38 128 206 139 255 51 47 235 160 127 186 29 60 237 92 126 231 82 175 159 147 234 157 238 241 2 209 61 5 129 65 52 247 89 9 231 202 5 120 45 244 38 3 232 16 64 187 1 192 157 34 233 76 252 135 110 249 118 158 18 181 189 204 118 175 112 110 172 191 162 219 23 56 4 104 11 100 157 187 32 160 187 40 199 78 238 105 22 0 86 193 123 118 59 30 223 246 93 62 23 253 207 158 199 188 94 191 115 225 9 23 183 31 192 211 24 214 250 111 115 76 124 207 151 50 181 27 60 188 154 168 85 197 221 180 165 39 150 173 79 133 116 14 121 5 113 197 164 181 55 157 78 37 94 111 24 228 186 218 210 20 98 218 255 122 251 111 149 186 33 165 195 225 183 202 210 231 2 0 47 238 194 144 44 236 24 61 109 206 148 151 107 237 117 16 136 26 8 24 18 4 179 140 178 115 99 73 90 72 153 158 83 17 212 83 86 34 158 23 139 132 106 251 88 242 106 161 202 157 75 158 217 83 211 126 205 22 114 153 138 245 92 98 174 73 161 140 35 124 102 224 132 238 210 236 177 96 89 224 222 41 64 187 177 227 134 215 94 151 247 234 57 55 124 64 234 223 107 199 234 86 124 148 102 246 142 75 211 42 210 233 56 170 238 123 222 222 167 254 28 239 48 151 73 41 224 47 148 212 56 155 20 120 15 21 107 207 20 64 69 139 241 230 22 91 147 105 189 156 249 92 93 55 119 161 61 95 164 233 62 59 219 25 68 219 135 88 157 205 58 230 51 247 185 182 144 143 239 181 210 11 33 40 91 227 45 84 180 88 60 5 80 217 255 200 177 239 240 208 19 199 90 83 194 207 129 207 250 11 96 24 252 47 239 171 119 117 253 90 239 121 164 251 23 48 4 200 45 69 8 67 87 157 192 57 26 108 187 192 135 159 123 249 39 71 43 210 7 198 139 8 2 159 202 215 161 252 75 182 149 191 202 135 100 153 201 194 41 128 187 255 205 104 118 212 204 202 180 172 109 161 66 128 190 16 175 180 0 33 96 251 249 166 16 160 170 90 4 213 39 129 95 88 40 5 48 243 173 171 46 191 108 227 138 163 47 153 184 165 78 6 57 135 240 249 140 67 230 254 106 130 64 125 252 216 119 122 143 30 123 122 107 225 60 128 185 77 134 163 193 116 208 239 109 77 166 165 199 24 231 45 246 120 49 61 173 219 222 211 144 75 82 205 130 200 243 179 118 77 3 27 130 186 155 6 74 78 246 118 74 3 43 214 249 133 158 187 188 64 85 56 155 207 151 193 112 96 230 54 89 192 16 64 116 247 41 16 191 122 239 125 254 220 241 19 123 158 179 86 215 83 53 16 144 68 210 84 229 86 77 235 231 234 149 58 21 17 164 153 8 170 158 15 213 98 207 144 134 69 104 104 118 27 119 201 251 11 166 231 171 207 9 173 70 142 34 132 154 121 44 180 221 249 83 45 222 108 150 143 157 105 12 236 139 113 4 102 22 221 61 46 34 8 44 221 165 4 202 16 196 123 69 145 54 93 150 23 109 233 115 45 162 30 167 158 86 239 72 80 113 21 65 66 16 113 247 66 53 53 164 36 33 136 6 117 113 79 187 133 229 177 50 105 193 167 230 161 19 218 25 240 80 239 35 152 132 156 86 141 229 41 79 34 226 205 42 29 196 37 239 233 148 94 88 187 37 115 115 109 154 57 191 223 78 254 134 155 78 23 32 100 160 189 112 76 160 121 140 211 42 11 16 61 55 19 45 154 53 127 121 249 150 206 52 92 84 43 119 171 125 1 91 5 156 250 117 173 154 125 53 209 219 243 220 191 46 195 216 52 117 204 189 85 212 112 155 42 206 245 137 118 39 239 30 123 0 201 251 148 46 156 7 136 102 150 54 86 241 28 143 119 79 1 140 157 11 123 213 115 179 177 55 175 149 101 158 115 53 105 208 179 110 215 78 55 21 209 186 98 108 14 161 213 207 215 13 220 141 53 211 169 5 152 139 104 22 174 183 190 72 102 149 192 193 220 93 91 74 176 91 90 116 182 41 147 184 187 146 246 47 91 52 5 144 24 221 74 204 98 119 194 209 238 216 241 133 62 87 237 177 232 121 57 186 185 161 18 170 94 128 106 127 54 51 55 194 76 79 189 39 37 169 175 184 180 225 189 72 222 154 37 208 174 6 202 246 209 45 70 107 181 78 231 243 107 37 72 167 239 18 108 143 61 129 120 138 58 113 17 67 64 105 230 113 26 99 233 243 215 134 239 213 170 182 118 76 116 153 17 102 182 202 249 223 85 119 19 91 218 118 222 187 38 47 173 151 185 120 202 14 114 193 168 101 217 29 65 187 116 214 242 137 187 103 204 32 184 123 46 66 238 136 3 230 61 46 115 60 31 45 124 129 44 34 6 72 33 192 39 177 44 75 119 247 191 140 2 154 145 54 216 108 187 99 151 38 135 107 92 182 96 185 47 48 25 116 104 188 128 121 94 225 76 115 63 43 204 124 107 247 166 15 177 211 63 32 149 23 216 75 60 144 226 142 44 100 8 72 155 171 149 101 140 214 5 41 178 67 44 63 155 120 63 27 31 147 115 53 75 168 223 220 9 146 167 55 139 207 205 36 170 208 96 166 18 66 54 80 105 109 43 41 230 238 138 72 173 3 105 42 121 5 18 19 135 208 18 184 183 5 158 192 35 82 121 189 182 34 84 94 192 192 53 59 136 179 205 118 182 59 181 6 107 176 135 181 150 61 245 0 41 3 144 18 183 23 186 203 253 247 245 131 58 110 217 12 15 161 174 227 215 87 79 196 172 142 219 85 36 168 173 221 102 113 128 181 87 228 206 184 122 239 32 254 60 199 111 155 240 187 127 87 231 241 34 61 129 53 74 225 44 42 8 156 186 251 4 204 134 131 190 175 109 140 45 155 153 206 249 205 109 173 54 182 163 247 89 36 111 45 142 188 13 246 52 131 249 54 24 49 146 69 155 185 105 232 2 49 173 239 39 183 110 173 14 241 26 181 123 122 99 34 118 13 149 32 102 238 154 211 73 171 67 75 66 228 6 162 109 5 169 201 209 58 20 164 237 201 12 76 210 119 152 116 123 198 206 38 35 106 207 222 92 64 30 0 204 205 98 25 45 14 122 61 95 89 30 86 19 62 173 106 187 218 197 234 109 151 199 182 189 167 217 166 218 77 114 28 119 9 245 64 200 156 130 117 133 85 103 15 141 183 176 148 73 88 77 242 167 160 82 187 254 124 222 245 103 205 137 253 70 91 41 182 213 71 44 179 129 98 224 25 111 168 105 251 183 52 215 197 182 99 86 239 254 238 20 138 166 11 234 1 136 230 82 186 197 136 187 143 122 125 130 104 189 60 252 28 17 35 117 62 95 185 240 10 8 118 160 125 37 85 51 33 4 111 39 4 180 93 72 173 44 73 180 222 154 45 152 10 70 51 77 162 29 55 95 1 203 237 74 208 93 46 230 121 247 249 204 40 238 112 93 218 223 81 93 187 32 57 142 45 164 2 8 165 139 197 104 30 211 14 46 206 160 215 19 150 96 125 115 156 127 83 77 141 206 3 128 103 67 132 212 215 199 204 68 66 168 200 159 249 56 0 220 50 202 207 224 143 92 168 76 46 216 205 92 130 166 141 46 205 67 147 13 36 138 193 93 83 251 89 235 244 26 87 159 8 249 20 255 235 174 196 29 218 225 219 156 81 62 79 220 220 36 241 74 62 155 186 74 179 59 90 61 118 189 217 107 114 65 211 64 19 243 73 52 143 34 21 125 238 54 232 245 40 66 208 106 68 12 141 198 183 99 219 188 24 216 126 126 246 208 110 172 111 225 128 76 212 84 24 161 2 232 46 226 121 49 177 121 194 2 38 34 102 184 138 165 238 95 175 36 147 35 131 16 114 8 1 12 147 32 106 238 149 210 185 54 161 160 222 245 197 16 83 92 119 192 58 228 239 205 75 21 36 227 142 250 71 118 174 67 234 171 72 26 162 130 19 16 55 239 201 130 82 193 83 115 162 91 140 213 98 139 138 127 43 130 218 225 125 203 245 144 168 25 37 56 99 204 103 62 237 155 98 125 102 4 219 249 184 213 158 63 97 132 86 24 176 124 85 43 33 36 140 34 77 139 55 115 243 250 250 111 203 147 58 173 237 166 91 82 179 244 63 49 105 194 129 181 221 122 59 230 55 56 165 201 26 26 240 88 191 199 186 31 98 139 154 5 96 142 71 199 99 90 193 40 121 218 126 53 177 45 112 104 223 10 167 54 54 125 58 157 214 88 46 135 132 51 101 5 115 209 114 230 3 76 204 149 144 32 96 182 48 205 97 192 4 212 220 188 29 6 234 212 45 123 10 147 92 187 104 93 248 232 34 65 220 49 196 69 188 27 223 83 183 75 43 39 215 214 137 121 59 29 145 42 198 181 42 131 45 46 162 98 14 165 202 66 218 191 211 219 132 66 53 207 42 105 252 98 50 129 56 165 71 143 41 119 154 153 131 155 252 42 7 151 151 216 216 106 6 69 158 193 27 236 238 21 26 87 159 246 115 162 174 11 212 124 189 215 214 222 202 6 146 226 212 224 173 66 253 201 186 107 204 144 124 75 39 255 207 73 95 10 23 196 6 112 218 252 92 46 131 190 132 254 183 49 136 115 198 194 181 61 75 199 115 164 69 47 22 221 61 44 180 7 136 59 52 43 72 107 167 228 229 225 192 7 189 94 53 42 54 207 97 17 147 237 185 191 238 150 35 183 194 128 10 98 66 93 169 155 155 13 120 66 84 117 236 141 64 209 120 1 50 22 72 113 185 2 150 45 92 151 71 246 86 161 64 157 244 121 179 218 217 178 122 19 17 173 103 12 184 153 136 106 75 9 42 62 160 242 6 51 24 160 235 97 60 253 103 11 201 4 74 242 0 83 7 211 140 209 218 69 144 217 180 38 4 229 200 129 21 78 175 109 166 97 209 85 108 239 166 68 118 38 166 176 14 3 201 91 155 72 215 202 42 33 183 88 60 203 87 219 234 157 73 82 93 49 115 9 212 49 190 162 135 235 5 133 85 161 40 51 210 130 16 113 11 115 173 161 235 217 218 56 66 37 147 250 162 72 142 241 59 98 128 252 35 37 36 54 42 147 142 11 201 4 150 142 151 238 209 76 108 54 174 87 238 173 107 225 142 30 88 89 178 97 57 213 83 107 155 52 49 79 218 19 88 102 235 9 179 159 155 248 249 220 132 234 110 226 18 92 220 197 68 44 84 236 95 130 245 90 121 1 85 37 198 232 38 66 47 13 181 16 79 73 87 26 30 151 145 101 114 243 82 41 129 88 142 206 173 77 97 61 38 124 32 218 4 248 170 155 40 165 156 137 253 107 245 139 166 153 35 228 69 169 141 145 88 213 219 216 50 156 244 229 106 158 170 139 190 168 60 64 18 76 52 75 30 32 173 12 150 74 155 171 31 52 211 234 156 98 222 176 215 247 225 161 158 159 90 223 204 27 70 212 0 241 133 213 14 114 62 56 83 161 179 150 23 168 44 219 202 104 157 13 35 122 82 36 4 80 245 219 180 230 67 68 240 150 18 164 77 163 85 91 211 4 82 156 104 199 250 25 228 111 2 221 69 166 173 105 160 141 245 215 156 244 54 47 71 8 152 57 57 220 45 40 6 112 182 245 2 156 105 7 145 134 192 129 3 43 75 140 6 131 102 203 152 29 62 99 222 23 123 45 100 234 50 172 184 99 34 117 137 88 51 221 82 198 152 182 140 33 13 149 58 117 122 53 109 25 83 20 72 6 139 180 150 183 73 251 94 71 9 4 69 83 81 41 163 94 203 77 123 179 105 95 93 60 202 185 167 204 153 8 62 151 241 170 82 77 51 98 172 178 216 197 172 6 26 120 76 184 136 206 108 158 221 20 162 250 145 137 30 112 122 69 224 130 131 7 216 216 28 215 155 70 113 6 69 104 190 203 147 245 110 247 2 41 110 136 99 102 105 211 168 170 139 55 83 181 199 79 157 206 155 70 21 120 22 242 252 221 57 218 74 144 169 159 214 68 148 140 38 242 102 84 59 32 255 206 228 79 111 163 228 246 69 161 229 136 234 212 53 111 92 188 128 10 32 148 121 14 67 53 121 161 10 96 219 44 158 179 80 138 165 225 128 209 176 207 234 70 179 109 220 110 175 223 205 11 120 158 42 86 154 213 219 198 169 104 222 216 76 147 176 220 121 238 228 169 180 109 156 166 16 150 32 254 153 149 32 117 23 211 29 51 82 141 144 201 138 176 173 103 176 213 97 212 137 5 115 174 87 106 123 16 204 74 114 175 77 185 160 30 128 152 75 107 162 224 62 111 210 229 89 236 37 216 228 197 42 7 86 150 124 101 105 200 218 122 179 113 100 179 190 67 206 232 5 170 26 114 52 75 27 71 6 80 13 76 17 65 11 87 4 37 18 136 16 141 103 158 63 222 108 28 153 148 32 97 245 157 149 64 82 109 162 217 10 70 58 125 102 146 211 183 102 138 121 91 9 206 54 84 26 36 12 224 21 27 177 136 10 224 110 117 47 72 119 124 95 141 220 119 81 138 106 84 79 85 220 177 28 26 84 69 253 192 190 101 246 45 143 100 117 125 211 103 20 65 218 113 52 130 5 65 43 63 238 34 82 150 165 61 119 242 148 138 99 238 65 205 123 68 89 230 202 103 126 19 17 177 199 47 254 47 180 103 155 4 166 56 102 207 60 119 92 47 58 114 152 94 175 192 196 45 43 65 158 39 210 116 38 103 96 152 138 1 25 7 116 118 9 169 208 188 215 165 92 188 30 81 159 104 254 90 149 118 221 112 219 16 132 88 132 234 178 46 166 2 120 106 9 79 231 172 34 210 37 54 172 85 238 235 238 30 223 40 69 165 221 38 13 45 26 169 107 243 74 86 132 238 230 209 117 157 14 199 29 15 33 170 167 213 64 101 140 60 255 252 113 81 81 179 16 112 47 74 147 37 189 226 249 79 250 235 31 251 112 42 173 233 200 158 60 242 94 250 190 238 193 38 76 221 236 123 207 62 151 54 143 238 21 158 61 129 181 194 129 8 196 152 170 82 85 82 87 63 89 3 62 73 185 94 103 157 64 165 12 84 250 68 221 67 207 182 118 182 6 89 32 34 22 173 74 149 23 182 37 44 149 66 168 219 176 234 199 119 139 117 115 27 229 101 78 170 147 21 65 69 57 184 178 204 129 149 101 86 103 182 143 175 92 44 65 40 203 50 111 31 175 4 23 140 30 165 140 184 242 249 79 198 27 158 252 32 177 119 16 128 55 61 250 1 12 225 216 145 247 210 247 85 132 41 101 140 124 231 123 207 228 237 227 139 185 152 160 254 174 42 133 147 220 244 65 23 252 213 107 14 91 133 171 142 219 63 67 255 92 205 110 154 86 244 245 66 166 129 105 70 87 26 145 181 45 144 73 83 198 237 164 191 217 106 183 17 61 210 101 86 51 40 111 250 251 29 84 220 125 255 104 40 7 150 70 190 62 222 98 99 60 97 82 78 69 220 217 154 76 121 246 249 227 105 244 147 227 174 129 146 33 87 157 248 148 222 244 212 135 189 44 246 19 165 159 63 59 112 195 163 63 1 110 60 113 193 187 173 31 203 148 48 184 113 236 233 239 233 229 23 95 76 175 95 99 130 180 100 212 29 79 157 93 137 26 202 132 97 99 220 181 34 72 94 46 175 89 25 170 159 82 83 191 59 173 162 206 140 164 86 73 65 105 166 73 225 246 110 237 241 94 131 192 170 18 220 25 223 238 93 156 176 221 234 119 121 221 46 94 194 218 45 223 163 225 128 229 165 33 22 157 147 107 171 60 242 196 119 81 17 10 73 130 139 30 120 197 241 143 115 211 119 255 158 197 112 136 40 3 60 167 105 81 7 192 126 110 120 244 199 209 184 201 19 135 239 182 16 45 131 60 183 199 159 122 138 203 47 187 148 65 191 215 16 62 40 161 241 6 86 173 87 50 18 145 164 137 239 77 11 87 146 12 45 117 7 53 45 14 57 77 180 250 111 109 87 124 235 95 109 245 174 33 96 25 89 239 153 2 252 127 3 0 16 83 71 47 72 13 197 151 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!CSSDockFileLibrary methodsFor: 'images'!historyPng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 128 0 0 0 128 8 6 0 0 0 195 62 97 203 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 10 79 105 67 67 80 80 104 111 116 111 115 104 111 112 32 73 67 67 32 112 114 111 102 105 108 101 0 0 120 218 157 83 103 84 83 233 22 61 247 222 244 66 75 136 128 148 75 111 82 21 8 32 82 66 139 128 20 145 38 42 33 9 16 74 136 33 161 217 21 81 193 17 69 69 4 27 200 160 136 3 142 142 128 140 21 81 44 12 138 10 216 7 228 33 162 142 131 163 136 138 202 251 225 123 163 107 214 188 247 230 205 254 181 215 62 231 172 243 157 179 207 7 192 8 12 150 72 51 81 53 128 12 169 66 30 17 224 131 199 196 198 225 228 46 64 129 10 36 112 0 16 8 179 100 33 115 253 35 1 0 248 126 60 60 43 34 192 7 190 0 1 120 211 11 8 0 192 77 155 192 48 28 135 255 15 234 66 153 92 1 128 132 1 192 116 145 56 75 8 128 20 0 64 122 142 66 166 0 64 70 1 128 157 152 38 83 0 160 4 0 96 203 99 98 227 0 80 45 0 96 39 127 230 211 0 128 157 248 153 123 1 0 91 148 33 21 1 160 145 0 32 19 101 136 68 0 104 59 0 172 207 86 138 69 0 88 48 0 20 102 75 196 57 0 216 45 0 48 73 87 102 72 0 176 183 0 192 206 16 11 178 0 8 12 0 48 81 136 133 41 0 4 123 0 96 200 35 35 120 0 132 153 0 20 70 242 87 60 241 43 174 16 231 42 0 0 120 153 178 60 185 36 57 69 129 91 8 45 113 7 87 87 46 30 40 206 73 23 43 20 54 97 2 97 154 64 46 194 121 153 25 50 129 52 15 224 243 204 0 0 160 145 21 17 224 131 243 253 120 206 14 174 206 206 54 142 182 14 95 45 234 191 6 255 34 98 98 227 254 229 207 171 112 64 0 0 225 116 126 209 254 44 47 179 26 128 59 6 128 109 254 162 37 238 4 104 94 11 160 117 247 139 102 178 15 64 181 0 160 233 218 87 243 112 248 126 60 60 69 161 144 185 217 217 229 228 228 216 74 196 66 91 97 202 87 125 254 103 194 95 192 87 253 108 249 126 60 252 247 245 224 190 226 36 129 50 93 129 71 4 248 224 194 204 244 76 165 28 207 146 9 132 98 220 230 143 71 252 183 11 255 252 29 211 34 196 73 98 185 88 42 20 227 81 18 113 142 68 154 140 243 50 165 34 137 66 146 41 197 37 210 255 100 226 223 44 251 3 62 223 53 0 176 106 62 1 123 145 45 168 93 99 3 246 75 39 16 88 116 192 226 247 0 0 242 187 111 193 212 40 8 3 128 104 131 225 207 119 255 239 63 253 71 160 37 0 128 102 73 146 113 0 0 94 68 36 46 84 202 179 63 199 8 0 0 68 160 129 42 176 65 27 244 193 24 44 192 6 28 193 5 220 193 11 252 96 54 132 66 36 196 194 66 16 66 10 100 128 28 114 96 41 172 130 66 40 134 205 176 29 42 96 47 212 64 29 52 192 81 104 134 147 112 14 46 194 85 184 14 61 112 15 250 97 8 158 193 40 188 129 9 4 65 200 8 19 97 33 218 136 1 98 138 88 35 142 8 23 153 133 248 33 193 72 4 18 139 36 32 201 136 20 81 34 75 145 53 72 49 82 138 84 32 85 72 29 242 61 114 2 57 135 92 70 186 145 59 200 0 50 130 252 134 188 71 49 148 129 178 81 61 212 12 181 67 185 168 55 26 132 70 162 11 208 100 116 49 154 143 22 160 155 208 114 180 26 61 140 54 161 231 208 171 104 15 218 143 62 67 199 48 192 232 24 7 51 196 108 48 46 198 195 66 177 56 44 9 147 99 203 177 34 172 12 171 198 26 176 86 172 3 187 137 245 99 207 177 119 4 18 129 69 192 9 54 4 119 66 32 97 30 65 72 88 76 88 78 216 72 168 32 28 36 52 17 218 9 55 9 3 132 81 194 39 34 147 168 75 180 38 186 17 249 196 24 98 50 49 135 88 72 44 35 214 18 143 19 47 16 123 136 67 196 55 36 18 137 67 50 39 185 144 2 73 177 164 84 210 18 210 70 210 110 82 35 233 44 169 155 52 72 26 35 147 201 218 100 107 178 7 57 148 44 32 43 200 133 228 157 228 195 228 51 228 27 228 33 242 91 10 157 98 64 113 164 248 83 226 40 82 202 106 74 25 229 16 229 52 229 6 101 152 50 65 85 163 154 82 221 168 161 84 17 53 143 90 66 173 161 182 82 175 81 135 168 19 52 117 154 57 205 131 22 73 75 165 173 162 149 211 26 104 23 104 247 105 175 232 116 186 17 221 149 30 78 151 208 87 210 203 233 71 232 151 232 3 244 119 12 13 134 21 131 199 136 103 40 25 155 24 7 24 103 25 119 24 175 152 76 166 25 211 139 25 199 84 48 55 49 235 152 231 153 15 153 111 85 88 42 182 42 124 21 145 202 10 149 74 149 38 149 27 42 47 84 169 170 166 170 222 170 11 85 243 85 203 84 143 169 94 83 125 174 70 85 51 83 227 169 9 212 150 171 85 170 157 80 235 83 27 83 103 169 59 168 135 170 103 168 111 84 63 164 126 89 253 137 6 89 195 76 195 79 67 164 81 160 177 95 227 188 198 32 11 99 25 179 120 44 33 107 13 171 134 117 129 53 196 38 177 205 217 124 118 42 187 152 253 29 187 139 61 170 169 161 57 67 51 74 51 87 179 82 243 148 102 63 7 227 152 113 248 156 116 78 9 231 40 167 151 243 126 138 222 20 239 41 226 41 27 166 52 76 185 49 101 92 107 170 150 151 150 88 171 72 171 81 171 71 235 189 54 174 237 167 157 166 189 69 187 89 251 129 14 65 199 74 39 92 39 71 103 143 206 5 157 231 83 217 83 221 167 10 167 22 77 61 58 245 174 46 170 107 165 27 161 187 68 119 191 110 167 238 152 158 190 94 128 158 76 111 167 222 121 189 231 250 28 125 47 253 84 253 109 250 167 245 71 12 88 6 179 12 36 6 219 12 206 24 60 197 53 113 111 60 29 47 199 219 241 81 67 93 195 64 67 165 97 149 97 151 225 132 145 185 209 60 163 213 70 141 70 15 140 105 198 92 227 36 227 109 198 109 198 163 38 6 38 33 38 75 77 234 77 238 154 82 77 185 166 41 166 59 76 59 76 199 205 204 205 162 205 214 153 53 155 61 49 215 50 231 155 231 155 215 155 223 183 96 90 120 90 44 182 168 182 184 101 73 178 228 90 166 89 238 182 188 110 133 90 57 89 165 88 85 90 93 179 70 173 157 173 37 214 187 173 187 167 17 167 185 78 147 78 171 158 214 103 195 176 241 182 201 182 169 183 25 176 229 216 6 219 174 182 109 182 125 97 103 98 23 103 183 197 174 195 238 147 189 147 125 186 125 141 253 61 7 13 135 217 14 171 29 90 29 126 115 180 114 20 58 86 58 222 154 206 156 238 63 125 197 244 150 233 47 103 88 207 16 207 216 51 227 182 19 203 41 196 105 157 83 155 211 71 103 23 103 185 115 131 243 136 139 137 75 130 203 46 151 62 46 155 27 198 221 200 189 228 74 116 245 113 93 225 122 210 245 157 155 179 155 194 237 168 219 175 238 54 238 105 238 135 220 159 204 52 159 41 158 89 51 115 208 195 200 67 224 81 229 209 63 11 159 149 48 107 223 172 126 79 67 79 129 103 181 231 35 47 99 47 145 87 173 215 176 183 165 119 170 247 97 239 23 62 246 62 114 159 227 62 227 60 55 222 50 222 89 95 204 55 192 183 200 183 203 79 195 111 158 95 133 223 67 127 35 255 100 255 122 255 209 0 167 128 37 1 103 3 137 129 65 129 91 2 251 248 122 124 33 191 142 63 58 219 101 246 178 217 237 65 140 160 185 65 21 65 143 130 173 130 229 193 173 33 104 200 236 144 173 33 247 231 152 206 145 206 105 14 133 80 126 232 214 208 7 97 230 97 139 195 126 12 39 133 135 133 87 134 63 142 112 136 88 26 209 49 151 53 119 209 220 67 115 223 68 250 68 150 68 222 155 103 49 79 57 175 45 74 53 42 62 170 46 106 60 218 55 186 52 186 63 198 46 102 89 204 213 88 157 88 73 108 75 28 57 46 42 174 54 110 108 190 223 252 237 243 135 226 157 226 11 227 123 23 152 47 200 93 112 121 161 206 194 244 133 167 22 169 46 18 44 58 150 64 76 136 78 56 148 240 65 16 42 168 22 140 37 242 19 119 37 142 10 121 194 29 194 103 34 47 209 54 209 136 216 67 92 42 30 78 242 72 42 77 122 146 236 145 188 53 121 36 197 51 165 44 229 185 132 39 169 144 188 76 13 76 221 155 58 158 22 154 118 32 109 50 61 58 189 49 131 146 145 144 113 66 170 33 77 147 182 103 234 103 230 102 118 203 172 101 133 178 254 197 110 139 183 47 30 149 7 201 107 179 144 172 5 89 45 10 182 66 166 232 84 90 40 215 42 7 178 103 101 87 102 191 205 137 202 57 150 171 158 43 205 237 204 179 202 219 144 55 156 239 159 255 237 18 194 18 225 146 182 165 134 75 87 45 29 88 230 189 172 106 57 178 60 113 121 219 10 227 21 5 43 134 86 6 172 60 184 138 182 42 109 213 79 171 237 87 151 174 126 189 38 122 77 107 129 94 193 202 130 193 181 1 107 235 11 85 10 229 133 125 235 220 215 237 93 79 88 47 89 223 181 97 250 134 157 27 62 21 137 138 174 20 219 23 151 21 127 216 40 220 120 229 27 135 111 202 191 153 220 148 180 169 171 196 185 100 207 102 210 102 233 230 222 45 158 91 14 150 170 151 230 151 14 110 13 217 218 180 13 223 86 180 237 245 246 69 219 47 151 205 40 219 187 131 182 67 185 163 191 60 184 188 101 167 201 206 205 59 63 84 164 84 244 84 250 84 54 238 210 221 181 97 215 248 110 209 238 27 123 188 246 52 236 213 219 91 188 247 253 62 201 190 219 85 1 85 77 213 102 213 101 251 73 251 179 247 63 174 137 170 233 248 150 251 109 93 173 78 109 113 237 199 3 210 3 253 7 35 14 182 215 185 212 213 29 210 61 84 82 143 214 43 235 71 14 199 31 190 254 157 239 119 45 13 54 13 85 141 156 198 226 35 112 68 121 228 233 247 9 223 247 30 13 58 218 118 140 123 172 225 7 211 31 118 29 103 29 47 106 66 154 242 154 70 155 83 154 251 91 98 91 186 79 204 62 209 214 234 222 122 252 71 219 31 15 156 52 60 89 121 74 243 84 201 105 218 233 130 211 147 103 242 207 140 157 149 157 125 126 46 249 220 96 219 162 182 123 231 99 206 223 106 15 111 239 186 16 116 225 210 69 255 139 231 59 188 59 206 92 242 184 116 242 178 219 229 19 87 184 87 154 175 58 95 109 234 116 234 60 254 147 211 79 199 187 156 187 154 174 185 92 107 185 238 122 189 181 123 102 247 233 27 158 55 206 221 244 189 121 241 22 255 214 213 158 57 61 221 189 243 122 111 247 197 247 245 223 22 221 126 114 39 253 206 203 187 217 119 39 238 173 188 79 188 95 244 64 237 65 217 67 221 135 213 63 91 254 220 216 239 220 127 106 192 119 160 243 209 220 71 247 6 133 131 207 254 145 245 143 15 67 5 143 153 143 203 134 13 134 235 158 56 62 57 57 226 63 114 253 233 252 167 67 207 100 207 38 158 23 254 162 254 203 174 23 22 47 126 248 213 235 215 206 209 152 209 161 151 242 151 147 191 109 124 165 253 234 192 235 25 175 219 198 194 198 30 190 201 120 51 49 94 244 86 251 237 193 119 220 119 29 239 163 223 15 79 228 124 32 127 40 255 104 249 177 245 83 208 167 251 147 25 147 147 255 4 3 152 243 252 99 51 45 219 0 0 0 4 103 65 77 65 0 0 177 142 124 251 81 147 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 233 0 0 117 48 0 0 234 96 0 0 58 152 0 0 23 111 146 95 197 70 0 0 59 142 73 68 65 84 120 218 236 189 121 144 36 247 117 231 247 121 191 95 86 245 61 125 206 76 207 141 57 113 18 32 8 9 188 111 138 90 138 135 14 2 92 75 148 37 91 142 93 157 94 219 146 99 35 20 107 7 0 111 56 98 189 27 254 199 18 36 109 216 187 225 181 66 148 69 64 71 172 168 211 162 64 82 60 32 137 36 132 27 51 0 230 190 186 123 250 238 58 51 127 239 249 143 95 102 85 86 119 15 0 74 156 65 15 132 66 36 170 186 166 42 179 170 222 247 221 151 152 25 111 222 254 241 222 220 155 63 193 155 0 120 243 246 143 248 150 124 55 79 214 124 120 255 22 249 90 6 86 122 140 129 89 249 249 187 16 212 147 89 69 151 249 87 99 127 198 176 46 226 45 21 17 28 240 164 228 239 22 145 238 105 69 144 45 68 188 95 252 201 251 183 22 0 182 6 209 13 76 193 204 97 250 126 179 240 62 44 124 6 13 183 96 193 97 154 19 211 97 2 144 210 106 181 241 218 198 91 138 8 72 78 120 39 162 206 201 11 34 242 121 17 249 138 136 124 89 16 45 48 209 3 142 55 37 192 86 32 122 248 160 105 246 179 132 244 62 52 21 52 133 234 54 220 174 239 197 237 250 94 164 111 20 183 251 94 240 253 160 77 108 230 219 232 159 255 18 255 203 47 125 63 89 35 227 242 229 75 128 33 6 51 11 139 52 210 212 157 189 52 123 219 202 90 253 193 213 90 29 231 28 222 57 115 78 30 117 226 126 93 196 30 43 64 112 163 130 33 185 113 9 223 33 250 237 22 178 7 8 173 251 9 45 168 12 145 220 246 163 200 193 143 224 167 239 65 198 14 97 237 21 172 118 9 26 139 88 109 6 100 25 124 21 204 208 12 150 106 224 91 77 198 134 135 16 148 36 241 76 79 142 97 34 188 227 246 155 1 104 167 25 103 47 205 114 126 246 138 188 120 238 226 253 181 70 243 126 239 29 222 185 71 156 184 135 196 241 172 220 128 64 72 110 84 194 155 166 247 17 218 143 144 53 32 25 36 185 231 231 72 238 254 105 100 236 48 96 232 210 73 116 254 4 92 248 70 148 233 24 185 112 143 167 242 25 100 77 0 206 207 172 146 180 231 145 172 133 161 185 185 96 4 51 6 171 85 112 66 95 181 194 246 137 81 246 78 79 242 158 183 222 206 106 173 206 115 167 206 242 252 233 243 247 215 26 205 251 19 239 112 206 221 239 196 61 42 114 227 0 33 185 225 8 31 210 7 9 205 7 72 107 184 253 239 39 121 199 47 227 15 125 20 0 93 122 25 61 241 7 208 90 0 145 146 33 40 185 17 24 13 185 92 201 35 154 130 68 87 72 138 23 151 238 28 208 104 181 81 140 181 90 29 19 193 84 233 171 86 232 175 246 113 199 161 253 220 115 235 81 46 206 205 115 252 204 121 142 159 189 248 72 18 165 194 67 206 185 7 111 4 137 176 245 1 80 230 248 172 241 8 237 53 146 59 255 107 146 119 254 75 100 226 22 8 41 122 233 111 177 43 207 128 166 241 245 34 93 110 23 235 158 135 28 20 145 69 193 2 0 1 67 76 16 140 114 88 76 17 76 12 81 195 112 20 6 100 179 149 82 111 181 89 92 89 197 59 199 208 96 63 239 120 203 205 220 125 243 97 190 253 252 75 188 120 254 210 3 137 247 15 120 231 238 119 142 71 183 178 141 144 108 121 174 215 108 187 101 205 231 72 215 166 220 222 119 83 253 161 71 144 161 29 144 214 209 139 95 195 102 115 194 139 139 135 149 197 189 129 150 221 193 174 59 135 9 166 33 62 84 195 44 94 207 204 34 157 37 183 49 144 252 20 249 185 36 194 196 169 161 64 154 101 44 46 175 178 176 188 202 64 95 149 123 110 57 204 93 55 31 228 137 227 39 57 121 97 230 145 196 187 43 222 185 219 128 185 173 8 130 100 75 115 125 104 61 72 90 127 64 134 166 168 252 211 63 198 239 121 23 104 27 157 125 2 59 247 213 200 193 226 35 65 213 0 197 196 122 104 29 185 92 58 60 29 165 66 84 3 18 210 248 172 25 166 161 11 0 33 7 132 196 191 177 136 69 49 196 20 44 130 66 11 88 153 96 40 245 70 139 90 163 73 197 123 222 122 244 32 135 247 76 243 205 231 95 154 90 94 171 207 38 222 63 228 28 15 110 181 88 66 178 53 185 62 236 180 208 124 134 214 202 84 242 61 255 130 202 123 31 132 164 31 93 62 131 157 251 10 90 187 140 136 7 231 58 92 218 189 95 199 237 229 199 101 233 224 93 71 5 152 25 106 130 43 0 64 1 0 122 254 22 51 140 28 20 185 77 33 57 96 10 213 99 106 180 66 224 252 220 21 6 43 253 124 240 109 111 225 197 243 23 120 250 229 115 15 36 222 255 130 247 110 106 43 169 132 100 203 17 63 164 239 183 172 254 37 196 81 253 177 199 240 123 223 5 161 129 94 124 156 112 233 111 16 83 196 249 92 194 135 94 162 219 38 68 223 240 188 70 243 174 120 191 208 225 114 237 33 122 228 122 51 3 237 74 5 203 37 70 20 52 249 235 49 204 10 11 66 176 96 8 66 173 217 160 214 106 50 61 49 198 244 228 4 95 127 234 133 201 102 154 90 226 220 7 129 47 109 5 16 184 173 67 124 197 66 235 231 172 189 242 37 55 253 86 6 126 254 52 126 250 110 168 207 19 94 248 61 194 185 175 32 26 34 13 131 66 8 160 1 180 157 31 89 180 5 52 125 149 199 154 191 47 128 102 209 94 52 58 94 130 161 49 62 80 72 131 156 195 67 241 56 228 146 32 63 122 94 87 72 6 49 20 3 137 96 89 88 169 177 90 107 240 158 187 110 101 231 196 24 89 208 199 212 236 231 182 66 38 246 245 151 0 93 125 255 40 173 149 79 39 183 126 134 202 199 255 35 164 107 232 218 57 236 212 159 99 205 165 200 245 166 29 219 14 187 138 4 217 84 244 175 127 62 119 5 209 220 97 16 188 115 136 57 20 65 157 226 21 52 231 105 83 237 168 138 142 125 192 171 73 4 80 181 220 200 84 218 105 202 220 194 18 183 28 216 195 64 181 202 169 75 51 15 39 222 127 200 193 125 175 167 36 72 182 6 231 55 31 161 185 252 233 202 135 254 13 201 221 63 3 173 101 180 118 137 112 252 81 196 12 92 146 19 49 244 112 235 171 19 122 253 243 133 91 24 245 191 168 130 131 19 103 47 208 151 45 225 181 5 24 19 163 35 36 206 51 52 216 143 11 74 64 16 83 212 232 6 138 10 21 65 151 248 61 207 91 78 124 51 44 62 192 20 230 151 87 216 57 54 194 200 96 31 79 189 124 238 211 137 119 143 56 184 255 245 2 65 242 186 18 95 59 196 191 175 242 177 95 35 185 249 62 172 189 138 205 159 32 156 254 179 156 86 73 199 255 238 208 244 59 226 244 82 244 15 144 92 255 71 198 143 0 120 254 212 121 6 116 169 147 12 226 220 165 206 249 38 70 71 24 31 30 102 251 248 8 67 3 253 16 0 103 4 205 221 198 171 113 253 102 82 34 119 57 107 205 22 125 149 10 183 30 216 195 11 103 46 220 39 222 61 194 235 4 130 228 245 228 124 114 177 95 249 39 191 66 114 236 135 177 246 26 54 247 12 225 244 159 35 190 47 186 120 26 232 42 234 205 8 173 61 4 238 70 251 164 39 248 71 115 25 171 93 134 218 101 172 185 136 180 22 241 161 9 1 62 244 182 91 232 211 21 86 87 150 16 96 173 209 164 153 102 212 234 77 22 86 214 88 92 89 227 228 197 203 244 247 85 217 62 186 141 221 219 39 232 175 84 200 44 74 36 181 174 138 16 97 163 39 81 146 18 133 219 89 79 219 84 147 132 99 251 166 121 241 252 229 251 188 243 143 130 93 119 117 144 188 62 196 55 8 233 207 89 123 245 211 149 247 255 107 146 35 63 12 173 85 172 121 133 112 250 139 209 197 203 99 116 133 149 111 27 220 187 242 41 203 254 125 228 120 193 193 226 113 184 242 60 186 244 18 210 104 130 193 210 200 1 82 63 194 236 248 39 113 4 146 109 77 90 141 21 84 235 84 147 4 17 97 178 175 138 139 233 96 156 115 44 172 172 178 92 107 112 249 202 18 231 102 231 57 55 55 207 216 240 16 7 118 78 50 60 56 16 227 2 37 215 176 7 0 229 251 28 188 121 204 137 212 82 170 73 194 238 169 113 46 205 47 125 218 137 251 57 140 95 187 158 24 184 254 0 48 3 77 63 96 237 218 195 238 216 143 224 239 252 73 180 181 134 213 103 9 207 127 62 103 217 36 6 118 196 54 130 103 83 189 78 30 9 20 164 185 132 158 251 50 58 255 60 174 13 179 99 119 208 186 237 95 209 220 245 125 132 157 223 195 80 159 167 191 10 55 245 199 211 139 193 126 205 112 22 16 140 122 179 69 171 221 162 209 108 179 86 111 80 107 54 25 108 183 217 54 52 200 77 187 182 179 184 178 198 197 185 69 150 86 107 44 175 213 24 29 26 228 166 221 219 233 175 84 49 39 132 160 29 174 167 196 245 93 85 144 231 29 44 74 2 69 25 29 26 164 217 74 89 92 171 61 236 157 123 206 144 47 201 27 18 0 102 96 1 75 27 143 185 233 183 82 253 232 255 142 53 87 33 52 114 131 47 3 231 115 206 215 87 49 248 10 71 214 1 30 171 205 194 217 175 160 243 167 200 6 39 88 250 158 127 75 227 182 159 97 98 251 8 131 1 8 6 86 184 132 134 214 181 4 36 237 36 131 188 19 6 7 250 25 26 28 96 251 228 88 46 9 28 115 139 75 204 47 45 99 106 140 14 15 81 171 55 56 51 51 207 82 173 206 147 47 158 97 122 114 156 221 83 227 56 137 158 102 135 240 235 85 65 143 100 136 42 44 4 97 251 248 40 237 44 163 222 106 63 230 64 184 78 98 32 185 222 122 223 178 214 21 196 81 253 129 255 128 53 87 192 20 125 225 81 164 189 6 174 154 179 136 190 70 174 247 72 214 34 156 121 12 102 158 39 236 125 39 203 159 254 79 84 142 188 151 254 12 250 67 138 213 235 152 22 113 253 178 171 104 87 255 156 61 145 58 67 68 24 29 30 98 124 219 48 254 166 125 204 204 47 113 113 238 10 195 67 131 172 53 154 28 63 115 129 203 243 139 44 174 174 113 116 207 52 213 106 130 83 33 168 150 48 220 107 44 150 85 131 154 226 204 152 158 24 229 236 204 21 130 218 21 144 169 235 129 129 228 186 234 125 77 31 164 189 54 89 253 161 223 138 49 251 208 198 46 60 142 174 94 68 124 37 23 249 154 199 245 217 156 80 29 113 239 96 241 4 225 165 63 193 6 166 104 252 200 31 147 30 254 24 73 10 212 155 152 102 49 210 103 182 57 177 229 170 180 239 33 14 221 240 80 84 49 162 140 143 142 176 125 124 27 107 245 38 39 206 158 227 109 199 14 113 118 102 142 11 115 11 60 115 250 28 7 167 119 48 54 50 136 32 61 6 34 37 48 152 149 108 2 64 85 193 9 211 19 227 156 155 155 159 116 98 15 10 242 224 27 3 0 6 104 216 110 105 253 129 228 123 126 1 153 122 11 164 13 108 245 28 225 252 95 33 73 127 241 154 87 22 247 56 112 130 100 77 194 185 191 130 153 19 180 190 231 191 163 249 238 127 7 82 129 70 3 11 41 72 232 81 29 178 25 245 173 224 114 201 47 97 155 70 152 122 228 133 197 140 160 6 33 8 244 85 171 220 125 203 49 102 174 44 80 173 120 182 143 143 242 244 75 103 56 117 121 142 201 250 8 251 118 76 224 130 16 172 55 118 160 69 14 129 114 220 0 80 165 146 120 198 71 134 88 90 171 63 96 240 176 136 204 221 224 0 200 179 116 161 245 156 12 76 144 220 246 99 88 182 6 38 132 23 191 16 45 126 35 138 253 171 114 190 117 51 120 89 27 61 254 7 88 90 99 245 71 31 39 236 122 59 146 181 32 91 1 203 112 155 48 252 122 254 23 233 138 249 133 43 241 247 157 152 154 202 45 249 87 255 70 154 219 39 170 74 104 43 147 99 163 12 15 14 114 250 194 37 238 189 229 40 79 157 58 195 252 202 10 98 202 158 29 19 16 36 254 6 57 215 119 136 191 222 91 80 48 81 198 6 7 169 53 90 100 170 207 1 219 175 165 38 184 246 185 128 152 211 191 159 172 62 85 249 192 255 138 57 32 164 216 185 47 67 186 218 229 124 205 192 210 104 168 117 140 181 44 127 62 15 186 212 231 8 207 252 38 217 224 46 150 255 171 243 100 59 239 69 90 53 36 109 32 33 203 11 55 172 196 205 87 255 72 17 77 142 133 185 89 86 151 151 162 74 121 197 68 109 233 220 214 13 101 168 42 105 200 168 84 28 71 15 236 101 251 246 113 238 62 122 136 193 190 126 230 87 215 56 63 187 136 139 150 68 55 95 64 145 55 88 31 48 178 8 42 83 38 70 134 48 179 41 204 238 191 129 37 64 199 240 251 188 219 251 30 100 234 118 200 234 208 90 139 201 157 100 176 91 220 217 97 79 237 13 242 228 98 218 26 11 216 75 127 68 24 61 198 210 63 125 18 135 32 173 85 32 141 1 152 130 120 61 149 93 175 194 206 121 26 55 109 181 186 68 248 14 18 52 157 250 33 141 201 34 39 142 253 187 118 32 24 119 31 59 200 19 39 78 177 176 186 134 154 178 123 114 156 32 81 254 71 78 239 218 4 186 46 80 100 170 84 147 132 193 190 42 141 86 250 121 174 97 246 216 93 123 233 159 61 72 214 32 121 199 255 8 105 13 84 209 115 95 65 92 37 23 235 161 231 48 43 31 49 29 99 237 213 156 248 71 88 250 204 19 177 116 43 171 197 154 62 45 89 215 235 254 211 87 161 190 19 199 194 252 28 107 171 203 184 87 144 0 221 226 143 222 255 202 130 70 13 50 11 164 105 198 190 233 29 140 142 12 114 207 45 135 24 26 232 103 105 173 206 114 189 30 131 83 38 37 226 91 30 37 44 133 148 205 80 139 128 26 29 232 143 41 106 236 193 27 80 5 20 137 158 246 3 254 240 199 160 111 27 22 218 88 107 145 112 229 169 188 244 42 108 56 162 229 30 58 82 65 66 11 59 253 69 116 236 40 203 159 121 18 65 144 180 142 104 26 19 51 116 3 44 172 59 220 43 72 128 24 52 116 180 27 77 214 150 87 16 231 174 234 122 59 44 158 107 221 249 173 4 138 162 100 204 84 201 178 192 254 233 157 84 147 10 111 61 122 0 231 132 139 115 139 180 218 41 72 110 8 150 84 128 149 164 79 97 44 170 42 226 133 161 190 42 6 15 216 13 7 0 3 44 187 143 172 137 123 235 79 65 218 136 230 211 185 191 138 134 95 17 223 207 131 67 157 163 200 215 155 198 242 171 115 223 64 91 53 230 63 254 197 152 138 205 234 152 102 29 78 41 28 109 119 181 184 211 166 255 69 157 44 206 177 188 178 200 242 202 34 226 92 212 211 87 123 189 93 245 2 221 175 145 75 138 96 81 254 236 157 158 34 241 9 111 59 118 24 53 227 194 149 69 130 117 3 92 29 174 15 221 204 98 87 13 25 170 198 240 64 95 81 175 120 223 13 38 1 20 11 233 35 126 239 187 145 234 40 132 22 52 151 209 217 167 243 116 172 150 136 94 58 58 220 175 216 226 113 100 229 60 167 63 252 199 200 240 78 172 93 143 117 124 185 116 112 155 155 104 188 22 110 145 60 206 191 52 191 192 210 252 2 206 185 30 183 240 170 152 238 225 250 205 65 161 170 100 193 232 239 171 178 109 100 152 177 225 65 14 236 218 78 59 203 88 92 169 129 179 110 37 82 81 82 182 33 157 92 100 22 133 129 106 5 131 71 236 198 1 128 129 234 237 132 54 114 240 35 81 247 155 162 151 254 6 113 174 251 83 118 136 174 189 128 48 67 218 107 200 220 51 156 61 248 83 12 28 250 16 210 174 197 80 113 233 135 239 241 220 245 170 56 220 196 242 19 68 132 52 109 161 33 67 67 70 154 182 74 0 144 87 246 35 55 187 254 38 129 164 144 5 166 198 70 104 171 114 116 239 110 250 42 21 22 215 234 180 211 144 183 47 110 228 250 66 45 132 82 128 168 191 154 20 82 227 246 27 3 0 102 152 133 7 100 96 18 183 231 94 200 218 145 51 102 159 2 147 146 152 15 155 72 1 69 80 100 238 105 218 149 73 174 188 245 33 170 52 163 4 49 93 71 126 221 228 155 104 47 249 220 70 178 137 196 180 237 149 203 151 8 153 18 50 229 202 229 75 185 93 112 117 25 34 92 13 105 122 149 32 146 225 157 103 164 191 15 68 184 235 216 65 212 148 133 149 181 60 93 221 203 245 26 186 69 169 69 217 25 102 36 206 227 162 129 242 192 13 36 1 210 251 221 158 123 161 93 7 2 182 112 28 66 187 75 184 77 69 127 76 2 73 125 14 89 187 192 139 183 255 91 70 134 183 225 178 86 143 171 104 235 62 190 244 144 104 157 233 183 105 128 79 242 194 82 79 22 82 178 144 198 188 130 243 175 248 62 235 92 179 72 57 247 126 142 245 151 41 140 189 225 225 65 84 149 241 145 33 38 70 70 168 183 218 180 90 109 156 244 198 3 172 172 22 114 226 107 94 111 80 73 18 12 238 183 173 15 0 3 211 15 18 82 220 129 15 64 214 0 205 176 133 227 241 39 51 93 39 250 203 196 183 216 134 177 248 18 203 147 239 96 97 231 247 51 84 81 212 194 171 59 118 133 165 150 103 247 180 228 190 109 230 2 56 39 156 126 249 56 105 150 145 102 25 167 95 62 142 115 69 61 193 70 23 176 115 30 213 210 117 214 131 175 87 5 20 209 190 190 164 130 16 117 250 177 253 123 80 85 150 234 245 34 16 209 243 218 222 8 97 174 34 20 250 18 87 124 207 15 110 109 0 24 152 234 207 202 224 36 50 188 55 239 218 1 93 120 177 251 195 217 58 119 175 228 1 72 125 30 105 204 114 238 230 255 137 196 234 84 188 150 184 191 196 241 182 145 89 203 95 203 229 175 118 148 213 122 124 224 0 239 226 185 52 40 26 52 79 5 59 92 167 165 76 58 125 131 174 252 67 21 239 219 228 186 114 21 229 80 169 116 227 109 147 99 35 76 108 27 161 217 78 105 180 50 84 203 86 135 117 106 5 186 21 199 177 33 197 59 151 171 1 251 217 45 30 9 52 176 236 62 55 113 75 151 251 87 47 64 214 130 164 127 147 108 95 17 235 119 177 70 175 118 145 246 192 46 150 166 222 73 127 182 84 36 215 55 183 205 85 59 4 233 56 247 175 104 199 199 202 33 203 43 129 47 158 57 77 200 50 0 46 158 57 29 245 178 148 101 191 108 12 28 22 18 196 214 249 1 235 252 196 110 17 155 2 62 191 102 124 221 209 125 211 252 237 243 47 177 176 182 214 9 241 85 18 79 226 61 137 8 222 123 188 8 136 118 10 161 85 149 138 247 180 179 236 190 45 12 0 3 83 135 6 145 93 119 131 54 35 145 150 207 228 198 149 150 216 166 155 219 143 85 179 10 43 23 145 218 12 103 239 254 21 18 109 82 77 64 180 27 236 145 162 251 38 127 183 115 238 149 9 46 27 173 255 60 6 136 243 158 181 90 141 44 231 254 181 181 26 206 249 92 62 148 122 11 229 42 222 128 72 41 163 215 85 17 82 22 229 249 181 12 235 124 214 96 198 244 228 4 62 183 55 36 111 21 11 65 59 159 37 242 67 52 254 18 231 73 124 140 90 122 239 32 203 13 29 94 37 208 249 58 218 0 239 199 2 50 188 27 203 82 204 2 97 229 12 106 177 181 218 180 28 230 141 78 1 105 29 155 63 1 245 89 188 166 44 236 254 4 137 181 99 140 190 196 225 214 243 193 215 113 187 108 212 219 197 3 201 13 182 226 112 2 222 121 206 156 124 57 38 95 130 50 55 115 185 35 102 165 100 230 9 210 57 143 110 226 95 22 151 117 249 112 161 77 253 132 60 245 92 112 123 48 101 247 212 120 30 230 165 163 114 34 24 242 98 32 19 178 160 52 210 148 213 102 155 213 70 147 118 150 21 87 124 255 214 180 1 162 238 122 159 12 76 64 223 72 236 216 65 177 229 179 121 201 213 58 183 207 20 91 157 193 150 206 196 58 125 2 243 187 63 1 149 65 18 23 93 53 41 148 100 143 136 151 94 206 148 141 95 202 33 145 210 78 214 59 140 136 19 124 34 212 86 86 8 33 67 53 99 246 210 69 92 226 58 215 232 113 2 242 243 184 158 11 185 110 7 250 58 21 228 202 1 37 213 28 112 133 14 143 218 98 122 114 28 85 203 11 79 75 160 147 46 88 202 135 137 16 130 21 151 120 223 22 53 2 13 76 63 67 223 56 132 20 52 96 107 151 59 93 56 132 60 248 83 212 6 46 157 133 214 18 56 31 191 188 166 172 237 120 31 137 165 56 13 56 39 52 210 172 19 184 145 77 50 134 218 129 132 172 179 245 180 215 57 44 136 229 162 11 56 63 119 133 52 132 252 200 200 130 210 108 52 35 49 156 116 10 140 123 181 136 34 235 148 9 42 148 63 205 58 172 130 115 52 218 105 121 240 20 2 236 217 57 149 151 140 25 62 143 9 92 77 139 149 193 145 223 62 179 133 189 0 189 213 77 30 237 4 110 104 45 211 201 129 74 94 241 147 53 176 149 243 49 255 47 62 255 122 138 104 202 202 246 247 225 138 201 29 226 200 66 216 68 173 187 13 170 64 55 88 251 174 67 9 45 71 248 156 224 188 99 126 110 22 13 129 144 101 132 44 16 52 112 230 244 73 36 73 58 175 85 242 247 202 70 174 215 210 83 93 201 224 122 16 83 128 182 153 102 20 243 231 68 98 14 194 12 118 140 111 67 131 145 56 247 90 146 215 229 219 173 91 87 2 96 66 72 99 208 71 83 168 93 142 86 127 225 63 183 87 177 181 153 210 15 150 243 146 41 98 25 141 177 59 129 56 184 193 59 161 217 108 225 123 244 187 176 129 214 5 135 151 245 129 116 9 224 232 182 12 56 98 31 96 189 86 35 205 148 52 11 164 89 32 203 148 230 90 141 196 185 40 5 74 46 96 71 229 148 93 73 217 40 25 162 196 47 71 6 162 209 154 182 51 188 115 88 97 7 88 172 14 30 29 26 142 117 4 78 240 94 224 181 215 34 200 150 181 1 48 67 198 14 230 85 61 138 165 205 238 167 109 45 99 141 165 110 245 77 169 242 22 83 26 99 119 34 4 28 134 207 211 181 70 236 183 151 142 126 101 131 219 87 38 76 71 135 22 64 89 31 219 145 232 61 188 252 226 9 178 16 58 129 160 44 4 94 126 233 68 180 214 133 13 239 45 148 140 148 128 38 178 241 103 116 174 12 66 71 59 109 99 166 72 238 222 73 103 60 77 204 244 133 16 112 34 36 121 51 204 245 238 23 254 110 171 128 187 226 183 200 162 13 96 1 234 179 145 190 205 69 172 93 235 52 112 244 82 37 218 4 89 50 130 71 115 226 11 206 89 212 161 141 118 206 201 178 145 7 74 98 160 123 74 101 125 71 160 117 130 64 46 186 96 34 168 102 132 144 18 66 138 106 150 119 9 251 60 140 212 163 233 217 128 59 161 23 196 34 229 135 56 98 125 193 106 179 141 115 209 141 115 210 181 101 84 96 108 219 72 30 5 140 163 233 236 239 243 91 111 49 0 228 83 151 210 110 124 31 69 219 203 49 33 212 209 145 189 196 23 51 196 2 171 211 31 201 53 111 49 198 39 70 230 66 80 154 237 180 195 254 157 172 157 208 225 202 30 206 236 232 234 110 204 222 151 90 189 146 196 241 173 199 31 39 203 148 52 13 164 105 84 1 223 122 252 113 146 196 225 122 220 193 210 72 153 114 54 17 74 77 166 37 52 22 149 105 98 52 154 109 36 24 34 30 241 185 90 201 63 71 97 247 196 184 191 116 60 132 239 0 5 97 203 230 2 100 112 123 167 168 83 219 107 144 165 37 147 90 174 154 65 116 4 188 3 241 209 237 241 185 190 22 7 205 180 133 169 246 68 227 132 94 194 72 238 45 196 96 81 201 146 47 73 27 231 92 215 95 87 37 132 64 8 33 214 229 119 66 199 93 160 137 116 213 138 73 217 27 145 30 203 188 12 2 145 216 43 216 104 181 34 247 59 233 0 169 152 71 224 128 137 209 109 152 69 91 167 175 146 92 189 135 225 6 82 1 249 89 43 177 154 55 180 32 203 122 199 182 189 162 11 153 19 212 34 241 165 136 199 59 135 224 88 169 55 64 92 207 92 191 14 159 150 186 193 69 34 199 119 156 195 98 46 96 73 84 60 243 228 147 27 108 128 103 158 122 178 147 19 16 231 74 156 31 255 243 37 48 136 173 87 14 218 49 50 213 140 181 122 51 130 205 187 14 231 151 65 32 34 244 85 42 49 198 41 66 226 28 175 199 188 144 107 2 0 11 41 22 90 88 214 140 185 247 87 49 90 59 241 48 23 137 31 93 37 233 90 242 34 224 162 104 174 55 155 145 19 233 213 185 81 196 118 227 119 61 28 92 188 214 197 56 0 192 210 202 34 193 162 251 23 52 16 76 89 89 93 142 113 249 190 42 149 74 66 82 73 72 92 210 53 222 74 98 190 123 189 110 125 161 136 67 49 106 205 102 254 153 124 247 243 111 2 2 151 143 181 243 34 56 239 121 61 110 215 32 25 36 49 2 152 165 121 163 231 119 230 177 20 197 153 235 137 232 68 242 130 74 163 86 111 50 60 216 23 141 181 242 107 89 103 92 202 122 123 209 225 189 103 126 105 185 155 175 215 110 72 55 169 84 72 85 233 75 60 125 201 32 6 100 106 132 16 200 178 168 38 226 208 168 120 175 26 211 206 197 8 153 160 74 163 217 138 6 171 119 209 251 45 93 63 142 155 148 152 11 115 18 67 187 121 112 202 23 243 12 228 6 6 64 225 247 218 242 105 100 96 146 188 194 225 59 16 70 73 15 215 82 210 185 17 20 174 195 61 245 86 202 64 181 66 197 39 185 230 40 25 96 185 187 40 189 174 65 52 0 93 194 229 243 231 48 19 52 24 193 105 199 75 168 86 251 249 224 247 222 195 225 99 199 216 181 123 15 183 222 126 7 187 247 238 97 215 238 61 220 113 199 29 61 214 151 6 8 26 176 220 126 104 180 90 164 105 70 146 36 93 160 160 8 66 88 7 2 31 187 26 152 95 89 233 128 222 249 55 192 136 152 132 182 11 157 122 105 125 117 131 166 208 163 78 48 113 12 93 254 11 22 238 250 151 72 112 152 105 110 49 23 158 130 203 67 180 209 168 2 33 205 148 160 25 213 138 199 249 98 84 95 30 179 47 91 237 69 176 40 207 1 156 63 119 30 48 212 2 170 121 172 221 140 36 241 12 13 15 113 238 236 25 206 157 62 197 95 127 237 175 98 22 51 31 7 179 109 219 8 183 220 118 7 187 246 238 97 215 158 253 220 115 239 59 81 129 163 71 14 83 25 232 103 48 11 180 211 148 180 157 210 110 183 73 219 109 130 6 252 58 16 144 151 138 21 25 194 138 79 242 250 132 239 72 4 248 45 7 128 63 30 248 111 158 249 216 218 111 96 20 149 189 14 250 199 160 185 120 21 165 95 232 101 195 82 143 203 86 49 73 48 241 56 20 151 219 15 49 32 68 30 161 19 132 56 36 82 36 78 232 108 167 41 21 75 168 120 143 228 249 254 178 229 223 209 213 206 227 128 115 103 207 116 68 120 40 5 153 204 12 113 142 74 165 26 37 142 19 124 238 138 58 23 175 255 210 241 227 156 122 233 4 245 70 131 95 254 165 95 228 204 204 28 2 220 243 214 183 48 188 109 148 247 188 255 67 244 15 244 243 246 119 189 135 163 55 223 138 165 113 8 68 15 8 68 16 7 11 203 171 8 48 216 87 33 211 239 216 4 124 114 11 218 0 18 77 225 198 60 244 141 197 168 160 175 196 214 39 202 195 154 115 198 244 121 190 221 11 120 79 255 149 191 67 92 130 56 31 7 54 89 55 27 22 141 114 137 211 67 124 31 146 84 145 230 28 84 183 225 45 35 168 162 22 227 234 46 241 248 2 8 133 246 119 221 204 242 218 234 114 39 36 187 49 9 83 76 0 21 68 13 73 162 222 246 222 147 120 199 197 75 151 56 254 210 73 230 87 106 36 165 31 240 137 191 123 154 109 131 253 104 22 184 237 45 119 146 165 109 110 190 245 182 220 99 136 246 139 207 231 14 23 21 73 107 245 6 213 74 5 239 60 173 180 125 227 171 128 31 104 252 7 130 84 84 52 184 206 36 206 190 145 94 59 192 71 142 239 6 233 243 200 112 34 152 243 244 45 62 133 142 28 192 66 20 255 17 0 134 19 143 184 4 243 253 208 55 196 232 31 127 10 27 61 72 237 157 255 14 9 13 28 210 105 189 182 160 40 138 115 30 239 37 207 37 228 174 29 240 228 19 127 23 245 126 81 161 214 157 216 16 165 130 198 65 148 6 212 106 53 174 204 205 49 183 176 64 45 139 198 222 187 223 126 47 147 19 147 124 239 59 222 193 61 247 222 203 200 200 40 239 121 247 59 201 128 44 51 218 173 54 173 118 139 118 218 234 186 159 177 162 165 199 182 89 88 94 97 160 175 138 243 126 67 210 235 53 4 221 183 30 0 130 84 48 211 23 172 54 115 155 76 28 137 211 60 139 222 127 64 188 118 173 51 151 151 96 231 25 23 169 58 76 170 12 95 126 140 149 177 127 134 4 143 17 242 84 124 94 177 155 244 99 125 67 140 253 197 143 211 255 226 31 82 123 215 3 144 84 193 90 136 89 9 48 221 244 106 8 138 138 195 185 128 15 30 42 240 242 153 51 60 245 220 243 28 57 120 83 71 15 131 113 254 210 12 141 70 131 90 171 205 216 182 17 166 119 239 225 83 63 248 131 140 143 143 243 222 247 188 143 35 199 142 177 115 251 100 143 49 152 102 74 150 166 44 175 213 73 67 64 67 64 213 208 16 48 141 159 73 75 81 62 239 98 249 91 226 61 23 230 22 56 180 123 7 137 119 177 99 232 181 223 158 223 186 110 160 200 231 45 173 63 24 3 37 1 170 219 192 41 226 52 178 186 219 68 2 120 67 188 161 174 202 192 165 47 177 114 219 127 139 184 58 158 188 40 36 39 190 246 13 49 240 226 111 211 255 194 111 97 85 71 229 252 95 208 124 215 131 72 22 109 134 242 254 158 78 185 88 94 186 21 197 76 46 222 125 133 122 59 229 169 227 47 110 148 98 31 255 4 127 244 133 63 220 240 188 230 220 221 108 103 121 244 80 81 13 49 167 159 75 142 142 107 104 221 249 196 178 110 220 79 145 255 63 125 105 22 17 24 29 25 34 241 142 181 70 187 4 198 87 189 125 126 75 2 224 162 63 140 153 29 223 221 126 33 198 2 44 170 1 55 60 17 103 1 36 189 196 239 60 22 193 156 67 250 19 6 79 253 1 94 219 224 171 177 55 16 135 185 62 168 12 51 112 226 115 140 254 233 103 97 242 16 36 14 151 174 228 186 221 33 42 61 101 87 82 74 7 23 162 191 40 191 254 242 151 191 196 111 252 198 191 231 165 147 47 147 228 1 152 44 4 142 30 62 194 79 255 244 63 207 125 122 235 132 136 213 44 218 24 106 221 57 194 57 193 203 3 30 58 224 35 95 66 81 170 94 208 252 117 142 152 139 56 117 225 18 253 213 10 163 67 67 56 129 122 171 133 195 197 1 232 175 238 58 127 101 75 2 96 119 56 137 97 191 99 226 126 155 218 28 50 52 129 72 128 254 97 200 242 52 176 147 60 27 108 37 27 32 62 150 17 65 107 253 140 156 248 191 168 223 254 51 208 86 196 39 208 55 76 255 139 159 99 244 79 62 139 141 223 68 245 246 163 164 39 207 224 206 62 157 175 11 112 249 81 196 11 44 255 123 227 70 175 118 59 165 82 169 240 51 63 243 211 87 85 174 237 118 74 8 161 119 206 95 158 195 47 38 125 81 82 53 122 213 132 189 149 130 84 214 145 76 21 231 57 121 126 134 233 137 49 146 36 97 181 86 143 69 159 78 208 78 49 227 43 186 131 95 222 146 161 96 21 135 225 162 60 111 204 119 42 129 101 96 2 188 129 183 168 10 156 229 198 96 238 9 56 226 191 13 11 42 3 140 252 221 255 134 85 18 168 14 71 226 31 207 137 63 118 19 149 59 15 65 127 134 12 15 198 47 144 18 61 7 233 198 220 157 243 37 239 193 245 220 171 42 105 154 197 34 144 160 145 211 213 200 66 94 28 146 102 177 53 123 93 77 94 145 33 236 196 38 202 255 86 148 122 149 14 95 146 70 133 42 72 124 212 253 167 46 92 166 157 166 236 217 57 65 197 59 150 235 141 174 139 43 150 15 202 180 87 50 0 117 75 2 160 155 141 113 143 234 218 92 228 118 201 144 193 9 204 251 72 124 95 242 4 188 229 96 200 139 29 171 134 27 119 248 218 12 125 151 159 196 6 18 250 79 252 14 163 127 246 89 108 108 63 149 187 14 66 85 227 140 161 218 73 204 65 50 243 109 196 71 209 233 214 17 108 179 226 74 151 7 92 84 181 83 17 28 143 110 168 247 106 224 233 33 176 147 13 5 156 235 65 176 190 200 211 137 163 82 73 248 246 241 151 217 54 52 192 212 232 24 206 59 150 86 227 78 66 113 46 207 59 68 169 118 149 219 163 91 60 25 36 32 242 235 132 38 52 150 193 41 72 134 27 28 205 71 115 118 69 126 33 44 58 96 0 146 105 67 253 48 35 223 252 159 233 127 233 207 25 253 243 255 34 114 254 91 111 130 190 0 90 67 106 207 227 134 3 72 5 89 62 153 199 8 54 39 248 102 132 236 164 104 243 102 80 17 43 61 119 117 240 108 38 13 174 86 197 91 206 99 144 87 5 87 146 132 75 115 87 184 48 115 133 131 187 119 226 189 80 111 182 72 53 144 92 229 154 155 220 126 125 139 39 131 0 228 49 17 135 46 93 198 13 239 143 69 30 253 147 104 182 16 195 184 206 69 226 75 46 1 242 18 240 168 38 192 77 122 42 23 190 206 232 249 175 96 219 14 82 125 219 62 164 146 199 215 27 167 34 168 42 130 145 224 150 95 70 61 72 112 177 176 228 170 132 232 141 10 218 38 232 47 22 138 21 37 92 69 104 121 189 145 87 254 59 26 120 221 16 174 152 109 176 59 162 33 42 36 222 243 181 39 158 103 160 191 202 225 189 123 16 47 92 154 95 162 226 124 158 40 202 13 69 145 30 25 191 206 40 124 108 235 215 3 196 111 252 136 214 175 228 35 223 3 12 77 69 241 235 20 113 37 174 47 75 128 60 66 88 217 171 152 13 98 201 32 213 91 154 48 96 49 188 92 127 1 104 130 115 248 241 0 146 224 103 254 38 175 50 187 154 200 47 244 106 87 68 187 60 255 238 214 31 157 170 33 95 122 47 175 40 13 202 69 35 189 69 36 189 246 64 197 123 46 204 205 115 126 102 150 219 15 238 167 82 77 200 210 192 194 106 61 214 47 148 82 199 189 0 238 153 148 254 200 22 175 7 40 85 180 8 15 73 104 163 43 43 121 86 44 195 6 167 98 255 159 104 151 243 75 182 128 20 146 160 79 241 59 51 170 135 90 80 89 129 116 9 169 159 64 104 230 117 253 185 10 33 193 154 43 157 88 193 102 68 145 156 160 174 44 186 95 193 62 216 220 168 35 87 17 87 121 159 72 199 202 223 236 51 36 137 71 213 248 194 87 30 103 106 108 27 55 31 220 71 226 28 231 230 174 224 125 174 247 201 109 152 13 215 136 123 176 243 219 67 91 26 0 14 237 28 2 207 138 8 182 52 27 139 59 73 241 67 59 162 248 118 218 213 253 101 32 20 135 25 149 155 106 248 137 20 193 33 141 83 57 231 75 215 112 116 134 155 8 184 75 127 221 169 203 235 149 2 92 213 66 127 229 56 214 102 86 127 239 57 55 87 51 174 247 223 139 200 183 247 84 171 85 190 250 196 179 172 172 213 120 199 157 183 80 73 42 52 219 41 51 243 203 84 114 233 179 225 188 37 117 86 50 250 159 221 210 185 128 89 183 175 87 30 56 251 133 237 181 211 191 26 86 167 113 219 98 52 206 250 199 113 186 68 183 247 58 247 171 93 62 187 221 105 239 126 8 103 235 146 6 46 247 36 52 238 147 104 46 118 199 7 151 234 244 190 19 162 191 18 24 138 123 237 25 50 45 61 186 185 83 178 158 219 3 133 237 80 113 142 36 241 188 116 238 2 127 243 244 243 188 245 150 35 236 154 154 4 132 151 206 95 38 241 30 151 183 174 149 207 145 137 32 222 199 145 122 93 253 255 11 91 62 25 180 67 207 149 12 23 0 30 54 231 127 53 92 190 68 50 182 3 19 195 13 76 64 109 62 55 4 187 52 69 44 87 15 116 188 5 240 224 139 128 65 66 167 174 203 1 137 225 70 219 132 139 32 23 158 68 246 220 21 107 6 208 239 10 241 215 131 160 183 29 183 75 228 13 74 48 55 32 227 170 121 97 126 121 133 63 248 203 175 177 115 114 140 119 221 121 27 130 113 122 102 142 229 90 131 36 73 242 73 97 138 203 131 64 102 49 84 92 84 83 104 55 93 253 240 181 0 192 119 55 16 84 82 2 22 131 66 32 238 33 107 44 16 150 53 26 131 149 190 152 33 204 141 193 14 241 139 0 145 211 88 74 230 251 160 210 15 190 31 252 64 252 219 247 67 146 223 187 1 100 184 47 134 88 124 181 164 6 190 123 196 95 15 4 215 57 167 93 245 58 94 28 222 11 73 18 203 225 126 255 139 95 165 226 61 159 250 192 187 72 42 158 90 59 229 228 197 185 222 242 115 219 196 118 112 174 204 253 15 113 141 110 223 253 64 80 249 136 74 241 65 156 35 187 112 57 119 251 2 12 238 204 23 54 197 221 0 49 81 148 139 86 87 5 95 205 9 94 58 146 254 120 248 254 206 99 25 233 199 196 195 203 127 216 113 181 220 53 32 254 134 111 184 78 223 151 1 226 156 80 73 18 4 248 63 127 247 11 44 44 175 240 137 247 189 147 145 161 65 80 227 217 147 231 192 136 131 159 242 26 7 231 187 37 237 69 46 193 1 89 62 188 2 120 240 6 1 192 166 172 131 136 124 198 90 171 100 151 90 224 50 196 59 232 159 140 222 65 71 247 3 73 210 229 244 13 132 47 253 237 162 4 112 35 67 241 43 180 150 123 19 64 215 138 248 235 34 126 61 210 33 55 230 250 170 85 48 248 247 143 68 226 127 230 163 239 103 255 238 157 120 239 120 225 220 69 234 205 22 137 247 235 12 86 215 99 100 226 28 205 86 171 136 74 126 230 90 146 231 250 236 11 16 121 68 156 187 146 93 188 50 229 182 239 64 6 82 232 27 69 108 17 200 114 189 94 5 215 7 190 18 251 10 92 210 189 23 159 31 165 182 50 39 48 214 31 223 123 225 27 175 218 117 240 221 4 65 17 240 145 82 163 139 19 161 146 120 46 207 47 240 219 127 242 24 243 75 43 124 246 7 62 204 158 233 237 96 240 196 137 51 92 158 95 166 146 248 142 141 20 235 17 173 148 182 142 18 36 77 83 210 52 69 68 174 92 11 223 255 250 74 0 58 102 249 205 88 155 244 196 90 44 140 114 1 250 182 231 49 129 156 216 190 178 78 5 228 143 147 190 88 248 145 148 31 247 65 210 135 159 24 70 23 94 44 245 208 95 167 234 218 194 56 116 142 106 165 66 165 146 112 252 212 57 126 245 115 255 153 144 101 252 196 39 63 194 254 221 211 120 231 120 234 229 51 92 158 95 204 173 126 247 42 113 8 163 86 175 23 207 221 118 173 191 198 245 92 26 181 32 34 255 194 86 22 255 143 246 233 157 84 15 133 72 236 202 36 208 6 169 150 64 80 2 131 243 221 163 44 5 92 190 1 188 191 15 57 123 254 186 73 128 130 91 61 224 147 164 227 14 126 225 75 143 243 216 223 254 29 7 118 237 224 199 63 249 81 6 251 251 0 120 226 133 83 57 231 39 157 53 243 81 180 91 183 252 221 98 160 201 204 88 89 89 43 178 145 15 1 115 111 36 0 96 200 127 143 148 230 4 231 245 1 209 197 43 68 127 37 114 189 171 130 79 226 225 146 46 0 92 225 10 10 36 14 191 125 12 206 95 200 199 67 94 199 218 250 92 2 92 156 189 194 255 253 251 127 202 252 242 42 31 127 255 219 121 223 61 119 197 29 4 89 224 233 147 103 153 89 88 138 98 191 51 0 50 186 120 29 157 111 130 185 88 120 186 86 107 208 108 54 113 206 93 17 185 246 251 130 174 31 0 98 6 123 22 101 187 223 55 78 245 80 51 214 218 135 184 230 37 186 121 73 73 255 87 186 127 251 74 23 0 29 41 80 52 0 58 100 160 15 239 225 143 126 239 55 121 215 199 127 130 241 190 235 67 255 153 43 11 252 193 95 126 141 227 167 206 113 120 239 46 126 226 7 63 202 158 157 81 223 175 212 106 60 113 252 20 171 181 38 149 196 119 246 7 199 116 51 37 151 53 74 1 111 142 118 200 88 89 93 45 66 193 119 92 47 28 39 215 133 248 102 207 153 178 61 217 61 70 114 176 29 103 5 133 58 104 3 42 67 93 34 75 206 237 5 231 23 0 240 133 65 232 187 27 195 114 21 224 15 238 38 252 245 223 209 56 253 37 30 120 56 225 246 253 99 124 223 59 238 230 208 222 93 215 228 235 156 58 127 137 255 239 27 223 228 249 147 103 153 24 221 198 79 253 200 199 184 227 232 193 206 191 159 185 60 203 241 179 151 208 44 20 227 93 49 211 124 119 112 201 232 203 221 62 239 29 166 202 236 165 185 188 227 153 15 0 51 111 12 0 196 111 255 59 22 236 214 100 199 24 149 155 90 16 52 174 141 177 53 72 6 114 241 95 210 243 46 201 163 132 149 18 0 42 235 84 65 30 22 246 14 6 134 80 133 251 62 120 15 71 167 62 201 95 126 249 139 252 202 111 253 62 147 99 219 184 231 246 163 220 124 96 31 135 246 237 254 7 125 141 147 231 47 241 196 243 47 242 173 231 78 208 104 180 216 59 61 197 127 249 169 143 242 182 91 143 118 94 211 104 182 120 246 228 57 22 87 106 177 146 57 241 157 5 146 170 189 177 253 98 64 180 247 30 13 202 133 153 25 44 186 151 63 47 34 95 230 58 222 146 107 76 252 207 91 176 251 221 200 8 149 155 50 44 24 162 13 8 203 209 229 147 36 231 102 223 117 245 10 226 23 128 232 72 130 220 38 136 185 211 220 135 113 176 103 23 170 176 248 236 159 50 125 255 207 243 63 252 248 15 177 86 111 240 181 111 61 205 55 159 59 206 159 125 245 155 128 113 219 225 3 236 223 181 147 201 209 81 14 236 222 129 170 49 189 125 162 231 35 95 158 139 245 10 103 46 206 50 191 188 204 217 75 51 60 247 242 25 64 152 26 219 198 187 239 190 157 119 221 117 7 227 163 35 229 160 48 47 158 185 196 185 217 249 152 246 77 146 210 138 249 124 83 88 79 133 80 148 2 94 60 138 113 238 242 101 178 44 195 57 247 187 34 242 107 92 231 219 53 148 0 246 136 169 221 231 70 71 168 30 11 113 208 115 86 7 93 201 137 92 182 234 93 87 10 116 128 80 72 131 146 74 72 114 192 228 19 67 99 171 79 130 244 247 99 245 5 94 188 80 227 130 45 179 107 108 144 239 127 239 189 124 255 123 239 165 214 104 242 194 201 179 188 112 234 44 223 122 238 69 230 22 150 58 25 246 242 146 168 110 78 63 254 235 212 248 24 251 119 237 224 199 62 241 17 110 190 105 31 163 195 67 61 223 110 173 209 226 226 236 2 51 11 75 56 129 106 37 70 255 138 37 165 138 118 138 71 58 132 55 43 213 38 26 103 207 158 39 203 82 156 115 143 2 247 243 58 220 174 13 0 204 126 15 227 135 253 216 48 149 195 1 113 1 66 19 99 37 94 81 98 158 39 239 145 138 132 244 210 149 6 29 206 207 237 2 159 116 147 66 165 46 158 162 159 90 118 79 51 118 250 235 56 95 65 83 199 229 249 37 46 207 47 179 109 104 128 93 147 227 220 115 251 49 238 185 253 88 231 227 213 234 13 234 141 22 108 178 247 99 176 191 143 225 161 193 77 191 86 154 5 174 44 173 48 187 184 74 179 213 138 197 43 149 4 193 136 83 94 99 235 184 150 102 18 116 128 149 79 3 179 124 155 232 169 179 103 72 35 231 63 10 220 127 189 215 198 95 75 0 60 6 124 0 231 49 11 164 47 25 50 228 16 73 160 50 133 27 142 21 61 110 212 67 165 10 73 37 18 215 121 72 74 135 47 30 23 220 95 233 206 24 182 94 87 76 198 71 177 51 80 9 107 49 11 151 79 33 107 182 218 156 190 60 219 169 242 25 29 236 103 112 160 202 64 127 92 14 253 138 137 45 85 154 237 56 61 100 169 86 103 105 165 30 179 129 121 215 115 165 200 228 105 156 11 224 157 146 105 105 102 145 149 43 145 12 115 177 112 181 222 108 113 252 229 83 177 0 196 185 223 125 61 137 127 45 0 176 15 88 64 228 12 22 86 109 53 220 161 6 44 147 15 5 54 176 106 158 82 79 48 11 192 26 126 170 15 168 225 70 250 145 161 42 34 30 127 96 10 92 27 38 42 48 50 144 127 212 114 78 222 58 162 68 182 143 99 2 67 11 223 38 157 122 27 98 73 220 244 37 142 220 5 199 84 89 92 171 177 184 86 43 97 168 188 207 119 115 87 191 32 104 181 154 96 106 4 205 103 30 251 238 250 247 24 204 145 188 13 204 58 31 77 144 206 14 2 39 142 43 243 243 156 190 112 177 32 254 207 191 30 58 255 90 3 224 28 240 233 30 238 236 130 251 78 32 195 248 48 48 101 100 153 152 253 40 144 234 98 237 118 204 188 206 175 34 166 120 77 145 39 158 197 105 150 115 99 220 160 37 211 59 176 254 126 232 235 67 118 79 197 94 187 253 187 112 237 54 193 65 53 91 162 237 60 162 14 135 230 182 162 116 70 20 73 185 45 61 127 96 87 201 248 109 248 161 68 8 249 171 179 34 23 208 177 236 193 74 28 47 98 81 2 228 51 3 67 80 78 157 57 203 220 226 34 222 123 156 200 7 174 183 181 255 250 184 129 189 191 228 83 249 115 207 117 254 201 228 95 247 188 216 12 143 189 229 162 187 121 248 169 202 123 127 119 88 151 118 137 41 55 217 75 76 13 40 174 181 200 224 153 167 35 71 191 16 25 45 203 3 131 222 96 248 202 55 168 237 249 104 103 36 156 172 223 231 33 242 154 136 125 213 196 137 139 132 246 121 133 144 21 165 91 229 100 78 62 98 180 24 0 189 180 186 194 243 47 158 34 13 25 137 247 87 68 228 14 17 153 97 139 220 146 215 245 234 235 198 187 70 206 177 167 19 201 24 144 198 238 191 28 252 177 7 19 107 63 240 152 41 211 59 118 112 203 145 35 36 73 5 195 51 178 248 45 146 116 133 36 172 176 109 241 91 96 25 141 29 239 198 89 190 74 246 154 116 60 148 82 182 197 210 136 124 118 17 249 184 183 216 205 152 16 178 192 243 39 79 49 51 119 37 46 128 240 254 33 129 7 95 79 125 191 245 0 176 233 143 28 183 116 122 82 170 52 31 172 210 120 24 244 185 165 203 47 79 61 62 115 138 131 123 247 112 104 255 62 108 252 16 77 139 185 129 198 158 239 139 129 21 50 18 205 242 14 244 107 85 19 64 239 244 50 137 243 7 10 142 207 66 198 201 179 23 56 117 225 98 190 14 62 185 34 34 183 93 235 53 240 111 24 0 116 210 70 88 94 92 22 230 156 232 118 115 118 159 106 120 228 212 153 147 156 57 123 138 67 251 247 114 244 166 3 120 151 228 186 221 186 197 161 249 96 198 107 178 104 209 197 50 109 19 205 231 10 199 145 53 33 4 78 156 58 195 201 179 231 81 53 188 119 72 146 220 47 240 232 86 227 250 27 0 0 189 90 34 215 177 143 138 67 156 184 7 213 236 129 151 78 159 229 212 153 115 236 218 185 157 91 14 31 140 115 119 41 38 131 91 57 26 249 15 6 66 183 27 184 43 2 18 31 39 125 45 172 172 242 194 203 167 185 56 51 139 90 36 124 146 184 135 68 228 193 173 76 248 27 6 0 189 226 55 214 24 122 179 7 157 200 207 171 217 175 94 152 153 229 204 197 75 140 141 12 115 100 255 62 166 119 108 103 251 228 40 22 172 59 188 193 180 19 127 47 135 17 94 153 224 93 15 194 229 37 91 222 197 189 61 179 11 75 92 154 155 227 185 19 167 104 180 154 209 178 119 142 138 184 95 16 145 135 17 65 110 144 223 244 134 2 64 47 55 202 195 98 246 176 115 238 118 239 252 3 181 70 243 254 111 63 119 156 240 204 115 12 15 12 178 107 199 20 187 182 79 50 53 49 198 196 216 104 167 243 119 253 182 206 242 200 50 41 17 189 92 165 179 176 180 204 149 133 37 46 205 205 115 105 246 10 107 141 58 222 121 188 119 84 43 213 71 196 201 67 69 35 204 141 118 187 225 0 176 94 34 8 60 107 142 207 56 60 222 185 15 154 249 159 109 103 233 125 167 206 95 148 151 207 158 143 193 26 85 38 199 70 169 86 19 246 238 220 217 1 194 200 208 32 219 70 98 140 127 101 181 198 106 173 83 138 197 249 153 25 218 237 140 249 165 229 158 150 50 231 196 250 171 213 71 69 228 215 69 228 177 142 100 186 65 111 55 52 0 122 84 67 188 127 204 204 30 115 128 121 28 102 239 55 120 159 153 125 166 214 104 220 178 86 55 55 191 184 252 157 72 0 29 232 239 123 65 68 62 47 240 21 68 190 92 108 139 185 145 137 254 134 3 192 166 96 136 227 187 31 51 120 12 179 135 40 5 145 49 139 123 105 54 154 3 121 108 89 158 146 117 190 159 240 198 188 37 188 193 111 155 71 0 229 169 171 155 130 194 250 173 116 111 228 219 27 30 0 197 50 230 117 127 79 176 217 202 97 242 172 14 178 192 155 18 224 6 37 184 117 242 124 14 179 221 6 123 204 236 152 153 141 155 217 132 153 105 12 13 152 93 197 6 200 213 191 56 17 89 16 145 69 17 57 33 112 1 145 139 111 218 0 91 153 232 102 123 204 236 14 53 59 172 106 99 170 26 212 44 168 170 78 142 141 90 181 154 44 238 221 185 211 242 91 225 5 56 64 215 121 1 114 126 102 70 218 237 204 205 47 45 239 112 206 237 116 34 137 115 206 57 39 75 78 228 101 17 121 70 68 46 188 233 5 188 206 132 55 24 55 181 239 81 211 219 66 208 74 208 144 13 15 12 134 93 59 166 150 119 109 159 180 169 137 49 155 24 27 181 82 28 192 54 243 2 38 70 71 123 188 128 59 111 57 34 165 56 128 92 89 88 146 75 115 243 114 105 246 138 95 107 212 111 245 206 191 197 123 151 58 113 207 137 227 91 18 27 95 222 4 192 245 210 233 102 118 171 154 189 91 85 71 178 16 210 177 145 225 244 200 254 125 141 233 29 219 109 251 228 168 89 48 11 170 206 204 180 209 108 254 125 35 129 34 130 13 13 12 48 188 119 208 29 222 191 87 189 119 50 187 176 36 151 230 230 252 115 39 78 73 163 213 188 217 123 255 22 231 220 138 19 249 154 136 60 255 102 36 240 90 114 188 217 221 106 118 111 8 234 189 72 186 103 231 142 229 91 14 31 180 177 109 35 102 96 14 104 54 91 116 108 191 191 71 46 192 122 255 135 162 32 18 107 15 50 24 28 24 224 200 254 125 28 221 191 95 22 86 86 229 133 151 79 215 47 206 204 250 212 244 131 222 187 247 57 145 191 65 228 137 55 115 1 223 37 142 207 43 120 111 82 181 143 4 85 113 34 233 145 155 246 55 143 222 116 64 125 146 152 0 173 52 211 60 108 175 222 137 243 27 179 129 197 168 254 215 140 129 66 14 116 165 14 138 152 11 1 130 170 153 25 3 3 253 188 237 142 91 228 174 91 143 202 137 83 103 218 39 207 158 247 89 208 239 245 222 221 45 206 253 165 192 233 55 179 129 127 15 239 221 226 176 23 20 223 175 38 31 83 213 9 196 181 15 30 216 19 14 237 223 167 73 37 177 212 60 41 130 207 71 171 122 50 77 44 96 106 106 155 147 250 31 60 98 53 206 140 46 77 8 39 118 254 152 9 71 14 236 231 166 189 187 229 228 217 11 238 212 133 139 158 44 251 176 247 126 1 248 19 17 105 190 9 128 215 196 122 113 119 104 160 66 155 254 219 20 247 118 69 219 211 211 59 214 110 57 114 68 147 164 34 77 188 142 44 126 75 250 211 21 235 169 8 218 249 110 26 211 239 69 52 21 23 171 244 254 161 49 36 219 168 134 114 83 162 147 88 234 78 18 23 76 20 236 166 125 123 216 183 107 90 158 63 121 42 157 153 187 50 232 189 255 172 115 238 27 2 207 189 89 17 180 153 160 45 85 231 26 178 45 179 36 105 216 192 219 63 84 255 220 152 152 174 222 100 47 233 212 140 170 59 187 200 224 252 211 221 77 31 228 197 198 121 77 224 204 93 74 109 215 135 72 36 203 91 176 191 219 31 183 75 116 138 41 225 165 221 0 65 163 103 161 22 183 3 221 122 232 96 186 107 251 164 60 255 226 169 86 26 178 187 188 115 55 1 95 20 145 214 63 14 0 244 242 207 182 252 55 156 4 250 45 250 97 123 128 128 217 72 126 16 204 194 110 61 174 251 106 79 171 211 172 1 100 170 134 46 152 200 244 14 203 14 28 41 170 130 5 195 146 253 187 176 211 231 37 124 245 171 182 54 245 78 49 51 11 197 120 119 223 177 199 53 15 12 217 58 206 22 219 104 27 216 38 184 145 216 205 19 195 71 161 232 38 202 65 96 32 209 187 180 78 246 81 53 142 190 25 26 28 148 187 239 184 53 59 121 230 92 54 183 184 216 239 189 255 132 131 47 137 200 252 27 17 0 253 192 109 192 40 102 1 99 220 140 106 100 29 177 130 137 226 208 253 36 143 197 153 249 169 62 3 86 243 190 0 19 241 184 3 83 134 75 140 137 9 220 196 56 238 170 125 1 9 122 113 22 20 218 201 24 162 33 118 227 98 16 132 196 91 33 49 180 227 15 108 236 11 216 212 54 40 247 5 4 179 188 47 64 227 226 72 214 183 151 89 103 255 80 20 10 241 245 133 180 56 120 96 127 54 50 60 228 78 95 184 232 213 236 131 206 185 191 21 145 51 111 52 0 52 163 5 103 227 136 111 201 112 165 229 176 150 12 137 137 180 161 34 69 103 144 186 81 19 42 125 144 244 43 190 42 184 62 35 233 151 124 244 139 226 251 92 124 236 160 222 208 184 27 8 151 83 47 223 244 44 142 170 96 115 139 136 65 109 226 109 120 205 84 44 115 1 81 196 92 138 104 209 25 52 54 216 239 138 206 160 36 46 36 44 115 127 207 227 82 103 144 91 170 213 117 105 165 238 242 206 160 216 243 27 255 239 80 212 212 92 193 253 37 140 106 52 20 13 83 117 193 2 227 99 219 172 175 191 207 29 127 249 84 75 85 239 114 206 141 1 79 190 145 58 131 0 190 5 52 209 176 95 164 63 171 28 86 21 31 140 144 97 182 156 111 11 17 72 251 65 5 66 209 6 22 226 146 169 226 168 4 197 2 132 12 170 46 10 102 231 181 167 141 71 114 154 44 46 227 12 82 63 140 164 11 4 85 5 97 104 104 64 119 77 142 51 216 95 233 241 2 106 245 6 139 221 222 192 50 247 107 209 27 232 156 99 176 191 10 84 117 116 120 144 3 59 209 158 222 192 172 69 190 39 26 193 52 104 103 33 124 30 161 236 74 4 181 8 40 85 163 146 84 194 109 199 142 200 75 167 79 135 180 157 237 118 206 101 102 246 236 27 169 55 16 68 158 5 11 97 105 109 143 189 56 18 170 199 80 220 64 28 12 145 173 116 249 76 136 243 2 68 227 191 137 198 157 172 154 19 190 232 30 14 197 106 49 233 237 14 206 135 54 218 197 203 44 77 191 11 13 41 78 148 233 201 49 118 77 142 1 80 107 52 249 214 179 167 120 225 212 89 78 95 156 145 185 133 37 251 78 186 131 111 57 180 191 211 29 92 73 60 187 166 198 217 53 53 190 161 59 184 88 242 162 235 60 132 242 53 84 173 99 72 30 220 187 159 83 103 207 101 105 150 238 118 206 169 153 61 255 122 128 224 26 26 129 242 130 56 84 151 87 119 183 95 24 177 190 91 93 176 100 40 238 80 11 75 145 200 22 20 83 23 149 101 0 13 130 11 228 143 227 10 122 45 1 160 80 204 222 23 195 118 20 50 103 205 38 50 56 193 209 61 67 236 236 27 98 173 222 224 207 254 234 111 248 230 243 199 109 110 97 133 124 62 128 220 115 219 209 98 62 128 170 154 155 222 62 81 22 251 86 154 15 32 243 203 203 122 246 210 140 251 220 23 254 130 98 62 192 221 183 29 233 204 7 24 30 232 179 99 7 118 113 244 192 52 47 158 185 36 197 124 128 24 195 208 158 125 132 6 106 102 206 162 110 201 23 86 139 237 223 183 71 207 156 191 144 102 105 186 211 57 167 192 241 55 14 0 34 55 157 16 79 166 171 171 187 210 211 99 86 57 162 81 18 96 96 107 138 101 113 62 138 6 197 5 23 9 175 160 105 92 50 168 193 17 50 237 24 238 22 98 23 177 102 14 113 138 119 142 11 179 234 28 140 223 254 79 120 114 118 149 207 125 249 139 122 246 194 197 124 66 200 49 119 243 129 125 150 79 8 41 170 198 181 116 223 227 1 76 111 159 48 128 29 147 227 82 86 25 249 132 16 253 218 19 207 186 191 248 250 183 117 239 244 148 251 224 219 223 102 111 187 245 40 130 112 236 192 110 219 183 115 146 103 79 158 115 139 43 53 205 135 125 198 89 207 224 114 41 160 221 123 80 11 78 68 210 125 211 211 254 252 165 75 154 134 176 195 193 162 136 204 94 215 144 155 217 119 175 125 162 249 240 254 171 196 114 237 22 11 108 75 118 143 133 228 80 219 68 139 25 65 245 124 70 80 105 18 168 207 231 1 118 166 130 188 194 140 160 196 193 236 28 225 255 253 99 126 127 240 39 249 10 31 185 238 51 130 126 248 195 239 233 157 17 116 169 59 35 168 104 62 45 102 4 21 220 111 214 117 23 163 5 161 156 189 112 193 35 146 228 105 230 213 215 242 89 126 241 39 239 191 1 0 80 128 64 237 54 83 6 252 158 177 172 122 168 109 168 9 161 102 88 38 248 1 37 233 143 86 191 171 42 190 234 240 21 197 87 220 186 41 97 138 248 238 126 184 170 35 124 243 5 181 191 254 182 251 179 219 254 147 189 235 227 63 33 227 125 155 90 246 27 250 130 95 49 98 209 27 9 220 52 34 56 115 101 65 242 41 97 122 120 239 46 247 131 31 126 119 49 37 204 242 41 97 178 90 107 90 49 255 47 23 255 18 83 8 38 106 106 197 223 152 73 59 100 54 59 119 37 33 86 162 60 5 164 111 28 0 20 201 20 229 40 153 245 251 61 147 90 61 212 140 180 209 26 72 0 25 200 57 191 250 218 231 4 86 29 217 215 95 32 60 241 44 125 15 188 234 174 189 107 114 123 181 57 129 23 103 23 16 39 165 57 129 189 193 34 85 237 204 24 88 171 213 101 121 101 197 59 231 90 34 242 194 245 0 192 117 13 5 11 118 197 76 119 33 46 196 109 15 2 106 2 25 184 52 46 249 237 88 194 166 96 209 70 112 193 109 58 41 212 57 194 220 146 170 226 20 81 247 234 217 62 93 103 7 188 210 107 54 147 14 93 219 192 204 33 162 187 119 76 185 95 254 231 159 229 143 190 252 56 127 244 149 191 230 153 23 79 117 38 133 222 121 228 128 134 76 221 133 43 11 17 183 38 106 152 43 121 7 154 199 18 76 49 25 232 239 183 86 187 29 90 173 86 5 152 202 103 5 191 97 114 1 222 204 166 101 219 120 90 189 201 204 204 35 218 132 116 62 78 255 22 7 90 108 140 232 72 13 197 18 176 68 209 80 26 40 69 119 174 80 179 133 77 236 213 60 50 167 175 65 6 232 107 200 12 190 98 214 48 231 98 141 203 28 156 122 231 248 196 7 222 201 209 253 123 248 205 47 124 145 255 248 123 127 196 167 62 240 46 246 236 220 193 157 71 247 107 176 192 133 217 121 92 220 95 220 77 33 116 65 16 93 68 51 134 135 6 66 154 166 193 204 118 0 139 196 242 245 107 118 187 62 195 162 163 217 187 27 169 166 149 99 195 193 112 1 245 41 173 185 128 185 20 205 2 154 6 66 154 161 237 140 208 14 132 86 32 180 51 66 59 35 107 5 178 118 70 214 14 100 173 52 191 15 100 173 16 22 214 130 155 56 154 25 196 35 206 157 201 242 31 46 205 239 203 143 203 207 101 165 35 92 229 126 253 107 226 243 102 25 16 84 53 107 167 105 150 166 89 184 249 224 190 240 11 63 246 169 204 39 73 246 255 252 225 95 132 179 23 47 135 160 154 222 121 248 64 152 158 28 207 178 16 50 85 205 84 53 139 41 133 206 145 153 89 166 170 193 76 178 161 193 193 204 204 154 102 182 251 90 147 230 122 1 96 208 84 125 178 123 170 45 125 154 162 73 70 107 89 45 104 6 94 129 128 182 51 180 25 34 241 219 57 241 91 57 16 90 25 161 25 8 205 140 208 82 178 86 70 104 101 44 173 100 160 25 123 222 25 44 159 63 186 142 120 90 34 158 110 242 92 88 7 134 205 238 181 252 154 156 88 241 122 70 135 144 65 53 107 182 218 217 212 216 104 248 217 251 63 25 38 199 182 101 159 251 147 47 102 103 47 94 214 160 154 189 229 240 190 48 61 57 26 210 44 132 16 44 168 90 102 88 22 207 65 4 2 17 4 206 185 180 82 169 100 196 89 106 131 55 54 0 162 152 155 148 190 145 52 217 213 151 161 73 176 160 129 230 124 0 23 76 37 96 146 161 4 178 44 39 120 179 75 252 172 25 143 242 223 218 12 104 35 232 106 45 70 140 250 70 3 145 32 29 174 90 71 220 127 200 209 1 74 113 110 93 119 13 139 149 199 65 85 67 171 221 14 8 225 167 239 255 68 152 24 221 22 62 255 231 95 14 103 47 206 132 16 52 220 178 111 119 24 236 239 11 89 8 193 76 75 18 160 120 28 207 133 106 232 239 235 203 68 36 53 179 201 27 8 0 214 123 68 69 55 140 106 150 236 153 206 204 36 160 62 80 159 9 102 46 160 18 48 23 76 93 192 36 134 0 181 144 0 173 222 163 3 132 102 231 177 173 54 131 88 8 28 254 100 228 72 237 18 231 187 12 130 46 177 33 39 88 47 216 10 96 168 90 72 179 44 24 132 127 246 233 8 130 47 124 229 27 97 181 86 15 56 9 183 31 218 23 16 66 166 33 168 230 239 11 22 140 238 231 214 24 32 15 73 146 20 224 27 186 33 0 208 179 55 208 52 46 134 48 29 148 129 137 204 143 186 72 252 180 21 104 173 6 52 231 126 37 96 18 65 160 18 80 23 208 16 137 158 230 4 15 141 66 50 68 221 31 162 4 176 181 86 0 11 22 218 57 97 108 195 241 93 35 124 15 231 203 85 175 19 76 67 8 22 178 44 4 176 240 195 31 126 79 72 67 8 255 249 75 95 15 89 26 194 80 181 18 14 237 222 30 178 44 74 12 53 11 38 27 63 183 169 6 39 82 216 44 215 12 0 215 118 111 160 89 255 246 236 116 240 211 187 84 53 86 232 104 99 1 71 238 2 74 204 199 137 70 109 103 146 175 150 205 151 40 32 65 8 89 190 80 168 221 187 55 16 69 151 243 235 236 185 11 11 29 3 27 205 247 240 150 170 57 120 133 64 207 171 104 176 152 59 210 158 228 78 215 27 48 51 41 26 77 226 88 88 233 248 249 166 194 228 232 54 126 232 67 239 230 119 254 228 75 124 253 169 231 120 251 29 55 179 119 251 20 151 175 44 177 180 90 235 236 13 44 188 0 114 93 86 92 196 121 143 134 224 68 164 63 79 183 111 93 0 108 216 27 168 218 199 208 246 224 71 42 106 154 9 100 72 115 49 174 146 79 36 166 206 0 115 134 168 196 193 64 120 103 113 133 156 198 165 153 226 242 28 91 49 16 192 8 128 4 44 84 144 254 17 209 130 246 106 68 177 35 46 150 105 198 28 98 225 219 139 200 102 254 255 250 231 58 127 151 98 248 210 169 250 49 36 127 206 117 49 210 13 240 148 193 145 170 74 48 181 195 251 246 112 239 91 110 149 191 125 230 5 246 79 79 177 125 124 156 35 123 167 121 252 153 19 150 196 44 167 148 207 33 102 104 8 197 4 113 52 2 181 239 90 0 224 218 237 13 68 156 153 153 140 237 8 170 98 80 209 80 155 85 212 41 234 130 5 201 85 64 60 76 69 99 96 72 20 145 44 61 61 68 88 168 98 104 176 129 131 10 253 138 90 32 136 18 95 171 186 224 85 119 189 189 16 255 154 27 83 69 213 150 154 153 106 20 221 229 100 76 182 206 178 183 82 98 168 120 191 170 170 106 124 191 105 239 57 67 126 158 66 92 71 232 197 211 23 47 215 188 206 64 67 8 218 110 183 245 61 119 223 30 182 13 15 133 199 159 58 30 210 44 213 254 106 37 236 156 28 213 84 139 75 153 246 168 0 17 237 170 23 151 93 43 163 253 26 237 13 4 204 18 243 125 193 141 110 139 214 62 73 144 250 92 110 252 185 14 17 77 69 11 162 154 74 48 35 208 242 150 205 86 67 235 212 64 32 29 83 146 49 181 129 99 106 244 171 41 241 61 26 167 244 74 255 54 53 80 83 13 157 31 191 115 228 32 208 80 244 8 134 226 137 117 175 45 44 249 50 104 58 4 142 133 191 182 158 80 157 247 171 153 90 180 11 116 227 121 209 44 11 234 157 232 39 223 255 14 189 178 188 172 199 79 157 11 153 170 238 219 62 165 33 168 134 16 130 65 80 139 9 130 222 107 160 34 90 184 174 201 150 86 1 189 193 83 115 110 104 42 51 196 68 61 52 103 209 96 226 196 99 249 96 55 81 28 14 141 65 85 12 143 224 176 246 133 170 72 18 11 235 90 39 70 168 222 233 145 138 9 253 183 66 253 4 104 211 194 98 69 176 204 194 244 59 156 5 212 76 11 189 217 163 240 85 49 23 227 176 133 108 119 113 154 187 110 24 3 96 209 86 48 83 117 34 18 235 138 4 89 95 216 81 210 249 174 163 34 186 162 223 214 21 131 56 53 83 130 202 158 29 83 28 152 222 105 207 157 62 203 254 233 157 46 73 156 78 108 27 146 165 213 26 26 66 217 174 232 244 49 230 237 234 215 204 109 255 255 7 0 128 121 166 188 61 109 45 232 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!CSSDockFileLibrary methodsFor: 'images'!homePng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 128 0 0 0 128 8 6 0 0 0 195 62 97 203 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 10 79 105 67 67 80 80 104 111 116 111 115 104 111 112 32 73 67 67 32 112 114 111 102 105 108 101 0 0 120 218 157 83 103 84 83 233 22 61 247 222 244 66 75 136 128 148 75 111 82 21 8 32 82 66 139 128 20 145 38 42 33 9 16 74 136 33 161 217 21 81 193 17 69 69 4 27 200 160 136 3 142 142 128 140 21 81 44 12 138 10 216 7 228 33 162 142 131 163 136 138 202 251 225 123 163 107 214 188 247 230 205 254 181 215 62 231 172 243 157 179 207 7 192 8 12 150 72 51 81 53 128 12 169 66 30 17 224 131 199 196 198 225 228 46 64 129 10 36 112 0 16 8 179 100 33 115 253 35 1 0 248 126 60 60 43 34 192 7 190 0 1 120 211 11 8 0 192 77 155 192 48 28 135 255 15 234 66 153 92 1 128 132 1 192 116 145 56 75 8 128 20 0 64 122 142 66 166 0 64 70 1 128 157 152 38 83 0 160 4 0 96 203 99 98 227 0 80 45 0 96 39 127 230 211 0 128 157 248 153 123 1 0 91 148 33 21 1 160 145 0 32 19 101 136 68 0 104 59 0 172 207 86 138 69 0 88 48 0 20 102 75 196 57 0 216 45 0 48 73 87 102 72 0 176 183 0 192 206 16 11 178 0 8 12 0 48 81 136 133 41 0 4 123 0 96 200 35 35 120 0 132 153 0 20 70 242 87 60 241 43 174 16 231 42 0 0 120 153 178 60 185 36 57 69 129 91 8 45 113 7 87 87 46 30 40 206 73 23 43 20 54 97 2 97 154 64 46 194 121 153 25 50 129 52 15 224 243 204 0 0 160 145 21 17 224 131 243 253 120 206 14 174 206 206 54 142 182 14 95 45 234 191 6 255 34 98 98 227 254 229 207 171 112 64 0 0 225 116 126 209 254 44 47 179 26 128 59 6 128 109 254 162 37 238 4 104 94 11 160 117 247 139 102 178 15 64 181 0 160 233 218 87 243 112 248 126 60 60 69 161 144 185 217 217 229 228 228 216 74 196 66 91 97 202 87 125 254 103 194 95 192 87 253 108 249 126 60 252 247 245 224 190 226 36 129 50 93 129 71 4 248 224 194 204 244 76 165 28 207 146 9 132 98 220 230 143 71 252 183 11 255 252 29 211 34 196 73 98 185 88 42 20 227 81 18 113 142 68 154 140 243 50 165 34 137 66 146 41 197 37 210 255 100 226 223 44 251 3 62 223 53 0 176 106 62 1 123 145 45 168 93 99 3 246 75 39 16 88 116 192 226 247 0 0 242 187 111 193 212 40 8 3 128 104 131 225 207 119 255 239 63 253 71 160 37 0 128 102 73 146 113 0 0 94 68 36 46 84 202 179 63 199 8 0 0 68 160 129 42 176 65 27 244 193 24 44 192 6 28 193 5 220 193 11 252 96 54 132 66 36 196 194 66 16 66 10 100 128 28 114 96 41 172 130 66 40 134 205 176 29 42 96 47 212 64 29 52 192 81 104 134 147 112 14 46 194 85 184 14 61 112 15 250 97 8 158 193 40 188 129 9 4 65 200 8 19 97 33 218 136 1 98 138 88 35 142 8 23 153 133 248 33 193 72 4 18 139 36 32 201 136 20 81 34 75 145 53 72 49 82 138 84 32 85 72 29 242 61 114 2 57 135 92 70 186 145 59 200 0 50 130 252 134 188 71 49 148 129 178 81 61 212 12 181 67 185 168 55 26 132 70 162 11 208 100 116 49 154 143 22 160 155 208 114 180 26 61 140 54 161 231 208 171 104 15 218 143 62 67 199 48 192 232 24 7 51 196 108 48 46 198 195 66 177 56 44 9 147 99 203 177 34 172 12 171 198 26 176 86 172 3 187 137 245 99 207 177 119 4 18 129 69 192 9 54 4 119 66 32 97 30 65 72 88 76 88 78 216 72 168 32 28 36 52 17 218 9 55 9 3 132 81 194 39 34 147 168 75 180 38 186 17 249 196 24 98 50 49 135 88 72 44 35 214 18 143 19 47 16 123 136 67 196 55 36 18 137 67 50 39 185 144 2 73 177 164 84 210 18 210 70 210 110 82 35 233 44 169 155 52 72 26 35 147 201 218 100 107 178 7 57 148 44 32 43 200 133 228 157 228 195 228 51 228 27 228 33 242 91 10 157 98 64 113 164 248 83 226 40 82 202 106 74 25 229 16 229 52 229 6 101 152 50 65 85 163 154 82 221 168 161 84 17 53 143 90 66 173 161 182 82 175 81 135 168 19 52 117 154 57 205 131 22 73 75 165 173 162 149 211 26 104 23 104 247 105 175 232 116 186 17 221 149 30 78 151 208 87 210 203 233 71 232 151 232 3 244 119 12 13 134 21 131 199 136 103 40 25 155 24 7 24 103 25 119 24 175 152 76 166 25 211 139 25 199 84 48 55 49 235 152 231 153 15 153 111 85 88 42 182 42 124 21 145 202 10 149 74 149 38 149 27 42 47 84 169 170 166 170 222 170 11 85 243 85 203 84 143 169 94 83 125 174 70 85 51 83 227 169 9 212 150 171 85 170 157 80 235 83 27 83 103 169 59 168 135 170 103 168 111 84 63 164 126 89 253 137 6 89 195 76 195 79 67 164 81 160 177 95 227 188 198 32 11 99 25 179 120 44 33 107 13 171 134 117 129 53 196 38 177 205 217 124 118 42 187 152 253 29 187 139 61 170 169 161 57 67 51 74 51 87 179 82 243 148 102 63 7 227 152 113 248 156 116 78 9 231 40 167 151 243 126 138 222 20 239 41 226 41 27 166 52 76 185 49 101 92 107 170 150 151 150 88 171 72 171 81 171 71 235 189 54 174 237 167 157 166 189 69 187 89 251 129 14 65 199 74 39 92 39 71 103 143 206 5 157 231 83 217 83 221 167 10 167 22 77 61 58 245 174 46 170 107 165 27 161 187 68 119 191 110 167 238 152 158 190 94 128 158 76 111 167 222 121 189 231 250 28 125 47 253 84 253 109 250 167 245 71 12 88 6 179 12 36 6 219 12 206 24 60 197 53 113 111 60 29 47 199 219 241 81 67 93 195 64 67 165 97 149 97 151 225 132 145 185 209 60 163 213 70 141 70 15 140 105 198 92 227 36 227 109 198 109 198 163 38 6 38 33 38 75 77 234 77 238 154 82 77 185 166 41 166 59 76 59 76 199 205 204 205 162 205 214 153 53 155 61 49 215 50 231 155 231 155 215 155 223 183 96 90 120 90 44 182 168 182 184 101 73 178 228 90 166 89 238 182 188 110 133 90 57 89 165 88 85 90 93 179 70 173 157 173 37 214 187 173 187 167 17 167 185 78 147 78 171 158 214 103 195 176 241 182 201 182 169 183 25 176 229 216 6 219 174 182 109 182 125 97 103 98 23 103 183 197 174 195 238 147 189 147 125 186 125 141 253 61 7 13 135 217 14 171 29 90 29 126 115 180 114 20 58 86 58 222 154 206 156 238 63 125 197 244 150 233 47 103 88 207 16 207 216 51 227 182 19 203 41 196 105 157 83 155 211 71 103 23 103 185 115 131 243 136 139 137 75 130 203 46 151 62 46 155 27 198 221 200 189 228 74 116 245 113 93 225 122 210 245 157 155 179 155 194 237 168 219 175 238 54 238 105 238 135 220 159 204 52 159 41 158 89 51 115 208 195 200 67 224 81 229 209 63 11 159 149 48 107 223 172 126 79 67 79 129 103 181 231 35 47 99 47 145 87 173 215 176 183 165 119 170 247 97 239 23 62 246 62 114 159 227 62 227 60 55 222 50 222 89 95 204 55 192 183 200 183 203 79 195 111 158 95 133 223 67 127 35 255 100 255 122 255 209 0 167 128 37 1 103 3 137 129 65 129 91 2 251 248 122 124 33 191 142 63 58 219 101 246 178 217 237 65 140 160 185 65 21 65 143 130 173 130 229 193 173 33 104 200 236 144 173 33 247 231 152 206 145 206 105 14 133 80 126 232 214 208 7 97 230 97 139 195 126 12 39 133 135 133 87 134 63 142 112 136 88 26 209 49 151 53 119 209 220 67 115 223 68 250 68 150 68 222 155 103 49 79 57 175 45 74 53 42 62 170 46 106 60 218 55 186 52 186 63 198 46 102 89 204 213 88 157 88 73 108 75 28 57 46 42 174 54 110 108 190 223 252 237 243 135 226 157 226 11 227 123 23 152 47 200 93 112 121 161 206 194 244 133 167 22 169 46 18 44 58 150 64 76 136 78 56 148 240 65 16 42 168 22 140 37 242 19 119 37 142 10 121 194 29 194 103 34 47 209 54 209 136 216 67 92 42 30 78 242 72 42 77 122 146 236 145 188 53 121 36 197 51 165 44 229 185 132 39 169 144 188 76 13 76 221 155 58 158 22 154 118 32 109 50 61 58 189 49 131 146 145 144 113 66 170 33 77 147 182 103 234 103 230 102 118 203 172 101 133 178 254 197 110 139 183 47 30 149 7 201 107 179 144 172 5 89 45 10 182 66 166 232 84 90 40 215 42 7 178 103 101 87 102 191 205 137 202 57 150 171 158 43 205 237 204 179 202 219 144 55 156 239 159 255 237 18 194 18 225 146 182 165 134 75 87 45 29 88 230 189 172 106 57 178 60 113 121 219 10 227 21 5 43 134 86 6 172 60 184 138 182 42 109 213 79 171 237 87 151 174 126 189 38 122 77 107 129 94 193 202 130 193 181 1 107 235 11 85 10 229 133 125 235 220 215 237 93 79 88 47 89 223 181 97 250 134 157 27 62 21 137 138 174 20 219 23 151 21 127 216 40 220 120 229 27 135 111 202 191 153 220 148 180 169 171 196 185 100 207 102 210 102 233 230 222 45 158 91 14 150 170 151 230 151 14 110 13 217 218 180 13 223 86 180 237 245 246 69 219 47 151 205 40 219 187 131 182 67 185 163 191 60 184 188 101 167 201 206 205 59 63 84 164 84 244 84 250 84 54 238 210 221 181 97 215 248 110 209 238 27 123 188 246 52 236 213 219 91 188 247 253 62 201 190 219 85 1 85 77 213 102 213 101 251 73 251 179 247 63 174 137 170 233 248 150 251 109 93 173 78 109 113 237 199 3 210 3 253 7 35 14 182 215 185 212 213 29 210 61 84 82 143 214 43 235 71 14 199 31 190 254 157 239 119 45 13 54 13 85 141 156 198 226 35 112 68 121 228 233 247 9 223 247 30 13 58 218 118 140 123 172 225 7 211 31 118 29 103 29 47 106 66 154 242 154 70 155 83 154 251 91 98 91 186 79 204 62 209 214 234 222 122 252 71 219 31 15 156 52 60 89 121 74 243 84 201 105 218 233 130 211 147 103 242 207 140 157 149 157 125 126 46 249 220 96 219 162 182 123 231 99 206 223 106 15 111 239 186 16 116 225 210 69 255 139 231 59 188 59 206 92 242 184 116 242 178 219 229 19 87 184 87 154 175 58 95 109 234 116 234 60 254 147 211 79 199 187 156 187 154 174 185 92 107 185 238 122 189 181 123 102 247 233 27 158 55 206 221 244 189 121 241 22 255 214 213 158 57 61 221 189 243 122 111 247 197 247 245 223 22 221 126 114 39 253 206 203 187 217 119 39 238 173 188 79 188 95 244 64 237 65 217 67 221 135 213 63 91 254 220 216 239 220 127 106 192 119 160 243 209 220 71 247 6 133 131 207 254 145 245 143 15 67 5 143 153 143 203 134 13 134 235 158 56 62 57 57 226 63 114 253 233 252 167 67 207 100 207 38 158 23 254 162 254 203 174 23 22 47 126 248 213 235 215 206 209 152 209 161 151 242 151 147 191 109 124 165 253 234 192 235 25 175 219 198 194 198 30 190 201 120 51 49 94 244 86 251 237 193 119 220 119 29 239 163 223 15 79 228 124 32 127 40 255 104 249 177 245 83 208 167 251 147 25 147 147 255 4 3 152 243 252 99 51 45 219 0 0 0 4 103 65 77 65 0 0 177 142 124 251 81 147 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 233 0 0 117 48 0 0 234 96 0 0 58 152 0 0 23 111 146 95 197 70 0 0 46 189 73 68 65 84 120 218 236 189 123 144 100 121 117 223 249 57 191 223 189 153 245 236 25 102 170 123 166 231 217 3 12 66 138 145 177 86 222 93 36 97 9 44 201 50 16 194 192 200 192 138 213 174 237 240 35 214 97 135 247 15 199 58 236 127 132 28 235 181 99 99 181 43 57 144 245 178 45 133 44 11 196 27 4 182 5 72 8 49 32 196 67 14 131 245 32 152 97 222 211 143 234 238 234 238 122 100 230 189 247 119 206 254 113 126 247 230 205 234 170 238 234 153 234 233 158 174 201 136 27 55 51 43 51 43 243 126 191 191 243 254 157 35 102 198 139 183 131 123 43 246 227 67 198 63 119 207 11 235 87 155 1 6 166 13 240 73 36 188 1 4 68 118 123 3 5 13 5 231 249 199 242 155 44 115 158 130 26 185 198 63 227 31 255 189 191 113 125 16 224 5 7 190 37 44 85 167 73 147 8 188 158 56 60 35 113 112 43 196 75 144 224 198 188 133 3 9 126 51 90 101 116 230 214 225 219 254 19 195 183 253 39 24 157 185 197 154 209 42 150 178 116 120 145 0 55 56 248 231 86 6 63 246 9 194 221 175 33 220 253 26 6 63 246 9 24 157 91 57 136 36 8 7 11 252 177 131 255 224 199 136 247 191 1 236 33 176 135 136 247 191 129 193 131 31 205 36 24 95 130 4 130 17 48 4 184 49 84 69 113 224 192 127 235 135 136 223 246 163 96 127 0 213 159 64 48 40 11 226 183 189 137 193 91 63 72 245 161 7 87 108 254 37 171 82 204 29 238 219 4 14 122 65 205 128 68 65 73 2 180 253 39 71 204 56 102 102 99 48 221 153 58 128 72 8 200 28 194 99 32 167 94 36 192 243 13 254 91 222 71 124 229 91 64 63 12 233 52 72 4 3 234 175 65 169 196 87 190 149 193 91 222 71 245 225 183 175 216 252 205 51 36 80 2 48 224 255 179 215 243 127 216 123 8 40 5 13 96 24 246 79 83 210 127 88 55 13 154 20 227 98 10 136 8 49 4 202 162 32 196 240 179 130 252 239 47 18 224 121 1 127 178 202 232 252 202 224 77 191 65 252 246 31 131 244 65 72 103 192 226 84 140 91 128 201 215 161 60 73 252 246 191 198 32 37 170 143 189 115 197 230 101 85 138 225 97 136 152 8 13 5 5 243 172 215 37 81 96 72 34 160 168 217 198 100 82 241 119 126 252 173 212 77 194 146 97 146 229 134 129 26 196 32 132 16 248 149 15 124 148 178 44 55 66 184 62 84 72 113 227 175 252 243 43 131 31 253 21 226 3 239 128 230 61 160 107 96 69 79 124 247 110 205 9 40 223 79 124 224 29 12 172 161 250 248 95 95 177 185 155 58 18 168 68 96 142 159 159 123 27 127 111 237 23 89 146 154 130 6 213 212 108 141 198 172 188 228 22 170 170 226 220 250 6 34 1 177 44 11 4 162 8 106 202 104 115 132 14 83 19 66 120 145 0 87 21 252 122 180 138 201 202 224 77 191 230 224 79 126 21 210 121 136 3 15 2 237 248 94 129 250 36 200 175 19 191 243 157 12 82 69 245 31 255 182 147 160 156 59 172 4 26 113 41 112 122 83 209 88 51 39 21 150 26 70 163 17 231 206 157 103 237 194 5 190 244 245 63 35 134 128 100 251 65 4 98 140 108 110 110 50 158 140 49 83 94 36 192 213 6 95 89 25 254 47 159 34 28 121 37 108 254 18 232 58 196 97 23 217 219 149 4 10 164 147 208 252 59 226 159 255 113 134 55 223 195 228 131 111 91 177 122 228 36 144 0 54 228 125 247 254 125 222 254 141 255 147 67 177 70 180 98 60 158 176 190 177 193 214 104 66 74 13 98 177 139 41 137 8 2 212 117 195 100 82 97 106 47 18 224 106 175 252 225 59 63 78 56 114 12 206 255 34 232 5 7 223 18 104 3 221 197 151 139 109 117 51 231 70 117 28 210 191 33 28 251 9 134 63 254 9 38 191 241 198 21 171 199 171 90 206 29 78 33 18 109 142 51 91 138 20 53 3 38 76 170 49 235 27 27 140 198 21 169 105 144 104 157 4 104 191 95 74 137 106 50 198 52 113 189 216 0 225 198 2 127 236 224 191 227 195 132 163 199 224 204 47 192 228 4 36 243 215 104 2 107 242 50 55 32 205 30 218 128 214 96 234 175 31 31 135 181 95 34 28 189 143 225 59 62 2 38 43 212 147 213 164 128 150 124 250 47 188 139 181 45 101 115 220 48 153 52 92 216 216 100 52 30 83 55 13 85 93 95 124 84 21 227 73 197 100 82 49 153 212 207 249 120 81 2 108 7 159 176 50 124 219 111 16 238 184 11 78 188 59 235 252 5 8 25 220 86 252 139 57 247 251 171 80 45 19 32 245 206 6 205 51 176 250 243 132 59 255 58 195 183 253 38 147 247 191 99 69 155 201 106 146 242 112 76 67 206 110 40 82 214 38 117 197 198 198 6 106 66 83 53 104 144 25 9 96 81 169 235 154 122 50 1 125 209 6 216 127 87 143 184 50 124 240 87 8 71 239 132 167 223 13 233 2 132 185 12 126 221 83 240 10 141 66 44 166 2 80 179 116 72 45 240 249 61 109 68 112 124 2 158 249 121 194 29 127 131 225 131 191 198 228 131 255 235 74 170 235 83 49 198 35 95 126 253 191 226 123 126 235 39 234 57 173 56 127 97 3 9 145 170 169 9 50 75 0 53 99 82 85 84 213 228 69 35 112 127 193 175 86 209 176 50 124 243 47 18 110 63 2 79 253 12 52 23 160 88 200 58 191 206 226 94 179 168 111 64 6 16 65 31 126 198 5 193 75 239 132 166 246 149 159 250 82 160 129 148 252 173 245 113 120 250 221 132 59 255 38 195 55 255 18 147 15 255 157 195 86 215 79 75 25 239 60 63 106 54 148 134 115 23 46 48 24 206 209 52 141 7 139 91 47 0 48 51 234 170 102 92 85 168 25 242 34 1 158 43 248 234 224 91 88 25 190 233 103 9 71 111 129 199 127 22 244 60 132 5 72 10 100 240 77 167 122 63 40 196 136 125 235 9 38 31 125 15 96 204 189 245 157 200 61 71 50 9 170 12 122 143 8 86 129 42 140 159 129 39 254 21 225 232 223 98 238 205 239 38 125 236 239 223 81 212 147 63 57 164 231 254 205 250 196 56 123 126 147 229 37 237 8 48 141 2 186 4 168 235 138 122 82 33 118 253 120 1 225 133 14 254 224 141 255 15 225 142 67 240 216 255 11 227 167 29 120 107 64 39 144 242 161 19 7 214 38 32 9 123 244 73 170 143 253 7 24 70 24 22 84 31 253 247 216 163 79 128 212 96 117 126 111 53 61 167 246 121 133 173 103 224 241 159 69 110 187 153 226 141 63 13 77 249 237 31 248 129 207 254 116 83 141 121 102 109 196 185 205 9 117 221 184 190 239 142 254 227 137 19 97 31 142 131 71 128 62 248 132 149 193 235 255 47 226 237 75 240 200 207 192 248 169 108 189 55 83 208 251 4 72 19 7 248 177 103 168 63 241 1 36 36 254 248 117 159 226 191 253 192 167 144 208 80 127 252 253 240 248 211 153 4 25 248 102 2 105 220 35 68 227 255 99 252 148 19 238 182 101 248 203 255 55 119 45 79 248 212 143 124 158 106 50 230 194 72 153 212 238 5 212 59 29 85 67 93 213 251 114 28 44 2 180 224 167 106 21 226 202 224 135 127 146 120 219 50 246 232 187 97 124 18 84 50 72 227 41 224 58 113 48 173 134 80 195 19 39 169 62 245 113 8 13 127 252 218 79 50 89 184 139 201 226 93 124 237 53 191 141 132 154 234 183 127 11 158 60 225 118 2 25 252 180 141 4 41 75 130 209 73 120 236 231 224 182 37 248 193 127 206 61 47 73 252 204 61 255 142 241 120 139 11 35 101 52 241 160 207 164 170 152 76 38 84 213 36 19 96 76 61 217 159 227 224 16 160 3 191 246 149 255 131 255 132 120 120 17 251 214 47 192 214 170 39 118 84 243 202 29 231 99 228 135 78 192 70 232 83 103 168 126 231 51 136 36 254 248 181 159 98 180 120 140 88 95 32 78 214 24 45 30 227 191 124 223 127 70 164 161 250 244 239 160 79 173 130 141 51 121 70 208 228 207 212 173 124 110 0 193 70 39 177 71 126 1 86 150 225 7 126 146 91 138 115 252 139 35 255 154 106 82 177 62 134 113 173 89 252 167 124 52 52 77 67 147 210 190 28 7 131 0 25 124 82 237 58 255 251 255 17 113 101 1 125 244 223 194 232 20 16 232 42 155 85 123 224 143 29 68 70 232 51 231 104 126 255 11 16 107 254 219 107 63 201 104 241 62 66 179 9 245 8 210 132 208 108 50 90 56 198 31 125 239 39 16 169 105 62 251 121 244 248 26 136 255 29 27 67 157 73 96 85 86 53 226 73 165 241 105 236 209 95 134 35 75 240 253 255 148 149 226 2 63 125 247 47 211 212 19 214 199 137 113 85 83 213 21 213 69 58 124 242 156 143 27 159 0 45 248 218 172 26 113 165 124 205 63 64 86 22 209 111 253 42 140 86 49 139 217 181 55 172 243 223 53 131 182 5 182 133 30 95 167 249 131 175 65 104 248 211 215 126 154 106 249 165 148 105 139 152 42 2 30 11 138 86 51 176 45 198 75 47 117 18 132 134 230 243 255 5 125 102 29 100 203 87 190 181 171 223 255 143 105 142 22 106 192 70 103 209 111 253 26 220 122 8 190 239 31 177 82 174 243 51 199 126 149 186 170 184 48 54 198 85 67 85 57 9 154 186 161 169 26 234 42 61 231 227 198 38 128 181 225 219 102 213 76 86 202 239 249 187 196 91 23 176 135 255 61 54 58 3 26 64 213 129 208 4 41 97 73 157 0 52 192 24 61 53 161 249 210 35 32 13 127 250 186 79 49 94 62 134 52 155 88 154 96 24 42 134 170 199 8 84 43 66 179 206 104 241 94 190 250 234 143 19 164 161 249 210 55 209 19 25 252 214 21 84 245 154 159 228 100 51 51 183 63 182 206 144 30 249 117 184 101 25 94 253 15 57 60 92 231 95 191 226 61 88 74 108 213 129 58 129 54 74 74 13 41 213 251 114 220 184 4 104 235 246 181 94 53 194 74 249 63 252 45 226 77 139 232 195 239 133 173 179 190 234 12 143 241 167 132 165 233 234 55 77 32 138 158 130 250 171 207 32 161 225 207 94 247 41 38 203 46 246 197 178 143 46 254 227 67 112 105 46 24 193 18 101 179 201 214 194 49 190 252 63 126 140 32 53 233 171 79 163 171 234 238 35 153 112 41 65 82 255 191 201 37 129 89 128 241 25 210 35 239 129 155 23 225 47 252 111 28 158 91 231 23 190 253 125 8 198 68 75 26 162 87 12 169 117 100 122 78 199 141 73 128 12 126 106 86 77 100 101 240 223 253 207 132 165 121 210 35 239 199 70 103 189 54 79 205 193 87 237 238 155 58 113 36 24 122 202 168 191 118 154 16 26 190 241 131 159 102 114 232 152 235 252 84 35 154 60 233 167 70 74 70 50 195 204 48 12 193 48 107 40 82 75 130 143 32 161 33 253 215 179 216 241 77 164 185 144 237 139 10 107 42 15 44 26 152 74 142 51 69 116 180 70 122 248 131 176 188 4 175 250 155 29 9 192 24 107 160 81 15 10 105 174 20 122 46 199 13 72 128 158 216 23 89 41 190 243 127 194 22 231 209 111 125 8 70 103 179 216 23 44 225 43 176 73 30 189 171 71 80 173 67 125 134 244 244 25 154 175 159 36 72 205 159 253 208 239 48 90 190 15 105 182 220 125 3 84 4 83 67 85 25 12 75 6 131 18 53 197 76 48 243 176 173 88 77 97 155 108 46 222 203 23 255 251 15 35 161 162 249 147 45 210 241 17 82 159 197 198 103 97 114 6 70 39 176 205 227 238 137 140 214 176 201 6 82 79 176 205 85 154 135 63 132 29 90 134 7 126 130 149 185 117 126 254 149 239 195 146 177 149 34 149 10 85 130 73 130 241 115 56 246 227 38 251 177 55 112 127 182 134 117 41 219 85 67 86 138 239 120 144 176 188 140 62 241 159 115 108 63 128 53 136 36 144 6 36 33 33 57 133 11 37 20 138 158 135 244 152 33 209 248 198 15 125 154 201 226 125 132 102 29 109 170 78 173 104 82 146 38 138 162 224 165 119 223 137 152 241 240 19 79 50 169 106 68 196 137 32 230 95 133 146 20 230 25 110 61 193 171 191 242 22 44 5 194 49 33 220 100 88 35 88 38 100 71 74 117 233 100 13 78 184 120 19 241 165 111 38 108 94 128 71 62 202 137 11 243 220 255 115 183 82 167 248 147 136 252 179 70 229 57 109 65 72 79 127 249 70 33 128 181 201 157 85 67 86 226 43 126 20 153 95 192 30 255 109 168 215 32 128 68 115 147 61 8 18 12 162 117 207 75 72 232 134 161 79 37 36 24 223 252 161 223 101 188 116 47 161 94 71 147 131 175 234 30 69 74 137 162 44 184 239 174 59 48 117 241 175 40 143 62 249 12 85 229 89 60 21 65 90 49 77 73 93 204 179 176 245 4 175 254 242 131 168 10 225 238 128 44 131 53 1 82 192 76 160 17 192 166 234 160 201 18 170 56 68 188 231 135 137 227 45 120 242 147 60 186 26 249 174 95 190 253 159 156 251 151 207 252 75 146 144 171 71 159 221 237 157 79 223 8 4 104 193 87 7 255 216 235 96 184 136 61 254 105 72 235 72 44 160 16 175 206 14 70 235 187 57 9 240 116 239 166 162 39 106 68 140 135 255 242 239 50 94 56 70 104 214 33 85 168 169 235 75 205 224 23 5 247 222 117 187 123 151 73 49 113 159 222 48 30 123 234 25 234 170 70 36 248 215 18 67 77 80 41 104 194 60 11 91 143 243 234 63 250 107 168 10 114 52 18 150 4 205 36 64 113 34 168 27 167 150 196 141 210 70 161 88 166 184 231 117 196 106 11 158 250 12 136 62 14 241 24 22 118 173 76 219 211 237 239 62 249 66 183 1 58 240 79 153 200 74 188 231 53 16 7 164 111 253 14 54 217 4 10 183 174 205 197 235 84 228 250 197 150 164 176 110 61 240 63 195 100 241 62 98 179 129 88 237 198 93 54 14 53 25 131 178 15 126 66 81 84 141 164 134 153 114 207 209 219 41 203 18 85 55 10 13 65 48 183 9 210 136 209 226 189 124 225 187 63 224 155 73 142 55 232 133 92 91 98 189 149 159 240 239 105 130 105 244 132 235 104 157 250 145 207 80 203 28 233 246 191 72 93 197 123 171 137 157 156 212 198 164 129 73 35 207 234 120 129 27 129 185 246 206 244 164 9 135 227 93 223 11 113 142 244 196 239 35 213 38 88 225 23 208 4 203 43 12 205 22 183 185 7 160 155 134 174 86 32 198 35 63 242 25 170 165 251 136 205 58 166 21 170 154 245 171 131 95 150 145 187 239 116 240 83 74 40 217 250 55 48 75 164 228 37 220 119 31 189 141 178 140 168 182 238 157 127 134 88 77 172 183 216 26 222 205 23 191 235 125 16 192 78 213 232 122 94 249 102 25 124 233 125 79 63 76 74 152 108 210 60 246 251 104 152 131 59 191 23 133 35 166 122 202 75 16 173 43 83 189 146 227 5 76 0 3 227 48 150 204 68 142 196 163 175 134 88 146 158 250 188 131 31 242 150 44 149 233 5 77 219 196 235 150 98 103 39 16 148 71 255 202 239 81 47 189 140 208 172 35 109 1 136 121 233 151 1 131 178 224 238 59 111 235 192 183 109 224 251 217 242 223 224 174 59 110 163 44 7 168 90 222 13 152 37 1 53 165 110 178 181 112 47 95 252 174 247 17 2 200 218 4 182 18 210 255 174 173 52 80 166 82 43 68 164 222 160 121 234 243 88 44 9 71 95 141 137 28 246 93 36 28 217 63 72 95 8 4 48 86 176 116 202 16 226 237 223 13 177 32 61 253 135 72 157 193 111 155 53 8 179 171 42 229 139 60 74 216 185 49 4 229 177 191 242 251 212 203 47 35 234 5 162 38 16 35 8 217 162 135 178 44 184 235 232 225 93 192 183 236 254 77 47 126 202 17 197 59 111 63 204 160 140 190 125 196 124 135 143 147 32 81 218 38 163 197 123 249 131 239 122 159 127 213 115 21 58 82 79 88 205 128 47 30 43 104 55 147 134 136 212 155 164 167 255 16 98 65 188 253 187 61 174 97 233 36 198 202 193 32 128 217 138 27 124 129 120 251 171 32 68 210 241 175 32 245 200 247 234 109 239 212 49 67 2 67 170 6 54 71 16 140 199 127 228 115 212 11 247 17 234 11 88 93 99 36 207 211 104 22 251 177 224 206 35 25 124 219 9 124 235 192 239 30 131 7 135 80 238 184 237 48 101 44 178 122 176 188 65 212 144 148 136 245 38 155 115 247 240 133 87 57 9 194 230 24 38 234 1 170 198 221 68 210 20 123 255 77 2 18 145 122 68 58 254 21 8 145 120 251 171 48 2 152 174 98 182 114 99 19 160 5 95 132 120 248 59 64 74 210 201 175 33 205 24 36 228 85 191 139 113 147 12 171 19 140 71 32 198 147 175 127 136 250 208 203 8 105 195 35 124 221 150 76 119 249 202 178 224 232 109 43 152 42 137 212 185 124 51 224 115 49 248 237 253 148 12 83 227 246 35 183 82 150 133 71 94 173 175 14 26 55 12 23 122 36 24 77 220 253 83 113 137 126 209 182 131 86 178 5 164 25 147 78 126 13 164 36 30 254 14 76 228 154 144 32 60 175 224 99 14 254 173 223 230 43 127 245 235 72 51 154 130 143 92 194 102 104 8 245 22 96 60 245 134 47 80 45 191 140 80 95 64 50 248 185 242 18 53 40 7 5 119 28 89 1 148 100 186 59 248 182 51 248 150 45 251 70 93 150 223 126 228 22 6 131 34 135 125 253 125 254 109 179 119 48 127 15 95 120 213 251 125 15 96 61 242 112 243 174 58 189 79 130 17 105 245 235 46 9 110 253 54 39 1 207 47 9 194 243 9 62 64 184 229 126 76 64 79 127 3 105 38 151 7 223 50 248 77 6 255 141 159 103 178 124 31 212 231 49 107 220 149 51 67 77 73 102 20 81 56 122 120 5 69 73 73 123 192 147 197 189 161 123 0 191 181 203 83 242 243 225 149 91 8 133 144 253 7 20 205 46 98 69 212 45 54 231 238 226 161 87 253 38 0 81 71 200 37 59 141 244 73 48 65 79 127 3 11 145 112 203 253 249 58 216 243 70 130 231 129 0 45 248 130 188 228 62 176 6 59 253 141 92 163 183 119 240 13 227 233 55 126 158 122 233 165 196 198 87 126 208 68 192 141 51 204 40 139 200 209 35 135 81 221 14 190 117 224 167 108 208 93 14 124 235 185 128 41 39 158 110 91 185 149 178 40 220 26 48 113 123 35 231 14 202 180 201 104 238 30 62 223 39 1 123 35 1 105 226 215 196 26 191 70 45 9 184 250 36 8 87 29 124 203 224 223 116 23 164 6 91 123 44 255 254 43 1 95 57 254 166 47 80 31 122 57 33 173 99 77 77 216 166 191 99 81 112 219 202 45 14 190 234 52 198 212 46 255 189 128 79 15 252 172 122 58 23 209 60 5 119 228 214 155 41 99 129 153 33 226 49 33 151 4 137 34 141 216 234 147 32 93 1 9 44 249 181 73 141 95 43 223 167 120 213 73 16 174 58 248 2 178 124 20 180 193 46 60 69 103 29 93 170 29 91 7 254 38 0 39 126 244 139 212 75 47 39 52 23 176 38 235 252 14 72 136 69 193 145 91 95 146 163 122 14 190 182 171 62 175 232 61 129 223 251 91 27 4 234 76 197 76 2 85 184 229 37 55 81 20 229 52 141 108 226 56 230 136 225 230 240 30 30 250 206 189 146 160 231 33 96 126 141 180 241 107 230 118 205 85 37 65 184 122 224 179 138 8 178 112 196 193 223 56 126 69 224 75 11 254 95 253 162 91 251 213 20 124 107 215 170 25 131 97 201 225 91 110 246 100 79 54 208 210 84 233 95 22 124 232 131 207 197 224 119 106 33 191 39 23 98 220 114 243 50 69 81 50 149 27 189 136 97 218 100 107 254 30 30 250 115 207 146 4 27 199 157 4 11 71 178 116 184 122 36 8 87 13 252 16 145 133 195 94 63 183 181 74 215 42 99 143 224 139 193 169 55 127 137 250 208 75 61 194 71 207 213 203 224 205 205 13 185 229 230 67 190 218 213 80 107 193 158 90 250 57 32 56 5 126 27 248 125 41 96 89 111 236 6 126 123 95 85 49 224 214 155 151 25 14 7 153 214 66 16 7 48 50 85 7 159 123 54 36 48 252 154 105 66 22 86 32 20 96 92 21 18 236 55 1 242 202 143 200 220 33 175 156 25 159 205 11 255 202 192 95 125 235 151 104 14 189 148 80 231 240 174 78 193 199 140 185 225 144 67 203 75 104 246 215 167 226 120 22 252 29 87 189 209 3 159 221 193 167 7 126 159 60 224 241 5 51 14 45 45 50 55 28 96 217 234 15 2 1 35 80 83 166 17 163 185 103 33 9 36 147 96 124 22 82 229 215 210 27 90 173 194 254 70 12 247 147 0 135 93 231 7 100 176 228 6 223 248 124 47 32 178 7 240 107 7 255 244 131 95 166 57 244 50 100 178 158 247 235 89 182 182 29 164 225 112 192 242 242 98 87 217 211 1 174 123 3 255 162 136 96 103 83 108 3 223 184 72 82 180 223 183 37 129 154 177 180 184 192 220 96 128 181 125 5 112 18 136 53 174 14 134 87 72 2 164 213 6 126 13 83 227 215 180 83 7 28 190 222 8 112 23 216 41 66 132 114 30 179 10 155 108 76 67 185 123 4 31 224 76 7 254 6 166 217 224 235 137 253 225 112 192 161 165 43 7 159 203 130 63 189 79 79 252 179 147 202 232 145 160 253 14 139 139 243 12 135 195 142 60 190 152 19 209 26 162 110 178 53 188 155 135 254 220 123 175 156 4 128 77 54 48 171 160 156 207 185 18 59 229 215 252 250 33 192 180 50 33 213 80 121 184 246 242 224 43 104 221 129 191 246 99 95 161 185 233 229 200 100 3 161 234 192 111 1 24 14 6 44 47 206 163 219 193 79 173 126 215 93 193 183 29 192 103 7 240 119 52 252 152 170 140 25 9 144 31 119 36 88 88 200 53 134 210 85 19 136 64 180 134 66 71 89 18 56 9 138 52 66 172 185 76 98 87 218 34 69 191 166 179 165 224 79 94 79 4 88 2 249 136 239 199 175 122 192 239 5 252 13 48 101 237 193 175 206 172 252 182 223 102 11 216 112 80 178 180 56 151 43 162 183 129 47 109 90 87 46 114 229 46 5 126 95 196 95 18 252 157 36 192 54 82 120 249 64 98 113 126 158 193 160 192 16 84 242 123 36 23 149 168 187 136 159 123 224 189 128 81 232 22 161 221 112 122 41 18 180 68 208 202 123 30 32 31 241 107 126 253 16 96 19 120 75 142 238 188 235 178 125 116 59 240 215 73 55 189 156 51 127 251 60 233 37 247 33 213 58 166 19 132 54 115 167 152 41 131 50 178 184 176 3 248 118 105 240 109 143 224 247 85 199 94 193 159 85 11 109 18 10 18 202 226 220 28 131 34 122 22 179 5 87 12 172 162 208 77 54 231 239 226 179 15 252 6 155 195 187 41 116 147 96 151 35 65 71 132 119 249 53 230 45 249 154 95 119 94 128 1 63 149 191 237 79 93 22 252 67 247 179 254 246 175 16 76 137 19 183 246 187 86 204 230 231 185 178 100 113 126 23 240 237 98 240 217 43 248 60 55 240 251 38 204 204 103 170 103 129 231 231 230 24 12 75 2 66 52 241 190 20 64 208 134 65 26 49 30 222 195 231 30 120 15 27 195 187 92 18 92 154 4 253 107 186 175 149 35 87 51 20 252 174 89 34 120 85 174 88 77 168 55 176 155 238 103 253 237 127 4 9 164 222 204 195 59 44 139 82 255 141 69 81 50 156 27 122 125 197 30 193 159 209 255 76 45 127 221 14 190 61 55 240 103 35 136 189 207 204 250 64 81 230 6 3 98 17 221 30 200 46 112 16 220 59 176 17 2 124 238 129 247 94 138 4 45 240 239 122 33 103 3 157 8 102 239 10 86 83 52 27 92 24 220 193 230 143 255 87 95 233 205 20 124 80 23 112 64 17 35 115 195 210 193 79 59 129 127 113 53 207 110 110 95 178 118 215 207 179 0 191 183 228 246 4 126 251 25 234 133 65 195 225 144 88 206 146 192 13 195 68 52 223 227 255 185 7 222 203 250 44 9 174 58 240 207 31 1 204 19 37 193 170 159 42 210 166 60 117 235 235 63 250 233 87 252 186 215 211 53 91 14 126 223 29 50 35 198 130 225 112 232 137 215 70 219 20 205 158 170 121 172 15 208 94 192 223 22 236 185 8 252 222 255 216 9 252 169 1 217 3 191 23 39 48 51 134 229 128 34 22 46 133 218 246 243 2 98 137 104 19 140 192 239 190 242 63 112 126 254 254 127 81 232 166 68 171 223 37 150 120 62 234 4 195 243 0 60 49 109 49 104 206 17 234 77 190 242 138 159 254 67 11 16 155 241 69 110 144 25 20 33 48 28 148 40 138 53 150 119 233 92 89 53 79 187 170 247 4 254 46 193 158 189 130 191 61 46 176 221 69 108 63 179 28 20 196 34 230 109 104 109 112 212 50 9 70 32 240 201 7 62 240 111 67 181 65 217 156 203 30 66 197 213 38 66 113 85 128 71 17 107 8 90 81 164 45 72 21 31 120 237 9 202 102 157 65 189 54 48 155 184 254 238 131 175 70 136 129 178 24 228 139 116 25 240 237 217 131 127 217 96 207 62 130 223 63 15 98 244 16 178 170 71 123 93 12 16 45 81 90 34 52 231 134 31 252 222 111 80 23 203 188 227 115 119 16 227 128 20 23 72 50 192 164 192 36 176 223 147 74 138 171 14 252 235 78 81 164 117 230 234 85 130 86 96 181 4 211 105 144 7 55 208 98 8 20 69 57 5 127 6 248 217 106 158 189 20 116 72 111 149 183 224 119 239 221 65 247 107 151 139 155 37 69 123 214 156 247 191 28 248 154 189 23 85 69 68 166 231 156 48 42 203 18 82 131 54 58 245 155 128 96 74 208 73 136 150 40 117 204 135 190 231 155 212 113 137 183 63 116 244 98 34 16 246 109 186 217 190 16 64 44 93 4 252 7 51 240 243 213 73 162 86 121 95 190 151 82 117 87 81 65 49 98 140 20 33 238 2 254 222 170 121 212 114 109 80 104 193 17 144 188 235 23 245 45 120 150 155 66 180 96 74 6 87 220 237 76 2 162 134 6 151 72 18 218 186 2 223 150 150 212 197 182 105 234 92 218 237 43 191 133 165 237 3 24 99 244 130 149 206 155 23 98 49 164 182 134 164 41 147 195 188 231 143 41 129 154 144 242 181 212 173 139 137 16 22 72 97 128 237 211 218 221 151 79 137 105 171 7 252 42 69 218 96 174 58 69 208 202 173 218 188 34 91 235 39 68 223 73 99 2 5 129 24 130 235 252 126 194 230 10 170 121 148 136 21 3 52 12 252 126 238 250 237 27 136 242 244 14 205 42 69 119 177 250 243 89 47 41 246 61 162 39 205 152 144 38 152 8 162 218 73 15 9 222 22 158 105 148 57 103 193 165 11 6 181 220 47 134 37 210 228 254 70 166 72 234 183 150 53 2 13 70 34 154 103 21 63 252 154 135 169 227 50 111 251 236 109 29 17 174 27 2 20 213 57 62 248 151 50 240 245 73 130 77 129 71 108 86 107 73 123 97 132 24 5 65 242 222 188 89 159 125 175 213 60 106 2 177 160 60 251 199 28 254 226 63 64 227 92 6 210 218 65 77 180 8 217 84 200 119 169 87 81 223 184 51 93 159 125 163 84 122 42 87 16 148 168 19 190 249 29 255 156 141 133 151 121 147 8 17 66 174 27 148 94 2 135 60 35 64 250 4 64 186 254 212 98 70 81 4 196 32 89 96 52 153 228 183 73 207 181 48 130 213 8 83 233 234 68 88 226 109 191 119 251 245 67 128 223 250 254 135 153 175 50 240 186 109 197 95 20 208 116 127 56 68 161 208 72 149 154 105 142 190 117 219 174 164 154 71 240 129 78 205 136 225 169 175 99 183 189 2 41 150 114 91 248 252 57 177 93 146 210 61 55 245 221 232 61 199 182 191 183 160 230 82 112 49 226 218 163 140 54 207 179 17 19 3 51 2 74 18 153 238 251 200 32 134 144 87 119 86 5 98 51 42 191 51 56 138 50 122 203 153 220 92 186 223 96 122 74 5 3 26 162 38 34 53 165 142 248 232 95 252 38 127 245 122 33 192 176 57 135 116 134 157 93 54 162 29 37 16 69 104 114 73 183 244 10 47 175 184 154 167 93 169 33 98 64 241 253 63 5 71 254 60 212 19 176 202 245 117 170 167 195 34 44 55 132 182 182 25 116 157 239 167 238 190 181 221 194 181 193 218 22 177 154 16 81 236 115 255 140 16 7 148 161 200 118 77 34 6 241 25 65 185 152 163 189 2 177 15 126 148 139 236 119 51 40 67 32 18 8 34 94 225 124 201 98 17 35 106 133 209 96 58 190 126 36 64 32 205 136 202 75 51 96 202 114 211 62 192 207 178 154 39 103 219 180 173 4 158 108 32 231 159 68 207 252 105 38 138 230 182 239 100 160 117 58 16 162 59 167 220 39 192 122 175 213 233 145 7 76 153 196 252 19 2 18 133 66 133 32 209 247 33 118 161 94 233 70 196 116 171 89 166 43 57 72 152 33 128 196 64 17 220 83 144 16 246 228 228 201 172 44 185 206 226 0 123 245 26 53 239 222 237 140 179 103 89 205 35 244 149 56 164 49 90 95 192 54 78 244 100 168 246 124 255 150 20 109 23 241 150 69 189 231 59 50 180 207 229 203 158 21 120 136 66 12 145 64 32 136 171 52 177 108 4 230 77 173 70 27 245 115 208 251 182 128 204 72 128 232 30 76 251 255 246 236 222 189 192 9 64 182 204 85 114 151 47 158 109 53 143 228 180 177 23 160 88 83 65 93 117 19 66 58 191 190 5 85 251 247 1 73 179 224 107 155 186 77 189 215 182 58 59 187 118 121 181 78 9 144 119 35 103 208 119 146 2 178 93 246 135 128 229 201 33 98 198 181 154 86 124 77 231 5 152 224 205 29 165 5 81 174 188 154 167 93 105 237 202 201 205 157 53 85 249 41 153 5 24 107 171 55 46 190 223 74 4 181 153 231 90 114 41 66 204 160 198 108 200 134 252 88 182 129 62 179 226 205 176 108 15 132 222 243 38 129 88 132 253 106 249 247 2 34 64 94 253 222 61 67 92 7 63 203 106 158 16 66 55 2 82 4 68 107 52 77 16 173 102 205 109 219 1 104 219 118 159 169 247 209 127 220 157 115 183 154 16 34 161 149 0 173 87 211 3 221 204 243 190 97 187 20 144 237 70 160 71 64 131 204 214 24 28 8 9 208 89 245 154 114 182 248 202 170 121 90 43 59 25 156 189 176 142 173 174 113 44 76 37 0 169 242 245 38 59 0 173 237 224 40 39 222 140 116 216 233 220 54 16 76 61 162 69 33 88 104 195 78 51 110 156 155 1 210 73 32 19 232 155 119 173 119 168 106 132 88 116 155 77 14 150 10 144 217 8 219 94 171 121 64 188 102 192 148 179 23 54 88 91 223 162 137 243 220 212 150 211 107 157 59 123 183 4 96 6 252 206 161 212 237 96 95 134 4 50 205 17 184 229 30 8 218 19 249 157 238 239 7 129 252 75 181 67 202 232 158 107 137 100 62 63 208 166 118 189 28 24 2 108 243 235 189 165 203 206 213 60 254 119 191 138 34 112 97 125 139 83 107 231 178 15 26 221 202 206 23 223 154 9 20 147 105 79 127 153 122 0 151 93 229 187 146 161 189 105 118 6 90 191 93 8 97 59 240 83 41 64 86 15 51 227 227 178 191 223 170 128 34 171 176 107 164 1 174 241 208 168 54 152 39 178 171 219 167 121 183 13 226 225 210 147 103 206 81 55 77 6 221 47 168 72 223 227 171 177 52 118 73 208 109 176 216 227 42 239 3 110 189 251 173 31 63 62 239 107 184 245 2 44 16 66 6 185 221 26 38 83 137 192 174 54 64 187 209 197 35 134 173 187 120 240 8 64 47 230 159 35 104 253 106 30 55 242 60 210 119 250 220 57 214 206 111 18 131 228 8 155 108 51 170 250 94 192 196 163 122 237 11 246 44 234 103 163 110 216 8 170 77 180 58 143 212 27 136 38 183 220 37 228 56 128 75 129 78 239 207 216 1 83 91 128 28 35 104 255 69 59 54 182 51 2 181 23 39 150 131 66 128 126 221 191 200 140 238 151 156 149 11 81 24 141 107 142 159 62 67 74 137 24 195 108 132 109 39 187 162 169 32 228 57 65 218 147 0 59 2 174 179 192 7 252 125 147 53 180 94 3 109 92 196 7 124 194 88 2 70 25 220 40 136 230 56 64 216 1 120 203 234 32 244 136 208 158 123 42 32 20 1 75 122 0 85 64 78 157 110 247 247 219 160 72 12 194 233 115 23 56 125 238 2 49 76 69 229 101 23 136 102 47 160 169 61 114 167 187 235 255 214 172 12 193 32 109 194 100 13 234 11 16 130 167 172 139 252 63 219 66 156 42 129 121 220 63 228 180 182 107 167 208 217 1 45 240 161 144 78 53 76 85 128 204 104 63 49 35 74 64 67 223 47 146 131 163 2 116 38 185 211 90 203 222 14 238 209 103 78 80 213 13 49 132 78 188 94 214 171 144 172 2 66 153 227 254 178 179 127 111 83 49 31 108 11 198 103 33 109 65 12 48 40 186 110 117 51 198 69 176 110 246 164 219 0 238 6 206 198 1 166 192 135 220 111 88 194 212 13 20 153 26 62 34 1 85 37 248 94 191 3 232 6 102 137 171 230 1 161 144 59 165 76 170 154 199 79 156 4 118 211 245 151 78 145 208 84 24 227 92 109 76 79 5 232 182 234 227 49 84 103 129 177 75 163 97 145 59 144 183 134 156 77 247 55 182 251 243 154 108 188 137 184 58 74 249 123 103 99 46 92 164 10 114 75 185 54 83 184 77 10 120 90 60 32 196 3 234 5 100 108 98 182 164 207 173 111 114 234 236 57 64 46 26 190 188 183 216 130 228 230 83 146 135 63 51 227 191 251 66 75 80 173 129 109 34 5 16 35 82 228 214 243 33 175 116 201 143 187 13 174 56 57 82 202 249 154 188 202 131 27 129 100 195 180 3 61 244 227 2 83 224 183 219 47 109 36 211 244 0 74 128 144 115 1 65 12 33 112 126 99 147 19 167 207 206 92 200 103 21 93 210 202 219 183 167 198 129 236 108 128 76 142 230 12 20 130 20 193 129 143 217 66 143 6 193 114 75 250 110 116 200 180 115 75 52 172 202 133 33 49 131 111 110 4 182 113 136 54 252 27 250 100 216 41 61 156 239 107 78 6 117 5 43 7 43 18 24 136 110 34 113 110 95 192 207 113 248 122 146 135 50 213 57 130 151 163 129 227 117 96 11 202 224 67 38 10 115 34 228 225 19 146 9 224 36 232 73 130 158 4 144 232 214 122 200 58 190 149 0 14 184 117 192 119 231 30 1 90 243 102 234 13 128 132 72 33 66 10 114 240 178 129 174 243 3 231 54 54 57 121 122 205 117 234 115 1 191 147 0 147 28 234 109 114 210 41 161 147 117 130 52 14 126 145 91 18 23 226 160 183 224 231 201 35 222 227 37 75 130 86 247 3 20 154 87 106 230 133 8 81 28 120 17 79 16 181 224 207 74 1 46 82 5 125 41 24 66 232 213 43 28 16 2 180 236 223 28 143 121 102 245 12 101 81 236 15 248 34 217 253 203 241 127 85 172 218 114 196 10 65 10 203 224 51 5 189 208 12 126 171 14 52 175 126 157 26 131 1 31 59 95 104 246 2 162 27 124 185 104 212 13 192 89 224 167 33 226 217 99 70 5 152 231 2 204 226 65 179 1 4 53 101 107 52 233 197 241 101 95 62 215 180 242 61 249 73 125 230 175 64 40 178 200 143 210 3 187 7 126 52 136 58 5 63 180 185 135 188 220 67 204 99 107 220 173 20 49 130 68 55 254 250 201 160 109 224 239 100 11 244 165 64 0 143 57 116 19 74 14 4 1 36 39 116 54 188 178 70 246 57 244 145 42 191 178 169 206 221 217 51 240 221 128 41 102 197 126 11 254 118 35 48 68 143 39 72 1 177 240 207 44 107 140 241 12 160 45 208 125 240 227 54 91 96 38 66 184 141 232 2 254 253 14 154 13 80 196 136 236 247 15 247 124 176 171 129 182 82 168 5 62 230 37 55 163 243 251 224 43 18 53 15 19 158 131 56 128 48 244 30 125 33 66 17 161 216 242 221 59 226 163 229 66 79 199 135 93 192 15 57 144 21 118 80 3 211 175 29 14 150 13 0 16 98 36 122 239 187 125 8 128 246 222 173 74 23 187 21 188 45 135 176 109 117 103 131 175 155 68 150 193 151 0 197 60 196 121 40 134 46 1 66 233 18 160 136 126 181 204 122 41 223 217 36 80 232 169 130 221 108 129 235 237 118 13 8 144 251 251 134 224 97 210 171 234 105 90 111 212 28 57 216 211 146 64 178 206 215 252 156 56 248 197 2 20 115 83 41 16 51 1 202 8 131 212 6 241 187 232 94 59 158 38 236 144 13 236 219 2 215 235 237 154 73 128 24 99 174 145 191 74 20 232 173 254 25 151 174 239 231 247 143 152 65 47 230 50 17 230 92 10 196 210 143 65 1 101 197 180 6 117 231 52 112 27 18 14 114 253 131 127 13 9 96 158 215 143 50 13 209 202 85 32 64 239 232 220 185 86 29 136 187 122 34 100 131 111 0 113 152 197 255 60 148 195 76 130 129 31 131 1 12 38 121 187 99 158 29 212 139 3 108 183 242 187 61 2 215 249 173 184 54 240 79 3 39 87 77 0 200 46 36 144 105 172 223 73 167 192 48 139 251 124 20 165 131 95 206 193 96 222 9 48 28 192 96 179 43 47 243 148 176 77 1 159 9 251 62 123 157 255 124 39 132 139 107 36 0 40 138 64 200 251 249 174 202 207 14 54 219 175 82 166 177 162 78 29 72 150 231 49 102 107 191 240 251 113 224 226 127 48 159 73 48 7 101 233 207 117 236 234 73 128 94 112 167 221 25 116 253 175 253 105 52 242 154 48 32 196 34 235 71 187 122 98 166 77 230 244 29 133 109 19 233 220 122 203 174 94 71 130 124 20 3 87 5 33 230 16 241 84 188 76 117 123 14 234 244 246 245 181 30 192 11 225 118 205 34 129 0 101 17 175 158 192 147 237 182 64 207 224 43 122 231 152 35 124 49 184 171 87 22 126 12 74 215 251 195 97 142 39 4 136 1 9 190 53 204 186 93 189 80 198 208 185 126 177 8 200 11 102 253 95 27 2 132 182 40 114 80 14 114 37 173 92 21 9 224 99 221 219 238 16 121 20 109 10 72 3 22 5 169 240 178 175 104 48 73 80 78 178 187 103 80 36 24 52 48 216 242 178 176 24 224 204 57 164 128 173 106 66 218 216 162 180 17 65 172 75 100 133 16 114 249 90 204 195 35 46 255 187 150 22 231 179 87 228 149 5 55 60 1 68 100 33 134 200 127 252 189 47 184 65 30 195 85 89 47 214 8 52 160 22 179 150 9 221 6 12 122 189 32 252 108 96 27 192 250 197 91 199 167 181 235 132 144 40 7 145 199 158 58 206 218 218 55 137 205 86 110 222 220 47 54 178 43 174 238 9 65 60 50 42 50 39 7 128 0 191 21 2 42 33 110 229 146 77 219 119 125 217 235 178 50 187 16 237 98 59 225 34 191 49 108 219 165 49 189 47 214 32 201 247 5 22 177 32 82 100 151 240 185 71 44 68 100 89 68 30 61 8 42 224 179 34 242 217 29 130 184 87 207 14 184 210 23 203 46 207 103 53 50 83 236 193 254 24 178 215 202 104 188 22 4 56 106 102 247 25 212 109 205 238 85 251 241 118 37 127 159 109 87 187 235 243 93 115 170 182 151 209 190 108 236 12 192 80 68 190 4 76 110 104 2 152 217 203 84 237 135 147 234 68 192 66 12 221 30 251 171 1 188 205 116 123 190 148 13 208 219 44 178 139 13 96 33 97 154 80 85 154 212 96 77 115 41 27 192 246 42 135 66 144 80 196 56 31 66 248 134 136 156 186 209 9 80 37 77 155 111 120 237 247 141 71 163 137 254 222 31 126 21 41 226 165 174 82 0 244 50 127 187 232 53 82 24 148 16 162 230 242 47 13 82 168 82 244 11 65 146 55 39 142 11 74 185 4 229 130 31 131 156 15 24 44 194 96 24 16 81 137 33 176 122 74 155 143 124 130 99 119 29 229 238 195 247 95 206 11 16 144 203 202 161 165 197 121 1 194 39 62 243 144 149 34 205 158 54 191 188 192 85 128 170 90 13 212 85 93 169 154 17 175 168 55 206 222 85 186 136 33 133 64 97 72 217 30 10 3 175 254 145 50 65 84 40 197 183 126 13 134 48 156 135 225 34 12 151 96 110 25 134 11 93 28 192 180 194 26 88 24 12 177 165 5 74 149 253 136 3 8 16 82 210 170 40 102 186 29 221 184 4 240 13 120 52 117 147 244 226 206 121 236 246 120 183 139 103 59 190 62 135 233 187 90 171 108 192 161 2 141 120 137 87 147 47 119 176 92 66 150 32 52 126 72 13 161 242 26 50 79 7 11 73 189 218 204 91 144 74 74 234 253 37 76 165 40 10 203 182 129 20 69 180 32 114 37 191 35 2 53 215 32 130 124 141 8 32 141 166 166 81 85 189 170 145 192 220 118 70 118 210 251 249 174 168 77 251 4 106 219 59 48 31 77 53 29 114 173 97 170 100 44 183 165 155 126 138 55 133 142 113 218 40 250 202 194 193 222 9 242 26 212 5 93 27 2 8 169 105 180 86 77 200 206 118 82 171 215 109 135 85 222 254 109 183 247 248 89 243 232 182 174 23 13 138 121 2 79 90 137 96 185 132 44 245 193 79 144 42 163 41 152 105 104 200 0 154 137 127 182 229 173 157 185 89 116 155 113 152 246 53 16 204 101 77 216 193 52 149 93 190 251 53 9 203 95 19 2 8 212 170 73 205 76 47 33 0 244 210 82 228 146 207 235 20 232 233 97 38 42 45 240 106 109 89 174 75 223 84 65 200 71 19 65 114 39 78 211 220 65 180 157 135 232 109 66 204 20 197 251 4 207 118 56 159 25 65 175 123 148 2 1 223 124 110 7 196 6 144 38 169 53 41 101 39 90 174 92 184 95 70 183 246 116 127 7 126 22 247 78 65 11 130 88 192 44 33 154 231 29 166 137 103 254 132 169 254 232 218 201 78 160 218 204 105 5 255 247 157 4 152 118 56 243 157 136 121 152 181 5 68 68 46 245 93 219 231 51 11 15 138 10 128 58 165 84 171 183 11 189 122 65 160 228 230 149 169 228 160 77 78 8 169 33 173 65 216 122 107 105 226 91 134 218 86 174 102 110 23 180 53 129 22 189 249 148 176 75 39 211 60 123 64 179 38 10 45 217 116 47 101 97 225 0 217 0 162 34 164 164 154 204 141 232 75 233 123 118 181 242 119 246 0 102 94 99 234 163 58 68 77 81 2 138 153 138 136 138 161 138 169 136 72 80 19 13 34 10 245 104 26 201 201 243 13 73 37 196 66 208 8 213 86 55 105 162 237 78 234 141 69 77 212 196 100 155 42 200 92 16 84 77 252 102 187 252 14 205 18 224 64 216 0 6 52 154 82 147 44 89 174 158 209 231 254 145 93 88 173 215 22 94 58 41 128 138 154 250 142 47 151 2 17 73 154 155 76 121 151 30 137 10 109 134 207 170 233 190 128 20 65 163 255 45 183 132 221 121 118 65 110 111 147 61 4 215 255 161 183 135 224 226 50 177 252 184 179 1 14 138 10 168 154 148 26 75 109 231 134 153 136 30 59 88 250 218 19 149 59 61 158 138 109 9 74 44 3 77 173 152 5 212 212 146 247 252 151 64 32 73 215 89 204 68 84 82 8 230 230 156 26 4 87 21 99 69 107 55 8 165 8 196 66 73 4 154 26 36 168 230 153 133 106 150 251 61 90 232 250 12 163 62 1 69 85 131 159 17 145 96 30 152 82 17 153 249 173 69 140 190 149 205 119 153 29 4 2 152 154 145 14 45 47 53 231 55 182 186 110 112 114 177 117 175 123 176 254 47 126 77 28 128 20 74 12 208 140 213 146 116 123 1 44 137 34 134 36 111 219 146 183 109 171 219 242 138 152 180 3 70 221 48 36 129 152 250 206 32 85 106 245 153 34 83 49 175 254 6 255 30 18 218 190 191 74 232 87 8 139 232 116 245 91 235 25 120 231 130 8 150 44 28 36 21 160 96 77 144 208 44 204 15 205 7 69 5 246 39 43 104 72 24 32 161 4 105 32 70 172 218 66 155 92 250 231 29 156 204 68 188 73 184 43 232 92 62 24 188 74 168 107 91 215 219 29 140 183 135 33 89 238 5 44 168 37 130 26 73 166 115 14 218 134 15 218 201 52 189 236 238 224 50 6 212 44 72 215 72 238 0 16 192 32 153 166 180 56 55 167 119 28 190 85 78 158 94 51 137 185 143 246 222 72 96 23 7 133 114 70 175 40 189 198 191 86 8 193 100 238 16 54 89 135 166 17 235 42 118 125 38 152 71 3 66 16 31 43 99 98 201 187 122 7 19 9 162 8 193 196 92 59 23 226 85 70 82 99 150 80 53 179 60 155 80 85 179 227 216 54 130 104 117 127 110 7 235 18 32 48 75 114 15 68 170 153 105 146 158 33 124 48 220 64 53 106 83 229 230 165 69 68 68 79 156 62 27 186 17 43 83 17 185 91 38 112 151 44 160 65 24 42 113 144 199 194 120 43 207 176 112 11 140 215 141 102 43 152 4 197 8 157 51 216 139 14 90 136 230 59 135 68 204 59 132 232 180 217 164 40 46 170 213 132 96 102 150 76 137 6 22 196 84 19 33 196 160 89 12 152 106 7 188 249 0 9 205 29 66 52 27 190 193 7 162 107 72 102 130 28 164 80 48 52 152 166 148 237 104 39 1 122 124 245 44 59 144 224 146 17 191 237 70 160 148 67 36 206 229 137 94 221 96 63 152 187 25 210 188 210 156 193 114 247 7 193 176 232 209 65 31 240 228 123 9 29 124 153 237 17 100 134 165 160 34 160 102 170 166 136 230 29 70 154 69 58 170 49 127 239 118 140 76 167 255 253 201 105 150 74 68 85 149 166 52 53 109 101 211 129 73 6 81 43 62 195 209 61 100 211 155 150 22 131 25 156 58 123 78 45 91 215 173 216 220 33 222 191 75 222 192 132 48 80 226 32 120 240 6 245 150 254 185 68 35 20 66 57 7 213 26 86 111 118 81 65 10 159 61 35 1 44 72 187 115 72 68 204 215 38 184 143 151 242 56 152 148 191 184 41 98 168 138 134 34 132 118 4 157 25 138 136 72 16 177 109 93 194 102 98 1 102 38 170 106 150 52 236 165 118 224 70 34 64 234 98 223 2 234 121 117 189 121 105 145 249 193 128 199 79 156 212 28 170 215 29 250 4 238 238 29 152 181 251 251 148 176 209 37 234 102 251 4 6 152 59 2 54 198 170 179 136 142 177 36 72 33 88 164 181 22 125 66 104 127 93 38 131 58 230 72 96 107 244 185 4 16 117 159 33 132 188 45 44 215 13 218 101 250 4 182 134 163 217 76 106 241 64 4 130 106 242 176 150 32 34 121 102 152 162 132 193 160 228 229 119 221 201 227 39 78 106 85 55 33 72 80 183 171 228 82 132 202 157 150 8 20 3 164 156 243 0 142 92 212 41 180 117 57 20 89 10 204 47 130 109 65 117 22 155 228 78 161 17 149 72 176 105 167 80 155 166 107 178 35 103 166 41 105 16 119 3 221 230 243 200 162 183 143 205 93 196 204 76 37 72 48 209 182 83 168 182 131 135 114 167 80 213 164 65 53 61 223 133 64 215 133 4 208 208 150 132 183 205 162 61 94 7 192 125 119 220 206 233 115 23 52 247 10 110 67 107 187 93 37 237 82 190 113 232 219 188 165 240 213 220 155 21 32 126 206 243 229 188 61 163 202 33 194 194 178 247 10 174 215 160 186 128 133 160 109 199 208 105 175 96 223 103 208 73 0 117 59 0 76 165 179 91 12 107 242 234 143 185 141 188 186 13 160 185 165 108 231 255 103 137 164 154 84 213 228 160 73 128 132 90 99 237 96 87 153 102 96 12 65 204 36 169 113 235 205 203 182 48 55 199 241 211 103 36 165 100 226 91 138 118 178 13 166 23 46 12 133 56 103 20 165 79 139 8 109 254 62 175 254 233 25 49 245 204 189 1 225 144 48 127 200 152 171 133 201 154 105 189 38 104 99 33 247 250 5 32 225 242 202 212 84 12 105 76 68 60 4 168 30 235 71 196 171 1 172 201 143 131 168 247 143 16 219 214 45 92 124 88 166 230 145 49 237 110 213 131 226 5 4 73 157 113 100 102 38 211 225 170 150 237 47 77 198 220 176 224 216 29 183 115 250 252 116 94 0 59 219 6 14 100 187 161 83 202 118 206 159 246 212 128 102 91 64 119 159 23 16 97 120 148 48 119 59 232 8 170 77 209 234 188 181 243 2 218 25 7 150 204 103 161 183 29 229 196 118 152 21 144 179 142 134 238 54 47 64 27 197 212 218 94 146 7 136 0 29 136 210 211 213 116 91 175 115 255 112 31 172 36 198 225 155 111 102 105 126 126 102 98 136 187 231 219 132 64 28 230 163 228 57 79 12 145 69 24 46 18 230 142 248 115 227 243 200 214 151 72 166 62 250 61 101 215 17 239 25 24 114 173 192 236 196 144 44 250 117 186 83 57 169 117 154 41 169 210 86 22 94 139 93 165 215 78 5 120 105 216 84 240 247 167 123 180 149 88 109 176 214 12 65 153 27 12 57 118 199 109 221 204 32 55 234 109 182 3 124 40 221 6 8 78 128 253 156 25 36 243 55 77 37 128 106 151 245 11 121 247 113 202 68 144 94 8 185 239 1 180 209 194 176 205 11 240 207 145 200 1 115 3 181 63 113 235 34 18 48 29 193 234 1 252 86 154 11 75 75 243 44 45 14 89 187 176 201 218 250 22 154 115 243 102 228 190 62 57 141 155 135 76 237 56 53 204 158 229 212 48 3 181 60 244 58 79 31 179 174 75 152 19 193 242 236 3 193 219 201 137 217 204 212 48 237 17 191 81 111 106 121 144 84 128 87 192 250 200 207 233 116 207 124 65 166 150 190 209 57 210 180 37 88 89 46 120 238 141 91 14 45 115 211 242 33 206 108 37 108 189 205 6 151 88 153 59 124 237 48 55 80 218 185 129 193 4 146 237 97 110 96 175 180 56 255 128 164 52 170 136 147 64 60 164 211 69 254 114 215 16 63 251 112 76 8 218 27 6 223 155 27 168 218 141 204 51 57 64 4 208 118 90 158 132 152 183 87 73 59 21 50 56 238 121 106 179 73 232 145 64 124 196 144 95 196 164 138 132 40 183 28 90 166 172 95 226 211 200 227 80 137 115 129 56 232 25 21 166 152 134 108 252 5 66 43 17 10 196 60 28 209 55 20 109 219 227 92 31 232 89 227 92 243 97 201 130 230 153 39 210 138 245 118 248 85 158 20 18 196 101 91 118 3 103 66 25 62 177 214 76 83 67 143 94 7 36 20 108 36 31 20 144 87 164 196 172 21 60 164 130 153 90 155 61 243 217 238 189 72 105 190 192 57 162 170 211 193 203 158 149 13 37 18 135 73 195 160 63 59 88 60 82 147 103 200 59 25 172 183 23 48 147 205 171 70 197 235 189 90 174 90 158 29 172 173 19 167 154 68 85 83 38 64 27 245 19 17 47 11 107 141 190 156 248 183 29 102 7 75 43 240 146 106 206 26 31 156 80 112 91 5 100 98 62 133 147 100 83 113 61 181 12 83 171 24 165 45 239 218 70 2 196 186 2 141 233 60 89 111 239 22 226 112 234 37 204 140 140 55 64 211 197 158 129 238 188 73 20 205 36 149 174 200 195 253 119 243 26 34 177 206 5 180 182 123 88 171 10 218 129 152 158 247 117 251 161 203 90 250 244 240 212 116 169 10 61 120 54 64 144 16 26 81 139 185 46 35 71 129 166 110 128 89 75 2 48 145 41 9 172 45 206 51 33 136 4 109 91 206 73 49 20 43 218 94 191 32 38 214 223 233 107 102 161 147 6 166 50 107 16 106 94 151 89 93 88 91 67 158 137 153 251 26 250 142 134 132 170 6 203 165 165 226 9 32 16 179 36 253 154 64 130 136 248 0 59 151 2 38 102 144 82 0 52 169 138 154 93 179 150 82 255 255 0 158 187 224 145 21 108 237 17 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!CSSDockFileLibrary methodsFor: 'components'!iepngfixHtc	^ '<public:component><public:attach event="onpropertychange" onevent="doFix()" /><script type="text/javascript">// IE5.5+ PNG Alpha Fix v1.0RC4// (c) 2004-2005 Angus Turnbull http://www.twinhelix.com// This is licensed under the CC-GNU LGPL, version 2.1 or later.// For details, see: http://creativecommons.org/licenses/LGPL/2.1/// This must be a path to a blank image. That''s all the configuration you need.if (typeof blankImg == ''undefined'') var blankImg = ''images/blank.gif'';var f = ''DXImageTransform.Microsoft.AlphaImageLoader'';function filt(s, m){ if (filters[f]) {  filters[f].enabled = s ? true : false;  if (s) with (filters[f]) { src = s; sizingMethod = m } } else if (s) style.filter = ''progid:''+f+''(src="''+s+''",sizingMethod="''+m+''")'';}function doFix(){ // Assume IE7 is OK. if (!!/MSIE (5\.5|6\.)/.test(navigator.userAgent) ||  (event && !!/(background|src)/.test(event.propertyName))) return; var bgImg = currentStyle.backgroundImage || style.backgroundImage; if (tagName == ''IMG'') {  if ((/\.png$/i).test(src))  {   if (currentStyle.width == ''auto'' && currentStyle.height == ''auto'')    style.width = offsetWidth + ''px'';   filt(src, ''scale'');   src = blankImg;  }  else if (src.indexOf(blankImg) < 0) filt(); } else if (bgImg && bgImg !!= ''none'') {  if (bgImg.match(/^url[("'']+(.*\.png)[)"'']+$/i))  {   var s = RegExp.$1;   if (currentStyle.width == ''auto'' && currentStyle.height == ''auto'')    style.width = offsetWidth + ''px'';   style.backgroundImage = ''none'';   filt(s, ''crop'');   // IE link fix.   for (var n = 0; n < childNodes.length; n++)    if (childNodes[n].style) childNodes[n].style.position = ''relative'';  }  else filt(); }}doFix();</script></public:component>'! !!CSSDockFileLibrary methodsFor: 'scripts'!interfaceJs	^ '/* * Interface elements for jQuery - http://interface.eyecon.ro * * Copyright (c) 2006 Stefan Petre * Dual licensed under the MIT (MIT-LICENSE.txt)  * and GPL (GPL-LICENSE.txt) licenses. */ eval(function(p,a,c,k,e,d){e=function(c){return(c<a?'''':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!!''''.replace(/^/,String)){while(c--){d[e(c)]=k[c]||e(c)}k=[function(e){return d[e]}];e=function(){return''\\w+''};c=1};while(c--){if(k[c]){p=p.replace(new RegExp(''\\b''+e(c)+''\\b'',''g''),k[c])}}return p}(''6.15={3o:d(e){7 x=0;7 y=0;7 1Q=1A;7 A=e.L;8(6(e).H(\''Q\'')==\''U\''){1E=A.1a;2y=A.O;A.1a=\''1F\'';A.Q=\''1Y\'';A.O=\''2e\'';1Q=26}7 4=e;2P(4){x+=4.3B+(4.1I&&!!6.3p.41?F(4.1I.2X)||0:0);y+=4.3x+(4.1I&&!!6.3p.41?F(4.1I.2Z)||0:0);4=4.4e}4=e;2P(4&&4.4a&&4.4a.39()!!=\''V\''){x-=4.1D||0;y-=4.1s||0;4=4.2x}8(1Q){A.Q=\''U\'';A.O=2y;A.1a=1E}q{x:x,y:y}},4E:d(4){7 x=0,y=0;2P(4){x+=4.3B||0;y+=4.3x||0;4=4.4e}q{x:x,y:y}},35:d(e){7 w=6.H(e,\''1T\'');7 h=6.H(e,\''36\'');7 1e=0;7 1o=0;7 A=e.L;8(6(e).H(\''Q\'')!!=\''U\''){1e=e.1z;1o=e.2s}u{1E=A.1a;2y=A.O;A.1a=\''1F\'';A.Q=\''1Y\'';A.O=\''2e\'';1e=e.1z;1o=e.2s;A.Q=\''U\'';A.O=2y;A.1a=1E}q{w:w,h:h,1e:1e,1o:1o}},4P:d(4){q{1e:4.1z||0,1o:4.2s||0}},58:d(e){7 h,w,22;8(e){w=e.2a;h=e.29}u{22=D.Y;w=2z.3c||2N.3c||(22&&22.2a)||D.V.2a;h=2z.31||2N.31||(22&&22.29)||D.V.29}q{w:w,h:h}},3P:d(e){7 t,l,w,h,1J,1R;8(e&&e.2E.39()!!=\''V\''){t=e.1s;l=e.1D;w=e.3j;h=e.3e;1J=0;1R=0}u{8(D.Y&&D.Y.1s){t=D.Y.1s;l=D.Y.1D;w=D.Y.3j;h=D.Y.3e}u 8(D.V){t=D.V.1s;l=D.V.1D;w=D.V.3j;h=D.V.3e}1J=2N.3c||D.Y.2a||D.V.2a||0;1R=2N.31||D.Y.29||D.V.29||0}q{t:t,l:l,w:w,h:h,1J:1J,1R:1R}},3L:d(e,1U){7 4=6(e);7 t=4.H(\''2j\'')||\''\'';7 r=4.H(\''2k\'')||\''\'';7 b=4.H(\''2n\'')||\''\'';7 l=4.H(\''2l\'')||\''\'';8(1U)q{t:F(t)||0,r:F(r)||0,b:F(b)||0,l:F(l)};u q{t:t,r:r,b:b,l:l}},56:d(e,1U){7 4=6(e);7 t=4.H(\''3w\'')||\''\'';7 r=4.H(\''3u\'')||\''\'';7 b=4.H(\''3s\'')||\''\'';7 l=4.H(\''3t\'')||\''\'';8(1U)q{t:F(t)||0,r:F(r)||0,b:F(b)||0,l:F(l)};u q{t:t,r:r,b:b,l:l}},4Z:d(e,1U){7 4=6(e);7 t=4.H(\''2Z\'')||\''\'';7 r=4.H(\''3G\'')||\''\'';7 b=4.H(\''3y\'')||\''\'';7 l=4.H(\''2X\'')||\''\'';8(1U)q{t:F(t)||0,r:F(r)||0,b:F(b)||0,l:F(l)||0};u q{t:t,r:r,b:b,l:l}},3T:d(2i){7 x=2i.53||(2i.52+(D.Y.1D||D.V.1D))||0;7 y=2i.51||(2i.54+(D.Y.1s||D.V.1s))||0;q{x:x,y:y}},3h:d(12,3g){3g(12);12=12.3F;2P(12){6.15.3h(12,3g);12=12.5a}},59:d(12){6.15.3h(12,d(4){S(7 1j 1q 4){8(2R 4[1j]===\''d\''){4[1j]=20}}})},57:d(4,27){7 1b=$.15.3P();7 3l=$.15.35(4);8(!!27||27==\''4Y\'')$(4).H({X:1b.t+((1i.3S(1b.h,1b.1R)-1b.t-3l.1o)/2)+\''K\''});8(!!27||27==\''4Q\'')$(4).H({N:1b.l+((1i.3S(1b.w,1b.1J)-1b.l-3l.1e)/2)+\''K\''})},4O:d(4,3U){7 3V=$(\''3q[@2u*="2w"]\'',4||D),2w;3V.1V(d(){2w=k.2u;k.2u=3U;k.L.4M="4N:4R.4S.4W(2u=\''"+2w+"\'')"})}};[].4i||(4V.4U.4i=d(v,n){n=(n==20)?0:n;7 m=k.1m;S(7 i=n;i<m;i++)8(k[i]==v)q i;q-1});6.3A=d(e){8(/^4T$|^4L$|^5b$|^5c$|^5t$|^5s$|^5r$|^5q$|^5u$|^V$|^5v$|^5z$|^5y$|^5x$|^5w$|^5p$|^5o$/i.2q(e.2E))q 1A;u q 26};6.E.5h=d(e,1p){7 c=e.3F;7 1d=c.L;1d.O=1p.O;1d.2j=1p.18.t;1d.2l=1p.18.l;1d.2n=1p.18.b;1d.2k=1p.18.r;1d.X=1p.X+\''K\'';1d.N=1p.N+\''K\'';e.2x.4f(c,e);e.2x.5g(e)};6.E.5f=d(e){8(!!6.3A(e))q 1A;7 t=6(e);7 A=e.L;7 1Q=1A;7 J={};J.O=t.H(\''O\'');8(t.H(\''Q\'')==\''U\''){1E=t.H(\''1a\'');A.1a=\''1F\'';A.Q=\''\'';1Q=26}J.32=6.15.35(e);J.18=6.15.3L(e);7 2Y=e.1I?e.1I.4g:t.H(\''5d\'');J.X=F(t.H(\''X\''))||0;J.N=F(t.H(\''N\''))||0;7 3J=\''5e\''+F(1i.5i()*4p);7 1x=D.5j(/^3q$|^5n$|^5m$|^5l$|^5k$|^5A$|^2V$|^4u$|^4y$|^4z$|^4x$|^4v$|^4s$|^4H$/i.2q(e.2E)?\''4J\'':e.2E);6.1j(1x,\''4F\'',3J);1x.3X=\''4B\'';7 R=1x.L;7 X=0;7 N=0;8(J.O==\''33\''||J.O==\''2e\''){X=J.X;N=J.N}R.Q=\''U\'';R.X=X+\''K\'';R.N=N+\''K\'';R.O=J.O!!=\''33\''&&J.O!!=\''2e\''?\''33\'':J.O;R.2K=\''1F\'';R.36=J.32.1o+\''K\'';R.1T=J.32.1e+\''K\'';R.2j=J.18.t;R.2k=J.18.r;R.2n=J.18.b;R.2l=J.18.l;8(6.3p.4G){R.4g=2Y}u{R.4D=2Y}e.2x.4f(1x,e);A.2j=\''1M\'';A.2k=\''1M\'';A.2n=\''1M\'';A.2l=\''1M\'';A.O=\''2e\'';A.4C=\''U\'';A.X=\''1M\'';A.N=\''1M\'';8(1Q){A.Q=\''U\'';A.1a=1E}1x.4A(e);R.Q=\''1Y\'';q{J:J,4I:6(1x)}};6.E.2f={4K:[0,B,B],4r:[3E,B,B],4w:[4l,4l,4t],4X:[0,0,0],60:[0,0,B],6P:[3H,42,42],6O:[0,B,B],6N:[0,0,1L],6L:[0,1L,1L],6M:[3b,3b,3b],6Q:[0,6R,0],6W:[6V,6U,4k],6S:[1L,0,1L],6T:[6K,4k,47],6J:[B,3I,0],6B:[6A,50,6z],6x:[1L,0,0],6Y:[6C,6D,6I],6H:[6G,0,2U],6E:[B,0,B],6F:[B,6X,0],7a:[0,1v,0],7j:[75,0,7i],7f:[3E,3v,3I],7e:[7h,7l,3v],7g:[3r,B,B],7c:[4c,7d,4c],72:[2U,2U,2U],71:[B,70,74],76:[B,B,3r],7b:[0,B,0],79:[B,0,B],77:[1v,0,0],78:[0,0,1v],6Z:[1v,1v,0],73:[B,3H,0],7k:[B,2I,6y],6v:[1v,0,1v],5V:[B,0,0],5U:[2I,2I,2I],5T:[B,B,B],5R:[B,B,0]};6.E.1w=d(16,3z){8(6.E.2f[16])q{r:6.E.2f[16][0],g:6.E.2f[16][1],b:6.E.2f[16][2]};u 8(M=/^1N\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)$/.2A(16))q{r:F(M[1]),g:F(M[2]),b:F(M[3])};u 8(M=/1N\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*\\)$/.2A(16))q{r:Z(M[1])*2.55,g:Z(M[2])*2.55,b:Z(M[3])*2.55};u 8(M=/^#([a-1H-1B-9])([a-1H-1B-9])([a-1H-1B-9])$/.2A(16))q{r:F("1C"+M[1]+M[1]),g:F("1C"+M[2]+M[2]),b:F("1C"+M[3]+M[3])};u 8(M=/^#([a-1H-1B-9]{2})([a-1H-1B-9]{2})([a-1H-1B-9]{2})$/.2A(16))q{r:F("1C"+M[1]),g:F("1C"+M[2]),b:F("1C"+M[3])};u q 3z==26?1A:{r:B,g:B,b:B}};6.E.4n={3y:1,2X:1,3G:1,2Z:1,5S:1,5B:1,36:1,N:1,5W:1,5X:1,2n:1,2l:1,2k:1,2j:1,62:1,2T:1,61:1,6w:1,1f:1,5Y:1,5Z:1,3s:1,3t:1,3u:1,3w:1,38:1,5Q:1,X:1,1T:1,2O:1};6.E.49={5P:1,5G:1,5H:1,5F:1,5E:1,16:1,5C:1};6.E.25=[\''5D\'',\''5I\'',\''5J\'',\''5O\''];6.E.3k={\''3d\'':[\''24\'',\''3W\''],\''2B\'':[\''24\'',\''3f\''],\''2D\'':[\''2D\'',\''\''],\''2C\'':[\''2C\'',\''\'']};6.3Q.4b({5N:d(1h,1G,P,2v){q k.2d(d(){7 2t=6.1G(1G,P,2v);7 e=28 6.4m(k,2t,1h)})},37:d(1G,2v){q k.2d(d(){7 2t=6.1G(1G,2v);7 e=28 6.37(k,2t)})},5M:d(14){q k.1V(d(){8(k.1n)6.3m(k,14)})},5K:d(14){q k.1V(d(){8(k.1n)6.3m(k,14);8(k.2d&&k.2d[\''E\''])k.2d.E=[]})}});6.4b({37:d(C,o){7 z=k,4o;z.14=d(){8(6.43(o.2M))o.2M.3Z(C)};z.2h=3O(d(){z.14()},o.1k);C.1n=z},P:{4q:d(p,n,4j,4d,1k){q((-1i.5L(p*1i.63)/2)+0.5)*4d+4j}},4m:d(C,o,1h){7 z=k,4o;7 y=C.L;7 44=6.H(C,"2K");7 1O=6.H(C,"Q");7 G={};z.2L=(28 46()).48();o.P=o.P&&6.P[o.P]?o.P:\''4q\'';z.2Q=d(I,W){8(6.E.4n[I]){8(W==\''2H\''||W==\''2G\''||W==\''3N\''){8(!!C.1r)C.1r={};7 r=Z(6.1y(C,I));C.1r[I]=r&&r>-4p?r:(Z(6.H(C,I))||0);W=W==\''3N\''?(1O==\''U\''?\''2H\'':\''2G\''):W;o[W]=26;G[I]=W==\''2H\''?[0,C.1r[I]]:[C.1r[I],0];8(I!!=\''1f\'')y[I]=G[I][0]+(I!!=\''2O\''&&I!!=\''34\''?\''K\'':\''\'');u 6.1j(y,"1f",G[I][0])}u{G[I]=[Z(6.1y(C,I)),Z(W)||0]}}u 8(6.E.49[I])G[I]=[6.E.1w(6.1y(C,I)),6.E.1w(W)];u 8(/^2D$|2C$|24$|2B$|3d$/i.2q(I)){7 m=W.1t(/\\s+/g,\'' \'').1t(/1N\\s*\\(\\s*/g,\''1N(\'').1t(/\\s*,\\s*/g,\'',\'').1t(/\\s*\\)/g,\'')\'').64(/([^\\s]+)/g);6n(I){2b\''2D\'':2b\''2C\'':2b\''3d\'':2b\''2B\'':m[3]=m[3]||m[1]||m[0];m[2]=m[2]||m[0];m[1]=m[1]||m[0];S(7 i=0;i<6.E.25.1m;i++){7 1l=6.E.3k[I][0]+6.E.25[i]+6.E.3k[I][1];G[1l]=I==\''2B\''?[6.E.1w(6.1y(C,1l)),6.E.1w(m[i])]:[Z(6.1y(C,1l)),Z(m[i])]}3R;2b\''24\'':S(7 i=0;i<m.1m;i++){7 3n=Z(m[i]);7 2r=!!6m(3n)?\''3W\'':(!!/6l|U|1F|6j|6k|6o|6p|6u|6t|6s|6q/i.2q(m[i])?\''3f\'':1A);8(2r){S(7 j=0;j<6.E.25.1m;j++){1l=\''24\''+6.E.25[j]+2r;G[1l]=2r==\''3f\''?[6.E.1w(6.1y(C,1l)),6.E.1w(m[i])]:[Z(6.1y(C,1l)),3n]}}u{y[\''6r\'']=m[i]}}3R}}u{y[I]=W}q 1A};S(p 1q 1h){8(p==\''L\''){7 1c=6.30(1h[p]);S(1P 1q 1c){k.2Q(1P,1c[1P])}}u 8(p==\''3X\''){8(D.2S)S(7 i=0;i<D.2S.1m;i++){7 1K=D.2S[i].1K||D.2S[i].6i||20;8(1K){S(7 j=0;j<1K.1m;j++){8(1K[j].6h==\''.\''+1h[p]){7 1X=28 69(\''\\.\''+1h[p]+\'' {\'');7 1g=1K[j].L.68;7 1c=6.30(1g.1t(1X,\''\'').1t(/}/g,\''\''));S(1P 1q 1c){k.2Q(1P,1c[1P])}}}}}}u{k.2Q(p,1h[p])}}y.Q=1O==\''U\''?\''1Y\'':1O;y.2K=\''1F\'';z.14=d(){7 t=(28 46()).48();8(t>o.1k+z.2L){4h(z.2h);z.2h=20;S(p 1q G){8(p=="1f")6.1j(y,"1f",G[p][1]);u 8(2R G[p][1]==\''2V\'')y[p]=\''1N(\''+G[p][1].r+\'',\''+G[p][1].g+\'',\''+G[p][1].b+\'')\'';u y[p]=G[p][1]+(p!!=\''2O\''&&p!!=\''34\''?\''K\'':\''\'')}8(o.2G||o.2H)S(7 p 1q C.1r)8(p=="1f")6.1j(y,p,C.1r[p]);u y[p]="";y.Q=o.2G?\''U\'':(1O!!=\''U\''?1O:\''1Y\'');y.2K=44;C.1n=20;8(6.43(o.2M))o.2M.3Z(C)}u{7 n=t-k.2L;7 2c=n/o.1k;S(p 1q G){8(2R G[p][1]==\''2V\''){y[p]=\''1N(\''+F(6.P[o.P](2c,n,G[p][0].r,(G[p][1].r-G[p][0].r),o.1k))+\'',\''+F(6.P[o.P](2c,n,G[p][0].g,(G[p][1].g-G[p][0].g),o.1k))+\'',\''+F(6.P[o.P](2c,n,G[p][0].b,(G[p][1].b-G[p][0].b),o.1k))+\'')\''}u{7 2W=6.P[o.P](2c,n,G[p][0],(G[p][1]-G[p][0]),o.1k);8(p=="1f")6.1j(y,"1f",2W);u y[p]=2W+(p!!=\''2O\''&&p!!=\''34\''?\''K\'':\''\'')}}}};z.2h=3O(d(){z.14()},13);C.1n=z},3m:d(C,14){8(14)C.1n.2L-=67;u{2z.4h(C.1n.2h);C.1n=20;6.65(C,"E")}}});6.30=d(1g){7 1c={};8(2R 1g==\''66\''){1g=1g.39().40(\'';\'');S(7 i=0;i<1g.1m;i++){1X=1g[i].40(\'':\'');8(1X.1m==2){1c[6.45(1X[0].1t(/\\-(\\w)/g,d(m,c){q c.6a()}))]=6.45(1X[1])}}}q 1c};6.1u={3K:d(o){q k.1V(d(){7 4=k;4.f={10:6(o.10,k),23:6(o.23,k),21:6.15.3o(k),T:o.T,2p:o.2p,1Z:o.1Z,3Y:o.3Y,17:o.17,2T:o.2T};6.1u.2J(4,0);6(2z).2F(\''6b\'',d(){4.f.21=6.15.3o(4);6.1u.2J(4,0);6.1u.3i(4)});6.1u.3i(4);4.f.10.2F(\''6g\'',d(){6(4.f.2p,k).1S(0).L.Q=\''1Y\''}).2F(\''6f\'',d(){6(4.f.2p,k).1S(0).L.Q=\''U\''});6(D).2F(\''6e\'',d(e){7 2g=6.15.3T(e);7 19=0;8(4.f.17&&4.f.17==\''3M\'')7 2o=2g.x-4.f.21.x-(4.1z-4.f.T*4.f.10.1W())/2-4.f.T/2;u 8(4.f.17&&4.f.17==\''38\'')7 2o=2g.x-4.f.21.x-4.1z+4.f.T*4.f.10.1W();u 7 2o=2g.x-4.f.21.x;7 3D=1i.3C(2g.y-4.f.21.y-4.2s/2,2);4.f.10.1V(d(2m){11=1i.6c(1i.3C(2o-2m*4.f.T,2)+3D);11-=4.f.T/2;11=11<0?0:11;11=11>4.f.1Z?4.f.1Z:11;11=4.f.1Z-11;3a=4.f.2T*11/4.f.1Z;k.L.1T=4.f.T+3a+\''K\'';k.L.N=4.f.T*2m+19+\''K\'';19+=3a});6.1u.2J(4,19)})})},2J:d(4,19){8(4.f.17)8(4.f.17==\''3M\'')4.f.23.1S(0).L.N=(4.1z-4.f.T*4.f.10.1W())/2-19/2+\''K\'';u 8(4.f.17==\''N\'')4.f.23.1S(0).L.N=-19/4.f.10.1W()+\''K\'';u 8(4.f.17==\''38\'')4.f.23.1S(0).L.N=(4.1z-4.f.T*4.f.10.1W())-19/2+\''K\'';4.f.23.1S(0).L.1T=4.f.T*4.f.10.1W()+19+\''K\''},3i:d(4){4.f.10.1V(d(2m){k.L.1T=4.f.T+\''K\'';k.L.N=4.f.T*2m+\''K\''})}};6.3Q.6d=6.1u.3K;'',62,456,''||||el||jQuery|var|if|||||function||fisheyeCfg|||||this||||options||return||||else||||||es|255|elem|document|fx|parseInt|props|css|tp|oldStyle|px|style|result|left|position|easing|display|wrs|for|itemWidth|none|body|vp|top|documentElement|parseFloat|items|distance|nodeEl||step|iUtil|color|halign|margins|toAdd|visibility|clientScroll|newStyles|cs|wb|opacity|styles|prop|Math|attr|duration|nmp|length|animationHandler|hb|old|in|orig|scrollTop|replace|iFisheye|128|parseColor|wr|curCSS|offsetWidth|false|F0|0x|scrollLeft|oldVisibility|hidden|speed|fA|currentStyle|iw|cssRules|139|0px|rgb|oldDisplay|np|restoreStyle|ih|get|width|toInteger|each|size|rule|block|proximity|null|pos|de|container|border|cssSides|true|axis|new|clientHeight|clientWidth|case|pr|queue|absolute|namedColors|pointer|timer|event|marginTop|marginRight|marginLeft|nr|marginBottom|posx|itemsText|test|sideEnd|offsetHeight|opt|src|callback|png|parentNode|oldPosition|window|exec|borderColor|padding|margin|nodeName|bind|hide|show|192|positionContainer|overflow|startTime|complete|self|zIndex|while|getValues|typeof|styleSheets|maxWidth|211|object|pValue|borderLeftWidth|oldFloat|borderTopWidth|parseStyle|innerHeight|sizes|relative|fontWeight|getSize|height|pause|right|toLowerCase|extraWidth|169|innerWidth|borderWidth|scrollHeight|Color|func|traverseDOM|positionItems|scrollWidth|cssSidesEnd|windowSize|stopAnim|floatVal|getPosition|browser|img|224|paddingBottom|paddingLeft|paddingRight|230|paddingTop|offsetTop|borderBottomWidth|notColor|fxCheckTag|offsetLeft|pow|posy|240|firstChild|borderRightWidth|165|140|wid|build|getMargins|center|toggle|setInterval|getScroll|fn|break|max|getPointer|emptyGIF|images|Width|className|valign|apply|split|opera||isFunction|oldOverflow|trim|Date||getTime|colorCssProps|tagName|extend|144|delta|offsetParent|insertBefore|styleFloat|clearInterval|indexOf|firstNum|107|245|fxe|cssProps|values|10000|linear|azure|dl|220|iframe|ul|beige|table|button|form|appendChild|fxWrapper|listStyle|cssFloat|getPositionLite|id|msie|ol|wrapper|div|aqua|td|filter|progid|fixPNG|getSizeLite|horizontally|DXImageTransform|Microsoft|tr|prototype|Array|AlphaImageLoader|black|vertically|getBorder||pageY|clientX|pageX|clientY||getPadding|centerEl|getClient|purgeEvents|nextSibling|tbody|caption|float|w_|buildWrapper|removeChild|destroyWrapper|random|createElement|select|hr|input|br|meta|optgroup|colgroup|col|tfoot|thead|th|header|option|frameset|frame|script|textarea|fontSize|outlineColor|Top|borderTopColor|borderRightColor|borderBottomColor|borderLeftColor|Right|Bottom|stopAll|cos|stop|animate|Left|backgroundColor|textIndent|yellow|bottom|white|silver|red|letterSpacing|lineHeight|outlineOffset|outlineWidth|blue|minHeight|maxHeight|PI|match|dequeue|string|100000000|cssText|RegExp|toUpperCase|resize|sqrt|Fisheye|mousemove|mouseout|mouseover|selectorText|rules|dotted|dashed|transparent|isNaN|switch|solid|double|outset|borderStyle|inset|ridge|groove|purple|minWidth|darkred|203|204|153|darkorchid|233|150|fuchsia|gold|148|darkviolet|122|darkorange|85|darkcyan|darkgrey|darkblue|cyan|brown|darkgreen|100|darkmagenta|darkolivegreen|183|189|darkkhaki|215|darksalmon|olive|182|lightpink|lightgrey|orange|193||lightyellow|maroon|navy|magenta|green|lime|lightgreen|238|lightblue|khaki|lightcyan|173|130|indigo|pink|216''.split(''|''),0,{}))'! !!CSSDockFileLibrary methodsFor: 'scripts' stamp: 'tbn 11/28/2007 01:10'!jqueryJs	^ '/* * jQuery 1.1.2 - New Wave Javascript * * Copyright (c) 2007 John Resig (jquery.com) * Dual licensed under the MIT (MIT-LICENSE.txt) * and GPL (GPL-LICENSE.txt) licenses. * * $Date: 2007-02-27 17:18:47 -0500 (Tue, 27 Feb 2007) $ * $Rev: 1460 $ */eval(function(p,a,c,k,e,d){e=function(c){return(c<a?"":e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!!''''.replace(/^/,String)){while(c--){d[e(c)]=k[c]||e(c)}k=[function(e){return d[e]}];e=function(){return''\\w+''};c=1};while(c--){if(k[c]){p=p.replace(new RegExp(''\\b''+e(c)+''\\b'',''g''),k[c])}}return p}(''7(1D 1u.6=="R"){1u.R=1u.R;v 6=q(a,c){7(1u==l)u 1q 6(a,c);a=a||12;7(6.1p(a))u 1q 6(12)[6.D.27?"27":"2P"](a);7(1D a=="20"){v m=/^[^<]*(<(.|\\s)+>)[^>]*$/.2M(a);7(m)a=6.41([m[1]]);I u 1q 6(c).2p(a)}u l.6p(a.1l==2A&&a||(a.3W||a.H&&a!!=1u&&!!a.1W&&a[0]!!=R&&a[0].1W)&&6.3N(a)||[a])};7(1D $!!="R")6.30$=$;v $=6;6.D=6.8n={3W:"1.1.2",8K:q(){u l.H},H:0,2b:q(1P){u 1P==R?6.3N(l):l[1P]},2j:q(a){v K=6(a);K.6n=l;u K},6p:q(a){l.H=0;[].1m.15(l,a);u l},J:q(D,1A){u 6.J(l,D,1A)},2g:q(1b){v 4W=-1;l.J(q(i){7(l==1b)4W=i});u 4W},1G:q(23,O,B){v 1b=23;7(23.1l==3t)7(O==R)u l.H&&6[B||"1G"](l[0],23)||R;I{1b={};1b[23]=O}u l.J(q(2g){P(v G 1B 1b)6.1G(B?l.1o:l,G,6.G(l,1b[G],B,2g,G))})},1n:q(23,O){u l.1G(23,O,"3g")},2I:q(e){7(1D e=="20")u l.3u().3s(12.8q(e));v t="";6.J(e||l,q(){6.J(l.3b,q(){7(l.1W!!=8)t+=l.1W!!=1?l.6u:6.D.2I([l])})});u t},2H:q(){v a=6.41(1v);u l.J(q(){v b=a[0].3j(U);l.Y.2T(b,l);1Y(b.1a)b=b.1a;b.4A(l)})},3s:q(){u l.3d(1v,U,1,q(a){l.4A(a)})},5j:q(){u l.3d(1v,U,-1,q(a){l.2T(a,l.1a)})},5k:q(){u l.3d(1v,11,1,q(a){l.Y.2T(a,l)})},5u:q(){u l.3d(1v,11,-1,q(a){l.Y.2T(a,l.2c)})},4f:q(){u l.6n||6([])},2p:q(t){u l.2j(6.2Y(l,q(a){u 6.2p(t,a)}),t)},4Y:q(4M){u l.2j(6.2Y(l,q(a){v a=a.3j(4M!!=R?4M:U);a.$1E=14;u a}))},1C:q(t){u l.2j(6.1p(t)&&6.2n(l,q(2u,2g){u t.15(2u,[2g])})||6.3z(t,l))},2e:q(t){u l.2j(t.1l==3t&&6.3z(t,l,U)||6.2n(l,q(a){u(t.1l==2A||t.3W)?6.3y(a,t)<0:a!!=t}))},1K:q(t){u l.2j(6.2m(l.2b(),t.1l==3t?6(t).2b():t.H!!=R&&(!!t.1e||t.1e=="8s")?t:[t]))},4k:q(1s){u 1s?6.1C(1s,l).r.H>0:11},19:q(19){u 19==R?(l.H?l[0].O:14):l.1G("O",19)},4T:q(19){u 19==R?(l.H?l[0].2G:14):l.3u().3s(19)},3d:q(1A,1N,3Y,D){v 4Y=l.H>1;v a=6.41(1A);7(3Y<0)a.8t();u l.J(q(){v 1b=l;7(1N&&6.1e(l,"1N")&&6.1e(a[0],"3m"))1b=l.5K("1X")[0]||l.4A(12.56("1X"));6.J(a,q(){D.15(1b,[4Y?l.3j(U):l])})})}};6.1w=6.D.1w=q(){v 1T=1v[0],a=1;7(1v.H==1){1T=l;a=0}v G;1Y(G=1v[a++])P(v i 1B G)1T[i]=G[i];u 1T};6.1w({8u:q(){7(6.30$)$=6.30$;u 6},1p:q(D){u!!!!D&&1D D!!="20"&&!!D.1e&&1D D[0]=="R"&&/q/i.1j(D+"")},4C:q(C){u C.60&&C.5J&&!!C.5J.63},1e:q(C,W){u C.1e&&C.1e.3K()==W.3K()},J:q(1b,D,1A){7(1b.H==R)P(v i 1B 1b)D.15(1b[i],1A||[i,1b[i]]);I P(v i=0,6q=1b.H;i<6q;i++)7(D.15(1b[i],1A||[i,1b[i]])===11)3M;u 1b},G:q(C,O,B,2g,G){7(6.1p(O))O=O.3n(C,[2g]);v 5G=/z-?2g|8x-?8y|1c|58|8z-?26/i;u O&&O.1l==3J&&B=="3g"&&!!5G.1j(G)?O+"4R":O},18:{1K:q(C,c){6.J(c.3o(/\\s+/),q(i,N){7(!!6.18.2Q(C.18,N))C.18+=(C.18?" ":"")+N})},2d:q(C,c){C.18=c?6.2n(C.18.3o(/\\s+/),q(N){u!!6.18.2Q(c,N)}).6r(" "):""},2Q:q(t,c){t=t.18||t;c=c.1S(/([\\.\\\\\\+\\*\\?\\[\\^\\]\\$\\(\\)\\{\\}\\=\\!!\\<\\>\\|\\:])/g,"\\\\$1");u t&&1q 4u("(^|\\\\s)"+c+"(\\\\s|$)").1j(t)}},4c:q(e,o,f){P(v i 1B o){e.1o["1L"+i]=e.1o[i];e.1o[i]=o[i]}f.15(e,[]);P(v i 1B o)e.1o[i]=e.1o["1L"+i]},1n:q(e,p){7(p=="26"||p=="3Q"){v 1L={},44,3I,d=["8A","8B","8C","8D"];6.J(d,q(){1L["8E"+l]=0;1L["8F"+l+"8G"]=0});6.4c(e,1L,q(){7(6.1n(e,"1h")!!="1V"){44=e.8H;3I=e.8I}I{e=6(e.3j(U)).2p(":4i").5m("2W").4f().1n({4m:"1F",3k:"7H",1h:"2z",8L:"0",6w:"0"}).5A(e.Y)[0];v 3i=6.1n(e.Y,"3k");7(3i==""||3i=="4a")e.Y.1o.3k="6x";44=e.6y;3I=e.6z;7(3i==""||3i=="4a")e.Y.1o.3k="4a";e.Y.36(e)}});u p=="26"?44:3I}u 6.3g(e,p)},3g:q(C,G,53){v K;7(G=="1c"&&6.V.1g)u 6.1G(C.1o,"1c");7(G=="4g"||G=="2s")G=6.V.1g?"3X":"2s";7(!!53&&C.1o[G])K=C.1o[G];I 7(12.42&&12.42.4V){7(G=="2s"||G=="3X")G="4g";G=G.1S(/([A-Z])/g,"-$1").4l();v N=12.42.4V(C,14);7(N)K=N.54(G);I 7(G=="1h")K="1V";I 6.4c(C,{1h:"2z"},q(){v c=12.42.4V(l,"");K=c&&c.54(G)||""})}I 7(C.4e){v 55=G.1S(/\\-(\\w)/g,q(m,c){u c.3K()});K=C.4e[G]||C.4e[55]}u K},41:q(a){v r=[];6.J(a,q(i,1z){7(!!1z)u;7(1z.1l==3J)1z=1z.6C();7(1D 1z=="20"){v s=6.32(1z),22=12.56("22"),2h=[];v 2H=!!s.17("<1t")&&[1,"<40>","</40>"]||(!!s.17("<6D")||!!s.17("<1X")||!!s.17("<6E"))&&[1,"<1N>","</1N>"]||!!s.17("<3m")&&[2,"<1N><1X>","</1X></1N>"]||(!!s.17("<6F")||!!s.17("<6G"))&&[3,"<1N><1X><3m>","</3m></1X></1N>"]||[0,"",""];22.2G=2H[1]+s+2H[2];1Y(2H[0]--)22=22.1a;7(6.V.1g){7(!!s.17("<1N")&&s.17("<1X")<0)2h=22.1a&&22.1a.3b;I 7(2H[1]=="<1N>"&&s.17("<1X")<0)2h=22.3b;P(v n=2h.H-1;n>=0;--n)7(6.1e(2h[n],"1X")&&!!2h[n].3b.H)2h[n].Y.36(2h[n])}1z=22.3b}7(1z.H===0&&!!6.1e(1z,"3w"))u;7(1z[0]==R||6.1e(1z,"3w"))r.1m(1z);I r=6.2m(r,1z)});u r},1G:q(C,W,O){v 2l=6.4C(C)?{}:{"P":"6J","6L":"18","4g":6.V.1g?"3X":"2s",2s:6.V.1g?"3X":"2s",2G:"2G",18:"18",O:"O",2U:"2U",2W:"2W",88:"6N",2R:"2R"};7(W=="1c"&&6.V.1g&&O!!=R){C.58=1;u C.1C=C.1C.1S(/4h\\([^\\)]*\\)/6O,"")+(O==1?"":"4h(1c="+O*6c+")")}I 7(W=="1c"&&6.V.1g)u C.1C?4S(C.1C.6P(/4h\\(1c=(.*)\\)/)[1])/6c:1;7(W=="1c"&&6.V.3h&&O==1)O=0.6R;7(2l[W]){7(O!!=R)C[2l[W]]=O;u C[2l[W]]}I 7(O==R&&6.V.1g&&6.1e(C,"3w")&&(W=="80"||W=="7Z"))u C.6T(W).6u;I 7(C.60){7(O!!=R)C.6V(W,O);7(6.V.1g&&/5E|3f/.1j(W)&&!!6.4C(C))u C.33(W,2);u C.33(W)}I{W=W.1S(/-([a-z])/6W,q(z,b){u b.3K()});7(O!!=R)C[W]=O;u C[W]}},32:q(t){u t.1S(/^\\s+|\\s+$/g,"")},3N:q(a){v r=[];7(a.1l!!=2A)P(v i=0,2L=a.H;i<2L;i++)r.1m(a[i]);I r=a.3O(0);u r},3y:q(b,a){P(v i=0,2L=a.H;i<2L;i++)7(a[i]==b)u i;u-1},2m:q(2r,3P){v r=[].3O.3n(2r,0);P(v i=0,5c=3P.H;i<5c;i++)7(6.3y(3P[i],r)==-1)2r.1m(3P[i]);u 2r},2n:q(1O,D,4j){7(1D D=="20")D=1q 4v("a","i","u "+D);v 1f=[];P(v i=0,2u=1O.H;i<2u;i++)7(!!4j&&D(1O[i],i)||4j&&!!D(1O[i],i))1f.1m(1O[i]);u 1f},2Y:q(1O,D){7(1D D=="20")D=1q 4v("a","u "+D);v 1f=[],r=[];P(v i=0,2u=1O.H;i<2u;i++){v 19=D(1O[i],i);7(19!!==14&&19!!=R){7(19.1l!!=2A)19=[19];1f=1f.6Z(19)}}v r=1f.H?[1f[0]]:[];5g:P(v i=1,5f=1f.H;i<5f;i++){P(v j=0;j<i;j++)7(1f[i]==r[j])5F 5g;r.1m(1f[i])}u r}});1q q(){v b=7K.71.4l();6.V={2F:/5D/.1j(b),3e:/3e/.1j(b),1g:/1g/.1j(b)&&!!/3e/.1j(b),3h:/3h/.1j(b)&&!!/(72|5D)/.1j(b)};6.7G=!!6.V.1g||12.74=="75"};6.J({5v:"a.Y",4y:"6.4y(a)",76:"6.29(a,2,\''2c\'')",7C:"6.29(a,2,\''5t\'')",78:"6.2w(a.Y.1a,a)",79:"6.2w(a.1a)"},q(i,n){6.D[i]=q(a){v K=6.2Y(l,n);7(a&&1D a=="20")K=6.3z(a,K);u l.2j(K)}});6.J({5A:"3s",7b:"5j",2T:"5k",7d:"5u"},q(i,n){6.D[i]=q(){v a=1v;u l.J(q(){P(v j=0,2L=a.H;j<2L;j++)6(a[j])[n](l)})}});6.J({5m:q(23){6.1G(l,23,"");l.7f(23)},7g:q(c){6.18.1K(l,c)},7h:q(c){6.18.2d(l,c)},7j:q(c){6.18[6.18.2Q(l,c)?"2d":"1K"](l,c)},2d:q(a){7(!!a||6.1C(a,[l]).r.H)l.Y.36(l)},3u:q(){1Y(l.1a)l.36(l.1a)}},q(i,n){6.D[i]=q(){u l.J(n,1v)}});6.J(["5r","5o","5q","5w"],q(i,n){6.D[n]=q(1P,D){u l.1C(":"+n+"("+1P+")",D)}});6.J(["26","3Q"],q(i,n){6.D[n]=q(h){u h==R?(l.H?6.1n(l[0],n):14):l.1n(n,h.1l==3t?h:h+"4R")}});6.1w({1s:{"":"m[2]==\''*\''||6.1e(a,m[2])","#":"a.33(\''2D\'')==m[2]",":":{5o:"i<m[3]-0",5q:"i>m[3]-0",29:"m[3]-0==i",5r:"m[3]-0==i",2r:"i==0",2X:"i==r.H-1",5S:"i%2==0",5T:"i%2","29-3r":"6.29(a.Y.1a,m[3],\''2c\'',a)==a","2r-3r":"6.29(a.Y.1a,1,\''2c\'')==a","2X-3r":"6.29(a.Y.7m,1,\''5t\'')==a","7o-3r":"6.2w(a.Y.1a).H==1",5v:"a.1a",3u:"!!a.1a",5w:"6.D.2I.15([a]).17(m[3])>=0",38:\''a.B!!="1F"&&6.1n(a,"1h")!!="1V"&&6.1n(a,"4m")!!="1F"\'',1F:\''a.B=="1F"||6.1n(a,"1h")=="1V"||6.1n(a,"4m")=="1F"\'',7u:"!!a.2U",2U:"a.2U",2W:"a.2W",2R:"a.2R||6.1G(a,\''2R\'')",2I:"a.B==\''2I\''",4i:"a.B==\''4i\''",5y:"a.B==\''5y\''",4F:"a.B==\''4F\''",5z:"a.B==\''5z\''",4Q:"a.B==\''4Q\''",5a:"a.B==\''5a\''",5B:"a.B==\''5B\''",3x:\''a.B=="3x"||6.1e(a,"3x")\'',5C:"/5C|40|7z|3x/i.1j(a.1e)"},".":"6.18.2Q(a,m[2])","@":{"=":"z==m[4]","!!=":"z!!=m[4]","^=":"z&&!!z.17(m[4])","$=":"z&&z.2S(z.H - m[4].H,m[4].H)==m[4]","*=":"z&&z.17(m[4])>=0","":"z",4t:q(m){u["",m[1],m[3],m[2],m[5]]},5Q:"z=a[m[3]];7(!!z||/5E|3f/.1j(m[3]))z=6.1G(a,m[3]);"},"[":"6.2p(m[2],a).H"},5N:[/^\\[ *(@)([a-2o-3C-]*) *([!!*$^=]*) *(\''?"?)(.*?)\\4 *\\]/i,/^(\\[)\\s*(.*?(\\[.*?\\])?[^[]*?)\\s*\\]/,/^(:)([a-2o-3C-]*)\\("?\''?(.*?(\\(.*?\\))?[^(]*?)"?\''?\\)/i,/^([:.#]*)([a-2o-3C*-]*)/i],1R:[/^(\\/?\\.\\.)/,"a.Y",/^(>|\\/)/,"6.2w(a.1a)",/^(\\+)/,"6.29(a,2,\''2c\'')",/^(~)/,q(a){v s=6.2w(a.Y.1a);u s.3O(6.3y(a,s)+1)}],3z:q(1s,1O,2e){v 1L,N=[];1Y(1s&&1s!!=1L){1L=1s;v f=6.1C(1s,1O,2e);1s=f.t.1S(/^\\s*,\\s*/,"");N=2e?1O=f.r:6.2m(N,f.r)}u N},2p:q(t,1y){7(1D t!!="20")u[t];7(1y&&!!1y.1W)1y=14;1y=1y||12;7(!!t.17("//")){1y=1y.4G;t=t.2S(2,t.H)}I 7(!!t.17("/")){1y=1y.4G;t=t.2S(1,t.H);7(t.17("/")>=1)t=t.2S(t.17("/"),t.H)}v K=[1y],2a=[],2X=14;1Y(t&&2X!!=t){v r=[];2X=t;t=6.32(t).1S(/^\\/\\//i,"");v 3B=11;v 1H=/^[\\/>]\\s*([a-2o-9*-]+)/i;v m=1H.2M(t);7(m){6.J(K,q(){P(v c=l.1a;c;c=c.2c)7(c.1W==1&&(6.1e(c,m[1])||m[1]=="*"))r.1m(c)});K=r;t=t.1S(1H,"");7(t.17(" ")==0)5F;3B=U}I{P(v i=0;i<6.1R.H;i+=2){v 1H=6.1R[i];v m=1H.2M(t);7(m){r=K=6.2Y(K,6.1p(6.1R[i+1])?6.1R[i+1]:q(a){u 3l(6.1R[i+1])});t=6.32(t.1S(1H,""));3B=U;3M}}}7(t&&!!3B){7(!!t.17(",")){7(K[0]==1y)K.4K();6.2m(2a,K);r=K=[1y];t=" "+t.2S(1,t.H)}I{v 31=/^([a-2o-3C-]+)(#)([a-2o-9\\\\*30-]*)/i;v m=31.2M(t);7(m){m=[0,m[2],m[3],m[1]]}I{31=/^([#.]?)([a-2o-9\\\\*30-]*)/i;m=31.2M(t)}7(m[1]=="#"&&K[K.H-1].4X){v 2i=K[K.H-1].4X(m[2]);7(6.V.1g&&2i&&2i.2D!!=m[2])2i=6(\''[@2D="\''+m[2]+\''"]\'',K[K.H-1])[0];K=r=2i&&(!!m[3]||6.1e(2i,m[3]))?[2i]:[]}I{7(m[1]==".")v 4q=1q 4u("(^|\\\\s)"+m[2]+"(\\\\s|$)");6.J(K,q(){v 3E=m[1]!!=""||m[0]==""?"*":m[2];7(6.1e(l,"7I")&&3E=="*")3E="3c";6.2m(r,m[1]!!=""&&K.H!!=1?6.4w(l,[],m[1],m[2],4q):l.5K(3E))});7(m[1]=="."&&K.H==1)r=6.2n(r,q(e){u 4q.1j(e.18)});7(m[1]=="#"&&K.H==1){v 5L=r;r=[];6.J(5L,q(){7(l.33("2D")==m[2]){r=[l];u 11}})}K=r}t=t.1S(31,"")}}7(t){v 19=6.1C(t,r);K=r=19.r;t=6.32(19.t)}}7(K&&K[0]==1y)K.4K();6.2m(2a,K);u 2a},1C:q(t,r,2e){1Y(t&&/^[a-z[({<*:.#]/i.1j(t)){v p=6.5N,m;6.J(p,q(i,1H){m=1H.2M(t);7(m){t=t.7L(m[0].H);7(6.1s[m[1]].4t)m=6.1s[m[1]].4t(m);u 11}});7(m[1]==":"&&m[2]=="2e")r=6.1C(m[3],r,U).r;I 7(m[1]=="."){v 1H=1q 4u("(^|\\\\s)"+m[2]+"(\\\\s|$)");r=6.2n(r,q(e){u 1H.1j(e.18||"")},2e)}I{v f=6.1s[m[1]];7(1D f!!="20")f=6.1s[m[1]][m[2]];3l("f = q(a,i){"+(6.1s[m[1]].5Q||"")+"u "+f+"}");r=6.2n(r,f,2e)}}u{r:r,t:t}},4w:q(o,r,1R,W,1H){P(v s=o.1a;s;s=s.2c)7(s.1W==1){v 1K=U;7(1R==".")1K=s.18&&1H.1j(s.18);I 7(1R=="#")1K=s.33("2D")==W;7(1K)r.1m(s);7(1R=="#"&&r.H)3M;7(s.1a)6.4w(s,r,1R,W,1H)}u r},4y:q(C){v 4z=[];v N=C.Y;1Y(N&&N!!=12){4z.1m(N);N=N.Y}u 4z},29:q(N,1f,3Y,C){1f=1f||1;v 1P=0;P(;N;N=N[3Y]){7(N.1W==1)1P++;7(1P==1f||1f=="5S"&&1P%2==0&&1P>1&&N==C||1f=="5T"&&1P%2==1&&N==C)u N}},2w:q(n,C){v r=[];P(;n;n=n.2c){7(n.1W==1&&(!!C||n!!=C))r.1m(n)}u r}});6.F={1K:q(S,B,1k,E){7(6.V.1g&&S.45!!=R)S=1u;7(E)1k.E=E;7(!!1k.2y)1k.2y=l.2y++;7(!!S.$1E)S.$1E={};v 34=S.$1E[B];7(!!34){34=S.$1E[B]={};7(S["35"+B])34[0]=S["35"+B]}34[1k.2y]=1k;S["35"+B]=l.5Y;7(!!l.1i[B])l.1i[B]=[];l.1i[B].1m(S)},2y:1,1i:{},2d:q(S,B,1k){7(S.$1E){v i,j,k;7(B&&B.B){1k=B.1k;B=B.B}7(B&&S.$1E[B])7(1k)5V S.$1E[B][1k.2y];I P(i 1B S.$1E[B])5V S.$1E[B][i];I P(j 1B S.$1E)l.2d(S,j);P(k 1B S.$1E[B])7(k){k=U;3M}7(!!k)S["35"+B]=14}},1Q:q(B,E,S){E=6.3N(E||[]);7(!!S)6.J(l.1i[B]||[],q(){6.F.1Q(B,E,l)});I{v 1k=S["35"+B],19,D=6.1p(S[B]);7(1k){E.61(l.2l({B:B,1T:S}));7((19=1k.15(S,E))!!==11)l.4E=U}7(D&&19!!==11)S[B]();l.4E=11}},5Y:q(F){7(1D 6=="R"||6.F.4E)u;F=6.F.2l(F||1u.F||{});v 3R;v c=l.$1E[F.B];v 1A=[].3O.3n(1v,1);1A.61(F);P(v j 1B c){1A[0].1k=c[j];1A[0].E=c[j].E;7(c[j].15(l,1A)===11){F.2q();F.2E();3R=11}}7(6.V.1g)F.1T=F.2q=F.2E=F.1k=F.E=14;u 3R},2l:q(F){7(!!F.1T&&F.62)F.1T=F.62;7(F.64==R&&F.66!!=R){v e=12.4G,b=12.63;F.64=F.66+(e.67||b.67);F.7W=F.7X+(e.6b||b.6b)}7(6.V.2F&&F.1T.1W==3){v 2V=F;F=6.1w({},2V);F.1T=2V.1T.Y;F.2q=q(){u 2V.2q()};F.2E=q(){u 2V.2E()}}7(!!F.2q)F.2q=q(){l.3R=11};7(!!F.2E)F.2E=q(){l.7Y=U};u F}};6.D.1w({3T:q(B,E,D){u l.J(q(){6.F.1K(l,B,D||E,E)})},6s:q(B,E,D){u l.J(q(){6.F.1K(l,B,q(F){6(l).6f(F);u(D||E).15(l,1v)},E)})},6f:q(B,D){u l.J(q(){6.F.2d(l,B,D)})},1Q:q(B,E){u l.J(q(){6.F.1Q(B,E,l)})},3V:q(){v a=1v;u l.6i(q(e){l.4L=l.4L==0?1:0;e.2q();u a[l.4L].15(l,[e])||11})},81:q(f,g){q 4N(e){v p=(e.B=="3Z"?e.82:e.83)||e.84;1Y(p&&p!!=l)2B{p=p.Y}2J(e){p=l};7(p==l)u 11;u(e.B=="3Z"?f:g).15(l,[e])}u l.3Z(4N).6j(4N)},27:q(f){7(6.3U)f.15(12,[6]);I{6.3a.1m(q(){u f.15(l,[6])})}u l}});6.1w({3U:11,3a:[],27:q(){7(!!6.3U){6.3U=U;7(6.3a){6.J(6.3a,q(){l.15(12)});6.3a=14}7(6.V.3h||6.V.3e)12.85("6m",6.27,11)}}});1q q(){6.J(("86,87,2P,89,8b,51,6i,8c,"+"8d,8e,8f,3Z,6j,8h,40,"+"4Q,8i,8j,8k,2x").3o(","),q(i,o){6.D[o]=q(f){u f?l.3T(o,f):l.1Q(o)}});7(6.V.3h||6.V.3e)12.8l("6m",6.27,11);I 7(6.V.1g){12.8m("<8o"+"8p 2D=6o 8r=U "+"3f=//:><\\/2f>");v 2f=12.4X("6o");7(2f)2f.37=q(){7(l.3D!!="1Z")u;l.Y.36(l);6.27()};2f=14}I 7(6.V.2F)6.4Z=45(q(){7(12.3D=="8v"||12.3D=="1Z"){4o(6.4Z);6.4Z=14;6.27()}},10);6.F.1K(1u,"2P",6.27)};7(6.V.1g)6(1u).6s("51",q(){v 1i=6.F.1i;P(v B 1B 1i){v 49=1i[B],i=49.H;7(i&&B!!=\''51\'')6v 6.F.2d(49[i-1],B);1Y(--i)}});6.D.1w({6A:q(T,21,L){l.2P(T,21,L,1)},2P:q(T,21,L,1U){7(6.1p(T))u l.3T("2P",T);L=L||q(){};v B="5e";7(21)7(6.1p(21)){L=21;21=14}I{21=6.3c(21);B="65"}v 4d=l;6.3v({T:T,B:B,E:21,1U:1U,1Z:q(2K,16){7(16=="2O"||!!1U&&16=="5M")4d.1G("2G",2K.3G).4U().J(L,[2K.3G,16,2K]);I L.15(4d,[2K.3G,16,2K])}});u l},6B:q(){u 6.3c(l)},4U:q(){u l.2p("2f").J(q(){7(l.3f)6.59(l.3f);I 6.50(l.2I||l.6H||l.2G||"")}).4f()}});7(!!1u.3p)3p=q(){u 1q 6I("6K.6M")};6.J("5n,5R,5P,5W,5O,5I".3o(","),q(i,o){6.D[o]=q(f){u l.3T(o,f)}});6.1w({2b:q(T,E,L,B,1U){7(6.1p(E)){L=E;E=14}u 6.3v({T:T,E:E,2O:L,4s:B,1U:1U})},6Q:q(T,E,L,B){u 6.2b(T,E,L,B,1)},59:q(T,L){u 6.2b(T,14,L,"2f")},6S:q(T,E,L){u 6.2b(T,E,L,"6l")},6U:q(T,E,L,B){7(6.1p(E)){L=E;E={}}u 6.3v({B:"65",T:T,E:E,2O:L,4s:B})},6X:q(28){6.3q.28=28},6Y:q(5d){6.1w(6.3q,5d)},3q:{1i:U,B:"5e",28:0,5s:"70/x-73-3w-77",5i:U,48:U,E:14},3S:{},3v:q(s){s=6.1w({},6.3q,s);7(s.E){7(s.5i&&1D s.E!!="20")s.E=6.3c(s.E);7(s.B.4l()=="2b"){s.T+=((s.T.17("?")>-1)?"&":"?")+s.E;s.E=14}}7(s.1i&&!!6.4D++)6.F.1Q("5n");v 4x=11;v M=1q 3p();M.7i(s.B,s.T,s.48);7(s.E)M.3A("7k-7l",s.5s);7(s.1U)M.3A("7n-4J-7p",6.3S[s.T]||"7r, 7s 7v 7w 4n:4n:4n 7y");M.3A("X-7A-7B","3p");7(M.7D)M.3A("7E","7F");7(s.5H)s.5H(M);7(s.1i)6.F.1Q("5I",[M,s]);v 37=q(4r){7(M&&(M.3D==4||4r=="28")){4x=U;7(3H){4o(3H);3H=14}v 16;2B{16=6.5Z(M)&&4r!!="28"?s.1U&&6.68(M,s.T)?"5M":"2O":"2x";7(16!!="2x"){v 3F;2B{3F=M.4O("6a-4J")}2J(e){}7(s.1U&&3F)6.3S[s.T]=3F;v E=6.6h(M,s.4s);7(s.2O)s.2O(E,16);7(s.1i)6.F.1Q("5O",[M,s])}I 6.3L(s,M,16)}2J(e){16="2x";6.3L(s,M,16,e)}7(s.1i)6.F.1Q("5P",[M,s]);7(s.1i&&!!--6.4D)6.F.1Q("5R");7(s.1Z)s.1Z(M,16);7(s.48)M=14}};v 3H=45(37,13);7(s.28>0)57(q(){7(M){M.7M();7(!!4x)37("28")}},s.28);2B{M.7O(s.E)}2J(e){6.3L(s,M,14,e)}7(!!s.48)37();u M},3L:q(s,M,16,e){7(s.2x)s.2x(M,16,e);7(s.1i)6.F.1Q("5W",[M,s,e])},4D:0,5Z:q(r){2B{u!!r.16&&7T.7U=="4F:"||(r.16>=5X&&r.16<7V)||r.16==6d||6.V.2F&&r.16==R}2J(e){}u 11},68:q(M,T){2B{v 6e=M.4O("6a-4J");u M.16==6d||6e==6.3S[T]||6.V.2F&&M.16==R}2J(e){}u 11},6h:q(r,B){v 4P=r.4O("8a-B");v E=!!B&&4P&&4P.17("M")>=0;E=B=="M"||E?r.8g:r.3G;7(B=="2f")6.50(E);7(B=="6l")3l("E = "+E);7(B=="4T")6("<22>").4T(E).4U();u E},3c:q(a){v s=[];7(a.1l==2A||a.3W)6.J(a,q(){s.1m(2N(l.W)+"="+2N(l.O))});I P(v j 1B a)7(a[j]&&a[j].1l==2A)6.J(a[j],q(){s.1m(2N(j)+"="+2N(l))});I s.1m(2N(j)+"="+2N(a[j]));u s.6r("&")},50:q(E){7(1u.52)1u.52(E);I 7(6.V.2F)1u.57(E,0);I 3l.3n(1u,E)}});6.D.1w({1M:q(Q,L){v 1F=l.1C(":1F");Q?1F.25({26:"1M",3Q:"1M",1c:"1M"},Q,L):1F.J(q(){l.1o.1h=l.2C?l.2C:"";7(6.1n(l,"1h")=="1V")l.1o.1h="2z"});u l},1I:q(Q,L){v 38=l.1C(":38");Q?38.25({26:"1I",3Q:"1I",1c:"1I"},Q,L):38.J(q(){l.2C=l.2C||6.1n(l,"1h");7(l.2C=="1V")l.2C="2z";l.1o.1h="1V"});u l},5h:6.D.3V,3V:q(D,4H){v 1A=1v;u 6.1p(D)&&6.1p(4H)?l.5h(D,4H):l.J(q(){6(l)[6(l).4k(":1F")?"1M":"1I"].15(6(l),1A)})},7a:q(Q,L){u l.25({26:"1M"},Q,L)},7c:q(Q,L){u l.25({26:"1I"},Q,L)},7e:q(Q,L){u l.J(q(){v 5l=6(l).4k(":1F")?"1M":"1I";6(l).25({26:5l},Q,L)})},7q:q(Q,L){u l.25({1c:"1M"},Q,L)},7t:q(Q,L){u l.25({1c:"1I"},Q,L)},7x:q(Q,43,L){u l.25({1c:43},Q,L)},25:q(G,Q,1r,L){u l.1J(q(){l.2t=6.1w({},G);v 1t=6.Q(Q,1r,L);P(v p 1B G){v e=1q 6.39(l,1t,p);7(G[p].1l==3J)e.2v(e.N(),G[p]);I e[G[p]](G)}})},1J:q(B,D){7(!!D){D=B;B="39"}u l.J(q(){7(!!l.1J)l.1J={};7(!!l.1J[B])l.1J[B]=[];l.1J[B].1m(D);7(l.1J[B].H==1)D.15(l)})}});6.1w({Q:q(Q,1r,D){v 1t=Q&&Q.1l==7J?Q:{1Z:D||!!D&&1r||6.1p(Q)&&Q,24:Q,1r:D&&1r||1r&&1r.1l!!=4v&&1r};1t.24=(1t.24&&1t.24.1l==3J?1t.24:{7P:7Q,7R:5X}[1t.24])||7S;1t.1L=1t.1Z;1t.1Z=q(){6.69(l,"39");7(6.1p(1t.1L))1t.1L.15(l)};u 1t},1r:{},1J:{},69:q(C,B){B=B||"39";7(C.1J&&C.1J[B]){C.1J[B].4K();v f=C.1J[B][0];7(f)f.15(C)}},39:q(C,1d,G){v z=l;v y=C.1o;v 4B=6.1n(C,"1h");y.5U="1F";z.a=q(){7(1d.47)1d.47.15(C,[z.2k]);7(G=="1c")6.1G(y,"1c",z.2k);I 7(6k(z.2k))y[G]=6k(z.2k)+"4R";y.1h="2z"};z.6t=q(){u 4S(6.1n(C,G))};z.N=q(){v r=4S(6.3g(C,G));u r&&r>-8w?r:z.6t()};z.2v=q(4b,43){z.4I=(1q 5p()).5x();z.2k=4b;z.a();z.4p=45(q(){z.47(4b,43)},13)};z.1M=q(){7(!!C.1x)C.1x={};C.1x[G]=l.N();1d.1M=U;z.2v(0,C.1x[G]);7(G!!="1c")y[G]="5b"};z.1I=q(){7(!!C.1x)C.1x={};C.1x[G]=l.N();1d.1I=U;z.2v(C.1x[G],0)};z.3V=q(){7(!!C.1x)C.1x={};C.1x[G]=l.N();7(4B=="1V"){1d.1M=U;7(G!!="1c")y[G]="5b";z.2v(0,C.1x[G])}I{1d.1I=U;z.2v(C.1x[G],0)}};z.47=q(2Z,46){v t=(1q 5p()).5x();7(t>1d.24+z.4I){4o(z.4p);z.4p=14;z.2k=46;z.a();7(C.2t)C.2t[G]=U;v 2a=U;P(v i 1B C.2t)7(C.2t[i]!!==U)2a=11;7(2a){y.5U="";y.1h=4B;7(6.1n(C,"1h")=="1V")y.1h="2z";7(1d.1I)y.1h="1V";7(1d.1I||1d.1M)P(v p 1B C.2t)7(p=="1c")6.1G(y,p,C.1x[p]);I y[p]=""}7(2a&&6.1p(1d.1Z))1d.1Z.15(C)}I{v n=t-l.4I;v p=n/1d.24;z.2k=1d.1r&&6.1r[1d.1r]?6.1r[1d.1r](p,n,2Z,(46-2Z),1d.24):((-6g.7N(p*6g.8J)/2)+0.5)*(46-2Z)+2Z;z.a()}}}})}'',62,544,''||||||jQuery|if||||||||||||||this|||||function||||return|var||||||type|elem|fn|data|event|prop|length|else|each|ret|callback|xml|cur|value|for|speed|undefined|element|url|true|browser|name||parentNode|||false|document||null|apply|status|indexOf|className|val|firstChild|obj|opacity|options|nodeName|result|msie|display|global|test|handler|constructor|push|css|style|isFunction|new|easing|expr|opt|window|arguments|extend|orig|context|arg|args|in|filter|typeof|events|hidden|attr|re|hide|queue|add|old|show|table|elems|num|trigger|token|replace|target|ifModified|none|nodeType|tbody|while|complete|string|params|div|key|duration|animate|height|ready|timeout|nth|done|get|nextSibling|remove|not|script|index|tb|oid|pushStack|now|fix|merge|grep|z0|find|preventDefault|first|cssFloat|curAnim|el|custom|sibling|error|guid|block|Array|try|oldblock|id|stopPropagation|safari|innerHTML|wrap|text|catch|res|al|exec|encodeURIComponent|success|load|has|selected|substr|insertBefore|disabled|originalEvent|checked|last|map|firstNum|_|re2|trim|getAttribute|handlers|on|removeChild|onreadystatechange|visible|fx|readyList|childNodes|param|domManip|opera|src|curCSS|mozilla|parPos|cloneNode|position|eval|tr|call|split|XMLHttpRequest|ajaxSettings|child|append|String|empty|ajax|form|button|inArray|multiFilter|setRequestHeader|foundToken|9_|readyState|tag|modRes|responseText|ival|oWidth|Number|toUpperCase|handleError|break|makeArray|slice|second|width|returnValue|lastModified|bind|isReady|toggle|jquery|styleFloat|dir|mouseover|select|clean|defaultView|to|oHeight|setInterval|lastNum|step|async|els|static|from|swap|self|currentStyle|end|float|alpha|radio|inv|is|toLowerCase|visibility|00|clearInterval|timer|rec|isTimeout|dataType|_resort|RegExp|Function|getAll|requestDone|parents|matched|appendChild|oldDisplay|isXMLDoc|active|triggered|file|documentElement|fn2|startTime|Modified|shift|lastToggle|deep|handleHover|getResponseHeader|ct|submit|px|parseFloat|html|evalScripts|getComputedStyle|pos|getElementById|clone|safariTimer|globalEval|unload|execScript|force|getPropertyValue|newProp|createElement|setTimeout|zoom|getScript|image|1px|sl|settings|GET|rl|check|_toggle|processData|prepend|before|state|removeAttr|ajaxStart|lt|Date|gt|eq|contentType|previousSibling|after|parent|contains|getTime|checkbox|password|appendTo|reset|input|webkit|href|continue|exclude|beforeSend|ajaxSend|ownerDocument|getElementsByTagName|tmp|notmodified|parse|ajaxSuccess|ajaxComplete|_prefix|ajaxStop|even|odd|overflow|delete|ajaxError|200|handle|httpSuccess|tagName|unshift|srcElement|body|pageX|POST|clientX|scrollLeft|httpNotModified|dequeue|Last|scrollTop|100|304|xmlRes|unbind|Math|httpData|click|mouseout|parseInt|json|DOMContentLoaded|prevObject|__ie_init|setArray|ol|join|one|max|nodeValue|do|left|relative|clientHeight|clientWidth|loadIfModified|serialize|toString|thead|tfoot|td|th|textContent|ActiveXObject|htmlFor|Microsoft|class|XMLHTTP|readOnly|gi|match|getIfModified|9999|getJSON|getAttributeNode|post|setAttribute|ig|ajaxTimeout|ajaxSetup|concat|application|userAgent|compatible|www|compatMode|CSS1Compat|next|urlencoded|siblings|children|slideDown|prependTo|slideUp|insertAfter|slideToggle|removeAttribute|addClass|removeClass|open|toggleClass|Content|Type|lastChild|If|only|Since|fadeIn|Thu|01|fadeOut|enabled|Jan|1970|fadeTo|GMT|textarea|Requested|With|prev|overrideMimeType|Connection|close|boxModel|absolute|object|Object|navigator|substring|abort|cos|send|slow|600|fast|400|location|protocol|300|pageY|clientY|cancelBubble|method|action|hover|fromElement|toElement|relatedTarget|removeEventListener|blur|focus|readonly|resize|content|scroll|dblclick|mousedown|mouseup|mousemove|responseXML|change|keydown|keypress|keyup|addEventListener|write|prototype|scr|ipt|createTextNode|defer|FORM|reverse|noConflict|loaded|10000|font|weight|line|Top|Bottom|Right|Left|padding|border|Width|offsetHeight|offsetWidth|PI|size|right''.split(''|''),0,{}))'! !!CSSDockFileLibrary methodsFor: 'images'!linkPng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 128 0 0 0 128 8 6 0 0 0 195 62 97 203 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 10 79 105 67 67 80 80 104 111 116 111 115 104 111 112 32 73 67 67 32 112 114 111 102 105 108 101 0 0 120 218 157 83 103 84 83 233 22 61 247 222 244 66 75 136 128 148 75 111 82 21 8 32 82 66 139 128 20 145 38 42 33 9 16 74 136 33 161 217 21 81 193 17 69 69 4 27 200 160 136 3 142 142 128 140 21 81 44 12 138 10 216 7 228 33 162 142 131 163 136 138 202 251 225 123 163 107 214 188 247 230 205 254 181 215 62 231 172 243 157 179 207 7 192 8 12 150 72 51 81 53 128 12 169 66 30 17 224 131 199 196 198 225 228 46 64 129 10 36 112 0 16 8 179 100 33 115 253 35 1 0 248 126 60 60 43 34 192 7 190 0 1 120 211 11 8 0 192 77 155 192 48 28 135 255 15 234 66 153 92 1 128 132 1 192 116 145 56 75 8 128 20 0 64 122 142 66 166 0 64 70 1 128 157 152 38 83 0 160 4 0 96 203 99 98 227 0 80 45 0 96 39 127 230 211 0 128 157 248 153 123 1 0 91 148 33 21 1 160 145 0 32 19 101 136 68 0 104 59 0 172 207 86 138 69 0 88 48 0 20 102 75 196 57 0 216 45 0 48 73 87 102 72 0 176 183 0 192 206 16 11 178 0 8 12 0 48 81 136 133 41 0 4 123 0 96 200 35 35 120 0 132 153 0 20 70 242 87 60 241 43 174 16 231 42 0 0 120 153 178 60 185 36 57 69 129 91 8 45 113 7 87 87 46 30 40 206 73 23 43 20 54 97 2 97 154 64 46 194 121 153 25 50 129 52 15 224 243 204 0 0 160 145 21 17 224 131 243 253 120 206 14 174 206 206 54 142 182 14 95 45 234 191 6 255 34 98 98 227 254 229 207 171 112 64 0 0 225 116 126 209 254 44 47 179 26 128 59 6 128 109 254 162 37 238 4 104 94 11 160 117 247 139 102 178 15 64 181 0 160 233 218 87 243 112 248 126 60 60 69 161 144 185 217 217 229 228 228 216 74 196 66 91 97 202 87 125 254 103 194 95 192 87 253 108 249 126 60 252 247 245 224 190 226 36 129 50 93 129 71 4 248 224 194 204 244 76 165 28 207 146 9 132 98 220 230 143 71 252 183 11 255 252 29 211 34 196 73 98 185 88 42 20 227 81 18 113 142 68 154 140 243 50 165 34 137 66 146 41 197 37 210 255 100 226 223 44 251 3 62 223 53 0 176 106 62 1 123 145 45 168 93 99 3 246 75 39 16 88 116 192 226 247 0 0 242 187 111 193 212 40 8 3 128 104 131 225 207 119 255 239 63 253 71 160 37 0 128 102 73 146 113 0 0 94 68 36 46 84 202 179 63 199 8 0 0 68 160 129 42 176 65 27 244 193 24 44 192 6 28 193 5 220 193 11 252 96 54 132 66 36 196 194 66 16 66 10 100 128 28 114 96 41 172 130 66 40 134 205 176 29 42 96 47 212 64 29 52 192 81 104 134 147 112 14 46 194 85 184 14 61 112 15 250 97 8 158 193 40 188 129 9 4 65 200 8 19 97 33 218 136 1 98 138 88 35 142 8 23 153 133 248 33 193 72 4 18 139 36 32 201 136 20 81 34 75 145 53 72 49 82 138 84 32 85 72 29 242 61 114 2 57 135 92 70 186 145 59 200 0 50 130 252 134 188 71 49 148 129 178 81 61 212 12 181 67 185 168 55 26 132 70 162 11 208 100 116 49 154 143 22 160 155 208 114 180 26 61 140 54 161 231 208 171 104 15 218 143 62 67 199 48 192 232 24 7 51 196 108 48 46 198 195 66 177 56 44 9 147 99 203 177 34 172 12 171 198 26 176 86 172 3 187 137 245 99 207 177 119 4 18 129 69 192 9 54 4 119 66 32 97 30 65 72 88 76 88 78 216 72 168 32 28 36 52 17 218 9 55 9 3 132 81 194 39 34 147 168 75 180 38 186 17 249 196 24 98 50 49 135 88 72 44 35 214 18 143 19 47 16 123 136 67 196 55 36 18 137 67 50 39 185 144 2 73 177 164 84 210 18 210 70 210 110 82 35 233 44 169 155 52 72 26 35 147 201 218 100 107 178 7 57 148 44 32 43 200 133 228 157 228 195 228 51 228 27 228 33 242 91 10 157 98 64 113 164 248 83 226 40 82 202 106 74 25 229 16 229 52 229 6 101 152 50 65 85 163 154 82 221 168 161 84 17 53 143 90 66 173 161 182 82 175 81 135 168 19 52 117 154 57 205 131 22 73 75 165 173 162 149 211 26 104 23 104 247 105 175 232 116 186 17 221 149 30 78 151 208 87 210 203 233 71 232 151 232 3 244 119 12 13 134 21 131 199 136 103 40 25 155 24 7 24 103 25 119 24 175 152 76 166 25 211 139 25 199 84 48 55 49 235 152 231 153 15 153 111 85 88 42 182 42 124 21 145 202 10 149 74 149 38 149 27 42 47 84 169 170 166 170 222 170 11 85 243 85 203 84 143 169 94 83 125 174 70 85 51 83 227 169 9 212 150 171 85 170 157 80 235 83 27 83 103 169 59 168 135 170 103 168 111 84 63 164 126 89 253 137 6 89 195 76 195 79 67 164 81 160 177 95 227 188 198 32 11 99 25 179 120 44 33 107 13 171 134 117 129 53 196 38 177 205 217 124 118 42 187 152 253 29 187 139 61 170 169 161 57 67 51 74 51 87 179 82 243 148 102 63 7 227 152 113 248 156 116 78 9 231 40 167 151 243 126 138 222 20 239 41 226 41 27 166 52 76 185 49 101 92 107 170 150 151 150 88 171 72 171 81 171 71 235 189 54 174 237 167 157 166 189 69 187 89 251 129 14 65 199 74 39 92 39 71 103 143 206 5 157 231 83 217 83 221 167 10 167 22 77 61 58 245 174 46 170 107 165 27 161 187 68 119 191 110 167 238 152 158 190 94 128 158 76 111 167 222 121 189 231 250 28 125 47 253 84 253 109 250 167 245 71 12 88 6 179 12 36 6 219 12 206 24 60 197 53 113 111 60 29 47 199 219 241 81 67 93 195 64 67 165 97 149 97 151 225 132 145 185 209 60 163 213 70 141 70 15 140 105 198 92 227 36 227 109 198 109 198 163 38 6 38 33 38 75 77 234 77 238 154 82 77 185 166 41 166 59 76 59 76 199 205 204 205 162 205 214 153 53 155 61 49 215 50 231 155 231 155 215 155 223 183 96 90 120 90 44 182 168 182 184 101 73 178 228 90 166 89 238 182 188 110 133 90 57 89 165 88 85 90 93 179 70 173 157 173 37 214 187 173 187 167 17 167 185 78 147 78 171 158 214 103 195 176 241 182 201 182 169 183 25 176 229 216 6 219 174 182 109 182 125 97 103 98 23 103 183 197 174 195 238 147 189 147 125 186 125 141 253 61 7 13 135 217 14 171 29 90 29 126 115 180 114 20 58 86 58 222 154 206 156 238 63 125 197 244 150 233 47 103 88 207 16 207 216 51 227 182 19 203 41 196 105 157 83 155 211 71 103 23 103 185 115 131 243 136 139 137 75 130 203 46 151 62 46 155 27 198 221 200 189 228 74 116 245 113 93 225 122 210 245 157 155 179 155 194 237 168 219 175 238 54 238 105 238 135 220 159 204 52 159 41 158 89 51 115 208 195 200 67 224 81 229 209 63 11 159 149 48 107 223 172 126 79 67 79 129 103 181 231 35 47 99 47 145 87 173 215 176 183 165 119 170 247 97 239 23 62 246 62 114 159 227 62 227 60 55 222 50 222 89 95 204 55 192 183 200 183 203 79 195 111 158 95 133 223 67 127 35 255 100 255 122 255 209 0 167 128 37 1 103 3 137 129 65 129 91 2 251 248 122 124 33 191 142 63 58 219 101 246 178 217 237 65 140 160 185 65 21 65 143 130 173 130 229 193 173 33 104 200 236 144 173 33 247 231 152 206 145 206 105 14 133 80 126 232 214 208 7 97 230 97 139 195 126 12 39 133 135 133 87 134 63 142 112 136 88 26 209 49 151 53 119 209 220 67 115 223 68 250 68 150 68 222 155 103 49 79 57 175 45 74 53 42 62 170 46 106 60 218 55 186 52 186 63 198 46 102 89 204 213 88 157 88 73 108 75 28 57 46 42 174 54 110 108 190 223 252 237 243 135 226 157 226 11 227 123 23 152 47 200 93 112 121 161 206 194 244 133 167 22 169 46 18 44 58 150 64 76 136 78 56 148 240 65 16 42 168 22 140 37 242 19 119 37 142 10 121 194 29 194 103 34 47 209 54 209 136 216 67 92 42 30 78 242 72 42 77 122 146 236 145 188 53 121 36 197 51 165 44 229 185 132 39 169 144 188 76 13 76 221 155 58 158 22 154 118 32 109 50 61 58 189 49 131 146 145 144 113 66 170 33 77 147 182 103 234 103 230 102 118 203 172 101 133 178 254 197 110 139 183 47 30 149 7 201 107 179 144 172 5 89 45 10 182 66 166 232 84 90 40 215 42 7 178 103 101 87 102 191 205 137 202 57 150 171 158 43 205 237 204 179 202 219 144 55 156 239 159 255 237 18 194 18 225 146 182 165 134 75 87 45 29 88 230 189 172 106 57 178 60 113 121 219 10 227 21 5 43 134 86 6 172 60 184 138 182 42 109 213 79 171 237 87 151 174 126 189 38 122 77 107 129 94 193 202 130 193 181 1 107 235 11 85 10 229 133 125 235 220 215 237 93 79 88 47 89 223 181 97 250 134 157 27 62 21 137 138 174 20 219 23 151 21 127 216 40 220 120 229 27 135 111 202 191 153 220 148 180 169 171 196 185 100 207 102 210 102 233 230 222 45 158 91 14 150 170 151 230 151 14 110 13 217 218 180 13 223 86 180 237 245 246 69 219 47 151 205 40 219 187 131 182 67 185 163 191 60 184 188 101 167 201 206 205 59 63 84 164 84 244 84 250 84 54 238 210 221 181 97 215 248 110 209 238 27 123 188 246 52 236 213 219 91 188 247 253 62 201 190 219 85 1 85 77 213 102 213 101 251 73 251 179 247 63 174 137 170 233 248 150 251 109 93 173 78 109 113 237 199 3 210 3 253 7 35 14 182 215 185 212 213 29 210 61 84 82 143 214 43 235 71 14 199 31 190 254 157 239 119 45 13 54 13 85 141 156 198 226 35 112 68 121 228 233 247 9 223 247 30 13 58 218 118 140 123 172 225 7 211 31 118 29 103 29 47 106 66 154 242 154 70 155 83 154 251 91 98 91 186 79 204 62 209 214 234 222 122 252 71 219 31 15 156 52 60 89 121 74 243 84 201 105 218 233 130 211 147 103 242 207 140 157 149 157 125 126 46 249 220 96 219 162 182 123 231 99 206 223 106 15 111 239 186 16 116 225 210 69 255 139 231 59 188 59 206 92 242 184 116 242 178 219 229 19 87 184 87 154 175 58 95 109 234 116 234 60 254 147 211 79 199 187 156 187 154 174 185 92 107 185 238 122 189 181 123 102 247 233 27 158 55 206 221 244 189 121 241 22 255 214 213 158 57 61 221 189 243 122 111 247 197 247 245 223 22 221 126 114 39 253 206 203 187 217 119 39 238 173 188 79 188 95 244 64 237 65 217 67 221 135 213 63 91 254 220 216 239 220 127 106 192 119 160 243 209 220 71 247 6 133 131 207 254 145 245 143 15 67 5 143 153 143 203 134 13 134 235 158 56 62 57 57 226 63 114 253 233 252 167 67 207 100 207 38 158 23 254 162 254 203 174 23 22 47 126 248 213 235 215 206 209 152 209 161 151 242 151 147 191 109 124 165 253 234 192 235 25 175 219 198 194 198 30 190 201 120 51 49 94 244 86 251 237 193 119 220 119 29 239 163 223 15 79 228 124 32 127 40 255 104 249 177 245 83 208 167 251 147 25 147 147 255 4 3 152 243 252 99 51 45 219 0 0 0 4 103 65 77 65 0 0 177 142 124 251 81 147 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 233 0 0 117 48 0 0 234 96 0 0 58 152 0 0 23 111 146 95 197 70 0 0 46 69 73 68 65 84 120 218 236 157 121 180 93 87 125 223 63 191 189 207 57 247 190 73 227 147 44 89 30 49 198 51 49 56 97 106 72 12 110 40 109 200 80 64 1 146 54 33 36 132 196 144 52 165 93 45 29 76 147 176 218 210 180 73 211 216 56 109 154 38 172 182 9 20 155 12 224 36 36 33 53 33 20 108 21 83 176 45 207 147 100 13 150 222 147 158 158 222 116 207 176 247 175 127 236 125 238 57 247 234 201 22 198 146 245 164 119 215 58 235 220 233 221 119 239 249 126 247 111 255 230 159 168 42 171 183 179 247 102 86 47 193 42 1 86 111 171 4 88 189 157 173 183 228 133 254 192 222 199 46 56 193 119 42 104 125 56 131 186 237 234 221 219 240 213 229 168 191 6 218 186 137 12 253 173 12 61 117 130 175 139 128 152 251 16 251 144 136 249 52 98 110 67 140 111 222 47 167 61 96 221 247 239 62 189 9 112 226 192 123 212 87 111 192 229 183 80 245 174 164 42 144 45 215 98 183 188 18 89 123 49 248 170 121 111 125 22 15 94 65 52 156 85 1 15 170 104 235 115 195 251 253 192 255 10 127 175 232 252 51 215 248 153 199 175 209 35 79 110 199 102 159 196 166 15 136 36 31 193 216 79 246 73 178 42 1 78 22 246 1 48 117 229 85 84 189 47 80 206 79 154 11 223 128 189 246 189 36 151 191 29 36 9 96 249 10 180 138 192 185 120 120 112 241 220 127 45 156 189 171 90 239 169 64 92 56 171 67 219 175 121 7 120 44 32 197 2 110 223 93 184 221 127 117 165 30 122 228 19 98 59 55 99 211 235 193 236 12 36 144 85 2 188 224 224 171 67 171 222 199 40 230 110 52 231 191 158 228 141 255 30 187 229 58 20 143 150 57 84 71 33 63 140 230 115 224 10 112 57 248 60 236 6 234 91 171 26 180 6 85 125 220 45 124 235 113 35 25 16 223 250 123 237 75 33 21 131 57 231 21 216 173 223 129 59 252 8 254 145 63 156 244 51 79 220 47 73 231 86 76 250 254 149 178 37 124 171 55 121 161 253 0 203 234 0 170 160 21 90 46 30 162 119 116 67 250 119 126 147 228 218 247 6 220 170 30 44 29 66 23 158 129 222 225 120 209 107 208 90 64 70 0 85 34 200 62 62 39 173 215 125 216 206 195 138 143 160 211 190 223 218 14 20 180 6 89 18 72 82 252 174 59 113 143 253 41 130 30 198 166 27 193 156 118 91 194 202 211 1 84 193 87 104 185 48 37 232 134 238 207 61 141 142 159 135 250 10 138 57 116 230 17 200 143 6 144 164 181 82 213 135 189 94 21 237 175 236 33 48 137 160 183 247 126 191 140 20 104 233 3 218 214 13 188 143 95 50 7 111 49 219 94 139 172 187 132 234 171 55 111 16 87 78 97 210 77 167 35 9 86 142 25 216 95 249 11 211 130 78 118 223 251 0 140 159 23 246 226 185 167 209 253 59 160 119 164 175 160 13 236 249 56 212 87 168 47 131 78 224 171 70 63 240 21 84 241 236 93 163 51 248 214 115 218 122 205 59 52 30 168 3 95 70 253 33 190 238 10 40 151 160 152 67 186 107 72 174 123 31 138 78 226 171 233 70 17 93 37 192 243 0 223 163 85 239 54 17 187 177 251 190 71 96 205 249 97 85 78 223 139 30 122 40 44 121 37 2 21 192 168 65 215 97 48 181 2 95 52 32 83 191 94 12 18 161 79 134 240 153 170 225 24 120 94 181 249 159 3 68 40 161 88 68 210 53 36 175 248 73 84 216 136 175 190 56 104 146 174 18 224 196 205 61 95 92 79 62 251 246 244 251 62 14 227 91 195 179 207 124 29 157 219 23 222 226 171 214 106 111 131 222 62 138 214 106 247 203 172 118 223 122 28 86 184 246 129 175 134 86 187 107 222 171 45 41 209 191 95 6 197 211 45 33 217 90 146 75 127 0 117 197 235 81 127 253 153 42 5 146 147 183 250 29 90 46 222 105 47 223 142 189 244 7 194 211 51 143 161 243 79 7 165 203 187 72 147 229 180 247 65 197 111 96 175 63 102 95 247 125 135 146 210 218 70 134 124 14 131 127 171 67 190 2 63 248 92 229 192 56 100 221 197 200 250 151 160 179 187 239 20 107 228 76 180 10 204 201 90 253 234 138 15 144 47 146 125 255 239 69 61 235 40 58 245 13 80 105 86 232 192 254 62 188 178 135 159 115 131 175 199 21 61 184 218 235 149 173 205 138 239 63 87 182 86 251 176 222 208 210 13 250 255 167 64 171 69 236 133 55 132 173 65 253 47 157 137 91 129 57 41 162 95 61 84 189 155 237 117 63 3 198 6 105 191 239 174 232 188 107 237 185 234 150 81 234 150 1 123 24 172 190 82 87 181 148 58 55 8 250 192 217 69 179 209 29 67 160 6 124 215 183 18 84 61 234 92 80 14 147 12 51 121 37 120 119 211 153 184 13 36 39 3 127 124 181 153 106 137 228 85 63 31 158 154 219 141 95 154 70 76 26 57 231 150 55 235 158 195 132 67 253 50 46 223 150 232 30 118 255 46 231 30 110 187 150 105 30 107 123 107 232 155 137 225 190 108 188 12 127 248 33 132 228 6 224 47 87 9 240 92 226 223 87 191 40 217 56 102 195 203 194 51 7 239 69 144 6 116 175 131 14 28 252 113 246 234 33 63 63 173 253 93 135 193 109 61 63 160 27 28 135 20 53 232 44 167 19 12 146 64 198 207 129 116 28 124 241 86 48 127 121 38 249 5 78 130 4 240 224 203 239 52 47 125 75 120 232 122 248 197 131 205 234 175 47 174 95 78 153 107 131 165 81 65 60 222 106 63 142 82 119 60 233 209 2 56 72 242 227 0 62 32 5 60 56 15 20 152 137 45 232 145 93 223 117 166 233 129 39 129 0 10 190 186 218 156 251 218 240 120 230 177 214 106 173 26 146 28 179 250 99 160 72 181 81 182 85 130 131 8 19 61 131 241 243 37 186 139 125 75 49 247 77 196 15 95 123 21 105 233 109 181 152 247 131 0 31 35 5 134 183 8 64 12 146 142 226 213 95 45 125 151 229 42 1 158 197 254 175 48 219 2 1 116 118 23 82 59 94 68 79 192 132 211 160 56 38 41 96 7 193 24 8 1 123 176 218 104 253 86 155 24 129 141 251 183 169 93 191 117 148 48 143 238 95 191 204 106 31 38 71 203 3 232 74 24 61 7 216 185 170 4 158 0 1 174 69 61 140 110 12 11 115 126 31 82 251 245 253 224 10 211 229 148 51 12 88 75 121 199 251 32 237 130 216 227 248 226 151 121 238 120 123 179 42 184 156 228 213 31 108 124 10 199 219 2 142 217 50 106 82 187 90 156 124 27 240 141 85 2 28 255 230 6 86 79 49 7 73 55 136 229 1 165 110 25 229 173 191 186 59 144 142 32 217 248 23 48 246 14 96 52 48 225 121 124 23 88 68 221 91 84 228 250 190 14 162 238 4 116 0 215 108 33 102 32 30 224 86 37 192 115 27 130 173 71 174 241 250 201 9 40 117 98 195 10 53 22 140 189 3 147 252 202 183 252 141 60 32 230 122 104 217 253 195 128 31 199 2 232 235 18 125 197 2 191 74 128 19 184 245 245 56 31 220 170 33 157 203 47 179 218 135 164 128 33 120 237 16 64 70 143 43 238 191 41 62 202 104 8 60 181 60 129 203 105 252 245 42 175 211 206 68 91 150 101 127 225 231 171 158 192 111 74 8 151 131 46 218 118 20 206 187 99 163 115 181 59 54 220 236 11 42 149 234 148 50 239 7 201 224 93 48 247 106 83 84 124 63 138 168 190 101 158 134 219 79 14 153 23 171 4 120 110 191 192 9 248 229 107 119 175 139 228 120 97 157 45 99 125 89 222 119 70 249 198 206 175 51 139 104 128 111 252 18 45 98 132 223 243 33 188 119 120 127 253 16 49 86 9 176 252 254 91 182 64 126 22 191 124 95 87 112 129 4 47 196 162 15 98 254 63 129 126 168 17 4 218 74 42 109 3 239 155 213 222 62 124 43 27 41 90 3 50 178 222 168 235 221 137 47 111 91 233 36 56 137 41 97 210 82 2 203 160 212 45 151 155 183 140 155 86 181 250 214 246 253 58 28 173 254 144 160 27 26 77 206 52 78 35 105 123 4 117 144 52 199 88 6 38 90 49 138 106 65 250 170 15 226 167 31 164 250 218 111 188 93 210 145 105 76 54 137 172 204 212 177 83 176 5 196 21 238 158 45 10 231 90 81 184 150 184 125 254 158 72 180 92 154 18 155 109 48 47 121 51 234 138 240 153 70 226 91 90 255 167 237 141 244 203 184 131 105 91 1 132 72 100 57 143 189 232 6 210 55 254 50 10 27 113 197 212 96 214 241 42 1 154 5 236 170 101 1 175 143 26 248 198 60 171 15 121 158 224 151 104 57 63 37 194 100 247 253 187 49 23 222 16 178 124 84 3 1 140 180 220 202 67 46 103 137 206 36 99 163 219 33 9 103 99 2 137 196 132 63 42 115 180 152 67 70 55 144 190 246 159 161 162 147 43 149 4 201 73 5 31 154 85 95 251 232 105 69 226 124 189 202 60 98 226 125 163 64 197 55 109 254 245 193 95 152 18 152 236 222 248 84 120 190 156 11 223 193 38 24 107 81 155 128 5 197 208 207 73 172 22 161 92 66 123 135 3 1 22 15 131 128 47 230 162 11 91 16 49 136 152 192 25 45 161 90 10 233 106 35 27 72 94 253 79 168 238 250 229 73 241 197 20 38 91 81 153 196 167 32 45 60 42 117 150 102 207 141 123 48 70 145 58 189 155 182 216 117 223 2 248 58 217 189 113 55 116 214 134 215 122 71 27 50 37 29 116 233 0 58 191 11 242 121 180 42 240 11 177 22 65 5 169 43 130 226 89 162 91 122 200 163 212 87 12 213 85 64 129 140 172 39 121 245 63 164 186 251 215 38 197 175 172 116 242 83 162 3 120 117 33 195 166 22 253 226 16 194 209 23 249 210 58 250 18 224 249 128 191 11 70 54 196 127 189 24 87 181 1 177 248 125 95 132 153 123 225 200 35 248 222 65 168 142 98 58 41 38 77 145 52 5 155 130 137 98 95 12 24 83 23 148 182 192 12 91 136 106 21 182 55 151 67 181 132 116 214 145 124 199 251 81 152 196 151 43 102 59 48 39 95 0 120 164 149 235 223 7 94 134 192 103 248 120 62 224 63 5 35 33 8 165 11 251 97 225 96 220 231 227 202 206 70 33 29 133 212 98 82 139 164 17 228 196 4 204 173 130 149 230 253 44 83 35 40 177 44 205 59 144 152 149 92 21 80 46 6 18 188 226 167 98 77 65 57 213 100 28 157 213 18 96 16 124 158 5 124 17 135 72 133 225 4 204 192 101 193 159 12 47 205 239 65 231 167 2 80 173 248 189 73 59 144 6 29 0 3 24 65 146 168 219 217 160 32 138 137 238 104 243 28 206 173 190 19 169 149 191 88 45 34 157 53 36 223 246 227 65 18 184 106 234 116 247 26 158 68 2 72 127 11 16 252 179 130 31 128 31 126 253 121 130 127 116 55 58 127 32 124 78 109 89 72 208 61 52 201 144 36 69 172 31 4 218 106 120 28 137 33 73 124 204 114 216 213 181 139 110 232 168 162 36 136 53 5 215 252 125 84 152 196 149 83 141 89 121 22 74 128 0 108 25 2 66 67 123 190 48 4 124 31 252 182 4 144 103 7 255 167 159 108 129 255 52 186 120 48 198 255 99 86 175 106 163 237 167 89 216 231 37 68 25 164 6 222 196 199 70 195 54 16 137 17 182 132 101 176 235 23 163 184 65 87 119 93 186 86 45 66 54 129 189 226 93 193 68 244 167 47 9 78 65 139 152 186 209 67 11 224 122 197 203 113 164 130 248 19 51 245 126 250 73 24 219 20 193 223 133 46 28 136 226 185 21 128 146 86 82 135 237 32 169 13 77 65 250 171 63 2 95 63 54 28 67 138 134 4 125 231 70 16 255 226 143 241 107 160 85 112 41 87 57 210 29 199 94 190 29 85 38 241 229 193 211 145 4 167 128 0 14 164 28 220 231 135 181 127 124 56 91 7 198 135 99 88 1 59 6 252 39 26 240 103 159 66 23 14 134 207 211 225 186 2 223 199 223 36 9 216 164 15 114 159 8 150 96 146 182 182 133 99 238 15 89 1 125 239 230 64 159 130 232 212 170 235 24 203 37 36 157 192 94 246 131 168 178 9 95 30 24 72 150 57 123 36 64 112 183 54 122 128 31 52 251 226 170 23 162 66 230 139 58 1 72 151 5 255 103 134 192 95 60 216 116 16 169 67 189 181 72 110 55 133 72 186 136 77 81 235 193 250 190 210 119 204 138 95 142 4 210 206 47 245 131 192 199 8 166 30 19 72 170 192 231 72 58 134 189 244 123 145 108 205 102 124 169 160 155 78 23 18 156 18 9 160 56 196 84 205 54 208 95 245 225 8 123 111 116 186 44 60 132 223 255 185 58 23 176 108 245 23 56 24 192 127 28 70 107 240 159 108 192 31 168 24 110 87 12 181 146 80 146 96 5 24 19 149 64 27 61 143 134 103 95 253 102 72 37 233 131 91 155 131 62 74 247 101 162 137 174 8 36 200 198 49 47 121 19 146 142 131 47 15 130 78 158 14 36 56 37 18 192 212 149 64 54 6 94 250 122 128 6 201 106 4 122 207 224 15 254 25 44 62 134 88 79 244 215 46 6 240 231 247 9 108 10 224 111 14 120 30 169 87 126 91 1 243 131 253 128 212 53 65 28 20 147 118 163 18 232 251 34 63 0 28 73 32 67 10 32 237 45 192 55 122 128 14 6 146 212 13 91 5 195 36 168 160 204 1 135 185 248 6 36 29 3 95 77 157 14 36 56 105 4 208 190 21 16 87 186 241 173 61 63 186 128 69 65 28 254 200 14 56 250 85 140 41 33 177 253 252 79 85 55 163 213 226 23 68 204 214 65 240 159 64 23 159 137 153 60 173 254 1 67 5 161 234 202 102 11 80 130 18 104 83 36 241 173 213 63 68 130 214 138 151 68 151 247 7 181 3 89 190 110 83 211 62 150 33 3 177 17 133 247 152 11 223 128 100 167 7 9 78 126 62 128 196 156 64 149 190 61 30 52 110 11 197 1 252 236 215 49 120 72 146 190 115 38 228 248 43 184 226 195 244 142 190 36 123 223 67 13 248 243 251 209 197 3 173 22 47 126 112 197 71 0 84 227 255 104 167 118 167 93 40 179 254 182 19 106 13 67 166 112 147 251 25 244 2 69 194 46 101 20 149 58 62 160 125 51 176 95 100 210 79 102 97 25 34 232 192 119 234 135 149 141 32 231 255 13 252 174 47 33 213 226 20 38 217 132 50 253 98 196 14 78 141 21 160 65 228 134 11 15 136 226 143 126 3 102 239 193 24 32 181 209 19 87 139 219 152 35 88 204 191 36 125 221 63 199 108 188 44 70 246 230 241 179 79 68 101 207 181 246 252 193 252 62 29 120 174 209 1 196 142 6 95 64 109 105 244 237 254 150 36 136 162 127 80 15 240 45 9 32 17 252 54 225 218 224 87 67 146 96 176 147 153 106 137 86 33 63 193 94 240 90 52 29 5 239 94 52 73 112 106 8 208 55 1 5 220 60 254 208 87 48 197 254 96 146 217 224 143 151 26 124 27 27 58 186 28 49 29 146 235 255 117 95 243 214 35 143 35 126 184 65 84 99 250 133 94 1 213 32 57 226 69 85 20 210 81 196 116 90 126 128 26 248 214 125 169 191 67 212 9 132 99 3 123 134 99 237 255 254 227 227 40 131 212 38 98 140 118 186 96 162 218 109 223 129 166 35 47 26 9 78 1 1 60 106 124 208 242 171 25 252 204 221 24 22 131 198 31 197 125 179 7 75 88 153 18 226 237 201 119 222 212 132 97 123 135 241 75 51 17 248 99 179 139 116 184 217 131 139 186 0 109 43 160 11 54 72 0 137 225 232 126 88 122 128 16 67 58 129 44 211 138 214 166 141 87 48 54 160 108 76 194 225 253 191 213 233 140 150 116 136 58 138 221 242 202 65 18 156 66 103 209 201 39 128 241 24 49 176 180 15 127 100 71 232 23 145 152 198 238 22 105 128 16 13 22 192 188 66 185 68 114 221 141 209 144 168 208 185 189 161 196 172 6 181 213 100 66 7 86 224 80 162 105 59 223 207 142 130 237 52 160 183 255 247 241 72 208 164 7 208 127 32 22 76 130 164 221 126 188 35 184 158 151 81 8 137 161 227 99 234 33 35 25 170 18 240 216 45 215 6 18 168 78 1 147 103 14 1 196 64 190 15 63 119 63 198 196 208 91 91 172 182 1 176 193 65 84 30 132 228 234 119 132 240 173 47 193 45 226 23 15 182 148 176 86 46 225 114 153 197 218 146 2 125 37 208 67 50 6 73 22 127 181 143 146 128 65 2 154 70 235 239 191 102 235 34 145 0 190 63 120 31 98 83 48 41 210 153 8 191 169 246 113 184 58 74 168 45 177 15 131 157 76 93 191 89 101 163 125 10 118 203 43 66 62 130 114 202 72 112 210 163 129 38 223 131 159 221 25 180 252 196 68 243 107 25 240 37 72 11 172 226 15 43 114 206 43 226 214 95 161 189 25 196 187 193 46 97 218 234 251 215 78 59 239 63 142 43 206 72 29 196 15 77 30 204 104 248 102 118 248 127 15 110 9 180 36 64 251 55 137 73 254 157 78 237 196 63 246 39 33 183 32 201 144 88 8 75 85 54 233 111 237 61 95 219 149 205 181 115 33 38 157 84 75 232 220 94 244 192 125 248 167 191 220 138 94 50 5 108 90 241 102 160 63 186 27 70 71 49 181 41 85 43 87 195 224 139 7 107 208 133 12 116 9 123 201 155 226 245 114 232 210 225 198 254 198 55 192 59 63 24 246 109 3 47 138 24 131 30 217 21 253 184 30 236 4 216 145 112 253 81 212 212 101 228 32 94 66 235 88 163 161 138 189 150 2 6 212 107 35 185 196 124 84 108 246 121 55 245 224 95 128 16 26 97 244 144 137 109 232 209 167 193 229 209 74 32 150 195 211 50 129 9 251 94 57 135 206 237 195 47 29 10 65 163 160 1 199 126 74 3 78 135 131 156 228 102 4 201 201 65 190 101 51 27 48 198 68 51 79 27 51 111 24 124 99 192 164 225 98 235 28 172 187 32 196 4 212 67 185 24 247 126 137 93 67 90 69 36 222 13 150 122 5 239 19 216 140 242 158 143 225 247 221 29 190 132 171 192 140 130 25 137 225 96 31 240 49 49 89 213 212 94 94 105 238 215 34 218 182 188 91 34 27 16 251 121 73 58 111 117 83 15 252 62 40 230 101 63 24 128 92 127 17 238 240 99 72 149 199 236 99 211 74 33 232 161 243 211 248 217 93 224 10 196 152 152 115 152 182 124 38 44 135 247 33 96 227 74 218 2 166 251 75 167 254 61 117 198 111 203 172 106 148 171 58 34 23 98 245 238 72 200 30 53 35 27 155 246 176 209 110 214 97 187 127 184 219 103 63 85 203 82 125 245 86 252 83 127 133 217 246 157 152 45 223 142 217 114 109 168 17 77 38 226 175 182 33 64 53 144 253 165 131 71 36 107 223 69 28 110 99 81 17 252 3 73 58 219 221 212 3 248 71 63 3 217 8 216 12 187 241 50 52 237 196 196 87 129 252 8 58 253 32 110 215 255 65 103 30 67 212 5 253 161 78 69 170 243 13 143 223 162 126 3 240 145 21 36 1 100 63 198 160 135 30 129 181 231 15 72 53 105 93 228 190 127 93 98 183 110 147 52 201 26 3 78 36 133 98 6 197 182 58 129 183 163 125 237 251 30 196 80 61 250 89 252 238 47 145 188 230 253 164 55 220 50 232 160 54 27 193 100 96 210 216 255 199 135 173 194 19 211 191 91 226 191 190 79 200 105 137 223 237 190 190 148 193 222 46 73 119 187 59 120 255 109 32 152 43 222 14 190 196 158 115 45 126 215 23 241 251 119 160 229 2 144 6 229 83 204 80 94 193 9 223 254 37 112 211 202 32 64 4 84 143 60 6 220 16 193 119 45 176 227 170 175 119 10 99 35 32 9 72 26 99 5 52 218 190 122 188 73 17 95 4 52 124 217 114 177 186 193 0 80 108 44 101 47 126 51 50 183 143 242 43 31 195 108 222 138 189 112 18 242 60 248 163 150 158 134 100 60 74 128 218 130 136 223 73 108 171 64 100 240 240 165 89 254 183 98 111 151 164 179 221 29 188 239 54 140 193 188 244 77 176 176 15 25 95 15 135 20 241 26 66 27 18 21 81 149 232 23 144 99 211 5 159 157 23 191 8 252 171 21 176 5 24 176 233 3 238 209 59 162 0 187 38 138 90 237 139 89 17 137 23 156 104 83 7 187 26 147 96 55 71 219 186 88 140 37 2 14 99 210 166 153 115 123 213 15 153 124 90 231 229 249 37 204 53 63 134 189 224 117 228 127 120 19 238 238 143 192 161 91 224 153 95 133 195 159 10 230 160 100 145 112 38 184 168 165 169 14 106 111 11 245 78 166 185 32 194 3 199 142 39 18 144 228 118 73 186 63 228 14 220 71 117 207 239 160 190 68 198 214 146 92 249 119 145 241 181 136 41 66 0 42 1 178 32 16 36 213 112 216 86 184 249 217 19 134 62 188 50 116 0 17 48 217 173 254 241 63 14 15 55 189 22 40 90 43 203 55 108 151 36 136 98 147 4 97 36 105 60 27 220 190 175 54 13 57 146 172 85 101 236 134 28 61 65 10 40 173 128 80 89 64 181 128 189 250 71 2 9 118 204 224 246 26 24 89 15 233 68 244 8 218 166 4 44 54 130 104 72 217 54 7 61 190 103 235 213 121 235 241 165 158 189 77 108 231 74 205 143 224 30 254 139 64 176 238 40 246 242 119 32 163 235 80 114 36 169 16 227 67 46 98 157 111 88 147 33 81 36 121 78 34 220 176 2 36 128 32 198 222 74 210 197 61 249 5 56 247 7 226 15 10 38 156 32 173 237 192 54 71 148 2 230 220 53 128 69 159 185 167 113 176 100 19 131 197 165 109 224 125 93 207 223 146 14 90 130 235 65 181 136 189 106 59 246 188 87 146 223 189 31 183 167 7 157 58 49 52 141 255 187 46 4 137 82 64 91 82 32 234 138 126 54 169 73 114 235 179 111 125 230 65 49 233 164 22 115 84 247 253 17 104 134 140 142 97 174 126 55 50 182 14 161 23 72 144 104 224 121 162 13 25 146 224 155 144 100 72 34 12 222 222 186 50 36 128 88 37 233 60 88 237 248 53 100 227 223 137 23 179 106 44 129 216 123 175 209 132 35 16 88 208 4 187 117 29 238 169 59 17 9 225 92 233 172 11 141 165 251 85 198 205 44 128 65 207 90 59 14 224 226 16 136 121 236 101 223 143 61 247 106 242 29 251 113 123 150 32 75 98 125 64 140 71 212 54 254 240 21 49 138 86 130 159 51 181 248 215 231 254 237 230 144 152 116 147 246 142 80 221 243 73 196 165 152 238 26 236 183 221 136 140 111 68 201 65 106 73 224 251 63 187 77 4 73 107 37 249 24 18 124 215 202 240 4 138 65 108 182 221 239 250 51 116 102 15 92 242 211 33 192 83 139 127 163 117 156 117 176 12 139 64 132 228 194 141 184 7 63 11 197 66 63 240 98 58 19 177 202 215 181 146 47 135 39 138 69 165 176 159 173 91 151 110 45 96 95 246 189 152 45 87 145 239 120 38 144 160 174 10 234 87 134 12 109 3 177 70 160 218 159 213 43 242 35 39 190 0 204 180 216 116 147 246 14 81 220 245 59 120 77 144 238 58 204 181 255 20 25 155 68 204 34 98 203 129 85 95 111 9 125 34 164 52 210 160 33 193 213 43 132 0 128 73 118 146 142 60 152 127 234 205 200 165 255 38 250 194 163 46 160 210 178 129 227 129 233 59 79 236 69 155 65 18 170 187 127 53 232 8 94 97 108 75 204 194 173 98 93 94 121 108 103 145 129 145 48 45 233 224 98 235 247 75 223 132 217 122 57 249 255 157 198 237 41 2 9 108 93 36 32 45 93 32 16 65 151 12 126 46 65 68 31 64 248 228 55 39 5 205 180 216 108 82 151 166 40 191 112 51 226 45 102 100 2 123 221 47 34 99 231 160 210 67 140 11 161 105 91 115 63 90 12 182 169 73 24 216 18 86 78 44 64 162 20 232 92 175 243 123 40 63 255 111 225 234 95 69 40 194 254 108 164 113 126 72 139 12 26 237 228 137 81 146 43 46 160 184 235 102 164 90 10 31 55 126 46 36 93 188 143 145 55 209 38 20 59 144 120 225 26 255 123 63 91 55 22 137 84 75 216 139 255 38 102 203 101 228 95 155 193 237 43 99 124 162 246 78 213 17 193 224 32 42 30 31 169 227 1 111 120 158 91 225 33 108 150 233 226 126 242 207 253 34 62 119 72 103 13 230 213 55 99 214 94 132 72 9 169 14 42 133 118 80 26 244 73 0 39 37 74 124 114 27 68 24 123 80 146 238 7 170 123 127 19 63 119 21 108 184 174 201 8 110 27 217 109 50 96 192 9 217 171 94 6 121 78 181 227 99 136 205 192 123 100 211 213 177 46 191 106 229 228 183 6 76 214 29 198 150 205 214 141 36 112 139 216 139 190 27 179 249 165 228 95 95 196 237 247 80 119 177 151 38 80 213 123 120 60 42 180 124 0 225 224 243 187 8 117 155 25 23 127 151 135 116 12 186 91 145 245 151 131 117 81 23 112 144 12 18 225 152 243 202 146 0 173 216 185 77 62 70 214 249 116 241 153 119 81 233 123 160 179 62 38 130 12 214 226 55 33 132 232 155 31 31 33 125 221 213 20 95 250 15 184 189 59 80 147 64 58 134 89 247 146 56 76 178 158 5 164 131 237 230 158 53 91 55 38 97 184 37 236 69 175 199 76 94 68 126 111 142 219 15 164 26 14 160 247 192 56 218 51 136 209 79 3 31 123 126 216 123 240 110 35 229 82 33 99 231 147 189 253 55 145 205 47 133 108 18 125 232 195 112 224 15 67 117 114 210 2 122 40 49 181 246 17 4 9 160 43 141 0 13 9 196 166 111 39 237 220 94 222 249 17 242 255 39 80 52 97 225 101 135 60 171 66 229 73 95 115 37 246 156 205 228 191 255 99 232 194 84 216 86 214 93 130 140 110 14 182 254 128 36 104 210 195 150 207 214 213 70 98 212 219 193 5 175 195 76 94 72 190 83 113 83 6 114 67 190 115 2 205 45 98 244 118 132 183 63 175 189 55 36 174 76 106 185 48 45 227 231 210 253 161 223 194 172 89 143 164 155 224 225 127 129 76 127 22 178 46 36 18 86 125 162 81 244 7 203 160 191 13 180 72 112 178 148 128 83 144 18 86 147 192 110 39 77 126 195 247 50 122 223 152 160 122 42 129 204 247 53 225 16 183 143 166 143 247 224 20 74 79 231 93 111 66 80 138 207 252 4 226 138 240 89 147 87 35 227 155 99 144 168 28 152 53 220 23 249 117 234 152 91 46 65 211 7 73 80 45 97 207 251 118 204 198 243 40 30 204 232 221 59 129 15 43 255 215 16 182 127 75 224 23 11 83 50 113 62 221 119 254 15 24 95 15 102 19 250 240 7 97 250 14 232 140 32 137 233 155 128 68 147 144 62 17 180 149 176 10 146 248 186 119 230 193 21 72 128 22 9 68 110 148 132 55 168 8 229 110 75 239 175 21 183 191 12 160 103 64 42 173 237 33 42 121 137 101 228 221 111 65 22 246 144 255 254 15 35 85 176 36 100 242 42 100 116 83 180 6 170 152 170 237 135 130 69 44 147 170 237 7 199 196 209 195 94 112 29 178 126 91 104 249 98 220 175 35 250 15 191 117 240 47 160 251 195 159 132 177 13 144 156 3 143 252 44 50 125 7 210 201 66 237 67 34 173 10 228 161 172 228 86 182 178 36 10 222 212 169 141 95 92 161 4 104 73 120 225 11 98 16 18 126 73 43 40 238 47 232 125 126 134 226 174 67 184 61 243 248 195 75 208 181 208 77 32 139 23 234 220 141 116 223 183 29 202 3 228 119 188 7 113 85 148 4 87 70 18 228 173 188 192 33 160 253 113 170 117 124 43 175 144 37 146 139 174 69 38 182 129 119 63 7 250 125 223 244 158 27 38 165 76 106 49 63 37 107 46 164 251 163 159 13 166 171 61 23 30 254 25 152 254 35 200 130 23 178 201 128 118 113 245 107 159 8 3 36 136 250 65 171 109 226 173 47 56 36 167 100 120 244 241 20 228 176 223 127 64 149 15 227 117 19 190 54 237 66 23 49 169 203 169 107 169 96 52 212 217 77 108 163 243 230 91 66 244 207 149 248 131 223 64 231 247 14 86 112 14 103 225 246 19 54 163 100 240 117 129 104 12 84 165 2 73 74 245 240 215 209 165 105 196 152 237 136 220 126 194 224 187 8 254 186 139 232 190 251 78 72 215 0 93 120 228 61 112 240 119 193 142 135 56 71 157 65 92 71 33 85 80 111 194 244 19 47 33 33 197 197 179 7 85 67 181 39 69 189 32 6 89 121 195 163 159 77 26 4 123 249 22 81 110 193 96 81 249 46 48 223 173 170 215 75 72 138 212 129 200 43 120 212 86 186 176 255 149 189 219 223 70 250 61 255 17 25 219 138 76 94 25 230 252 205 239 15 158 69 109 247 251 111 181 132 173 19 52 125 93 170 230 99 137 154 11 0 96 176 235 151 168 22 5 84 110 3 182 35 220 126 98 224 207 77 201 250 75 232 254 196 93 32 99 225 171 63 249 15 224 200 31 65 119 75 136 250 212 1 43 95 6 207 168 47 192 249 152 38 96 250 151 165 158 138 163 6 116 214 160 174 111 145 112 230 72 128 19 145 14 199 16 70 251 129 37 173 242 103 128 115 210 55 126 20 153 216 10 101 15 157 186 31 157 223 119 172 36 168 139 72 234 246 116 253 202 100 69 140 11 146 37 49 144 239 135 185 157 96 44 229 254 110 208 73 205 241 72 80 151 175 149 147 90 28 157 146 117 151 210 125 239 189 205 203 15 188 17 242 199 192 76 196 8 39 131 243 141 125 17 59 169 231 209 127 97 26 73 224 36 254 76 67 249 196 72 224 175 132 56 218 11 45 1 12 167 227 237 184 141 186 154 188 124 73 58 91 68 152 42 239 252 16 58 251 116 184 66 27 47 107 41 134 67 211 65 181 1 223 215 53 133 117 162 74 93 252 113 244 177 80 165 148 65 122 97 30 249 35 183 161 188 109 121 240 139 73 45 142 78 153 245 151 210 105 131 255 232 247 130 223 15 157 115 32 91 11 217 24 36 35 173 163 27 143 14 216 110 112 119 227 99 9 154 135 36 56 167 252 116 138 86 130 8 183 178 242 28 65 39 147 32 49 148 108 187 155 5 153 46 255 234 38 116 110 111 224 199 134 75 145 145 201 216 31 168 206 24 138 187 135 86 193 57 212 111 88 209 234 244 189 184 23 180 136 137 33 96 50 79 118 201 82 208 51 188 220 142 242 11 45 189 5 92 177 81 139 163 83 102 195 101 116 126 242 222 6 159 39 126 16 220 30 232 76 70 240 71 33 109 131 30 15 219 13 69 42 54 139 213 74 54 102 70 135 136 160 159 177 84 135 210 58 42 248 254 147 117 41 87 38 1 154 128 11 216 206 38 129 233 242 175 63 130 30 221 27 37 193 165 200 200 134 70 18 224 6 10 52 140 52 36 8 114 94 96 254 241 65 19 84 21 233 120 186 151 47 34 214 163 78 254 21 202 39 98 183 146 49 45 230 166 205 198 203 233 252 196 215 155 239 244 212 219 192 237 131 238 230 208 169 180 6 63 237 198 163 19 87 253 208 97 58 177 96 69 144 68 209 28 202 189 221 26 252 205 39 243 50 174 92 2 44 71 130 175 124 20 157 219 31 94 90 255 50 100 100 125 108 218 228 6 235 247 250 224 71 255 127 57 23 246 98 107 162 94 16 235 23 80 24 113 116 95 62 139 233 56 212 241 78 117 254 83 90 230 243 102 242 26 58 239 105 129 191 235 135 192 237 135 238 36 100 227 45 224 71 154 251 181 216 79 178 214 202 143 29 74 109 26 114 20 10 161 120 112 77 208 5 12 239 68 152 90 37 192 9 145 32 219 36 200 116 121 215 175 160 243 207 4 211 110 227 165 208 93 23 36 65 173 129 215 205 169 235 158 196 2 44 237 143 21 202 218 132 133 235 28 125 23 238 119 94 126 20 211 245 104 169 219 181 87 208 249 241 29 67 224 239 133 206 198 152 114 54 22 64 207 70 155 213 223 6 63 201 26 208 109 39 204 72 204 18 40 82 122 247 174 13 86 128 213 237 192 255 58 217 151 111 229 19 160 77 2 147 109 18 97 186 220 113 51 46 246 11 148 117 151 4 73 80 181 163 135 58 144 73 76 62 21 146 67 116 40 39 160 46 222 211 160 124 118 174 115 152 142 208 185 110 61 60 25 245 194 93 239 130 106 47 100 27 66 164 47 137 162 62 29 9 254 254 116 36 212 12 212 82 192 182 193 79 67 201 92 150 194 82 66 239 158 78 76 150 210 237 192 237 167 98 64 233 153 65 128 101 72 80 125 245 214 208 67 72 20 89 123 49 50 178 182 145 4 84 40 30 21 133 106 62 136 127 136 121 10 52 226 95 218 174 228 4 36 161 251 93 163 216 243 215 195 226 35 240 224 181 80 62 13 217 58 72 98 229 113 214 137 192 199 149 158 101 173 85 31 207 38 13 189 17 146 4 178 4 63 171 244 118 20 104 40 78 13 102 231 41 106 22 114 230 16 96 128 4 233 38 65 166 171 175 253 86 236 31 168 200 218 11 208 238 250 224 70 246 173 169 36 213 124 211 21 124 200 226 236 159 36 94 42 111 64 45 104 10 102 28 146 117 161 210 200 198 230 83 54 22 183 24 219 88 11 117 171 154 126 143 194 26 252 20 178 12 183 103 145 252 175 15 161 40 98 228 29 167 18 252 51 143 0 3 58 65 36 193 55 254 7 186 56 21 112 152 56 15 186 107 250 145 67 81 197 151 115 45 180 117 232 76 147 152 89 39 172 104 204 92 146 166 150 161 201 107 76 90 213 63 109 183 129 6 146 89 27 20 77 155 66 55 197 237 62 66 113 247 126 200 12 98 101 35 134 79 157 234 185 212 103 30 1 142 33 1 211 213 206 223 67 23 166 195 75 227 219 160 187 62 58 135 202 80 120 250 156 233 54 50 244 217 199 201 102 50 67 205 164 134 63 195 196 10 224 142 197 61 62 69 241 165 39 33 179 136 149 77 136 28 126 49 46 213 153 73 128 182 215 48 74 2 247 208 237 232 210 116 216 14 70 55 33 99 231 212 17 188 231 118 75 139 14 174 230 99 166 142 235 224 208 169 101 7 91 199 163 99 113 143 238 163 248 194 67 144 37 72 98 54 33 50 253 98 93 165 51 152 0 45 18 68 157 192 61 252 25 116 241 112 168 223 79 39 96 100 51 148 243 253 98 144 126 37 104 255 204 50 192 251 33 224 135 90 195 170 63 22 127 19 47 115 34 184 7 119 83 124 254 94 232 36 136 125 113 193 63 11 8 208 38 65 18 172 131 71 255 20 93 152 9 171 58 25 195 140 159 215 15 65 199 94 98 3 224 215 99 142 150 29 36 217 158 136 234 234 163 53 250 182 222 22 80 72 20 247 192 147 20 127 254 85 232 166 136 181 155 48 47 46 248 103 9 1 134 73 32 211 238 177 255 141 206 205 6 16 147 113 24 221 50 52 55 48 244 50 13 192 199 154 5 223 238 70 90 45 3 126 25 226 15 69 1 69 30 210 213 92 25 14 227 113 247 61 78 241 185 29 208 201 2 248 242 226 131 127 22 17 160 77 2 27 36 193 19 127 141 63 58 23 103 6 141 33 157 201 232 45 172 99 1 241 111 250 219 189 14 22 167 214 135 139 73 166 174 8 160 87 121 232 11 92 246 66 85 146 84 184 251 31 161 248 179 29 208 205 144 36 130 127 154 12 20 59 139 8 48 36 9 208 105 183 235 43 248 163 177 102 49 25 131 108 99 20 239 210 216 240 42 173 113 119 85 168 110 242 49 159 176 94 225 53 240 85 152 32 134 91 2 223 3 45 162 216 255 127 1 124 123 122 129 15 47 102 70 208 139 74 2 130 36 80 157 118 135 246 110 244 189 245 36 91 50 176 35 136 172 67 221 12 18 218 72 133 152 66 93 177 84 247 40 144 2 92 116 30 185 182 182 232 9 153 63 14 210 12 119 223 30 138 47 63 122 90 237 249 103 185 4 24 246 21 200 164 136 124 74 23 102 112 123 22 209 60 206 20 232 110 104 10 70 99 39 15 173 183 1 95 4 209 238 163 216 119 121 124 220 11 143 41 192 45 81 252 197 78 138 187 30 175 193 223 124 58 130 127 150 74 128 33 18 192 59 68 228 97 205 231 111 170 158 238 97 215 142 144 76 38 104 182 22 97 9 213 165 208 161 84 163 23 208 123 144 28 156 196 158 193 218 204 65 112 142 106 231 33 170 135 143 4 83 179 147 60 40 70 174 60 157 39 136 26 206 246 91 144 4 31 198 200 57 130 123 208 205 204 145 63 214 195 61 173 248 185 46 146 140 163 73 39 52 146 170 231 11 74 5 178 4 44 130 93 194 207 44 81 237 156 165 247 185 253 148 15 29 65 141 64 106 127 246 116 7 127 85 2 12 18 225 32 112 165 88 174 82 173 110 115 115 213 21 110 22 202 93 9 50 50 130 36 93 236 218 58 195 216 5 29 47 55 184 25 65 76 25 203 220 4 82 249 136 8 31 238 235 26 167 249 109 149 0 67 250 33 200 78 129 43 17 12 134 27 81 247 54 205 185 94 115 240 243 18 47 89 188 108 162 72 198 78 17 249 52 194 199 128 131 200 202 250 201 171 4 56 46 17 240 192 45 8 183 200 64 108 71 143 247 254 21 121 91 37 192 137 19 226 140 188 173 42 129 103 249 109 85 2 156 200 237 185 138 167 86 183 128 51 18 112 3 124 47 202 235 84 185 10 184 16 197 13 36 141 137 30 5 238 23 225 203 8 127 12 28 89 85 2 87 60 240 122 129 42 31 68 121 21 158 28 146 66 70 212 75 162 187 237 90 175 168 19 196 169 239 33 154 27 227 102 146 151 98 244 74 12 63 131 112 0 195 109 34 124 114 213 12 92 113 224 235 90 148 155 212 235 43 144 116 209 78 216 253 102 29 222 174 43 157 154 158 55 148 162 198 169 24 85 196 11 214 10 73 71 73 173 248 217 212 250 131 152 234 233 34 209 82 127 92 173 252 61 12 191 46 240 231 171 142 160 211 31 120 128 183 226 245 125 42 201 188 93 63 114 32 153 164 210 172 242 194 146 106 181 132 24 23 242 64 235 247 219 4 180 11 116 193 101 152 245 41 102 83 38 201 85 137 84 79 44 206 87 15 31 73 213 249 159 211 196 92 47 134 127 126 58 147 32 57 235 193 87 253 41 85 253 91 166 51 113 192 158 211 41 204 72 229 85 10 47 197 44 152 74 250 173 222 195 8 92 143 49 6 211 1 219 85 164 19 90 221 147 9 164 96 51 146 171 214 144 92 181 213 20 95 222 179 224 246 28 121 137 102 246 19 98 204 251 48 114 116 149 0 167 31 248 255 78 85 183 202 216 250 41 187 37 115 24 175 84 185 226 102 234 54 118 30 241 38 166 17 104 236 132 46 216 142 134 115 166 253 10 95 147 9 54 33 16 33 209 236 123 174 18 247 224 51 189 226 203 143 142 104 39 249 117 193 254 44 70 230 86 9 112 58 104 122 10 120 247 75 42 102 189 221 184 109 198 172 165 18 84 113 11 80 29 9 253 251 172 23 177 17 244 126 31 129 88 206 101 234 194 206 186 194 55 173 43 127 4 155 104 216 34 44 246 154 139 77 54 50 146 23 159 255 198 136 118 249 101 193 254 99 68 22 86 19 66 94 84 240 21 188 251 23 138 89 111 47 124 237 172 145 189 37 56 165 154 23 220 161 88 33 236 61 34 166 63 222 166 46 15 50 73 152 3 96 234 10 159 212 99 83 67 146 105 40 251 206 36 16 35 137 213 70 22 123 229 197 146 25 83 20 127 254 181 76 187 217 191 21 107 255 25 156 62 36 72 206 66 240 255 169 42 235 147 75 94 127 68 198 71 61 179 222 163 11 162 197 52 146 24 48 245 192 128 122 208 85 176 248 155 137 161 86 251 21 65 38 150 123 217 184 29 36 89 148 8 117 43 122 3 138 216 171 95 166 153 36 69 241 103 59 50 237 100 191 32 137 253 133 211 133 4 201 217 5 126 245 243 170 172 177 47 189 97 86 198 199 29 120 165 154 135 252 153 48 193 188 63 53 84 7 139 67 241 65 236 215 195 37 76 18 7 92 216 22 9 130 18 88 183 130 107 166 129 133 63 183 215 92 82 100 66 94 124 110 71 71 37 251 144 88 251 81 68 22 86 9 112 234 192 191 81 149 181 201 165 127 251 40 163 99 14 173 20 183 224 253 252 30 99 58 25 177 109 136 145 186 141 72 83 28 106 144 56 90 44 204 53 208 254 156 3 99 5 99 61 38 49 129 4 173 226 80 85 141 137 165 138 49 134 10 236 149 23 107 230 125 81 252 249 61 169 118 249 160 96 127 5 35 139 171 4 56 233 224 151 239 85 152 176 151 253 192 81 233 78 148 72 1 197 28 228 7 195 56 89 41 235 18 176 176 94 69 155 158 109 117 147 0 145 246 180 233 225 86 247 130 24 197 36 225 60 24 59 144 208 150 78 60 149 26 123 197 5 85 230 203 94 241 151 247 117 181 35 31 16 49 55 35 178 180 74 128 147 5 190 43 127 76 69 199 236 229 219 143 74 103 173 162 133 215 197 41 200 167 131 182 111 82 194 80 192 227 220 218 37 99 112 98 197 161 203 181 222 171 235 11 10 135 189 244 92 50 87 22 197 95 61 156 41 201 79 73 98 254 11 34 189 85 2 188 160 222 61 15 174 122 167 194 72 114 213 15 31 165 187 86 169 74 213 249 189 80 206 120 108 98 16 235 73 71 13 229 2 205 48 195 62 236 113 160 108 141 222 128 255 128 166 132 72 65 99 241 192 64 113 232 0 9 60 168 233 15 184 168 28 246 146 77 154 185 162 40 190 244 84 162 34 63 38 150 143 35 146 175 18 224 5 113 240 120 240 229 91 21 198 146 111 251 209 121 233 172 119 248 2 55 183 71 76 239 168 39 73 12 162 168 136 55 233 132 161 140 77 184 53 78 180 210 216 105 178 94 181 6 66 15 122 53 193 68 244 6 117 202 192 232 122 15 190 18 52 241 24 107 34 254 129 68 34 1 120 231 192 121 197 149 74 81 26 123 193 186 34 123 245 86 91 236 56 144 106 102 222 35 70 254 4 97 215 169 180 14 146 51 20 252 183 40 58 150 188 242 189 115 210 93 167 84 149 234 236 110 149 222 12 106 19 17 227 155 125 62 25 143 5 159 198 199 22 206 8 248 186 119 171 70 90 4 75 192 11 226 20 41 5 95 65 181 164 72 21 124 7 161 81 132 224 202 0 125 176 2 2 145 188 131 170 210 48 241 172 20 92 229 169 74 131 47 176 231 141 150 157 206 198 94 113 247 145 92 189 190 81 140 124 30 120 250 84 145 32 57 243 192 47 222 172 42 163 201 119 220 56 47 221 245 21 174 20 157 125 210 235 210 172 96 83 169 151 180 212 115 137 147 113 48 29 5 167 65 132 215 206 66 49 162 234 81 99 16 2 208 90 209 251 226 34 233 165 139 216 203 94 35 92 252 105 216 245 46 165 216 45 125 179 175 64 67 23 240 68 48 226 67 213 177 135 170 18 92 33 84 133 70 18 40 174 18 92 165 102 173 72 247 85 89 209 187 187 204 213 243 122 49 124 1 216 119 42 72 144 156 97 224 191 81 149 78 250 170 159 157 51 35 27 188 215 74 244 200 227 232 210 76 232 209 83 43 103 226 124 28 22 105 16 241 116 54 9 197 62 33 145 254 108 223 102 200 179 175 103 29 106 126 143 21 159 123 155 223 115 68 71 223 252 233 208 40 224 194 79 8 187 126 200 83 236 173 191 139 193 167 96 202 102 42 181 250 118 5 177 199 149 6 87 134 173 160 170 4 95 10 35 149 118 175 203 139 222 215 58 61 245 242 26 177 250 21 148 253 39 155 4 230 140 1 223 21 175 87 180 147 190 230 31 45 200 248 150 92 85 74 14 61 90 208 59 82 96 211 2 76 129 177 189 80 216 103 138 40 187 11 148 138 145 173 37 222 23 234 165 64 181 135 74 129 82 128 22 88 201 81 242 252 222 53 149 239 25 36 149 167 164 155 245 242 223 121 149 143 230 67 193 133 159 170 176 219 42 242 67 21 229 92 65 181 80 80 46 85 20 139 61 202 94 65 217 43 168 122 5 85 222 163 42 42 170 162 192 149 37 174 44 112 121 73 85 230 20 85 73 86 230 221 151 207 246 68 152 87 39 215 1 231 156 236 203 103 206 12 240 243 215 40 164 233 107 63 180 32 19 91 123 64 161 51 143 20 186 52 83 32 73 33 198 22 24 91 128 169 16 19 206 152 80 200 167 82 144 78 20 152 78 129 243 5 42 149 122 45 80 10 69 10 150 108 213 187 119 173 247 185 69 44 79 136 53 59 37 237 220 233 167 239 203 243 223 190 182 77 130 2 187 181 160 55 93 80 204 23 148 75 5 101 175 10 231 165 154 4 21 85 94 4 2 20 5 174 168 240 101 67 134 178 42 201 52 207 174 56 186 132 209 121 60 87 160 164 171 4 120 118 240 191 93 193 166 175 191 105 81 214 108 235 161 90 234 161 71 11 93 58 92 98 211 60 140 232 180 165 136 201 17 74 48 185 87 83 130 41 3 9 164 64 181 96 252 146 18 175 5 78 67 249 175 72 169 185 41 122 15 141 150 234 140 19 171 15 34 60 18 91 206 168 100 19 95 242 135 30 42 243 255 118 109 21 73 80 114 209 167 75 236 185 5 189 131 5 249 108 73 177 88 82 46 229 148 189 50 72 130 188 160 202 11 92 30 86 126 125 248 72 10 175 165 86 82 72 135 34 221 214 91 10 18 137 235 86 9 176 44 248 14 92 239 229 138 154 244 187 63 210 147 137 109 57 74 169 135 31 45 116 105 186 196 102 5 98 43 140 41 194 196 74 83 137 36 133 216 122 245 155 66 49 113 114 3 37 163 219 10 36 43 85 181 64 41 125 97 138 226 241 17 135 136 136 209 123 145 150 82 38 2 54 115 146 173 249 138 63 252 112 153 255 214 203 157 214 146 224 37 127 88 98 207 43 201 167 11 138 217 130 98 49 72 129 170 87 14 28 174 23 137 80 20 184 162 196 187 18 53 5 78 74 42 10 179 222 21 201 198 50 87 47 30 229 188 179 139 0 186 204 209 246 238 133 129 17 87 168 98 210 55 124 180 39 107 207 207 195 202 127 184 212 197 169 122 229 231 152 164 68 146 50 156 77 137 74 9 166 52 38 74 0 181 57 106 74 188 228 168 150 172 121 105 142 247 165 22 148 229 174 142 3 188 24 221 137 112 244 24 247 96 32 129 151 108 205 215 252 204 163 69 254 95 95 238 8 19 178 75 46 253 227 28 179 181 36 63 80 82 204 150 20 11 37 213 82 235 168 137 144 151 184 94 137 47 75 48 185 122 83 162 38 167 50 37 37 185 153 44 123 146 104 79 149 115 66 207 154 23 254 118 122 76 12 9 217 184 130 50 10 140 170 106 151 48 80 173 254 114 166 25 25 227 68 93 111 4 133 244 123 254 163 202 216 86 197 23 94 15 126 29 157 223 111 150 25 25 227 227 40 142 186 55 176 143 35 99 12 226 189 24 53 24 23 124 245 89 106 244 224 14 170 189 139 70 140 17 132 221 8 243 207 254 221 61 184 210 104 49 119 153 172 191 68 187 63 113 151 71 198 130 185 249 228 207 195 212 255 12 93 69 73 61 120 211 31 25 227 75 240 133 199 121 3 253 105 33 30 47 70 157 244 59 147 248 217 84 170 169 84 196 232 44 194 190 51 103 102 80 51 124 97 141 42 27 240 218 197 171 226 189 226 85 135 135 70 105 51 52 74 101 98 91 222 121 243 45 130 170 170 43 189 159 126 192 232 226 20 216 212 161 109 255 189 175 189 178 14 87 59 122 93 136 211 123 28 22 20 239 68 227 24 121 172 115 51 35 130 44 88 68 247 32 39 16 169 11 13 41 189 100 19 15 233 204 19 151 244 126 235 85 116 223 125 167 39 93 3 23 255 39 79 57 103 90 67 163 74 188 51 3 67 163 48 78 189 241 120 49 113 104 148 195 139 87 47 6 15 50 234 85 172 183 234 101 236 100 228 150 38 47 22 248 170 172 195 235 58 156 138 88 188 153 236 44 218 243 39 144 177 17 53 231 111 136 109 212 59 134 78 215 51 50 2 179 75 244 62 254 7 48 122 46 157 191 253 159 3 190 85 142 78 223 15 139 207 56 108 39 246 251 211 166 15 112 19 203 11 57 126 42 45 219 30 193 135 148 47 181 32 164 84 143 126 29 93 60 96 196 38 123 17 78 60 56 19 72 160 210 25 127 92 103 119 157 223 251 157 55 210 253 251 159 81 186 19 112 233 173 142 106 30 14 220 22 115 10 82 23 190 135 137 33 139 216 165 220 139 27 152 24 230 36 188 207 27 204 184 58 119 84 12 74 7 200 87 46 1 194 170 239 168 103 18 135 72 70 153 94 145 169 221 54 166 116 70 20 201 64 50 161 231 192 86 158 44 1 171 134 125 135 180 247 63 255 24 198 183 73 231 45 191 173 42 10 174 68 167 31 64 23 167 4 219 137 83 233 53 136 252 122 20 120 216 171 5 149 32 126 219 1 30 19 165 132 193 67 106 170 167 190 138 206 237 21 108 114 4 164 247 77 87 117 132 38 213 42 217 248 30 61 186 107 115 239 191 127 159 116 127 228 147 208 157 83 46 251 13 112 133 240 204 31 65 2 74 22 29 206 70 195 216 56 100 120 108 28 94 8 91 65 200 67 65 49 8 163 43 151 0 33 63 98 2 39 99 34 90 36 23 120 77 46 181 32 105 12 147 2 70 133 36 118 101 180 98 48 6 42 231 150 62 126 7 172 61 159 238 91 127 55 174 252 2 157 222 73 20 251 245 132 80 17 85 31 116 37 9 41 92 190 10 184 75 63 186 71 80 212 196 132 129 129 42 72 130 219 189 195 235 145 189 72 150 168 122 59 66 8 229 204 127 211 106 87 104 24 237 37 27 59 160 115 187 39 123 191 247 78 233 190 227 227 158 238 18 188 236 102 180 114 112 224 14 176 86 194 112 32 234 249 128 18 136 32 138 19 141 224 27 188 168 58 9 35 238 140 49 39 67 105 79 78 25 248 222 143 225 124 106 70 124 175 115 121 14 19 29 161 72 21 75 240 153 163 6 35 33 8 99 12 88 169 72 13 249 239 254 133 168 24 58 223 255 219 162 54 245 184 2 157 190 31 157 159 130 164 35 253 81 112 97 233 68 185 110 124 112 249 39 193 221 171 12 245 111 245 38 166 118 121 247 244 87 208 195 123 76 118 85 129 29 91 34 127 104 162 242 189 36 19 171 227 240 28 10 224 241 73 160 146 141 77 233 220 211 235 122 159 248 81 186 111 255 77 24 93 82 185 236 63 24 117 162 60 243 89 212 198 224 145 23 143 138 81 47 158 218 238 8 210 160 82 23 135 71 122 131 177 136 186 23 30 47 115 138 54 252 46 174 50 233 27 111 42 59 175 116 21 89 85 82 73 129 167 10 46 87 92 144 1 234 162 136 43 49 198 149 95 121 168 114 211 135 203 206 219 62 81 202 248 230 18 239 157 206 60 230 116 225 96 69 154 58 76 82 98 147 10 177 37 98 10 196 22 136 45 69 140 19 99 28 106 92 120 222 84 136 84 136 173 16 235 48 105 65 146 22 110 247 151 156 30 126 210 117 174 150 210 110 246 37 93 95 118 174 153 43 101 180 42 53 164 5 118 159 159 109 21 162 131 146 142 30 209 249 61 85 239 147 239 46 253 225 3 78 123 207 148 92 246 175 75 221 252 182 146 210 85 84 82 104 37 78 75 41 169 196 105 101 156 86 166 164 146 82 43 113 56 170 120 118 161 181 57 197 11 141 206 255 31 0 128 225 85 164 252 197 2 107 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!CSSDockFileLibrary methodsFor: 'images'!mainbgGif	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(71 73 70 56 57 97 20 0 20 0 128 0 0 228 239 244 222 235 242 33 249 4 0 0 0 0 0 44 0 0 0 0 20 0 20 0 0 2 42 140 143 160 203 232 12 129 75 113 205 83 237 13 89 109 222 125 157 180 141 98 88 162 151 121 86 31 232 182 209 171 174 25 125 203 16 30 167 189 93 41 0 0 59) asByteArray ].	^ cache at: 1! !!CSSDockFileLibrary methodsFor: 'images'!musicPng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 128 0 0 0 128 8 6 0 0 0 195 62 97 203 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 10 79 105 67 67 80 80 104 111 116 111 115 104 111 112 32 73 67 67 32 112 114 111 102 105 108 101 0 0 120 218 157 83 103 84 83 233 22 61 247 222 244 66 75 136 128 148 75 111 82 21 8 32 82 66 139 128 20 145 38 42 33 9 16 74 136 33 161 217 21 81 193 17 69 69 4 27 200 160 136 3 142 142 128 140 21 81 44 12 138 10 216 7 228 33 162 142 131 163 136 138 202 251 225 123 163 107 214 188 247 230 205 254 181 215 62 231 172 243 157 179 207 7 192 8 12 150 72 51 81 53 128 12 169 66 30 17 224 131 199 196 198 225 228 46 64 129 10 36 112 0 16 8 179 100 33 115 253 35 1 0 248 126 60 60 43 34 192 7 190 0 1 120 211 11 8 0 192 77 155 192 48 28 135 255 15 234 66 153 92 1 128 132 1 192 116 145 56 75 8 128 20 0 64 122 142 66 166 0 64 70 1 128 157 152 38 83 0 160 4 0 96 203 99 98 227 0 80 45 0 96 39 127 230 211 0 128 157 248 153 123 1 0 91 148 33 21 1 160 145 0 32 19 101 136 68 0 104 59 0 172 207 86 138 69 0 88 48 0 20 102 75 196 57 0 216 45 0 48 73 87 102 72 0 176 183 0 192 206 16 11 178 0 8 12 0 48 81 136 133 41 0 4 123 0 96 200 35 35 120 0 132 153 0 20 70 242 87 60 241 43 174 16 231 42 0 0 120 153 178 60 185 36 57 69 129 91 8 45 113 7 87 87 46 30 40 206 73 23 43 20 54 97 2 97 154 64 46 194 121 153 25 50 129 52 15 224 243 204 0 0 160 145 21 17 224 131 243 253 120 206 14 174 206 206 54 142 182 14 95 45 234 191 6 255 34 98 98 227 254 229 207 171 112 64 0 0 225 116 126 209 254 44 47 179 26 128 59 6 128 109 254 162 37 238 4 104 94 11 160 117 247 139 102 178 15 64 181 0 160 233 218 87 243 112 248 126 60 60 69 161 144 185 217 217 229 228 228 216 74 196 66 91 97 202 87 125 254 103 194 95 192 87 253 108 249 126 60 252 247 245 224 190 226 36 129 50 93 129 71 4 248 224 194 204 244 76 165 28 207 146 9 132 98 220 230 143 71 252 183 11 255 252 29 211 34 196 73 98 185 88 42 20 227 81 18 113 142 68 154 140 243 50 165 34 137 66 146 41 197 37 210 255 100 226 223 44 251 3 62 223 53 0 176 106 62 1 123 145 45 168 93 99 3 246 75 39 16 88 116 192 226 247 0 0 242 187 111 193 212 40 8 3 128 104 131 225 207 119 255 239 63 253 71 160 37 0 128 102 73 146 113 0 0 94 68 36 46 84 202 179 63 199 8 0 0 68 160 129 42 176 65 27 244 193 24 44 192 6 28 193 5 220 193 11 252 96 54 132 66 36 196 194 66 16 66 10 100 128 28 114 96 41 172 130 66 40 134 205 176 29 42 96 47 212 64 29 52 192 81 104 134 147 112 14 46 194 85 184 14 61 112 15 250 97 8 158 193 40 188 129 9 4 65 200 8 19 97 33 218 136 1 98 138 88 35 142 8 23 153 133 248 33 193 72 4 18 139 36 32 201 136 20 81 34 75 145 53 72 49 82 138 84 32 85 72 29 242 61 114 2 57 135 92 70 186 145 59 200 0 50 130 252 134 188 71 49 148 129 178 81 61 212 12 181 67 185 168 55 26 132 70 162 11 208 100 116 49 154 143 22 160 155 208 114 180 26 61 140 54 161 231 208 171 104 15 218 143 62 67 199 48 192 232 24 7 51 196 108 48 46 198 195 66 177 56 44 9 147 99 203 177 34 172 12 171 198 26 176 86 172 3 187 137 245 99 207 177 119 4 18 129 69 192 9 54 4 119 66 32 97 30 65 72 88 76 88 78 216 72 168 32 28 36 52 17 218 9 55 9 3 132 81 194 39 34 147 168 75 180 38 186 17 249 196 24 98 50 49 135 88 72 44 35 214 18 143 19 47 16 123 136 67 196 55 36 18 137 67 50 39 185 144 2 73 177 164 84 210 18 210 70 210 110 82 35 233 44 169 155 52 72 26 35 147 201 218 100 107 178 7 57 148 44 32 43 200 133 228 157 228 195 228 51 228 27 228 33 242 91 10 157 98 64 113 164 248 83 226 40 82 202 106 74 25 229 16 229 52 229 6 101 152 50 65 85 163 154 82 221 168 161 84 17 53 143 90 66 173 161 182 82 175 81 135 168 19 52 117 154 57 205 131 22 73 75 165 173 162 149 211 26 104 23 104 247 105 175 232 116 186 17 221 149 30 78 151 208 87 210 203 233 71 232 151 232 3 244 119 12 13 134 21 131 199 136 103 40 25 155 24 7 24 103 25 119 24 175 152 76 166 25 211 139 25 199 84 48 55 49 235 152 231 153 15 153 111 85 88 42 182 42 124 21 145 202 10 149 74 149 38 149 27 42 47 84 169 170 166 170 222 170 11 85 243 85 203 84 143 169 94 83 125 174 70 85 51 83 227 169 9 212 150 171 85 170 157 80 235 83 27 83 103 169 59 168 135 170 103 168 111 84 63 164 126 89 253 137 6 89 195 76 195 79 67 164 81 160 177 95 227 188 198 32 11 99 25 179 120 44 33 107 13 171 134 117 129 53 196 38 177 205 217 124 118 42 187 152 253 29 187 139 61 170 169 161 57 67 51 74 51 87 179 82 243 148 102 63 7 227 152 113 248 156 116 78 9 231 40 167 151 243 126 138 222 20 239 41 226 41 27 166 52 76 185 49 101 92 107 170 150 151 150 88 171 72 171 81 171 71 235 189 54 174 237 167 157 166 189 69 187 89 251 129 14 65 199 74 39 92 39 71 103 143 206 5 157 231 83 217 83 221 167 10 167 22 77 61 58 245 174 46 170 107 165 27 161 187 68 119 191 110 167 238 152 158 190 94 128 158 76 111 167 222 121 189 231 250 28 125 47 253 84 253 109 250 167 245 71 12 88 6 179 12 36 6 219 12 206 24 60 197 53 113 111 60 29 47 199 219 241 81 67 93 195 64 67 165 97 149 97 151 225 132 145 185 209 60 163 213 70 141 70 15 140 105 198 92 227 36 227 109 198 109 198 163 38 6 38 33 38 75 77 234 77 238 154 82 77 185 166 41 166 59 76 59 76 199 205 204 205 162 205 214 153 53 155 61 49 215 50 231 155 231 155 215 155 223 183 96 90 120 90 44 182 168 182 184 101 73 178 228 90 166 89 238 182 188 110 133 90 57 89 165 88 85 90 93 179 70 173 157 173 37 214 187 173 187 167 17 167 185 78 147 78 171 158 214 103 195 176 241 182 201 182 169 183 25 176 229 216 6 219 174 182 109 182 125 97 103 98 23 103 183 197 174 195 238 147 189 147 125 186 125 141 253 61 7 13 135 217 14 171 29 90 29 126 115 180 114 20 58 86 58 222 154 206 156 238 63 125 197 244 150 233 47 103 88 207 16 207 216 51 227 182 19 203 41 196 105 157 83 155 211 71 103 23 103 185 115 131 243 136 139 137 75 130 203 46 151 62 46 155 27 198 221 200 189 228 74 116 245 113 93 225 122 210 245 157 155 179 155 194 237 168 219 175 238 54 238 105 238 135 220 159 204 52 159 41 158 89 51 115 208 195 200 67 224 81 229 209 63 11 159 149 48 107 223 172 126 79 67 79 129 103 181 231 35 47 99 47 145 87 173 215 176 183 165 119 170 247 97 239 23 62 246 62 114 159 227 62 227 60 55 222 50 222 89 95 204 55 192 183 200 183 203 79 195 111 158 95 133 223 67 127 35 255 100 255 122 255 209 0 167 128 37 1 103 3 137 129 65 129 91 2 251 248 122 124 33 191 142 63 58 219 101 246 178 217 237 65 140 160 185 65 21 65 143 130 173 130 229 193 173 33 104 200 236 144 173 33 247 231 152 206 145 206 105 14 133 80 126 232 214 208 7 97 230 97 139 195 126 12 39 133 135 133 87 134 63 142 112 136 88 26 209 49 151 53 119 209 220 67 115 223 68 250 68 150 68 222 155 103 49 79 57 175 45 74 53 42 62 170 46 106 60 218 55 186 52 186 63 198 46 102 89 204 213 88 157 88 73 108 75 28 57 46 42 174 54 110 108 190 223 252 237 243 135 226 157 226 11 227 123 23 152 47 200 93 112 121 161 206 194 244 133 167 22 169 46 18 44 58 150 64 76 136 78 56 148 240 65 16 42 168 22 140 37 242 19 119 37 142 10 121 194 29 194 103 34 47 209 54 209 136 216 67 92 42 30 78 242 72 42 77 122 146 236 145 188 53 121 36 197 51 165 44 229 185 132 39 169 144 188 76 13 76 221 155 58 158 22 154 118 32 109 50 61 58 189 49 131 146 145 144 113 66 170 33 77 147 182 103 234 103 230 102 118 203 172 101 133 178 254 197 110 139 183 47 30 149 7 201 107 179 144 172 5 89 45 10 182 66 166 232 84 90 40 215 42 7 178 103 101 87 102 191 205 137 202 57 150 171 158 43 205 237 204 179 202 219 144 55 156 239 159 255 237 18 194 18 225 146 182 165 134 75 87 45 29 88 230 189 172 106 57 178 60 113 121 219 10 227 21 5 43 134 86 6 172 60 184 138 182 42 109 213 79 171 237 87 151 174 126 189 38 122 77 107 129 94 193 202 130 193 181 1 107 235 11 85 10 229 133 125 235 220 215 237 93 79 88 47 89 223 181 97 250 134 157 27 62 21 137 138 174 20 219 23 151 21 127 216 40 220 120 229 27 135 111 202 191 153 220 148 180 169 171 196 185 100 207 102 210 102 233 230 222 45 158 91 14 150 170 151 230 151 14 110 13 217 218 180 13 223 86 180 237 245 246 69 219 47 151 205 40 219 187 131 182 67 185 163 191 60 184 188 101 167 201 206 205 59 63 84 164 84 244 84 250 84 54 238 210 221 181 97 215 248 110 209 238 27 123 188 246 52 236 213 219 91 188 247 253 62 201 190 219 85 1 85 77 213 102 213 101 251 73 251 179 247 63 174 137 170 233 248 150 251 109 93 173 78 109 113 237 199 3 210 3 253 7 35 14 182 215 185 212 213 29 210 61 84 82 143 214 43 235 71 14 199 31 190 254 157 239 119 45 13 54 13 85 141 156 198 226 35 112 68 121 228 233 247 9 223 247 30 13 58 218 118 140 123 172 225 7 211 31 118 29 103 29 47 106 66 154 242 154 70 155 83 154 251 91 98 91 186 79 204 62 209 214 234 222 122 252 71 219 31 15 156 52 60 89 121 74 243 84 201 105 218 233 130 211 147 103 242 207 140 157 149 157 125 126 46 249 220 96 219 162 182 123 231 99 206 223 106 15 111 239 186 16 116 225 210 69 255 139 231 59 188 59 206 92 242 184 116 242 178 219 229 19 87 184 87 154 175 58 95 109 234 116 234 60 254 147 211 79 199 187 156 187 154 174 185 92 107 185 238 122 189 181 123 102 247 233 27 158 55 206 221 244 189 121 241 22 255 214 213 158 57 61 221 189 243 122 111 247 197 247 245 223 22 221 126 114 39 253 206 203 187 217 119 39 238 173 188 79 188 95 244 64 237 65 217 67 221 135 213 63 91 254 220 216 239 220 127 106 192 119 160 243 209 220 71 247 6 133 131 207 254 145 245 143 15 67 5 143 153 143 203 134 13 134 235 158 56 62 57 57 226 63 114 253 233 252 167 67 207 100 207 38 158 23 254 162 254 203 174 23 22 47 126 248 213 235 215 206 209 152 209 161 151 242 151 147 191 109 124 165 253 234 192 235 25 175 219 198 194 198 30 190 201 120 51 49 94 244 86 251 237 193 119 220 119 29 239 163 223 15 79 228 124 32 127 40 255 104 249 177 245 83 208 167 251 147 25 147 147 255 4 3 152 243 252 99 51 45 219 0 0 0 4 103 65 77 65 0 0 177 142 124 251 81 147 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 233 0 0 117 48 0 0 234 96 0 0 58 152 0 0 23 111 146 95 197 70 0 0 63 128 73 68 65 84 120 218 236 189 105 176 93 215 117 223 249 91 123 159 115 239 125 51 240 30 240 0 130 4 136 137 4 56 83 164 36 106 136 36 50 150 227 56 145 157 180 211 146 219 114 220 78 165 186 219 150 101 167 146 124 232 228 139 109 201 221 31 186 187 218 229 164 28 199 81 85 210 113 210 137 93 146 218 78 197 110 39 170 142 35 146 138 100 153 178 72 137 131 72 128 4 72 130 24 136 233 205 211 189 231 236 189 86 127 216 251 220 119 31 0 146 144 243 72 62 90 186 197 195 55 220 1 247 221 245 223 107 248 175 73 204 140 239 223 190 119 111 238 251 31 193 247 246 173 216 172 23 250 205 127 247 149 239 238 9 102 84 8 219 198 70 56 55 187 204 248 216 16 173 86 201 137 203 75 24 66 45 66 165 32 2 163 133 80 58 24 113 80 136 176 123 106 130 213 197 69 70 219 208 194 81 22 48 86 8 106 134 2 166 202 254 155 110 216 61 187 176 244 145 249 197 165 163 67 237 246 143 175 117 123 85 217 42 238 169 122 117 250 231 49 104 148 159 128 32 0 180 218 37 117 21 158 28 234 180 91 107 189 222 231 183 141 143 29 155 156 24 123 244 229 51 175 158 23 231 16 64 68 6 254 12 195 204 216 177 125 27 151 231 230 17 145 13 247 191 89 183 143 126 240 189 91 11 0 111 215 173 17 164 26 162 102 159 86 181 31 83 213 135 158 127 233 116 95 56 163 195 67 140 12 119 216 181 99 10 83 69 205 232 116 218 140 143 141 128 194 242 202 10 171 221 94 194 130 8 231 47 93 190 7 140 170 170 63 115 105 102 142 203 179 243 120 239 112 198 195 226 228 247 196 248 13 17 236 251 26 224 109 22 188 25 162 198 167 2 250 153 213 200 78 135 50 58 60 204 228 246 113 182 141 143 49 181 109 27 35 195 157 55 124 173 29 147 219 54 252 124 219 225 3 253 239 151 87 86 153 91 92 226 226 229 25 102 22 22 31 234 245 234 135 156 115 191 238 156 92 114 226 62 35 194 111 194 59 23 12 197 59 75 232 141 224 237 161 24 245 23 151 215 244 33 47 202 129 93 147 28 188 97 39 187 119 76 49 212 105 93 245 188 58 70 84 13 205 26 33 233 124 3 109 212 63 136 115 56 17 156 19 156 115 125 231 104 116 100 152 209 145 97 246 222 176 11 128 213 181 53 94 189 112 137 211 175 94 220 185 180 186 246 27 206 185 223 112 78 30 54 179 255 5 120 248 251 0 120 51 4 111 134 25 168 242 241 128 125 225 204 133 203 108 31 110 241 238 67 251 184 227 224 30 218 101 177 110 14 128 181 94 77 29 35 117 29 136 102 136 8 62 219 101 231 4 113 14 49 67 196 225 157 96 2 168 162 34 152 9 102 70 132 12 8 199 160 69 31 30 26 226 208 254 125 28 218 191 143 181 110 143 23 94 126 133 51 175 94 124 232 213 75 51 15 121 239 112 206 125 194 193 23 17 65 190 15 128 255 250 155 154 17 149 7 77 245 225 42 40 135 166 199 248 11 71 247 113 244 166 233 164 17 20 98 52 102 86 186 172 246 2 49 214 12 149 14 159 157 49 201 94 158 10 120 17 84 193 139 37 239 18 67 13 28 25 4 57 36 86 77 64 137 25 117 205 235 92 233 220 13 117 218 220 125 244 22 238 62 122 11 47 157 62 199 201 151 79 211 173 235 47 20 9 8 15 33 242 200 91 225 16 254 185 4 128 153 17 213 136 166 207 46 244 226 109 71 118 77 240 35 247 30 226 208 13 219 137 17 66 84 86 235 200 203 115 107 204 45 247 40 61 12 23 142 225 82 40 212 240 62 127 240 89 208 100 141 239 68 136 209 240 62 223 151 35 135 215 3 129 103 253 177 175 37 208 3 123 247 112 96 239 30 94 57 115 158 99 47 189 76 29 194 195 222 251 231 156 115 183 95 11 60 223 7 192 235 24 122 197 168 213 62 91 213 250 75 38 240 83 239 63 194 135 142 220 68 84 168 107 229 252 114 197 169 249 53 206 45 86 12 21 48 228 5 231 60 65 141 90 193 7 193 99 148 158 117 16 52 130 125 19 65 0 176 239 166 221 236 187 105 55 207 62 127 146 151 78 159 187 77 189 55 239 221 175 56 248 229 173 8 130 98 139 201 158 104 70 21 237 82 85 135 29 31 57 114 35 127 237 221 183 82 150 158 94 101 44 213 145 111 158 95 230 244 66 151 33 47 12 185 228 193 69 160 142 134 35 57 113 34 134 68 112 2 222 189 245 32 0 184 253 214 67 28 218 119 19 223 120 250 59 44 44 173 254 82 81 248 79 123 231 118 128 176 149 112 176 165 0 160 106 159 8 33 126 222 137 240 119 255 210 125 220 114 227 36 117 52 214 186 145 63 185 184 198 159 94 88 97 204 11 35 133 7 73 2 83 132 8 68 140 160 80 197 236 188 97 56 96 168 5 206 222 30 16 180 59 109 62 244 158 251 120 225 165 87 120 254 165 87 166 204 155 121 231 30 4 121 116 171 104 131 45 1 128 108 239 255 233 75 231 103 63 181 111 251 24 255 195 71 239 167 213 46 168 3 156 89 174 248 195 151 87 152 171 140 150 243 136 107 4 239 136 2 181 165 211 46 30 68 12 66 58 249 32 56 81 124 237 105 21 134 52 188 247 91 12 2 128 91 14 236 227 134 233 41 190 246 248 147 132 24 31 241 222 127 214 193 103 182 2 8 222 246 92 128 26 68 181 47 188 58 179 248 169 7 14 222 192 47 124 236 1 138 178 32 6 227 235 231 86 248 253 151 86 136 6 163 5 120 231 8 230 168 113 212 6 181 65 64 8 70 190 132 26 165 10 70 21 141 94 20 186 49 82 199 36 200 134 7 176 1 10 87 205 16 73 145 196 224 125 106 214 248 142 235 143 213 4 164 120 197 235 92 207 109 116 100 132 31 250 208 7 24 237 116 8 33 252 178 170 125 97 43 36 226 54 77 3 216 117 69 189 235 127 176 52 39 63 234 76 29 234 201 31 125 224 54 222 115 116 47 85 132 42 68 254 211 169 85 102 186 145 209 66 136 8 193 140 16 141 218 132 218 178 189 55 195 89 58 197 98 134 139 6 62 129 131 96 248 228 126 227 98 68 240 148 190 57 221 111 143 38 64 224 195 239 187 159 39 158 126 150 115 151 102 63 94 22 254 89 231 220 237 111 167 38 216 52 0 68 252 117 252 253 134 96 96 138 26 88 212 75 231 47 207 79 126 236 61 71 184 239 232 94 234 0 139 107 53 143 156 89 165 82 99 168 116 68 53 130 166 15 216 60 88 52 106 21 188 79 96 16 179 126 140 238 4 156 41 193 37 197 230 131 129 128 71 16 34 78 60 222 189 205 32 0 238 187 235 118 244 233 103 57 127 105 230 182 178 40 46 59 231 118 188 93 32 216 52 0 236 11 47 188 161 240 187 50 76 45 35 244 104 211 25 221 54 115 230 242 204 228 15 189 231 40 247 29 185 153 16 225 210 74 205 147 23 186 180 92 18 102 64 113 56 16 48 181 4 31 15 26 141 74 5 113 134 139 130 243 89 19 36 203 143 152 34 217 76 16 215 133 228 163 209 70 250 126 196 219 9 130 119 223 117 59 47 158 58 205 179 39 79 77 149 165 60 235 224 109 209 4 155 230 3 168 20 175 115 249 124 57 20 33 40 95 184 112 121 118 242 7 238 59 194 253 71 111 38 42 92 88 172 121 246 98 15 239 160 244 142 182 119 180 196 81 228 20 112 225 132 66 160 20 161 72 186 157 90 133 74 36 155 133 116 69 32 152 35 26 84 6 181 66 165 74 21 161 27 141 158 38 90 217 222 102 159 0 224 224 205 123 25 27 25 34 132 120 155 217 219 227 19 108 26 0 172 175 224 95 231 50 33 40 159 13 213 202 199 31 122 215 97 222 117 219 126 66 132 203 43 145 151 23 3 157 210 209 118 142 210 145 4 158 133 222 7 129 228 159 69 40 125 114 0 43 131 202 132 16 147 35 88 155 228 175 160 2 209 160 14 66 21 34 149 66 47 38 95 130 45 2 130 143 60 112 63 99 195 67 132 24 63 110 102 159 125 171 65 176 137 0 120 189 75 48 131 104 246 17 173 150 127 233 232 190 221 220 123 219 65 98 80 230 151 123 156 158 89 166 45 208 113 142 150 23 74 17 156 109 60 249 69 3 10 17 202 204 235 183 60 212 42 4 133 90 36 69 5 57 26 8 176 49 58 80 168 98 98 10 187 49 249 21 91 5 4 31 126 224 190 68 130 69 253 37 51 62 242 86 130 96 243 0 32 254 26 151 75 23 130 26 208 91 123 100 106 108 136 135 62 112 63 117 12 116 187 61 94 157 153 163 180 10 111 93 28 33 9 56 3 193 201 21 32 16 40 51 8 90 205 125 2 61 75 154 32 153 129 28 30 102 77 144 76 130 17 113 212 170 84 209 178 38 0 221 66 32 248 193 15 62 144 200 45 213 71 222 145 78 224 246 238 249 215 98 121 232 185 14 171 86 94 118 6 63 244 3 31 65 85 137 33 112 250 252 171 8 158 194 181 136 170 32 138 137 167 160 76 192 113 74 221 56 127 2 230 12 211 4 2 85 40 213 48 47 88 118 10 157 51 156 9 66 114 10 5 33 37 254 44 133 137 234 32 59 136 201 49 21 58 98 185 28 236 237 117 12 91 101 193 253 119 222 198 99 223 254 14 34 111 93 100 176 121 78 32 238 218 151 8 209 248 108 172 214 166 62 244 129 191 192 80 187 141 106 224 194 217 151 241 113 141 194 42 196 122 56 173 240 218 195 107 133 211 46 5 53 5 80 136 203 38 32 251 0 14 188 64 43 59 131 165 37 64 24 80 169 36 127 192 6 205 65 67 22 9 193 180 175 9 130 26 149 90 159 36 218 10 142 225 244 212 36 55 76 239 32 68 157 122 171 252 129 205 99 2 69 174 190 154 195 81 175 253 210 254 253 251 217 123 243 94 98 221 99 241 226 25 172 90 165 176 26 111 21 78 123 56 237 129 246 16 237 225 179 73 40 172 71 65 213 119 252 250 32 16 193 55 142 97 246 25 74 39 4 151 212 126 3 130 198 12 244 77 129 186 124 191 163 167 80 169 209 11 201 47 216 42 32 120 247 93 183 165 127 71 245 151 222 89 84 240 53 0 96 226 136 117 239 217 210 59 222 117 223 123 160 174 168 86 22 233 205 157 165 144 154 130 64 169 53 101 168 240 218 165 208 170 15 4 167 21 158 138 194 234 4 4 203 26 193 165 208 176 20 193 245 67 196 252 21 232 145 157 194 190 240 7 252 2 73 96 208 72 74 45 7 168 204 82 100 176 133 64 240 129 251 238 38 132 136 170 61 251 102 107 129 226 205 194 82 174 221 123 48 132 181 219 110 187 251 61 180 58 37 177 219 99 229 252 49 60 32 177 6 103 152 40 30 143 89 129 153 225 197 131 68 106 137 136 68 60 69 114 40 81 204 34 134 7 241 152 19 74 37 189 134 74 246 15 4 211 84 110 46 153 46 22 51 68 5 231 20 39 110 221 63 176 148 52 114 10 136 225 36 177 137 30 203 180 246 219 231 19 108 27 31 99 199 228 54 230 22 22 111 19 41 30 20 225 145 173 15 128 56 119 149 243 23 187 221 135 71 199 119 112 248 182 59 160 174 168 231 78 225 123 75 88 49 12 86 99 65 241 62 69 12 222 20 51 15 190 0 139 152 5 130 43 49 23 113 230 41 164 72 194 39 130 121 12 135 73 145 146 190 162 217 81 52 204 9 85 6 129 203 20 178 96 136 185 190 99 232 196 18 0 50 16 80 240 89 236 109 159 30 207 219 12 130 247 191 235 46 126 255 143 190 130 115 238 97 49 39 111 150 67 184 121 38 32 233 206 124 129 153 125 60 154 113 228 238 247 128 6 66 111 133 250 210 73 188 40 69 86 241 142 26 31 106 124 92 87 249 46 86 56 171 241 4 188 118 145 124 159 211 30 133 85 120 171 147 131 104 53 37 61 74 234 117 130 200 37 142 160 116 66 84 168 36 133 135 141 47 176 30 42 58 106 201 62 130 10 81 133 154 4 156 160 210 55 3 111 183 57 56 112 211 13 104 84 204 248 248 214 215 0 163 123 54 144 66 186 112 238 11 99 147 187 217 179 247 32 26 3 213 165 147 228 188 94 6 136 162 166 41 65 163 30 19 75 170 157 164 9 76 60 133 120 192 8 22 64 74 172 49 9 248 244 24 92 122 60 154 53 130 199 156 75 37 224 46 209 192 226 65 76 242 129 76 167 90 92 174 16 150 172 254 93 122 140 19 165 82 195 121 135 35 133 142 111 167 57 184 235 232 45 188 120 230 85 188 119 95 176 55 73 11 108 30 0 76 7 11 60 30 138 106 28 56 122 47 134 17 67 151 122 249 18 226 10 156 69 4 197 71 143 57 37 102 129 122 43 178 63 144 184 0 53 143 243 30 47 217 7 176 136 151 18 35 102 213 239 49 115 233 107 115 89 196 40 80 73 191 143 206 232 34 68 1 44 50 180 182 64 59 174 209 174 87 241 170 168 131 30 201 65 116 133 163 213 25 166 211 233 32 99 99 12 183 138 252 55 25 102 111 31 8 14 222 180 135 211 175 94 72 85 198 111 66 223 193 38 250 0 213 250 233 239 173 254 98 209 30 230 166 155 15 161 106 244 102 79 131 107 101 102 80 17 83 124 12 88 140 73 160 62 157 124 159 5 233 45 157 240 104 5 230 21 47 62 59 127 150 193 16 48 74 12 135 14 0 32 146 124 9 143 39 74 137 72 193 182 238 60 187 170 75 108 235 206 165 112 208 140 104 41 71 112 165 18 94 97 30 17 56 15 140 111 219 198 174 169 29 76 108 219 134 152 174 171 248 183 24 4 71 14 237 231 165 51 231 240 222 253 162 115 254 225 205 86 2 155 94 18 102 102 162 38 15 29 56 124 39 222 59 122 107 107 212 43 243 80 180 240 106 152 37 167 205 121 193 89 196 199 26 11 1 19 197 92 62 241 248 44 116 197 130 7 215 80 203 5 94 26 189 30 129 178 31 25 168 122 74 239 49 10 156 193 72 88 229 214 197 211 248 80 81 169 209 30 27 231 224 158 93 76 79 78 49 50 50 116 205 247 190 188 178 198 133 153 25 206 156 187 192 220 220 28 11 243 243 180 219 109 14 30 56 192 248 232 72 182 219 154 123 9 222 26 16 180 202 130 157 83 147 204 47 44 62 228 156 229 150 166 173 8 0 113 25 0 250 169 104 176 239 224 17 162 42 213 210 69 204 181 112 94 136 98 120 139 152 9 138 67 196 227 136 120 141 168 213 248 24 192 37 129 154 148 120 209 244 189 102 64 100 225 155 52 63 91 95 245 171 120 98 44 240 68 118 47 94 160 211 91 162 138 202 77 123 111 228 214 67 7 40 203 242 141 221 152 145 33 70 71 110 226 208 190 155 232 85 53 199 79 190 196 201 87 206 242 220 177 99 108 223 190 157 195 7 246 227 156 207 254 139 189 101 32 56 180 119 15 223 152 155 199 155 251 148 136 252 211 173 9 128 114 56 169 201 106 229 51 19 83 187 25 29 25 33 104 77 189 186 0 69 153 162 107 103 68 19 188 38 199 77 76 82 107 22 158 66 35 181 69 156 214 201 15 160 209 8 101 159 3 240 146 157 65 243 235 218 66 20 156 195 44 34 90 49 177 176 130 214 53 157 209 81 30 188 239 238 235 18 252 181 110 237 86 201 221 183 221 202 209 195 7 248 227 199 159 100 118 118 142 167 86 87 57 122 203 33 58 157 161 183 20 4 211 59 38 137 49 162 133 255 140 152 253 211 205 116 6 55 53 12 52 141 162 42 59 119 223 120 51 81 160 90 93 238 103 6 201 42 92 164 32 186 172 214 93 250 93 225 60 222 23 20 190 133 195 227 176 68 7 199 30 62 116 83 126 192 106 208 208 15 23 189 214 57 127 80 33 90 83 132 154 206 220 18 117 85 113 112 255 62 62 244 192 253 127 102 225 111 84 193 37 15 190 239 221 28 57 184 159 181 110 151 239 60 119 156 110 119 13 201 26 239 173 10 17 111 218 189 11 83 219 153 67 153 45 8 0 39 224 228 211 138 176 251 198 189 137 145 91 91 6 105 33 190 141 185 178 111 203 69 74 162 20 32 5 38 130 57 159 194 65 241 56 95 224 92 129 115 30 143 226 26 32 104 162 131 209 26 215 228 11 52 253 222 213 61 108 161 162 87 71 30 120 215 93 28 57 180 127 211 195 165 219 14 239 231 3 247 221 67 85 135 4 130 181 6 4 111 13 79 176 247 134 105 162 42 102 246 233 173 89 15 224 10 76 252 143 117 70 70 25 30 25 69 129 24 107 204 151 96 46 9 219 21 249 228 59 196 21 68 241 73 165 227 113 46 93 222 249 220 158 93 224 124 43 129 130 128 143 21 46 246 40 98 15 151 65 80 88 74 34 213 203 158 170 14 188 239 190 187 216 57 53 249 166 241 230 187 118 76 242 129 251 239 161 10 129 99 39 78 162 154 20 251 91 65 22 77 239 216 142 38 0 252 216 214 76 7 183 134 136 230 30 218 54 57 141 115 142 186 215 69 197 33 206 99 69 9 82 164 15 203 149 144 192 146 64 224 146 38 80 43 240 34 125 77 32 222 227 69 240 190 192 251 22 78 28 222 2 206 18 16 156 86 20 218 101 117 109 136 170 86 110 61 184 143 233 169 237 111 122 246 108 215 142 73 142 30 58 64 183 219 227 196 75 47 103 123 45 111 1 8 132 237 227 99 152 217 67 155 153 32 218 60 13 160 186 75 77 216 54 185 35 245 234 133 26 124 137 245 237 125 1 148 125 95 160 241 1 18 8 60 120 143 74 153 52 65 102 1 157 43 115 41 119 242 17 156 47 240 144 195 199 46 117 112 116 235 22 227 163 195 28 61 120 243 91 86 69 115 219 161 253 108 27 31 101 110 110 142 197 165 21 164 207 132 191 57 32 232 23 221 140 143 165 231 192 238 173 87 17 52 58 254 224 197 222 12 227 227 219 49 21 130 70 84 10 156 183 92 133 163 152 72 234 183 207 223 139 41 102 154 170 246 77 241 81 129 64 225 28 166 233 62 115 130 153 166 104 193 28 224 193 2 209 42 230 186 211 132 88 243 254 251 238 255 174 222 235 43 231 206 179 176 184 196 210 106 23 128 177 225 14 19 227 99 236 219 115 253 159 235 7 238 191 135 63 252 242 87 57 117 250 21 238 184 237 182 156 192 226 77 97 12 45 207 39 152 152 24 195 94 61 143 153 29 37 241 85 91 7 0 179 75 107 71 13 97 120 116 140 104 16 20 196 21 121 136 83 4 4 177 70 93 166 239 45 183 118 154 75 63 71 113 120 93 23 56 150 38 127 121 4 195 240 98 24 17 81 207 74 152 160 167 142 67 55 77 211 42 175 239 207 56 118 242 101 142 189 248 50 133 247 121 242 71 114 168 231 23 23 57 117 238 60 79 124 231 24 71 15 238 231 232 117 56 145 173 178 228 208 190 27 121 233 204 57 150 86 86 24 25 26 202 212 241 230 210 198 106 134 168 34 206 177 109 98 44 213 49 194 131 176 57 41 226 77 51 1 195 157 225 31 31 29 30 167 51 52 66 8 17 147 18 243 69 182 247 201 1 140 46 253 140 203 212 174 203 142 161 164 199 136 147 244 24 154 72 160 72 9 33 41 178 51 40 20 174 192 59 199 146 142 161 177 230 200 161 235 83 253 143 62 246 56 39 78 157 161 211 106 135 86 89 254 108 81 20 82 20 62 95 133 180 202 242 103 59 173 118 56 113 234 12 143 62 246 248 117 189 230 145 195 7 80 51 46 156 63 143 115 169 231 97 179 179 136 100 115 144 52 213 112 243 250 31 217 114 62 64 183 14 21 190 76 21 192 8 58 32 120 92 129 81 32 174 72 191 119 5 248 34 243 3 3 143 145 18 113 158 88 172 179 125 206 121 10 215 56 135 37 133 56 196 123 22 195 16 219 199 71 175 235 244 63 250 216 227 44 175 174 81 150 197 239 120 239 74 113 238 115 174 25 33 35 146 122 11 157 251 156 247 174 44 203 226 119 150 87 215 174 11 4 237 178 100 251 248 56 115 243 243 52 185 70 125 19 82 201 131 32 72 14 160 77 110 57 0 148 157 206 61 219 39 119 164 182 109 3 145 2 177 36 120 115 101 22 120 145 88 59 87 96 46 103 242 164 209 4 126 93 19 200 58 80 146 38 40 251 97 162 195 177 26 58 152 70 110 186 97 250 186 212 254 210 202 42 69 81 252 142 19 249 164 188 198 240 166 245 254 66 249 100 81 20 191 179 180 178 202 177 147 47 191 225 235 239 221 179 11 51 88 90 90 90 207 139 189 73 32 72 81 200 20 102 220 189 229 0 80 85 121 36 135 56 2 30 124 137 186 20 254 217 96 248 71 43 11 188 5 69 145 217 64 183 81 19 144 34 7 237 71 4 9 8 222 57 188 47 88 139 45 84 35 187 174 35 230 63 246 226 41 10 95 212 141 240 223 48 165 209 128 192 23 245 177 23 79 189 113 88 56 53 5 24 203 203 203 169 129 213 26 47 126 147 65 16 181 175 1 140 45 24 6 34 62 57 109 8 144 85 190 207 66 165 200 25 188 98 64 19 12 124 37 133 130 150 175 244 152 4 138 232 60 226 36 133 130 174 196 59 207 154 150 121 2 104 231 13 189 253 52 177 75 126 225 187 154 203 146 230 5 254 66 225 29 175 156 59 255 134 9 36 51 88 237 174 229 241 52 215 2 65 195 19 52 5 83 242 103 2 65 138 49 54 183 72 116 83 1 48 62 185 51 121 182 62 169 117 37 11 216 183 146 63 144 233 223 84 221 147 239 235 155 135 92 227 39 25 4 82 246 125 132 152 5 239 36 57 129 77 5 239 27 221 22 22 151 112 226 64 228 115 223 13 129 158 6 140 200 231 156 56 22 22 151 174 235 57 161 170 17 173 144 60 125 82 17 112 37 65 218 168 43 81 151 190 70 87 166 134 89 87 162 172 119 77 189 17 8 154 57 200 59 167 38 217 76 34 104 243 6 68 152 225 196 97 6 193 74 240 32 146 179 116 78 49 149 20 8 137 34 22 17 77 41 97 39 17 195 225 204 161 22 113 38 96 185 49 220 20 162 34 162 68 98 26 248 36 215 223 130 189 180 218 77 21 234 127 22 60 231 40 173 225 10 222 232 209 38 70 93 215 120 145 156 0 27 34 22 163 80 52 225 95 202 152 59 82 211 170 183 252 190 212 16 139 169 32 70 148 168 134 119 118 205 16 49 113 35 155 171 1 54 177 30 32 35 53 171 41 39 69 42 187 53 135 197 136 120 135 105 92 143 149 157 38 1 91 250 222 76 16 149 126 4 45 46 230 82 172 196 7 8 9 48 165 164 146 178 178 181 133 230 91 73 58 161 181 174 161 146 178 154 234 11 118 125 225 118 218 103 158 75 125 145 3 114 171 246 223 135 110 191 133 184 251 1 234 253 127 21 157 190 21 73 131 143 240 22 136 49 100 176 211 7 129 55 233 155 142 45 9 0 113 46 39 71 26 32 88 30 214 84 128 79 228 142 56 193 98 202 223 99 9 12 146 53 131 72 158 235 101 17 203 192 72 165 88 33 129 72 21 71 76 71 200 140 186 170 222 240 61 141 13 119 152 95 88 236 23 121 127 87 26 45 91 153 177 235 24 54 45 89 48 85 168 41 93 64 112 248 150 129 107 195 109 15 210 250 43 191 133 94 252 22 118 233 57 112 142 206 233 175 16 95 249 143 216 183 63 207 48 127 31 221 54 78 245 174 191 75 125 239 223 33 140 77 225 93 65 140 169 46 34 87 208 246 205 65 138 98 100 11 106 0 96 97 97 142 93 55 237 238 59 66 70 106 204 76 115 62 18 130 165 80 76 27 198 44 141 244 18 83 44 38 182 43 17 135 14 117 14 167 17 113 100 167 42 49 136 42 66 225 227 117 189 159 137 241 49 78 157 59 15 102 63 99 223 133 31 144 24 93 251 25 53 101 98 124 236 186 34 7 17 168 234 94 10 113 169 40 173 198 47 156 64 238 249 44 76 220 140 155 184 25 110 249 235 233 9 239 251 7 52 211 141 227 51 255 26 59 249 37 228 145 95 161 243 200 175 80 191 235 39 232 254 229 223 198 181 74 98 109 120 234 164 83 45 213 62 95 156 153 221 212 138 0 183 153 122 208 114 55 46 46 125 40 141 230 115 2 42 201 8 26 101 159 1 52 215 202 95 11 240 77 225 72 11 241 69 114 222 154 112 81 18 111 128 243 168 180 24 107 123 16 97 105 101 237 117 223 209 190 61 187 9 81 81 181 95 231 187 81 157 41 246 254 245 16 245 13 243 3 203 43 93 68 132 162 52 66 236 165 75 43 234 88 225 23 150 215 139 101 123 115 216 236 113 244 252 19 232 133 39 208 243 127 138 94 122 26 127 243 15 80 124 236 183 104 255 195 11 184 143 252 125 138 99 191 195 200 63 18 220 51 191 141 117 132 40 173 84 51 33 50 160 1 182 160 9 104 183 139 254 212 206 52 223 39 107 235 1 167 202 114 151 142 153 203 0 105 24 243 184 174 9 84 179 138 115 217 163 104 114 5 141 147 168 140 182 11 68 132 11 51 51 140 141 220 244 186 239 235 232 193 155 57 113 234 116 41 174 252 109 7 111 200 5 100 239 251 183 67 12 229 245 100 24 47 206 206 100 176 6 66 80 156 55 36 150 88 93 165 200 51 100 83 181 252 42 182 124 1 98 23 11 107 16 86 33 172 17 235 46 26 122 184 209 105 220 173 31 163 184 247 111 81 255 135 79 211 249 247 63 73 120 249 63 210 251 235 255 55 177 215 66 8 57 129 38 180 90 229 214 3 64 85 133 39 23 230 102 239 73 64 117 32 49 107 132 108 10 178 176 215 65 32 201 238 75 114 242 176 100 255 5 197 162 32 78 83 70 132 236 62 107 4 28 42 145 201 225 97 96 137 51 175 94 224 240 190 55 0 192 161 253 92 184 60 195 242 234 218 79 20 69 129 131 79 94 107 148 187 53 39 223 236 183 67 8 63 49 54 50 124 93 73 161 51 231 46 226 157 39 202 42 85 240 217 239 13 104 12 0 248 3 31 197 180 198 214 230 176 106 1 66 15 66 23 180 135 133 46 132 26 137 61 108 254 5 152 127 26 109 151 148 31 254 121 194 238 251 224 235 255 24 164 160 247 215 254 37 90 165 3 54 51 63 71 171 44 159 218 114 38 96 184 211 105 97 73 150 72 26 225 154 28 248 220 38 46 205 137 206 191 147 102 182 160 172 199 255 210 202 230 160 236 211 198 218 36 139 26 150 208 21 72 89 50 61 62 196 236 194 50 189 186 126 195 247 246 145 7 238 103 116 120 136 186 14 63 17 163 214 166 250 51 125 102 174 97 233 84 127 38 70 173 235 58 252 196 232 240 16 31 121 224 141 83 204 85 29 88 88 90 129 178 38 198 30 33 214 84 90 19 52 208 57 251 101 112 160 245 50 210 91 194 22 95 129 222 2 84 75 88 236 98 177 130 122 5 155 63 129 93 124 12 187 248 53 152 255 22 44 31 67 207 124 145 226 6 143 255 224 223 161 120 250 183 104 255 254 223 134 118 10 31 197 121 68 100 118 203 105 128 110 85 125 190 14 225 51 107 203 61 164 213 134 152 204 65 63 159 109 134 73 26 225 6 46 59 136 36 77 128 101 128 88 122 75 46 85 12 155 58 28 17 37 144 154 181 34 98 9 72 123 38 70 185 184 184 202 241 147 47 115 247 209 91 174 11 4 57 29 92 20 222 255 51 231 220 63 107 244 128 97 168 42 33 198 235 78 7 3 60 255 226 41 74 95 210 115 151 40 99 158 66 34 64 168 9 81 19 7 81 45 163 213 60 84 139 41 186 17 193 206 254 9 241 220 55 177 249 83 72 219 35 29 193 181 129 18 88 141 208 10 216 146 167 28 219 131 221 120 152 242 233 127 137 29 250 24 51 55 255 24 226 74 12 123 116 43 70 1 199 156 56 86 151 151 25 153 106 99 121 16 75 110 232 94 239 183 109 64 32 174 79 153 218 128 143 208 127 91 146 34 255 84 59 144 35 1 147 52 94 6 99 122 98 156 161 11 179 156 120 229 44 71 14 237 167 125 29 21 192 71 15 37 225 110 70 65 72 29 2 47 159 126 21 95 194 90 92 6 41 113 20 132 40 168 171 137 22 211 31 53 180 35 129 32 172 97 203 23 136 47 252 1 182 148 58 165 24 26 197 181 5 105 43 210 2 105 41 82 58 40 61 82 6 136 175 208 58 104 244 102 38 232 252 127 127 139 51 63 250 46 204 119 80 235 62 178 229 0 32 121 59 198 242 210 18 227 83 83 136 164 212 168 147 92 217 50 192 145 39 16 100 110 91 114 243 166 90 10 249 250 11 30 92 118 12 61 104 3 37 69 92 36 154 18 162 227 206 27 111 224 79 95 122 133 175 63 254 20 15 190 239 250 171 130 246 237 217 13 123 254 235 170 170 30 123 226 105 218 101 139 87 245 52 94 3 181 9 190 72 12 158 215 192 208 236 51 201 125 233 108 67 87 47 96 11 167 8 79 253 86 26 100 89 12 129 120 164 5 180 129 182 131 150 66 105 208 6 241 134 120 160 104 65 103 152 242 168 39 126 103 134 145 175 254 207 196 163 255 27 7 111 216 125 108 11 134 129 92 104 0 32 190 81 237 249 116 75 26 224 200 192 174 181 65 114 204 36 133 14 77 127 169 229 223 53 195 161 200 153 196 126 238 192 21 68 39 76 140 140 51 61 62 206 220 210 18 207 93 71 234 118 179 110 207 191 248 10 203 43 107 172 72 151 101 169 169 164 69 52 163 14 53 33 214 212 177 198 85 139 224 192 122 243 216 236 11 132 111 255 243 52 193 52 151 194 161 1 171 34 214 141 216 114 68 234 128 43 3 174 85 35 157 0 237 2 58 147 208 153 198 221 185 23 27 25 99 239 249 223 165 21 230 169 202 201 243 91 15 0 105 194 198 195 43 75 11 132 42 181 92 55 105 236 70 197 111 0 65 223 17 188 6 8 6 56 132 4 6 235 39 145 210 116 144 148 88 10 34 220 113 211 94 134 90 45 142 157 124 137 11 151 103 223 116 225 95 154 153 227 196 75 175 32 30 158 143 115 4 74 130 43 168 40 168 241 121 12 93 72 38 160 221 193 170 5 226 217 175 227 52 16 71 118 83 77 221 133 239 205 225 123 179 184 213 57 100 126 1 102 87 8 167 106 122 79 58 122 223 110 81 191 208 194 150 135 96 108 27 12 79 194 240 14 138 7 110 33 200 8 239 58 254 15 30 223 243 31 30 220 130 84 112 66 192 239 5 179 135 86 23 23 105 77 76 16 98 86 251 178 238 8 70 88 55 7 89 221 155 177 174 45 220 250 125 214 15 43 242 184 73 33 187 149 137 41 132 136 243 158 123 15 28 224 155 39 78 240 181 39 158 228 131 247 221 195 174 29 147 111 154 240 31 251 214 51 180 203 146 23 221 2 222 10 2 158 154 136 119 146 249 0 135 152 199 213 203 200 182 253 176 54 143 172 205 129 192 252 77 63 204 252 29 255 19 195 46 80 186 148 49 45 206 127 3 234 85 138 217 227 180 230 142 209 57 247 24 118 110 149 234 92 128 111 85 248 187 141 226 125 123 112 239 61 64 253 39 47 50 185 248 173 187 196 109 193 108 96 118 4 126 67 156 251 245 217 203 23 217 179 109 98 221 15 104 146 91 13 8 52 141 122 107 204 67 31 4 185 126 82 108 253 190 141 32 160 191 5 12 113 168 56 80 165 51 52 198 187 15 223 202 55 79 60 207 31 63 241 36 71 15 29 224 182 77 238 14 58 254 226 41 94 120 241 21 218 165 231 213 114 21 76 104 23 69 58 241 226 250 131 241 20 240 174 205 246 165 19 233 15 239 205 162 171 23 18 173 21 215 136 221 25 130 118 41 188 163 40 60 186 253 32 81 74 170 221 239 101 73 58 168 27 162 92 120 158 209 19 191 203 232 11 159 39 126 243 57 244 59 175 80 124 248 189 248 123 142 18 190 125 172 133 115 211 37 92 220 106 62 0 128 57 113 151 230 46 95 204 17 254 186 31 208 48 177 38 130 56 136 253 16 108 99 54 49 191 72 195 200 246 205 131 53 102 33 71 10 154 243 36 234 60 17 161 51 52 202 187 15 31 101 168 221 225 216 139 47 243 200 159 124 243 186 56 130 235 137 245 191 242 216 19 156 120 233 52 101 171 100 166 163 88 81 208 42 74 74 74 218 190 192 172 160 146 100 6 34 45 122 121 56 54 26 176 110 210 0 2 88 232 17 235 21 98 189 70 168 86 176 106 5 95 45 81 244 230 113 221 121 138 222 37 124 247 60 113 120 7 243 247 254 61 206 253 183 95 103 233 253 191 136 160 196 47 127 21 123 238 68 74 164 137 251 249 173 232 4 54 69 150 159 9 170 44 207 205 227 179 51 200 181 64 32 3 32 24 92 198 44 108 248 157 13 0 101 16 4 46 79 11 37 87 218 68 28 237 206 40 239 59 122 39 211 19 219 152 95 90 230 15 31 254 42 79 61 247 252 159 9 8 85 29 120 250 216 11 124 233 145 175 177 178 186 134 235 120 86 70 64 10 79 145 235 20 91 69 65 233 28 165 115 4 243 84 226 169 40 232 145 134 97 48 52 137 173 205 38 134 83 96 102 234 126 170 186 74 249 130 208 163 10 93 52 246 112 84 120 93 195 133 85 138 122 25 87 45 226 170 25 176 21 86 143 124 130 99 63 252 8 23 182 191 23 233 46 167 1 86 194 135 183 166 9 72 40 248 77 231 252 111 92 62 127 150 125 219 183 81 203 128 31 144 37 41 125 245 79 106 23 199 250 20 113 250 47 141 115 237 19 72 164 77 96 27 242 57 89 147 164 240 81 208 92 103 224 156 231 238 3 71 88 88 94 226 153 87 78 114 242 204 57 78 156 62 203 228 248 56 123 247 236 98 215 212 20 163 175 51 32 226 226 236 12 103 206 93 100 126 113 9 239 61 237 118 139 56 210 66 75 193 69 165 52 205 66 16 2 142 34 79 61 209 16 169 208 52 163 72 90 76 207 61 129 237 126 55 116 103 177 122 45 85 12 139 67 197 167 13 103 18 145 58 45 184 104 89 129 115 46 249 54 22 241 49 160 26 48 173 113 22 184 120 113 142 231 15 125 150 191 250 236 79 254 182 179 250 147 198 230 149 133 23 155 47 127 49 17 121 118 97 110 246 118 11 217 153 179 107 129 96 160 118 110 144 49 196 250 213 64 210 48 134 89 19 136 228 161 77 54 224 15 12 56 141 106 105 70 124 141 50 54 60 198 135 110 191 151 139 11 51 188 58 59 195 133 197 57 230 142 47 129 157 224 90 187 158 211 248 56 65 92 250 58 60 50 132 12 181 177 86 26 8 97 170 20 46 77 22 75 147 78 4 156 161 38 20 56 180 16 76 35 61 45 80 202 68 135 199 138 184 116 150 102 152 126 52 168 197 83 72 153 250 32 81 92 72 121 255 2 151 156 72 28 106 105 150 18 40 189 149 30 107 139 151 241 29 254 192 161 63 9 118 31 112 116 235 106 128 84 28 242 105 212 61 124 225 244 75 236 220 127 144 170 206 142 221 192 233 39 207 236 51 73 12 95 42 133 202 234 125 16 4 27 24 195 43 64 144 53 4 3 78 163 98 249 223 82 52 10 83 99 147 236 156 216 78 168 3 51 203 139 44 118 87 88 94 91 75 173 214 172 175 159 199 57 90 173 18 87 20 184 86 153 242 144 22 243 16 107 135 73 72 14 30 105 40 165 207 160 46 17 42 103 148 185 20 172 86 79 143 86 86 111 61 100 109 33 253 173 102 92 30 191 139 33 122 4 241 105 187 137 36 202 91 98 68 136 20 78 16 41 112 169 166 10 47 112 230 210 44 206 106 156 107 255 31 173 250 50 85 177 237 142 38 162 222 186 0 128 71 156 115 92 62 127 150 201 155 246 167 174 153 72 206 2 14 128 128 1 16 184 1 16 12 208 198 205 196 140 107 210 198 121 19 184 228 42 161 126 56 153 253 136 104 169 22 209 153 33 190 96 114 124 27 219 70 39 136 40 209 12 53 165 54 35 144 242 0 117 140 68 75 99 233 66 127 74 185 166 33 150 46 13 155 54 19 124 174 244 245 150 166 147 150 24 161 153 101 172 37 99 189 139 185 246 1 168 87 251 211 40 87 91 19 148 213 37 34 137 195 112 18 211 88 5 124 42 126 17 197 91 157 114 30 190 160 174 35 51 115 179 184 162 3 226 190 154 199 240 40 240 196 150 116 2 55 218 103 247 9 195 49 115 250 37 252 64 129 200 6 239 254 10 54 80 242 128 199 193 74 78 99 189 14 222 250 133 39 87 51 134 92 195 105 68 4 149 164 122 85 83 153 153 229 210 51 203 129 155 168 228 45 163 14 39 62 109 20 167 196 139 203 179 10 114 79 130 164 203 73 129 52 93 75 210 148 171 167 159 61 158 162 40 153 174 206 165 132 87 232 161 97 173 255 142 106 245 212 20 84 105 226 65 34 145 40 211 247 82 16 115 163 140 19 195 75 224 236 171 23 240 26 16 173 63 193 202 43 13 219 6 240 239 182 54 0 210 237 139 206 59 102 206 159 67 131 97 238 10 42 120 3 8 214 133 38 78 136 54 0 130 124 146 6 133 62 200 38 14 110 37 217 0 130 43 88 70 205 13 166 66 158 33 76 82 183 56 135 115 5 66 35 200 60 157 196 149 73 168 110 253 247 233 114 248 92 222 238 115 199 146 151 245 203 73 138 16 16 7 161 66 52 38 251 95 140 166 253 70 120 210 28 212 34 127 95 80 75 186 42 245 4 41 241 69 27 141 194 165 217 249 52 92 83 228 139 87 212 129 125 113 203 3 32 133 132 238 33 156 227 220 11 207 80 52 221 176 131 194 188 18 4 77 116 144 231 248 173 131 32 151 69 191 22 8 100 227 138 154 13 32 24 248 55 109 160 214 200 139 36 78 209 165 126 196 230 116 251 220 141 228 154 159 197 227 155 145 53 25 24 169 95 209 167 41 103 178 126 159 243 5 206 151 12 199 229 164 169 44 47 183 53 227 226 196 157 212 230 169 205 17 251 32 104 174 196 40 6 215 34 74 202 119 28 127 229 18 222 151 184 206 246 135 164 28 70 202 33 26 24 3 199 223 9 26 0 129 71 196 249 231 150 23 230 89 153 95 24 200 246 241 250 154 192 73 191 179 166 239 238 95 11 4 131 96 24 48 5 215 4 193 0 72 146 221 205 64 192 6 78 125 51 166 166 72 160 32 11 63 131 192 15 152 130 230 18 241 235 166 66 60 226 74 246 44 62 211 31 155 71 174 134 18 51 130 120 106 151 79 60 146 105 228 162 175 17 162 20 168 107 113 113 177 203 220 114 15 239 253 115 2 143 96 138 179 0 86 167 73 171 91 113 66 200 107 250 2 34 183 139 247 156 123 225 59 96 169 231 253 117 65 32 235 228 80 10 17 101 195 235 109 0 193 134 215 25 0 193 160 159 160 92 85 133 212 184 25 78 250 153 133 180 112 186 177 243 46 147 61 190 88 31 94 37 62 247 39 22 185 69 61 127 47 5 206 26 32 148 120 159 122 31 233 115 161 164 44 160 41 149 121 130 22 212 86 80 211 162 166 32 136 207 64 240 68 95 18 204 243 244 201 243 168 180 80 41 111 15 161 139 134 46 86 45 243 197 91 63 143 179 170 95 89 181 245 1 208 124 12 206 253 138 70 227 252 11 207 109 168 24 126 109 77 192 213 32 24 192 193 149 143 185 82 35 152 12 128 192 93 241 111 201 186 166 113 217 109 240 249 131 112 98 201 177 27 16 184 115 110 221 20 100 167 111 208 41 244 46 245 64 22 253 199 20 121 48 134 244 255 48 65 121 126 199 67 41 91 40 158 90 10 66 154 149 158 65 80 16 124 137 73 139 103 78 158 75 203 46 156 255 21 151 65 154 252 150 136 183 58 117 85 109 162 124 222 252 229 209 73 24 191 44 222 205 44 205 93 102 233 242 76 94 40 226 94 27 4 87 0 36 183 142 92 173 206 245 26 53 134 114 197 186 186 107 56 141 131 209 66 65 163 9 44 131 32 255 44 130 23 55 208 154 94 224 100 125 102 145 244 155 85 75 74 87 224 165 68 164 196 185 54 211 243 223 202 165 220 235 106 72 36 239 61 198 101 199 47 107 128 28 1 136 111 115 110 118 137 139 243 171 168 148 51 133 216 47 123 73 83 81 188 24 133 40 158 56 248 87 109 93 30 224 90 14 33 184 29 206 23 118 241 165 227 180 71 238 167 108 181 251 29 53 27 226 251 129 204 225 149 28 64 211 99 151 219 68 82 175 64 30 159 178 177 218 216 54 84 36 55 239 97 48 205 220 100 28 145 220 193 150 253 129 230 227 109 76 141 55 73 42 61 231 28 36 115 15 206 165 240 84 162 38 1 59 77 209 133 111 209 174 23 51 156 154 119 109 20 102 224 10 42 45 40 44 61 54 133 145 70 89 192 98 183 203 243 47 189 74 233 91 4 145 29 151 67 139 75 97 29 172 42 5 171 126 252 154 44 230 150 7 64 95 17 56 247 160 198 248 200 217 99 79 177 255 238 247 208 148 103 95 63 8 36 77 209 146 129 30 131 65 16 92 131 54 78 130 94 167 142 7 211 204 105 78 81 122 189 204 37 225 51 207 111 182 206 49 40 169 173 93 196 163 25 24 81 211 14 162 104 233 123 141 150 248 75 151 154 91 108 192 9 196 148 249 209 67 20 46 157 246 30 169 225 213 139 163 229 32 96 60 249 244 9 90 226 112 34 15 58 217 72 244 37 160 26 142 205 223 31 244 22 118 88 10 130 61 234 156 251 205 88 87 159 58 245 204 19 220 124 231 125 111 12 130 193 103 231 101 15 27 30 43 92 1 2 27 168 39 96 29 4 169 64 113 189 79 225 10 16 52 245 9 214 104 3 1 44 151 165 187 22 226 161 51 123 146 61 207 253 26 67 51 143 49 118 249 155 20 85 122 179 75 83 183 178 50 118 144 211 55 255 20 39 14 125 146 161 181 179 169 172 189 121 151 22 89 30 57 76 73 51 64 163 160 18 163 229 161 114 202 179 79 61 67 52 193 21 254 87 134 208 71 133 43 187 191 26 215 150 119 50 0 250 60 192 207 57 231 119 132 238 218 199 79 61 253 4 251 223 117 31 22 154 252 255 181 64 176 222 17 219 7 193 160 58 111 158 227 50 109 204 21 133 166 178 94 131 96 3 249 131 117 74 57 61 118 189 153 53 211 202 226 81 159 218 212 218 115 47 176 251 145 255 142 225 179 79 160 67 224 246 63 4 7 255 46 49 116 145 216 101 120 249 60 35 23 159 100 250 143 191 196 93 223 250 123 120 235 161 126 184 95 25 13 138 39 173 187 67 10 34 130 58 168 80 142 125 235 41 172 87 211 41 203 47 122 137 191 44 98 153 171 176 171 192 239 114 167 148 219 196 40 224 45 239 177 206 17 192 39 156 247 51 161 183 58 121 225 228 9 118 29 58 12 65 250 131 17 174 9 130 156 180 217 160 198 175 101 211 7 5 123 133 182 24 112 8 114 159 194 70 48 52 5 103 230 28 34 37 148 5 163 199 255 13 211 95 250 41 108 114 2 249 248 255 69 121 231 79 195 218 37 108 109 6 186 243 216 218 60 210 155 133 91 62 134 45 188 140 123 241 203 232 226 233 129 26 135 52 39 49 182 39 41 115 77 163 247 5 181 70 142 31 63 70 175 91 209 41 90 207 121 23 62 225 49 10 49 202 102 9 214 128 6 240 18 137 212 64 133 183 240 206 5 192 0 8 166 156 47 46 45 93 58 191 99 109 105 145 155 239 188 175 63 248 225 245 65 208 156 135 107 216 116 6 181 69 6 1 3 245 135 141 22 176 43 64 208 56 143 185 46 193 137 199 21 37 163 199 255 53 19 95 250 105 120 207 39 41 255 202 191 72 141 158 11 47 161 75 231 176 153 227 216 226 233 148 239 15 107 88 88 77 65 213 228 161 228 248 173 92 90 15 109 204 152 153 186 155 86 119 17 87 182 169 45 114 252 219 79 177 178 182 66 203 149 51 209 217 237 51 177 205 229 216 222 24 189 108 48 2 142 158 116 248 79 211 223 224 11 151 255 226 59 27 0 3 32 216 233 124 49 19 186 107 147 27 125 130 60 79 224 74 16 52 153 190 1 97 93 165 206 175 4 193 21 218 162 1 88 243 9 111 108 90 77 51 126 40 218 20 107 151 24 127 248 167 145 59 127 136 226 71 254 45 116 47 163 203 231 177 11 223 194 46 61 131 214 171 72 189 154 146 61 161 11 171 23 177 149 11 104 119 17 41 90 108 108 141 133 150 131 118 217 66 99 224 185 199 191 77 232 213 180 138 214 115 1 110 119 84 253 69 32 253 255 95 129 0 19 3 106 58 214 131 77 212 0 142 183 241 38 137 16 152 114 222 127 49 244 214 120 249 169 111 80 247 122 136 163 31 218 113 37 191 127 37 109 252 26 89 64 219 64 252 108 164 141 215 239 191 154 36 82 73 3 45 70 254 228 23 48 7 229 223 248 119 176 118 9 93 60 71 60 245 8 54 115 28 141 1 137 33 249 28 171 115 232 133 167 136 151 159 199 122 43 136 43 215 19 26 3 255 66 89 64 88 171 120 234 235 143 81 39 225 127 81 68 110 223 64 152 177 78 81 55 124 68 255 74 139 113 178 253 183 63 31 0 88 79 26 201 39 156 247 191 25 235 192 233 239 60 206 210 236 12 206 191 6 109 60 72 246 92 65 243 198 43 179 128 215 98 12 117 128 86 190 138 44 18 192 163 14 252 11 159 167 184 255 103 33 214 232 234 69 236 204 215 144 181 25 136 53 34 17 116 9 61 255 21 116 246 79 65 151 161 104 229 225 86 57 254 207 141 49 130 178 186 243 1 22 46 27 207 61 253 109 156 20 148 69 235 179 226 228 19 108 129 155 219 10 111 34 231 12 126 206 121 255 32 192 249 19 207 114 246 248 179 41 46 247 146 43 97 175 145 228 185 162 155 72 6 65 48 152 5 28 44 52 117 235 218 130 43 25 67 231 48 239 113 151 142 35 61 112 135 127 36 9 255 226 119 208 238 12 72 23 138 26 233 157 132 75 95 194 149 11 248 209 2 63 230 241 35 224 58 32 133 93 21 248 92 238 58 94 60 118 44 197 253 173 242 65 17 249 12 91 228 230 216 50 55 65 68 30 21 231 197 23 229 204 234 194 28 39 31 255 26 43 115 139 248 34 121 244 137 62 150 107 131 64 250 29 3 215 6 193 181 90 211 55 220 79 63 119 224 170 212 200 65 181 8 107 51 176 242 10 206 117 17 87 35 221 103 177 185 71 145 97 112 163 14 25 17 100 88 113 195 138 27 82 100 200 144 150 109 204 134 36 207 255 98 233 91 2 238 81 187 194 140 125 31 0 87 155 132 29 206 251 207 138 8 103 159 127 146 87 158 121 10 141 70 90 51 208 8 78 54 244 17 216 64 253 64 191 13 141 141 243 9 250 32 24 76 10 137 100 171 42 121 225 53 196 78 238 44 234 45 67 181 0 186 0 174 130 238 119 96 225 191 224 71 61 110 196 144 161 136 27 174 113 67 49 125 63 164 184 78 6 66 219 50 139 232 153 14 167 254 67 207 141 236 234 201 48 181 180 8 180 8 148 68 105 50 16 223 7 192 53 76 130 251 140 56 191 203 23 229 179 221 149 37 78 124 243 191 112 225 228 9 66 48 124 33 136 23 68 252 198 83 222 72 54 71 3 241 202 100 83 3 130 43 146 77 174 1 129 9 102 145 56 125 107 26 97 117 226 247 17 157 3 87 35 241 28 178 240 48 50 226 145 97 69 58 53 210 169 144 118 133 116 42 92 167 70 134 234 212 234 221 182 4 130 210 80 10 58 186 252 135 255 248 229 155 88 244 59 88 240 59 88 240 147 44 186 237 172 200 24 149 180 208 44 6 123 157 171 153 193 244 206 102 2 191 123 109 112 17 184 195 249 226 65 113 238 225 197 153 11 204 95 60 199 196 244 30 166 247 29 162 104 9 168 75 218 33 87 2 147 115 6 136 229 69 20 87 183 166 179 129 64 146 129 133 241 137 180 33 122 186 119 253 77 58 47 255 123 236 150 135 144 86 128 75 127 132 12 121 104 107 242 243 154 53 56 26 83 88 22 2 132 34 187 242 5 56 65 23 74 68 140 138 206 231 74 183 157 127 114 234 16 228 169 95 105 11 186 241 137 201 175 50 38 117 154 153 248 58 222 189 33 169 110 176 79 49 127 15 0 160 175 13 224 17 112 34 222 125 92 156 251 194 210 204 5 22 46 158 99 120 124 59 219 118 237 97 98 50 205 35 192 60 150 6 244 230 173 36 164 137 164 150 10 62 54 176 130 108 164 141 27 178 193 76 145 8 171 31 252 39 12 125 231 223 16 30 255 183 148 183 78 35 197 60 180 5 138 33 104 109 131 214 104 250 248 76 211 192 167 122 30 169 215 242 88 100 163 190 60 212 76 204 250 61 21 31 43 58 56 105 229 115 156 22 221 98 171 204 187 237 116 28 185 15 224 245 111 145 130 21 25 33 13 22 216 164 143 119 179 38 79 254 209 215 190 241 150 224 33 191 223 7 205 236 55 76 245 246 166 105 99 108 114 39 227 147 59 153 152 218 65 51 99 66 154 81 235 170 169 26 169 201 205 103 134 78 108 253 44 137 13 16 48 190 5 45 199 208 211 159 99 244 209 159 69 59 83 180 238 88 129 201 22 180 246 164 190 253 114 20 124 153 52 64 189 2 221 121 168 206 67 189 66 125 124 130 48 95 34 222 102 17 166 174 200 235 101 219 171 148 86 35 214 77 90 225 122 228 32 2 148 168 12 225 126 254 194 247 136 6 184 22 121 4 143 8 220 97 41 70 252 148 153 125 102 101 97 110 231 242 220 101 206 62 175 180 135 71 25 26 29 99 116 98 27 237 86 155 225 137 137 52 138 181 225 231 52 7 126 154 65 144 85 129 235 187 16 73 35 92 62 244 51 44 158 127 137 189 39 127 149 234 169 9 100 79 155 242 222 109 48 181 27 58 219 161 232 36 122 184 187 0 107 5 241 217 21 234 231 75 44 20 136 179 89 24 20 62 27 84 183 226 168 164 149 214 227 97 215 181 18 216 178 254 80 113 180 191 87 53 192 107 168 133 156 39 178 79 155 218 143 161 246 144 89 236 79 1 75 253 131 5 195 163 163 136 166 85 241 35 35 19 137 179 207 154 98 101 121 145 24 82 185 213 202 226 18 33 42 20 29 98 49 206 244 202 99 220 113 238 87 105 119 103 80 117 200 72 7 183 123 18 183 103 55 172 117 137 103 95 37 158 157 67 10 15 222 129 227 55 69 248 185 235 51 213 127 150 207 95 232 124 250 149 239 3 224 154 55 213 166 97 104 26 211 143 96 28 49 227 199 193 122 170 220 143 105 30 191 171 235 161 67 147 95 144 156 85 80 30 23 145 54 184 207 199 98 248 120 229 182 125 249 7 159 251 193 153 86 88 252 27 145 214 207 153 242 23 147 89 201 143 119 2 222 157 23 145 223 67 228 211 111 69 120 191 89 0 120 199 153 128 235 114 26 147 92 46 130 251 98 62 97 255 107 42 227 162 153 189 156 55 152 177 161 26 181 15 128 13 113 114 204 133 152 10 194 239 34 242 187 34 146 102 24 100 240 228 156 70 63 4 125 39 221 254 252 1 160 169 3 52 58 152 222 136 177 205 140 35 96 181 42 183 98 154 248 158 107 107 128 134 25 122 94 68 10 144 231 21 63 111 226 79 27 174 194 56 136 217 93 166 118 24 213 118 83 97 98 78 28 222 157 21 225 69 144 71 223 73 32 40 254 28 9 93 192 238 54 179 67 168 221 98 22 219 102 22 205 44 154 154 138 43 116 120 116 180 43 138 185 194 217 107 248 0 34 32 43 139 75 55 215 49 58 138 206 205 81 91 126 215 210 195 18 105 139 6 23 77 53 200 72 71 221 238 201 238 128 15 32 241 236 220 14 10 191 27 47 15 225 248 138 8 95 126 51 125 128 239 3 160 95 241 107 119 153 217 123 77 109 151 105 12 22 53 180 135 71 123 67 163 99 107 163 19 219 172 221 106 219 240 196 132 73 138 254 244 26 81 64 34 2 55 70 1 66 33 204 175 32 173 175 253 67 183 247 228 175 90 45 19 78 246 180 99 251 222 125 198 174 61 208 217 110 77 20 80 116 119 192 218 37 137 207 158 146 250 249 238 154 133 226 221 56 59 8 252 243 215 150 85 238 83 52 101 99 247 227 245 69 1 223 179 0 200 78 235 30 51 251 11 166 122 192 76 107 83 13 99 147 59 23 198 39 119 218 196 212 14 203 36 159 53 60 64 172 66 159 7 208 171 121 128 216 240 0 58 200 3 120 97 199 201 207 49 122 252 127 167 238 243 0 53 132 121 152 113 80 46 95 197 3 248 201 37 252 253 43 161 62 62 81 135 249 114 92 188 253 52 240 175 54 157 7 96 232 123 15 0 89 240 135 204 244 47 154 234 136 198 88 15 143 111 95 220 182 107 79 152 152 156 234 15 23 177 188 120 73 210 196 174 84 237 105 154 203 190 109 67 5 114 127 176 68 83 58 158 139 65 69 28 110 101 129 145 63 250 89 209 189 247 91 121 235 52 172 126 89 88 173 140 234 2 84 61 104 141 10 20 150 153 64 161 158 55 234 53 44 150 82 236 233 5 139 46 196 101 55 33 142 143 34 246 71 98 169 152 227 74 38 240 47 77 126 147 221 110 238 250 153 64 55 194 239 93 250 240 247 16 0 146 170 223 109 166 63 108 170 195 26 99 53 49 189 103 113 122 223 33 45 90 98 228 154 252 38 23 32 54 200 235 39 97 251 230 196 15 88 208 102 126 217 58 3 152 83 46 226 192 195 240 215 126 30 27 25 163 184 255 39 49 206 98 139 79 32 186 4 237 10 9 23 161 154 187 34 23 160 88 40 210 85 21 184 241 24 226 154 139 152 221 225 44 254 231 210 122 214 63 237 3 185 128 109 58 199 54 230 174 59 23 144 172 69 245 189 1 0 51 235 96 246 151 84 227 13 26 99 181 109 122 207 242 212 222 67 177 213 74 19 194 180 94 23 186 153 105 142 200 53 45 25 186 74 248 169 177 40 207 30 106 76 64 147 19 104 182 115 145 0 96 157 167 255 13 220 245 35 34 99 123 208 153 11 200 182 143 98 23 254 31 69 91 142 82 32 68 67 98 22 136 19 98 129 69 135 245 10 172 114 88 37 230 10 53 169 108 173 69 247 22 116 254 249 159 223 127 14 141 203 212 161 75 136 21 49 174 48 162 203 180 172 215 47 116 125 93 199 207 200 21 193 246 231 28 0 105 59 230 93 166 250 126 141 177 26 26 155 88 217 115 235 93 209 151 233 196 199 208 20 77 106 159 65 205 29 228 154 59 59 212 242 148 242 65 159 89 76 181 47 252 129 251 212 114 35 151 24 136 199 93 124 30 3 202 195 63 138 185 237 160 37 230 247 192 196 67 48 243 21 165 213 130 194 245 11 74 80 135 69 129 224 176 90 176 74 208 174 195 106 212 83 91 215 141 238 249 7 251 158 121 126 60 94 198 226 50 117 172 168 181 166 178 94 218 130 146 38 27 189 174 111 111 155 220 19 184 101 1 144 42 118 237 71 85 227 54 96 233 198 91 239 137 163 83 227 218 104 90 51 147 129 242 143 84 1 144 39 141 179 62 48 74 124 191 163 202 26 225 247 219 52 26 251 47 89 245 167 42 190 220 198 33 224 187 179 233 97 237 81 163 53 1 110 34 57 127 157 59 96 194 136 151 254 24 41 61 226 61 102 121 168 81 20 44 136 88 16 179 94 2 129 160 206 17 227 197 226 230 189 109 93 249 145 182 173 254 65 180 10 163 194 72 243 132 109 19 155 60 222 225 0 48 204 216 97 26 127 64 99 100 100 251 212 202 13 135 111 87 231 176 24 232 215 215 175 159 220 44 233 65 225 179 222 228 137 13 8 31 214 133 223 172 95 27 180 251 3 151 169 161 173 237 233 133 90 227 48 52 5 35 251 208 185 46 98 17 58 183 35 219 75 236 226 215 49 105 182 159 121 44 74 214 2 244 59 157 250 158 191 197 16 99 24 174 181 250 113 135 254 103 129 203 27 107 154 222 190 155 219 50 42 223 236 110 141 241 163 64 181 251 240 237 107 55 30 185 189 22 33 196 104 121 106 98 243 241 18 4 11 24 81 212 130 56 66 58 127 4 51 162 79 247 5 49 107 126 31 197 168 129 40 102 1 77 103 21 250 207 171 179 232 34 170 81 98 12 186 243 72 176 54 65 79 252 65 112 195 211 65 166 239 136 174 51 21 177 78 36 148 193 218 135 2 59 255 114 208 122 34 196 229 16 226 82 140 113 133 160 93 130 5 105 94 59 144 223 211 142 142 86 7 143 30 237 70 211 170 170 234 31 52 179 91 183 202 177 115 91 65 229 155 217 189 26 227 97 95 22 43 123 239 184 191 55 54 57 85 107 164 86 181 32 102 177 17 112 86 180 17 75 63 139 35 246 5 187 46 252 152 99 251 244 152 244 60 237 3 34 3 166 1 148 164 165 182 1 179 4 44 98 116 74 140 183 252 120 12 143 255 179 136 47 163 27 158 14 114 211 7 131 13 77 5 124 25 205 124 196 141 69 183 251 195 209 77 190 39 226 70 3 161 138 162 49 230 245 168 17 177 152 70 29 185 48 124 233 177 56 177 67 170 219 238 186 183 167 22 150 235 80 221 101 106 247 126 207 3 32 219 251 143 104 140 123 139 246 208 202 254 187 223 219 43 219 237 218 148 202 84 155 83 28 4 42 160 106 78 174 164 239 43 96 224 49 3 143 53 203 143 33 96 84 235 207 79 130 206 247 135 100 169 25 120 30 193 89 8 68 171 86 222 247 235 149 40 85 253 187 255 77 96 104 103 229 198 247 4 127 243 131 65 166 142 84 206 23 149 249 162 66 36 216 240 246 202 237 186 59 248 29 183 6 105 143 4 211 58 228 29 111 21 72 101 72 5 132 58 16 138 161 86 239 238 247 63 208 43 219 229 114 21 170 189 102 246 193 65 138 168 89 189 171 164 41 235 27 46 36 183 133 186 63 31 84 112 22 254 135 52 134 161 162 51 188 122 243 157 247 89 227 8 216 122 216 182 110 243 83 216 174 98 235 182 83 210 24 174 141 85 61 249 185 141 127 46 131 28 128 153 54 223 139 244 107 48 116 192 47 72 227 67 67 143 48 180 147 197 135 254 21 19 95 250 105 13 67 63 73 241 87 254 133 186 241 125 80 14 161 19 251 145 212 27 168 62 245 6 170 149 29 100 98 63 94 43 108 246 5 108 229 210 160 160 180 82 160 174 112 22 244 240 61 119 201 119 158 248 86 88 89 91 25 107 57 249 144 122 254 139 154 92 61 217 100 195 231 229 232 73 73 87 218 137 127 120 39 3 32 11 255 3 26 67 107 108 231 238 181 93 135 14 107 246 240 175 10 209 214 133 223 80 183 182 241 190 1 90 183 47 220 171 1 145 28 62 53 105 150 112 174 71 7 3 78 97 254 57 18 209 80 179 124 228 191 167 198 49 253 165 159 162 62 249 135 248 143 254 26 238 206 159 198 181 70 177 225 169 126 119 48 189 89 168 22 176 133 151 137 47 126 25 22 207 38 154 184 233 61 16 97 106 230 41 102 135 246 65 232 161 78 56 120 247 29 156 126 254 88 232 205 207 182 188 250 119 111 47 122 223 28 113 129 81 23 25 117 225 42 16 168 120 214 100 148 255 241 244 15 131 155 124 231 2 32 11 249 136 198 216 46 218 195 221 93 135 14 99 1 205 191 151 215 23 254 0 37 146 30 171 152 185 13 92 192 160 240 117 253 5 251 149 94 210 215 28 174 255 117 128 168 143 128 170 138 73 173 212 226 150 111 249 155 172 236 120 32 205 7 248 226 223 166 254 127 255 118 154 15 48 125 143 145 231 3 216 242 121 145 139 79 34 75 175 162 67 211 120 171 80 43 114 71 146 128 56 245 189 89 87 119 110 0 139 196 16 241 14 59 114 228 160 123 241 201 229 96 189 181 145 232 220 145 232 228 120 48 161 182 43 211 67 66 196 211 147 18 72 179 4 253 59 18 0 73 200 251 85 227 116 209 25 90 189 249 206 251 146 5 79 170 217 93 33 124 77 115 163 77 215 5 219 63 205 174 47 252 198 84 104 179 124 218 180 207 240 165 101 131 38 233 244 155 184 13 66 215 164 254 83 179 152 3 130 165 162 226 136 136 154 98 161 82 139 74 53 118 11 47 254 245 199 213 207 158 116 147 207 253 154 14 205 60 230 198 94 254 71 54 48 33 196 86 198 239 225 244 93 255 167 59 113 232 147 250 177 63 184 221 117 170 203 168 56 77 57 40 71 196 52 152 129 5 197 2 78 205 181 60 245 189 239 58 234 79 60 245 76 140 189 238 116 52 183 108 200 217 228 11 108 108 95 83 36 219 255 212 34 250 14 4 128 97 48 166 170 55 248 178 213 189 249 206 251 226 64 8 120 109 155 159 109 248 6 225 167 169 31 205 99 53 113 1 125 225 111 96 6 147 207 96 13 24 6 125 6 29 160 130 181 25 74 153 156 173 188 177 216 32 162 152 214 160 134 105 65 119 252 144 190 252 190 127 66 4 173 7 102 4 133 156 143 168 81 141 17 214 134 110 212 161 222 121 210 38 72 81 196 51 186 114 130 122 252 118 156 41 109 11 180 80 45 162 209 2 189 247 238 35 60 249 205 111 199 34 134 125 90 200 162 193 146 93 149 6 230 77 97 13 138 183 244 240 171 222 42 66 247 198 163 119 199 196 131 152 89 163 202 215 85 113 58 249 201 57 115 27 156 56 76 157 195 153 13 216 110 85 149 180 109 161 169 238 87 201 185 128 36 240 84 188 37 131 184 186 34 15 144 235 70 243 0 150 52 171 88 19 199 100 106 38 70 48 66 141 25 56 75 235 44 124 51 71 44 170 154 169 75 229 230 130 22 99 134 85 72 194 85 118 44 28 219 150 79 18 52 202 176 5 107 91 144 54 102 5 42 162 102 133 67 238 187 235 112 56 254 157 227 209 27 183 170 201 227 202 198 102 88 205 215 59 18 0 41 214 215 163 26 67 216 125 248 246 216 106 183 115 19 207 6 135 79 55 156 252 70 43 12 60 38 19 126 58 32 252 116 242 55 122 242 3 39 159 245 136 96 192 25 220 224 51 88 182 251 89 248 87 134 97 17 35 106 26 35 159 44 85 202 218 105 46 62 77 127 72 84 211 180 227 192 164 77 175 28 71 250 125 252 73 135 5 17 208 64 43 157 126 74 148 194 34 133 42 46 24 35 157 130 91 15 220 160 167 94 60 229 11 231 142 142 151 225 216 152 143 253 168 64 165 96 205 109 254 168 168 226 45 57 250 216 14 139 90 142 109 223 81 141 237 152 202 21 219 125 60 203 21 39 31 25 204 222 229 197 99 27 232 93 235 79 32 109 132 239 176 129 147 127 181 207 208 15 3 243 68 184 244 216 76 215 37 65 75 35 120 85 195 69 179 188 83 32 152 106 42 36 81 162 168 65 52 83 83 117 209 84 163 169 171 77 81 211 52 198 73 123 92 220 246 46 110 186 248 8 41 117 133 75 107 114 133 82 76 75 212 149 4 74 11 148 98 90 96 174 48 53 139 38 123 38 199 108 109 118 56 174 44 47 149 193 220 142 104 114 185 1 64 76 179 66 217 236 30 65 247 230 91 126 48 213 105 231 165 183 251 150 219 106 148 96 102 27 216 58 32 100 187 30 174 100 239 12 180 161 119 89 39 109 66 255 121 233 72 134 12 152 116 159 89 195 200 7 212 194 0 217 163 88 98 255 128 160 70 48 35 196 100 198 131 154 4 53 211 104 49 168 197 160 26 130 170 70 181 16 163 197 24 205 66 212 24 84 131 70 11 33 90 208 168 33 88 12 33 88 8 209 98 136 22 130 105 104 136 41 69 36 24 46 220 122 249 225 80 18 181 101 49 148 22 66 129 134 146 168 37 33 20 22 98 17 235 32 86 197 59 15 237 169 75 177 94 161 113 186 209 66 77 151 113 148 50 109 89 127 199 104 128 228 224 221 100 49 86 55 222 118 119 64 16 205 91 182 179 131 231 54 156 124 178 199 14 146 103 255 152 239 55 115 231 208 207 250 207 27 76 246 88 83 220 145 71 70 175 251 3 142 117 127 192 210 110 82 7 46 59 125 121 51 143 67 77 69 45 90 52 21 85 179 96 42 22 213 210 194 9 69 211 134 17 137 170 4 83 139 166 68 83 9 166 102 162 152 153 68 83 98 172 12 13 52 99 38 13 81 19 231 76 156 181 36 82 184 124 250 9 82 2 133 25 133 168 149 40 62 154 20 5 118 215 161 221 238 196 139 175 68 103 114 163 148 99 103 85 28 226 71 248 248 177 31 39 22 219 55 245 220 22 111 242 233 111 155 198 114 116 98 91 61 178 109 66 67 216 152 161 203 194 167 249 180 250 100 140 154 152 96 94 6 56 210 141 92 128 94 139 8 106 50 124 87 100 12 7 252 131 244 60 181 180 113 110 221 233 11 169 118 48 171 242 168 138 153 165 213 50 170 162 152 69 85 178 208 55 92 102 235 207 83 28 166 53 231 198 239 28 152 69 3 134 83 19 161 176 72 169 121 79 136 24 69 246 5 74 140 130 136 55 195 169 50 61 222 137 51 163 109 89 94 89 107 249 146 54 226 122 154 87 231 234 64 75 252 150 6 64 118 252 166 80 173 247 220 114 167 134 200 198 109 95 3 198 95 6 211 187 25 13 94 214 243 251 215 32 130 174 114 234 174 116 143 228 154 41 97 235 243 237 209 44 217 125 173 55 8 49 106 218 37 212 92 177 185 47 3 36 90 64 141 180 63 136 252 184 1 240 168 213 172 250 209 100 185 155 245 52 34 76 47 60 67 41 145 82 20 111 49 11 93 55 94 26 210 122 29 133 35 251 118 242 141 103 78 170 116 231 118 80 142 156 53 45 72 163 162 164 145 91 216 234 26 160 163 81 217 177 123 79 112 133 152 134 43 188 254 43 133 63 144 143 247 110 80 248 218 223 64 122 77 225 111 0 144 109 20 254 0 43 216 76 18 78 39 95 243 52 144 8 170 168 69 76 140 230 148 39 129 134 228 164 244 5 191 241 194 148 104 145 236 20 230 223 11 106 1 213 58 105 128 162 149 250 80 84 40 194 50 45 51 74 34 37 49 159 254 252 179 37 77 208 114 145 194 148 24 20 231 133 157 147 219 116 118 97 205 97 214 1 235 14 126 182 192 242 214 5 128 25 166 58 34 104 61 181 247 128 69 125 61 225 175 11 233 42 225 211 172 159 21 216 56 29 104 67 24 119 149 240 7 128 226 76 112 146 78 163 154 166 2 146 92 157 235 80 162 203 90 33 102 32 152 17 9 244 163 0 205 154 0 237 159 242 117 141 209 128 38 155 11 132 16 106 46 182 246 36 255 175 104 227 84 242 16 73 161 116 145 146 20 6 22 196 129 11 10 139 120 210 98 9 197 97 86 112 227 13 187 184 180 116 70 156 43 199 24 217 215 93 239 107 163 220 210 38 192 160 84 85 118 238 190 49 248 194 81 213 235 169 141 171 133 111 27 133 207 250 144 117 103 42 130 179 107 38 136 108 96 55 136 218 250 66 173 220 105 157 78 189 75 205 186 46 229 99 103 55 238 13 204 171 12 95 123 111 160 90 76 142 31 102 65 147 234 55 91 95 57 151 79 190 212 102 166 166 41 172 80 101 173 61 189 62 135 160 28 134 181 89 192 49 92 45 80 136 225 45 36 14 160 225 2 36 82 250 52 201 68 165 196 72 165 102 69 89 50 181 125 146 217 229 218 97 90 96 218 168 253 45 14 0 213 54 166 113 215 222 3 86 5 250 241 240 6 225 15 36 121 12 195 231 252 135 152 37 2 125 189 128 211 245 107 255 146 159 104 125 225 55 67 129 100 253 245 156 137 10 230 188 56 43 28 92 92 152 145 87 103 103 244 194 226 92 26 16 148 185 255 193 68 91 226 27 250 155 67 213 137 184 118 167 221 108 14 213 96 42 106 42 150 250 204 68 213 52 154 186 136 81 155 154 169 145 42 88 34 80 208 166 202 179 231 219 98 67 19 198 210 25 76 68 118 44 62 77 119 226 80 114 6 37 80 154 90 73 164 229 189 120 239 250 43 237 212 138 252 181 100 231 206 105 46 175 92 52 213 94 171 42 119 4 44 140 177 149 23 71 230 10 31 55 177 125 82 165 16 181 42 207 227 90 231 239 211 140 166 129 113 45 126 253 84 11 134 102 225 55 161 97 188 210 169 219 224 240 173 215 4 138 67 204 57 40 112 177 217 29 188 86 245 48 51 153 28 31 215 188 59 56 140 142 12 185 43 168 117 5 88 94 89 179 188 59 88 231 23 151 240 221 138 162 240 166 35 45 172 20 13 218 119 12 37 160 49 104 98 7 131 42 117 136 18 69 173 237 13 165 78 157 72 190 37 126 236 70 139 23 159 197 16 188 64 105 145 194 106 41 136 86 8 20 69 137 247 133 224 28 138 51 53 151 38 149 75 33 230 10 107 143 116 24 26 87 230 227 104 161 184 33 151 254 242 106 235 106 0 179 66 85 227 142 221 55 90 204 219 189 175 58 249 172 207 255 245 108 204 203 167 251 28 185 212 235 42 167 174 127 229 182 47 151 125 6 39 130 51 65 52 240 212 169 23 185 180 48 135 154 113 120 239 141 28 57 124 128 118 185 65 107 94 243 4 141 142 12 49 58 114 19 7 247 222 68 85 7 142 159 124 137 151 78 159 163 140 138 111 57 170 142 80 147 34 128 96 138 170 18 52 80 71 37 152 209 18 165 165 30 181 138 139 219 239 99 7 2 157 41 164 28 194 234 133 212 7 104 145 210 9 165 20 20 133 163 244 5 226 61 170 46 83 201 5 209 165 213 113 20 109 180 53 206 244 116 135 35 95 253 251 90 132 37 137 126 72 55 43 2 216 116 0 228 211 239 11 239 194 232 246 109 116 235 204 232 172 11 191 33 112 44 11 95 178 218 95 159 235 220 152 139 62 89 180 158 85 31 80 253 170 106 206 185 180 60 192 97 230 204 232 117 87 120 242 229 147 178 86 117 217 54 54 198 7 238 191 155 86 89 94 153 72 27 60 253 215 10 168 21 112 173 178 208 187 142 222 194 209 67 7 220 159 124 235 41 150 150 87 25 213 130 217 118 36 18 77 45 82 5 147 96 170 181 170 43 156 210 50 165 37 102 70 149 0 189 54 135 12 109 23 156 87 51 220 142 153 199 185 188 253 22 43 204 40 28 210 242 94 157 115 78 205 229 248 222 17 165 133 250 22 230 199 112 130 14 63 255 5 119 195 147 191 10 117 80 27 219 230 172 82 193 182 182 9 208 169 157 211 41 215 151 63 105 119 69 146 103 195 201 31 240 28 7 28 60 29 40 3 203 78 221 6 187 159 52 38 150 23 47 27 107 221 21 190 245 210 73 84 141 59 14 31 226 150 253 123 95 235 45 94 79 33 126 255 49 101 89 232 135 222 123 31 39 79 157 225 196 75 167 153 238 21 188 90 212 116 53 80 155 82 171 34 162 218 54 165 45 105 49 132 163 157 2 78 95 32 67 147 216 208 20 182 116 86 197 151 20 101 155 50 42 165 19 92 225 80 241 170 230 242 94 176 2 117 109 90 11 39 25 121 249 15 24 121 249 247 177 24 212 134 198 40 30 124 63 186 184 166 246 196 113 201 133 173 155 114 251 255 7 0 166 213 101 126 2 197 172 13 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!CSSDockFileLibrary methodsFor: 'images'!portfolioPng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 128 0 0 0 128 8 6 0 0 0 195 62 97 203 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 10 79 105 67 67 80 80 104 111 116 111 115 104 111 112 32 73 67 67 32 112 114 111 102 105 108 101 0 0 120 218 157 83 103 84 83 233 22 61 247 222 244 66 75 136 128 148 75 111 82 21 8 32 82 66 139 128 20 145 38 42 33 9 16 74 136 33 161 217 21 81 193 17 69 69 4 27 200 160 136 3 142 142 128 140 21 81 44 12 138 10 216 7 228 33 162 142 131 163 136 138 202 251 225 123 163 107 214 188 247 230 205 254 181 215 62 231 172 243 157 179 207 7 192 8 12 150 72 51 81 53 128 12 169 66 30 17 224 131 199 196 198 225 228 46 64 129 10 36 112 0 16 8 179 100 33 115 253 35 1 0 248 126 60 60 43 34 192 7 190 0 1 120 211 11 8 0 192 77 155 192 48 28 135 255 15 234 66 153 92 1 128 132 1 192 116 145 56 75 8 128 20 0 64 122 142 66 166 0 64 70 1 128 157 152 38 83 0 160 4 0 96 203 99 98 227 0 80 45 0 96 39 127 230 211 0 128 157 248 153 123 1 0 91 148 33 21 1 160 145 0 32 19 101 136 68 0 104 59 0 172 207 86 138 69 0 88 48 0 20 102 75 196 57 0 216 45 0 48 73 87 102 72 0 176 183 0 192 206 16 11 178 0 8 12 0 48 81 136 133 41 0 4 123 0 96 200 35 35 120 0 132 153 0 20 70 242 87 60 241 43 174 16 231 42 0 0 120 153 178 60 185 36 57 69 129 91 8 45 113 7 87 87 46 30 40 206 73 23 43 20 54 97 2 97 154 64 46 194 121 153 25 50 129 52 15 224 243 204 0 0 160 145 21 17 224 131 243 253 120 206 14 174 206 206 54 142 182 14 95 45 234 191 6 255 34 98 98 227 254 229 207 171 112 64 0 0 225 116 126 209 254 44 47 179 26 128 59 6 128 109 254 162 37 238 4 104 94 11 160 117 247 139 102 178 15 64 181 0 160 233 218 87 243 112 248 126 60 60 69 161 144 185 217 217 229 228 228 216 74 196 66 91 97 202 87 125 254 103 194 95 192 87 253 108 249 126 60 252 247 245 224 190 226 36 129 50 93 129 71 4 248 224 194 204 244 76 165 28 207 146 9 132 98 220 230 143 71 252 183 11 255 252 29 211 34 196 73 98 185 88 42 20 227 81 18 113 142 68 154 140 243 50 165 34 137 66 146 41 197 37 210 255 100 226 223 44 251 3 62 223 53 0 176 106 62 1 123 145 45 168 93 99 3 246 75 39 16 88 116 192 226 247 0 0 242 187 111 193 212 40 8 3 128 104 131 225 207 119 255 239 63 253 71 160 37 0 128 102 73 146 113 0 0 94 68 36 46 84 202 179 63 199 8 0 0 68 160 129 42 176 65 27 244 193 24 44 192 6 28 193 5 220 193 11 252 96 54 132 66 36 196 194 66 16 66 10 100 128 28 114 96 41 172 130 66 40 134 205 176 29 42 96 47 212 64 29 52 192 81 104 134 147 112 14 46 194 85 184 14 61 112 15 250 97 8 158 193 40 188 129 9 4 65 200 8 19 97 33 218 136 1 98 138 88 35 142 8 23 153 133 248 33 193 72 4 18 139 36 32 201 136 20 81 34 75 145 53 72 49 82 138 84 32 85 72 29 242 61 114 2 57 135 92 70 186 145 59 200 0 50 130 252 134 188 71 49 148 129 178 81 61 212 12 181 67 185 168 55 26 132 70 162 11 208 100 116 49 154 143 22 160 155 208 114 180 26 61 140 54 161 231 208 171 104 15 218 143 62 67 199 48 192 232 24 7 51 196 108 48 46 198 195 66 177 56 44 9 147 99 203 177 34 172 12 171 198 26 176 86 172 3 187 137 245 99 207 177 119 4 18 129 69 192 9 54 4 119 66 32 97 30 65 72 88 76 88 78 216 72 168 32 28 36 52 17 218 9 55 9 3 132 81 194 39 34 147 168 75 180 38 186 17 249 196 24 98 50 49 135 88 72 44 35 214 18 143 19 47 16 123 136 67 196 55 36 18 137 67 50 39 185 144 2 73 177 164 84 210 18 210 70 210 110 82 35 233 44 169 155 52 72 26 35 147 201 218 100 107 178 7 57 148 44 32 43 200 133 228 157 228 195 228 51 228 27 228 33 242 91 10 157 98 64 113 164 248 83 226 40 82 202 106 74 25 229 16 229 52 229 6 101 152 50 65 85 163 154 82 221 168 161 84 17 53 143 90 66 173 161 182 82 175 81 135 168 19 52 117 154 57 205 131 22 73 75 165 173 162 149 211 26 104 23 104 247 105 175 232 116 186 17 221 149 30 78 151 208 87 210 203 233 71 232 151 232 3 244 119 12 13 134 21 131 199 136 103 40 25 155 24 7 24 103 25 119 24 175 152 76 166 25 211 139 25 199 84 48 55 49 235 152 231 153 15 153 111 85 88 42 182 42 124 21 145 202 10 149 74 149 38 149 27 42 47 84 169 170 166 170 222 170 11 85 243 85 203 84 143 169 94 83 125 174 70 85 51 83 227 169 9 212 150 171 85 170 157 80 235 83 27 83 103 169 59 168 135 170 103 168 111 84 63 164 126 89 253 137 6 89 195 76 195 79 67 164 81 160 177 95 227 188 198 32 11 99 25 179 120 44 33 107 13 171 134 117 129 53 196 38 177 205 217 124 118 42 187 152 253 29 187 139 61 170 169 161 57 67 51 74 51 87 179 82 243 148 102 63 7 227 152 113 248 156 116 78 9 231 40 167 151 243 126 138 222 20 239 41 226 41 27 166 52 76 185 49 101 92 107 170 150 151 150 88 171 72 171 81 171 71 235 189 54 174 237 167 157 166 189 69 187 89 251 129 14 65 199 74 39 92 39 71 103 143 206 5 157 231 83 217 83 221 167 10 167 22 77 61 58 245 174 46 170 107 165 27 161 187 68 119 191 110 167 238 152 158 190 94 128 158 76 111 167 222 121 189 231 250 28 125 47 253 84 253 109 250 167 245 71 12 88 6 179 12 36 6 219 12 206 24 60 197 53 113 111 60 29 47 199 219 241 81 67 93 195 64 67 165 97 149 97 151 225 132 145 185 209 60 163 213 70 141 70 15 140 105 198 92 227 36 227 109 198 109 198 163 38 6 38 33 38 75 77 234 77 238 154 82 77 185 166 41 166 59 76 59 76 199 205 204 205 162 205 214 153 53 155 61 49 215 50 231 155 231 155 215 155 223 183 96 90 120 90 44 182 168 182 184 101 73 178 228 90 166 89 238 182 188 110 133 90 57 89 165 88 85 90 93 179 70 173 157 173 37 214 187 173 187 167 17 167 185 78 147 78 171 158 214 103 195 176 241 182 201 182 169 183 25 176 229 216 6 219 174 182 109 182 125 97 103 98 23 103 183 197 174 195 238 147 189 147 125 186 125 141 253 61 7 13 135 217 14 171 29 90 29 126 115 180 114 20 58 86 58 222 154 206 156 238 63 125 197 244 150 233 47 103 88 207 16 207 216 51 227 182 19 203 41 196 105 157 83 155 211 71 103 23 103 185 115 131 243 136 139 137 75 130 203 46 151 62 46 155 27 198 221 200 189 228 74 116 245 113 93 225 122 210 245 157 155 179 155 194 237 168 219 175 238 54 238 105 238 135 220 159 204 52 159 41 158 89 51 115 208 195 200 67 224 81 229 209 63 11 159 149 48 107 223 172 126 79 67 79 129 103 181 231 35 47 99 47 145 87 173 215 176 183 165 119 170 247 97 239 23 62 246 62 114 159 227 62 227 60 55 222 50 222 89 95 204 55 192 183 200 183 203 79 195 111 158 95 133 223 67 127 35 255 100 255 122 255 209 0 167 128 37 1 103 3 137 129 65 129 91 2 251 248 122 124 33 191 142 63 58 219 101 246 178 217 237 65 140 160 185 65 21 65 143 130 173 130 229 193 173 33 104 200 236 144 173 33 247 231 152 206 145 206 105 14 133 80 126 232 214 208 7 97 230 97 139 195 126 12 39 133 135 133 87 134 63 142 112 136 88 26 209 49 151 53 119 209 220 67 115 223 68 250 68 150 68 222 155 103 49 79 57 175 45 74 53 42 62 170 46 106 60 218 55 186 52 186 63 198 46 102 89 204 213 88 157 88 73 108 75 28 57 46 42 174 54 110 108 190 223 252 237 243 135 226 157 226 11 227 123 23 152 47 200 93 112 121 161 206 194 244 133 167 22 169 46 18 44 58 150 64 76 136 78 56 148 240 65 16 42 168 22 140 37 242 19 119 37 142 10 121 194 29 194 103 34 47 209 54 209 136 216 67 92 42 30 78 242 72 42 77 122 146 236 145 188 53 121 36 197 51 165 44 229 185 132 39 169 144 188 76 13 76 221 155 58 158 22 154 118 32 109 50 61 58 189 49 131 146 145 144 113 66 170 33 77 147 182 103 234 103 230 102 118 203 172 101 133 178 254 197 110 139 183 47 30 149 7 201 107 179 144 172 5 89 45 10 182 66 166 232 84 90 40 215 42 7 178 103 101 87 102 191 205 137 202 57 150 171 158 43 205 237 204 179 202 219 144 55 156 239 159 255 237 18 194 18 225 146 182 165 134 75 87 45 29 88 230 189 172 106 57 178 60 113 121 219 10 227 21 5 43 134 86 6 172 60 184 138 182 42 109 213 79 171 237 87 151 174 126 189 38 122 77 107 129 94 193 202 130 193 181 1 107 235 11 85 10 229 133 125 235 220 215 237 93 79 88 47 89 223 181 97 250 134 157 27 62 21 137 138 174 20 219 23 151 21 127 216 40 220 120 229 27 135 111 202 191 153 220 148 180 169 171 196 185 100 207 102 210 102 233 230 222 45 158 91 14 150 170 151 230 151 14 110 13 217 218 180 13 223 86 180 237 245 246 69 219 47 151 205 40 219 187 131 182 67 185 163 191 60 184 188 101 167 201 206 205 59 63 84 164 84 244 84 250 84 54 238 210 221 181 97 215 248 110 209 238 27 123 188 246 52 236 213 219 91 188 247 253 62 201 190 219 85 1 85 77 213 102 213 101 251 73 251 179 247 63 174 137 170 233 248 150 251 109 93 173 78 109 113 237 199 3 210 3 253 7 35 14 182 215 185 212 213 29 210 61 84 82 143 214 43 235 71 14 199 31 190 254 157 239 119 45 13 54 13 85 141 156 198 226 35 112 68 121 228 233 247 9 223 247 30 13 58 218 118 140 123 172 225 7 211 31 118 29 103 29 47 106 66 154 242 154 70 155 83 154 251 91 98 91 186 79 204 62 209 214 234 222 122 252 71 219 31 15 156 52 60 89 121 74 243 84 201 105 218 233 130 211 147 103 242 207 140 157 149 157 125 126 46 249 220 96 219 162 182 123 231 99 206 223 106 15 111 239 186 16 116 225 210 69 255 139 231 59 188 59 206 92 242 184 116 242 178 219 229 19 87 184 87 154 175 58 95 109 234 116 234 60 254 147 211 79 199 187 156 187 154 174 185 92 107 185 238 122 189 181 123 102 247 233 27 158 55 206 221 244 189 121 241 22 255 214 213 158 57 61 221 189 243 122 111 247 197 247 245 223 22 221 126 114 39 253 206 203 187 217 119 39 238 173 188 79 188 95 244 64 237 65 217 67 221 135 213 63 91 254 220 216 239 220 127 106 192 119 160 243 209 220 71 247 6 133 131 207 254 145 245 143 15 67 5 143 153 143 203 134 13 134 235 158 56 62 57 57 226 63 114 253 233 252 167 67 207 100 207 38 158 23 254 162 254 203 174 23 22 47 126 248 213 235 215 206 209 152 209 161 151 242 151 147 191 109 124 165 253 234 192 235 25 175 219 198 194 198 30 190 201 120 51 49 94 244 86 251 237 193 119 220 119 29 239 163 223 15 79 228 124 32 127 40 255 104 249 177 245 83 208 167 251 147 25 147 147 255 4 3 152 243 252 99 51 45 219 0 0 0 4 103 65 77 65 0 0 177 142 124 251 81 147 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 233 0 0 117 48 0 0 234 96 0 0 58 152 0 0 23 111 146 95 197 70 0 0 37 230 73 68 65 84 120 218 236 125 91 204 37 217 117 214 183 214 174 58 255 223 51 61 241 140 157 241 204 216 35 17 103 108 144 9 33 142 137 184 218 65 10 10 78 34 98 5 41 1 97 238 18 40 8 33 5 132 242 196 51 47 60 160 68 66 145 35 120 224 5 163 228 37 18 1 37 15 8 135 196 73 144 29 199 36 145 103 144 61 54 51 158 238 158 238 233 233 238 233 254 47 231 82 181 215 226 97 95 106 239 93 187 206 57 127 247 233 158 26 60 71 250 251 156 174 170 83 117 170 214 237 91 223 90 123 111 82 85 188 251 250 246 125 53 135 58 209 63 250 199 63 253 182 220 128 170 194 90 251 92 223 247 191 220 117 221 39 122 107 161 162 0 74 197 166 139 252 119 252 93 2 152 24 77 99 208 52 205 111 55 77 243 131 204 44 68 244 182 220 247 127 248 247 191 56 47 5 120 187 132 223 247 253 223 90 173 214 159 123 234 169 39 241 163 63 242 41 124 255 247 127 12 106 5 2 1 148 160 16 175 11 26 222 220 103 113 114 85 40 32 238 124 66 10 18 183 95 0 80 212 33 133 130 96 152 241 133 223 249 29 124 233 75 191 247 151 238 220 189 107 143 22 139 191 99 140 249 79 111 151 18 28 226 69 135 10 1 143 218 3 4 203 95 174 86 215 126 224 227 31 199 207 254 236 191 12 178 2 32 80 5 84 5 170 10 40 160 162 78 216 10 136 42 20 126 159 184 115 69 133 81 167 13 217 241 80 167 12 4 52 77 139 190 235 240 11 159 253 69 124 245 165 151 176 88 28 25 102 122 228 158 224 219 222 3 56 235 183 191 244 228 147 239 193 63 255 153 127 134 110 181 194 114 189 198 149 171 87 241 230 155 183 176 217 116 136 66 33 194 110 241 16 166 100 168 73 152 96 102 28 31 31 227 211 159 254 107 120 229 91 175 96 189 238 254 39 115 243 201 111 123 12 240 168 133 239 20 160 251 228 143 255 216 143 193 90 139 211 147 51 124 233 203 95 193 114 181 130 49 6 204 236 20 128 8 153 248 105 223 184 15 231 69 160 222 139 248 119 0 167 103 231 184 119 122 132 239 253 158 63 133 47 254 222 151 63 161 170 120 167 134 129 119 178 7 248 211 214 90 124 224 217 103 177 60 91 226 143 190 250 34 110 222 186 133 182 109 209 180 45 12 20 4 224 236 252 20 231 235 14 247 35 30 181 22 79 63 253 180 11 55 32 136 181 16 117 231 109 214 107 60 246 216 227 33 100 124 12 192 255 126 87 1 30 237 235 189 34 138 23 94 120 1 231 203 37 94 254 230 171 32 195 0 49 254 239 215 191 134 23 95 122 9 189 8 152 121 111 139 175 185 125 81 133 33 194 247 124 244 163 120 254 187 94 128 21 11 0 224 174 199 227 151 47 195 59 5 251 110 8 120 212 30 0 248 43 0 176 90 173 240 198 173 91 56 91 175 112 124 124 140 243 59 183 241 71 47 190 136 182 109 127 245 146 49 255 26 192 61 34 50 247 233 101 44 128 239 176 214 254 171 63 252 234 87 127 252 131 207 63 143 94 201 41 150 21 244 46 194 160 146 115 190 171 0 15 61 125 1 44 17 176 94 175 113 126 190 68 223 247 176 125 143 219 55 223 64 219 54 104 154 230 211 3 6 184 111 37 131 55 241 79 27 99 116 189 94 227 125 239 127 63 174 94 127 3 108 12 172 10 238 255 236 243 120 241 59 249 199 19 17 214 235 53 54 235 14 155 206 98 211 91 156 156 158 128 201 1 64 162 7 19 15 249 107 16 17 152 25 55 111 221 6 64 88 119 61 54 93 143 213 114 131 119 50 7 240 142 39 130 136 8 171 245 10 157 237 208 247 22 93 111 209 91 251 80 132 66 228 64 224 102 211 161 235 44 68 0 217 108 30 88 201 222 85 128 7 20 202 114 181 113 22 169 2 22 65 215 11 112 96 5 8 66 238 68 176 220 116 216 88 129 33 160 183 253 197 209 229 187 33 224 112 66 1 128 174 235 97 173 66 193 80 48 228 33 22 183 68 129 222 42 148 9 10 70 47 239 108 225 255 127 224 1 92 154 6 34 44 218 22 109 219 122 197 208 135 118 61 54 238 90 204 6 182 107 2 91 244 142 85 132 119 178 2 120 144 46 32 34 52 109 139 182 109 192 15 69 254 238 132 76 4 128 209 52 45 140 97 88 99 74 218 224 93 5 120 132 47 27 136 26 98 194 81 219 96 209 180 7 143 255 169 120 149 24 220 24 44 218 6 204 6 93 99 28 45 13 244 244 174 2 100 4 74 246 254 144 174 113 170 234 226 50 249 42 93 219 182 32 80 172 21 28 236 250 254 92 14 12 50 218 166 1 27 3 99 26 95 117 212 123 34 242 80 177 78 249 121 150 10 16 30 186 136 252 140 21 249 167 98 165 83 247 244 38 178 108 76 162 232 45 133 57 33 162 21 128 15 169 42 68 45 152 141 35 127 90 119 59 34 2 43 242 155 170 250 132 2 102 234 116 123 60 78 37 34 11 224 68 69 92 53 208 184 16 192 134 97 12 65 69 96 173 253 239 0 206 85 117 17 232 131 3 42 0 17 81 203 204 191 192 204 63 127 104 69 104 14 41 124 17 121 174 239 251 107 155 205 6 207 127 224 89 188 240 161 239 6 152 161 137 117 168 142 195 102 117 91 254 79 60 142 136 96 12 225 91 175 93 197 203 223 252 166 183 114 227 60 64 211 186 204 160 239 240 137 191 240 23 63 217 245 27 215 29 164 101 144 46 183 105 241 59 220 54 82 0 76 48 166 193 255 250 226 23 29 214 99 66 227 67 128 49 6 189 237 241 145 23 190 251 79 62 126 233 49 136 72 104 59 57 140 240 125 1 234 230 155 55 241 230 237 59 63 215 182 237 207 49 243 7 0 188 62 75 5 232 250 254 218 123 158 120 28 127 247 111 255 52 158 126 230 217 216 84 49 132 4 137 183 150 208 172 254 179 184 250 93 218 169 19 101 229 187 118 200 249 251 182 109 241 249 207 255 15 124 237 229 175 67 149 192 76 129 254 133 66 97 251 30 63 252 87 63 133 229 122 13 177 189 187 76 104 239 17 184 235 168 184 43 144 203 239 148 220 197 20 228 14 85 15 251 161 32 99 240 219 191 251 187 222 3 180 104 20 48 108 96 152 33 214 226 123 191 239 99 120 238 217 15 194 138 61 104 216 115 76 36 3 16 92 191 250 26 62 255 249 223 192 106 179 185 102 140 161 217 41 128 181 246 87 136 8 255 240 239 253 125 28 95 126 2 39 247 238 225 222 217 25 150 203 21 108 136 161 62 151 30 90 178 52 42 66 246 127 1 148 194 54 1 132 124 7 15 129 25 104 155 22 183 110 191 21 61 4 51 99 177 104 177 88 4 12 0 188 244 242 55 177 92 173 156 2 132 107 164 74 167 67 139 152 235 252 161 168 36 86 4 93 215 99 221 247 80 175 112 20 175 211 128 73 193 198 160 105 220 227 251 198 171 87 241 198 221 83 88 251 112 138 130 204 140 75 199 199 248 51 127 246 207 225 183 126 243 55 192 204 191 2 224 175 207 74 1 68 228 39 62 250 199 63 130 246 210 37 156 159 158 226 141 59 111 225 252 124 233 244 152 28 12 80 81 103 221 162 0 13 22 175 154 110 7 84 4 74 4 248 119 21 199 238 169 42 152 8 166 105 176 222 108 220 169 201 185 232 166 113 24 192 113 247 192 91 247 78 208 109 86 232 123 241 125 129 52 126 39 167 16 164 4 75 22 155 141 227 248 59 43 209 5 19 51 154 198 157 151 27 23 106 160 30 11 180 46 228 156 45 207 33 108 32 246 176 33 96 192 41 132 187 230 12 109 187 192 98 113 12 145 254 39 102 231 1 68 4 31 126 225 5 156 159 45 113 251 206 29 156 158 157 121 87 239 30 176 120 1 19 9 68 8 68 2 21 114 138 160 4 129 184 227 188 208 73 4 226 223 149 220 118 82 130 240 16 114 200 197 10 103 153 77 139 69 211 198 226 141 237 93 125 160 23 235 156 136 42 40 132 22 245 30 129 8 34 22 231 171 13 214 125 239 189 192 128 224 212 223 65 111 157 162 49 49 22 109 3 82 133 49 6 173 97 71 70 89 11 107 173 83 220 135 148 249 144 50 160 192 99 79 124 7 78 222 186 53 79 16 216 89 193 106 189 194 189 211 83 88 113 130 37 104 230 130 211 20 81 71 238 184 114 172 14 66 11 158 66 68 35 15 79 68 104 12 163 89 52 104 23 129 9 36 172 215 27 244 125 231 4 147 156 51 8 119 181 233 176 234 58 116 189 77 10 58 185 2 0 112 138 232 226 22 154 134 209 180 14 103 24 99 96 140 243 0 125 111 209 247 125 6 118 15 207 122 184 223 193 205 97 51 247 195 157 141 8 125 183 193 102 181 194 106 211 57 215 74 33 228 106 200 151 247 19 126 232 226 165 225 187 110 191 19 161 88 129 246 2 34 128 56 144 51 45 22 109 27 67 192 166 239 96 187 46 139 203 170 138 117 215 227 124 181 246 30 97 143 166 81 34 16 139 15 53 6 71 139 5 72 1 211 4 12 64 143 70 1 64 96 21 231 9 231 168 0 4 96 179 233 176 218 172 97 187 206 185 113 13 89 192 152 28 26 41 65 106 233 208 65 17 146 109 158 246 135 101 131 94 4 68 140 198 24 44 218 35 28 29 9 142 142 143 208 24 3 34 66 183 89 195 246 22 170 206 114 150 155 14 203 245 218 121 37 186 0 177 66 4 34 6 19 193 246 22 71 199 199 96 34 176 49 56 58 90 248 112 179 65 223 29 37 89 206 67 82 1 49 112 132 211 12 121 0 34 194 166 219 96 117 190 65 103 109 116 223 174 167 94 115 79 144 184 116 205 44 220 199 234 98 91 169 52 196 6 143 93 126 2 198 48 94 123 237 53 124 252 131 207 67 140 129 138 197 201 201 61 24 102 116 155 14 125 223 227 116 185 193 114 179 78 172 124 236 230 247 82 0 99 240 141 175 253 31 252 229 31 254 20 218 203 151 97 216 224 15 175 94 241 92 128 5 245 29 240 144 135 217 17 123 15 64 152 167 2 116 93 143 243 205 10 125 215 197 238 217 220 186 53 105 181 78 220 186 142 67 193 216 67 36 30 132 122 52 109 139 75 151 46 225 215 255 219 175 226 15 190 242 101 128 27 188 121 227 117 116 125 143 167 190 243 25 220 61 59 199 233 249 50 254 142 7 105 13 3 51 142 159 120 10 203 211 183 240 217 127 251 111 240 244 51 207 97 179 94 225 230 141 235 88 28 29 3 102 129 190 239 31 129 2 240 188 61 192 186 235 176 92 174 208 117 93 20 60 60 17 52 196 119 151 254 69 128 151 42 1 138 239 108 193 13 32 194 115 127 236 5 220 190 241 58 110 188 241 6 84 4 71 71 151 112 244 196 147 208 163 199 112 231 238 189 40 16 186 144 201 215 3 156 121 236 9 180 0 236 234 12 55 174 93 1 177 193 241 229 39 208 60 254 30 88 219 3 253 35 40 8 82 80 128 185 122 128 77 143 243 229 210 101 0 34 137 208 235 174 127 234 115 234 29 6 37 40 21 194 93 247 201 247 63 139 39 125 206 118 178 92 98 181 233 177 89 173 30 2 4 35 96 113 12 94 92 202 182 247 162 80 219 61 154 210 29 17 216 206 52 4 0 4 43 174 39 207 246 22 162 129 250 29 4 23 5 45 154 48 125 234 254 95 88 123 26 66 196 123 14 128 252 120 63 71 230 144 231 114 207 55 27 156 173 214 15 230 230 47 196 204 16 42 5 134 71 162 0 141 21 240 28 67 64 175 140 123 167 103 104 87 107 231 166 60 34 150 52 157 11 133 25 242 131 50 145 91 247 232 93 195 40 93 247 30 21 36 146 57 192 217 122 131 206 246 19 205 153 244 128 130 190 175 157 7 225 254 166 20 64 8 48 202 243 83 128 183 214 13 238 188 252 26 164 91 2 210 215 111 140 70 78 181 176 170 241 241 84 123 48 201 241 37 137 179 223 195 164 11 22 136 169 178 155 118 11 144 70 119 186 253 122 180 237 220 4 16 3 166 1 120 113 64 134 241 80 200 245 223 145 226 31 124 9 184 252 3 0 122 196 65 247 176 254 134 4 209 108 179 191 176 223 22 219 43 199 139 63 86 253 177 222 123 12 239 118 252 127 73 143 241 191 71 43 223 21 235 138 65 217 241 54 57 78 224 227 218 240 219 84 134 253 16 192 38 191 57 238 75 142 145 244 119 22 247 145 93 63 120 80 205 127 43 25 224 228 10 240 251 159 5 254 201 57 205 202 3 216 149 129 57 93 3 151 151 192 217 141 138 112 10 65 136 184 74 95 185 79 18 129 87 191 107 225 171 56 91 20 161 118 14 25 206 77 97 210 8 11 8 13 138 168 137 80 50 165 73 4 63 250 125 21 65 165 66 143 194 151 100 31 138 253 130 1 217 22 10 162 201 108 39 166 5 206 58 216 245 2 102 110 33 96 99 9 71 155 30 188 233 33 87 127 63 118 202 106 124 88 84 8 7 19 159 83 161 33 217 150 124 14 150 18 235 203 161 148 235 5 68 58 8 150 48 33 76 0 41 243 72 4 26 121 43 26 174 201 201 245 81 255 204 163 125 195 247 133 210 223 63 241 57 77 111 156 149 12 207 141 20 196 2 165 30 157 240 252 20 192 33 116 11 72 15 181 27 128 77 98 93 24 92 90 176 198 168 33 154 223 40 118 8 63 21 158 236 243 57 109 46 209 241 195 246 130 165 212 178 163 176 147 235 218 66 224 156 92 139 213 139 171 84 138 0 89 125 119 145 223 79 225 218 20 12 67 18 101 73 159 69 242 155 137 0 218 64 197 66 117 134 89 128 251 253 189 119 91 189 139 135 20 110 128 42 113 56 177 52 165 194 117 210 150 207 117 229 112 141 36 254 161 142 172 169 242 96 195 187 168 239 79 210 164 107 72 115 252 66 21 171 79 21 70 82 75 78 21 3 117 207 32 112 74 35 152 246 40 90 238 243 198 162 253 76 171 129 32 192 58 15 128 126 227 16 107 64 235 35 247 142 138 32 165 34 224 193 2 114 1 75 114 222 202 131 31 9 191 184 86 114 60 193 55 155 4 170 26 0 83 10 68 147 223 79 133 66 165 33 66 114 207 64 84 19 34 134 243 84 238 113 116 92 25 18 52 193 7 243 83 0 120 212 221 3 118 237 66 0 184 98 217 149 7 19 168 226 82 65 106 86 187 143 128 163 50 213 20 37 23 132 166 238 216 13 46 75 240 138 183 84 36 64 142 75 151 141 24 203 41 3 117 52 33 212 9 65 135 152 31 132 59 82 10 26 238 137 104 166 30 32 42 64 231 132 64 156 3 173 125 4 92 141 253 37 72 28 43 80 102 37 168 129 203 34 206 134 102 5 114 219 73 75 11 135 183 212 228 51 21 138 71 33 124 160 238 141 162 215 72 238 145 42 174 61 222 83 162 92 217 245 60 111 193 154 43 201 236 48 128 244 16 233 33 210 121 215 202 99 139 152 114 125 89 10 85 42 69 205 50 166 206 177 37 60 148 113 158 225 27 87 146 235 82 37 86 103 159 67 232 168 89 112 162 40 89 255 145 230 86 27 12 131 105 232 118 94 223 2 100 227 51 24 12 223 179 167 64 119 234 21 128 160 247 58 128 154 57 123 128 206 221 8 218 172 211 118 44 224 93 74 81 177 172 12 39 140 193 220 96 193 149 107 148 233 150 143 195 84 184 101 1 60 104 43 98 117 212 73 63 43 72 244 14 20 250 183 7 204 67 0 66 162 214 159 184 63 123 2 116 39 80 123 10 116 39 238 248 229 85 23 38 35 179 73 62 117 30 168 95 210 161 107 9 12 224 228 8 160 197 204 49 128 132 16 96 6 65 77 230 225 23 17 48 38 148 40 169 53 100 161 192 23 155 70 72 124 136 251 154 165 107 24 142 203 220 127 162 67 20 172 156 93 66 199 158 162 93 191 9 244 167 160 245 45 104 119 219 9 125 243 166 183 118 47 92 14 239 254 68 205 37 191 45 127 113 66 117 107 54 73 33 0 230 25 99 0 233 7 12 192 240 140 219 132 128 75 247 93 166 82 170 21 1 99 123 170 164 117 128 197 105 90 22 243 246 49 80 227 81 108 246 210 8 51 65 177 113 159 215 183 128 245 45 72 119 27 220 221 6 206 175 57 193 112 162 20 65 192 68 3 14 8 198 156 9 157 18 218 124 28 85 136 11 205 96 154 51 6 8 33 192 215 199 211 16 80 10 184 146 59 239 20 112 53 230 163 18 247 19 144 230 59 137 163 59 39 173 100 5 174 123 57 90 102 120 200 68 78 176 231 215 129 213 117 232 234 58 208 221 134 106 7 48 187 178 44 51 176 184 148 23 180 136 156 146 169 247 240 81 138 50 174 245 208 158 147 11 4 16 120 224 225 239 7 198 0 189 139 255 210 123 1 155 12 89 143 4 44 83 2 158 16 104 54 131 243 68 58 152 128 53 42 177 4 213 82 43 111 224 193 181 178 1 214 183 161 103 175 1 171 235 192 234 13 183 141 57 186 96 166 163 33 230 243 16 175 221 187 196 1 43 89 222 159 30 131 244 62 46 84 186 195 161 155 16 14 76 5 247 128 237 161 210 123 132 171 219 5 166 21 133 216 71 192 216 118 204 0 8 147 145 135 3 14 80 31 131 131 145 179 31 39 120 242 42 176 186 9 57 187 2 166 206 249 94 54 62 78 7 42 150 64 241 115 2 14 19 244 31 103 40 241 214 159 237 159 170 4 19 234 25 69 89 190 62 172 247 127 8 32 48 48 129 161 31 64 57 23 232 78 1 167 20 43 138 58 66 217 133 83 67 255 58 145 198 17 152 29 190 7 171 175 83 244 192 249 53 232 217 21 200 249 53 16 27 40 51 216 16 192 222 194 3 218 55 236 211 90 12 49 61 10 88 99 180 136 215 175 9 189 178 109 127 44 231 239 209 204 90 1 66 249 210 2 182 247 15 79 242 194 76 20 112 201 212 237 178 230 178 98 86 124 95 82 214 46 205 249 135 166 17 151 145 88 232 217 53 224 236 170 3 110 198 0 108 64 205 49 192 228 40 224 0 250 34 218 247 36 145 73 240 76 18 143 183 10 190 248 63 85 122 94 170 86 79 21 64 72 9 219 56 75 5 136 32 208 99 0 66 198 4 78 130 187 50 189 243 67 183 115 1 151 217 3 42 252 122 2 16 153 227 245 201 16 244 236 58 176 124 29 114 242 42 192 13 184 33 192 11 61 228 215 228 83 187 65 240 1 7 234 96 233 234 211 123 210 177 224 83 97 210 132 208 107 30 1 59 172 154 138 52 112 222 30 160 31 66 192 86 5 40 5 92 83 16 76 242 230 170 181 146 43 185 73 156 200 231 229 178 4 78 95 131 156 124 11 144 53 96 156 165 19 135 116 106 32 111 136 180 176 250 176 13 185 66 164 86 31 74 201 105 134 193 169 114 76 121 131 74 190 167 216 61 97 159 106 142 57 102 141 1 208 39 41 60 77 120 0 108 173 128 101 179 119 104 233 42 211 115 145 71 230 222 242 215 119 160 247 94 129 44 111 128 153 156 155 111 22 3 128 75 4 63 37 104 74 5 158 88 52 113 98 245 140 81 72 72 129 127 76 217 74 144 87 10 155 176 31 178 103 77 10 83 115 198 0 210 1 125 239 99 38 48 78 92 211 226 208 62 2 198 4 104 12 105 152 75 223 244 236 42 228 206 55 0 117 214 206 97 198 48 78 92 60 83 134 206 247 22 62 215 92 126 158 1 196 233 9 131 146 165 194 77 133 206 122 65 0 152 156 139 48 99 30 32 52 132 72 7 210 208 181 194 15 32 224 41 96 72 73 104 81 232 157 87 129 179 107 0 214 32 54 128 89 120 55 143 36 190 39 86 104 188 28 121 135 240 21 128 41 92 190 41 172 62 117 247 164 69 140 78 20 100 155 208 163 114 200 30 10 48 235 89 194 8 42 22 176 29 4 189 47 98 132 206 159 139 8 24 245 227 66 165 142 216 113 13 39 87 32 167 87 192 36 206 11 152 214 187 121 26 220 111 145 163 71 162 206 92 80 248 37 16 228 138 213 167 64 176 244 12 35 129 39 194 230 139 120 0 153 57 6 144 192 3 216 188 202 85 82 182 85 1 163 26 42 188 185 198 70 80 61 121 13 114 114 13 68 226 242 121 195 67 165 140 40 23 246 200 205 23 96 172 60 102 74 248 41 208 51 83 86 191 69 240 169 208 179 248 79 168 34 68 194 56 219 9 10 48 111 12 208 57 5 80 223 110 29 57 240 212 213 203 30 92 63 134 60 222 11 95 79 223 132 156 92 1 217 13 136 12 96 252 180 176 65 248 72 4 137 66 176 168 8 187 244 12 49 68 76 8 191 4 122 233 119 85 39 50 0 127 191 35 161 83 18 151 24 137 43 217 194 22 250 230 21 50 51 85 0 66 210 15 96 167 169 224 169 44 32 219 230 5 175 4 172 79 96 239 190 10 234 151 78 240 220 68 90 54 115 189 165 101 151 192 105 23 232 203 114 255 138 240 171 64 47 201 8 160 133 65 39 238 58 10 221 228 194 31 41 195 142 58 0 235 128 127 102 203 3 248 122 128 187 177 4 3 108 141 243 169 34 120 139 144 21 244 238 21 232 250 238 32 120 12 245 116 42 242 235 73 235 159 18 62 187 49 135 41 157 27 45 124 74 248 105 69 14 58 6 130 40 226 52 145 67 157 20 172 156 7 229 29 53 130 212 104 194 34 36 206 155 10 78 121 0 235 4 41 72 220 219 30 168 223 231 231 122 126 3 114 122 221 221 107 16 60 209 56 92 150 6 148 166 73 92 241 8 9 234 38 36 168 62 179 240 66 41 168 84 138 9 225 83 66 212 148 130 39 70 76 77 38 173 159 38 198 72 38 101 236 81 143 197 28 121 0 219 13 99 248 136 147 90 128 140 209 141 14 44 30 152 129 110 5 185 119 5 100 125 74 87 62 148 88 95 175 115 237 67 133 175 64 253 169 240 202 244 79 139 60 223 84 182 103 149 189 154 240 83 171 103 95 6 231 252 15 137 50 32 125 199 110 5 8 239 12 128 60 209 54 207 90 128 167 129 213 207 185 151 246 244 199 34 78 201 225 187 249 239 112 118 3 122 118 203 53 79 132 206 155 242 97 240 14 235 47 129 245 8 15 36 125 2 163 227 38 208 126 146 21 108 21 126 116 235 102 80 2 14 130 231 1 211 80 26 6 200 121 74 70 229 6 10 26 152 146 84 112 214 60 128 116 238 29 60 184 69 157 64 250 196 128 221 64 79 175 249 54 50 51 17 15 247 183 254 140 161 219 138 13 202 184 159 156 51 109 187 227 61 133 79 205 132 245 155 45 97 160 192 1 181 97 232 154 252 214 6 0 117 115 5 129 105 22 32 206 77 149 136 181 164 113 55 167 208 243 55 189 134 155 9 23 56 109 253 163 244 121 151 245 143 182 79 199 253 44 207 223 42 252 32 100 51 52 145 32 121 39 30 123 130 84 1 202 48 144 149 128 75 142 129 0 90 207 152 7 176 161 35 216 86 6 120 36 185 189 2 186 188 11 108 78 138 135 178 227 10 35 129 151 5 151 29 214 143 113 202 23 149 171 140 251 35 14 97 135 240 217 228 238 63 243 0 165 240 253 123 234 254 137 182 19 65 128 171 175 28 120 157 175 195 215 2 108 210 17 68 182 96 2 93 80 213 243 91 238 216 93 86 63 226 203 247 200 251 177 135 245 79 9 186 228 100 226 254 41 183 95 10 63 141 255 21 32 88 130 193 52 246 40 141 91 196 179 86 177 208 231 192 51 206 2 196 2 118 227 61 64 112 103 148 81 197 186 186 83 9 180 187 74 161 99 102 108 107 222 191 205 250 81 208 183 168 184 126 206 59 150 167 99 126 41 252 84 240 1 4 214 20 129 6 190 131 168 146 230 210 56 108 198 110 37 158 113 8 136 13 33 118 28 219 164 135 110 238 165 18 187 216 217 75 240 135 58 141 126 49 235 175 224 1 26 131 190 76 248 74 158 141 52 227 191 84 25 120 34 29 28 225 128 66 1 202 177 255 105 155 155 225 131 87 4 15 95 12 10 3 67 213 14 166 107 215 208 238 12 9 105 127 1 96 57 1 0 49 145 231 79 89 63 42 214 159 81 194 133 235 215 130 251 143 2 73 132 202 21 225 167 30 32 5 134 202 131 11 79 133 30 129 224 84 26 152 172 75 200 52 99 42 152 156 7 80 233 65 234 153 64 85 64 54 208 126 89 80 159 23 120 237 225 254 39 61 66 173 239 46 165 117 81 164 146 156 43 74 29 244 85 98 60 79 96 129 50 28 112 184 25 51 140 67 160 146 13 44 110 72 18 165 13 10 52 111 42 184 115 19 68 139 5 176 113 147 69 76 178 92 247 1 52 119 185 255 210 122 8 117 228 143 49 103 144 167 152 69 191 94 4 125 41 152 51 19 121 63 87 194 65 242 23 45 57 224 1 202 134 160 141 12 32 16 65 179 7 129 154 246 3 136 111 14 125 128 209 12 37 249 179 77 216 59 193 31 42 227 7 138 234 31 42 192 143 37 57 144 199 169 30 243 56 13 28 133 3 158 200 10 168 200 8 18 142 164 150 6 134 110 231 57 122 0 199 167 56 26 152 194 244 102 116 192 62 230 137 116 143 72 235 202 48 209 63 71 101 29 0 58 46 192 113 201 46 166 22 203 117 139 159 196 2 94 248 53 5 224 36 254 107 50 38 81 211 240 167 131 7 104 2 193 52 75 30 192 167 129 125 231 66 1 31 160 118 57 21 255 247 137 249 209 106 38 42 121 181 188 31 90 240 44 169 245 111 67 244 83 74 81 10 63 9 7 60 193 9 80 193 4 101 74 234 193 228 124 169 224 222 117 5 29 34 222 111 139 255 19 81 133 74 239 128 45 96 17 149 188 191 134 252 71 214 79 21 79 80 134 131 82 248 102 188 111 42 28 140 220 81 66 85 55 60 243 126 0 149 124 58 151 131 56 22 157 4 129 181 92 126 27 160 24 187 255 226 188 89 235 150 36 252 251 22 235 79 149 33 237 1 96 206 173 61 13 11 236 25 208 88 64 42 195 64 153 6 6 69 109 28 23 160 115 85 0 209 195 33 212 52 255 215 41 208 55 49 174 142 118 160 255 210 253 215 192 95 169 101 89 39 79 209 232 81 253 60 193 16 114 141 36 42 128 32 21 93 84 145 13 52 128 26 204 183 37 12 58 49 83 248 3 190 184 206 146 238 10 9 85 173 26 41 130 142 67 66 154 250 193 76 35 247 172 214 207 126 48 76 5 232 149 33 129 125 111 0 155 122 8 160 10 6 32 0 141 153 57 15 16 25 64 58 172 94 97 194 197 211 142 175 237 19 255 81 201 22 178 212 175 236 44 245 194 174 89 63 38 182 135 125 92 16 73 188 195 3 4 235 15 24 32 54 202 204 86 1 172 119 81 135 179 250 189 8 161 170 192 117 34 254 99 119 252 47 93 75 26 163 71 5 28 206 143 33 170 99 5 174 116 11 113 77 97 166 178 0 117 152 225 176 14 224 208 229 96 125 56 43 103 209 62 108 224 190 215 213 74 252 159 160 225 99 27 87 49 203 87 73 221 214 72 157 209 54 206 49 64 26 22 104 170 202 151 78 61 71 201 12 97 135 123 198 124 80 41 133 185 108 31 250 194 61 19 192 176 182 159 246 185 123 173 124 111 139 208 75 139 215 210 67 240 132 39 216 178 111 31 158 37 40 192 108 179 0 88 184 213 157 15 163 1 180 197 242 39 159 89 109 46 157 109 181 130 61 240 68 38 116 173 40 3 39 239 101 168 152 244 14 124 193 57 255 2 50 61 108 12 56 236 217 228 240 227 215 239 59 84 0 251 253 150 232 81 181 120 34 180 163 51 185 162 105 84 76 4 153 54 43 106 81 253 163 251 105 238 208 131 131 192 195 42 0 133 233 204 129 183 107 97 173 237 22 180 207 247 101 34 197 172 116 163 102 181 130 162 88 81 122 11 174 132 142 251 113 137 7 158 41 236 240 30 224 160 32 80 183 196 250 41 129 234 1 159 66 2 36 116 223 7 79 197 121 105 136 219 68 184 239 249 222 194 119 151 221 124 167 138 85 233 30 172 252 91 99 1 223 214 215 174 92 116 170 40 81 11 29 116 255 94 44 0 64 24 216 87 174 38 141 37 115 242 0 132 47 196 37 99 30 73 26 240 128 33 196 119 251 142 255 112 193 63 202 195 0 37 96 144 183 253 5 150 112 199 49 134 29 3 216 182 208 27 55 32 55 111 131 152 191 48 71 15 240 83 80 125 221 141 240 225 1 11 60 0 171 188 253 193 167 227 253 144 207 226 17 223 3 131 166 149 253 254 207 160 16 126 242 110 124 89 59 28 223 248 47 153 84 72 24 38 170 72 169 222 134 93 241 134 27 63 123 137 1 154 54 57 166 217 145 211 167 165 97 3 189 113 3 235 207 253 26 176 104 1 230 159 154 99 26 120 29 160 207 64 229 115 135 66 129 42 228 158 81 231 4 162 73 235 180 146 201 60 173 214 38 109 154 24 224 49 120 233 98 21 143 236 184 180 240 3 95 29 236 220 88 7 234 220 8 29 218 66 253 102 169 222 84 193 136 118 27 194 178 131 125 229 42 228 230 109 96 209 130 26 243 25 16 174 207 148 7 192 127 6 240 121 0 191 12 224 147 15 140 3 144 140 39 45 21 74 75 188 78 91 112 32 237 135 15 117 219 15 177 142 231 200 182 105 253 203 163 177 144 99 106 122 47 172 74 73 252 63 62 250 45 98 254 27 32 92 159 41 8 76 61 1 126 240 161 166 124 249 244 251 135 225 3 118 42 36 85 40 72 186 31 141 218 255 39 81 193 136 61 132 89 194 102 129 181 223 125 189 125 175 135 225 1 30 7 240 35 0 190 47 241 153 15 28 10 166 40 130 253 190 115 136 16 160 251 109 123 56 33 192 128 249 15 136 249 215 65 56 155 115 8 248 8 128 191 9 96 5 224 246 152 86 115 139 182 92 196 245 147 91 152 67 80 153 241 139 201 239 3 24 164 178 3 4 14 231 201 65 160 63 199 36 8 100 16 11 200 248 247 109 61 125 217 54 242 32 80 247 4 129 227 103 51 128 64 150 155 183 63 164 139 246 95 80 99 126 9 192 215 231 168 0 143 1 250 147 32 115 2 160 131 90 185 191 101 49 146 251 231 116 98 132 100 230 110 134 159 39 112 72 229 168 72 243 168 72 3 171 251 227 28 252 82 153 11 136 1 211 0 188 24 144 124 211 186 31 99 26 128 219 33 205 227 214 79 61 31 182 25 160 73 142 121 192 52 176 193 159 39 189 113 131 215 159 251 181 141 246 246 39 169 105 126 30 192 249 204 20 64 127 8 68 39 48 237 26 221 90 238 35 11 28 158 134 122 187 76 214 155 204 60 109 88 100 81 253 49 126 237 71 196 149 153 163 7 33 132 133 193 168 196 111 154 131 172 26 193 163 198 45 34 192 225 92 170 113 229 114 86 2 171 219 199 150 96 73 193 22 96 34 52 164 176 2 152 222 221 135 129 130 253 2 212 65 1 76 185 104 213 164 18 16 152 149 158 249 78 62 250 204 143 118 171 255 248 95 0 230 31 2 240 95 231 165 0 138 15 131 155 83 144 233 31 78 87 200 1 95 186 13 23 232 88 217 166 86 128 85 31 239 227 187 255 11 43 147 73 186 88 101 241 71 251 116 79 231 139 89 211 51 207 16 63 253 94 149 187 39 31 158 97 8 208 142 184 237 65 220 13 38 183 245 14 101 50 11 33 8 20 236 135 245 166 102 66 91 190 39 73 28 229 11 93 111 250 201 211 244 57 162 228 199 247 233 38 199 202 175 39 58 120 146 50 155 204 239 175 242 107 252 186 197 176 48 223 245 65 200 87 94 92 207 80 1 176 1 83 7 162 139 32 127 217 190 47 89 159 135 42 251 82 148 77 217 118 185 208 245 4 113 161 207 122 84 210 52 132 200 222 169 132 64 220 252 195 195 50 181 185 39 184 200 48 121 255 157 75 173 66 181 157 163 2 244 80 178 96 211 87 52 28 123 4 188 253 177 130 155 90 112 7 130 130 78 110 218 250 236 35 24 207 49 200 200 141 151 97 64 145 45 59 174 30 39 168 186 169 206 69 53 42 131 198 241 126 181 123 72 209 138 142 148 192 97 154 126 142 10 208 249 245 214 44 222 174 215 72 176 123 232 92 22 173 52 241 6 154 172 53 88 9 2 163 117 8 19 43 77 23 157 14 219 89 134 57 19 226 159 92 176 43 136 194 122 57 221 28 21 192 2 198 130 217 14 195 89 39 53 154 106 143 180 60 70 93 7 84 200 12 40 93 50 75 5 68 12 29 93 67 19 171 229 24 111 5 4 30 123 14 162 24 171 53 139 206 21 30 56 90 181 230 194 87 64 124 70 16 192 95 102 233 66 80 86 168 18 84 20 202 254 221 175 149 196 68 227 17 175 217 51 242 207 39 192 31 17 0 139 25 42 128 118 32 234 65 198 94 52 188 237 77 14 77 57 202 93 65 128 38 174 17 173 157 36 91 241 43 142 198 73 16 125 41 244 212 146 185 120 215 96 237 126 145 235 248 94 108 11 186 133 157 253 129 18 129 160 170 1 205 209 3 40 54 32 218 36 218 44 73 80 221 134 200 107 232 61 71 208 206 130 145 88 234 112 238 232 55 226 186 126 229 249 36 15 240 110 26 123 223 174 151 93 83 213 45 60 22 191 163 2 176 50 84 5 164 236 149 65 18 101 112 251 84 120 112 239 81 248 146 108 99 47 116 129 128 125 14 200 241 215 17 187 243 215 7 134 72 188 142 144 199 20 212 207 51 4 144 177 32 150 61 173 91 42 159 37 67 208 102 226 59 58 182 234 136 211 2 53 68 105 54 224 57 28 64 70 94 35 40 151 243 6 149 101 188 189 192 85 37 115 237 236 183 57 89 202 40 182 103 150 79 2 75 1 30 137 155 73 197 95 107 88 142 94 170 107 12 199 107 195 207 194 22 87 47 156 33 8 36 238 65 70 14 218 26 158 10 44 93 141 124 7 154 47 20 98 96 6 35 219 72 249 96 208 12 149 176 103 234 106 174 95 60 160 19 167 53 209 173 139 95 149 140 42 238 222 183 136 9 13 43 151 137 184 199 79 201 146 56 219 6 135 250 203 65 149 103 10 2 213 2 100 193 141 76 128 189 93 0 112 154 8 241 71 37 66 213 140 20 154 254 182 142 200 117 135 79 135 240 32 196 48 97 222 250 184 230 16 69 215 75 54 23 50 162 91 87 7 29 4 80 34 176 56 197 225 194 250 197 183 19 49 113 230 175 200 40 196 186 117 105 73 124 241 40 86 170 104 200 42 160 254 157 220 147 146 217 102 1 157 39 130 164 64 176 187 112 128 84 89 186 129 13 148 10 224 99 239 230 121 68 250 168 39 131 212 87 250 148 134 133 10 41 193 6 2 81 130 16 165 131 207 85 125 230 65 25 248 34 239 134 85 25 36 33 230 107 226 5 194 103 134 146 223 111 67 149 130 253 170 184 18 84 206 93 78 24 212 248 216 239 215 89 86 175 40 217 51 82 246 169 159 207 97 236 65 199 136 31 150 8 34 246 24 64 247 69 249 178 227 24 81 77 178 164 34 246 171 66 40 75 4 169 204 219 37 227 143 84 29 183 171 36 201 113 146 249 147 16 93 213 235 74 28 236 18 128 29 57 255 29 44 124 240 2 0 89 137 49 63 172 119 204 36 206 245 99 224 7 36 196 252 30 67 137 57 132 9 72 145 142 72 100 18 69 1 43 65 145 231 168 0 141 5 181 146 248 234 93 161 64 43 252 126 157 211 31 208 63 87 210 187 72 205 208 144 243 67 137 132 84 217 179 3 129 121 203 211 123 82 64 72 99 117 80 61 209 24 248 2 85 151 54 68 65 115 16 58 69 100 15 203 209 221 179 85 47 112 242 170 53 8 143 188 107 34 207 27 168 18 72 212 187 127 199 10 81 72 75 125 172 81 255 67 5 234 86 194 198 65 251 238 15 152 6 106 7 54 29 154 86 97 76 194 123 239 253 91 199 222 32 100 2 201 105 84 73 104 12 4 101 172 20 145 217 147 88 119 15 163 115 2 79 37 201 232 173 176 79 52 193 216 65 15 51 47 224 115 247 52 159 39 137 115 35 197 5 51 39 130 160 196 144 226 51 137 232 254 157 183 24 166 137 147 97 233 89 77 86 34 19 154 101 26 168 128 101 106 44 168 81 33 227 112 76 88 69 124 123 151 38 77 84 235 114 79 160 5 87 24 101 26 173 124 248 190 78 102 9 46 215 7 4 74 156 167 9 169 50 249 125 154 66 113 255 240 213 199 234 24 239 45 199 73 50 199 191 122 248 215 113 155 62 230 7 37 16 135 99 136 21 68 228 220 127 240 2 137 25 64 221 253 247 234 39 225 156 101 8 208 14 100 122 112 163 110 142 64 3 48 19 250 141 14 98 166 139 120 129 104 217 138 196 234 181 202 2 134 56 238 48 67 82 189 83 34 207 41 71 151 31 64 162 32 117 12 161 242 232 171 137 26 178 178 44 37 20 12 203 225 250 120 47 36 96 155 168 47 229 74 64 17 252 133 1 40 226 166 160 9 83 205 120 239 49 76 21 43 21 239 42 32 16 132 253 10 91 243 204 2 122 24 211 131 91 7 107 217 8 208 50 26 227 38 139 118 192 43 157 232 174 22 235 75 204 80 172 52 225 30 67 102 233 195 158 68 146 177 113 92 124 222 236 173 86 57 214 5 220 54 77 122 1 41 239 29 242 154 147 13 31 183 62 149 20 215 63 166 150 98 250 8 34 175 24 131 3 103 79 39 138 97 80 168 6 90 64 140 171 20 146 4 240 167 62 93 12 136 119 112 75 226 53 154 252 103 55 90 102 150 24 160 7 53 150 56 9 1 68 2 62 2 17 145 118 103 10 245 25 2 81 105 241 90 9 11 154 241 245 37 14 200 107 244 99 114 72 19 47 146 187 247 33 27 160 17 24 116 43 132 229 116 177 43 230 196 108 213 79 132 229 10 57 136 11 101 100 170 236 201 186 96 245 46 233 196 176 14 178 117 68 208 190 211 197 135 196 90 200 129 207 3 50 109 135 165 130 217 88 152 86 135 121 242 252 83 110 142 65 220 184 5 35 52 1 92 23 45 250 104 61 135 80 245 110 30 201 255 203 48 128 65 176 67 207 95 226 66 180 232 209 204 51 130 36 72 217 97 244 111 16 124 233 207 178 165 125 98 218 231 194 73 182 106 8 13 173 97 83 11 70 80 177 96 132 10 29 114 240 237 33 49 64 15 106 36 98 128 48 27 102 184 33 179 0 29 61 229 151 140 209 139 41 1 188 80 107 221 65 186 165 224 28 155 71 75 252 16 107 3 99 97 39 17 32 42 8 105 193 11 244 117 56 155 122 0 231 230 221 172 105 163 17 200 62 157 228 61 150 140 145 100 201 24 43 238 65 204 211 3 168 5 27 129 89 232 48 67 102 106 105 0 140 1 61 254 254 97 209 40 221 115 17 137 122 24 200 173 28 123 120 129 96 230 169 23 128 14 141 60 72 66 1 13 46 97 240 14 73 90 24 154 114 70 185 139 95 2 143 147 148 47 206 237 195 201 84 49 60 212 9 166 22 141 202 139 82 126 212 245 92 67 128 194 121 0 211 0 220 16 216 104 92 222 164 88 54 142 46 63 3 93 249 101 227 182 47 35 51 180 122 167 57 188 78 212 252 47 230 5 72 213 169 73 4 130 37 47 48 252 48 141 161 32 83 2 155 146 214 185 75 8 110 159 76 221 250 163 23 192 224 1 100 199 178 113 226 201 40 154 37 21 172 2 211 8 184 205 87 210 64 82 124 209 161 220 73 143 189 23 104 47 249 133 35 61 71 74 1 37 141 40 20 245 212 47 81 130 213 189 149 83 161 32 1 127 107 178 95 160 224 200 12 230 249 159 99 233 41 184 122 242 109 59 52 252 118 13 195 82 212 195 137 80 249 17 100 96 149 124 223 191 198 119 231 118 152 225 78 25 226 127 208 52 118 232 223 255 204 234 194 145 209 112 124 18 130 217 46 29 11 1 25 235 70 195 176 243 2 196 161 152 225 247 199 30 57 247 97 113 25 212 92 26 150 142 117 62 80 124 65 137 35 184 44 195 64 157 80 38 13 83 8 104 50 38 49 250 16 18 255 59 122 192 183 156 7 44 64 97 95 4 25 226 149 97 160 142 212 241 7 145 38 214 144 252 75 238 102 130 34 56 15 224 210 10 145 97 186 88 23 2 156 182 133 6 16 141 35 83 18 206 36 105 111 131 167 145 77 172 6 206 18 3 244 196 70 137 91 16 27 191 250 55 3 80 59 140 172 214 49 178 109 22 160 247 124 8 88 189 9 61 187 149 166 69 249 140 147 105 172 79 193 160 82 62 253 187 38 46 125 10 43 64 109 60 206 18 212 20 128 48 13 5 41 30 208 161 237 176 138 9 148 147 250 190 73 90 201 56 48 127 249 98 81 58 177 120 180 142 16 176 219 221 35 80 207 179 196 0 62 3 104 52 46 170 232 23 56 26 232 121 206 231 65 87 223 230 74 68 120 252 25 165 197 147 36 39 87 132 250 53 251 165 81 210 28 140 18 47 16 232 225 80 0 210 1 252 121 154 68 147 95 150 98 1 82 82 144 146 198 186 127 50 182 67 7 194 202 146 170 241 214 110 61 63 48 40 129 38 158 192 135 131 128 9 84 163 171 18 63 72 20 44 80 102 63 95 160 39 24 216 121 37 178 236 73 160 60 107 74 203 193 129 13 100 176 175 126 211 44 61 0 200 0 166 213 56 248 81 41 39 70 92 174 53 168 53 13 111 80 0 237 49 204 251 254 4 244 252 166 200 233 13 47 29 166 44 69 114 86 172 68 42 145 249 115 94 64 135 201 60 8 100 98 70 64 209 11 0 26 133 153 18 64 234 116 136 136 28 145 103 168 15 33 96 176 246 4 19 230 158 192 135 131 160 73 129 54 14 224 207 6 94 68 28 14 240 22 76 1 12 177 29 22 39 174 201 86 135 234 170 64 102 204 3 64 227 168 89 106 224 56 129 164 217 194 185 46 235 30 0 0 16 123 68 235 225 237 176 30 26 61 254 44 204 99 239 131 222 187 74 186 190 103 51 206 64 192 48 1 152 129 160 142 123 37 77 40 153 124 80 89 232 189 227 72 208 134 180 208 170 194 132 36 159 196 227 1 246 241 62 244 32 137 122 42 105 80 92 242 184 198 3 70 207 48 250 11 250 146 97 239 238 81 88 64 158 246 5 139 159 61 140 93 247 16 108 180 126 166 98 204 81 152 125 219 83 19 97 253 64 133 128 14 55 79 220 255 27 0 4 73 173 150 176 85 121 40 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!CSSDockFileLibrary methodsFor: 'images'!rss2Png	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 128 0 0 0 128 8 6 0 0 0 195 62 97 203 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 10 79 105 67 67 80 80 104 111 116 111 115 104 111 112 32 73 67 67 32 112 114 111 102 105 108 101 0 0 120 218 157 83 103 84 83 233 22 61 247 222 244 66 75 136 128 148 75 111 82 21 8 32 82 66 139 128 20 145 38 42 33 9 16 74 136 33 161 217 21 81 193 17 69 69 4 27 200 160 136 3 142 142 128 140 21 81 44 12 138 10 216 7 228 33 162 142 131 163 136 138 202 251 225 123 163 107 214 188 247 230 205 254 181 215 62 231 172 243 157 179 207 7 192 8 12 150 72 51 81 53 128 12 169 66 30 17 224 131 199 196 198 225 228 46 64 129 10 36 112 0 16 8 179 100 33 115 253 35 1 0 248 126 60 60 43 34 192 7 190 0 1 120 211 11 8 0 192 77 155 192 48 28 135 255 15 234 66 153 92 1 128 132 1 192 116 145 56 75 8 128 20 0 64 122 142 66 166 0 64 70 1 128 157 152 38 83 0 160 4 0 96 203 99 98 227 0 80 45 0 96 39 127 230 211 0 128 157 248 153 123 1 0 91 148 33 21 1 160 145 0 32 19 101 136 68 0 104 59 0 172 207 86 138 69 0 88 48 0 20 102 75 196 57 0 216 45 0 48 73 87 102 72 0 176 183 0 192 206 16 11 178 0 8 12 0 48 81 136 133 41 0 4 123 0 96 200 35 35 120 0 132 153 0 20 70 242 87 60 241 43 174 16 231 42 0 0 120 153 178 60 185 36 57 69 129 91 8 45 113 7 87 87 46 30 40 206 73 23 43 20 54 97 2 97 154 64 46 194 121 153 25 50 129 52 15 224 243 204 0 0 160 145 21 17 224 131 243 253 120 206 14 174 206 206 54 142 182 14 95 45 234 191 6 255 34 98 98 227 254 229 207 171 112 64 0 0 225 116 126 209 254 44 47 179 26 128 59 6 128 109 254 162 37 238 4 104 94 11 160 117 247 139 102 178 15 64 181 0 160 233 218 87 243 112 248 126 60 60 69 161 144 185 217 217 229 228 228 216 74 196 66 91 97 202 87 125 254 103 194 95 192 87 253 108 249 126 60 252 247 245 224 190 226 36 129 50 93 129 71 4 248 224 194 204 244 76 165 28 207 146 9 132 98 220 230 143 71 252 183 11 255 252 29 211 34 196 73 98 185 88 42 20 227 81 18 113 142 68 154 140 243 50 165 34 137 66 146 41 197 37 210 255 100 226 223 44 251 3 62 223 53 0 176 106 62 1 123 145 45 168 93 99 3 246 75 39 16 88 116 192 226 247 0 0 242 187 111 193 212 40 8 3 128 104 131 225 207 119 255 239 63 253 71 160 37 0 128 102 73 146 113 0 0 94 68 36 46 84 202 179 63 199 8 0 0 68 160 129 42 176 65 27 244 193 24 44 192 6 28 193 5 220 193 11 252 96 54 132 66 36 196 194 66 16 66 10 100 128 28 114 96 41 172 130 66 40 134 205 176 29 42 96 47 212 64 29 52 192 81 104 134 147 112 14 46 194 85 184 14 61 112 15 250 97 8 158 193 40 188 129 9 4 65 200 8 19 97 33 218 136 1 98 138 88 35 142 8 23 153 133 248 33 193 72 4 18 139 36 32 201 136 20 81 34 75 145 53 72 49 82 138 84 32 85 72 29 242 61 114 2 57 135 92 70 186 145 59 200 0 50 130 252 134 188 71 49 148 129 178 81 61 212 12 181 67 185 168 55 26 132 70 162 11 208 100 116 49 154 143 22 160 155 208 114 180 26 61 140 54 161 231 208 171 104 15 218 143 62 67 199 48 192 232 24 7 51 196 108 48 46 198 195 66 177 56 44 9 147 99 203 177 34 172 12 171 198 26 176 86 172 3 187 137 245 99 207 177 119 4 18 129 69 192 9 54 4 119 66 32 97 30 65 72 88 76 88 78 216 72 168 32 28 36 52 17 218 9 55 9 3 132 81 194 39 34 147 168 75 180 38 186 17 249 196 24 98 50 49 135 88 72 44 35 214 18 143 19 47 16 123 136 67 196 55 36 18 137 67 50 39 185 144 2 73 177 164 84 210 18 210 70 210 110 82 35 233 44 169 155 52 72 26 35 147 201 218 100 107 178 7 57 148 44 32 43 200 133 228 157 228 195 228 51 228 27 228 33 242 91 10 157 98 64 113 164 248 83 226 40 82 202 106 74 25 229 16 229 52 229 6 101 152 50 65 85 163 154 82 221 168 161 84 17 53 143 90 66 173 161 182 82 175 81 135 168 19 52 117 154 57 205 131 22 73 75 165 173 162 149 211 26 104 23 104 247 105 175 232 116 186 17 221 149 30 78 151 208 87 210 203 233 71 232 151 232 3 244 119 12 13 134 21 131 199 136 103 40 25 155 24 7 24 103 25 119 24 175 152 76 166 25 211 139 25 199 84 48 55 49 235 152 231 153 15 153 111 85 88 42 182 42 124 21 145 202 10 149 74 149 38 149 27 42 47 84 169 170 166 170 222 170 11 85 243 85 203 84 143 169 94 83 125 174 70 85 51 83 227 169 9 212 150 171 85 170 157 80 235 83 27 83 103 169 59 168 135 170 103 168 111 84 63 164 126 89 253 137 6 89 195 76 195 79 67 164 81 160 177 95 227 188 198 32 11 99 25 179 120 44 33 107 13 171 134 117 129 53 196 38 177 205 217 124 118 42 187 152 253 29 187 139 61 170 169 161 57 67 51 74 51 87 179 82 243 148 102 63 7 227 152 113 248 156 116 78 9 231 40 167 151 243 126 138 222 20 239 41 226 41 27 166 52 76 185 49 101 92 107 170 150 151 150 88 171 72 171 81 171 71 235 189 54 174 237 167 157 166 189 69 187 89 251 129 14 65 199 74 39 92 39 71 103 143 206 5 157 231 83 217 83 221 167 10 167 22 77 61 58 245 174 46 170 107 165 27 161 187 68 119 191 110 167 238 152 158 190 94 128 158 76 111 167 222 121 189 231 250 28 125 47 253 84 253 109 250 167 245 71 12 88 6 179 12 36 6 219 12 206 24 60 197 53 113 111 60 29 47 199 219 241 81 67 93 195 64 67 165 97 149 97 151 225 132 145 185 209 60 163 213 70 141 70 15 140 105 198 92 227 36 227 109 198 109 198 163 38 6 38 33 38 75 77 234 77 238 154 82 77 185 166 41 166 59 76 59 76 199 205 204 205 162 205 214 153 53 155 61 49 215 50 231 155 231 155 215 155 223 183 96 90 120 90 44 182 168 182 184 101 73 178 228 90 166 89 238 182 188 110 133 90 57 89 165 88 85 90 93 179 70 173 157 173 37 214 187 173 187 167 17 167 185 78 147 78 171 158 214 103 195 176 241 182 201 182 169 183 25 176 229 216 6 219 174 182 109 182 125 97 103 98 23 103 183 197 174 195 238 147 189 147 125 186 125 141 253 61 7 13 135 217 14 171 29 90 29 126 115 180 114 20 58 86 58 222 154 206 156 238 63 125 197 244 150 233 47 103 88 207 16 207 216 51 227 182 19 203 41 196 105 157 83 155 211 71 103 23 103 185 115 131 243 136 139 137 75 130 203 46 151 62 46 155 27 198 221 200 189 228 74 116 245 113 93 225 122 210 245 157 155 179 155 194 237 168 219 175 238 54 238 105 238 135 220 159 204 52 159 41 158 89 51 115 208 195 200 67 224 81 229 209 63 11 159 149 48 107 223 172 126 79 67 79 129 103 181 231 35 47 99 47 145 87 173 215 176 183 165 119 170 247 97 239 23 62 246 62 114 159 227 62 227 60 55 222 50 222 89 95 204 55 192 183 200 183 203 79 195 111 158 95 133 223 67 127 35 255 100 255 122 255 209 0 167 128 37 1 103 3 137 129 65 129 91 2 251 248 122 124 33 191 142 63 58 219 101 246 178 217 237 65 140 160 185 65 21 65 143 130 173 130 229 193 173 33 104 200 236 144 173 33 247 231 152 206 145 206 105 14 133 80 126 232 214 208 7 97 230 97 139 195 126 12 39 133 135 133 87 134 63 142 112 136 88 26 209 49 151 53 119 209 220 67 115 223 68 250 68 150 68 222 155 103 49 79 57 175 45 74 53 42 62 170 46 106 60 218 55 186 52 186 63 198 46 102 89 204 213 88 157 88 73 108 75 28 57 46 42 174 54 110 108 190 223 252 237 243 135 226 157 226 11 227 123 23 152 47 200 93 112 121 161 206 194 244 133 167 22 169 46 18 44 58 150 64 76 136 78 56 148 240 65 16 42 168 22 140 37 242 19 119 37 142 10 121 194 29 194 103 34 47 209 54 209 136 216 67 92 42 30 78 242 72 42 77 122 146 236 145 188 53 121 36 197 51 165 44 229 185 132 39 169 144 188 76 13 76 221 155 58 158 22 154 118 32 109 50 61 58 189 49 131 146 145 144 113 66 170 33 77 147 182 103 234 103 230 102 118 203 172 101 133 178 254 197 110 139 183 47 30 149 7 201 107 179 144 172 5 89 45 10 182 66 166 232 84 90 40 215 42 7 178 103 101 87 102 191 205 137 202 57 150 171 158 43 205 237 204 179 202 219 144 55 156 239 159 255 237 18 194 18 225 146 182 165 134 75 87 45 29 88 230 189 172 106 57 178 60 113 121 219 10 227 21 5 43 134 86 6 172 60 184 138 182 42 109 213 79 171 237 87 151 174 126 189 38 122 77 107 129 94 193 202 130 193 181 1 107 235 11 85 10 229 133 125 235 220 215 237 93 79 88 47 89 223 181 97 250 134 157 27 62 21 137 138 174 20 219 23 151 21 127 216 40 220 120 229 27 135 111 202 191 153 220 148 180 169 171 196 185 100 207 102 210 102 233 230 222 45 158 91 14 150 170 151 230 151 14 110 13 217 218 180 13 223 86 180 237 245 246 69 219 47 151 205 40 219 187 131 182 67 185 163 191 60 184 188 101 167 201 206 205 59 63 84 164 84 244 84 250 84 54 238 210 221 181 97 215 248 110 209 238 27 123 188 246 52 236 213 219 91 188 247 253 62 201 190 219 85 1 85 77 213 102 213 101 251 73 251 179 247 63 174 137 170 233 248 150 251 109 93 173 78 109 113 237 199 3 210 3 253 7 35 14 182 215 185 212 213 29 210 61 84 82 143 214 43 235 71 14 199 31 190 254 157 239 119 45 13 54 13 85 141 156 198 226 35 112 68 121 228 233 247 9 223 247 30 13 58 218 118 140 123 172 225 7 211 31 118 29 103 29 47 106 66 154 242 154 70 155 83 154 251 91 98 91 186 79 204 62 209 214 234 222 122 252 71 219 31 15 156 52 60 89 121 74 243 84 201 105 218 233 130 211 147 103 242 207 140 157 149 157 125 126 46 249 220 96 219 162 182 123 231 99 206 223 106 15 111 239 186 16 116 225 210 69 255 139 231 59 188 59 206 92 242 184 116 242 178 219 229 19 87 184 87 154 175 58 95 109 234 116 234 60 254 147 211 79 199 187 156 187 154 174 185 92 107 185 238 122 189 181 123 102 247 233 27 158 55 206 221 244 189 121 241 22 255 214 213 158 57 61 221 189 243 122 111 247 197 247 245 223 22 221 126 114 39 253 206 203 187 217 119 39 238 173 188 79 188 95 244 64 237 65 217 67 221 135 213 63 91 254 220 216 239 220 127 106 192 119 160 243 209 220 71 247 6 133 131 207 254 145 245 143 15 67 5 143 153 143 203 134 13 134 235 158 56 62 57 57 226 63 114 253 233 252 167 67 207 100 207 38 158 23 254 162 254 203 174 23 22 47 126 248 213 235 215 206 209 152 209 161 151 242 151 147 191 109 124 165 253 234 192 235 25 175 219 198 194 198 30 190 201 120 51 49 94 244 86 251 237 193 119 220 119 29 239 163 223 15 79 228 124 32 127 40 255 104 249 177 245 83 208 167 251 147 25 147 147 255 4 3 152 243 252 99 51 45 219 0 0 0 4 103 65 77 65 0 0 177 142 124 251 81 147 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 233 0 0 117 48 0 0 234 96 0 0 58 152 0 0 23 111 146 95 197 70 0 0 50 58 73 68 65 84 120 218 236 125 247 151 36 215 117 222 119 239 171 170 158 153 221 89 236 108 194 230 132 64 112 177 36 68 128 96 66 100 18 68 80 164 192 8 30 90 58 164 228 115 100 83 150 228 191 128 146 37 255 5 182 116 100 203 62 178 206 177 101 217 12 22 73 49 137 130 152 64 128 36 0 34 17 139 180 9 11 108 192 166 217 52 169 187 170 222 189 254 225 189 87 245 170 187 39 1 211 203 89 137 125 78 205 116 168 174 170 174 123 223 205 247 187 164 170 248 229 227 95 238 131 127 121 11 126 201 0 191 124 252 146 1 126 249 248 151 250 72 150 234 64 255 244 240 163 11 218 79 85 161 238 255 94 85 253 61 85 189 83 85 111 116 166 136 98 201 76 18 234 251 116 254 157 23 115 10 90 220 5 133 253 137 8 4 236 3 209 131 68 244 119 4 124 55 188 191 144 199 251 110 123 219 242 99 128 5 17 94 1 85 249 83 43 242 121 43 130 145 161 22 174 26 29 197 216 85 163 80 85 172 24 26 194 138 145 17 8 196 127 169 113 4 16 0 145 250 53 200 239 210 216 93 187 190 235 24 174 241 90 227 163 250 191 221 239 105 116 52 21 8 168 139 77 4 162 21 105 27 175 33 10 141 25 80 0 33 130 45 75 76 76 207 128 136 48 53 61 179 119 114 166 189 183 40 138 223 35 38 48 209 127 4 240 71 49 163 92 81 18 96 86 194 251 155 41 162 159 180 98 191 192 76 216 178 113 3 174 223 185 29 195 67 173 185 191 72 17 229 4 80 2 200 191 150 138 7 20 2 128 180 139 5 122 36 138 66 52 172 117 109 238 35 181 16 16 241 231 32 64 5 16 255 156 68 81 241 30 249 239 68 204 237 159 84 124 20 36 90 205 91 238 201 234 85 43 161 80 144 18 136 20 147 51 29 156 26 63 135 241 11 19 159 183 34 159 103 226 63 0 240 231 116 153 184 32 25 236 170 119 183 90 172 252 176 40 203 59 119 108 217 136 189 215 237 2 155 250 180 69 158 35 47 74 148 133 69 41 37 172 85 0 2 37 114 68 119 127 28 201 252 255 158 155 171 26 72 90 157 179 18 4 90 51 12 169 54 254 199 159 87 199 244 140 166 213 242 214 90 202 52 158 215 251 40 53 191 219 96 42 241 223 241 210 138 252 249 140 97 24 54 24 106 101 216 122 245 58 108 219 124 53 142 29 63 133 83 231 47 252 153 97 254 125 0 55 92 14 38 72 6 45 242 173 216 179 32 172 125 215 205 111 198 218 177 171 220 103 34 152 233 180 209 233 20 176 86 234 149 171 126 137 42 161 175 49 192 238 230 83 165 16 180 86 225 74 21 19 16 234 231 32 119 44 242 207 73 181 254 95 127 217 239 70 0 59 230 33 14 204 229 4 188 178 118 61 7 192 254 187 234 175 135 235 231 196 254 247 48 85 171 193 93 166 187 30 107 5 214 10 218 69 129 11 151 38 144 36 9 214 175 189 10 107 87 95 133 23 95 57 246 6 81 61 195 192 250 65 51 1 15 152 248 103 160 88 123 247 219 110 241 196 87 228 157 14 206 93 184 136 153 153 14 172 181 94 76 147 23 181 52 135 141 70 128 157 205 186 163 72 23 247 177 208 168 254 36 60 11 55 150 168 215 8 12 239 17 168 250 40 126 14 255 156 250 62 143 206 69 20 93 126 205 136 68 4 37 130 170 86 12 89 90 139 51 231 46 98 98 122 26 215 111 219 130 86 154 172 83 213 51 131 14 212 13 204 13 20 177 207 67 177 238 238 119 220 226 117 189 98 114 106 26 151 38 167 188 49 232 86 148 120 49 75 74 78 164 86 159 213 226 94 173 58 166 162 224 69 104 100 84 106 99 171 36 73 208 199 218 181 47 52 58 63 186 190 27 60 148 96 63 196 215 161 181 122 9 199 168 142 143 230 185 188 108 234 190 30 16 85 239 7 194 131 200 49 132 223 183 40 75 156 187 116 9 155 214 173 5 64 235 20 56 119 69 49 128 170 66 68 254 180 40 237 13 183 221 114 19 134 135 90 80 40 38 38 166 48 51 147 71 250 22 80 242 34 211 54 137 168 80 216 248 117 32 188 218 232 230 119 17 28 17 49 227 231 125 9 239 37 148 214 246 68 69 248 232 123 53 241 186 8 175 77 98 247 37 124 116 29 193 222 212 200 80 212 134 180 212 74 90 132 253 167 166 219 24 91 181 2 170 58 166 170 127 114 37 49 0 149 86 62 191 231 186 157 88 53 186 2 170 130 75 19 83 104 119 58 245 109 160 174 213 75 189 132 167 64 132 6 225 169 250 188 177 122 155 241 133 5 18 94 189 165 16 157 7 77 194 215 68 13 231 171 37 195 130 8 31 19 59 102 152 232 248 189 207 131 33 43 72 152 177 98 104 8 170 248 35 85 165 101 207 0 170 10 81 253 34 19 225 154 237 91 1 85 116 218 57 242 78 167 178 150 85 169 71 108 199 98 157 26 162 221 250 247 41 98 140 89 86 122 55 19 196 132 239 146 26 179 18 62 22 247 21 225 35 209 223 37 25 230 34 60 22 64 248 110 47 164 242 68 252 245 136 40 86 12 181 192 6 0 240 133 101 239 5 168 2 214 202 199 247 94 127 13 0 130 136 197 196 212 148 115 127 188 17 164 93 46 29 98 209 219 240 165 107 227 144 130 115 208 125 99 123 252 240 248 152 77 247 78 227 56 129 70 33 162 174 231 177 207 222 251 188 255 121 227 192 81 223 64 82 124 141 125 94 247 187 54 231 109 42 84 4 195 89 11 83 237 206 39 160 106 136 200 46 75 9 224 185 255 147 86 44 118 108 222 8 21 197 196 212 52 196 223 220 121 13 188 46 73 16 86 111 188 226 103 51 240 176 80 3 79 23 96 224 233 2 12 188 62 215 131 126 210 160 47 177 187 197 125 247 181 69 246 141 2 162 138 44 73 194 135 255 118 249 170 0 85 136 202 231 214 143 173 6 8 16 181 104 183 59 128 120 11 63 34 176 244 51 240 186 8 241 250 12 60 237 111 224 97 1 6 30 22 96 224 117 19 114 30 3 111 81 132 143 36 78 96 72 2 144 38 9 0 124 110 217 170 0 127 115 238 94 63 182 26 80 160 61 211 113 63 140 235 155 44 62 116 171 26 139 83 23 50 155 45 130 215 16 247 90 135 112 27 234 35 186 105 18 124 237 238 112 111 156 38 168 142 29 171 142 174 208 113 44 234 123 114 3 218 149 110 208 70 218 162 159 142 111 138 247 62 170 168 59 37 17 157 67 32 72 140 65 97 237 141 203 215 6 240 28 190 110 205 24 0 65 167 40 106 81 139 72 156 247 16 190 214 243 88 128 158 239 9 221 118 17 111 78 194 47 80 207 235 108 196 238 163 231 103 35 124 239 181 246 215 243 218 109 99 244 185 46 81 192 152 16 81 196 38 0 175 46 71 35 240 38 245 129 114 17 84 12 208 163 71 151 177 129 215 215 58 31 144 129 215 188 190 254 215 213 200 137 213 143 117 203 149 1 108 200 166 169 10 196 170 207 170 81 23 225 235 155 68 243 172 54 157 133 240 61 73 161 69 19 190 107 245 246 99 184 238 231 253 68 255 188 226 126 177 132 239 119 14 167 58 13 113 83 140 44 203 100 16 185 100 71 81 148 117 34 36 50 118 102 93 101 115 16 158 136 160 66 62 31 140 70 176 166 39 173 59 27 19 196 68 152 141 240 241 205 239 38 252 162 245 252 44 132 239 178 55 102 23 253 189 117 11 50 160 156 64 178 196 244 135 79 235 184 128 142 136 143 115 47 206 192 3 1 196 4 2 3 80 24 6 20 6 34 174 44 131 200 23 95 168 203 251 9 105 93 20 114 133 25 120 243 17 62 156 99 80 89 193 165 79 7 135 160 14 9 84 249 53 25 120 4 198 217 179 227 40 202 28 164 12 99 24 195 35 35 0 20 204 9 70 70 70 96 96 33 234 114 242 164 10 97 113 177 6 242 37 34 210 135 240 191 104 3 111 17 132 159 149 193 104 153 51 128 160 246 195 73 221 138 93 40 225 171 224 4 19 206 157 29 199 212 212 164 75 205 250 128 72 229 135 139 32 109 181 144 102 25 86 173 90 133 225 225 97 12 175 88 129 86 150 66 173 192 42 65 89 0 81 136 207 247 47 87 3 111 161 231 32 210 43 67 2 84 174 158 212 69 25 58 155 238 237 99 224 81 84 180 229 242 232 6 32 117 181 32 94 165 128 25 101 97 81 20 83 152 156 152 132 170 64 85 145 102 25 70 71 71 177 102 205 26 140 142 142 130 19 3 182 22 182 74 81 203 130 9 127 57 12 188 133 50 151 103 129 43 129 1 8 34 193 245 19 16 241 156 6 94 175 63 239 222 101 151 82 134 85 5 171 84 249 114 34 170 152 64 89 1 33 48 3 34 6 68 130 178 176 24 31 31 199 233 51 167 161 162 24 27 27 195 216 216 26 172 191 122 3 108 89 130 136 96 173 117 246 201 50 50 240 230 100 132 40 83 68 87 130 4 0 197 97 79 105 186 129 11 137 224 81 51 220 91 17 60 186 235 205 149 12 103 20 138 19 245 76 12 50 128 16 112 241 226 37 156 63 127 14 47 29 126 9 235 175 94 143 205 155 55 33 73 82 88 231 171 2 214 66 150 129 129 55 23 225 53 146 172 203 92 2 80 20 207 246 34 107 150 180 231 220 161 91 10 121 5 79 124 174 244 95 183 215 16 51 1 32 46 133 234 213 8 121 70 36 50 80 21 156 122 245 20 142 31 63 129 53 107 198 176 121 243 102 172 28 29 133 37 128 69 125 105 218 47 218 192 155 221 19 33 117 197 51 3 176 1 7 32 1 36 172 222 122 245 207 198 4 189 161 91 248 226 16 87 30 38 34 46 148 64 206 185 228 174 132 12 180 127 224 167 177 170 201 249 149 100 128 132 12 206 159 191 128 179 227 231 112 213 232 74 108 221 177 3 163 163 43 43 169 34 117 211 193 235 50 240 22 226 61 80 195 192 115 239 148 158 17 155 41 243 232 123 3 112 5 151 156 1 52 90 201 85 32 103 17 161 91 87 124 233 50 134 98 21 48 85 173 53 44 102 97 166 80 238 29 136 16 190 82 21 228 214 236 195 76 32 98 76 76 76 226 153 167 127 142 13 27 54 96 219 246 109 200 178 204 51 130 103 222 37 50 240 66 65 168 250 58 113 21 69 169 206 71 45 197 2 190 66 105 222 213 77 116 133 216 0 26 37 123 148 155 6 222 60 205 27 113 233 149 138 171 8 10 6 158 10 249 218 122 241 204 213 197 68 162 16 174 238 85 232 66 130 203 120 147 119 80 171 244 4 136 25 9 17 206 158 61 139 179 103 206 98 243 214 77 216 190 125 7 172 45 81 150 52 103 64 105 54 194 87 54 140 186 98 79 107 45 172 184 242 111 27 165 131 169 135 182 212 165 72 47 223 99 48 18 192 255 88 31 6 170 244 252 108 161 219 198 138 38 199 60 86 44 74 43 32 241 82 164 186 241 4 95 75 236 111 186 194 241 6 85 178 95 26 20 147 62 1 116 129 136 99 12 34 130 168 224 229 151 143 226 204 169 113 188 225 141 111 192 240 240 48 74 91 58 6 146 217 252 119 159 221 164 202 242 69 97 45 74 17 148 214 58 233 69 77 130 254 34 9 125 121 66 193 20 21 53 42 193 98 49 185 249 112 83 9 98 21 121 158 163 211 238 128 217 27 148 68 85 249 120 208 133 134 8 202 117 89 181 146 2 194 80 6 24 10 4 209 47 136 234 18 34 99 37 34 135 97 198 76 123 26 143 63 246 56 118 95 187 27 91 182 108 65 81 150 80 146 170 33 81 253 10 15 205 31 86 20 133 148 200 203 18 98 165 183 39 128 150 15 161 7 207 0 20 187 188 226 227 0 88 116 110 94 33 128 5 110 126 235 91 97 152 93 165 112 105 113 233 210 37 0 192 228 196 37 204 204 204 96 98 98 10 227 231 206 193 48 3 196 96 6 216 53 241 1 74 176 126 117 87 18 32 228 10 4 0 123 213 16 197 87 137 24 196 0 27 224 208 193 67 56 127 254 60 110 184 225 6 36 204 40 253 23 73 129 188 16 20 101 137 66 164 202 104 214 171 251 242 54 118 46 91 21 80 103 0 41 4 98 23 149 155 183 42 32 17 223 8 228 86 247 202 149 43 161 68 88 185 114 37 136 8 204 12 16 97 226 210 4 206 159 63 135 83 167 78 227 194 133 11 96 38 48 5 166 168 187 128 26 214 184 132 150 210 102 160 70 0 48 3 160 4 231 198 207 225 169 167 158 198 158 61 55 192 152 12 51 157 18 121 89 68 234 172 238 22 162 62 102 16 161 215 78 168 67 221 117 37 94 236 121 52 68 233 101 82 19 3 233 13 148 170 17 166 143 129 55 139 33 213 253 188 138 212 5 241 27 245 247 5 95 153 136 208 26 106 97 243 150 45 216 186 109 27 202 178 196 233 211 167 241 242 145 35 152 156 156 4 179 1 179 169 98 9 33 51 217 229 161 71 247 221 49 149 1 161 84 224 216 201 83 56 240 210 43 184 227 206 119 97 197 200 74 71 184 62 4 235 38 116 76 96 70 224 170 254 4 101 99 122 109 148 134 87 19 133 192 175 8 9 16 21 120 34 10 200 196 55 251 181 230 230 37 10 139 86 251 132 240 174 111 177 90 191 126 61 54 110 220 136 78 167 131 3 251 15 224 196 137 19 96 99 96 140 241 86 186 113 29 73 241 98 83 2 251 48 243 84 167 141 139 19 83 40 172 117 173 107 170 248 238 247 126 136 183 222 242 22 108 221 178 5 69 81 244 228 20 152 217 133 176 187 8 93 89 4 49 117 185 63 33 73 180 33 1 56 186 95 100 140 107 40 29 64 56 120 0 18 32 152 205 116 121 114 243 93 225 97 23 239 23 48 39 216 115 227 30 220 240 198 55 226 200 145 35 56 120 224 0 56 73 96 88 192 228 8 102 152 65 62 0 51 62 57 133 201 153 25 199 12 204 46 164 204 0 115 2 102 194 19 79 60 5 34 194 150 205 155 81 20 133 247 114 220 234 166 64 108 109 18 89 251 210 123 150 152 174 161 30 41 90 53 178 6 192 9 145 37 15 6 45 121 50 168 238 234 9 23 251 218 138 47 131 184 23 0 36 50 107 204 190 59 40 20 114 16 68 22 214 58 98 238 218 181 11 155 182 108 194 129 253 135 112 226 248 49 100 105 10 147 24 76 183 219 184 48 53 141 118 59 119 18 196 0 76 205 238 97 102 23 78 6 128 199 31 127 18 4 194 214 173 91 96 139 2 46 158 83 55 125 114 84 181 69 190 132 75 131 26 88 8 225 34 44 3 19 5 177 96 8 186 252 115 1 117 218 50 212 183 87 125 243 139 44 190 36 34 144 95 89 12 64 153 93 209 71 180 202 53 122 221 47 116 27 94 151 82 66 68 144 154 20 111 122 211 94 108 219 186 5 79 62 249 20 142 28 61 129 66 128 196 171 7 118 49 103 40 107 85 186 238 206 227 144 60 140 215 213 143 61 254 4 152 8 91 183 110 69 81 20 149 123 193 129 9 186 12 184 69 233 238 192 116 141 184 136 1 6 216 34 62 128 72 160 64 213 64 67 105 215 98 139 47 201 233 227 163 175 28 133 49 140 149 163 163 80 1 146 212 96 245 234 213 85 204 94 68 192 204 176 182 118 57 99 251 76 107 191 18 66 10 21 139 162 93 130 211 20 183 188 253 237 200 246 61 135 103 159 221 7 166 150 43 63 83 174 153 128 106 110 237 102 2 5 240 211 199 126 134 123 215 172 193 138 21 35 176 101 25 101 50 123 241 9 52 54 6 23 166 64 27 140 19 218 200 181 159 183 176 28 25 64 180 118 3 52 138 14 45 180 248 146 84 193 73 130 163 71 95 193 249 243 23 60 81 80 245 29 180 86 172 192 85 171 86 97 213 85 87 97 243 198 141 88 117 213 170 10 109 131 200 69 16 1 245 225 0 39 125 172 181 152 233 116 80 88 1 19 193 24 131 55 237 221 131 205 155 54 224 251 63 124 16 101 169 128 95 225 236 34 79 179 51 1 27 32 81 60 240 189 239 227 87 223 123 55 70 87 172 68 89 150 144 88 220 7 53 22 121 3 243 170 2 111 249 155 198 90 170 117 62 117 49 212 178 101 0 138 90 172 232 53 24 120 196 236 86 36 49 140 73 144 36 193 152 100 136 8 138 78 7 103 78 159 198 233 83 167 240 226 11 207 195 176 193 230 77 155 112 245 166 77 216 180 101 19 76 193 40 69 160 164 16 107 49 53 51 131 162 116 18 34 118 171 242 60 199 216 216 26 124 244 190 251 240 143 15 252 19 38 38 38 161 254 134 204 197 4 204 10 192 160 44 75 252 248 167 143 226 158 247 189 23 38 73 128 144 201 123 173 106 192 91 254 13 181 232 173 255 112 95 98 140 161 165 122 44 105 123 120 16 195 205 22 235 197 181 79 75 221 69 226 141 73 130 170 1 20 222 58 39 239 223 39 48 73 6 5 227 216 177 19 120 236 145 71 241 192 183 255 17 7 14 30 130 97 70 97 45 38 103 58 16 133 207 0 82 3 132 65 68 156 53 47 130 123 63 240 107 216 177 99 59 138 188 112 171 89 164 145 110 110 246 245 185 42 36 147 36 184 120 113 2 15 255 228 167 24 202 50 36 73 2 67 132 36 92 35 145 99 100 118 42 69 73 171 215 179 109 221 251 177 15 120 37 198 192 16 13 196 22 88 122 136 24 170 99 0 115 17 190 209 229 139 8 41 35 188 182 10 17 235 137 33 16 56 162 169 215 51 68 10 246 41 114 78 12 210 52 69 89 150 248 217 207 30 199 95 252 247 255 129 199 158 120 10 134 9 89 150 185 24 64 159 85 168 170 176 34 40 203 18 183 191 243 29 216 185 99 27 138 98 129 76 64 64 154 38 56 122 252 4 94 220 127 0 173 44 3 39 166 46 105 247 76 199 236 208 192 12 155 10 18 134 187 182 240 126 188 31 197 12 116 37 20 133 18 162 88 187 65 255 130 144 126 162 31 253 219 167 67 111 188 138 131 140 235 9 171 90 175 102 152 192 76 232 228 22 39 207 156 69 187 40 193 196 248 249 211 63 199 190 103 159 195 109 239 124 59 174 187 230 26 228 69 1 107 109 195 115 240 136 157 80 43 200 139 18 119 220 126 27 136 8 47 29 121 217 221 156 36 153 85 29 0 78 18 164 105 138 199 159 126 6 155 182 108 116 246 128 181 141 168 229 66 212 0 119 221 11 142 162 157 33 192 52 40 176 168 1 128 68 69 171 229 117 181 79 91 136 10 172 183 248 53 88 255 90 75 2 242 17 189 51 231 47 225 165 227 175 34 183 130 132 13 56 49 104 181 90 96 0 15 254 232 199 248 198 183 255 1 121 81 56 255 223 75 3 10 98 218 67 79 138 88 20 69 129 187 238 188 29 187 119 237 68 62 143 36 8 234 201 176 75 39 127 255 7 15 99 104 104 8 105 98 144 24 83 171 171 112 30 143 126 66 62 132 93 109 241 251 158 248 213 198 12 227 143 51 168 80 240 64 64 162 250 246 205 47 2 31 7 164 176 86 33 226 106 3 93 121 152 86 238 95 168 55 236 228 37 94 58 254 42 206 93 184 88 135 122 153 192 254 92 73 146 160 149 166 56 123 118 28 127 247 213 175 225 240 145 35 104 101 25 210 36 169 162 128 74 84 49 146 138 160 200 11 220 125 215 157 184 238 154 157 40 138 178 41 53 186 176 11 66 218 39 49 140 11 151 46 98 223 115 207 161 149 102 21 193 42 56 56 34 144 49 46 164 107 106 85 0 34 247 218 127 70 198 212 251 135 205 27 149 28 75 193 101 205 0 81 64 232 53 227 227 8 249 149 174 190 132 202 19 65 66 217 24 112 230 162 91 245 69 105 253 74 70 84 23 16 208 123 1 54 236 192 21 20 120 240 161 135 241 163 135 31 198 200 240 8 210 52 3 39 12 195 193 168 116 183 194 138 32 239 116 240 238 187 238 198 170 85 43 81 148 37 172 149 57 152 192 37 145 210 196 224 145 159 61 129 153 118 7 73 154 86 18 192 48 55 12 195 196 191 238 222 226 207 195 170 135 15 136 85 204 114 69 168 128 10 169 67 230 36 124 79 149 112 23 132 139 148 130 178 40 145 23 22 98 157 127 31 44 247 87 78 156 196 248 133 139 224 42 193 67 49 23 85 76 23 32 97 153 24 9 27 100 105 134 67 135 95 194 87 254 254 27 96 6 178 52 171 45 236 104 197 169 42 108 89 226 147 247 253 134 143 35 20 205 162 209 6 19 248 234 39 54 80 17 60 242 179 39 48 228 165 76 237 181 212 155 203 74 246 110 241 62 149 245 95 125 159 253 111 92 246 12 64 141 178 240 249 8 223 15 38 69 84 96 173 69 187 211 198 204 204 12 58 157 105 180 167 219 40 58 29 156 159 184 136 3 175 28 199 212 76 219 37 72 60 14 175 70 41 227 126 76 96 225 92 43 195 140 52 205 112 118 252 12 190 242 181 175 195 16 33 77 83 39 130 61 35 177 247 199 75 91 130 12 227 195 31 188 23 157 60 135 181 165 47 24 237 109 81 15 139 211 152 4 207 239 127 17 39 79 159 66 154 24 112 194 222 189 11 98 157 65 100 102 217 184 222 175 242 34 180 98 8 67 132 65 112 192 128 234 1 66 103 16 245 177 242 155 49 251 158 188 188 0 133 181 248 192 7 127 13 137 73 241 234 201 147 48 134 113 252 248 73 236 63 252 18 210 137 105 76 79 78 33 77 83 24 49 62 195 199 96 31 26 110 212 13 68 184 192 22 174 132 140 1 36 73 138 139 151 46 225 139 95 249 42 238 255 216 71 145 250 16 111 64 51 83 95 179 93 90 139 45 155 54 226 29 183 222 138 71 31 127 28 67 204 16 65 99 69 170 47 12 12 245 6 105 146 226 225 71 30 195 253 31 185 15 182 173 80 216 74 37 205 191 26 169 114 115 93 20 213 84 149 213 87 84 61 0 121 23 112 206 94 183 89 187 107 20 40 75 20 194 40 89 176 102 108 12 211 121 129 109 187 118 98 215 181 215 192 24 131 201 137 41 28 60 124 16 79 60 241 36 166 38 167 145 100 41 146 52 133 241 185 249 42 12 187 0 38 248 218 55 190 137 79 125 226 227 200 59 29 148 182 108 70 243 84 81 150 5 110 127 199 173 216 127 232 48 38 46 93 66 150 209 156 76 192 204 56 118 252 85 156 56 121 18 87 111 88 135 60 215 170 120 101 254 123 231 90 89 97 168 66 202 87 223 36 159 243 21 98 4 186 78 94 159 188 160 110 3 15 61 168 88 85 25 120 245 161 51 222 68 45 202 162 192 249 201 41 180 219 109 148 69 129 78 167 131 153 153 25 164 89 130 189 55 222 136 127 253 219 159 197 199 63 118 31 54 172 95 135 153 233 25 111 176 89 239 214 73 127 117 224 137 193 68 72 146 20 39 79 157 194 183 191 243 0 90 173 12 73 98 64 193 8 99 246 13 169 138 78 81 226 253 239 190 11 237 188 64 89 74 211 213 141 212 129 139 13 16 18 147 224 177 199 159 66 150 166 85 44 161 225 250 49 55 183 224 150 86 21 76 81 32 200 7 150 34 132 144 229 29 10 118 77 24 226 187 123 168 143 129 215 141 205 87 89 142 21 52 26 169 194 150 192 165 233 54 164 234 150 241 13 163 214 162 44 75 228 121 142 153 246 12 214 173 95 143 143 125 244 62 124 226 99 31 65 154 102 232 228 57 202 162 172 139 68 230 96 2 67 132 36 205 240 252 139 47 224 217 23 95 68 150 181 144 26 71 252 0 237 30 206 187 99 235 22 188 121 207 13 200 203 104 166 193 44 76 144 36 140 23 15 30 194 228 116 27 73 226 60 12 10 76 213 21 31 168 140 188 136 25 16 61 175 153 231 10 9 4 73 37 222 5 32 153 21 0 177 65 120 141 11 65 8 165 10 38 59 237 89 141 158 64 148 178 180 200 243 28 237 153 54 214 173 91 139 223 252 244 253 216 123 227 30 204 116 218 200 243 188 174 25 232 231 29 248 11 115 134 96 11 223 253 222 15 112 225 194 69 164 105 230 50 114 113 176 72 21 69 89 224 174 59 222 5 195 132 82 172 79 61 247 145 4 228 18 87 89 106 240 216 207 158 64 43 75 145 24 6 147 11 92 113 159 80 176 219 212 109 76 72 56 228 18 60 241 67 40 91 175 0 6 32 212 21 193 85 41 118 23 225 251 33 114 134 188 119 94 150 152 156 238 132 136 208 188 186 83 189 177 22 202 180 110 191 237 93 248 240 175 127 16 170 152 147 9 224 227 5 0 144 24 134 136 226 107 223 252 22 134 178 172 54 44 67 48 7 138 82 44 86 174 88 137 119 188 245 22 148 121 14 171 218 151 9 72 9 240 165 100 79 62 243 12 178 36 67 98 18 24 50 96 50 145 65 71 213 239 115 140 230 63 87 2 105 196 20 129 25 174 4 21 128 170 20 160 174 5 236 135 124 137 126 162 223 19 127 186 157 59 183 138 22 87 99 47 62 169 83 230 57 118 110 223 142 79 221 255 9 168 234 188 76 128 138 9 12 206 142 159 195 163 143 63 129 161 86 203 101 247 42 119 140 93 195 74 89 226 182 119 220 138 118 39 135 148 101 163 221 173 155 9 200 16 242 188 196 147 207 236 67 146 38 48 9 213 42 128 25 73 226 182 248 61 102 2 27 6 27 174 152 130 64 13 70 188 2 34 129 129 160 253 13 188 126 18 128 72 145 23 5 102 98 226 191 102 6 20 228 157 28 99 87 173 194 191 250 244 253 80 56 38 8 237 230 125 37 129 183 9 178 36 193 119 31 124 24 170 138 196 176 47 248 244 25 59 103 217 32 77 83 220 252 150 55 35 207 93 42 89 128 30 38 32 114 46 157 73 24 207 237 63 128 161 172 5 195 73 37 238 141 47 58 117 91 172 6 130 1 74 53 67 4 53 128 43 37 18 40 190 177 83 226 122 64 237 47 250 253 235 188 176 152 233 20 243 18 191 97 73 119 249 198 213 208 5 37 88 117 221 59 107 86 175 198 111 125 250 211 80 34 148 69 57 43 19 212 5 160 12 177 37 126 252 200 163 72 179 204 17 36 180 120 121 131 48 183 37 126 245 61 239 246 105 99 11 248 196 84 47 19 16 18 54 216 247 252 11 40 202 210 229 31 124 146 40 190 254 88 2 212 234 128 43 134 8 76 96 248 138 73 6 5 245 45 190 62 176 159 232 175 129 154 173 8 102 242 194 135 187 251 19 159 217 149 113 165 73 130 44 203 208 106 101 200 66 17 134 55 144 156 219 70 149 234 80 85 148 69 137 177 177 213 248 240 7 63 128 153 118 7 182 180 174 178 64 180 47 19 16 17 18 99 240 79 223 251 33 84 60 74 119 87 49 9 172 96 245 170 21 216 185 115 91 157 40 210 254 128 212 204 140 212 36 56 252 242 43 224 164 54 4 123 138 65 124 56 24 93 117 4 49 51 92 49 217 192 218 178 167 106 66 86 84 159 89 221 160 80 230 62 157 231 189 5 149 209 138 55 198 197 240 71 134 135 113 225 210 37 60 245 244 207 241 147 159 62 138 23 246 31 192 165 75 19 24 30 26 66 171 229 98 239 1 25 36 228 6 172 42 202 34 199 245 187 119 227 174 219 223 229 67 186 234 152 160 95 216 216 75 129 52 77 241 208 79 30 65 146 37 13 23 45 180 154 149 133 197 173 55 191 5 69 217 180 47 122 230 13 249 227 237 123 254 5 180 210 12 38 113 126 126 175 27 232 222 15 177 255 138 41 60 51 152 1 230 2 6 80 22 94 195 175 187 9 154 20 213 9 212 197 35 34 192 84 187 93 137 215 217 136 223 106 181 112 240 208 33 252 195 63 60 128 201 169 9 36 38 169 154 49 196 90 172 93 191 30 247 188 239 189 216 190 101 43 242 162 64 0 134 11 76 32 162 40 138 2 239 185 251 14 60 247 226 126 92 188 116 9 76 41 96 4 172 220 19 54 102 102 24 99 240 195 135 31 198 175 189 255 61 176 226 188 12 246 141 233 193 206 249 149 55 237 193 223 126 233 43 200 90 22 89 20 130 86 79 40 34 15 241 106 12 14 28 124 9 105 154 160 147 155 158 16 120 119 102 180 234 99 36 83 193 233 135 96 144 14 32 27 176 180 129 160 42 1 132 134 13 208 141 209 47 0 102 242 206 172 196 119 137 21 71 252 135 126 244 48 190 248 197 255 135 78 158 99 100 100 4 173 161 22 134 178 12 173 86 11 195 35 35 152 184 120 17 127 243 127 254 47 158 125 225 121 180 134 178 74 159 198 161 104 43 130 118 39 199 135 238 189 7 157 118 199 23 152 196 238 105 36 9 200 229 247 243 188 192 35 143 63 129 44 73 144 112 192 29 170 153 185 149 182 240 43 123 223 136 178 116 133 43 64 119 237 163 115 137 9 132 243 23 46 84 179 1 137 184 111 73 88 108 7 196 255 235 108 32 6 146 12 26 72 40 216 253 122 245 248 125 93 121 2 0 157 34 119 129 152 89 136 31 196 240 51 251 246 225 7 15 61 132 161 225 33 100 105 2 102 3 99 24 100 92 20 143 217 229 250 71 134 134 240 247 223 248 38 14 30 58 140 86 150 85 182 4 249 27 40 112 17 196 157 59 182 99 199 182 109 78 82 168 250 242 130 94 38 0 51 210 36 197 190 103 159 67 154 37 13 255 157 217 197 55 172 181 184 246 154 221 176 133 207 18 66 27 199 10 183 129 217 253 158 131 135 14 163 149 166 117 181 80 236 18 70 53 0 220 149 2 174 141 67 115 133 24 129 65 1 72 111 149 16 1 200 173 69 81 202 156 214 190 49 12 107 45 190 249 173 111 99 40 20 117 34 0 43 249 50 174 80 230 205 12 50 6 173 44 171 98 250 108 124 76 159 234 129 146 162 10 91 148 184 231 253 239 65 209 201 29 50 88 247 132 146 168 40 149 19 131 167 159 121 14 89 226 206 111 140 179 1 130 36 16 40 222 112 221 53 232 248 202 98 233 9 122 169 15 37 19 140 33 28 61 113 178 105 176 118 89 254 221 43 190 193 4 62 46 176 252 25 32 130 117 109 226 5 186 213 80 138 160 83 148 179 90 251 149 238 103 131 23 158 127 1 101 105 221 143 143 226 242 141 201 93 94 201 48 17 216 24 76 78 76 224 185 23 246 35 241 223 9 40 29 161 41 163 40 75 236 218 185 29 87 111 216 224 220 66 169 193 160 26 146 192 95 159 73 18 60 253 204 62 100 105 82 91 228 204 213 152 187 157 219 182 98 168 213 242 157 196 210 19 242 174 198 212 18 227 232 177 99 72 19 135 123 236 220 93 39 37 155 197 34 189 226 63 174 22 26 132 17 48 24 9 224 161 91 43 220 46 175 18 242 162 68 4 222 53 43 3 176 49 56 244 210 75 174 225 130 216 3 229 117 205 227 139 153 192 247 241 145 97 156 60 125 218 133 94 67 171 118 220 15 224 107 254 238 186 227 157 40 203 210 175 92 237 97 2 242 233 100 195 140 253 135 14 35 73 18 36 62 75 167 62 200 67 126 254 239 182 45 155 92 146 42 120 2 138 158 17 117 196 140 35 175 28 7 0 164 198 248 50 48 131 132 77 45 250 67 229 16 105 131 25 16 215 23 94 25 161 224 0 213 88 87 253 16 128 162 180 174 135 110 1 162 140 137 112 254 252 69 143 239 69 46 189 12 141 166 122 118 49 1 137 151 4 140 3 7 14 86 171 53 172 126 19 181 85 89 17 220 180 119 175 139 14 74 136 85 116 49 129 71 32 55 198 224 232 241 19 72 140 47 15 39 119 172 64 12 81 193 158 27 174 135 45 203 234 216 208 94 134 98 0 211 237 118 101 223 160 43 152 213 200 18 6 55 145 61 38 146 127 143 168 206 172 46 243 56 128 195 196 115 196 118 171 182 20 65 81 218 5 23 54 134 38 233 64 32 138 110 104 163 180 172 98 2 7 249 162 34 88 187 102 77 21 55 167 174 234 218 240 157 44 203 112 205 181 187 92 36 207 21 15 52 153 192 167 94 153 128 231 247 31 116 214 187 161 70 181 111 40 233 94 191 102 173 235 71 244 125 124 182 97 80 6 212 51 215 238 125 248 229 163 85 240 170 219 16 236 47 254 13 146 42 80 132 43 192 6 168 67 254 85 153 53 169 34 47 109 101 34 44 52 177 179 123 247 238 70 164 13 115 48 65 216 165 148 18 155 55 94 237 139 81 180 146 38 136 210 187 238 248 37 174 187 246 90 148 82 186 85 75 117 5 115 243 60 206 219 56 119 254 124 85 57 92 173 90 191 223 250 245 107 81 150 2 241 184 70 4 52 153 64 106 150 78 76 82 5 170 122 194 191 125 152 128 162 78 34 115 197 244 5 64 162 105 223 84 163 105 45 116 245 171 235 230 221 243 198 27 80 196 221 60 179 49 129 56 24 183 178 116 41 225 55 239 189 209 149 148 135 6 140 218 54 245 227 103 28 104 227 182 205 155 157 15 143 184 218 183 171 90 217 175 188 179 231 198 145 118 53 148 132 82 237 13 235 214 65 172 27 94 33 209 156 63 27 79 12 247 46 203 233 241 179 85 140 163 91 252 83 95 215 143 96 140 107 45 187 114 66 193 170 17 92 44 22 37 250 99 6 216 176 97 3 118 108 223 222 236 208 233 102 2 159 75 40 109 137 188 211 193 205 55 189 5 163 163 163 14 51 8 212 136 8 134 222 1 144 147 48 107 215 172 118 229 99 82 15 175 70 87 118 80 61 4 216 248 248 185 30 194 184 62 2 197 154 213 163 213 16 139 56 239 17 152 128 124 118 80 193 56 117 230 140 103 128 222 82 241 190 94 0 115 163 102 64 151 123 65 8 5 145 231 109 149 194 202 162 68 127 172 2 242 60 199 103 62 243 91 46 91 152 231 149 52 80 47 81 172 40 172 186 26 192 153 153 54 214 172 25 195 125 31 186 23 133 79 253 86 53 106 33 86 16 49 131 10 176 115 219 182 170 219 72 5 85 166 48 110 67 11 191 234 212 153 179 81 114 38 46 232 168 241 137 66 106 185 238 102 114 12 107 125 67 139 67 59 225 42 46 209 147 11 160 94 102 104 214 17 94 41 85 193 62 6 14 95 69 243 90 68 151 170 162 44 75 100 89 134 127 255 135 127 128 255 249 191 254 55 206 158 61 227 74 193 189 69 174 4 216 210 162 40 115 236 218 190 3 191 243 217 207 128 217 33 134 169 175 14 110 144 41 120 2 161 66 88 5 165 79 233 134 42 96 162 8 152 201 27 116 14 129 164 233 78 6 139 60 236 91 20 5 242 188 104 128 68 57 96 83 143 25 44 174 192 85 163 232 88 12 37 167 149 170 80 168 207 1 32 2 138 27 84 34 104 0 12 64 21 44 107 41 58 175 207 191 16 41 48 60 60 132 63 252 131 207 225 137 39 158 194 115 47 188 128 87 95 61 137 243 231 206 99 237 186 49 108 222 190 13 111 187 245 22 236 221 115 35 58 157 142 83 55 234 179 104 177 248 175 36 64 85 178 128 178 40 48 53 53 229 62 119 115 121 171 226 75 66 221 141 219 206 115 87 1 212 8 236 184 246 240 240 219 38 167 167 171 94 196 170 135 143 106 38 16 40 218 157 142 155 165 60 75 236 35 78 4 185 130 26 211 24 163 19 51 204 114 101 0 170 140 39 55 70 254 117 67 93 6 38 176 214 98 239 222 27 113 211 77 111 118 117 1 108 42 8 104 181 22 211 51 51 21 64 80 37 42 251 137 127 95 101 175 34 200 243 2 127 251 215 255 13 89 43 115 253 129 190 248 194 144 239 207 55 181 165 95 20 133 235 25 168 8 85 19 171 180 130 239 124 249 111 150 238 38 82 141 125 28 20 168 97 198 116 187 51 16 0 209 165 100 128 179 46 240 162 240 24 139 75 114 165 161 79 47 128 65 26 102 228 196 21 0 159 107 207 174 59 104 131 211 213 79 252 131 216 35 151 41 138 178 132 180 219 232 228 121 213 27 152 84 177 119 3 130 214 171 46 106 62 141 55 241 170 74 213 84 165 92 75 201 8 241 154 159 153 105 123 104 218 165 173 14 93 66 176 104 122 21 209 140 31 44 33 179 106 183 139 230 81 197 93 166 143 171 200 92 8 0 117 55 81 4 241 175 33 186 19 140 55 107 93 192 201 131 67 170 58 16 73 18 113 134 152 111 55 11 37 218 213 234 239 10 49 139 55 76 89 155 193 162 165 96 130 138 1 58 237 224 214 62 189 44 189 0 191 226 206 228 165 29 24 202 113 220 247 7 52 211 201 92 217 95 92 215 249 121 247 175 151 25 154 147 37 168 203 0 172 254 69 140 85 137 103 104 151 49 136 232 251 24 88 31 223 233 241 115 3 241 4 150 218 178 248 114 97 173 203 164 13 160 155 149 187 96 215 168 185 92 250 254 40 141 244 63 163 15 51 84 123 247 39 114 140 28 170 17 243 244 103 130 193 16 223 117 65 229 32 162 47 45 245 241 151 56 29 76 255 65 85 81 88 65 106 6 83 192 128 104 165 199 171 24 253 152 129 185 247 7 82 47 195 132 218 20 138 108 133 154 25 162 170 97 194 44 196 199 172 117 141 75 241 120 233 216 171 161 46 240 191 46 247 64 208 105 0 232 148 165 171 171 95 66 25 80 181 111 163 55 45 90 73 131 57 243 204 220 184 24 141 52 201 156 198 91 67 2 244 23 255 241 251 131 120 28 62 122 44 212 69 124 111 217 135 130 137 232 83 226 135 36 25 230 129 5 48 102 83 13 179 17 176 155 63 120 14 46 158 109 53 243 44 226 191 251 253 165 124 188 120 248 101 136 40 152 232 254 65 28 127 16 209 133 47 128 232 185 78 105 145 24 131 65 114 64 191 34 137 30 23 112 30 235 186 166 59 245 149 58 243 137 246 224 93 12 130 56 83 211 109 188 120 248 101 36 198 140 19 209 23 7 178 120 6 66 24 224 61 234 171 100 82 99 6 134 113 247 26 12 135 69 49 100 236 65 116 27 157 52 139 209 185 148 143 31 62 246 56 210 52 1 51 239 185 130 26 67 0 0 167 136 232 83 165 199 245 27 84 24 115 73 152 117 145 174 21 93 166 169 80 15 62 250 36 160 128 97 190 31 222 182 26 196 35 25 224 111 248 2 1 86 84 191 180 156 7 105 169 40 200 204 127 133 85 65 150 14 214 224 43 202 18 15 60 244 136 35 142 49 159 32 162 47 15 242 124 131 94 154 95 6 112 255 160 20 128 46 118 134 142 40 22 19 165 154 75 117 245 131 186 127 253 214 254 113 124 251 7 63 14 61 138 159 28 52 241 7 45 1 194 227 139 112 238 203 153 37 180 49 230 95 169 136 35 115 168 90 172 171 226 74 106 214 228 35 218 167 1 226 236 51 139 174 249 84 27 45 219 245 255 215 23 0 58 61 126 30 207 60 127 0 51 121 142 44 75 97 152 247 2 244 236 229 208 54 151 131 1 0 224 172 167 199 159 0 248 163 215 74 244 48 131 144 208 219 34 94 55 85 186 74 26 19 213 238 49 27 176 241 200 27 85 87 174 3 136 100 223 120 225 50 130 190 84 203 132 62 126 83 247 243 27 3 34 69 226 209 188 141 121 109 194 115 98 106 6 76 132 83 227 227 56 127 113 2 199 78 158 114 40 225 134 145 165 201 159 18 209 31 211 101 156 62 153 224 242 62 254 216 111 159 0 240 95 0 172 93 172 200 47 69 0 88 20 101 255 193 140 218 252 19 237 3 160 27 99 67 209 59 132 58 254 86 247 231 93 7 236 66 190 155 7 193 131 122 36 18 51 99 40 203 206 18 209 159 16 209 159 255 34 38 143 94 110 6 8 143 47 249 13 0 110 4 240 110 207 12 243 22 190 247 172 142 174 30 67 106 254 153 155 161 122 94 44 92 155 235 130 223 108 232 173 16 53 30 7 232 251 68 120 246 114 122 22 203 137 1 226 199 179 126 123 109 182 192 47 232 230 209 98 141 147 62 17 164 229 224 29 45 7 6 88 13 96 27 128 161 197 26 212 218 37 254 23 237 69 92 126 9 16 34 205 109 40 142 130 112 225 95 170 4 184 30 192 221 0 54 3 176 126 91 208 221 239 235 126 45 79 27 64 187 73 31 217 0 68 68 134 153 13 19 157 32 162 71 136 232 233 127 9 54 192 219 1 220 238 207 91 0 56 143 122 84 158 206 17 171 144 176 82 92 90 212 117 217 50 17 19 179 16 192 9 179 144 233 227 5 248 18 47 54 196 164 36 125 188 0 102 195 50 135 23 192 134 89 216 24 38 82 89 132 23 64 253 126 151 247 2 200 123 1 124 236 228 169 149 134 205 61 198 240 251 13 243 131 0 61 250 207 209 11 24 2 240 89 0 43 60 225 103 34 131 79 23 35 114 41 234 56 142 167 136 139 186 89 129 68 117 79 0 133 137 28 98 161 96 176 122 204 14 245 157 99 76 16 184 9 35 226 59 115 137 8 70 8 202 12 75 226 92 68 75 14 141 28 10 107 44 152 13 74 219 140 3 240 2 137 54 186 98 24 0 176 123 100 11 176 13 116 203 222 27 232 244 248 121 122 230 249 3 102 38 207 239 72 18 115 179 97 254 2 64 231 255 185 196 1 174 1 112 31 128 54 128 9 191 154 117 142 24 206 108 175 251 169 90 234 18 181 218 149 13 36 85 31 47 12 141 164 234 171 122 162 215 1 237 91 253 56 18 241 240 30 4 135 44 161 76 16 17 199 33 18 102 19 187 136 18 51 65 132 136 152 213 175 220 5 255 142 240 216 176 118 12 239 189 253 109 116 248 232 241 206 190 23 15 165 105 154 252 142 97 254 42 64 135 174 244 72 224 78 0 247 18 112 73 129 50 18 247 75 99 137 47 182 103 126 145 217 192 185 211 192 244 154 140 255 185 30 187 183 109 193 182 77 87 23 15 60 244 72 94 90 123 111 98 204 215 1 28 185 82 115 1 59 21 184 151 137 166 64 212 241 162 223 70 91 247 235 126 159 149 209 255 114 158 239 21 11 252 188 177 17 83 191 125 227 243 89 0 86 1 75 64 65 68 221 251 148 11 60 223 92 251 86 159 165 73 82 220 123 247 109 157 149 35 35 83 165 181 247 170 234 206 65 166 211 7 197 0 195 170 122 103 194 60 201 68 109 17 201 187 110 88 144 6 229 44 155 116 17 63 190 81 50 207 119 230 251 188 177 169 104 191 125 251 17 185 4 32 170 218 143 144 11 57 223 92 251 118 127 150 223 249 182 183 180 65 152 180 34 247 120 27 234 202 81 1 10 220 73 204 214 48 23 157 162 144 89 116 227 235 137 193 232 60 199 235 255 153 168 67 106 88 224 121 156 250 167 158 147 6 35 180 234 11 168 87 210 108 250 159 22 104 247 196 239 241 93 183 222 82 126 247 199 143 90 38 250 85 102 254 251 65 168 130 65 48 192 22 168 174 109 165 73 187 40 237 224 154 4 208 63 55 223 157 13 92 232 247 52 106 246 236 57 214 28 53 0 234 16 94 7 82 39 176 98 100 8 111 216 189 195 30 124 249 232 202 148 104 11 17 29 95 246 12 160 170 183 176 225 25 67 84 182 69 52 2 183 161 222 224 72 99 1 205 182 143 206 231 37 136 8 177 49 218 119 31 151 43 240 45 171 85 199 154 250 147 82 115 1 35 140 58 232 38 40 57 1 34 96 50 90 225 7 84 46 168 80 252 254 60 18 107 161 94 2 1 192 27 118 239 176 135 143 30 131 168 222 76 170 199 151 154 201 150 148 1 20 104 1 72 91 73 210 41 173 216 69 88 200 243 122 7 221 233 224 190 119 120 206 101 47 130 8 108 49 248 140 110 226 185 202 172 165 225 81 235 54 71 68 143 255 199 239 15 226 177 123 219 86 61 244 242 177 22 51 175 37 96 124 249 74 0 213 93 68 212 73 13 231 147 121 17 252 125 158 133 224 220 245 188 223 123 221 12 82 125 238 87 35 163 23 113 84 160 202 32 18 136 176 24 35 28 27 189 218 160 190 155 43 233 97 133 21 202 174 165 204 49 139 135 185 97 85 21 34 98 215 132 10 137 136 207 68 36 190 45 176 155 9 164 143 177 221 239 183 246 251 189 141 187 186 107 235 38 187 255 165 87 196 168 110 6 209 248 114 86 1 235 82 99 58 10 148 86 171 149 42 11 88 245 50 199 123 245 27 34 194 190 227 40 96 82 82 215 74 245 95 12 68 23 138 116 184 64 37 110 15 115 182 130 8 33 148 175 147 196 96 13 62 194 40 126 133 251 255 2 242 204 225 136 95 255 159 195 94 152 239 183 206 41 5 179 44 179 195 67 153 150 86 214 45 181 75 152 44 161 248 135 2 43 178 196 116 224 70 244 45 249 163 234 207 11 196 110 18 221 45 45 21 152 154 64 174 42 57 210 229 174 59 220 17 49 88 112 90 193 219 123 166 245 82 162 159 216 215 89 212 0 60 124 109 140 250 189 148 143 13 107 215 200 241 147 103 90 75 237 184 39 75 40 254 51 0 5 51 151 82 49 64 3 37 96 62 3 112 86 147 129 162 216 190 97 134 33 14 84 21 102 47 154 227 149 94 19 189 158 76 28 22 166 115 5 5 0 179 49 98 152 217 227 3 104 132 15 64 4 21 230 168 39 60 18 52 158 208 213 82 100 102 154 7 31 160 159 136 239 103 244 54 238 131 63 133 18 17 134 91 67 70 85 75 5 70 0 76 47 71 21 96 160 200 9 148 39 166 50 200 100 142 128 83 172 15 251 221 32 175 159 73 140 49 21 192 162 71 8 97 113 195 105 88 173 21 235 81 186 16 139 125 183 49 161 26 240 171 80 97 37 35 12 226 52 73 100 104 104 72 178 86 198 17 66 136 122 132 16 242 8 33 18 33 132 136 138 178 170 58 157 15 168 97 118 48 178 134 53 250 157 179 217 50 210 199 158 153 213 22 112 104 230 206 89 49 68 58 60 60 100 21 138 165 238 178 89 74 6 80 0 37 17 44 17 212 24 118 8 89 115 235 183 57 117 62 51 75 154 166 104 181 178 110 140 32 89 187 110 12 155 55 109 150 24 35 168 130 146 139 141 60 17 168 137 116 182 195 238 149 44 75 241 233 223 254 93 172 24 25 145 249 48 130 62 113 223 135 241 201 143 124 8 165 205 197 217 7 110 186 47 249 217 2 247 124 252 55 177 98 100 4 73 146 136 199 8 146 8 35 72 2 70 208 103 62 249 81 124 244 67 31 152 211 22 112 12 22 225 34 67 197 90 96 100 168 69 170 40 177 196 189 118 75 108 4 170 5 195 66 73 19 38 148 30 61 173 11 45 70 251 248 199 61 171 134 153 37 203 50 158 158 158 193 95 254 183 191 10 40 97 98 76 194 171 86 173 66 94 88 28 58 124 4 47 236 223 47 187 182 239 224 223 249 236 103 52 77 18 178 214 138 168 176 215 213 222 122 87 245 56 123 110 48 39 128 36 77 177 98 197 10 140 142 142 194 36 70 251 160 132 145 85 213 172 221 161 161 86 166 76 209 8 28 56 10 135 113 215 43 71 70 248 170 171 174 66 150 166 238 247 177 47 250 80 135 52 105 197 162 211 238 96 104 168 213 55 38 160 170 228 195 204 172 21 19 8 171 146 170 42 12 43 121 216 58 94 206 12 160 0 10 82 42 153 72 1 135 117 107 101 193 64 145 18 25 123 146 184 85 41 255 233 63 255 25 136 8 195 195 195 97 14 175 91 133 0 178 212 160 101 83 28 59 126 66 254 226 47 255 18 255 238 223 252 46 12 51 84 252 42 242 171 145 34 47 129 252 251 134 24 73 154 34 73 12 210 52 237 129 136 3 185 58 129 162 40 170 33 84 241 96 9 34 174 42 128 210 52 149 44 75 145 38 73 141 14 230 7 88 1 64 42 6 214 74 3 222 167 198 33 140 32 112 16 164 62 65 213 123 22 225 188 238 226 138 101 29 9 84 192 18 251 242 46 2 82 195 176 98 251 133 101 187 35 97 13 253 199 204 200 178 76 254 234 175 254 154 65 36 89 150 113 24 194 140 8 172 129 52 1 25 145 225 225 33 62 119 238 188 124 245 235 223 226 251 63 254 17 72 167 227 192 34 235 72 79 80 3 2 102 38 134 28 57 122 148 171 38 15 118 32 142 222 114 23 16 49 17 121 12 33 213 171 215 175 11 56 64 228 209 191 5 80 118 163 209 192 1 134 14 161 73 196 19 95 1 49 68 108 29 136 44 252 88 9 86 248 209 181 1 84 79 197 25 41 10 1 136 85 27 120 200 78 50 136 190 30 212 189 203 39 1 64 100 73 73 125 250 135 210 196 232 34 224 98 37 12 139 58 125 250 52 94 126 229 21 89 177 98 133 211 173 17 241 235 21 6 15 8 69 162 45 224 137 167 159 148 123 239 121 31 134 135 135 97 75 11 69 195 159 15 128 139 194 204 24 63 119 65 140 49 174 60 76 169 1 47 87 249 247 190 40 112 237 218 53 245 116 48 4 128 113 55 30 253 220 133 9 169 6 62 71 43 63 192 212 171 11 20 129 32 184 122 253 122 0 16 107 181 154 83 224 152 128 34 140 98 15 47 29 13 161 12 76 64 3 152 27 181 244 70 32 216 122 67 90 160 202 41 51 74 146 74 31 207 226 5 132 247 213 51 0 61 247 252 11 72 211 84 61 180 122 24 159 77 68 16 242 24 46 245 32 5 210 132 156 40 255 249 190 103 233 157 111 187 85 153 136 84 85 148 136 189 4 114 55 145 89 12 17 31 61 113 2 73 98 148 17 48 121 225 180 182 207 93 56 168 32 82 85 96 221 154 181 40 28 2 105 136 108 41 59 117 64 167 207 158 85 54 198 141 252 115 196 87 79 252 48 192 80 136 148 161 208 13 107 215 1 112 243 134 186 93 61 255 60 182 9 212 49 157 146 178 134 247 146 229 207 0 4 9 166 18 51 139 2 200 18 67 157 162 212 70 228 174 169 247 27 156 205 204 116 248 240 225 64 252 222 149 239 37 69 13 167 238 188 192 132 19 156 56 121 202 65 186 169 31 247 234 35 120 65 199 186 227 39 114 224 224 65 36 236 39 139 248 233 78 49 230 79 248 190 85 165 53 99 99 58 57 61 217 128 192 19 191 223 153 51 227 110 6 48 49 212 135 13 2 238 32 224 225 134 196 21 42 150 182 172 134 104 116 123 115 177 216 143 255 123 151 3 214 51 197 114 102 0 2 96 1 21 34 103 85 171 146 239 167 99 72 98 22 140 28 238 181 188 39 62 123 44 223 166 145 22 136 31 226 61 4 55 220 113 252 220 57 223 53 76 205 113 110 81 195 103 158 231 56 116 240 37 140 142 174 12 211 34 155 128 79 190 62 80 20 120 227 245 215 58 48 72 235 244 54 71 4 83 34 156 57 55 14 195 198 141 7 11 176 56 93 140 228 144 195 129 221 59 182 161 40 202 32 1 250 166 169 171 99 251 168 38 212 25 172 170 61 37 9 203 82 2 88 38 182 213 184 133 8 82 53 77 156 37 188 144 177 49 162 138 177 177 171 112 242 244 41 15 252 232 225 220 98 212 174 104 186 56 41 59 220 127 21 92 119 221 181 62 136 34 21 148 160 85 69 18 6 65 49 227 233 125 251 144 101 89 197 96 212 37 97 200 163 143 90 107 177 109 203 102 148 54 192 213 3 22 10 227 169 192 196 120 238 133 253 48 73 82 29 187 159 157 34 0 70 134 134 106 235 95 155 29 4 53 0 166 75 84 43 168 158 132 162 10 17 27 194 205 166 154 132 177 124 109 0 170 197 179 143 145 7 172 251 44 77 48 147 23 152 43 77 172 170 16 107 113 205 174 93 216 247 236 115 64 150 2 154 84 109 218 61 196 15 49 120 81 168 21 108 220 176 1 165 117 147 64 56 26 30 233 196 49 35 205 82 252 240 71 63 113 99 96 162 240 109 69 124 239 239 171 181 176 34 184 254 154 221 110 44 189 132 25 4 4 33 239 74 26 198 209 227 175 250 238 98 238 185 46 103 124 186 228 226 206 237 91 0 0 133 63 110 96 129 56 181 29 19 61 220 139 174 217 75 75 174 2 120 73 25 64 97 65 176 76 36 80 88 34 178 161 136 146 8 54 97 182 173 52 177 170 106 117 150 130 80 85 181 86 172 189 225 141 55 216 36 49 34 86 92 65 166 170 59 22 145 37 242 5 157 32 171 14 133 196 138 181 118 229 232 168 221 115 195 245 182 244 223 81 85 11 133 37 192 138 43 184 180 47 29 121 197 158 58 125 218 38 105 34 204 92 93 27 129 170 227 195 95 159 45 75 123 211 155 246 74 94 148 86 85 173 168 88 17 177 164 110 223 35 71 143 217 118 167 35 169 49 22 196 141 235 34 34 171 225 88 42 118 219 214 173 182 40 197 250 200 181 133 146 133 146 21 209 106 83 85 43 34 213 127 81 181 165 255 47 170 22 4 11 90 190 12 64 46 14 79 66 46 30 16 98 252 66 68 165 11 195 66 50 99 36 77 88 224 156 95 137 114 1 85 209 167 181 34 198 152 242 131 247 126 160 104 231 185 88 107 29 65 1 33 82 171 80 75 234 42 117 33 34 106 173 116 242 92 62 112 207 251 165 211 201 75 177 86 84 196 90 85 235 210 63 90 50 145 152 52 41 191 243 192 247 36 109 101 98 140 177 32 18 162 74 106 9 220 53 150 0 68 74 43 55 189 105 143 228 101 94 88 107 173 181 34 34 106 21 42 170 90 50 72 94 60 112 72 90 105 90 18 179 101 110 18 223 185 195 42 68 106 173 85 187 109 243 70 177 214 138 170 74 244 112 139 193 185 121 238 157 174 255 170 42 98 221 127 196 67 4 150 171 10 240 56 171 206 161 35 18 34 231 49 5 203 93 85 209 74 51 21 219 233 55 62 150 188 139 45 69 81 240 155 246 238 197 197 243 23 237 131 15 61 12 29 26 66 154 154 106 114 168 245 178 209 150 37 218 121 142 223 248 245 15 210 181 215 236 214 142 155 70 110 125 173 24 132 8 9 12 25 99 228 200 203 175 224 229 163 71 203 21 43 70 152 136 148 107 177 47 193 154 36 39 254 165 40 11 236 189 113 15 138 188 84 81 139 128 222 46 2 36 9 200 24 99 15 30 58 12 147 38 33 248 67 225 251 168 199 211 144 27 114 34 184 246 154 221 232 20 5 74 55 177 180 81 6 38 245 93 208 72 252 87 174 32 49 67 213 246 109 53 91 86 12 160 80 33 34 117 211 174 125 222 30 100 131 165 94 77 222 0 48 156 181 48 213 110 207 138 178 105 173 181 157 78 7 183 223 113 27 54 110 222 56 231 244 240 143 251 233 225 157 118 222 152 30 94 161 135 48 163 213 202 240 245 111 125 7 173 161 22 152 217 82 60 16 58 6 126 84 69 33 130 44 75 241 246 91 110 198 228 244 52 74 241 165 68 26 246 33 116 138 14 158 218 247 60 70 71 87 52 129 34 43 67 21 213 188 195 177 213 171 177 122 213 40 38 167 166 123 230 41 199 134 239 108 222 0 73 248 14 201 50 79 6 65 200 169 1 183 152 153 148 42 11 151 224 16 91 20 170 206 101 94 49 52 68 211 121 91 93 174 134 26 137 33 63 60 74 218 237 54 237 218 177 3 127 248 251 159 163 83 103 206 224 229 151 95 65 187 221 150 213 99 99 188 113 195 6 93 191 110 45 149 182 212 118 222 134 90 133 139 232 82 136 41 131 136 52 77 18 253 254 247 127 132 241 115 231 48 52 52 196 204 164 28 118 108 32 129 3 86 68 196 90 190 251 142 59 100 166 221 70 89 20 172 78 124 129 169 98 2 125 234 231 207 34 203 18 74 216 132 180 117 32 190 207 25 57 80 91 107 45 93 119 237 46 41 203 146 69 4 214 74 156 12 235 73 131 215 61 143 2 5 9 20 172 76 80 81 165 26 174 120 25 171 0 63 107 141 72 125 77 128 159 212 225 213 128 103 4 87 109 99 8 195 173 22 166 219 157 110 7 183 10 135 186 25 64 130 162 44 177 122 213 42 140 221 244 230 80 12 36 34 130 153 118 187 10 209 26 10 1 32 129 146 1 123 241 249 220 254 253 248 222 143 30 194 202 145 97 24 67 194 196 61 43 63 46 29 179 162 114 231 109 239 240 147 193 163 156 54 51 200 56 88 185 71 126 246 4 82 147 6 168 23 137 87 126 229 249 120 11 254 205 55 238 65 39 47 196 150 165 27 40 213 156 103 80 77 158 174 70 205 248 40 147 75 17 64 108 24 108 73 88 114 9 240 255 7 0 136 233 126 155 7 130 14 221 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!CSSDockFileLibrary methodsFor: 'images'!rssPng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 128 0 0 0 128 8 6 0 0 0 195 62 97 203 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 10 79 105 67 67 80 80 104 111 116 111 115 104 111 112 32 73 67 67 32 112 114 111 102 105 108 101 0 0 120 218 157 83 103 84 83 233 22 61 247 222 244 66 75 136 128 148 75 111 82 21 8 32 82 66 139 128 20 145 38 42 33 9 16 74 136 33 161 217 21 81 193 17 69 69 4 27 200 160 136 3 142 142 128 140 21 81 44 12 138 10 216 7 228 33 162 142 131 163 136 138 202 251 225 123 163 107 214 188 247 230 205 254 181 215 62 231 172 243 157 179 207 7 192 8 12 150 72 51 81 53 128 12 169 66 30 17 224 131 199 196 198 225 228 46 64 129 10 36 112 0 16 8 179 100 33 115 253 35 1 0 248 126 60 60 43 34 192 7 190 0 1 120 211 11 8 0 192 77 155 192 48 28 135 255 15 234 66 153 92 1 128 132 1 192 116 145 56 75 8 128 20 0 64 122 142 66 166 0 64 70 1 128 157 152 38 83 0 160 4 0 96 203 99 98 227 0 80 45 0 96 39 127 230 211 0 128 157 248 153 123 1 0 91 148 33 21 1 160 145 0 32 19 101 136 68 0 104 59 0 172 207 86 138 69 0 88 48 0 20 102 75 196 57 0 216 45 0 48 73 87 102 72 0 176 183 0 192 206 16 11 178 0 8 12 0 48 81 136 133 41 0 4 123 0 96 200 35 35 120 0 132 153 0 20 70 242 87 60 241 43 174 16 231 42 0 0 120 153 178 60 185 36 57 69 129 91 8 45 113 7 87 87 46 30 40 206 73 23 43 20 54 97 2 97 154 64 46 194 121 153 25 50 129 52 15 224 243 204 0 0 160 145 21 17 224 131 243 253 120 206 14 174 206 206 54 142 182 14 95 45 234 191 6 255 34 98 98 227 254 229 207 171 112 64 0 0 225 116 126 209 254 44 47 179 26 128 59 6 128 109 254 162 37 238 4 104 94 11 160 117 247 139 102 178 15 64 181 0 160 233 218 87 243 112 248 126 60 60 69 161 144 185 217 217 229 228 228 216 74 196 66 91 97 202 87 125 254 103 194 95 192 87 253 108 249 126 60 252 247 245 224 190 226 36 129 50 93 129 71 4 248 224 194 204 244 76 165 28 207 146 9 132 98 220 230 143 71 252 183 11 255 252 29 211 34 196 73 98 185 88 42 20 227 81 18 113 142 68 154 140 243 50 165 34 137 66 146 41 197 37 210 255 100 226 223 44 251 3 62 223 53 0 176 106 62 1 123 145 45 168 93 99 3 246 75 39 16 88 116 192 226 247 0 0 242 187 111 193 212 40 8 3 128 104 131 225 207 119 255 239 63 253 71 160 37 0 128 102 73 146 113 0 0 94 68 36 46 84 202 179 63 199 8 0 0 68 160 129 42 176 65 27 244 193 24 44 192 6 28 193 5 220 193 11 252 96 54 132 66 36 196 194 66 16 66 10 100 128 28 114 96 41 172 130 66 40 134 205 176 29 42 96 47 212 64 29 52 192 81 104 134 147 112 14 46 194 85 184 14 61 112 15 250 97 8 158 193 40 188 129 9 4 65 200 8 19 97 33 218 136 1 98 138 88 35 142 8 23 153 133 248 33 193 72 4 18 139 36 32 201 136 20 81 34 75 145 53 72 49 82 138 84 32 85 72 29 242 61 114 2 57 135 92 70 186 145 59 200 0 50 130 252 134 188 71 49 148 129 178 81 61 212 12 181 67 185 168 55 26 132 70 162 11 208 100 116 49 154 143 22 160 155 208 114 180 26 61 140 54 161 231 208 171 104 15 218 143 62 67 199 48 192 232 24 7 51 196 108 48 46 198 195 66 177 56 44 9 147 99 203 177 34 172 12 171 198 26 176 86 172 3 187 137 245 99 207 177 119 4 18 129 69 192 9 54 4 119 66 32 97 30 65 72 88 76 88 78 216 72 168 32 28 36 52 17 218 9 55 9 3 132 81 194 39 34 147 168 75 180 38 186 17 249 196 24 98 50 49 135 88 72 44 35 214 18 143 19 47 16 123 136 67 196 55 36 18 137 67 50 39 185 144 2 73 177 164 84 210 18 210 70 210 110 82 35 233 44 169 155 52 72 26 35 147 201 218 100 107 178 7 57 148 44 32 43 200 133 228 157 228 195 228 51 228 27 228 33 242 91 10 157 98 64 113 164 248 83 226 40 82 202 106 74 25 229 16 229 52 229 6 101 152 50 65 85 163 154 82 221 168 161 84 17 53 143 90 66 173 161 182 82 175 81 135 168 19 52 117 154 57 205 131 22 73 75 165 173 162 149 211 26 104 23 104 247 105 175 232 116 186 17 221 149 30 78 151 208 87 210 203 233 71 232 151 232 3 244 119 12 13 134 21 131 199 136 103 40 25 155 24 7 24 103 25 119 24 175 152 76 166 25 211 139 25 199 84 48 55 49 235 152 231 153 15 153 111 85 88 42 182 42 124 21 145 202 10 149 74 149 38 149 27 42 47 84 169 170 166 170 222 170 11 85 243 85 203 84 143 169 94 83 125 174 70 85 51 83 227 169 9 212 150 171 85 170 157 80 235 83 27 83 103 169 59 168 135 170 103 168 111 84 63 164 126 89 253 137 6 89 195 76 195 79 67 164 81 160 177 95 227 188 198 32 11 99 25 179 120 44 33 107 13 171 134 117 129 53 196 38 177 205 217 124 118 42 187 152 253 29 187 139 61 170 169 161 57 67 51 74 51 87 179 82 243 148 102 63 7 227 152 113 248 156 116 78 9 231 40 167 151 243 126 138 222 20 239 41 226 41 27 166 52 76 185 49 101 92 107 170 150 151 150 88 171 72 171 81 171 71 235 189 54 174 237 167 157 166 189 69 187 89 251 129 14 65 199 74 39 92 39 71 103 143 206 5 157 231 83 217 83 221 167 10 167 22 77 61 58 245 174 46 170 107 165 27 161 187 68 119 191 110 167 238 152 158 190 94 128 158 76 111 167 222 121 189 231 250 28 125 47 253 84 253 109 250 167 245 71 12 88 6 179 12 36 6 219 12 206 24 60 197 53 113 111 60 29 47 199 219 241 81 67 93 195 64 67 165 97 149 97 151 225 132 145 185 209 60 163 213 70 141 70 15 140 105 198 92 227 36 227 109 198 109 198 163 38 6 38 33 38 75 77 234 77 238 154 82 77 185 166 41 166 59 76 59 76 199 205 204 205 162 205 214 153 53 155 61 49 215 50 231 155 231 155 215 155 223 183 96 90 120 90 44 182 168 182 184 101 73 178 228 90 166 89 238 182 188 110 133 90 57 89 165 88 85 90 93 179 70 173 157 173 37 214 187 173 187 167 17 167 185 78 147 78 171 158 214 103 195 176 241 182 201 182 169 183 25 176 229 216 6 219 174 182 109 182 125 97 103 98 23 103 183 197 174 195 238 147 189 147 125 186 125 141 253 61 7 13 135 217 14 171 29 90 29 126 115 180 114 20 58 86 58 222 154 206 156 238 63 125 197 244 150 233 47 103 88 207 16 207 216 51 227 182 19 203 41 196 105 157 83 155 211 71 103 23 103 185 115 131 243 136 139 137 75 130 203 46 151 62 46 155 27 198 221 200 189 228 74 116 245 113 93 225 122 210 245 157 155 179 155 194 237 168 219 175 238 54 238 105 238 135 220 159 204 52 159 41 158 89 51 115 208 195 200 67 224 81 229 209 63 11 159 149 48 107 223 172 126 79 67 79 129 103 181 231 35 47 99 47 145 87 173 215 176 183 165 119 170 247 97 239 23 62 246 62 114 159 227 62 227 60 55 222 50 222 89 95 204 55 192 183 200 183 203 79 195 111 158 95 133 223 67 127 35 255 100 255 122 255 209 0 167 128 37 1 103 3 137 129 65 129 91 2 251 248 122 124 33 191 142 63 58 219 101 246 178 217 237 65 140 160 185 65 21 65 143 130 173 130 229 193 173 33 104 200 236 144 173 33 247 231 152 206 145 206 105 14 133 80 126 232 214 208 7 97 230 97 139 195 126 12 39 133 135 133 87 134 63 142 112 136 88 26 209 49 151 53 119 209 220 67 115 223 68 250 68 150 68 222 155 103 49 79 57 175 45 74 53 42 62 170 46 106 60 218 55 186 52 186 63 198 46 102 89 204 213 88 157 88 73 108 75 28 57 46 42 174 54 110 108 190 223 252 237 243 135 226 157 226 11 227 123 23 152 47 200 93 112 121 161 206 194 244 133 167 22 169 46 18 44 58 150 64 76 136 78 56 148 240 65 16 42 168 22 140 37 242 19 119 37 142 10 121 194 29 194 103 34 47 209 54 209 136 216 67 92 42 30 78 242 72 42 77 122 146 236 145 188 53 121 36 197 51 165 44 229 185 132 39 169 144 188 76 13 76 221 155 58 158 22 154 118 32 109 50 61 58 189 49 131 146 145 144 113 66 170 33 77 147 182 103 234 103 230 102 118 203 172 101 133 178 254 197 110 139 183 47 30 149 7 201 107 179 144 172 5 89 45 10 182 66 166 232 84 90 40 215 42 7 178 103 101 87 102 191 205 137 202 57 150 171 158 43 205 237 204 179 202 219 144 55 156 239 159 255 237 18 194 18 225 146 182 165 134 75 87 45 29 88 230 189 172 106 57 178 60 113 121 219 10 227 21 5 43 134 86 6 172 60 184 138 182 42 109 213 79 171 237 87 151 174 126 189 38 122 77 107 129 94 193 202 130 193 181 1 107 235 11 85 10 229 133 125 235 220 215 237 93 79 88 47 89 223 181 97 250 134 157 27 62 21 137 138 174 20 219 23 151 21 127 216 40 220 120 229 27 135 111 202 191 153 220 148 180 169 171 196 185 100 207 102 210 102 233 230 222 45 158 91 14 150 170 151 230 151 14 110 13 217 218 180 13 223 86 180 237 245 246 69 219 47 151 205 40 219 187 131 182 67 185 163 191 60 184 188 101 167 201 206 205 59 63 84 164 84 244 84 250 84 54 238 210 221 181 97 215 248 110 209 238 27 123 188 246 52 236 213 219 91 188 247 253 62 201 190 219 85 1 85 77 213 102 213 101 251 73 251 179 247 63 174 137 170 233 248 150 251 109 93 173 78 109 113 237 199 3 210 3 253 7 35 14 182 215 185 212 213 29 210 61 84 82 143 214 43 235 71 14 199 31 190 254 157 239 119 45 13 54 13 85 141 156 198 226 35 112 68 121 228 233 247 9 223 247 30 13 58 218 118 140 123 172 225 7 211 31 118 29 103 29 47 106 66 154 242 154 70 155 83 154 251 91 98 91 186 79 204 62 209 214 234 222 122 252 71 219 31 15 156 52 60 89 121 74 243 84 201 105 218 233 130 211 147 103 242 207 140 157 149 157 125 126 46 249 220 96 219 162 182 123 231 99 206 223 106 15 111 239 186 16 116 225 210 69 255 139 231 59 188 59 206 92 242 184 116 242 178 219 229 19 87 184 87 154 175 58 95 109 234 116 234 60 254 147 211 79 199 187 156 187 154 174 185 92 107 185 238 122 189 181 123 102 247 233 27 158 55 206 221 244 189 121 241 22 255 214 213 158 57 61 221 189 243 122 111 247 197 247 245 223 22 221 126 114 39 253 206 203 187 217 119 39 238 173 188 79 188 95 244 64 237 65 217 67 221 135 213 63 91 254 220 216 239 220 127 106 192 119 160 243 209 220 71 247 6 133 131 207 254 145 245 143 15 67 5 143 153 143 203 134 13 134 235 158 56 62 57 57 226 63 114 253 233 252 167 67 207 100 207 38 158 23 254 162 254 203 174 23 22 47 126 248 213 235 215 206 209 152 209 161 151 242 151 147 191 109 124 165 253 234 192 235 25 175 219 198 194 198 30 190 201 120 51 49 94 244 86 251 237 193 119 220 119 29 239 163 223 15 79 228 124 32 127 40 255 104 249 177 245 83 208 167 251 147 25 147 147 255 4 3 152 243 252 99 51 45 219 0 0 0 4 103 65 77 65 0 0 177 142 124 251 81 147 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 233 0 0 117 48 0 0 234 96 0 0 58 152 0 0 23 111 146 95 197 70 0 0 45 126 73 68 65 84 120 218 236 157 121 148 109 87 93 231 63 191 189 207 189 183 170 222 60 36 132 64 2 100 122 33 76 1 133 32 131 76 130 96 152 100 74 208 110 64 165 133 214 198 110 187 85 90 93 11 23 216 237 162 149 182 151 160 45 34 163 11 109 146 128 32 196 128 10 33 12 26 12 13 52 121 153 67 224 37 33 195 123 121 83 189 122 85 117 135 179 247 175 255 216 251 156 179 207 185 247 86 221 122 169 122 84 41 119 173 179 238 188 239 185 231 247 219 191 223 247 55 139 170 242 195 219 191 222 155 249 225 37 248 33 3 252 240 246 67 6 248 225 237 95 235 45 91 173 133 186 127 114 230 210 31 80 5 60 120 143 250 193 91 112 253 55 227 250 23 224 251 224 39 196 33 50 233 217 200 136 207 203 4 159 147 229 127 84 30 204 231 138 223 19 16 11 198 130 100 215 96 236 123 69 236 101 136 89 98 253 234 54 245 203 119 173 63 6 88 130 242 160 138 122 7 174 247 118 242 197 183 105 191 75 246 152 87 97 31 125 41 246 180 31 129 109 143 92 147 223 4 23 239 21 188 162 18 238 81 151 124 198 39 247 190 250 188 42 120 31 31 23 159 247 141 239 196 215 80 240 241 183 84 209 244 117 117 225 177 87 144 248 57 4 127 255 55 208 163 223 69 31 184 225 217 238 158 235 158 173 182 253 49 177 173 119 96 236 239 128 9 76 114 18 110 178 90 86 192 72 9 160 225 66 168 239 95 192 96 225 70 145 140 236 25 191 77 118 209 111 12 127 180 123 8 220 0 250 115 225 194 139 162 90 92 72 95 174 85 94 116 31 239 139 139 170 128 184 198 235 241 247 107 196 211 100 173 230 186 75 16 187 252 12 13 166 41 190 35 201 249 22 175 21 231 89 16 63 126 94 60 178 233 52 176 29 100 122 55 126 225 32 254 246 79 227 190 115 85 120 205 182 78 65 236 193 113 76 176 49 36 64 188 48 154 247 222 78 127 246 109 246 188 151 211 190 248 67 208 222 18 222 119 61 116 225 0 58 119 15 186 120 8 33 50 162 186 184 97 61 82 236 158 146 88 190 78 124 245 32 30 156 143 187 189 250 62 234 240 113 61 73 137 87 172 89 18 175 177 251 83 38 75 158 251 148 121 70 49 14 138 12 49 128 140 145 26 138 250 235 195 185 219 22 108 122 8 246 204 103 99 207 185 152 252 27 127 130 63 116 251 3 146 181 47 1 123 57 178 182 48 45 91 59 177 239 209 188 251 9 186 71 94 209 126 209 159 99 47 124 99 120 203 59 244 232 119 240 199 238 138 4 6 17 83 18 52 92 163 226 98 74 212 135 18 30 23 135 196 139 140 148 119 225 245 240 68 227 139 162 62 138 82 27 24 4 159 172 87 232 91 87 253 142 68 92 172 158 112 225 195 189 170 70 6 245 9 118 246 241 62 81 5 66 248 158 106 92 199 85 235 20 159 45 164 129 141 231 234 7 48 123 55 110 246 78 104 109 198 60 225 245 200 29 127 143 187 235 203 151 137 237 120 144 143 175 165 58 48 107 70 124 215 125 59 221 35 175 104 191 242 19 129 248 170 104 247 8 238 222 127 66 103 191 23 137 159 138 115 69 125 188 152 196 29 138 139 59 54 175 118 109 186 115 53 175 8 0 168 106 241 40 18 175 56 167 100 23 150 128 51 253 126 36 108 250 27 248 176 178 79 214 40 215 106 2 181 228 183 148 136 29 138 215 124 253 235 82 241 109 248 191 18 153 84 160 119 28 253 238 231 145 237 143 194 62 230 82 212 13 174 64 253 107 138 255 183 49 36 128 42 184 193 5 244 230 222 214 122 206 59 177 231 189 2 85 7 199 190 143 30 190 53 16 30 169 196 33 30 37 17 243 62 130 55 239 27 226 184 41 166 211 231 90 173 161 174 134 63 134 68 188 104 80 25 210 4 125 190 4 142 170 82 129 54 73 222 243 26 165 205 8 16 153 174 35 5 248 211 234 92 36 188 175 229 58 197 218 90 49 177 9 120 70 103 247 193 212 46 204 182 135 163 115 247 93 134 202 23 17 30 88 129 25 244 3 98 0 141 127 96 176 112 163 57 227 233 100 79 125 43 138 131 99 119 163 7 111 172 4 142 184 248 113 87 39 108 65 168 26 129 154 68 47 116 188 79 8 239 234 224 108 212 231 75 34 71 6 241 13 93 95 16 167 192 33 50 2 56 202 40 112 56 10 27 36 250 63 112 12 154 226 5 105 126 47 101 4 9 255 127 241 32 178 253 28 252 226 44 226 186 7 192 202 26 208 127 181 85 128 130 239 191 29 211 162 253 138 191 14 215 125 241 8 122 232 230 72 248 40 90 189 71 125 30 208 187 79 196 188 143 7 174 122 207 23 42 96 16 159 71 38 83 31 24 168 252 126 240 49 132 231 131 240 90 105 154 57 240 131 250 115 245 224 92 196 29 225 40 25 68 139 117 82 38 116 201 107 249 240 123 53 102 174 116 135 170 171 51 122 10 102 199 29 82 252 126 31 187 235 220 240 125 244 63 172 115 12 80 236 254 197 183 181 126 236 173 200 212 14 200 123 232 129 235 3 81 85 19 194 199 163 184 112 5 113 106 4 119 201 251 21 225 202 11 234 6 201 69 87 112 233 122 137 218 240 77 70 112 21 209 164 73 120 87 103 130 226 112 77 102 32 236 210 230 103 157 175 225 8 77 25 165 244 45 36 18 170 41 225 134 24 46 7 219 193 204 156 2 234 223 195 26 4 238 178 213 21 255 249 91 24 44 98 47 124 99 32 210 145 91 161 55 11 98 131 120 149 60 128 113 25 193 245 140 184 16 137 136 46 69 104 161 30 164 113 33 75 252 160 35 191 95 123 94 136 251 166 51 71 11 139 192 143 208 233 137 115 104 36 54 24 165 231 169 19 94 18 63 67 129 131 74 135 149 12 153 138 165 121 185 249 116 252 194 65 68 204 165 32 31 91 183 12 160 190 255 102 115 254 43 145 233 221 232 96 14 61 250 189 136 95 93 233 141 171 1 188 26 64 243 163 65 91 19 224 9 13 194 55 136 60 210 171 215 4 120 145 136 169 30 31 2 120 126 136 16 21 51 140 192 6 75 1 60 77 137 47 137 138 208 4 40 186 198 243 248 190 248 224 50 206 166 193 247 223 12 186 94 25 192 131 235 95 96 31 249 220 32 254 230 238 67 93 47 218 197 2 228 149 232 148 229 136 190 20 192 91 138 200 99 156 57 75 1 188 81 104 127 89 128 71 69 40 124 92 123 2 128 87 152 136 181 207 52 36 66 211 137 20 207 207 76 109 67 231 15 60 107 29 91 1 250 120 252 0 251 136 103 163 110 0 179 251 74 183 231 208 142 245 77 209 95 32 251 166 235 214 87 226 113 148 170 72 145 125 13 233 107 221 157 60 180 163 253 24 100 223 32 240 72 102 160 52 219 180 225 9 28 150 24 35 238 135 136 47 13 247 114 193 40 174 148 44 40 144 205 20 23 250 116 224 222 117 199 0 170 250 104 188 67 118 93 128 246 231 241 11 7 16 99 2 30 42 205 182 37 116 189 243 33 88 51 100 203 143 242 207 143 199 10 169 168 86 93 218 117 203 72 215 45 67 120 161 70 212 146 248 9 211 149 46 108 25 254 30 203 72 132 166 222 47 206 69 164 30 88 178 89 100 32 118 174 75 6 0 125 76 249 112 225 64 68 177 13 79 220 146 0 207 131 75 36 198 208 119 214 8 224 149 4 78 118 93 19 181 75 131 240 94 70 0 60 42 207 162 54 66 224 203 50 66 67 34 64 180 78 226 235 245 16 241 174 245 234 8 42 201 173 174 139 120 95 25 153 99 116 189 54 61 125 41 178 79 137 81 4 113 188 38 248 129 134 62 118 113 121 29 67 196 21 2 188 165 144 189 248 101 0 94 147 176 126 52 192 27 146 46 145 240 41 211 21 234 204 100 5 15 252 4 240 165 245 29 12 234 30 137 142 29 19 57 119 28 192 27 227 186 45 28 67 206 143 0 120 137 30 141 34 88 73 46 236 138 1 94 51 20 92 184 110 79 30 192 171 34 132 13 11 162 124 159 196 171 136 91 167 18 160 136 220 21 206 24 31 124 219 101 24 214 215 117 90 51 36 91 218 242 193 67 168 174 7 174 31 156 68 197 251 34 165 120 21 17 124 76 156 144 66 76 106 226 119 87 70 19 190 182 235 86 9 224 141 52 253 38 0 120 241 60 181 201 168 67 12 71 197 8 235 63 24 20 93 178 68 93 25 185 93 209 49 59 190 145 228 129 67 243 69 236 5 255 22 217 124 90 212 171 241 54 191 31 93 216 15 253 5 220 209 239 192 225 239 64 62 143 138 13 191 99 12 34 54 154 158 9 64 43 194 192 58 78 255 47 5 240 82 105 227 39 64 246 75 0 188 146 240 41 192 27 65 248 33 198 3 156 108 0 6 144 194 69 26 165 0 182 18 245 126 2 128 135 11 46 221 188 139 108 121 104 112 39 167 183 153 83 17 30 87 243 97 43 30 61 114 7 28 185 3 183 255 91 232 254 111 130 100 1 53 27 139 96 147 92 60 173 226 187 43 2 120 163 244 248 9 0 188 40 193 52 253 94 9 80 25 146 66 53 128 139 97 253 71 3 145 210 143 239 157 139 201 44 58 12 240 70 122 240 92 117 49 124 30 68 255 68 191 104 144 29 231 194 142 115 49 103 189 48 236 247 195 183 161 119 95 131 187 235 26 52 239 5 0 101 51 164 184 136 69 18 201 82 0 175 38 150 221 24 215 237 10 76 190 38 178 175 225 14 25 241 122 99 93 145 141 163 2 180 72 231 242 190 20 119 19 121 240 210 104 155 63 113 157 103 118 158 7 59 207 195 62 225 23 241 135 110 65 111 255 27 220 157 87 163 217 20 152 22 98 51 192 36 17 216 9 92 183 53 128 55 194 228 91 74 173 164 0 175 166 14 18 140 208 148 22 53 31 131 174 54 246 91 125 6 8 255 69 66 4 204 187 232 250 181 149 23 111 92 108 94 27 102 145 207 43 137 177 26 225 206 93 231 195 174 243 49 79 125 43 122 219 167 200 111 248 48 190 59 15 89 7 145 12 10 103 149 176 52 178 31 11 240 116 56 147 56 241 224 105 65 232 33 128 199 18 142 41 70 224 9 221 8 42 32 177 249 157 134 196 143 2 145 55 3 51 77 53 224 125 153 235 167 222 175 250 159 21 64 206 123 57 237 243 94 142 187 245 19 228 123 63 136 250 121 48 29 196 180 235 63 183 170 0 175 25 232 209 186 131 39 13 15 11 149 196 76 207 92 124 204 121 220 8 32 48 141 173 23 201 156 35 93 183 13 38 144 104 122 249 4 15 172 209 205 238 121 37 118 207 43 113 183 92 65 126 253 251 209 193 66 37 17 196 86 62 173 7 13 240 168 164 156 36 59 184 32 178 247 144 247 194 123 131 112 175 206 85 150 18 49 207 161 212 255 178 234 88 96 245 65 160 203 171 236 30 147 85 162 31 38 112 221 166 217 54 107 95 181 108 207 127 53 246 252 87 51 248 231 63 192 223 250 113 52 219 132 100 237 96 69 136 142 22 241 75 2 188 248 249 52 127 128 152 125 156 207 67 222 71 93 14 190 15 174 23 223 79 152 98 104 55 65 153 22 62 65 197 208 58 241 4 186 164 16 194 213 209 255 146 177 121 173 167 118 157 164 202 24 128 214 69 191 142 62 250 82 6 95 250 205 96 82 102 83 136 109 81 85 232 140 7 120 105 42 95 200 252 22 200 187 129 216 131 64 116 124 175 114 148 213 118 179 25 73 243 53 145 245 39 207 12 244 193 132 115 131 32 78 83 255 247 178 201 151 241 222 16 165 199 201 187 201 214 51 104 191 228 163 184 155 254 146 252 107 191 143 182 183 32 89 39 234 94 83 7 104 133 7 79 35 65 117 0 221 217 64 240 193 98 181 179 139 93 43 217 15 148 200 39 209 21 76 116 221 186 196 116 145 17 177 249 37 66 180 40 168 65 31 184 1 217 253 216 80 56 161 14 90 91 144 169 109 107 175 22 46 248 89 204 25 207 164 255 201 87 161 189 30 146 77 7 70 46 10 55 213 4 73 223 139 4 239 31 171 244 116 145 223 95 19 219 235 135 216 39 15 4 122 159 96 0 23 253 28 58 186 176 178 137 164 81 196 102 228 215 127 32 138 207 65 92 51 15 166 101 182 9 217 177 7 179 107 15 114 250 83 144 157 123 66 101 209 106 254 141 45 103 210 121 221 117 12 174 250 5 252 125 215 33 157 109 96 59 104 239 56 190 55 139 244 230 40 171 125 68 42 105 181 1 8 126 146 64 160 43 209 175 214 34 97 19 38 95 98 16 105 65 203 2 157 138 169 10 11 227 200 45 184 67 123 209 155 255 10 242 62 178 249 52 236 35 127 2 179 231 213 72 103 235 234 97 131 159 250 0 131 47 255 22 238 186 119 163 98 2 54 48 89 220 225 217 242 224 172 137 99 151 227 83 207 24 76 176 97 24 128 18 200 5 215 191 175 131 168 73 99 243 184 170 236 206 71 145 42 33 216 131 26 84 51 144 22 98 59 104 203 161 253 57 242 155 47 131 189 31 65 54 157 130 125 196 11 48 79 124 211 170 92 191 214 143 255 30 230 244 167 209 187 236 37 200 116 172 235 151 4 204 149 181 137 35 136 108 134 157 101 75 94 58 89 130 129 252 218 48 132 89 109 9 16 242 246 61 82 186 74 163 103 208 37 69 15 205 252 123 223 44 178 72 74 190 169 66 187 85 237 95 17 27 49 136 100 136 237 32 173 25 164 179 21 237 31 39 191 249 255 208 255 240 147 25 124 249 183 209 99 119 62 120 92 112 206 139 233 92 122 37 44 30 67 243 197 234 28 211 24 141 141 135 1 49 58 242 40 203 191 70 29 232 248 239 153 184 182 174 123 6 32 17 255 90 22 132 212 8 63 105 117 141 175 48 129 106 30 67 180 174 170 187 111 100 210 132 93 89 48 195 38 152 222 129 191 251 43 244 255 250 21 228 159 123 51 122 108 223 131 99 130 179 47 166 125 233 149 176 56 139 230 11 81 74 233 48 193 41 172 152 198 97 163 188 53 99 142 172 98 160 230 33 162 200 26 229 3 172 50 122 138 24 160 112 6 165 4 30 34 60 117 189 158 86 225 248 226 251 125 188 235 6 147 210 37 229 94 46 45 3 115 141 144 114 56 15 49 89 64 240 157 109 184 7 174 167 255 241 151 146 95 251 223 31 212 38 178 103 95 76 251 181 87 66 127 22 241 11 136 228 8 126 152 144 77 2 70 13 54 110 135 151 71 97 64 140 98 158 53 106 19 176 70 18 192 143 8 245 166 101 85 174 94 250 85 43 171 114 224 251 248 193 113 252 226 44 116 143 162 253 89 180 55 135 118 143 7 183 109 190 0 174 27 213 75 226 62 174 229 23 20 140 208 10 234 97 106 39 254 182 79 211 255 240 143 226 246 126 228 196 153 224 172 139 105 191 250 111 195 57 105 23 172 47 37 193 56 241 95 138 121 89 66 2 8 229 231 2 51 52 214 88 35 64 152 173 29 3 104 48 219 106 113 244 229 146 47 61 222 59 24 44 146 61 237 183 177 59 206 130 60 199 221 253 21 48 22 127 112 47 122 236 110 244 224 13 193 185 98 90 96 178 144 5 100 108 3 145 197 172 32 145 240 57 239 208 197 195 248 227 247 209 191 242 13 152 189 31 161 243 51 95 56 33 100 101 207 250 41 120 238 31 50 248 202 127 70 140 64 171 19 126 207 140 104 78 37 19 34 123 93 226 121 140 49 121 86 63 51 108 245 115 2 53 169 246 197 142 78 156 24 155 124 25 192 163 186 46 118 219 89 48 125 106 116 206 92 18 238 121 85 117 77 102 239 194 223 243 143 184 59 174 66 31 216 11 89 39 244 215 49 89 100 134 152 73 235 250 232 220 189 248 197 195 136 8 210 222 130 102 83 248 123 174 165 251 174 205 180 127 254 219 152 157 231 172 156 9 158 244 171 248 217 91 241 55 189 31 105 109 7 211 30 205 0 74 149 24 147 18 215 52 208 125 226 67 80 223 144 205 73 79 139 213 150 4 171 47 1 74 63 64 154 103 55 105 242 101 149 24 170 174 183 228 127 149 109 103 98 183 157 137 189 224 181 168 42 254 142 171 112 223 124 55 122 252 126 104 205 32 166 21 118 252 252 129 128 7 76 86 186 103 197 88 212 100 232 96 129 222 159 158 75 251 165 31 193 62 238 117 43 55 17 159 243 94 250 7 174 69 103 111 69 204 86 160 21 136 45 203 236 120 105 40 97 173 111 125 49 195 18 65 117 109 28 3 171 15 2 75 208 231 199 160 253 113 229 211 73 30 193 10 195 193 34 130 61 231 98 218 175 249 59 58 175 250 12 178 237 108 242 239 125 5 127 248 59 245 181 138 120 187 152 128 13 218 155 96 102 59 253 207 188 158 254 231 222 116 98 126 130 75 190 141 24 65 116 1 177 249 242 186 222 36 59 94 24 253 89 25 243 120 67 128 192 90 211 135 40 9 70 212 205 171 243 245 112 171 75 250 254 248 7 145 15 176 245 76 218 47 253 40 83 255 254 22 204 25 79 135 197 195 232 96 33 244 37 24 101 54 182 166 97 243 78 252 222 247 145 255 195 155 78 72 241 101 47 251 34 154 207 135 48 175 104 195 132 155 0 253 215 142 37 152 102 67 48 0 249 176 20 40 58 131 168 175 8 47 141 166 10 210 44 255 126 144 127 108 215 30 58 175 253 2 157 55 124 13 241 57 244 142 162 121 55 105 22 65 208 217 198 98 218 29 152 217 65 126 195 159 51 248 194 202 153 192 156 242 84 236 217 175 68 221 113 68 6 136 248 18 197 79 36 17 106 132 78 205 194 226 177 47 29 170 235 222 19 88 217 240 233 142 47 8 63 162 52 92 18 53 225 181 234 198 177 74 44 111 30 122 17 83 191 54 143 61 251 165 176 120 40 152 145 62 143 230 150 15 9 64 98 144 246 84 112 30 221 248 62 6 87 175 156 9 236 243 62 142 88 3 110 17 140 171 174 172 137 230 157 44 225 5 44 25 69 43 147 114 72 13 248 117 46 1 202 54 105 190 150 226 165 58 134 240 227 90 174 144 164 141 173 226 173 253 138 203 105 191 230 202 208 69 208 29 71 180 95 185 102 109 192 5 166 213 70 166 182 227 111 122 31 131 107 126 113 229 136 250 57 159 64 221 2 208 15 249 144 89 97 215 83 122 9 71 138 125 210 247 24 195 28 178 17 84 64 136 253 151 13 156 106 93 57 199 245 194 25 39 25 86 255 207 218 179 47 102 234 151 246 33 146 163 131 99 192 32 162 238 40 9 172 129 246 20 76 111 71 111 250 115 252 93 87 174 236 223 159 241 98 228 244 103 34 110 190 244 18 86 142 160 194 75 56 130 184 153 38 30 196 166 119 176 96 80 191 1 24 64 64 117 144 244 228 163 1 240 220 50 141 145 170 14 160 98 219 107 131 122 166 118 208 249 79 139 200 238 243 209 254 44 66 143 50 143 47 90 8 166 221 70 166 55 147 95 245 18 180 123 120 101 76 246 172 79 133 188 63 122 81 108 55 68 124 122 229 77 234 66 169 7 134 72 24 167 100 208 13 17 12 42 220 178 190 9 240 114 106 97 95 205 199 48 129 130 201 112 135 111 135 227 247 174 73 110 176 0 157 127 243 45 204 174 61 65 18 232 32 130 175 2 19 88 104 77 195 212 20 249 39 31 179 178 181 219 59 49 123 126 1 213 5 144 1 100 190 114 241 90 69 178 120 20 59 60 139 175 55 37 130 137 255 188 96 8 89 247 117 1 133 39 48 177 2 36 105 150 56 73 99 164 136 116 37 107 147 95 253 107 228 121 244 247 247 142 195 166 211 144 211 158 132 61 231 98 236 57 23 175 10 239 182 127 246 122 250 151 95 136 30 189 21 99 55 7 151 113 225 43 32 195 152 25 232 239 39 191 250 167 201 158 251 201 201 119 213 147 223 15 223 253 0 180 6 213 86 55 178 236 229 147 154 103 80 192 196 164 83 163 48 216 8 209 64 104 196 246 155 61 245 82 160 151 72 132 34 111 160 68 255 54 4 112 166 119 128 237 224 251 199 241 135 110 193 237 253 11 250 31 255 105 22 254 155 165 247 129 39 224 190 115 229 131 62 221 214 75 62 31 252 249 186 80 49 100 180 221 177 45 104 111 69 239 250 20 250 192 181 43 219 14 231 253 124 88 83 252 120 221 63 18 15 212 45 135 18 7 108 12 71 144 36 13 32 71 0 60 26 225 224 33 70 137 192 209 0 210 66 251 243 232 220 125 72 54 133 180 67 82 168 204 236 66 54 239 194 31 253 46 253 143 191 140 238 187 54 145 95 247 135 39 126 198 211 187 105 189 250 122 180 183 128 250 69 196 56 196 248 176 99 173 64 214 130 169 14 238 171 63 189 178 117 159 248 129 88 27 211 167 108 28 109 18 226 154 186 158 175 60 132 77 147 208 151 57 1 235 31 3 8 195 196 31 101 242 141 124 61 79 218 189 27 220 177 187 209 99 247 196 214 40 54 164 131 153 12 76 187 100 8 166 119 163 166 197 224 139 191 65 247 143 207 192 223 123 237 137 157 246 182 115 200 158 247 17 36 159 131 194 60 148 120 225 141 96 90 83 208 219 143 222 250 7 43 244 65 60 21 161 98 170 34 177 163 200 40 171 142 17 225 223 212 252 19 221 64 158 192 146 1 88 190 39 110 77 45 36 45 26 142 125 31 233 31 139 81 189 36 221 186 120 44 38 212 254 219 118 200 254 153 218 133 246 102 233 125 248 105 244 63 251 230 19 187 16 231 190 14 57 253 89 193 165 203 160 218 117 214 132 210 242 214 20 238 134 223 92 25 99 61 250 93 177 71 230 96 114 21 16 67 227 37 115 20 175 91 221 40 42 96 84 202 151 142 111 150 92 120 10 35 195 232 177 187 160 119 140 50 172 54 214 1 34 101 162 168 216 54 210 222 12 211 59 113 123 63 64 239 67 79 56 161 202 178 236 39 175 129 44 67 181 135 224 42 51 206 134 152 191 193 161 223 252 185 201 23 220 241 116 216 180 43 81 3 73 165 241 200 99 132 154 16 95 241 255 134 145 0 46 111 148 91 23 128 207 15 121 252 170 74 96 135 30 221 7 253 249 36 135 74 38 99 186 56 133 75 178 224 206 213 163 183 209 253 163 105 88 60 180 98 254 181 23 190 29 227 230 131 55 15 192 106 136 246 25 3 173 41 252 119 63 188 178 53 31 246 250 136 107 220 138 36 64 121 24 25 246 33 172 107 9 16 187 112 143 6 120 190 236 192 161 241 8 169 46 57 122 244 174 170 156 108 44 203 143 234 233 67 21 221 51 6 147 181 144 206 86 196 26 122 31 60 3 237 30 92 217 5 121 244 175 163 155 78 5 223 5 147 71 65 20 85 65 214 66 90 160 119 252 254 228 87 228 172 223 140 155 123 48 70 255 55 176 192 16 6 208 58 6 208 117 47 1 242 241 0 175 36 124 234 238 85 244 248 61 145 248 163 230 230 37 94 196 162 117 76 81 123 232 147 244 179 50 186 103 32 203 160 189 25 17 232 127 232 97 43 119 25 63 249 253 168 246 99 106 187 79 226 246 54 20 171 220 252 214 21 216 153 187 97 122 123 4 151 113 3 152 198 33 141 67 19 166 176 81 255 111 24 43 192 37 98 190 180 237 169 7 134 202 204 31 143 206 221 15 131 238 104 226 199 26 122 117 253 96 18 118 103 209 197 67 232 194 65 180 123 24 237 29 67 7 139 161 126 208 120 68 10 115 203 96 108 11 218 155 64 160 127 217 227 86 246 55 78 127 9 50 189 27 116 17 76 100 2 163 136 21 196 116 2 33 142 124 117 242 5 31 254 11 145 65 125 89 207 80 59 140 132 163 96 52 59 154 25 214 185 10 40 60 129 201 32 7 161 30 10 38 205 19 16 116 126 127 152 19 56 142 248 154 135 28 252 238 33 164 179 157 214 115 223 201 212 235 190 202 212 155 110 163 253 170 191 193 62 254 13 97 151 22 177 254 162 218 184 200 176 181 45 164 179 5 142 220 128 251 250 202 16 188 249 145 15 86 201 41 86 163 86 82 200 44 180 65 247 253 143 201 23 219 253 178 120 137 178 152 59 184 212 81 152 189 82 133 129 11 102 216 16 253 1 18 79 96 217 250 182 214 48 33 234 235 222 28 244 143 87 128 111 104 231 231 232 96 30 49 134 214 171 175 196 198 14 96 165 152 222 113 22 246 172 23 193 11 254 152 252 171 191 67 254 79 239 64 205 118 36 155 70 138 45 19 29 74 210 217 138 251 230 59 49 231 189 1 217 182 103 50 118 126 232 75 240 214 32 210 67 200 18 23 177 132 22 116 247 94 9 79 156 240 154 108 123 102 60 151 88 42 46 182 30 62 47 158 12 85 79 199 228 21 227 54 138 21 16 98 1 65 220 143 234 234 29 205 170 124 17 93 56 48 154 248 229 204 193 69 68 132 169 95 186 115 136 248 67 92 252 140 183 211 186 228 115 208 63 138 250 126 233 206 13 117 1 18 50 134 59 83 228 95 124 213 202 46 206 153 111 64 116 16 38 157 148 94 186 144 69 36 25 112 116 5 106 96 215 243 171 20 117 219 138 41 237 45 176 157 184 243 147 215 203 247 11 137 80 20 164 234 122 103 128 48 241 115 244 32 165 106 198 174 30 223 63 134 248 197 238 239 67 239 24 237 159 249 60 116 38 235 9 96 31 241 147 152 243 94 141 228 199 41 38 148 72 17 226 53 49 186 119 248 6 244 238 207 76 206 206 103 254 92 12 206 184 18 12 6 148 110 67 181 206 125 239 155 252 194 108 127 90 212 239 89 244 104 166 76 208 170 63 79 223 207 218 96 219 4 243 99 67 184 130 243 17 113 255 34 250 39 33 109 59 197 12 67 86 132 162 121 15 243 168 231 99 78 123 242 202 162 123 47 190 60 12 170 114 131 70 214 173 96 108 134 180 167 112 95 123 227 10 28 57 207 128 54 101 178 103 40 240 140 234 197 2 7 63 61 249 90 155 47 138 122 221 6 98 218 166 36 24 199 12 145 33 172 221 8 18 64 98 13 95 62 220 144 25 15 139 71 99 163 135 49 176 182 240 24 186 30 217 83 126 245 196 254 208 249 151 130 246 131 39 79 210 12 224 80 223 175 139 7 208 185 91 38 95 240 212 151 0 14 49 177 152 69 98 152 219 180 195 64 44 38 204 212 217 242 148 74 2 100 9 232 179 237 32 161 134 136 159 197 231 25 72 155 181 202 8 89 3 63 192 40 151 175 131 65 23 237 31 75 16 255 88 37 2 62 15 237 95 79 228 15 157 246 99 209 239 224 147 240 65 220 185 209 142 215 155 222 53 57 75 159 250 210 152 145 235 147 53 179 160 187 51 224 216 132 1 168 214 174 24 208 178 35 118 119 103 88 37 148 196 111 133 136 164 105 173 115 16 88 152 113 205 25 123 209 89 163 139 71 226 78 100 2 115 198 167 67 123 87 120 115 81 247 147 244 4 166 74 1 183 109 252 190 15 77 190 220 182 167 197 86 71 133 137 105 131 56 150 118 32 204 220 117 147 175 53 179 39 48 128 216 97 49 111 71 232 255 242 121 150 52 220 210 245 46 1 138 137 160 197 0 101 65 123 115 84 13 143 101 178 211 58 209 190 63 98 107 41 217 101 93 125 129 224 109 43 204 39 234 62 48 161 238 190 160 100 172 32 69 226 174 180 25 216 41 152 251 250 228 231 54 125 78 96 0 91 124 63 171 30 55 197 126 237 121 43 70 70 215 187 35 72 36 86 224 36 169 95 121 31 6 11 227 65 223 168 83 50 25 122 228 246 19 179 66 14 92 27 29 46 166 194 25 133 42 208 184 131 51 96 255 228 214 0 219 207 137 12 92 236 222 184 131 101 10 252 220 10 188 46 59 98 164 47 74 145 210 34 136 5 173 53 11 33 185 151 86 108 53 183 33 48 128 171 101 5 107 127 46 17 253 203 241 80 4 107 182 67 126 221 255 58 177 159 191 245 99 177 219 103 50 73 36 173 193 147 144 233 227 239 253 212 10 204 139 93 148 213 198 165 93 158 5 0 183 240 127 87 96 9 60 165 218 249 77 125 95 83 1 38 97 140 248 121 89 247 18 160 114 4 149 18 160 104 243 182 146 128 182 8 146 117 240 223 251 123 252 209 125 43 211 254 215 253 14 180 227 197 36 241 173 199 194 139 128 222 131 24 55 249 209 21 232 238 11 42 230 140 201 40 129 104 109 112 243 43 244 150 103 117 162 23 204 80 170 133 184 110 28 120 81 234 127 107 215 164 125 238 234 75 0 87 53 123 14 186 127 133 217 12 133 183 172 179 141 254 7 31 15 221 217 201 68 255 157 127 71 254 245 119 132 12 161 212 151 158 186 28 162 53 96 76 134 63 252 143 147 159 211 166 199 198 93 25 187 65 21 170 160 32 230 74 240 73 86 16 186 93 103 130 82 50 52 118 126 193 108 146 109 0 9 80 58 130 124 136 240 233 137 244 252 45 146 59 166 81 133 238 255 62 19 189 127 105 160 229 190 253 110 6 159 121 33 102 122 75 180 177 163 248 47 192 95 202 131 18 9 145 175 192 202 40 8 32 209 33 99 226 33 25 152 206 10 214 105 7 183 180 105 87 12 212 4 126 163 24 161 200 137 92 3 12 176 6 189 130 67 0 195 251 126 8 202 156 72 20 35 118 223 148 214 38 52 95 164 251 225 167 98 30 114 33 246 113 175 195 158 243 210 208 87 160 123 4 191 239 74 220 255 251 67 208 30 50 179 61 92 224 98 70 80 146 68 33 105 127 0 3 168 9 31 235 31 130 252 104 28 79 227 235 73 23 38 126 216 110 134 222 189 1 241 23 62 249 26 24 220 4 238 104 0 131 62 79 218 197 22 227 226 138 80 239 52 184 35 97 8 52 9 170 111 14 139 40 43 170 227 252 34 149 24 30 46 247 170 93 175 12 16 206 208 123 212 13 66 73 246 131 17 91 41 19 216 54 254 200 29 248 47 254 87 6 95 248 47 33 109 219 26 104 181 145 86 27 105 207 196 157 67 93 244 55 197 191 18 35 133 22 49 211 248 207 237 174 229 155 70 225 83 7 141 25 144 109 134 108 107 37 5 196 84 247 38 131 91 158 25 156 68 54 97 140 172 85 49 75 105 231 79 7 134 41 186 149 212 60 160 209 91 42 174 12 151 135 206 235 81 98 217 242 90 126 126 189 50 192 141 165 4 112 93 86 37 126 89 116 243 144 232 41 203 166 203 178 238 96 211 27 196 38 57 85 181 20 177 81 44 90 148 91 25 160 19 209 181 47 147 47 203 90 254 194 103 80 120 252 202 136 157 73 36 64 1 6 219 32 51 149 90 40 204 57 73 158 23 98 188 120 45 237 35 51 52 46 38 22 130 150 35 247 194 158 215 195 139 197 87 14 175 83 6 144 155 69 4 237 30 89 153 94 156 8 19 196 93 160 166 202 152 45 122 231 9 85 91 127 169 62 94 223 253 137 87 176 124 96 35 243 104 173 49 67 184 224 177 75 147 137 81 56 73 18 53 106 153 60 9 161 155 122 187 32 124 137 23 108 226 155 72 91 205 54 230 13 21 155 168 70 37 65 231 11 107 138 155 214 171 4 184 30 98 162 71 182 70 149 189 53 211 174 28 179 156 40 110 42 224 71 97 254 53 224 110 234 30 30 37 38 140 175 60 126 38 33 90 106 6 138 212 239 11 64 40 169 13 223 96 0 99 234 223 79 1 71 58 25 85 36 238 254 228 63 103 224 238 155 45 212 219 170 142 15 91 221 88 128 200 23 117 16 6 49 5 49 187 250 54 139 212 124 252 186 76 108 162 206 24 82 254 227 166 170 24 85 121 147 244 254 151 180 229 231 18 135 73 177 129 29 113 164 86 132 169 130 67 54 149 18 201 99 155 133 20 180 197 28 127 232 56 24 185 98 181 83 131 86 59 39 240 207 232 47 132 121 56 217 12 67 169 219 107 113 214 178 132 171 161 1 0 151 110 223 214 72 49 151 17 21 73 53 166 72 135 67 152 134 163 40 185 111 50 193 184 19 45 153 163 241 189 118 155 252 219 119 67 102 16 145 247 174 118 106 216 106 251 1 46 35 226 0 201 166 134 174 235 42 249 154 39 216 245 147 252 83 93 98 141 102 41 218 18 143 83 194 167 18 35 197 11 5 67 44 121 49 146 88 131 152 192 12 89 6 30 242 155 191 31 172 30 225 234 245 239 10 70 126 151 193 98 12 150 172 141 255 122 217 83 88 138 113 100 66 233 81 139 94 38 118 253 168 163 198 8 163 238 237 228 204 109 99 222 66 102 161 211 161 255 165 189 168 247 136 53 151 172 69 110 248 234 43 106 145 183 129 160 221 67 113 198 207 26 169 129 19 98 130 241 31 169 91 145 163 22 176 13 244 41 141 132 125 169 103 14 203 24 243 116 18 146 88 11 173 22 126 223 189 184 155 239 68 90 246 16 34 151 111 128 96 80 121 45 78 197 57 116 176 24 236 100 61 249 130 96 201 190 186 203 117 91 41 156 47 163 248 65 100 204 107 137 40 81 134 205 189 137 157 95 6 58 109 56 122 156 254 85 215 134 224 150 49 143 217 32 93 194 202 127 242 0 194 37 228 221 202 20 218 8 55 51 233 85 145 165 95 50 39 112 137 37 56 182 232 180 224 232 44 221 143 126 54 68 212 51 123 41 194 254 181 250 203 107 56 156 79 46 71 212 147 47 94 177 102 124 182 28 141 116 9 235 96 212 123 62 74 122 159 120 13 71 138 7 29 241 146 142 120 94 52 192 54 203 236 122 137 160 175 133 126 239 46 122 159 188 38 156 94 150 189 6 145 43 214 114 136 230 26 79 103 148 143 3 151 128 94 182 110 196 255 184 143 212 68 186 214 115 18 107 35 230 169 74 223 37 121 61 117 80 52 129 165 145 58 207 20 24 34 45 102 85 79 255 111 191 140 219 123 27 116 218 72 150 93 186 214 196 63 9 12 0 192 229 192 53 192 141 192 238 53 217 233 77 52 47 58 220 123 207 72 172 179 107 76 240 136 4 84 73 186 116 22 238 225 98 26 136 77 58 138 150 99 92 76 213 71 200 196 232 162 53 177 201 147 137 239 219 216 97 196 82 159 36 26 191 131 129 197 121 242 47 125 131 252 219 183 134 94 9 83 157 67 98 205 99 16 217 127 50 198 231 158 172 249 172 7 128 83 128 183 0 239 126 80 155 91 37 228 246 121 80 145 80 180 147 196 81 170 26 188 40 206 243 170 193 130 26 83 101 12 91 13 1 183 164 254 62 224 54 95 166 141 5 240 175 85 129 166 233 87 76 33 46 113 247 246 19 15 95 171 238 245 147 196 219 23 69 190 222 247 0 122 100 30 183 239 30 252 129 195 161 228 60 179 144 181 47 17 35 151 159 204 185 201 39 119 64 47 188 39 30 151 2 111 6 158 181 98 209 238 65 93 117 129 124 211 116 211 17 192 171 57 144 79 39 240 47 105 170 239 251 160 189 234 13 109 196 31 210 231 181 199 99 22 47 226 11 214 192 204 212 21 98 228 189 136 92 93 179 50 254 133 50 64 113 251 88 60 10 106 93 0 236 4 158 71 89 65 58 1 0 215 241 83 215 39 246 30 78 228 173 92 102 4 200 178 185 122 229 184 15 11 242 151 64 11 225 166 208 208 224 228 19 125 61 48 64 19 123 223 16 31 127 121 181 29 62 19 17 93 30 204 143 77 210 201 91 198 91 0 63 224 219 122 96 0 128 135 80 180 238 62 81 34 78 102 20 158 200 119 135 191 160 147 44 164 163 223 22 36 52 45 72 109 123 249 129 205 155 254 65 49 192 233 192 69 192 89 192 230 101 197 254 82 116 208 209 170 97 73 12 48 238 51 166 185 104 125 192 85 57 1 13 26 227 103 70 189 151 126 95 234 38 102 40 90 48 136 204 99 204 13 34 114 29 70 14 255 107 192 0 143 137 122 126 38 238 120 7 28 89 134 248 134 162 4 55 166 71 73 204 8 50 138 193 226 49 222 96 196 83 6 228 124 217 38 166 236 242 37 106 48 248 178 239 110 57 202 69 13 162 158 98 44 139 20 115 222 90 1 153 75 203 96 90 30 219 50 72 203 215 144 190 77 81 127 171 89 225 35 241 51 26 204 194 12 172 65 239 63 130 246 122 248 3 71 68 247 221 99 252 124 247 177 10 23 130 118 201 178 79 139 225 187 255 18 173 128 237 192 139 128 135 5 72 205 92 178 235 39 23 198 166 97 239 219 152 26 134 132 110 90 37 3 104 109 248 66 97 199 75 99 124 75 104 10 94 181 99 23 73 108 255 50 191 175 136 206 165 233 94 177 120 195 180 194 235 182 93 165 119 23 41 222 89 82 216 89 152 131 34 176 115 27 85 96 169 45 126 255 221 226 111 185 211 228 223 190 213 234 32 127 133 26 185 79 50 251 9 68 186 255 82 252 0 231 0 47 140 132 158 163 104 223 177 188 158 158 36 140 38 40 26 67 237 225 177 68 113 30 231 78 160 232 80 9 191 36 12 229 154 142 36 1 95 228 30 26 65 141 134 201 221 42 24 13 187 57 3 188 10 153 87 188 7 235 132 76 20 53 224 68 200 140 162 62 116 24 51 34 120 148 102 38 151 8 72 23 115 234 46 204 67 30 74 246 140 11 165 255 153 47 247 252 247 238 217 161 189 193 191 147 78 235 83 192 221 27 221 19 120 54 200 139 66 215 69 201 153 184 155 194 42 25 0 133 111 127 2 224 62 28 181 53 181 106 162 186 155 88 146 9 181 209 131 164 73 13 64 153 230 45 73 199 212 49 166 99 215 131 25 64 43 163 253 242 23 14 252 77 55 245 251 255 240 207 153 246 250 47 151 118 251 42 12 119 108 208 88 128 62 10 229 249 216 246 60 154 231 177 39 108 147 60 102 9 210 21 144 172 34 77 200 241 244 1 64 141 253 206 184 117 171 215 151 139 77 105 252 37 169 81 158 104 183 155 82 246 20 167 231 145 138 209 106 46 197 81 3 96 101 136 17 156 42 126 0 214 137 185 224 60 55 117 198 105 174 247 209 207 58 63 191 240 2 233 180 62 11 236 91 43 38 88 35 6 208 29 40 207 161 61 181 128 247 57 206 249 49 127 192 47 179 127 87 250 158 159 240 253 7 235 183 152 84 62 77 254 123 26 71 230 245 186 176 121 154 206 107 158 155 119 255 234 115 185 246 242 167 75 167 181 31 97 113 227 48 128 250 31 199 78 245 68 58 3 117 71 125 146 104 247 224 82 67 164 210 251 40 73 1 224 4 118 255 164 178 167 250 118 248 157 116 3 235 24 95 64 149 238 23 228 127 57 252 74 101 72 138 45 117 158 10 120 47 116 189 178 117 198 180 158 251 35 121 255 202 107 219 228 246 89 180 204 231 214 66 10 172 193 248 120 125 52 152 182 116 182 118 117 241 136 11 250 114 245 79 124 162 17 74 227 226 254 81 77 75 163 58 171 126 154 62 50 74 131 118 181 54 45 82 245 66 64 71 48 73 44 246 88 105 135 47 159 195 64 177 103 63 12 251 196 115 156 251 250 109 219 100 235 244 249 136 220 178 254 25 192 231 103 203 204 206 28 63 200 43 36 52 180 11 100 89 125 63 220 31 123 172 149 160 30 17 19 163 246 133 37 80 96 6 89 6 83 104 124 79 82 253 95 52 149 42 162 79 141 66 190 90 71 79 13 22 129 45 118 126 49 53 205 20 224 80 240 185 98 236 56 105 80 127 238 242 162 175 146 96 133 246 147 206 118 221 155 238 68 115 247 8 105 153 91 214 247 248 120 213 179 16 3 173 77 3 237 30 9 237 66 39 59 225 7 167 155 77 226 81 144 177 162 222 47 33 58 252 232 83 106 238 236 17 207 53 134 139 211 121 201 146 84 250 166 22 194 146 173 222 210 97 27 62 224 1 239 81 107 36 187 240 145 189 254 87 110 181 178 61 123 8 34 251 215 41 3 40 224 79 165 189 217 35 54 199 245 139 62 49 102 25 45 60 10 189 55 181 180 79 72 93 127 62 76 120 31 95 247 152 196 139 232 37 120 253 234 27 47 249 29 241 161 248 16 202 17 38 225 48 193 130 241 38 138 123 159 76 64 9 239 169 55 129 216 41 19 120 31 30 11 16 229 147 141 86 68 106 77 4 211 210 227 188 41 25 160 40 17 247 3 196 138 102 15 223 109 6 173 59 50 117 254 76 49 118 189 50 0 59 241 121 38 237 77 253 192 190 19 35 246 113 232 221 143 252 78 125 35 250 49 115 37 124 52 227 124 233 232 49 141 207 87 194 56 88 40 33 197 203 87 188 88 254 136 143 59 221 15 143 190 81 31 159 251 132 240 149 10 192 133 165 50 60 70 193 73 248 141 210 76 44 192 101 92 203 39 173 245 138 78 107 94 209 205 153 203 30 185 67 243 239 31 238 144 153 86 116 163 175 51 6 80 182 162 40 83 91 7 244 142 133 63 179 234 248 162 112 236 44 1 1 211 250 13 87 236 51 137 202 29 17 37 164 2 73 115 234 72 161 207 163 139 217 197 46 221 42 224 108 213 40 146 102 19 76 211 232 139 88 124 198 85 50 43 87 200 76 146 59 216 168 14 46 177 68 213 87 49 12 199 200 35 80 241 152 93 155 61 223 59 172 76 113 10 112 239 122 84 1 83 106 219 152 108 42 215 254 188 31 1 246 150 3 128 227 29 124 165 190 117 48 232 3 78 105 101 66 214 10 240 175 156 76 154 172 16 21 129 22 237 98 130 251 168 180 83 241 222 104 62 239 69 188 137 241 1 213 98 116 172 71 16 60 154 153 208 17 52 7 182 54 8 239 21 205 3 163 208 11 53 187 166 21 235 250 210 96 81 22 68 255 192 26 204 84 172 152 50 137 139 49 130 74 85 65 189 150 0 208 187 162 215 82 224 202 153 142 85 85 47 74 107 189 170 128 182 17 147 163 214 99 58 201 172 88 203 50 158 57 63 198 50 247 133 254 213 193 2 44 28 197 59 48 155 103 96 106 155 161 123 192 107 207 25 153 198 203 166 157 161 27 120 104 237 237 75 23 129 23 131 209 96 205 27 20 135 33 19 143 247 6 122 158 108 202 163 125 19 186 128 198 173 239 21 44 18 158 27 95 249 146 23 61 106 12 106 124 212 253 49 198 144 3 237 16 35 80 103 80 241 81 254 7 245 146 99 80 11 182 229 3 176 83 31 139 68 195 127 247 152 42 11 57 48 102 57 123 89 157 71 157 33 67 217 156 185 216 215 168 179 94 25 96 128 208 198 138 74 214 86 111 44 226 7 39 130 3 18 27 122 224 117 126 63 180 166 49 143 255 89 90 15 255 49 100 203 153 200 212 118 175 221 3 232 177 125 222 223 117 21 122 215 213 104 167 131 153 217 17 165 125 228 191 44 93 51 234 223 48 189 212 171 95 192 62 253 107 144 207 249 178 183 112 77 14 105 21 249 59 244 55 112 207 123 96 230 17 30 49 160 198 227 12 112 28 166 206 134 135 188 9 90 15 3 233 251 88 21 228 147 90 127 31 164 194 12 244 190 9 199 63 19 85 120 203 151 76 162 201 68 53 81 95 169 129 65 96 24 43 72 166 69 58 235 186 149 0 161 193 141 136 98 50 53 89 27 237 229 73 99 158 145 170 160 16 218 117 11 64 213 224 7 94 187 7 141 61 245 241 216 231 189 11 251 200 231 143 244 225 233 227 222 232 253 245 127 102 242 111 188 77 253 194 253 98 54 63 52 236 170 44 174 229 48 42 162 226 148 184 215 2 31 116 129 237 23 141 242 235 13 187 145 242 67 202 190 119 7 253 92 226 128 129 224 143 131 217 226 217 254 50 179 196 255 75 182 200 157 130 95 84 124 49 14 84 5 227 131 231 34 0 74 19 113 68 148 4 241 250 57 132 60 143 49 234 98 158 221 250 195 0 121 24 181 149 133 65 137 102 10 164 59 169 207 46 145 0 10 234 189 46 60 128 236 222 227 219 151 252 29 108 62 109 172 205 46 237 109 216 31 253 13 207 150 135 224 190 250 203 97 86 224 204 78 175 152 144 62 94 78 94 74 72 162 14 102 182 172 64 182 205 69 43 215 197 225 17 177 146 71 115 112 11 208 191 223 211 62 109 249 117 122 55 195 96 62 118 28 139 60 146 39 110 230 194 170 32 50 65 97 17 24 130 74 48 37 247 173 75 9 224 48 248 88 19 175 72 152 0 174 131 227 163 152 96 84 74 166 47 237 250 193 28 76 109 247 173 103 255 129 97 243 105 203 121 238 61 96 236 158 215 123 127 240 91 70 111 124 15 226 251 224 59 85 17 71 185 66 176 245 189 14 188 157 57 111 185 72 100 117 174 11 183 69 198 201 67 191 22 149 32 101 52 247 184 5 131 14 38 139 58 120 241 248 220 64 217 239 39 152 17 26 243 205 212 23 184 39 237 182 30 127 203 145 216 54 235 144 1 20 143 151 60 142 218 140 99 211 59 130 235 105 232 159 199 36 146 192 227 61 58 88 192 156 253 98 204 57 23 47 23 221 171 73 133 236 162 223 243 249 61 87 163 179 55 35 51 167 36 206 223 16 53 10 106 64 61 62 135 77 231 78 22 109 84 133 222 190 200 170 209 62 23 137 0 175 11 217 78 79 107 247 100 94 78 109 7 130 234 160 106 161 163 165 159 129 106 126 110 195 172 244 120 200 77 229 155 94 159 18 32 7 205 48 226 195 164 38 227 49 24 105 111 65 123 135 195 174 145 33 239 94 195 3 168 170 174 135 76 237 146 108 207 43 145 229 241 66 77 162 72 54 3 219 207 23 14 237 85 188 23 197 122 81 53 165 211 8 53 248 136 204 119 62 131 49 62 249 198 125 14 253 251 139 153 136 18 70 192 74 48 205 252 162 96 183 42 102 122 92 236 162 110 234 118 111 135 124 1 204 22 208 129 84 38 174 215 152 116 42 97 178 166 143 247 209 36 116 26 204 195 112 253 242 245 11 2 69 156 216 150 215 188 85 237 146 172 141 248 25 209 254 98 209 9 113 212 238 208 194 83 131 14 160 179 77 100 231 185 122 34 177 3 179 243 9 184 187 175 140 115 11 44 152 202 123 168 70 188 120 7 3 188 156 246 83 147 234 127 97 238 250 152 138 226 66 98 83 81 134 54 80 200 78 157 28 223 244 246 129 91 4 54 49 164 54 154 253 2 203 193 155 145 63 156 35 36 50 174 103 12 16 134 235 248 178 15 46 113 104 116 107 43 228 189 232 42 157 64 21 148 33 214 19 184 77 237 136 125 252 139 137 165 18 234 1 85 194 107 110 128 233 116 96 203 132 35 105 180 11 71 143 192 230 22 197 56 27 76 153 9 4 173 83 86 32 35 23 66 180 207 244 65 109 197 251 74 35 192 148 168 0 9 238 224 56 107 73 215 47 6 8 39 150 35 70 107 61 241 162 35 94 218 219 209 197 67 212 251 237 140 185 217 22 180 103 78 236 44 22 238 15 51 7 59 155 26 45 4 131 39 209 15 22 200 46 248 143 147 175 119 236 186 8 192 91 224 12 216 232 223 215 94 184 122 173 211 87 32 35 187 129 9 243 65 21 10 160 89 87 152 204 74 78 153 64 115 48 38 246 146 93 159 102 160 71 213 33 153 150 131 161 52 105 236 215 154 66 220 230 48 64 2 59 182 113 131 216 86 152 13 124 231 151 224 212 39 172 156 11 15 221 8 253 46 76 109 43 53 121 41 5 188 135 5 144 115 127 105 242 5 15 253 67 24 217 167 38 64 27 39 96 115 24 44 194 204 163 96 243 132 115 137 143 127 19 242 35 133 53 145 244 31 40 112 157 52 36 128 86 3 183 92 94 40 17 89 207 32 48 112 167 49 138 181 82 37 226 83 213 235 79 109 139 147 191 251 73 31 157 6 7 152 14 204 223 143 191 235 26 236 147 127 101 69 105 100 186 120 24 142 222 30 58 109 168 45 77 246 112 118 14 250 115 200 195 158 4 91 206 27 237 168 25 177 99 245 190 43 4 139 162 166 202 26 114 18 228 93 251 12 152 58 119 178 115 236 221 14 253 133 152 43 58 96 228 192 76 26 163 246 10 9 144 231 177 12 218 174 119 6 192 67 166 101 203 212 146 203 197 163 98 48 6 153 217 133 206 237 143 127 178 198 4 225 10 136 49 210 222 68 126 207 63 122 115 199 103 177 103 191 200 44 233 93 75 51 48 175 251 93 244 224 77 94 166 183 155 10 84 34 168 122 143 51 50 151 251 214 197 31 48 203 216 253 213 243 185 91 225 208 3 158 109 211 33 223 91 137 9 71 222 211 195 48 115 22 152 246 82 196 175 206 119 110 175 144 207 134 110 225 50 40 12 131 36 51 73 199 224 0 141 6 150 7 105 9 171 28 102 93 85 6 240 34 46 19 171 94 44 158 76 68 242 212 196 11 20 55 109 100 102 167 234 252 129 36 87 36 105 239 44 120 90 91 60 221 67 102 240 249 95 69 182 157 225 204 238 199 46 47 250 111 189 92 6 55 124 88 141 157 6 105 59 144 24 245 141 13 5 250 179 222 60 252 71 97 215 133 121 35 2 217 180 70 202 231 250 192 103 98 106 73 187 240 194 5 190 210 69 145 14 142 109 79 31 77 236 81 175 29 251 10 184 217 56 55 192 73 12 35 198 37 67 162 64 24 184 92 74 129 194 36 12 150 135 43 99 216 235 217 10 240 234 173 21 156 137 245 17 134 48 114 179 56 239 136 120 219 51 136 158 130 46 220 15 180 27 160 48 182 136 239 108 119 58 187 143 254 101 23 211 122 222 255 196 158 63 126 240 115 255 239 223 140 191 241 47 160 149 161 173 45 136 38 30 4 7 248 30 44 58 204 115 175 72 1 235 50 236 220 199 223 252 14 164 99 66 40 163 184 254 94 160 239 209 109 123 144 109 207 153 28 252 245 238 15 52 183 121 8 250 140 240 164 13 75 129 8 4 77 30 172 6 153 240 220 127 64 12 16 11 236 76 225 14 70 132 144 20 232 139 232 167 154 232 240 80 166 54 33 186 91 116 241 176 66 86 164 120 199 194 15 49 152 22 50 189 221 107 247 168 244 255 246 231 48 95 250 45 177 123 94 137 60 236 34 200 231 61 24 227 246 93 163 254 59 159 21 237 29 84 211 106 131 157 1 140 168 8 226 195 233 120 113 42 199 102 53 123 254 31 33 91 30 9 203 231 31 4 169 181 255 243 158 227 3 216 182 197 104 17 69 114 209 19 59 64 217 244 4 152 57 91 70 186 142 155 82 224 232 231 61 189 131 38 152 162 185 86 33 75 170 226 17 95 52 172 118 41 14 8 107 123 40 19 225 87 185 235 226 106 131 64 69 90 1 3 196 73 151 34 38 244 227 41 130 29 229 40 23 3 83 59 16 239 162 101 96 106 234 60 96 131 22 210 182 168 235 227 143 239 199 127 243 79 225 91 239 45 82 13 125 137 49 218 91 80 219 42 203 6 112 241 159 169 134 249 190 103 189 0 115 193 175 44 235 68 74 226 90 222 237 125 11 50 5 144 121 92 80 39 24 69 220 34 76 111 130 211 94 59 145 99 10 128 253 127 9 221 195 158 118 39 52 210 174 85 184 38 237 200 124 210 206 182 112 54 169 241 165 223 129 213 103 128 255 63 0 23 111 171 248 143 48 92 187 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!CSSDockFileLibrary methodsFor: 'styles' stamp: 'tbn 11/28/2007 01:33'!styleCss	^ 'body {	font: 11px Arial, Helvetica, sans-serif;	background: #ffffce;	padding: 0;	margin: 0;}img {	border: none;}/* dock - top */.dock {	position: relative; 	height: 50px; 	text-align: center;}.dock-container {	position: absolute;	height: 50px;	background: url(images/dock-bg2.gif);	padding-left: 20px;}a.dock-item {	display: block;	width: 40px;	color: #000;	position: absolute;	top: 0px;	text-align: center;	text-decoration: none;	font: bold 12px Arial, Helvetica, sans-serif;}.dock-item img {	border: none; 	margin: 5px 10px 0px; 	width: 100%; }.dock-item span {	display: none; 	padding-left: 20px;}/* dock2 - bottom */#dock2 {	width: 100%;	bottom: 0px;	position: absolute;	left: 0px;}.dock-container2 {	position: absolute;	height: 50px;	background: url(images/dock-bg.gif);	padding-left: 20px;}a.dock-item2 {	display: block; 	font: bold 12px Arial, Helvetica, sans-serif;	width: 40px; 	color: #000; 	bottom: 0px; 	position: absolute;	text-align: center;	text-decoration: none;}.dock-item2 span {	display: none;	padding-left: 20px;}.dock-item2 img {	border: none; 	margin: 5px 10px 0px; 	width: 100%; }'! !!CSSDockFileLibrary methodsFor: 'images'!videoPng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 128 0 0 0 128 8 6 0 0 0 195 62 97 203 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 10 79 105 67 67 80 80 104 111 116 111 115 104 111 112 32 73 67 67 32 112 114 111 102 105 108 101 0 0 120 218 157 83 103 84 83 233 22 61 247 222 244 66 75 136 128 148 75 111 82 21 8 32 82 66 139 128 20 145 38 42 33 9 16 74 136 33 161 217 21 81 193 17 69 69 4 27 200 160 136 3 142 142 128 140 21 81 44 12 138 10 216 7 228 33 162 142 131 163 136 138 202 251 225 123 163 107 214 188 247 230 205 254 181 215 62 231 172 243 157 179 207 7 192 8 12 150 72 51 81 53 128 12 169 66 30 17 224 131 199 196 198 225 228 46 64 129 10 36 112 0 16 8 179 100 33 115 253 35 1 0 248 126 60 60 43 34 192 7 190 0 1 120 211 11 8 0 192 77 155 192 48 28 135 255 15 234 66 153 92 1 128 132 1 192 116 145 56 75 8 128 20 0 64 122 142 66 166 0 64 70 1 128 157 152 38 83 0 160 4 0 96 203 99 98 227 0 80 45 0 96 39 127 230 211 0 128 157 248 153 123 1 0 91 148 33 21 1 160 145 0 32 19 101 136 68 0 104 59 0 172 207 86 138 69 0 88 48 0 20 102 75 196 57 0 216 45 0 48 73 87 102 72 0 176 183 0 192 206 16 11 178 0 8 12 0 48 81 136 133 41 0 4 123 0 96 200 35 35 120 0 132 153 0 20 70 242 87 60 241 43 174 16 231 42 0 0 120 153 178 60 185 36 57 69 129 91 8 45 113 7 87 87 46 30 40 206 73 23 43 20 54 97 2 97 154 64 46 194 121 153 25 50 129 52 15 224 243 204 0 0 160 145 21 17 224 131 243 253 120 206 14 174 206 206 54 142 182 14 95 45 234 191 6 255 34 98 98 227 254 229 207 171 112 64 0 0 225 116 126 209 254 44 47 179 26 128 59 6 128 109 254 162 37 238 4 104 94 11 160 117 247 139 102 178 15 64 181 0 160 233 218 87 243 112 248 126 60 60 69 161 144 185 217 217 229 228 228 216 74 196 66 91 97 202 87 125 254 103 194 95 192 87 253 108 249 126 60 252 247 245 224 190 226 36 129 50 93 129 71 4 248 224 194 204 244 76 165 28 207 146 9 132 98 220 230 143 71 252 183 11 255 252 29 211 34 196 73 98 185 88 42 20 227 81 18 113 142 68 154 140 243 50 165 34 137 66 146 41 197 37 210 255 100 226 223 44 251 3 62 223 53 0 176 106 62 1 123 145 45 168 93 99 3 246 75 39 16 88 116 192 226 247 0 0 242 187 111 193 212 40 8 3 128 104 131 225 207 119 255 239 63 253 71 160 37 0 128 102 73 146 113 0 0 94 68 36 46 84 202 179 63 199 8 0 0 68 160 129 42 176 65 27 244 193 24 44 192 6 28 193 5 220 193 11 252 96 54 132 66 36 196 194 66 16 66 10 100 128 28 114 96 41 172 130 66 40 134 205 176 29 42 96 47 212 64 29 52 192 81 104 134 147 112 14 46 194 85 184 14 61 112 15 250 97 8 158 193 40 188 129 9 4 65 200 8 19 97 33 218 136 1 98 138 88 35 142 8 23 153 133 248 33 193 72 4 18 139 36 32 201 136 20 81 34 75 145 53 72 49 82 138 84 32 85 72 29 242 61 114 2 57 135 92 70 186 145 59 200 0 50 130 252 134 188 71 49 148 129 178 81 61 212 12 181 67 185 168 55 26 132 70 162 11 208 100 116 49 154 143 22 160 155 208 114 180 26 61 140 54 161 231 208 171 104 15 218 143 62 67 199 48 192 232 24 7 51 196 108 48 46 198 195 66 177 56 44 9 147 99 203 177 34 172 12 171 198 26 176 86 172 3 187 137 245 99 207 177 119 4 18 129 69 192 9 54 4 119 66 32 97 30 65 72 88 76 88 78 216 72 168 32 28 36 52 17 218 9 55 9 3 132 81 194 39 34 147 168 75 180 38 186 17 249 196 24 98 50 49 135 88 72 44 35 214 18 143 19 47 16 123 136 67 196 55 36 18 137 67 50 39 185 144 2 73 177 164 84 210 18 210 70 210 110 82 35 233 44 169 155 52 72 26 35 147 201 218 100 107 178 7 57 148 44 32 43 200 133 228 157 228 195 228 51 228 27 228 33 242 91 10 157 98 64 113 164 248 83 226 40 82 202 106 74 25 229 16 229 52 229 6 101 152 50 65 85 163 154 82 221 168 161 84 17 53 143 90 66 173 161 182 82 175 81 135 168 19 52 117 154 57 205 131 22 73 75 165 173 162 149 211 26 104 23 104 247 105 175 232 116 186 17 221 149 30 78 151 208 87 210 203 233 71 232 151 232 3 244 119 12 13 134 21 131 199 136 103 40 25 155 24 7 24 103 25 119 24 175 152 76 166 25 211 139 25 199 84 48 55 49 235 152 231 153 15 153 111 85 88 42 182 42 124 21 145 202 10 149 74 149 38 149 27 42 47 84 169 170 166 170 222 170 11 85 243 85 203 84 143 169 94 83 125 174 70 85 51 83 227 169 9 212 150 171 85 170 157 80 235 83 27 83 103 169 59 168 135 170 103 168 111 84 63 164 126 89 253 137 6 89 195 76 195 79 67 164 81 160 177 95 227 188 198 32 11 99 25 179 120 44 33 107 13 171 134 117 129 53 196 38 177 205 217 124 118 42 187 152 253 29 187 139 61 170 169 161 57 67 51 74 51 87 179 82 243 148 102 63 7 227 152 113 248 156 116 78 9 231 40 167 151 243 126 138 222 20 239 41 226 41 27 166 52 76 185 49 101 92 107 170 150 151 150 88 171 72 171 81 171 71 235 189 54 174 237 167 157 166 189 69 187 89 251 129 14 65 199 74 39 92 39 71 103 143 206 5 157 231 83 217 83 221 167 10 167 22 77 61 58 245 174 46 170 107 165 27 161 187 68 119 191 110 167 238 152 158 190 94 128 158 76 111 167 222 121 189 231 250 28 125 47 253 84 253 109 250 167 245 71 12 88 6 179 12 36 6 219 12 206 24 60 197 53 113 111 60 29 47 199 219 241 81 67 93 195 64 67 165 97 149 97 151 225 132 145 185 209 60 163 213 70 141 70 15 140 105 198 92 227 36 227 109 198 109 198 163 38 6 38 33 38 75 77 234 77 238 154 82 77 185 166 41 166 59 76 59 76 199 205 204 205 162 205 214 153 53 155 61 49 215 50 231 155 231 155 215 155 223 183 96 90 120 90 44 182 168 182 184 101 73 178 228 90 166 89 238 182 188 110 133 90 57 89 165 88 85 90 93 179 70 173 157 173 37 214 187 173 187 167 17 167 185 78 147 78 171 158 214 103 195 176 241 182 201 182 169 183 25 176 229 216 6 219 174 182 109 182 125 97 103 98 23 103 183 197 174 195 238 147 189 147 125 186 125 141 253 61 7 13 135 217 14 171 29 90 29 126 115 180 114 20 58 86 58 222 154 206 156 238 63 125 197 244 150 233 47 103 88 207 16 207 216 51 227 182 19 203 41 196 105 157 83 155 211 71 103 23 103 185 115 131 243 136 139 137 75 130 203 46 151 62 46 155 27 198 221 200 189 228 74 116 245 113 93 225 122 210 245 157 155 179 155 194 237 168 219 175 238 54 238 105 238 135 220 159 204 52 159 41 158 89 51 115 208 195 200 67 224 81 229 209 63 11 159 149 48 107 223 172 126 79 67 79 129 103 181 231 35 47 99 47 145 87 173 215 176 183 165 119 170 247 97 239 23 62 246 62 114 159 227 62 227 60 55 222 50 222 89 95 204 55 192 183 200 183 203 79 195 111 158 95 133 223 67 127 35 255 100 255 122 255 209 0 167 128 37 1 103 3 137 129 65 129 91 2 251 248 122 124 33 191 142 63 58 219 101 246 178 217 237 65 140 160 185 65 21 65 143 130 173 130 229 193 173 33 104 200 236 144 173 33 247 231 152 206 145 206 105 14 133 80 126 232 214 208 7 97 230 97 139 195 126 12 39 133 135 133 87 134 63 142 112 136 88 26 209 49 151 53 119 209 220 67 115 223 68 250 68 150 68 222 155 103 49 79 57 175 45 74 53 42 62 170 46 106 60 218 55 186 52 186 63 198 46 102 89 204 213 88 157 88 73 108 75 28 57 46 42 174 54 110 108 190 223 252 237 243 135 226 157 226 11 227 123 23 152 47 200 93 112 121 161 206 194 244 133 167 22 169 46 18 44 58 150 64 76 136 78 56 148 240 65 16 42 168 22 140 37 242 19 119 37 142 10 121 194 29 194 103 34 47 209 54 209 136 216 67 92 42 30 78 242 72 42 77 122 146 236 145 188 53 121 36 197 51 165 44 229 185 132 39 169 144 188 76 13 76 221 155 58 158 22 154 118 32 109 50 61 58 189 49 131 146 145 144 113 66 170 33 77 147 182 103 234 103 230 102 118 203 172 101 133 178 254 197 110 139 183 47 30 149 7 201 107 179 144 172 5 89 45 10 182 66 166 232 84 90 40 215 42 7 178 103 101 87 102 191 205 137 202 57 150 171 158 43 205 237 204 179 202 219 144 55 156 239 159 255 237 18 194 18 225 146 182 165 134 75 87 45 29 88 230 189 172 106 57 178 60 113 121 219 10 227 21 5 43 134 86 6 172 60 184 138 182 42 109 213 79 171 237 87 151 174 126 189 38 122 77 107 129 94 193 202 130 193 181 1 107 235 11 85 10 229 133 125 235 220 215 237 93 79 88 47 89 223 181 97 250 134 157 27 62 21 137 138 174 20 219 23 151 21 127 216 40 220 120 229 27 135 111 202 191 153 220 148 180 169 171 196 185 100 207 102 210 102 233 230 222 45 158 91 14 150 170 151 230 151 14 110 13 217 218 180 13 223 86 180 237 245 246 69 219 47 151 205 40 219 187 131 182 67 185 163 191 60 184 188 101 167 201 206 205 59 63 84 164 84 244 84 250 84 54 238 210 221 181 97 215 248 110 209 238 27 123 188 246 52 236 213 219 91 188 247 253 62 201 190 219 85 1 85 77 213 102 213 101 251 73 251 179 247 63 174 137 170 233 248 150 251 109 93 173 78 109 113 237 199 3 210 3 253 7 35 14 182 215 185 212 213 29 210 61 84 82 143 214 43 235 71 14 199 31 190 254 157 239 119 45 13 54 13 85 141 156 198 226 35 112 68 121 228 233 247 9 223 247 30 13 58 218 118 140 123 172 225 7 211 31 118 29 103 29 47 106 66 154 242 154 70 155 83 154 251 91 98 91 186 79 204 62 209 214 234 222 122 252 71 219 31 15 156 52 60 89 121 74 243 84 201 105 218 233 130 211 147 103 242 207 140 157 149 157 125 126 46 249 220 96 219 162 182 123 231 99 206 223 106 15 111 239 186 16 116 225 210 69 255 139 231 59 188 59 206 92 242 184 116 242 178 219 229 19 87 184 87 154 175 58 95 109 234 116 234 60 254 147 211 79 199 187 156 187 154 174 185 92 107 185 238 122 189 181 123 102 247 233 27 158 55 206 221 244 189 121 241 22 255 214 213 158 57 61 221 189 243 122 111 247 197 247 245 223 22 221 126 114 39 253 206 203 187 217 119 39 238 173 188 79 188 95 244 64 237 65 217 67 221 135 213 63 91 254 220 216 239 220 127 106 192 119 160 243 209 220 71 247 6 133 131 207 254 145 245 143 15 67 5 143 153 143 203 134 13 134 235 158 56 62 57 57 226 63 114 253 233 252 167 67 207 100 207 38 158 23 254 162 254 203 174 23 22 47 126 248 213 235 215 206 209 152 209 161 151 242 151 147 191 109 124 165 253 234 192 235 25 175 219 198 194 198 30 190 201 120 51 49 94 244 86 251 237 193 119 220 119 29 239 163 223 15 79 228 124 32 127 40 255 104 249 177 245 83 208 167 251 147 25 147 147 255 4 3 152 243 252 99 51 45 219 0 0 0 4 103 65 77 65 0 0 177 142 124 251 81 147 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 233 0 0 117 48 0 0 234 96 0 0 58 152 0 0 23 111 146 95 197 70 0 0 50 31 73 68 65 84 120 218 236 189 121 188 100 231 89 223 249 125 158 247 84 221 173 119 169 187 213 90 90 139 37 91 186 182 101 217 10 222 29 25 153 16 48 16 98 27 50 16 6 226 64 32 76 146 137 227 25 150 25 12 196 254 36 36 193 118 216 62 76 88 62 25 8 1 50 153 9 196 48 152 120 73 48 198 216 131 241 66 176 45 183 44 75 214 218 234 189 239 126 111 45 231 188 207 51 127 188 239 57 117 234 46 173 110 185 91 190 45 247 209 167 84 213 117 235 158 123 234 60 251 239 217 196 221 185 114 124 245 30 122 229 22 92 97 128 43 199 21 6 184 114 124 181 30 197 197 58 209 27 191 247 31 54 175 29 136 46 172 84 93 190 239 198 207 241 93 135 63 67 89 117 137 126 97 252 22 196 232 132 146 247 157 184 141 159 126 240 101 236 42 134 4 53 228 2 206 225 64 101 202 82 213 229 29 183 127 140 215 238 127 132 50 118 46 240 90 156 174 26 218 237 241 242 63 250 126 174 234 246 232 106 188 160 235 0 48 135 94 44 184 99 231 28 63 119 215 127 33 150 19 148 150 175 163 241 197 92 113 102 129 89 68 238 68 228 107 64 126 10 145 143 212 231 153 252 135 143 111 63 6 184 114 140 24 142 117 142 117 250 167 99 14 238 81 213 203 89 124 56 27 76 102 171 168 119 152 249 44 110 179 184 43 110 249 36 128 6 40 58 72 40 254 18 248 8 23 204 114 87 24 224 162 83 55 17 113 68 212 230 121 68 109 117 152 197 153 117 124 214 204 239 112 247 89 119 159 141 238 90 70 225 79 86 246 242 193 221 215 243 245 215 29 167 216 249 28 42 157 70 15 222 132 135 9 194 193 195 16 186 132 131 215 67 16 250 191 251 110 188 119 242 102 209 112 41 232 127 133 1 214 201 238 72 250 198 222 115 156 8 49 50 172 76 135 26 103 69 171 89 220 103 221 237 14 119 102 221 125 214 113 117 119 204 29 55 103 114 98 130 107 175 217 207 68 167 203 245 7 247 211 237 22 92 123 224 0 149 76 208 223 247 247 57 125 248 56 251 111 89 34 12 28 202 10 170 18 44 66 44 33 30 131 225 49 168 12 156 219 183 189 15 112 217 17 217 125 140 192 173 215 10 73 98 147 90 182 59 196 109 214 188 154 13 161 175 127 103 255 199 248 173 39 238 96 50 148 236 217 49 201 243 158 115 51 51 211 211 92 119 112 63 253 126 159 235 246 95 69 119 98 130 235 14 94 141 153 33 230 56 142 153 99 102 152 67 21 141 83 11 39 248 183 247 175 240 3 175 123 128 171 246 61 4 171 125 88 125 18 170 21 232 63 1 110 160 37 82 204 224 195 238 11 175 48 192 211 176 189 233 45 199 12 220 98 45 93 138 249 44 38 179 158 9 140 199 68 108 51 197 35 249 23 240 238 46 194 129 59 161 187 3 61 244 66 152 156 225 173 223 113 7 127 125 233 14 174 191 230 54 86 150 206 208 91 89 100 97 97 129 254 112 136 147 36 31 156 185 185 5 78 157 61 203 112 88 114 122 126 158 114 80 114 122 126 145 50 150 204 205 47 98 166 28 91 236 243 129 15 41 191 247 163 71 216 179 111 53 125 9 139 80 236 1 175 32 148 72 87 97 77 184 36 250 255 114 98 0 111 17 217 215 17 184 166 189 227 224 168 103 9 118 79 54 184 140 62 59 172 202 89 235 47 41 131 5 168 2 30 29 58 187 208 3 119 66 119 39 225 208 11 161 179 3 61 244 2 232 206 36 130 123 4 173 50 99 9 80 65 121 130 217 171 30 224 35 31 123 152 79 28 89 165 144 53 150 23 207 80 150 21 167 231 230 168 202 138 83 243 139 4 21 84 21 85 37 168 162 33 189 86 81 102 166 166 208 16 232 76 116 57 62 63 224 141 239 126 5 255 249 135 254 146 61 87 47 67 207 97 88 129 151 32 1 221 89 17 231 5 224 26 224 196 179 152 1 124 19 77 237 224 150 84 167 25 49 70 16 107 84 116 77 96 115 155 53 243 89 51 83 115 111 62 63 57 49 201 29 183 221 76 8 29 110 187 229 86 238 239 190 137 123 94 22 233 232 26 157 195 247 64 172 64 170 68 104 47 243 115 76 234 183 247 4 12 207 66 92 133 229 79 192 224 97 88 59 2 234 192 41 254 234 190 105 126 225 147 175 230 241 51 211 236 153 118 118 79 74 67 228 29 211 83 168 10 130 162 65 16 17 64 211 123 34 136 128 106 96 247 142 2 45 10 142 158 238 243 119 127 233 133 188 231 39 63 5 147 17 12 136 233 30 72 39 105 35 92 246 33 151 61 3 108 225 104 53 54 56 73 48 248 44 238 179 16 103 177 225 29 131 193 96 118 181 215 159 21 237 171 18 241 204 20 51 211 211 60 247 150 27 49 51 94 60 123 59 147 19 29 110 187 233 70 58 69 96 246 57 55 19 45 82 85 21 177 138 148 6 37 93 30 173 132 231 92 245 36 244 30 130 222 89 136 67 24 156 193 125 8 213 92 98 4 91 64 214 30 132 254 23 161 255 24 132 2 194 12 20 211 80 76 66 113 53 76 117 249 157 159 248 34 223 243 175 95 196 99 167 38 48 17 166 186 130 170 128 43 72 77 236 244 72 196 39 49 131 11 146 25 100 207 244 36 213 94 231 248 220 128 191 243 174 23 243 27 63 244 151 48 233 48 112 176 136 236 9 137 1 224 59 129 159 216 246 12 208 36 151 92 178 94 78 82 37 86 229 247 70 4 118 178 13 182 108 131 61 230 56 56 217 97 243 136 223 124 15 111 60 216 99 112 215 107 56 211 235 240 138 187 110 167 28 246 185 251 5 183 19 171 72 85 150 68 51 162 25 86 85 84 102 152 57 79 30 63 193 252 194 2 101 85 178 176 176 196 160 44 89 92 90 161 12 147 188 119 105 137 239 127 241 39 153 222 177 10 177 192 53 164 152 219 86 97 245 126 164 127 127 122 29 2 20 153 240 97 18 194 4 232 4 104 23 188 128 110 224 55 222 250 8 175 123 219 44 243 61 167 40 96 102 162 0 245 76 120 109 36 62 105 129 204 16 202 136 57 20 14 236 155 33 154 241 240 73 248 238 119 222 197 111 254 211 79 128 9 84 5 58 109 224 67 28 134 178 157 113 0 207 182 217 205 130 185 223 17 45 206 198 202 103 169 122 119 80 174 204 82 22 179 68 212 107 21 107 233 89 111 188 23 188 36 28 78 207 114 248 30 176 138 112 248 181 96 101 122 48 228 59 117 200 252 242 78 214 134 138 198 30 79 28 125 146 133 249 5 134 101 201 220 226 2 229 160 100 97 113 137 178 44 153 95 90 64 242 127 206 136 0 130 34 69 135 42 76 243 127 124 234 101 252 207 47 255 56 147 51 125 164 119 26 150 62 143 15 31 75 140 16 2 20 83 160 29 208 169 68 112 45 210 191 67 145 94 211 129 170 64 118 9 239 121 251 99 188 241 237 55 112 102 217 40 180 96 122 34 197 236 162 50 78 120 33 105 6 70 154 161 62 174 219 191 7 100 137 71 78 10 239 252 141 59 248 145 239 254 60 172 10 4 205 130 36 223 1 252 179 109 204 0 220 95 197 234 246 193 112 72 89 86 84 209 232 87 194 251 252 77 220 221 61 192 237 47 185 19 173 12 110 188 23 143 37 225 198 175 29 17 216 44 121 189 86 97 86 129 87 216 194 195 248 218 41 168 250 232 218 105 196 214 216 219 59 197 127 123 244 54 30 61 91 97 195 101 170 149 37 68 21 149 209 13 118 70 210 230 146 17 56 64 28 68 34 82 129 210 35 134 29 252 203 15 92 203 59 94 246 78 144 85 240 9 36 76 227 234 36 74 57 72 145 24 66 66 122 45 154 95 7 32 128 5 24 118 216 125 173 243 158 127 113 138 55 253 248 1 78 45 13 184 254 234 105 186 69 72 54 124 11 194 143 189 135 128 192 225 107 246 210 31 156 228 247 62 190 31 183 89 126 244 123 62 11 125 165 179 71 169 214 216 139 95 252 96 224 162 49 128 185 253 238 96 88 190 237 223 252 243 183 177 178 178 198 139 159 255 60 134 21 148 20 244 227 91 160 187 128 250 0 42 195 205 241 133 47 97 171 39 33 246 97 245 52 94 13 96 237 36 84 67 172 119 122 20 159 75 66 223 68 156 66 140 111 223 119 148 95 89 188 155 121 159 65 186 67 108 208 131 32 136 11 46 27 239 142 180 110 188 22 138 121 197 227 143 62 201 151 78 204 179 92 77 242 240 99 111 226 55 255 246 255 147 110 172 145 136 172 128 74 38 248 185 30 5 120 128 126 193 174 235 148 183 255 189 30 111 253 217 73 96 141 195 7 118 208 237 134 196 71 178 5 225 147 106 74 26 42 51 233 109 135 175 193 31 59 197 123 62 113 144 27 247 223 202 119 188 254 1 138 9 39 174 113 40 25 87 217 182 38 224 100 85 85 220 124 221 33 22 151 150 120 226 201 99 156 157 155 163 172 156 197 94 100 109 88 242 218 233 143 179 43 204 99 75 115 24 146 252 5 113 26 206 246 124 51 234 247 241 6 180 113 119 34 70 144 200 155 175 251 115 126 250 139 175 130 206 78 188 170 168 202 126 163 78 85 147 27 145 242 156 130 102 194 19 141 199 142 159 228 201 19 39 1 97 34 4 194 84 228 137 165 171 248 238 255 248 93 252 230 247 253 58 244 5 33 100 39 53 57 114 233 161 235 158 5 84 71 26 193 3 244 149 87 221 27 249 185 34 242 214 119 41 199 116 133 155 14 237 37 132 164 77 26 98 111 32 124 182 236 249 250 139 0 183 223 116 144 7 30 61 201 207 254 225 45 220 116 112 133 151 31 124 128 206 162 81 73 80 75 108 186 253 24 64 144 15 137 8 31 253 196 167 153 238 118 248 192 31 125 8 213 116 250 162 59 73 103 199 94 30 244 171 249 199 183 60 68 39 84 136 5 98 29 1 56 227 207 77 100 96 153 49 44 169 116 143 68 113 38 180 199 91 110 250 19 222 249 224 43 145 206 14 24 14 145 106 136 136 82 73 250 172 122 246 200 37 240 248 147 39 57 118 250 12 32 20 69 129 106 64 85 152 84 71 165 228 177 249 221 188 235 15 95 207 15 127 243 127 129 225 4 196 26 120 209 150 196 201 232 33 235 158 81 168 2 244 2 175 188 7 222 209 23 222 241 139 198 19 97 129 155 15 237 67 84 17 60 251 35 73 83 133 76 124 90 206 160 224 136 11 69 16 110 185 225 106 6 143 158 226 45 255 254 197 188 243 85 61 238 153 122 144 142 49 91 185 222 119 49 25 224 226 213 3 8 71 84 149 133 197 101 58 69 160 170 34 150 35 128 126 111 149 222 226 25 134 21 252 159 143 188 0 108 128 218 26 33 246 83 24 214 60 15 112 107 63 134 120 53 192 227 16 175 250 88 28 18 203 1 113 88 178 187 152 227 135 111 250 16 115 171 206 160 152 102 24 133 97 14 249 204 35 102 198 169 185 5 254 226 254 47 114 252 212 105 138 80 208 237 118 40 138 130 162 8 20 161 64 85 216 209 49 118 78 12 249 253 35 207 227 167 255 224 27 97 162 15 157 56 146 244 54 241 133 141 196 151 214 235 74 161 84 190 225 175 7 254 230 95 11 204 45 70 30 57 62 143 163 168 22 72 8 72 16 58 34 137 9 67 72 64 81 16 10 9 4 9 25 44 18 118 78 77 240 194 231 28 98 239 84 197 143 124 252 213 204 245 118 32 197 240 206 78 40 217 150 12 32 34 30 130 242 208 227 71 17 96 88 14 25 14 135 12 202 138 170 42 89 93 89 96 176 50 199 241 213 9 126 238 129 187 19 19 208 67 170 30 30 7 120 213 199 99 31 170 62 84 3 136 131 45 158 135 88 57 196 6 145 61 197 89 190 255 134 143 179 176 38 12 138 25 202 40 152 71 122 189 62 15 62 126 148 163 199 79 129 59 157 137 137 76 244 64 200 55 93 50 82 23 130 176 119 82 216 53 81 242 251 71 238 224 253 159 122 9 76 12 161 136 217 12 141 115 249 22 204 63 98 2 75 26 225 71 255 113 193 27 190 161 195 194 106 228 196 220 18 161 19 232 132 64 55 116 40 58 29 138 34 208 41 2 19 157 130 254 160 162 55 24 114 102 126 129 211 243 11 60 124 244 56 95 58 122 140 7 31 123 140 142 148 236 238 14 249 219 255 253 91 248 248 233 155 94 246 145 211 55 177 77 77 0 168 170 173 244 214 116 109 117 149 169 201 41 150 215 214 8 146 240 0 195 25 204 159 102 98 71 197 241 225 78 126 241 129 23 241 143 158 251 81 10 47 168 162 38 195 54 166 254 215 3 68 35 159 192 137 68 7 209 200 139 119 61 196 15 30 238 243 11 95 122 25 51 197 4 39 79 29 103 105 101 137 34 4 138 78 135 144 209 57 89 7 204 52 30 121 14 213 14 236 12 152 15 121 251 7 239 101 247 84 159 87 188 240 11 80 77 0 221 22 237 115 132 160 89 116 66 54 218 161 128 78 1 157 148 191 135 9 64 248 225 127 224 60 49 23 249 203 207 13 41 138 69 166 58 10 56 171 253 62 10 44 175 245 154 8 96 244 92 59 137 88 80 61 2 28 17 170 7 74 11 15 191 237 254 215 188 55 186 242 225 109 201 0 34 168 232 145 39 79 156 125 193 234 234 26 177 170 24 14 135 104 86 163 102 201 119 25 156 61 78 119 231 144 7 6 187 248 173 135 158 207 255 120 211 39 41 188 67 21 195 57 153 192 215 189 231 56 101 101 116 212 185 123 223 131 188 97 1 254 245 125 135 153 2 118 20 93 66 72 196 13 26 18 30 32 142 74 155 17 188 1 106 16 65 5 14 238 46 48 6 252 147 223 123 61 63 131 240 170 187 30 133 56 145 224 223 0 20 146 30 29 73 196 238 36 48 200 142 207 67 49 129 61 121 22 66 7 123 236 24 90 4 138 163 143 243 11 187 11 222 188 235 91 57 186 4 83 161 66 241 154 208 86 132 226 8 194 17 129 251 129 35 173 135 209 132 179 16 112 84 35 93 141 184 111 211 40 32 123 224 127 188 176 188 242 130 213 181 85 138 78 193 112 48 64 85 179 3 151 49 122 140 254 217 19 76 239 21 62 114 226 90 202 225 93 252 221 91 254 156 194 11 134 81 235 132 78 14 45 98 29 30 108 202 24 142 83 69 163 88 91 228 111 238 253 32 71 14 188 150 247 157 188 149 78 33 236 208 146 160 154 205 180 160 18 242 115 150 176 76 252 26 159 87 148 142 42 55 236 43 128 1 239 248 192 189 252 238 141 191 195 206 131 3 56 211 197 117 72 60 91 130 246 136 167 251 160 66 60 182 52 242 3 107 79 94 82 8 105 34 70 103 250 72 209 169 142 252 250 75 222 127 255 107 63 250 157 71 166 196 142 168 248 145 26 219 21 145 243 214 174 34 57 9 38 190 77 25 64 4 21 153 95 94 93 101 173 63 160 170 42 250 131 33 33 132 68 66 119 28 203 153 86 99 241 196 227 76 94 117 136 63 58 121 136 155 186 135 249 218 131 95 164 227 5 101 212 86 106 215 70 4 183 22 64 211 188 23 137 229 10 110 21 221 48 201 143 189 224 35 20 65 248 195 227 183 16 84 216 169 49 19 189 173 238 71 192 145 106 178 215 101 140 152 56 195 193 16 17 97 166 107 172 12 132 111 253 165 111 231 183 239 122 47 135 166 150 25 218 16 243 86 192 142 152 76 117 199 37 88 106 9 22 107 220 1 135 129 21 84 117 68 33 206 211 133 116 47 69 66 248 162 250 0 34 242 199 170 250 147 199 78 157 166 27 10 134 101 73 136 49 5 64 230 89 197 55 247 129 149 83 79 208 221 123 29 191 248 208 157 204 248 18 47 189 250 81 58 222 161 180 140 17 32 35 70 192 71 119 212 1 47 241 114 144 144 62 9 148 166 116 42 225 71 94 244 199 124 110 233 106 142 174 238 68 5 246 116 133 136 227 162 84 149 33 68 202 152 212 240 176 170 154 219 42 99 119 88 152 236 168 173 74 231 200 247 220 247 77 71 254 235 107 126 251 254 80 133 35 110 146 137 44 182 129 44 178 89 234 43 125 135 132 121 8 219 177 5 231 226 38 131 132 57 85 101 105 165 7 195 30 195 225 144 32 163 47 174 100 48 5 111 114 69 213 252 49 186 59 14 240 246 251 95 198 219 110 43 121 213 254 71 232 196 14 101 190 97 158 49 0 114 106 56 49 130 129 85 99 225 88 68 32 66 167 55 201 111 222 253 7 188 249 211 223 204 209 181 29 68 171 8 98 155 73 146 169 72 109 115 179 13 174 9 140 5 140 110 136 20 98 16 12 137 35 112 233 105 192 228 248 37 147 225 109 196 0 2 159 85 21 206 44 46 179 167 235 12 6 101 114 198 36 160 146 83 220 98 25 163 207 160 200 176 196 23 79 209 157 222 199 59 31 120 49 191 54 125 156 171 38 150 8 177 160 170 29 30 107 151 110 181 213 200 248 13 53 19 170 178 160 8 37 255 238 238 255 215 222 240 103 223 126 164 116 61 34 200 253 35 245 204 17 57 79 52 77 178 3 150 144 188 245 105 236 243 79 128 71 132 202 149 232 66 225 201 1 125 118 106 128 156 121 27 148 21 203 131 126 74 209 162 40 213 88 172 60 74 214 36 66 138 42 214 91 98 16 166 249 142 63 255 6 126 235 37 239 229 224 228 18 102 157 36 217 190 222 8 10 217 46 140 73 176 35 71 162 115 164 240 96 24 148 150 35 11 121 122 178 39 226 168 120 182 219 206 133 243 64 82 255 187 38 86 248 222 195 159 227 61 199 111 107 179 239 179 80 3 8 136 203 103 151 135 229 157 213 218 10 224 12 202 33 157 137 41 16 161 232 78 128 59 154 159 165 232 54 54 93 1 172 98 205 10 190 237 147 223 202 135 94 249 127 199 160 118 196 76 142 184 200 250 48 201 207 157 152 74 76 83 185 130 100 8 246 66 197 87 82 244 119 114 48 195 3 115 215 241 188 157 115 79 175 140 205 19 179 87 46 88 54 107 242 108 53 1 153 9 230 99 116 122 221 25 166 246 239 102 194 219 85 64 99 101 95 107 184 141 73 112 16 63 50 161 246 80 16 167 163 241 105 215 28 57 16 58 3 254 198 53 15 242 158 19 207 197 83 214 225 233 88 111 84 60 197 238 79 75 3 180 139 158 106 29 242 101 215 83 109 111 6 0 254 196 44 222 19 225 113 170 234 179 192 231 129 47 180 164 119 101 171 111 147 222 50 150 203 73 190 176 188 151 219 119 158 77 85 68 23 120 227 60 119 110 164 250 64 199 213 107 40 233 194 157 55 95 15 66 93 168 68 88 102 158 244 220 20 175 94 48 241 19 3 217 118 6 130 242 93 187 207 204 255 52 90 92 178 84 19 127 39 240 18 90 88 90 126 173 227 89 21 23 71 100 104 38 195 82 37 150 3 161 234 67 12 155 73 142 108 245 79 17 71 204 64 6 120 53 36 86 37 67 47 209 11 137 191 115 106 122 232 48 40 157 178 52 136 49 85 183 109 121 14 223 28 30 247 8 97 136 122 137 91 69 148 152 190 233 5 18 63 186 20 67 47 118 15 172 120 93 214 152 219 147 1 220 253 69 101 85 189 230 246 91 111 166 44 43 204 18 239 218 122 170 213 129 183 89 163 182 205 97 96 129 175 159 57 203 243 159 179 11 171 174 2 15 227 191 55 86 251 95 255 36 157 61 129 112 78 208 146 99 189 93 124 56 126 45 183 92 87 210 81 107 2 6 105 209 202 25 225 251 210 56 139 233 131 149 43 171 67 229 53 157 163 60 255 90 136 229 181 224 138 212 18 232 182 201 53 141 21 172 19 196 209 162 226 232 96 55 239 91 121 21 215 94 149 174 101 12 70 240 198 125 222 200 78 185 204 206 92 88 232 43 119 79 124 129 127 246 146 15 78 195 187 183 167 6 200 109 81 113 88 150 252 216 15 124 15 171 107 171 88 180 172 242 114 34 199 51 51 88 110 161 74 241 27 134 34 19 51 148 174 188 240 170 71 33 190 17 53 165 211 128 65 57 254 23 105 1 67 62 130 70 205 17 73 64 15 106 60 113 234 22 126 244 37 96 107 243 96 21 226 9 123 192 106 12 194 215 241 162 160 14 131 114 200 74 175 100 185 154 96 177 87 242 3 175 89 0 249 22 66 84 66 141 2 54 104 160 39 92 35 20 185 84 76 71 207 170 41 143 20 148 15 252 254 115 249 150 87 42 213 210 241 140 95 108 108 100 89 63 169 197 112 60 26 104 135 98 215 65 206 204 47 243 246 169 95 134 193 212 112 155 155 0 220 204 153 155 159 231 244 217 179 28 63 113 170 41 122 112 183 86 35 71 234 162 49 12 143 78 177 99 31 3 235 240 205 215 60 0 107 203 88 165 163 96 125 211 4 145 141 65 196 226 134 74 132 80 242 209 147 183 112 255 114 133 247 23 168 6 171 25 121 76 232 162 203 136 103 82 237 126 202 202 205 47 44 114 118 126 129 181 181 1 211 251 111 96 165 218 193 191 252 186 255 10 103 78 101 51 84 27 44 171 81 173 68 236 186 88 84 195 168 134 48 20 41 97 52 13 255 215 251 111 225 227 159 83 188 127 150 184 182 152 11 66 124 83 187 51 82 36 142 187 17 163 49 125 213 97 86 170 62 255 234 155 62 9 95 116 170 170 240 98 91 51 64 190 81 43 43 171 204 207 45 240 133 135 190 148 210 177 158 172 188 59 169 38 48 171 208 24 141 98 114 7 113 178 228 206 157 199 216 59 115 31 182 16 136 53 110 236 45 137 111 24 32 249 227 201 120 24 226 73 221 162 37 15 45 95 197 123 30 57 76 215 191 68 111 238 88 150 214 84 89 91 75 122 16 232 151 37 79 28 63 201 233 185 5 134 195 50 51 168 51 181 235 106 108 101 154 111 186 245 99 220 48 243 126 56 59 145 168 173 62 146 126 181 44 229 93 8 157 92 53 220 73 204 16 58 41 83 24 132 207 255 197 1 126 254 63 87 236 232 62 196 210 201 71 9 65 207 47 1 148 19 103 19 59 174 34 46 159 225 187 94 119 138 195 55 61 72 60 82 16 131 178 189 25 64 64 68 89 93 93 101 173 215 163 44 75 138 16 70 82 95 171 125 119 204 34 174 5 97 98 39 83 172 241 134 67 247 65 100 157 217 240 118 44 69 83 189 233 217 179 118 71 5 130 148 224 206 175 62 252 98 10 25 178 54 127 42 105 7 5 245 244 108 209 57 57 55 199 169 179 103 233 173 13 154 182 173 233 137 201 20 37 20 19 76 237 189 158 29 157 30 63 246 117 127 10 62 3 18 82 177 169 56 162 158 236 183 10 72 7 138 110 150 250 137 166 151 159 162 3 147 2 82 240 150 95 191 147 93 211 78 127 238 52 147 157 46 162 210 128 101 231 50 163 238 142 119 59 76 236 58 200 204 100 197 255 244 183 230 224 244 36 85 84 60 108 115 36 16 64 69 232 245 251 12 203 18 119 136 102 77 12 221 54 1 38 66 49 179 143 133 190 243 191 222 250 105 176 1 149 41 86 235 254 177 60 128 55 206 222 72 19 164 243 22 26 129 1 191 250 208 203 24 68 67 251 243 136 85 169 4 75 132 197 229 21 206 44 46 176 176 184 220 244 235 205 236 152 174 19 88 224 78 116 165 179 247 58 22 7 29 254 237 55 191 39 197 41 177 147 163 208 140 84 213 21 195 132 145 221 215 110 238 21 200 26 160 80 152 82 126 252 87 159 143 17 208 193 25 186 10 58 213 61 191 112 214 157 232 66 103 215 33 22 87 133 95 251 161 227 208 233 64 156 72 214 110 219 3 65 153 195 251 131 33 101 85 101 142 78 209 94 29 83 91 206 234 121 103 134 165 33 124 211 129 207 115 237 196 113 172 236 180 136 191 94 242 125 131 63 32 64 144 8 12 249 211 19 55 243 201 51 87 51 45 171 248 96 141 202 156 249 197 5 230 151 150 137 149 33 42 204 76 207 140 169 96 201 204 101 14 97 114 39 107 113 146 127 242 210 63 227 240 161 99 80 118 211 159 84 105 5 171 153 1 53 151 132 75 145 95 231 94 129 78 128 105 225 125 31 190 129 15 223 183 143 93 19 125 188 63 160 51 49 217 148 131 63 165 234 119 39 116 119 176 54 12 188 245 219 230 185 254 185 6 253 46 208 107 117 200 110 223 108 96 131 249 15 6 3 202 178 108 28 57 241 26 4 17 112 163 146 130 161 119 184 74 231 121 221 129 207 64 217 37 198 225 57 136 239 35 52 49 107 3 21 208 80 50 28 118 248 237 199 158 71 87 6 12 86 230 89 92 94 98 105 181 135 170 208 233 116 233 118 115 202 87 54 205 217 18 165 160 23 118 113 211 142 57 254 135 151 127 28 6 19 224 97 100 134 218 78 155 180 251 5 194 200 235 47 20 186 2 43 147 252 204 31 28 102 102 178 164 168 122 232 212 228 121 23 126 224 78 164 96 205 167 185 249 218 138 191 245 93 125 88 236 166 200 69 139 75 130 5 94 18 39 80 68 232 13 250 12 135 85 51 28 65 156 38 252 138 46 244 233 178 184 6 63 241 130 143 193 48 82 85 229 186 208 168 141 192 177 161 62 80 113 66 168 192 7 188 251 11 95 199 226 234 128 114 245 20 213 160 159 74 190 39 179 212 181 107 237 54 189 231 66 143 25 150 122 29 254 211 27 223 7 131 110 242 250 115 101 207 216 77 175 29 202 38 228 203 204 160 185 76 108 202 120 203 47 61 143 202 96 87 24 210 233 6 68 206 255 22 187 57 61 155 98 121 209 249 249 119 13 160 223 73 161 111 112 188 233 87 216 222 233 224 17 3 244 7 148 85 9 158 42 226 61 219 90 71 232 69 101 57 58 111 190 254 207 217 219 157 35 14 11 162 199 45 164 127 163 38 16 207 118 223 7 252 167 7 111 231 143 30 85 38 57 195 142 194 233 76 77 110 45 237 155 92 241 114 25 88 29 116 248 167 175 254 48 123 246 204 67 213 109 210 213 212 245 123 109 245 223 212 52 232 40 222 47 20 38 157 255 248 222 155 249 244 195 59 217 59 83 49 221 9 136 92 152 199 182 220 135 149 85 227 29 255 192 216 125 3 176 212 1 170 92 147 168 151 135 6 168 29 171 126 127 200 176 172 114 21 80 202 198 185 11 253 202 89 28 56 183 238 56 193 107 15 124 30 31 118 136 209 214 193 115 235 156 62 179 186 12 43 123 253 134 120 159 83 11 194 187 238 187 153 189 221 62 123 167 2 138 174 47 237 57 167 175 178 86 194 74 25 184 235 192 113 94 127 231 103 160 156 72 83 218 196 19 141 101 179 47 23 54 118 10 117 157 197 211 51 252 204 123 111 98 239 142 33 123 166 20 17 189 160 123 182 54 116 86 250 198 75 102 133 111 120 125 1 67 210 236 130 218 252 200 165 25 233 120 9 76 64 114 2 123 253 33 85 140 169 189 47 75 126 52 103 110 173 34 58 252 240 205 31 134 161 101 213 175 45 80 167 237 233 183 176 210 92 20 162 68 10 91 1 93 225 135 62 247 109 236 8 21 87 207 116 233 6 185 32 19 21 163 179 56 172 8 226 252 220 235 62 0 195 46 152 98 77 43 183 111 146 117 88 223 16 2 116 60 169 254 159 157 101 102 178 226 234 157 93 58 133 92 200 221 34 70 99 177 215 39 40 252 252 79 100 66 155 166 150 51 205 80 183 132 203 132 1 36 149 126 245 6 253 17 146 151 61 233 211 75 3 230 7 5 255 251 109 31 99 82 151 137 101 129 123 72 157 193 53 177 173 229 3 52 41 100 203 190 88 73 240 33 20 67 254 205 131 175 228 145 213 221 92 51 3 59 38 39 210 76 159 243 36 190 136 114 122 165 199 202 176 203 59 239 249 16 97 170 15 214 201 209 10 121 10 8 99 121 134 81 57 152 140 58 198 58 192 100 197 175 252 206 11 120 232 228 52 135 118 11 59 166 186 27 198 216 156 243 90 16 78 47 173 178 178 38 188 251 127 83 100 74 160 202 164 41 128 104 9 99 208 203 104 70 144 136 208 47 35 26 106 111 25 230 86 7 156 89 141 188 116 223 81 94 121 245 3 216 112 130 202 35 78 53 38 225 136 51 170 30 109 57 128 30 115 114 37 242 165 165 3 252 251 39 94 192 190 238 144 253 123 118 19 196 57 175 169 231 2 130 50 183 58 96 177 15 95 123 248 81 94 253 220 7 82 200 39 146 64 150 6 241 203 177 127 168 95 183 31 57 175 57 17 57 250 248 126 126 237 195 55 113 213 76 201 254 125 187 9 194 121 94 75 34 254 220 74 159 197 94 228 222 87 23 188 242 21 97 4 51 119 146 233 36 42 16 17 213 167 14 35 191 146 12 16 115 0 239 25 199 94 30 244 9 185 83 183 114 231 241 83 203 32 202 79 62 231 3 208 23 170 104 41 36 180 186 190 175 238 123 173 161 223 241 184 89 113 10 137 16 225 127 249 236 95 101 74 250 236 223 61 69 140 21 21 182 217 128 176 77 179 143 49 70 78 204 47 19 8 252 212 203 63 0 75 33 135 130 158 106 245 52 65 214 72 110 6 145 124 109 89 51 136 68 40 42 232 24 12 58 252 163 223 184 139 233 238 128 253 123 167 137 22 137 126 254 217 254 104 112 98 126 133 128 241 207 191 111 14 230 20 6 163 175 159 148 95 66 56 153 91 68 52 39 187 182 35 3 244 251 253 70 88 205 140 35 95 122 60 49 133 131 161 244 172 195 175 220 245 65 232 157 162 138 157 52 142 175 13 200 200 185 125 10 21 7 173 248 241 35 247 112 116 201 153 9 43 60 126 108 113 211 209 112 231 146 58 243 124 45 47 250 67 56 186 134 87 93 42 139 57 191 176 85 138 127 148 118 22 82 79 163 134 146 159 188 255 30 158 60 235 204 116 214 120 242 228 202 6 213 47 79 161 141 204 149 94 236 240 203 47 124 63 252 187 39 96 32 196 40 99 127 90 144 164 254 67 234 37 148 184 77 11 66 94 251 234 87 102 77 238 84 85 228 133 207 189 153 97 25 83 97 168 11 7 186 171 124 205 161 231 16 203 130 202 164 153 15 224 77 235 183 143 165 69 219 163 88 157 20 247 119 181 100 199 174 187 121 115 40 233 136 129 196 236 30 120 203 90 248 134 124 58 173 215 17 229 64 119 149 231 29 218 195 153 178 96 232 33 71 152 163 207 154 121 163 124 204 106 66 142 38 141 168 24 93 173 168 58 119 243 134 162 164 144 122 112 180 141 69 178 222 138 108 188 157 46 245 186 254 65 57 48 177 202 161 107 58 60 82 181 155 98 214 115 144 52 29 78 136 240 220 237 200 0 247 188 242 229 249 134 25 195 178 228 222 87 252 149 13 159 49 160 204 230 62 122 173 45 70 179 119 61 53 251 96 146 103 75 101 226 187 37 220 95 37 242 189 119 69 58 24 146 83 203 41 197 44 41 173 92 39 82 220 219 115 3 83 246 81 210 192 72 115 167 50 225 81 11 148 70 206 58 182 102 28 181 115 21 158 122 246 173 197 100 185 189 133 194 35 111 122 142 17 136 104 203 7 241 236 140 186 39 95 198 26 103 118 196 16 117 130 211 16 74 23 238 179 111 36 186 142 252 223 205 148 80 134 137 97 155 50 64 127 48 72 68 142 70 127 56 94 179 80 215 230 153 229 27 101 158 166 128 120 26 165 58 198 1 49 219 98 243 241 182 176 220 97 28 221 168 50 33 234 154 130 134 81 182 98 128 156 131 72 127 58 63 103 108 39 180 235 19 214 49 128 102 113 212 246 185 106 130 186 81 9 84 110 235 52 151 143 49 64 29 225 182 43 74 189 165 21 220 83 70 34 1 189 178 37 78 224 110 84 49 110 227 25 65 185 180 203 204 136 54 114 84 44 102 199 168 174 1 240 246 200 109 27 31 191 237 169 133 140 77 24 192 243 235 154 128 155 17 251 124 24 192 71 163 190 51 19 174 107 58 105 63 183 41 181 254 185 117 29 99 12 96 150 208 193 220 202 232 235 211 24 50 110 110 68 156 176 5 198 39 237 20 49 142 120 133 176 221 139 66 183 82 97 207 210 195 91 161 47 128 132 176 177 243 35 227 70 86 247 63 180 162 27 55 75 33 222 57 234 3 234 76 106 121 9 174 255 202 184 248 47 147 248 97 108 140 12 27 90 184 219 124 160 25 97 116 3 215 156 27 9 169 220 108 51 22 176 118 78 163 14 179 175 48 192 87 254 104 74 203 198 21 117 203 138 143 42 127 154 38 231 22 245 92 104 6 103 200 186 115 182 68 127 140 121 140 75 211 82 118 133 1 46 60 211 209 74 47 75 19 21 36 130 235 70 211 208 42 30 174 177 8 173 25 226 92 200 94 187 112 69 36 225 165 126 153 212 3 60 251 9 63 2 235 84 70 122 96 83 16 40 212 200 166 54 77 9 231 196 156 54 57 135 136 32 246 85 190 47 224 43 74 124 73 86 90 90 25 138 176 137 4 203 6 252 38 53 162 187 142 218 219 44 13 141 107 70 71 120 182 254 114 46 7 211 61 23 148 94 97 128 103 152 240 181 236 235 24 56 167 34 91 74 188 52 3 49 114 22 49 144 10 67 178 18 208 148 96 24 57 3 231 115 29 65 177 202 175 248 0 207 168 135 239 158 7 92 53 6 96 172 125 204 25 149 64 182 195 64 199 210 84 114 105 135 131 146 85 6 35 92 35 167 151 45 51 212 86 38 192 220 9 162 4 81 182 245 176 232 103 93 120 167 97 60 142 31 13 241 203 222 190 52 195 100 219 230 57 144 234 9 19 125 53 43 253 58 62 200 106 32 140 230 93 233 58 6 218 192 132 34 20 170 152 132 75 18 7 92 97 128 13 106 127 125 120 71 211 208 209 230 136 132 0 39 56 216 98 3 254 17 73 141 67 49 23 178 212 18 46 42 136 107 158 76 86 159 119 115 175 159 118 4 1 132 66 81 179 203 102 62 192 101 25 211 147 157 51 52 229 8 92 149 170 44 65 32 150 62 74 109 215 200 93 51 127 48 143 188 177 228 218 57 169 225 69 36 141 163 237 180 164 59 213 25 142 0 163 49 88 183 110 250 208 4 25 214 97 98 218 127 16 8 106 151 228 251 23 95 141 196 150 218 255 202 13 163 149 69 134 149 97 177 164 170 34 101 110 77 11 45 66 138 8 65 210 124 225 54 241 155 49 180 238 120 126 173 249 209 240 86 77 72 36 73 181 202 186 113 71 235 142 48 142 248 23 65 136 149 108 255 178 240 237 235 197 103 34 228 27 184 214 31 48 40 75 6 101 73 127 48 196 221 41 66 64 17 36 164 65 146 97 108 172 172 102 102 16 92 61 141 159 173 165 191 102 170 60 229 123 68 248 132 254 212 68 23 29 129 8 178 14 228 121 170 163 30 110 237 92 1 130 46 136 224 169 162 60 178 218 31 210 235 247 233 13 203 166 19 184 153 254 142 80 20 33 207 48 204 19 196 215 111 252 106 13 149 214 214 164 209 90 234 199 63 95 19 62 51 16 25 3 146 241 238 36 23 105 28 192 122 211 201 250 124 128 181 24 64 195 101 83 22 254 21 34 186 140 38 129 245 250 67 150 215 122 172 246 251 244 250 131 214 132 112 8 235 110 100 200 68 117 145 180 236 241 28 196 31 83 239 89 234 195 134 85 48 163 77 97 105 190 160 142 19 63 95 71 91 240 183 74 241 106 118 35 53 107 165 43 12 192 168 241 100 60 121 34 44 174 172 176 184 186 198 242 106 47 165 88 51 17 234 89 197 205 173 150 81 168 87 75 52 235 166 135 159 23 241 219 51 136 197 145 60 140 90 178 251 158 206 213 218 31 216 92 174 39 96 201 201 59 6 115 15 234 38 72 159 89 154 178 168 132 100 66 190 154 125 128 186 235 24 17 20 33 90 100 97 121 149 133 229 21 150 86 86 91 163 224 25 83 151 91 217 216 113 98 122 218 224 145 215 185 232 58 226 35 66 208 12 5 103 103 176 25 54 157 165 94 235 25 2 235 8 175 45 162 183 53 193 72 115 109 173 5 84 147 78 11 5 20 101 120 90 147 206 46 107 6 104 102 247 232 40 140 154 91 90 102 97 113 149 133 149 21 204 50 80 146 231 0 172 151 242 167 66 249 196 37 135 102 218 48 67 144 45 204 64 139 248 201 243 207 255 206 91 64 93 146 115 184 129 240 174 105 103 80 123 73 212 22 78 96 251 181 251 104 188 101 61 234 254 171 195 4 200 72 66 68 21 81 232 15 74 142 157 62 203 194 210 50 195 170 106 36 180 168 37 93 206 191 80 202 73 231 85 4 215 113 181 142 251 136 88 58 174 246 183 36 126 24 57 135 35 237 208 34 124 107 95 112 155 248 210 26 91 54 42 8 241 49 102 168 219 81 131 234 166 38 226 89 199 0 205 2 7 77 234 239 196 217 57 78 157 157 103 105 117 45 169 96 205 210 126 1 33 212 38 226 159 23 73 172 179 251 181 183 45 163 237 34 109 230 216 64 124 209 241 21 176 217 137 20 198 177 3 29 83 251 117 4 208 242 99 206 101 166 90 166 64 234 48 214 159 133 12 208 118 168 170 104 28 61 113 146 147 103 230 24 150 49 13 121 40 194 70 201 121 218 24 191 54 56 126 189 60 194 219 136 94 158 113 212 16 172 229 244 141 17 95 218 251 127 53 183 63 142 126 71 117 221 138 216 22 209 215 127 151 115 125 39 51 107 252 155 103 157 6 16 17 66 72 55 191 63 24 114 252 244 89 158 56 113 50 205 68 80 205 182 253 194 84 252 57 1 149 22 81 93 82 150 45 205 7 108 169 254 102 135 144 228 60 124 214 4 42 45 155 191 9 241 179 47 160 99 171 108 101 12 53 92 175 9 54 99 128 118 129 89 253 142 170 228 240 245 226 171 128 226 43 70 120 77 142 82 175 95 242 208 99 71 57 113 230 108 218 240 37 74 81 140 75 202 197 56 106 59 59 138 38 180 201 221 111 166 250 133 148 15 104 51 141 182 108 254 122 226 107 208 117 161 225 230 161 229 133 104 1 55 71 67 13 63 63 11 52 64 131 167 35 148 102 60 252 196 49 30 61 118 2 204 233 116 138 13 55 231 162 30 89 154 19 46 239 20 117 168 86 231 253 133 177 173 98 227 17 65 10 227 84 183 38 254 152 202 111 161 134 91 17 127 3 50 200 120 7 184 57 137 217 224 242 55 1 82 123 222 226 104 8 124 233 241 163 60 248 200 19 169 216 65 21 41 194 165 35 124 203 243 223 76 250 131 214 175 91 210 63 102 18 192 101 125 156 47 141 205 111 219 123 85 109 42 126 55 152 147 117 143 102 0 217 22 206 160 182 122 28 37 36 191 195 47 71 32 72 69 26 85 58 183 176 192 167 239 251 34 195 50 109 19 43 218 118 247 82 30 181 148 103 212 173 168 29 187 77 164 63 187 221 227 154 160 177 251 58 114 24 235 141 228 13 99 37 123 63 2 137 54 51 9 50 114 30 159 66 253 55 154 193 189 209 60 151 165 6 16 77 99 90 63 255 224 195 60 252 248 147 121 101 106 49 134 139 95 114 38 204 40 30 45 172 255 41 165 191 201 39 109 132 131 107 219 174 58 190 146 78 207 65 252 145 137 24 15 29 159 42 10 112 31 207 39 92 22 12 208 38 235 210 242 10 31 253 212 103 112 160 219 41 154 69 146 242 12 237 77 89 239 252 73 43 198 110 86 206 159 67 250 101 157 234 79 255 212 49 166 24 67 13 219 53 1 45 51 178 153 25 56 159 80 176 46 11 19 121 218 251 74 158 89 6 16 25 125 153 83 103 231 249 255 254 226 179 76 116 58 20 225 25 82 247 79 225 252 213 56 189 55 195 163 91 42 25 198 18 55 109 188 128 214 206 225 70 147 48 242 246 219 14 223 102 196 95 191 191 120 99 72 184 233 165 143 227 17 219 93 3 212 60 170 42 204 205 47 176 184 184 68 167 8 105 74 118 173 134 159 225 67 91 141 151 186 133 243 215 216 227 182 109 150 186 122 103 29 83 140 1 67 227 192 209 70 135 111 115 226 183 127 94 155 31 217 132 11 198 118 26 8 151 139 19 40 13 43 36 4 79 159 49 91 191 153 250 231 60 212 255 88 157 94 67 24 70 217 64 70 19 189 220 83 137 214 185 212 255 185 136 95 195 201 231 194 4 26 226 203 104 114 202 165 186 131 197 165 186 237 33 20 104 8 124 69 143 150 247 223 178 79 99 234 191 93 223 63 22 134 181 250 192 188 78 223 58 104 144 134 24 222 242 250 101 157 246 208 45 153 99 163 63 176 21 102 50 254 204 229 194 0 249 196 33 36 233 250 10 79 8 168 189 127 111 205 223 24 55 11 210 140 140 223 160 254 199 236 244 8 27 216 12 210 221 144 62 222 84 245 143 107 133 167 241 77 46 190 137 188 84 202 55 168 18 130 172 7 182 183 133 253 31 35 218 232 195 227 98 214 86 255 9 145 207 78 25 227 53 133 27 16 62 54 132 122 181 218 127 250 196 191 132 247 232 18 105 94 180 8 160 151 6 189 58 95 67 84 151 98 251 186 47 44 235 194 22 161 101 10 90 222 255 6 245 175 163 159 108 78 252 244 215 54 106 7 154 130 211 237 68 252 75 197 0 1 160 163 74 161 218 154 207 243 149 51 5 9 179 111 141 143 203 18 236 173 33 12 42 235 166 56 140 21 106 212 14 97 203 62 175 171 228 145 166 137 99 163 153 24 245 24 60 125 226 143 202 200 46 174 45 184 20 62 192 17 17 24 84 21 123 119 239 34 168 18 99 4 13 207 232 214 236 218 163 183 26 179 215 0 185 88 180 105 204 14 1 203 67 169 106 180 206 60 239 232 244 81 211 230 136 137 91 140 227 35 207 172 30 76 165 53 92 92 151 156 213 33 231 69 64 242 162 197 250 239 21 219 155 1 68 126 71 68 255 195 209 19 167 185 245 198 235 185 243 142 91 249 204 145 7 25 230 54 43 121 6 25 32 136 96 146 42 106 67 48 84 67 26 91 175 14 42 4 79 117 124 230 121 108 157 6 36 8 234 17 15 185 78 192 83 238 192 37 45 159 52 203 77 30 150 22 83 147 145 186 60 250 51 165 148 179 239 225 238 132 204 20 95 238 241 232 19 199 106 70 250 239 219 27 9 132 50 168 188 231 75 143 29 125 195 141 215 94 195 117 7 15 112 221 193 3 44 173 174 62 227 88 128 228 33 125 201 201 207 5 160 62 94 145 43 173 205 161 94 59 133 78 107 155 232 200 198 123 182 239 245 200 23 113 25 181 139 143 157 235 226 126 211 133 197 37 30 59 126 130 110 167 243 47 46 250 61 186 88 182 249 191 125 236 19 205 107 115 199 162 205 139 178 231 121 183 220 200 245 215 28 108 86 199 93 57 206 255 88 93 235 241 240 19 79 242 232 209 227 116 58 197 67 65 245 54 17 225 235 94 245 210 237 141 3 8 66 8 186 215 204 126 249 200 131 143 252 253 251 30 120 184 181 133 251 217 65 28 191 128 119 159 238 61 212 92 98 214 237 116 126 74 85 126 92 182 243 184 248 117 145 85 82 192 170 63 40 170 63 136 251 243 29 202 214 72 173 109 69 182 237 121 136 138 208 65 228 243 151 178 88 230 153 42 9 123 136 180 7 227 217 62 56 244 98 131 152 151 156 62 151 228 15 212 163 222 205 236 222 104 246 53 102 222 113 207 99 157 175 152 128 243 53 1 162 42 170 170 85 208 240 39 170 252 217 101 99 2 28 199 162 253 61 81 174 154 189 237 230 225 245 215 28 236 21 33 172 155 153 125 65 146 224 79 241 179 243 57 239 86 159 121 170 223 189 144 191 177 254 247 46 132 43 54 156 127 117 173 39 15 63 241 100 120 244 232 241 123 58 157 226 57 65 245 183 46 54 19 20 23 95 250 29 55 251 122 17 217 125 239 203 255 202 74 167 83 68 192 175 132 129 23 126 204 76 79 241 194 231 221 170 55 92 115 160 252 211 79 127 230 144 116 58 47 85 248 196 246 102 0 144 104 126 231 115 111 190 97 181 211 41 202 39 79 158 242 207 28 121 48 205 216 57 55 16 180 217 232 189 11 145 234 177 207 103 32 72 84 130 75 110 172 168 129 160 34 111 225 10 65 211 180 15 119 36 40 69 3 4 165 250 127 85 21 209 224 69 130 113 165 40 212 53 183 125 169 168 104 80 215 4 121 139 106 112 21 39 132 32 170 233 253 220 248 146 127 246 180 161 96 217 179 123 87 121 227 161 107 252 201 147 167 95 166 69 216 222 12 128 251 205 238 214 187 254 154 253 131 170 170 226 103 239 127 8 4 186 157 14 207 100 30 164 134 130 139 154 96 26 154 50 236 196 0 160 121 44 140 74 26 243 94 168 102 88 56 164 198 21 213 166 254 95 115 219 119 83 243 167 227 179 128 82 182 168 238 225 203 69 28 34 152 167 66 211 47 247 203 223 116 195 181 254 248 137 147 211 193 117 31 48 183 157 125 128 157 238 12 38 138 162 60 179 176 232 209 140 78 167 96 19 9 168 247 105 108 118 108 177 107 163 61 108 111 203 223 49 242 230 191 166 57 67 5 197 77 83 251 78 170 233 203 227 218 235 233 27 181 106 207 37 216 158 113 124 169 171 135 114 50 38 79 125 19 218 137 13 73 7 158 135 78 105 74 130 153 187 171 138 96 110 168 167 115 242 20 83 97 183 186 169 65 3 184 151 112 113 67 233 75 193 0 17 136 165 89 172 204 76 90 197 147 91 16 141 115 48 193 133 254 204 54 251 185 213 67 154 234 153 142 158 86 119 136 142 82 197 150 235 239 71 101 64 205 168 223 196 137 150 247 31 11 182 101 50 72 164 217 97 148 53 129 213 239 199 156 111 120 186 78 92 58 23 23 125 133 248 165 96 0 19 161 180 42 86 152 217 186 190 199 139 113 241 231 227 149 167 134 158 28 145 180 157 50 91 47 102 238 141 243 231 117 8 43 35 119 47 173 189 151 156 8 114 84 71 131 27 154 245 52 82 111 64 115 113 17 175 223 23 73 255 240 164 79 220 204 214 215 4 108 246 29 182 250 126 74 218 185 181 253 25 0 164 138 102 101 140 77 69 227 87 228 48 179 166 46 49 171 225 177 142 155 180 195 167 189 31 174 149 231 55 111 250 248 243 182 34 84 66 179 139 72 60 121 254 27 153 96 156 57 154 235 80 77 67 99 55 50 193 249 30 122 41 192 180 75 193 0 14 148 85 140 149 185 249 104 42 238 6 91 126 62 246 158 173 188 252 45 34 128 13 159 113 64 204 77 130 104 222 217 36 102 230 153 49 196 220 77 221 85 70 185 127 23 31 133 132 181 100 171 72 189 126 206 105 136 157 107 6 220 147 164 231 207 199 252 135 51 225 165 62 45 105 217 157 96 230 173 146 177 115 225 19 173 251 227 245 36 218 237 14 4 137 1 49 198 202 44 70 59 127 173 113 41 128 128 84 224 145 61 117 107 54 147 213 213 59 245 102 175 188 192 214 71 159 77 5 35 117 156 191 133 25 144 188 134 78 107 70 105 85 28 215 11 162 218 90 160 174 15 180 186 23 1 198 252 130 13 101 225 52 243 140 234 63 115 57 152 0 183 180 14 92 134 101 21 205 221 20 215 17 200 178 49 2 24 243 222 183 136 16 172 165 6 55 251 247 166 209 128 180 39 239 38 149 173 141 31 144 66 51 51 55 77 132 22 19 208 172 198 77 36 57 126 8 42 34 230 238 154 59 127 45 154 35 105 169 160 146 246 75 170 123 154 39 44 77 49 136 88 75 229 235 200 42 153 138 136 165 8 210 235 198 16 75 75 215 55 109 12 49 5 173 167 7 111 107 6 240 230 75 122 185 111 239 158 88 153 123 89 69 83 209 102 195 70 139 203 237 41 188 119 59 15 77 241 148 209 192 58 63 192 106 63 32 141 94 17 68 164 145 126 1 107 164 184 54 3 158 188 126 68 172 217 69 216 34 142 120 218 45 90 47 128 108 107 132 186 244 12 51 107 85 40 91 237 213 215 102 192 146 85 217 176 1 187 249 103 104 20 217 246 55 1 105 195 169 87 64 117 224 170 189 126 239 203 239 230 163 159 250 12 101 21 41 130 62 227 205 161 163 70 144 145 87 46 235 204 64 163 190 91 81 65 43 26 72 27 78 107 231 174 94 116 46 158 150 63 213 132 110 17 222 178 83 89 127 215 90 19 108 152 17 176 133 250 223 0 173 39 211 165 45 95 105 123 71 1 142 151 217 99 101 215 206 29 124 227 107 95 201 145 135 30 241 220 30 46 33 223 152 90 237 158 15 16 178 25 208 247 20 96 18 52 161 96 94 213 148 61 247 236 243 171 184 27 34 106 137 192 94 23 253 185 164 229 181 226 73 245 202 216 114 235 196 1 201 239 107 52 130 212 181 46 35 143 159 54 209 141 52 31 35 183 150 55 96 147 140 130 68 223 212 73 246 12 0 184 123 72 219 178 47 139 48 48 129 65 89 235 186 139 232 243 111 187 133 67 251 247 181 7 68 152 166 26 106 19 145 205 8 217 246 13 54 11 137 182 250 185 173 251 156 155 25 18 130 139 185 154 80 123 253 150 13 178 214 210 104 238 174 57 115 148 181 128 33 105 209 99 189 221 37 186 91 64 212 113 183 140 57 106 222 41 109 138 106 182 243 153 9 76 243 247 50 195 234 249 213 217 249 211 250 123 175 51 139 99 190 143 187 107 194 147 252 162 19 255 82 50 64 85 199 172 150 178 131 102 8 123 118 238 224 175 189 250 107 154 17 49 149 153 5 109 58 135 109 19 53 120 65 136 223 150 159 27 69 3 38 64 116 183 34 171 122 115 183 144 183 143 167 236 94 163 5 26 19 17 5 66 90 249 109 154 76 129 213 242 26 163 33 69 222 21 236 98 17 39 100 223 35 149 165 139 133 77 187 130 49 77 218 192 164 149 59 104 249 8 181 170 179 188 116 91 46 23 19 224 153 248 177 249 50 32 110 150 108 97 52 191 241 154 107 184 246 192 1 121 244 232 49 127 244 216 9 161 138 166 161 1 98 77 68 116 11 245 126 174 247 54 51 11 73 194 72 226 234 65 164 222 221 238 227 206 160 183 180 0 141 22 128 172 160 205 235 45 65 77 88 231 34 42 142 56 102 230 154 69 31 17 113 203 59 37 116 180 41 190 14 251 68 210 25 69 68 220 198 93 17 83 241 81 180 144 93 10 1 60 186 68 55 68 46 19 31 160 197 0 190 222 161 49 119 98 38 213 45 55 28 226 208 254 171 235 49 113 86 143 137 19 205 106 50 169 200 243 209 10 231 50 3 182 137 51 72 116 167 165 5 104 107 129 154 147 98 118 10 83 167 176 103 199 161 33 17 150 7 95 89 52 171 163 56 109 225 205 38 182 249 152 184 77 156 191 196 102 227 215 237 25 141 52 183 90 3 148 151 139 9 136 155 49 192 152 99 99 78 196 41 10 149 217 91 111 228 150 27 14 217 241 211 103 245 137 19 39 137 21 4 213 28 43 99 200 57 215 38 110 134 35 108 149 64 72 11 219 92 12 76 155 164 77 54 208 154 36 220 98 182 203 146 76 129 55 34 42 136 196 20 150 1 218 88 251 196 4 41 225 164 218 186 8 49 207 107 35 117 20 250 105 211 141 44 98 36 95 32 183 29 81 59 197 163 36 85 116 51 51 205 63 151 203 133 1 202 204 0 231 4 46 220 157 196 8 169 157 252 240 161 131 118 237 129 253 28 61 217 140 138 181 156 119 55 206 29 46 157 151 79 96 57 214 151 228 217 91 146 252 188 228 169 46 87 172 129 187 145 41 72 154 192 82 3 241 200 31 72 123 195 50 19 36 23 63 195 191 86 207 13 246 28 1 8 196 218 251 207 241 127 219 230 111 146 38 31 203 103 152 185 197 88 183 34 201 101 19 5 84 91 96 254 27 36 215 221 213 114 37 169 59 92 127 205 1 57 124 240 32 39 206 206 121 30 22 45 65 213 179 236 52 82 210 186 113 190 69 54 109 204 31 16 208 104 102 146 102 196 226 110 46 222 24 214 132 253 184 100 236 71 196 91 187 61 19 88 148 76 118 196 60 180 76 116 118 241 19 8 152 87 3 215 109 136 74 29 92 136 215 13 167 105 34 169 72 203 249 59 87 78 67 44 69 1 117 149 240 101 229 4 174 39 202 86 182 186 206 195 164 102 77 71 162 185 95 189 103 55 251 247 237 222 108 92 188 141 173 80 57 247 8 154 113 127 32 217 127 43 114 162 216 125 180 162 45 230 140 96 54 5 245 47 138 130 199 22 184 147 153 128 96 237 141 160 80 89 218 21 45 24 98 121 209 83 198 1 36 103 16 235 194 19 111 54 136 103 188 127 19 62 182 150 71 88 195 5 200 229 227 4 218 211 101 159 166 157 220 12 55 40 84 57 124 112 63 55 30 218 63 182 48 34 70 107 230 246 113 158 11 35 146 242 54 44 8 106 137 16 17 40 90 51 121 188 165 159 218 73 135 13 76 32 16 98 254 156 88 106 52 37 119 245 136 227 62 98 132 102 118 176 111 44 27 107 252 198 205 146 65 64 76 102 160 173 29 182 189 6 136 23 35 195 231 45 63 33 233 15 103 199 244 52 187 166 103 184 206 174 218 98 101 204 248 61 218 106 10 103 130 127 147 22 23 12 203 166 32 182 179 76 89 214 98 254 29 105 252 129 58 179 151 236 138 120 154 41 100 22 155 161 88 177 25 23 147 25 193 117 52 106 166 189 50 134 209 16 168 245 125 154 245 138 24 243 88 255 44 92 78 72 160 93 92 174 242 38 140 172 141 233 158 29 51 236 217 49 195 250 165 81 22 109 124 218 87 75 254 71 245 30 233 230 214 166 32 90 154 97 160 45 91 165 89 11 72 150 66 205 129 120 83 85 100 245 98 72 195 8 169 242 200 61 183 146 143 51 194 72 123 167 109 34 231 187 52 10 32 134 14 149 71 146 91 121 121 248 0 198 197 41 94 216 16 69 52 9 155 166 226 38 69 80 51 211 83 236 152 158 132 253 231 90 27 55 198 14 226 238 110 121 97 212 152 63 208 246 82 109 180 61 190 109 14 124 100 37 178 14 176 102 165 116 93 96 150 83 13 173 21 176 245 44 194 156 118 104 141 128 51 243 45 164 201 48 98 157 154 118 46 35 39 208 159 2 193 219 84 227 179 121 206 223 183 100 8 79 45 238 35 102 192 58 69 208 125 187 118 250 190 221 59 49 139 178 218 27 90 175 223 215 222 176 180 225 176 212 246 144 167 202 177 32 169 38 32 186 224 65 45 180 174 213 192 50 19 212 177 223 40 94 55 163 82 245 241 221 129 134 163 181 173 151 186 196 40 39 126 70 37 102 73 155 56 181 21 98 171 197 145 130 69 107 152 229 114 240 1 218 210 111 155 16 20 206 221 234 101 235 126 239 124 53 73 42 220 73 255 139 41 135 159 220 237 233 137 174 76 79 118 235 123 88 173 245 7 58 40 75 175 87 199 150 85 101 69 8 168 139 103 8 210 90 179 252 220 69 9 142 33 137 27 208 32 2 177 30 46 109 53 204 11 174 217 12 100 70 16 65 188 73 117 213 227 101 234 146 225 90 43 164 16 15 219 162 228 205 204 176 104 23 218 106 246 21 55 1 126 129 4 92 127 124 217 38 36 23 233 181 114 234 233 162 38 59 69 156 232 22 224 83 235 150 71 199 102 121 116 229 214 90 30 157 212 123 64 16 19 162 199 36 201 205 184 248 17 52 236 181 243 215 48 194 168 84 76 61 149 145 185 182 10 30 207 3 215 49 51 220 18 120 117 57 153 128 205 184 85 215 189 191 30 248 216 44 153 35 155 168 190 173 10 73 55 83 145 141 221 204 81 133 122 174 224 244 212 201 129 138 50 81 128 20 5 76 97 98 168 171 90 85 150 228 20 240 250 245 241 245 184 11 241 212 251 160 170 138 154 227 152 155 72 206 19 72 61 127 42 37 142 19 51 212 77 210 162 181 189 168 51 102 176 110 125 124 42 55 171 98 46 75 146 139 63 213 237 153 208 0 231 147 222 125 58 159 179 47 195 68 109 226 84 38 135 139 152 242 56 68 175 165 219 10 5 232 140 127 73 203 197 226 10 158 115 253 181 37 215 250 156 102 163 16 82 213 164 149 76 114 192 213 90 166 94 235 60 240 168 135 210 83 45 145 123 142 82 182 190 175 79 251 248 255 7 0 254 159 161 191 110 82 162 158 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!CSSDockDemo class methodsFor: 'class initialization' stamp: 'tbn 11/27/2007 14:55'!initialize	"Initializes the receiver"		self registerAsApplication: 'examples/cssdock'! !!CSSDockDemo methodsFor: 'scripts' stamp: 'tbn 11/28/2007 00:29'!fixPNGForIE	^String streamContents: [ :stream |		stream 			nextPutAll: '.dock img { behavior: url(';			nextPutAll: (CSSDockFileLibrary / #iepngfixHtc) displayString;			nextPutAll: ') }']	! !!CSSDockDemo methodsFor: 'rendering' stamp: 'tbn 11/28/2007 01:44'!renderContentOn: html	self session addLoadScript: self startScript.	html text: 'Move mouse over images'.	3 timesRepeat: [html break].	html div		class: 'dock';		id: 'dock';		with: [			html div class: 'dock-container'; with: [self renderDockContainerOn: html]].	3 timesRepeat: [html break].		selectedItem notNil ifTrue: [ html text: 'You selected ', selectedItem ]			 ! !!CSSDockDemo methodsFor: 'rendering' stamp: 'tbn 11/28/2007 01:43'!renderDockContainerOn: html	#('Home' homePng 	  'Contact' emailPng	  'Portfolio' portfolioPng	  'Music' musicPng	  'Video' videoPng	 	  'History' historyPng	  'Calendar' calendarPng	  'RSS' rssPng	) 		pairsDo: [:title :imageSelctor |  			html anchor 				class: 'dock-item';				callback: [self selectedItem: title];				with: [ html image url: (CSSDockFileLibrary perform: #/  with: imageSelctor).						    html span: title ]].	 ! !!CSSDockDemo methodsFor: 'accessing' stamp: 'tbn 11/28/2007 01:43'!selectedItem	^ selectedItem! !!CSSDockDemo methodsFor: 'accessing' stamp: 'tbn 11/28/2007 01:43'!selectedItem: anObject	selectedItem := anObject! !!CSSDockDemo methodsFor: 'scripts' stamp: 'tbn 11/28/2007 00:46'!startScript^'$(document).ready(		function()		{			$(''#dock'').Fisheye(				{					maxWidth: 50,					items: ''a'',					itemsText: ''span'',					container: ''.dock-container'',					itemWidth: 40,					proximity: 90,					halign : ''center''				}			)		}	);'! !!CSSDockDemo methodsFor: 'updating' stamp: 'tbn 11/28/2007 01:14'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'CSS Dock Demo'.	anHtmlRoot javascript url: CSSDockFileLibrary / #jqueryJs.	anHtmlRoot javascript url: CSSDockFileLibrary / #interfaceJs.	anHtmlRoot stylesheet url: CSSDockFileLibrary / #styleCss.	anHtmlRoot if lessThan; ie7; do: [		anHtmlRoot addStyle: self fixPNGForIE ]! !"CSSDock"!!EHErrorHandlingDecoration methodsFor: 'request processing' stamp: 'dkh 01/28/2008 10:14'!processChildCallbacks: aStream	[ super processChildCallbacks: aStream ]		on: Error		do: [:ex | self owner call: EHError new ]! !!EHErrorHandlingDecoration methodsFor: 'rendering' stamp: 'dkh 01/28/2008 10:16'!renderContentOn: html	[ self renderOwnerOn: html ]		on: Error		do: [:ex | self session redirectTo: (html urlForAction: [ self owner call: EHError new ]) ]! !!EHContent methodsFor: 'initialize-release' stamp: 'pmm 8/5/2007 00:07'!initialize	super initialize.	throwErrorWhenRendering := false! !!EHContent methodsFor: 'rendering' stamp: 'pmm 8/5/2007 20:54'!renderContentOn: html	html paragraph: 'content'.	html anchor		callback: [ 1 / 0 ];		with: 'throw error in callback'.			throwErrorWhenRendering ifTrue: [ 1 / 0 ].	html break.			html anchor		callback: [ throwErrorWhenRendering := true ];		with: 'throw error in rendering'.! !!EHError methodsFor: 'rendering' stamp: 'pmm 8/5/2007 00:02'!renderContentOn: html	html text: 'an error occured'! !!EHFooter methodsFor: 'rendering' stamp: 'pmm 8/4/2007 23:58'!renderContentOn: html	html heading level1; with: 'Footer'! !!EHHeader methodsFor: 'rendering' stamp: 'pmm 8/4/2007 23:58'!renderContentOn: html	html heading level1; with: 'Header'! !!EHMain class methodsFor: 'testing' stamp: 'pmm 8/5/2007 00:02'!canBeRoot	^true! !!EHMain methodsFor: 'accessing' stamp: 'pmm 8/5/2007 00:00'!children	^Array with: header with: content with: footer! !!EHMain methodsFor: 'initialize-release' stamp: 'pmm 8/6/2007 06:49'!initialize	super initialize.	header := EHHeader new.	content := (EHContent new		addDecoration: EHErrorHandlingDecoration new;		yourself).	footer := EHFooter new! !!EHMain methodsFor: 'rendering' stamp: 'pmm 8/5/2007 00:01'!renderContentOn: html	html render: header.	html render: content.	html render: footer! !"ErrorHandler"!!HWHello class methodsFor: 'testing' stamp: 'pmm 8/5/2007 15:03'!canBeRoot	^true! !!HWHello methodsFor: 'rendering' stamp: 'pmm 8/5/2007 15:03'!renderContentOn: html	html text: 'Hello, world'! !"HelloWorld"!!IDRandomImage class methodsFor: 'testing' stamp: 'pmm 8/5/2007 15:19'!canBeRoot	^true! !!IDRandomImage methodsFor: 'accessing' stamp: 'pmm 8/5/2007 15:18'!randomImage	^WAStandardFiles / #(codebrowserPng configPng inspectorPng memoryPng profilerPng styleeditorPng) atRandom! !!IDRandomImage methodsFor: 'rendering' stamp: 'pmm 8/5/2007 15:21'!renderContentOn: html	html image		url: self randomImage.	html break.	html anchor		callback: [ "no need to do anythin" ];		with: 'next'! !!IDRandomImage methodsFor: 'updating' stamp: 'pmm 8/5/2007 15:20'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'Image Example'! !"ImageDemo"!!LDLoggedIn methodsFor: 'accessing' stamp: 'pmm 8/1/2007 09:56'!children	^Array with: counter! !!LDLoggedIn methodsFor: 'initialize-release' stamp: 'pmm 8/1/2007 09:55'!initialize	super initialize.	counter := WACounter new! !!LDLoggedIn methodsFor: 'rendering' stamp: 'pmm 8/1/2007 09:55'!renderContentOn: html	html heading: 'Logged In'.	html render: counter.	html break.	html anchor		callback: [ self answer ];		with: 'log out'.	html space.	html anchor		callback: [ self session expire; redirectTo: (self application baseUrl) ];		with: 'kill session'.	html break.! !!LDLogin class methodsFor: 'testing' stamp: 'pmm 8/1/2007 09:54'!canBeRoot	^true! !!LDLogin methodsFor: 'actions' stamp: 'pmm 8/1/2007 09:53'!login	self isolate: [		self call: LDLoggedIn new ]! !!LDLogin methodsFor: 'rendering' stamp: 'pmm 8/1/2007 09:53'!renderContentOn: html	html heading: 'Not Logged In'.	html anchor		callback: [ self login ];		with: 'log in'! !"LogoutDemo"!!WAMarqueeTag commentStamp: 'tbn 12/13/2007 15:03' prior: 0!Represents a marquee tag for scrolling texts. The tag is an MSIE extension, but is now supported by NS 7!!MarqueeDemo commentStamp: 'tbn 12/13/2007 16:42' prior: 0!Demonstrates how to use the applet tag in seaside!!WAHtmlCanvas methodsFor: '*MarqueeDemo' stamp: 'tbn 12/13/2007 14:28'!marquee	"Defines a marquee"	^ self brush: WAMarqueeTag new! !!WAHtmlCanvas methodsFor: '*MarqueeDemo' stamp: 'tbn 12/13/2007 15:06'!marquee: aBlock	"Defines a marquee with the given block"	^ self marquee with: aBlock! !!WAMarqueeTag methodsFor: 'attributes' stamp: 'tbn 12/13/2007 15:21'!alternate 	"Alternate the direction (makes the content bounce back and forth, all of it remaining visible all the time)"		self beavior: 'alternate'! !!WAMarqueeTag methodsFor: 'attributes-internal' stamp: 'tbn 12/13/2007 15:18'!beavior: aString	"Indicates how the contents scroll"		self attributes at: 'behavior' put: aString ! !!WAMarqueeTag methodsFor: 'attributes-internal' stamp: 'tbn 12/13/2007 15:18'!direction: aString	"Indicates which direction the marquee scrolls"		self attributes at: 'direction' put: aString ! !!WAMarqueeTag methodsFor: 'attributes' stamp: 'tbn 12/13/2007 15:19'!left	"Is the default direction, indicates that the marquee starts at the right and moves leftwards across the page"		self direction: 'left'! !!WAMarqueeTag methodsFor: 'attributes' stamp: 'tbn 12/13/2007 14:43'!loopCount: anInteger	"Loops for the given count"		self attributes at: 'loop' put: anInteger! !!WAMarqueeTag methodsFor: 'attributes' stamp: 'tbn 12/13/2007 14:43'!loopForever	"Loop forever"		self loopCount: -1! !!WAMarqueeTag methodsFor: 'attributes' stamp: 'tbn 12/13/2007 15:19'!right	"Indicates that the marquee starts at the left and moves rightwards across the page."	self direction: 'right'! !!WAMarqueeTag methodsFor: 'attributes' stamp: 'tbn 12/13/2007 15:20'!scroll	"Scroll the text (default behavior). Indicates that the content should scroll off the edge of the marquee area, then reappear on the other side"		self beavior: 'scroll'! !!WAMarqueeTag methodsFor: 'attributes' stamp: 'tbn 12/13/2007 14:53'!scrollAmount: amount	" Sets the speed of scrolling together with #scrollDelay:. Marquee moves the content by displaying the content, then delaying for some short period of time, then displaying the content again in a new position. The amount sets the size in pixels of each jump. A higher value makes the marquee scroll faster. The default value is 6."		self attributes at: 'scrollamount' put: amount! !!WAMarqueeTag methodsFor: 'attributes' stamp: 'tbn 12/13/2007 14:50'!scrollDelay: milliseconds	" Sets the speed of the scrolling. The default delay is 85"		self attributes at: 'scrolldelay' put: milliseconds! !!WAMarqueeTag methodsFor: 'attributes' stamp: 'tbn 12/13/2007 15:21'!slide	"Slide the text (indicates that when the leading part content reaches the left edge it should stop without scrolling off)"		self beavior: 'slide'! !!WAMarqueeTag methodsFor: 'accessing' stamp: 'tbn 12/13/2007 14:29'!tag	^ 'marquee'! !!WAMarqueeTag methodsFor: 'accessing' stamp: 'tbn 12/13/2007 15:07'!text: aText	self with: aText! !!WACanvasBrushTest methodsFor: '*MarqueeDemo' stamp: 'tbn 12/13/2007 15:24'!testMarqueeTag	self		assert: [ :html | html marquee ]		gives: '<marquee></marquee>'.	self		assert: [ :html | html marquee with: 'Seaside' ]		gives: '<marquee>Seaside</marquee>'.			self		assert: [ :html | html marquee text: 'Seaside' ]		gives: '<marquee>Seaside</marquee>'.			self		assert: [ :html | html marquee: 'Seaside' ]		gives: '<marquee>Seaside</marquee>'.							self		assert: [ :html | html marquee scroll]		gives: '<marquee behavior="scroll"></marquee>'.	self		assert: [ :html | html marquee alternate]		gives: '<marquee behavior="alternate"></marquee>'.	 	self		assert: [ :html | html marquee loopCount: 2]		gives: '<marquee loop="2"></marquee>'.	 		self		assert: [ :html | html marquee scrollAmount: 20]		gives: '<marquee scrollamount="20"></marquee>'.	 							self		assert: [ :html | html marquee scrollDelay: 20]		gives: '<marquee scrolldelay="20"></marquee>'.	 	self		assert: [ :html | html marquee loopForever]		gives: '<marquee loop="-1"></marquee>'.	 	self		assert: [ :html | html marquee loopCount: 2]		gives: '<marquee loop="2"></marquee>'.	self		assert: [ :html | html marquee with: [html image url: 'myscrollinglogo.gif']]		gives: '<marquee><img alt="" src="myscrollinglogo.gif"/></marquee>'.			 		self		assert: [ :html | html marquee left]		gives: '<marquee direction="left"></marquee>'.							self		assert: [ :html | html marquee right]		gives: '<marquee direction="right"></marquee>'.									! !!MarqueeDemo class methodsFor: 'class initialization' stamp: 'tbn 12/13/2007 16:58'!initialize	self registerAsApplication: 'examples/marquee'! !!MarqueeDemo methodsFor: 'rendering' stamp: 'tbn 12/13/2007 16:58'!renderContentOn: html	 	html marquee: 'Simple scrolling'.	html horizontalRule.	html marquee 		right;		with: 'Right marquee'.	html horizontalRule.			html marquee 		scrollAmount: 20;		with: 'Faster marquee'.	html horizontalRule.					html marquee 		scrollDelay: 120;		with: 'Slow marquee'.	html horizontalRule.					html marquee 		alternate;		with: 'Ping Pong marquee'.				! !"MarqueeDemo"!!MDContactEditor commentStamp: 'MiguelCoba 1/3/2008 17:56' prior: 0!This is a component that in a real app in the real world would let you add a new Contact to your database!!MDContactList commentStamp: 'MiguelCoba 1/3/2008 17:56' prior: 0!This is a component that in a real app in the real world would list all your contacts!!MDFooter commentStamp: 'MiguelCoba 1/3/2008 17:48' prior: 0!This class is just a placeholder for a real footer component. It is used for showing a text in the lower part of the application!!MDHeader commentStamp: 'MiguelCoba 1/3/2008 17:48' prior: 0!This class is just a placeholder for a real header component. It is used for showing a text in the upper part of the application!!MDMain commentStamp: 'MiguelCoba 1/4/2008 18:13' prior: 0!This is the main class of the application. It has 4 children: header, footer, menu and content.In the initialization sets up the menu items.In the callback of the menu items (newContact, listContact) just swap the component assigned to the component instvar. So when this component is rerendered the current component is shown in the browser. Really, that simple.It is very similar in functionality to Philippe Marschall's one, but this doesn't use the Announcement framework in order to show the logic involved when changing components for the content of a webapp.For a little explanation of this demo, visit: http://blog.leugim.com.mx/index.php/2008/01/03/seaside-menus/!!MDMenu commentStamp: 'MiguelCoba 1/3/2008 18:19' prior: 0!This component renders a menu for the application. Uses a OrderedCollection of associations 'title' -> [block to be executed when clicked]!!MDContactEditor methodsFor: 'rendering' stamp: 'MiguelCoba 1/3/2008 17:43'!renderContentOn: html	html heading		level: 3;		with: 'I am the Contact Editor component'.	html text: 'Here goes the code to add a new Contact and to save it'		! !!MDContactList methodsFor: 'rendering' stamp: 'MiguelCoba 1/3/2008 17:43'!renderContentOn: html	html heading		level: 3;		with: 'I am the Contact List component'.	html text: 'Here goes the code to list your Contact list'! !!MDFooter methodsFor: 'rendering' stamp: 'MiguelCoba 1/3/2008 17:46'!renderContentOn: html	"Renders a message standing for a footer"	html heading 		level: 4;		with: 'Application footer'! !!MDHeader methodsFor: 'rendering' stamp: 'MiguelCoba 1/3/2008 16:59'!renderContentOn: html	html heading 		level: 2;		with: 'Application heading'.! !!MDMain class methodsFor: 'testing' stamp: 'MiguelCoba 1/3/2008 16:59'!canBeRoot	^true! !!MDMain class methodsFor: 'class initialization' stamp: 'MiguelCoba 1/3/2008 19:00'!initialize	"registers the appl"	self registerAsApplication: 'examples/MenuDemo'.! !!MDMain methodsFor: 'accessing' stamp: 'MiguelCoba 1/3/2008 17:11'!children	^ Array with: header with: footer with: menu with: content.! !!MDMain methodsFor: 'initialize-release' stamp: 'MiguelCoba 1/3/2008 17:10'!initialize	super initialize.	header := MDHeader new.	footer := MDFooter new.	content := WAComponent new. "Initially a blank page is rendered"	"We setup the menu"	menu := MDMenu new		add: [self newContact] named: 'New Contact';		add: [self listContacts] named: 'Contact list';		yourself.! !!MDMain methodsFor: 'menu-actions' stamp: 'MiguelCoba 1/3/2008 17:17'!listContacts	content := MDContactList new.! !!MDMain methodsFor: 'menu-actions' stamp: 'MiguelCoba 1/3/2008 17:43'!newContact	content := MDContactEditor new.! !!MDMain methodsFor: 'rendering' stamp: 'MiguelCoba 1/3/2008 17:19'!renderContentOn: html	html render: header.	html render: menu.	html render: content.	html render: footer.	! !!MDMain methodsFor: 'accessing' stamp: 'MiguelCoba 1/4/2008 18:11'!states    ^ Array with: self! !!MDMenu methodsFor: 'initialize-release' stamp: 'MiguelCoba 1/3/2008 17:20'!add: aCallback named: aTitle	entries add: aTitle -> aCallback ! !!MDMenu methodsFor: 'initialize-release' stamp: 'MiguelCoba 1/3/2008 17:07'!initialize	super initialize.	entries := OrderedCollection new.! !!MDMenu methodsFor: 'rendering' stamp: 'MiguelCoba 1/3/2008 17:41'!renderContentOn: html	html unorderedList: [		entries do: [ :each |			html listItem: [				html anchor 					callback: each value;					with: each key]]]! !"MenuDemo"!!WAScreenResolution class methodsFor: 'initialization' stamp: 'lr 8/8/2007 12:19'!initialize	self registerAsApplication: 'examples/screenresolution'! !!WAScreenResolution methodsFor: 'rendering' stamp: 'lr 7/12/2007 15:22'!renderContentOn: html	x isNil ifTrue: [ 		x := 0. y := 0.		html script: 'window.location.href="' , html context actionUrl asString ,			'&' , (html callbacks registerCallback: [ :v | x := v asNumber]) ,			'=" + screen.width + "' ,			'&' , (html callbacks registerCallback: [ :v | y := v asNumber]) ,			'=" + screen.height' ].	html render: x; text: ' x '; render: y! !"ScreenResolution"!!WAStoreTask commentStamp: 'avi 1/1/2004 10:19' prior: 0!This task models the main application flow of the store example.  Most of the other components in the example are called from here.  The flow is defined by the #go method.  After creating a WAStoreCart instance, this calls WAStoreFillCart to allow the user to add items to it.  It then calls WAStoreCartConfirmation, WAStoreAddressEditor, and WAStorePaymentEditor in succession for the checkout process.  Many of the components it calls are wrapped with informative messages (#withMessage:) and validation (#validateWith:).  It also makes use of WASession>>isolate: to ensure that once the checkout process starts, backtracking to modify the cart is forbidden.  Used by WAStore.!!WAStoreAddressEditor commentStamp: 'avi 1/1/2004 09:56' prior: 0!A component for editing WAStoreAddress instances.  When called, it will create a new address instance, present a form for the user to modify it, and then answer the instance on submit.  Used by WAStoreTask>>getBillingAddress and getShippingAddress.!!WAStorePaymentEditor commentStamp: 'avi 1/1/2004 09:58' prior: 0!A component for editing WAStoreCreditCard instances.  When called, it presents a form for the user to choose credit card type, and enter name, number, and expiry date.  On submit, it will create and answer an instance of the appropiate credit card subclass.  Note the difference with WAStoreAddressEditor, where the form modifies the address instance directly.  Used by WAStoreTask>>getPaymentInfo.!!WAStore commentStamp: 'avi 1/1/2004 10:06' prior: 0!This component is the entry point for the store example.  It provides the main stylesheet in its #style method, renders a simple banner at the top, and then embeds an instance of WAStoreTask, which is where the real action happens.!!WAStoreCartConfirmation commentStamp: 'avi 1/1/2004 09:58' prior: 0!A component for confirming the contents of a WAStoreCart.  The caller must provide a cart instance with #cart: .  When called, it will display a summary of the items in the cart, along with two buttons: "Proceed with checkout" and "Modify cart".  Answers true if the user presses the first button, false if the user presses the seecond.  Used by WAStoreTask>>confirmContentsOfCart.!!WAStoreCartView commentStamp: 'avi 1/1/2004 09:57' prior: 0!A component for displaying and modifying a WAStoreCart.  Intended to be embedded rather than called.  The parent must provide a cart instance with #cart:.  Displays a list of items in the cart, and allows individual items to be removed.  Used by WAStoreFillCart.!!WAStoreFillCart commentStamp: 'avi 1/1/2004 10:10' prior: 0!This component provides the main UI for browsing the store inventory and filling the cart.  The caller must provide a shopping cart instance with #cart:.  The component presents a navigation bar with options to browse and search on the left, and embeds a WACartView showing the cart contents on the right.  In the middle is initially embedded a WAStoreInfo.  Browsing and searching will replace this with a stock WABatchSelection component for listing items (see #displatItems:), or a WAStoreItemView for displaying individual items.  This answers back to the caller when the user chooses "checkout" from the nav bar.!!WAStoreInfo commentStamp: 'avi 1/1/2004 09:57' prior: 0!A component that displays simple informative text about this example.  Used by WAStoreFillCart.!!WAStoreItemView commentStamp: 'avi 1/1/2004 09:58' prior: 0!A component for viewing an individual WAStoreItem.  The caller must provide #item: and also the current #cart:.  Shows the description and price info for the item, and presents two buttons: "Add to Cart", which will add the item to the cart, once, and "Done", which will answer back to the caller.  Used by WAStoreFillCart>>displayItem: and displayItems:.!!WAStoreAddress commentStamp: 'avi 1/1/2004 07:36' prior: 0!A simple model of a billing or shipping address.  Stores strings for a person's name, street, city, and country.  Apart from accessors for these, the only behavior this provides is a #validate method which will throw errors if street, city, or country is nil.!!WAStoreCart commentStamp: 'avi 1/1/2004 07:44' prior: 0!A shopping cart.  This is essentially a specialized Bag: you can #add: or #remove: WAStoreItems to it, and calculate their #totalPrice.  You can also use #countsAndItems to get a collection of associations between the items and the number of times they appear in the cart, useful for summary displays.!!WAStoreCreditCard commentStamp: 'avi 1/1/2004 07:47' prior: 0!Models credit card information - it has accessors for #name and #number (both strings), and #expiry date.  #validate throws an error if anything is missing, or if the expiry date is in the past.This is intended to be an abstract class - the subclasses WAStoreMasterCard and WAStoreVisaCard provide further validation.!!WAStoreMasterCard commentStamp: 'avi 1/1/2004 09:35' prior: 0!Adds MasterCard-specific validation to WAStoreCreditCard.!!WAStoreVisaCard commentStamp: 'avi 1/1/2004 09:35' prior: 0!Adds VISA-specific validation to WAStoreCreditCard.!!WAStoreInventory commentStamp: 'avi 1/1/2004 09:33' prior: 0!The list of inventory items.  In a real application, this would probably have to deal with persistence, maintaining inventory counts, etc.  In this example, it just builds a collection of WAStoreItems from a hardcoded data set, and provides #allItems and #findItem: for accessing these.!!WAStoreItem commentStamp: 'avi 1/1/2004 09:34' prior: 0!Models a single item of inventory - stores a title, subtitle, fill description, and price.  The only real behavior is #matches:, which is used for search.!!WAStoreTask methodsFor: 'as yet unclassified' stamp: 'pmm 5/9/2007 11:39'!confirmContentsOfCart	^ self call: (WAStoreCartConfirmation new		cart: cart;		addMessage: 'Please verify your order:';		yourself)! !!WAStoreTask methodsFor: 'as yet unclassified' stamp: 'avi 12/9/2003 13:28'!displayConfirmation	self inform: 'Your fish is on its way.'! !!WAStoreTask methodsFor: 'actions' stamp: 'dkh 02/08/2008 09:18'!fillCart	self call: (self fillCartClass new cart: cart)! !!WAStoreTask methodsFor: 'accessing' stamp: 'dkh 02/08/2008 09:17'!fillCartClass	^WAStoreFillCart! !!WAStoreTask methodsFor: 'as yet unclassified' stamp: 'avi 9/10/2005 16:35'!getAddressWithMessage: aString	^ self call:		(WAStoreAddressEditor new			validateWith: [:a | a validate];			addMessage: aString;			yourself)				! !!WAStoreTask methodsFor: 'as yet unclassified' stamp: 'avi 12/9/2003 13:43'!getBillingAddress	^ self getAddressWithMessage: 'Please enter your billing address:'.! !!WAStoreTask methodsFor: 'as yet unclassified' stamp: 'avi 9/10/2005 18:55'!getPaymentInfo	^ self call:		(WAStorePaymentEditor new			validateWith: [:p | p validate];			addMessage: 'Please enter your payment information:';			yourself)! !!WAStoreTask methodsFor: 'as yet unclassified' stamp: 'avi 11/6/2005 00:38'!getShippingAddress	^ self getAddressWithMessage: 'Please enter your shipping address:'.! !!WAStoreTask methodsFor: 'actions' stamp: 'avi 2/2/2004 21:58'!go	| shipping billing creditCard |	cart := WAStoreCart new.	self isolate:		[[self fillCart.		self confirmContentsOfCart]			whileFalse].	self isolate:		[shipping := self getShippingAddress.		billing := (self useAsBillingAddress: shipping)					ifFalse: [self getBillingAddress]					ifTrue: [shipping].		creditCard := self getPaymentInfo.		self shipTo: shipping billTo: billing payWith: creditCard].	self displayConfirmation.! !!WAStoreTask methodsFor: 'as yet unclassified' stamp: 'avi 12/9/2003 14:04'!shipTo: shippingAddress billTo: billingAddress payWith: aCreditCard	"no-op"! !!WAStoreTask methodsFor: 'as yet unclassified' stamp: 'avi 12/9/2003 13:44'!useAsBillingAddress: anAddress	^ self confirm: 'Do you wish to use ', anAddress street printString, ' as your billing address?'! !!WAStoreAddressEditor methodsFor: 'accessing' stamp: 'avi 12/8/2003 13:55'!countries	^ #(Canada USA)! !!WAStoreAddressEditor methodsFor: 'initialize-release' stamp: 'al 9/7/2006 16:12'!initialize	super initialize.	address := WAStoreAddress new! !!WAStoreAddressEditor methodsFor: 'accessing' stamp: 'mb 2/17/2005 11:14'!labelForSelector: aSymbol	aSymbol == #name ifTrue: [^'Your name'].	aSymbol == #street ifTrue: [^'The street'].	aSymbol == #city ifTrue: [^'The city'].	aSymbol == #ok ifTrue: [^'Continue'].	^ super labelForSelector: aSymbol! !!WAStoreAddressEditor methodsFor: 'accessing' stamp: 'avi 5/1/2004 14:38'!model	^ address! !!WAStoreAddressEditor methodsFor: 'actions' stamp: 'avi 12/10/2003 13:04'!ok	self answer: address! !!WAStoreAddressEditor methodsFor: 'rendering' stamp: 'al 9/7/2006 16:11'!renderCountryOn: html	html select		list: self countries;		on: #country of: address! !!WAStoreAddressEditor methodsFor: 'accessing' stamp: 'avi 5/1/2004 14:11'!rows	^ #(name street city country)! !!WAStoreAddressEditor methodsFor: 'path' stamp: 'mb 2/10/2006 12:05'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'Seaside Sushi Store : Your address'.! !!WAStorePaymentEditor methodsFor: 'accessing' stamp: 'al 9/7/2006 16:14'!cardNumber	^cardNumber! !!WAStorePaymentEditor methodsFor: 'accessing' stamp: 'al 9/7/2006 16:15'!cardNumber: aString	cardNumber := aString! !!WAStorePaymentEditor methodsFor: 'accessing' stamp: 'al 9/7/2006 16:17'!cardType	^cardType! !!WAStorePaymentEditor methodsFor: 'accessing' stamp: 'al 9/7/2006 16:22'!cardType: aCreditCardClass	cardType := aCreditCardClass! !!WAStorePaymentEditor methodsFor: 'accessing' stamp: 'avi 12/10/2003 14:06'!cardTypes	^ WAStoreCreditCard subclasses! !!WAStorePaymentEditor methodsFor: 'accessing' stamp: 'mb 2/10/2006 12:29'!labelForSelector: aSymbol	aSymbol == #ok ifTrue: [^'OK to pay'].	^ super labelForSelector: aSymbol! !!WAStorePaymentEditor methodsFor: 'accessing' stamp: 'al 9/7/2006 16:22'!month	^month! !!WAStorePaymentEditor methodsFor: 'accessing' stamp: 'al 9/7/2006 16:23'!month: anInteger	month := anInteger! !!WAStorePaymentEditor methodsFor: 'accessing' stamp: 'avi 12/10/2003 13:59'!months	^ (1 to: 12)! !!WAStorePaymentEditor methodsFor: 'accessing' stamp: 'al 9/7/2006 16:25'!name	^name! !!WAStorePaymentEditor methodsFor: 'accessing' stamp: 'al 9/7/2006 16:25'!name: aString	name := aString! !!WAStorePaymentEditor methodsFor: 'actions' stamp: 'pmm 11/2/2005 23:42'!ok	self answer:		(cardType new			name: name;			number: cardNumber;			expiry: (Date newDay: 1 monthNumber: month year: year);			yourself)! !!WAStorePaymentEditor methodsFor: 'rendering' stamp: 'al 9/7/2006 17:10'!renderCardNumberOn: html	html textInput on: #cardNumber of: self! !!WAStorePaymentEditor methodsFor: 'rendering' stamp: 'al 9/7/2006 17:10'!renderCardTypeOn: html	html select		list: self cardTypes;		on: #cardType of: self;		labels: [ :each | each abbreviation]! !!WAStorePaymentEditor methodsFor: 'rendering' stamp: 'al 9/7/2006 16:25'!renderExpirationDateOn: html 	html select		list: self months;		on: #month of: self.	html select		list: self years;		on: #year of: self! !!WAStorePaymentEditor methodsFor: 'rendering' stamp: 'al 9/7/2006 16:26'!renderNameOn: html	html textInput on: #name of: self! !!WAStorePaymentEditor methodsFor: 'accessing' stamp: 'avi 5/1/2004 14:14'!rows	^ #(cardType name cardNumber expirationDate)! !!WAStorePaymentEditor methodsFor: 'path' stamp: 'mb 2/10/2006 12:08'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'Seaside Sushi Store : Payment'.! !!WAStorePaymentEditor methodsFor: 'accessing' stamp: 'al 9/7/2006 16:23'!year	^year! !!WAStorePaymentEditor methodsFor: 'accessing' stamp: 'al 9/7/2006 16:23'!year: anInteger	year := anInteger! !!WAStorePaymentEditor methodsFor: 'accessing' stamp: 'avi 12/10/2003 13:45'!years	^ (Date today year to: Date today year + 5)! !!WAStore class methodsFor: 'testing' stamp: 'avi 2/5/2004 12:58'!canBeRoot	^ true! !!WAStore class methodsFor: 'accessing' stamp: 'mb 5/26/2006 12:25'!description	^'sushiNet - Fresh, raw fish delivered to your door'! !!WAStore class methodsFor: 'as yet unclassified' stamp: 'mb 6/14/2006 14:13'!entryPointName	^'examples/store'! !!WAStore class methodsFor: 'class initialization' stamp: 'mb 6/14/2006 14:13'!initialize	self registerAsApplication: self entryPointName! !!WAStore methodsFor: 'accessing' stamp: 'avi 2/10/2004 20:42'!children	^ Array with: task! !!WAStore methodsFor: 'initialize-release' stamp: 'dkh 02/08/2008 09:17'!initialize	super initialize.	task := self taskClass new.! !!WAStore methodsFor: 'rendering' stamp: 'pmm 4/19/2006 22:40'!renderContentOn: html	html table		id: 'banner';		with: [			html tableRow: [				html tableData: [					html div id: 'title'; with: self title.					html div id: 'subtitle'; with: self subtitle ] ] ].	html div id: 'body'; with: task! !!WAStore methodsFor: 'accessing' stamp: 'mb 1/5/2006 14:35'!style	^ 'body {	margin: 0px; 	font-family: sans-serif}#banner {	width: 100%}	#banner tr {	background-color: lightblue;	text-align: right;	padding: 10px;	vertical-align: bottom}#title {	font-size: 18pt;	font-weight: bold}#subtitle {	font-size: 9pt;	font-style: italic}#body {	padding: 5px}.validation-error {	color: red;	font-size: 15pt; 	padding: 5px}'! !!WAStore methodsFor: 'accessing' stamp: 'avi 12/9/2003 13:58'!subtitle	^ 'fresh, raw fish delivered to your door'! !!WAStore methodsFor: 'accessing' stamp: 'dkh 02/08/2008 09:17'!taskClass	^WAStoreTask! !!WAStore methodsFor: 'accessing' stamp: 'avi 12/9/2003 13:58'!title	^ 'sushiNet'! !!WAStoreCartConfirmation methodsFor: 'accessing' stamp: 'avi 12/9/2003 13:35'!cart: aCart	cart := aCart! !!WAStoreCartConfirmation methodsFor: 'rendering' stamp: 'lr 11/21/2006 00:20'!renderContentOn: html	| table |	table := html table.	table id: 'invoice'; with: [		html tableHead:			[#(Item Price Count Total) do:				[:ea | html tableHeading: ea]].		cart countsAndItems do:			[:assoc | |count item|			count := assoc key.			item := assoc value.			html tableRow: [				html tableData class: 'item-title'; with: item title.				html tableData class: 'item-price'; with: item price printStringAsCents.				html tableData class: 'item-count'; with: count displayString.				html tableData class: 'item-total'; with: (item price * count) printStringAsCents			]		].		html tableRow: [			html tableData: nil.			html tableData: nil.			html tableData: nil.			html tableData class: 'cart-total'; with:cart totalPrice printStringAsCents		].	].	html paragraph.	html form: [		html submitButton callback: [ self answer: true ]; text: 'Proceed with checkout'.		html break.		html submitButton callback: [self answer: false]; text: 'Modify my order'.	]! !!WAStoreCartConfirmation methodsFor: 'accessing' stamp: 'mb 2/9/2006 19:09'!style	^'.item-title {	text-align: left;	width: 15em;}.item-count {	text-align: right;	width: 5em;}.item-price {	text-align: right;	width: 5em;}.item-total {	text-align: right;	width: 5em;}.cart-total {	text-align: right;	font-weight: bold; }#invoice table {	border-collapse: collapse;}#invoice td {	padding: 0.3em;	border: 1px lightblue dotted;}#invoice tr {	background-color: lightyellow;}'! !!WAStoreCartConfirmation methodsFor: 'path' stamp: 'mb 2/10/2006 12:04'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'Seaside Sushi Store : Verify your cart'.! !!WAStoreCartView methodsFor: 'accessing' stamp: 'ab 8/15/2003 17:18'!cart: aCart	cart := aCart! !!WAStoreCartView methodsFor: 'rendering' stamp: 'pmm 6/9/2007 15:33'!renderContentOn: html	cart hasItems ifFalse: [^ self].	html div		id: 'cart';		with: [			html small: [ html strong: 'Your cart:' ].			html table: [				cart countsAndItems do:					[:assoc | self renderRowForCount: assoc key of: assoc value on: html ].				html tableRow: [ html space].				html tableRow: [					html tableData: ''.					html tableData: ''.					html tableData: [html strong: cart totalPrice printStringAsCents ] ] ] ]! !!WAStoreCartView methodsFor: 'rendering' stamp: 'lr 11/16/2006 18:12'!renderRowForCount: aNumber of: anItem on: html 	| countString |	countString := (aNumber = 1) ifTrue: [''] ifFalse: ['(', aNumber displayString, ') '].	html tableRow: [		html tableData: [ html anchor callback: [ cart remove: anItem ]; with: '-'].		html tableData: countString, anItem title.		html tableData: (aNumber * anItem price) printStringAsCents ]! !!WAStoreFillCart methodsFor: 'actions' stamp: 'avi 12/9/2003 13:13'!browse	self displayItems: self inventory allItems! !!WAStoreFillCart methodsFor: 'accessing' stamp: 'avi 12/9/2003 13:10'!cart: aCart	cart := aCart.	cartView cart: aCart.! !!WAStoreFillCart methodsFor: 'actions' stamp: 'ab 8/15/2003 17:11'!checkout	self answer.! !!WAStoreFillCart methodsFor: 'accessing' stamp: 'avi 2/10/2004 20:42'!children	^ Array with: cartView with: main! !!WAStoreFillCart methodsFor: 'actions' stamp: 'pmm 11/2/2005 23:44'!displayItem: anItem	main call: (WAStoreItemView new item: anItem; cart: cart; yourself)! !!WAStoreFillCart methodsFor: 'actions' stamp: 'avi 12/9/2003 13:25'!displayItems: aCollection	| list |	aCollection size = 1 ifTrue: [^ self displayItem: aCollection first].	list := WABatchSelection			 items: aCollection			 link: #title			 text: #subtitle.	[self displayItem: (main call: list)] repeat	! !!WAStoreFillCart methodsFor: 'initialize-release' stamp: 'mb 4/23/2006 18:33'!initialize	super initialize.	main := WAStoreInfo new.	cartView := WAStoreCartView new! !!WAStoreFillCart methodsFor: 'accessing' stamp: 'avi 12/9/2003 13:13'!inventory	^ WAStoreInventory default! !!WAStoreFillCart methodsFor: 'rendering' stamp: 'pmm 4/19/2006 20:06'!renderContentOn: html	html table: ["		html tableRow: [ html tableData colSpan: 3; with: trail ]."		html tableRow: [			html tableData id: 'nav'; with: [ self renderNavBarOn: html ].			html tableData id: 'main'; with: main.			html tableData id: 'side'; with: cartView ] ]! !!WAStoreFillCart methodsFor: 'rendering' stamp: 'lr 11/16/2006 18:12'!renderNavBarOn: html	html form: [		html strong: 'Search:'.		html space.		html textInput callback: [:v | self search: v]; value: '' ].	html anchor callback: [self browse]; with: 'Browse'.	cart hasItems ifTrue:  [		html break.		html anchor callback: [self checkout]; with: 'Checkout']! !!WAStoreFillCart methodsFor: 'actions' stamp: 'avi 12/9/2003 13:13'!search: aString	| results |	results := self inventory findItem: aString.	results isEmpty		ifTrue: [main inform: 'No items match ', aString printString]		ifFalse: [self displayItems: results].! !!WAStoreFillCart methodsFor: 'accessing' stamp: 'avi 12/9/2003 15:33'!style^ '	#search {vertical-align: bottom}	#main {width: 50%; padding: 10px}	#side {vertical-align: top; }	#cart {border-style: dashed; border-width: 1; padding: 5px}	#nav {background-color: lightgrey; vertical-align: top; padding: 5px; border-width: 1; width: 15%; font-size: 12pt}	#batch {font-size: 10pt}'! !!WAStoreFillCart methodsFor: 'path' stamp: 'mb 2/10/2006 12:03'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.	anHtmlRoot title: 'Seaside Sushi Store : Fill your cart'.! !!WAStoreInfo methodsFor: 'rendering' stamp: 'mb 4/23/2006 20:25'!renderContentOn: html	html withLineBreaks: self text! !!WAStoreInfo methodsFor: 'accessing' stamp: 'mb 2/9/2006 19:10'!text	^'Welcome to the sushiNet online store.This is a sample Seaside application.Use the search box at the top left to find some results.Good searches to try might be "tuna", "saba", or "fish".'! !!WAStoreItemView methodsFor: 'actions' stamp: 'avi 12/9/2003 13:11'!addToCart	cart add: item! !!WAStoreItemView methodsFor: 'accessing' stamp: 'avi 12/9/2003 13:11'!cart: aCart	cart := aCart! !!WAStoreItemView methodsFor: 'accessing' stamp: 'ab 5/25/2003 14:47'!item: anItem	item := anItem! !!WAStoreItemView methodsFor: 'rendering' stamp: 'lr 11/21/2006 00:12'!renderContentOn: html	html heading: item title.	html heading level3; with: item subtitle.	html paragraph: item description.	html emphasis: item price printStringAsCents.	html form: [		html submitButton callback: [self addToCart]; text: 'Add To Cart'.		html space.		html submitButton callback: [self answer]; text: 'Done' ]! !!WAStoreItemView methodsFor: 'updating' stamp: 'mb 11/27/2005 19:31'!updateUrl: aUrl	aUrl addToPath: item title! !!WAStoreAddress methodsFor: 'accessing' stamp: 'avi 12/8/2003 13:53'!city	^ city! !!WAStoreAddress methodsFor: 'accessing' stamp: 'avi 12/8/2003 13:52'!city: aString	city := aString! !!WAStoreAddress methodsFor: 'accessing' stamp: 'avi 12/8/2003 13:53'!country	^ country! !!WAStoreAddress methodsFor: 'accessing' stamp: 'avi 12/8/2003 13:53'!country: aString	country := aString! !!WAStoreAddress methodsFor: 'accessing' stamp: 'avi 12/8/2003 13:53'!name	^ name! !!WAStoreAddress methodsFor: 'accessing' stamp: 'avi 12/8/2003 13:52'!name: aString	name := aString! !!WAStoreAddress methodsFor: 'accessing' stamp: 'avi 12/8/2003 13:53'!street	^ street! !!WAStoreAddress methodsFor: 'accessing' stamp: 'avi 12/8/2003 13:52'!street: aString	street := aString! !!WAStoreAddress methodsFor: 'actions' stamp: 'cds 7/25/2005 10:20'!validate	street ifNil: [self validationError: 'You must provide a street address.'].	city ifNil: [self validationError: 'You must provide a city.'].	country ifNil: [self validationError: 'You must provide a country.'].! !!WAStoreCart methodsFor: 'adding' stamp: 'ab 8/15/2003 17:36'!add: anObject	items ifNil: [items := Bag new].	items add: anObject! !!WAStoreCart methodsFor: 'as yet unclassified' stamp: 'ab 8/15/2003 17:40'!countsAndItems	^ items sortedCounts! !!WAStoreCart methodsFor: 'testing' stamp: 'avi 12/8/2003 14:01'!hasItems	^ items notNil and: [items isEmpty not]! !!WAStoreCart methodsFor: 'accessing' stamp: 'ab 8/15/2003 17:21'!items	^ items! !!WAStoreCart methodsFor: 'removing' stamp: 'ab 8/15/2003 17:40'!remove: anObject	items remove: anObject ifAbsent: []! !!WAStoreCart methodsFor: 'as yet unclassified' stamp: 'ab 8/15/2003 17:41'!totalPrice	^ items detectSum: [:ea | ea price]! !!WAStoreCreditCard methodsFor: 'accessing' stamp: 'avi 12/9/2003 14:02'!expiry	! !!WAStoreCreditCard methodsFor: 'accessing' stamp: 'avi 12/9/2003 14:03'!expiry: aDate	expiry := aDate! !!WAStoreCreditCard methodsFor: 'accessing' stamp: 'avi 12/9/2003 14:02'!name	^ name! !!WAStoreCreditCard methodsFor: 'accessing' stamp: 'avi 12/9/2003 14:01'!name: aString	name := aString! !!WAStoreCreditCard methodsFor: 'accessing' stamp: 'avi 12/9/2003 14:02'!number	^ number! !!WAStoreCreditCard methodsFor: 'accessing' stamp: 'avi 12/9/2003 14:02'!number: aString	number := aString! !!WAStoreCreditCard methodsFor: 'actions' stamp: 'cds 7/25/2005 10:20'!validate	name ifNil: [self validationError: 'You must provide the name of the credit card owner.'].	number ifNil: [self validationError: 'You must provide a credit card number.'].	expiry ifNil: [self validationError: 'You must provide an expiry date.'].	expiry < Date today ifTrue: [self validationError: 'The expiry date must not be in the past'].	! !!WAStoreMasterCard class methodsFor: 'accessing' stamp: 'avi 12/10/2003 14:04'!abbreviation	^ 'MC'! !!WAStoreMasterCard methodsFor: 'actions' stamp: 'pmm 5/9/2007 11:42'!validate	super validate.	(number isEmptyOrNil not and: [number first ~= $5])		ifTrue: [self validationError: 'Mastercard numbers must start with "5"'].! !!WAStoreVisaCard class methodsFor: 'accessing' stamp: 'avi 12/10/2003 14:04'!abbreviation	^ 'VISA'! !!WAStoreVisaCard methodsFor: 'actions' stamp: 'pmm 5/9/2007 11:43'!validate	super validate.	(number isEmptyOrNil not and: [number first ~= $5])		ifTrue: [self validationError: 'Visa card numbers must start with "4"'].! !!WAStoreInventory class methodsFor: 'defaults' stamp: 'avi 12/8/2003 14:26'!default	^ default ifNil: [default := self new]! !!WAStoreInventory class methodsFor: 'instance creation' stamp: 'avi 12/8/2003 14:17'!new	^ self basicNew initialize! !!WAStoreInventory methodsFor: 'accessing' stamp: 'ab 8/15/2003 17:19'!allItems	^ items! !!WAStoreInventory methodsFor: 'as yet unclassified' stamp: 'ab 8/15/2003 17:19'!findItem: searchString	^ items select: [:ea | ea matches: searchString]! !!WAStoreInventory methodsFor: 'initialize-release' stamp: 'pmm 4/21/2007 00:16'!initialize	items := self itemSpecs collect:  [:row |		self itemFromSpec: row ]! !!WAStoreInventory methodsFor: 'as yet unclassified' stamp: 'pmm 11/2/2005 23:45'!itemFromSpec: anArray	^ WAStoreItem new		title: anArray first;		subtitle: anArray second;		description: anArray third;		price: anArray fourth;		yourself! !!WAStoreInventory methodsFor: 'as yet unclassified' stamp: 'avi 9/18/2003 16:43'!itemSpecs"adapted from http://www.thaddeus.com/ftp/database/sushi.zip"	^ #(#('Akami Maguro' 'Red Tuna' 'The lean meat near the spine of the tuna fish.  It comes in various shades of red--with the lighter, shinier varieties being the best.  For dieters, however, the redder the better.  Easy on the palatte.  The least expensive of the three types of maguro.' 150)#('Chutoro Maguro' 'Fatty Tuna' 'The moderately fatty part of the tuna belly.  It''s pink, but not the faint pink of ohtoro.  Soft, butter-like texture.  Moderately expensive.' 275)#('Geso Ika' 'Cuttlefish Tentacles' 'White in color, geso is boiled and brushed with thick teriyaki sauce before serving as sushi.  Its texture is chewy, and its mild flavor is complemented by the sweet-salty teriyaki.' 200)#('Himo Akagai' 'Ark Shell Filaments' 'This is the thread-like edges which connect the flesh to the shell.  A delicious, soft texture and mild taste.' 200)#('Hotategai' 'Scallop' 'The part of the scallop that is eaten is the edible adductor muscle that opens the animal''s shell.  It''s pale beige-yellow in color with a brown, crusty edging.  The taste is delicate, and melts in your mouth. ' 250)#('Iwashi' 'Sardine' 'Shiny, slippery, and ''fishy,'' the taste of sardine sushi is slightly oily.  Sardine must be eaten shortly after it has been caught if it''s to be used in Sushi.  Often eaten with soy sauce mixed with ginger and onion.' 175)#('Kazunoko' 'Herring Roe' 'An expensive delicacy which is also known as ''yellow diamonds'' (because of the color and expense).  Revered in Japan, it''s usually eaten on special occasions.  An acquired taste for Westerners.' 475)#('Kisu' 'Sillago' 'A fresh Sillago has bright-gold skin. The taste is mild and delicate.' 225)#('Ohtoro Maguro' 'Fattiest Tuna' 'Fattiest part of the fatty tuna belly.  It is light pink in color and melts in your mouth.  Mild with a rich texture.  This is the most expensive of the three types of Maguro sushi.' 325)#('Shima-Aji' 'Yellow Jack' 'A slice of white silvery shima-aji eaten with beef-steak plant and fresh ginger is delicious.  The flavor is delicate and the texture of good, fresh yellow jack is smooth and slides down easily.' 180)#('Aji' 'Horse Mackerel' 'This fish is pink-grey and shiny.  When it''s fresh, the flesh is almost transparent.  The texture is slippery and easy on the tongue--it should melt in your mouth.  Aji is often eaten with soy sauce containing onion, ginger and garlic.' 250)#('Inarizushi' 'Stuffed Bean Curd Rolls' '' 200)#('Kappa Maki' 'Cucumber Rolls' '' 150)#('Sakura Denbu' 'Shredded Cod Fish' 'Seasoned shredded cod fish.' 200)#('California Roll' '' 'Rice, cucumber, crab meat, & avacado.' 250)#('Futo-Maki' 'Fat Rolls' 'Kampyo gourd, oboro or denbu pink powder, tamago omelet, and shiitake mushrooms. May also include bamboo shoots, cucumbers, cooked eel, cooked carrots, and cooked spinach or other greens.' 275)#('Tekkamaki' 'Tuna Roll' 'Tuna wrapped in rice and nori.' 225)#('Chakinzushi' 'Omelet-wrapped Sushi' 'Sushi rice in a thin omelet wrapper shaped and tied like a lady''s drawstring purse.  Sometimes a single pea or small shrimp decorates the ruffled part of the wrapper.' 300)#('Shiro Maguro' 'Albacore Tuna' '' 300)#('Hamachi' 'Yellowtail' '' 325)#('Kohada' 'Gizzard Shad' 'This Japanese shad is a member of the herring family, and is a small silver-grey fish, with a black spotted back.  Marinated in vinegar and cross- hatched before serving.  The taste is strong, and a favorite for herring fans.' 275)#('Katsuo' 'Bonito' '' 275)#('Saba' 'Mackerel' '' 200)#('Sake' 'Salmon' '' 250)#('Tai' 'Red Snapper' '' 250)#('Hirame' 'Flounder' 'Good hirame is a sushi gourmet''s delight.  Since it''s cut from such a small part of the fish, it''s scarce and expensive.  In appearance, it''s pale pink and smooth, with no markings.  The taste is delicate and buttery.' 350)#('Suzuki' 'Sea Bass' '' 300)#('Unagi' 'Freshwater Eel' '' 300)#('Ika' 'Cuttlefish' 'When fresh, cuttlefish is almost transparent.  It''s butter-like and melts in your mouth.  The texture is sticky.  Cuttlefish is smoky white and glistens. Also popular grilled and mixed with ginger soy sauce.  Also good with lemon for Western palettes.' 325)#('Awabi' 'Abalone' 'Abalone or ''sea snail'' is another sushi favorite.  The color ranges from beige-grey to pinkish yellow.  Fresh abalone is not too rubbery, and is very subtle in flavor.' 300)#('Mirugai' 'Horse Clam' 'Also known as Geoduck.  This is a large, hard-shelled clam which is yellowish-white in color.  It has a slight ''shellfish'' taste and an elastic type texture. The part used in sushi is the long muscular siphon which projects from the shell.' 350)#('Akagai' 'Ark Shell Clam' 'The softest texture of any shellfish. Akagai has an attractive pink-orange color.  The taste is delicate and slightly sweet.' 300)#('Kobashira' 'Trough Shell (Small) Scallop' 'The edible adductor muscle that opens the shell of the aoyagi.  More prized than the aoyagi itself.' 500)#('Kani' 'Crab' '' 250)#('Ebi' 'Cooked Prawn' '' 225)#('Ikura' 'Salmon Roe' 'Appealing to the eye with its bright red color.  Very appetizing with a delicate taste.' 325)#('Tobiko ' 'Flying-Fish Roe' '' 350)#('Masago ' 'Capelin Roe' '' 350)#('Anago' 'Conger Eel' 'Anago is one of the few pre-cooked sushi.  It is grilled and basted with a thick teriyaki sauce.  The soft, slighty warm eel, the sweet soy sauce, and the vinegared rice make a particularly delicious sushi.' 300)#('Uni' 'Sea Urchin Roe' 'A prized delicacy with its oily, rich texture.  Mustard color, paste-like topping is held in place by a band of nori seaweed.' 400)) asSortedCollection: [:a :b | a first <= b first]! !!WAStoreItem methodsFor: 'accessing' stamp: 'ab 5/25/2003 13:27'!description	^ description! !!WAStoreItem methodsFor: 'accessing' stamp: 'ab 5/25/2003 13:27'!description: aString	description := aString! !!WAStoreItem methodsFor: 'private' stamp: 'ab 5/25/2003 13:30'!matches: aString	^ (title includesSubstring: aString caseSensitive: false)		or: [description includesSubstring: aString caseSensitive: false]! !!WAStoreItem methodsFor: 'accessing' stamp: 'ab 5/25/2003 13:28'!price	^ price! !!WAStoreItem methodsFor: 'accessing' stamp: 'ab 5/25/2003 13:28'!price: cents	price := cents! !!WAStoreItem methodsFor: 'printing' stamp: 'avi 12/9/2003 13:17'!printString	^ self title! !!WAStoreItem methodsFor: 'accessing' stamp: 'ab 5/31/2003 23:17'!subtitle	^ subtitle! !!WAStoreItem methodsFor: 'accessing' stamp: 'avi 8/29/2004 14:12'!subtitle: aString	subtitle := aString! !!WAStoreItem methodsFor: 'accessing' stamp: 'ab 5/25/2003 13:27'!title	^ title! !!WAStoreItem methodsFor: 'accessing' stamp: 'ab 5/25/2003 13:27'!title: aString	title := aString! !"Store"!!MAAdaptiveModel commentStamp: 'lr 6/2/2006 00:30' prior: 0!I am an adaptive model referencing a dynamic description of myself and a dictionary mapping those descriptions to actual values.!!MACompatibility commentStamp: 'lr 5/27/2006 17:07' prior: 0!I am providing all the platform compatibility code on my class side, so that porting to different Smalltalk dialects can concentrate in a single place.!!MANamedBuilder commentStamp: 'lr 4/10/2007 21:09' prior: 0!I dynamically build container descriptions from class-side methods using a simple naming convention for the selector names:# The method ==#defaultContainer== is called to retrieve the container instance.# All the unary methods starting with the selector ==#description== are called and should return a valid description to be added to the container.# All the keyword messages with one argument having a prefix of a method selected in step 2 will be called with the original description to further refine its definition.!!MAFileModel commentStamp: 'lr 9/28/2007 08:04' prior: 0!I represent a file with filename, mimetype and contents within the Magritte framework.There are different file-models that you can use with Magritte. The idea is that you set the ==#kind:== of an MAFileDescription to one of the subclasses of ==*MAFileModel*==.!!MAExternalFileModel commentStamp: 'lr 9/28/2007 08:11' prior: 0!I manage the file-data I represent on the file-system. From the programmer this looks the same as if the file would be in memory (==*MAMemoryFileModel*==), as it is transparently loaded and written out as necessary.- The ==#baseDirectory== is the place where Magritte puts its file-database. Keep this value to nil to make it default to a subdirectory next to the Squeak image.- The ==#baseUrl== is a nice optimization to allow Apache (or any other Web Server) to directly serve the files. ==#baseUrl== is an absolute URL-prefix that is used to generate the path to the file. If you have specified one the file data does not go trough the image anymore, but instead is directly served trough the properly configured Web Server.The files are currently stored using the following scheme:=/files/9d/bsy8kyp45g0q7blphknk48zujap2wd/earthmap1k.jpg=1     2   3                              4#Is the #baseDirectory as specified in the settings.#Are 256 directories named '00' to 'ff' to avoid having thousands of files in the same directory. Unfortunately this leads to problems with the Squeak file primitives and some filesystems don't handle that well. This part is generated at random.#This is a secure id, similar to the Seaside session key. It is generated at random and provides a security system that even works trough Apache (you have to disable directory listings of course): if you don't know the file-name you cannot access the file.#This is the original file-name. Subclasses might want to store other cached versions of the same file there, for example resized images, etc.!!MAMemoryFileModel commentStamp: 'lr 9/28/2007 08:06' prior: 0!I represent a file using a ByteArray in the object memory. I am not practicable for big files: use me for development and testing only.!!MAObject commentStamp: 'lr 5/17/2006 14:07' prior: 0!I provide functionality available to all Magritte objects. I implement a dictionary of properties, so that extensions can easily store additional data.!!MAAccessor commentStamp: 'lr 4/10/2007 21:03' prior: 0!I am the abstract superclass to all accessor strategies. Accessors are used to implement different ways of accessing (reading and writing) data from instances using a common protocol: data can be uniformly read and written using ==#readFrom:== respectively ==#write:to:==.!!MADelegatorAccessor commentStamp: 'lr 2/14/2008 09:56' prior: 0!My access strategy is to delegate to the next accessor. I am not that useful all by myself, but subclasses might override certain methods to intercept access.!!MAChainAccessor commentStamp: 'lr 4/10/2007 21:03' prior: 0!I am an access strategy used to chain two access strategies. To read and write a value the ==accessor== is performed on the given model and the result is passed into the ==next== accessor.!!MADictionaryAccessor commentStamp: 'lr 4/10/2007 21:07' prior: 0!I am an access strategy to be used on dictionaries. I use my ==key== to read from and write to indexed collections.!!MAIdentityAccessor commentStamp: 'lr 2/12/2006 20:09' prior: 0!I am a read-only access strategy and I answer the model itself when being read.!!MANullAccessor commentStamp: 'lr 5/29/2006 09:21' prior: 0!I am a null access strategy and I should be neither read nor written. I am still comparable to other strategies by holding onto a unique-identifier.!!MAPluggableAccessor commentStamp: 'lr 2/12/2006 20:04' prior: 0!I am an access strategy defined by two block-closures. The read-block expects the model as its first argument and is used to retrieve a value. The write-block expects the model as its first and the value as its second argument and is used to write a value to the model.!!MASelectorAccessor commentStamp: 'lr 6/2/2006 10:03' prior: 0!I am the most common access strategy defined by a read- and a write-selector. I am mostly used together with standard getters and setters as usually defined by the accessing protocol. If there is only a read-selector specified, the write selector will be deduced automatically by adding a colon to the read-selector.!!MAVariableAccessor commentStamp: 'lr 5/27/2006 17:20' prior: 0!I am an access strategy that directly reads from and writes to instance variables. I strongly violate encapsulation and most of the time I should be replaced by an instance of *MASelectorAccessor*.!!MADescription commentStamp: 'lr 2/5/2009 12:42' prior: 0!I am the root of the description hierarchy in Magritte and I provide most of the basic properties available to all descriptions. If you would like to annotate your model with a description have a look at the different subclasses of myself.!!ExampleIf your model has an instance variable called ==title== that should be used to store the title of the object, you could add the following description to your class:=Document class>>descriptionTitle=	^ MAStringDescription new=		autoAccessor: #title;=		label: 'Title';=		priority: 20;=		beRequired;=		yourself.The selector ==#title== is the name of the accessor method used by Magritte to retrieve the value from the model. In the above case Magritte creates the accessor method and the instance variable automatically, if necessary. The label is used to give the field a name and will be printed next to the input box if a visual GUI is created from this description.The write-accessor is automatically deduced by adding a colon to the read-selector, in this example ==#title:==. You can specify your own accessor strategy using one of the subclasses of ==*MAAccessor*==. If you have multiple description within the same object, the ==#priority:== field is used to order them. Assign a low priority to have descriptions traversed first.!!MAContainer commentStamp: 'lr 4/10/2007 21:06' prior: 0!I am a container holding a collection of descriptions, all instances of subclasses of *MAElementDescription*. I keep my children within an ==OrderedCollection==, but I don't sort them according to their priority.I fully support the collection protocol: descriptions can be added and removed. Moreover I implement most enumeration methods, so that users are able to iterate (==do:==), filter (==select:==, ==reject:==), transform (==collect:==), extract (==detect:==, ==detect:ifNone:==), and test (==allSatisfy:==, ==anySatisfy:==, ==noneSatisfy:==) my elements.!!MAPriorityContainer commentStamp: 'lr 2/12/2006 19:34' prior: 0!I am a container holding a collection of descriptions and I keep them sorted according to their priority.!!MAElementDescription commentStamp: '<historical>' prior: 0!I am an abstract description for all basic description types.!!MABooleanDescription commentStamp: 'lr 4/10/2007 21:03' prior: 0!I am a description of the Boolean values ==true== and ==false==. My visual representation could be a check-box.!!MAClassDescription commentStamp: 'lr 4/10/2007 21:03' prior: 0!I am a description of Smalltalk classes, possible values can be any of ==Smalltalk allClasses==.!!MAColorDescription commentStamp: 'lr 4/10/2007 21:03' prior: 0!I am a description of colors, possible values are instances of ==Color==. My visual representation could be a color-chooser.!!MAFileDescription commentStamp: 'lr 5/17/2006 14:44' prior: 0!I am a description of files, their contents, filename and mime-type. Possible values include instances of *MAFileModel*. My visual representation could be a file-upload dialog.!!MAMagnitudeDescription commentStamp: 'lr 4/10/2007 21:08' prior: 0!I am an abstract description for subclasses of ==Magnitude==. The range of accepted values can be limited using the accessors ==min:== and ==max:==.!!MADateAndTimeDescription commentStamp: 'pmm 8/31/2009 20:11' prior: 0!I am a description of date and times, possible values are instances of ==DateAndTime==. My visual representation could be a date- and time-picker.!!MADateDescription commentStamp: 'lr 4/10/2007 21:06' prior: 0!I am a description of dates, possible values are instances of ==Date==. My visual representation could be a date-picker.!!MADurationDescription commentStamp: 'lr 4/10/2007 21:07' prior: 0!I am a description of durations, possible values are instances of ==Duration==.!!MANumberDescription commentStamp: 'lr 4/10/2007 21:09' prior: 0!I am a description of numbers, possible values are instances of ==Number== and all its subclasses, including ==Integer== and ==Float==. My visual representation could be a number input-box or even a slider-control.!!MATimeDescription commentStamp: 'lr 4/10/2007 21:10' prior: 0!I am a description of times, possible values are instances of ==Time==. My visual representation could be a time-picker.!!MATimeStampDescription commentStamp: 'lr 4/10/2007 21:11' prior: 0!I am a description of timestamps, possible values are instances of ==TimeStamp==. My visual representation could be a date- and time-picker.!!MAReferenceDescription commentStamp: 'lr 2/12/2006 19:38' prior: 0!I am an abstract superclass for descriptions holding onto another description.!!MAOptionDescription commentStamp: 'lr 4/10/2007 21:09' prior: 0!I am an abstract description of different options the user can choose from. My instance variable ==options== references the options I am representing. The options can be sorted or unsorted.!!MAMultipleOptionDescription commentStamp: 'lr 4/10/2007 21:09' prior: 0!I am a description of multiple options, possible options are stored within the ==options== field, possible values are instances of ==Collection==. My visual representation could be a multi-select list or a group of check-boxes.!!MASingleOptionDescription commentStamp: 'lr 4/10/2007 21:10' prior: 0!I am a description of a single option, possible values are stored within the ==options== field, but I might also be extensible so that the user can add its own option. My visual representation could be a drop-down list or a group of option-buttons.!!MARelationDescription commentStamp: 'lr 4/10/2007 21:10' prior: 0!I am an abstract description for descriptions representing a relation. My instance variable ==classes== references a collection of possible classes that I can relate to. If required the reference description will be automatically built from this list of classes.!!MAToManyRelationDescription commentStamp: 'lr 4/10/2007 21:11' prior: 0!I am a description of an one-to-many relationship, possible values are instances of ==Collection==.!!MAToManyScalarRelationDescription commentStamp: 'pmm 11/3/2006 17:48' prior: 0!Like MAToManyRelationDescription but for scalar values.!!MAToOneRelationDescription commentStamp: '<historical>' prior: 0!I am a description of an one-to-one relationship.!!MATableDescription commentStamp: 'lr 5/17/2006 14:44' prior: 0!I am a description of tables, their cells and labels. I hold a reference to the description of my cells, that are all described using the same description. Possible values include instances of *MATableModel*.!!MATokenDescription commentStamp: 'lr 4/10/2007 21:11' prior: 0!I am a description of tokens all described by the referenced description, possible values are instances of ==SequenceableCollection==.!!MAStringDescription commentStamp: 'lr 4/10/2007 21:10' prior: 0!I am a description of strings, possible values are instances of ==String==. My visual representation could be a single line text-field. Use ==*MAMemoDescription*== for multi-line strings.!!MAMemoDescription commentStamp: 'lr 4/10/2007 21:09' prior: 0!I am a description of multiline strings, possible values are instances of ==String==. My visual representation could be a text-area field.!!MAPasswordDescription commentStamp: 'lr 4/10/2007 21:09' prior: 0!I am a description of a password string, possible values are instances of ==String==. My visual representation could be a password field, where there are stars printed instead of the characters the user enters.!!MASymbolDescription commentStamp: 'lr 4/10/2007 21:10' prior: 0!I am a description of symbols, possible values are instances of ==Symbol==.!!MAMemento commentStamp: 'lr 9/13/2007 09:53' prior: 0!I am an abstract memento. I reference a model I am working on and the description currently used to describe this model.!!MACachedMemento commentStamp: 'lr 5/29/2006 09:22' prior: 0!I cache values being read and written without touching the model. When committing changes, the modifications will be propagated to the model all at once.!!MACheckedMemento commentStamp: 'lr 5/17/2006 15:12' prior: 0!I cache values as my superclass and also remember the original values of the model at the time the cache is built. With this information I am able to detect edit conflicts and can prevent accidental loss of data by merging the changes.!!MAStraitMemento commentStamp: 'lr 5/17/2006 15:02' prior: 0!I am a memento that forwards read- and write-access directly to the model. I can mostly be replaced with the model itself.!!MATableModel commentStamp: 'lr 4/10/2007 21:10' prior: 0!I am a model class representing a table within the Magritte framework. Internally I store my cells within a flat array, however users may access data giving ''row'' and ''column'' coordinates with ==#at:at:== and ==#at:at:put:==. I can support reshaping myself, but of course this might lead to loss of data-cells.!!MAVisitor commentStamp: 'lr 5/17/2006 15:27' prior: 0!I am a visitor responsible to visit Magritte descriptions. I am an abstract class providing a default implementation for concrete visitors. The protocol I am implementing reflects the hierarchy of *MADescription* with its subclasses so that visiting a specific class automatically calls less specific implementations in case the specific implementation has been left out. The code was automatically created using code on my class-side.!!MAError commentStamp: 'lr 5/17/2006 15:14' prior: 0!I represent a generic Magritte error.!!MAReadError commentStamp: 'lr 5/17/2006 15:14' prior: 0!I am an error that gets raised when there is problem reading serialized data.!!MAValidationError commentStamp: 'lr 5/17/2006 15:15' prior: 0!I am a generic validation error. I reference the description that caused the validation error.!!MAConditionError commentStamp: 'lr 5/30/2006 23:33' prior: 0!I am an error that is raised whenever a user-defined condition is failing.!!MAConflictError commentStamp: 'lr 5/17/2006 15:16' prior: 0!I am an error that is raised whenever there is an edit conflict.!!MAKindError commentStamp: 'lr 5/17/2006 15:16' prior: 0!I am an error that is raised whenever a description is applied to the wrong type of data.!!MAMultipleErrors commentStamp: 'lr 5/17/2006 15:18' prior: 0!I am an error that is raised whenever there are multiple validation rules failing.!!MARangeError commentStamp: 'lr 5/17/2006 15:17' prior: 0!I am an error that is raised whenever a described value is out of bounds.!!MARequiredError commentStamp: 'lr 5/17/2006 15:17' prior: 0!I am an error that is raised whenever a required value is not supplied.!!MAWriteError commentStamp: 'lr 5/17/2006 15:14' prior: 0!I am an error that gets raised when there is problem writing serialized data.!!MAProxyObject commentStamp: 'lr 5/17/2006 15:29' prior: 0!I represent an abstract proxy object, to be refined by my subclasses.!!MADynamicObject commentStamp: 'lr 4/10/2007 21:08' prior: 0!A dynamic object can be used for almost any property within Magritte that is not static but calculated dynamically. This is a shortcut to avoid having to build context sensitive descriptions manually over and over again, however there are a few drawbacks: - Some messages sent to this proxy, for example ==#class== and ==#value==, might not get resolved properly.- Raising an unhandled exception will not always open a debugger on your proxy, because tools are unable to properly work with the invalid object and might even crash your image.!!BlockContext methodsFor: '*magritte-model-converting' stamp: 'lr 3/9/2007 14:39'!asDynamicObject	"Answer an object that will automatically evaluate the receiver when it receives a message. It will eventually pass the message to the resulting object. Use with caution, for details see *MADynamicObject*."	^ MADynamicObject on: self! !!BlockClosure methodsFor: '*magritte-model' stamp: 'dkh 01/28/2008 12:48'!asDynamicObject	"Answer an object that will automatically evaluate the receiver when it receives a message. It will eventually pass the message to the resulting object. Use with caution, for details see *MADynamicObject*."	^ MADynamicObject on: self! !!MAAdaptiveModel class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:33'!description: aDescription	^ self new		description: aDescription;		yourself! !!MAAdaptiveModel class methodsFor: 'instance creation' stamp: 'lr 9/30/2007 18:14'!new	^ self basicNew initialize! !!MAAdaptiveModel methodsFor: 'accessing-configuration' stamp: 'lr 3/9/2006 11:32'!defaultDescription	^ MAContainer new! !!MAAdaptiveModel methodsFor: 'accessing-configuration' stamp: 'lr 3/9/2006 11:32'!defaultDictionary	^ Dictionary new! !!MAAdaptiveModel methodsFor: 'accessing' stamp: 'lr 5/17/2006 14:13'!description	"Answer the description of the receiver."	^ description! !!MAAdaptiveModel methodsFor: 'accessing' stamp: 'lr 6/2/2006 00:12'!description: aDescription	description := aDescription! !!MAAdaptiveModel methodsFor: 'initialization' stamp: 'lr 9/30/2007 18:14'!initialize	self description: self defaultDescription.	self values: self defaultDictionary! !!MAAdaptiveModel methodsFor: 'model' stamp: 'lr 4/10/2007 21:23'!readUsing: aDescription	"Answer the actual value of ==aDescription== within the receiver, ==nil== if not present."	^ self values at: aDescription ifAbsent: [ nil ]! !!MAAdaptiveModel methodsFor: 'accessing' stamp: 'lr 5/17/2006 14:14'!values	"Answer a dictionary mapping description to actual values."	^ values! !!MAAdaptiveModel methodsFor: 'accessing' stamp: 'lr 6/2/2006 00:12'!values: aDictionary	values := aDictionary! !!MAAdaptiveModel methodsFor: 'model' stamp: 'lr 4/10/2007 21:23'!write: anObject using: aDescription	"Set ==anObject== to be that actual value of the receiver for ==aDescription==."	self values at: aDescription put: anObject! !!MACompatibility class methodsFor: 'environment' stamp: 'lr 9/12/2007 17:27'!allSubInstancesOf: aClass do: aBlock	"Evaluate the aBlock for all instances of aClass and all its subclasses."	aClass allSubInstancesDo: aBlock! !!MACompatibility class methodsFor: 'user-interface' stamp: 'lr 2/28/2007 12:25'!choose: aString from: aCollection	"Display aString to the user and let him choose any of the items in aCollection."	| index strings list |	list := aCollection asOrderedCollection.	strings := list collect: [ :each | each asString ].	index := self		toolbuilder: [ :tb | tb chooseFrom: strings title: aString ]		else: [ PopUpMenu withCaption: aString chooseFrom: strings ].	^ index isZero		ifFalse: [ list at: index ]! !!MACompatibility class methodsFor: 'environment' stamp: 'lr 3/9/2006 11:32'!classNamed: aString	"Return the class named aString, nil if the class can't be found."	^ Smalltalk classNamed: aString! !!MACompatibility class methodsFor: 'classes' stamp: 'lr 9/3/2009 17:07'!colorClass	^ Color! !!MACompatibility class methodsFor: 'user-interface' stamp: 'lr 9/12/2007 17:27'!confirm: aString	"Display aString to the user and let him confirm."	^ self		toolbuilder: [ :tb | tb confirm: aString ]		else: [ PopUpMenu confirm: aString ]! !!MACompatibility class methodsFor: 'user-interface' stamp: 'lr 9/12/2007 17:27'!inform: aString	"Display aString to the user."	self		toolbuilder: [ :tb | tb inform: aString ]		else: [ PopUpMenu inform: aString ]! !!MACompatibility class methodsFor: 'user-interface' stamp: 'lr 2/8/2009 19:20'!openWorkspace: aContentsString titled: aTitleString	"Open a new workspace with the contents aContentsString and the title aTitleString."	Workspace new		contents: aContentsString;		openLabel: aTitleString! !!MACompatibility class methodsFor: 'environment' stamp: 'lr 2/8/2009 19:20'!referenceStream: aReadWriteStream	"Return a stream instance to operate on aReadWriteStream being able to serialize and deserialize objects by sending #nextPut: and #next. Squeak: The implementation of ReferenceStream doesn't work well together with the default WriteStream implementation, therefor we have to change it on the fly."	^ ReferenceStream on: (aReadWriteStream class = WriteStream		ifTrue: [ RWBinaryOrTextStream on: aReadWriteStream contents ]		ifFalse: [ aReadWriteStream ])! !!MACompatibility class methodsFor: 'user-interface' stamp: 'DamienCassou 9/29/2009 13:00'!request: aString default: anObject	"Display aString and requests an input from the user, whereas anObject is the default value."	| result |	result := self		toolbuilder: [ :tb | tb request: aString initialAnswer: anObject ]		else: [ FillInTheBlankMorph request: aString initialAnswer: anObject ].	^ result isEmptyOrNil		ifTrue: [ nil ]		ifFalse: [ result ]! !!MACompatibility class methodsFor: 'user-interface' stamp: 'lr 2/28/2007 12:19'!toolbuilder: aBlock else: anotherBlock	^ (Smalltalk hasClassNamed: #UIManager)		ifTrue: [ aBlock value: (Smalltalk classNamed: #UIManager) default ]		ifFalse: [ anotherBlock value ]! !!MACompatibility class methodsFor: 'environment' stamp: 'TestRunner 1/10/2010 00:21'!uuid	"Answer a random object that is extremely likely to be unique over space and time."	^ ByteArray withAll: UUID new! !!MADescriptionBuilder class methodsFor: 'accessing' stamp: 'lr 7/10/2009 16:33'!default	^ Default ifNil: [ Default := MANamedBuilder new ]! !!MADescriptionBuilder class methodsFor: 'accessing' stamp: 'lr 3/27/2006 13:31'!default: aBuilder	Default := aBuilder! !!MADescriptionBuilder class methodsFor: 'building' stamp: 'lr 3/27/2006 13:29'!for: anObject	^ self default for: anObject! !!MADescriptionBuilder class methodsFor: 'instance creation' stamp: 'lr 1/26/2008 09:58'!new	^ self basicNew initialize! !!MADescriptionBuilder class methodsFor: 'initialization' stamp: 'lr 7/5/2009 10:52'!unload	self default finalize.	self default: nil! !!MADescriptionBuilder methodsFor: 'private' stamp: 'lr 2/14/2007 09:09'!build: anObject	self subclassResponsibility! !!MADescriptionBuilder methodsFor: 'initialization' stamp: 'lr 3/27/2006 13:55'!finalize	super finalize.	self flush; unregister! !!MADescriptionBuilder methodsFor: 'actions' stamp: 'lr 3/27/2006 13:41'!flush	cache := IdentityDictionary new! !!MADescriptionBuilder methodsFor: 'accessing' stamp: 'lr 9/12/2007 17:26'!for: anObject	^ cache at: anObject ifAbsentPut: [ self build: anObject ]! !!MADescriptionBuilder methodsFor: 'initialization' stamp: 'lr 1/26/2008 09:58'!initialize	self flush; register! !!MADescriptionBuilder methodsFor: 'events' stamp: 'lr 3/27/2006 13:55'!modified: anEvent	self flush! !!MADescriptionBuilder methodsFor: 'actions' stamp: 'lr 3/27/2006 13:36'!register	SystemChangeNotifier uniqueInstance		notify: self ofSystemChangesOfItem: #method change: #Added using: #modified:;		notify: self ofSystemChangesOfItem: #method change: #Modified using: #modified:;		notify: self ofSystemChangesOfItem: #method change: #Removed using: #modified:! !!MADescriptionBuilder methodsFor: 'actions' stamp: 'lr 3/27/2006 14:45'!unregister	SystemChangeNotifier uniqueInstance		noMoreNotificationsFor: self! !!MANamedBuilder methodsFor: 'private' stamp: 'lr 2/14/2007 09:11'!build: anObject	| selectors container description |	selectors := anObject class allSelectors select: [ :each | each isDescriptionSelector ].	container := self build: anObject for: self containerSelector in: selectors.	^ (selectors select: [ :each | each isDescriptionDefinition ])		inject: (cache at: anObject put: container)		into: [ :result :each |			self containerSelector = each ifFalse: [				description := self build: anObject for: each in: selectors.				description isDescription					ifTrue: [ result add: description ] ].			result ]! !!MANamedBuilder methodsFor: 'private' stamp: 'lr 8/23/2008 11:51'!build: anObject for: aSelector in: aCollection	^ (aCollection select: [ :each | each isDescriptionExtension: aSelector ])		inject: (anObject perform: aSelector)		into: [ :result :each | 			result isNil 				ifFalse: [ anObject perform: each with: result ] ]! !!MANamedBuilder methodsFor: 'configuration' stamp: 'lr 2/14/2007 09:03'!containerSelector	^ #descriptionContainer! !!MAExternalFileModel class methodsFor: 'accessing' stamp: 'lr 9/28/2007 07:43'!baseDirectory	^ baseDirectory ifNil: [ FileDirectory default directoryNamed: 'files' ]! !!MAExternalFileModel class methodsFor: 'accessing' stamp: 'lr 9/28/2007 07:42'!baseDirectory: aStringOrDirectory	"Defines the base-directory where the files are stored. If this value is set to nil, it default to a subdirectory of of the current image-location."	baseDirectory := aStringOrDirectory isString		ifTrue: [ FileDirectory on: aStringOrDirectory ]		ifFalse: [ aStringOrDirectory ]! !!MAExternalFileModel class methodsFor: 'accessing' stamp: 'lr 9/28/2007 07:44'!baseUrl	^ baseUrl! !!MAExternalFileModel class methodsFor: 'accessing' stamp: 'lr 9/28/2007 07:42'!baseUrl: aString	"Defines the base-URL where the files are served from, when using an external web server. This setting is left to nil by default, causing the files to be served trough the image."	baseUrl := aString isNil ifFalse: [		aString last = $/			ifFalse: [ aString ]			ifTrue: [ aString copyUpToLast: $/ ] ]! !!MAExternalFileModel class methodsFor: 'public' stamp: 'lr 9/9/2008 00:02'!garbageCollect	"Remove obsolete files from the file-system that do not have a counterpart in memory anymore. This method has to be called manually and is not intended to be portable."		| mark sweep |	mark := self allInstances		collect: [ :each | each directory pathName ].	sweep := Array with: self baseDirectory.	self locationDefinition do: [ :definition |		sweep := sweep gather: [ :directory |			directory entries isEmpty				ifTrue: [ directory recursiveDelete ].			(directory directoryNames				select: [ :each | each size = definition first ])				collect: [ :each | directory directoryNamed: each ] ] ].	sweep do: [ :directory |		(mark includes: directory pathName)			ifFalse: [ directory recursiveDelete ] ]! !!MAExternalFileModel class methodsFor: 'initialization' stamp: 'lr 9/28/2007 08:20'!initialize	baseDirectory := baseUrl := nil! !!MAExternalFileModel class methodsFor: 'initialization' stamp: 'lr 9/8/2008 23:26'!locationDefinition	^ #( ( 2 '63450af8d9c2e17b' ) ( 30 'iaojv41bw67e0tud5m9rgplqfy8x3cs2kznh' ) )! !!MAExternalFileModel methodsFor: 'comparing' stamp: 'lr 11/6/2009 15:38'!= anObject    ^ super = anObject and: [ self location = anObject location ]! !!MAExternalFileModel methodsFor: 'configuration' stamp: 'lr 9/28/2007 07:43'!baseDirectory	^ self class baseDirectory! !!MAExternalFileModel methodsFor: 'configuration' stamp: 'lr 9/28/2007 07:45'!baseUrl	^ self class baseUrl! !!MAExternalFileModel methodsFor: 'accessing' stamp: 'lr 10/18/2007 18:21'!contents	| stream |	^ (self directory exists and: [ self directory fileExists: self filename ])		ifFalse: [ ByteArray new ]		ifTrue: [			stream := self readStream.			[ stream contents ]				ensure: [ stream close ] ]! !!MAExternalFileModel methodsFor: 'accessing' stamp: 'nfr 10/17/2007 12:26'!contents: aByteArray	| stream |	stream := self writeStream.	[ stream nextPutAll: aByteArray asByteArray ]		ensure: [ stream close ].	super contents: aByteArray! !!MAExternalFileModel methodsFor: 'accessing-dynamic' stamp: 'lr 9/28/2007 07:44'!directory	^ self location		inject: self baseDirectory		into: [ :result :each | result directoryNamed: each ]! !!MAExternalFileModel methodsFor: 'initialization' stamp: 'lr 11/18/2007 10:34'!finalize	| directory |	directory := self directory.	directory exists		ifTrue: [ directory recursiveDelete ].	[ (directory := directory containingDirectory) entries isEmpty ]		whileTrue: [ directory recursiveDelete ].	super finalize.	location := nil! !!MAExternalFileModel methodsFor: 'comparing' stamp: 'lr 11/6/2009 15:38'!hash	^ super hash bitXor: self location hash! !!MAExternalFileModel methodsFor: 'accessing-dynamic' stamp: 'lr 1/26/2007 18:19'!location	^ location ifNil: [ location := self uniqueLocation: self locationDefinition ]! !!MAExternalFileModel methodsFor: 'configuration' stamp: 'lr 9/8/2008 23:26'!locationDefinition	^ self class locationDefinition! !!MAExternalFileModel methodsFor: 'copying' stamp: 'lr 3/28/2007 10:27'!postCopy	| previous |	super postCopy.	previous := self contents.	location := nil.	self contents: previous! !!MAExternalFileModel methodsFor: 'accessing-dynamic' stamp: 'lr 1/26/2007 18:16'!readStream	^ (self directory readOnlyFileNamed: self filename) binary! !!MAExternalFileModel methodsFor: 'private' stamp: 'lr 9/28/2007 07:44'!uniqueLocation: aLocationDefinition	"Finds an unique path to be used and create the necessary sub directories."	| valid result directory definition |	valid := false.	result := Array new: aLocationDefinition size.	[ valid ] whileFalse: [		directory := self baseDirectory assureExistence.		result keysAndValuesDo: [ :index :value |			definition := aLocationDefinition at: index.			result at: index put: ((String new: definition first)				collect: [ :each | definition second atRandom ]).			directory := directory				directoryNamed: (result at: index).			directory exists ifFalse: [				directory assureExistence.				valid := true ] ] ].	^ result! !!MAExternalFileModel methodsFor: 'accessing-dynamic' stamp: 'lr 1/26/2007 18:16'!writeStream	^ (self directory forceNewFileNamed: self filename) binary! !!MAFileModel class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultMimeType	^ 'application/octet-stream'! !!MAFileModel class methodsFor: 'accessing-defaults' stamp: 'lr 4/9/2009 09:57'!defaultMimeTypes	^ #( '323' 'text/h323' 'acx' 'application/internet-property-stream' 'ai' 'application/postscript' 'aif' 'audio/x-aiff' 'aifc' 'audio/x-aiff' 'aiff' 'audio/x-aiff' 'asc' 'text/plain' 'asf' 'video/x-ms-asf' 'asr' 'video/x-ms-asf' 'asx' 'video/x-ms-asf' 'au' 'audio/basic' 'avi' 'video/x-msvideo' 'axs' 'application/olescript' 'bas' 'text/plain' 'bcpio' 'application/x-bcpio' 'bin' 'application/octet-stream' 'bmp' 'image/bmp' 'c' 'text/plain' 'cat' 'application/vnd.ms-pkiseccat' 'cc' 'text/plain' 'ccad' 'application/clariscad' 'cdf' 'application/x-netcdf' 'cer' 'application/x-x509-ca-cert' 'class' 'application/octet-stream' 'clp' 'application/x-msclip' 'cmx' 'image/x-cmx' 'cod' 'image/cis-cod' 'cpio' 'application/x-cpio' 'cpt' 'application/mac-compactpro' 'crd' 'application/x-mscardfile' 'crl' 'application/pkix-crl' 'crt' 'application/x-x509-ca-cert' 'csh' 'application/x-csh' 'css' 'text/css' 'dcr' 'application/x-director' 'der' 'application/x-x509-ca-cert' 'dir' 'application/x-director' 'dll' 'application/x-msdownload' 'dms' 'application/octet-stream' 'doc' 'application/msword' 'dot' 'application/msword' 'drw' 'application/drafting' 'dtd' 'application/xml-dtd' 'dvi' 'application/x-dvi' 'dwg' 'application/acad' 'dxf' 'application/dxf' 'dxr' 'application/x-director' 'eps' 'application/postscript' 'etx' 'text/x-setext' 'evy' 'application/envoy' 'exe' 'application/octet-stream' 'ez' 'application/andrew-inset' 'f' 'text/plain' 'f90' 'text/plain' 'fif' 'application/fractals' 'fli' 'video/x-fli' 'flr' 'x-world/x-vrml' 'gif' 'image/gif' 'gtar' 'application/x-gtar' 'gz' 'application/x-gzip' 'h' 'text/plain' 'hdf' 'application/x-hdf' 'hh' 'text/plain' 'hlp' 'application/winhlp' 'hqx' 'application/mac-binhex40' 'hta' 'application/hta' 'htc' 'text/x-component' 'htm' 'text/html' 'html' 'text/html' 'htt' 'text/webviewhtml' 'ice' 'x-conference/x-cooltalk' 'ico' 'image/vnd.microsoft.icon' 'ief' 'image/ief' 'iges' 'model/iges' 'igs' 'model/iges' 'iii' 'application/x-iphone' 'ins' 'application/x-internet-signup' 'ips' 'application/x-ipscript' 'ipx' 'application/x-ipix' 'isp' 'application/x-internet-signup' 'jfif' 'image/pipeg' 'jpe' 'image/jpeg' 'jpeg' 'image/jpeg' 'jpg' 'image/jpeg' 'js' 'application/javascript' 'json' 'application/json' 'kar' 'audio/midi' 'latex' 'application/x-latex' 'lha' 'application/octet-stream' 'lsf' 'video/x-la-asf' 'lsp' 'application/x-lisp' 'lsx' 'video/x-la-asf' 'lzh' 'application/octet-stream' 'm' 'text/plain' 'm13' 'application/x-msmediaview' 'm14' 'application/x-msmediaview' 'm3u' 'audio/x-mpegurl' 'man' 'application/x-troff-man' 'mdb' 'application/x-msaccess' 'me' 'application/x-troff-me' 'mesh' 'model/mesh' 'mht' 'message/rfc822' 'mhtml' 'message/rfc822' 'mid' 'audio/midi' 'midi' 'audio/midi' 'mif' 'application/vnd.mif' 'mime' 'www/mime' 'mny' 'application/x-msmoney' 'mov' 'video/quicktime' 'movie' 'video/x-sgi-movie' 'mp2' 'audio/mpeg' 'mp3' 'audio/mpeg' 'mpa' 'video/mpeg' 'mpe' 'video/mpeg' 'mpeg' 'video/mpeg' 'mpg' 'video/mpeg' 'mpga' 'audio/mpeg' 'mpp' 'application/vnd.ms-project' 'mpv2' 'video/mpeg' 'ms' 'application/x-troff-ms' 'msh' 'model/mesh' 'mvb' 'application/x-msmediaview' 'nc' 'application/x-netcdf' 'nws' 'message/rfc822' 'oda' 'application/oda' 'ogg' 'application/ogg' 'p10' 'application/pkcs10' 'p12' 'application/x-pkcs12' 'p7b' 'application/x-pkcs7-certificates' 'p7c' 'application/x-pkcs7-mime' 'p7m' 'application/x-pkcs7-mime' 'p7r' 'application/x-pkcs7-certreqresp' 'p7s' 'application/x-pkcs7-signature' 'pbm' 'image/x-portable-bitmap' 'pdb' 'chemical/x-pdb' 'pdf' 'application/pdf' 'pfx' 'application/x-pkcs12' 'pgm' 'image/x-portable-graymap' 'pgn' 'application/x-chess-pgn' 'pko' 'application/ynd.ms-pkipko' 'pma' 'application/x-perfmon' 'pmc' 'application/x-perfmon' 'pml' 'application/x-perfmon' 'pmr' 'application/x-perfmon' 'pmw' 'application/x-perfmon' 'png' 'image/png' 'pnm' 'image/x-portable-anymap' 'pot' 'application/mspowerpoint' 'ppm' 'image/x-portable-pixmap' 'pps' 'application/mspowerpoint' 'ppt' 'application/mspowerpoint' 'ppz' 'application/mspowerpoint' 'pre' 'application/x-freelance' 'prf' 'application/pics-rules' 'prt' 'application/pro_eng' 'ps' 'application/postscript' 'pub' 'application/x-mspublisher' 'qt' 'video/quicktime' 'ra' 'audio/x-realaudio' 'ram' 'audio/x-pn-realaudio' 'ras' 'image/cmu-raster' 'rgb' 'image/x-rgb' 'rm' 'audio/x-pn-realaudio' 'rmi' 'audio/mid' 'roff' 'application/x-troff' 'rpm' 'audio/x-pn-realaudio-plugin' 'rtf' 'application/rtf' 'rtx' 'text/richtext' 'scd' 'application/x-msschedule' 'scm' 'application/x-lotusscreencam' 'sct' 'text/scriptlet' 'set' 'application/set' 'setpay' 'application/set-payment-initiation' 'setreg' 'application/set-registration-initiation' 'sgm' 'text/sgml' 'sgml' 'text/sgml' 'sh' 'application/x-sh' 'shar' 'application/x-shar' 'silo' 'model/mesh' 'sit' 'application/x-stuffit' 'skd' 'application/x-koan' 'skm' 'application/x-koan' 'skp' 'application/x-koan' 'skt' 'application/x-koan' 'smi' 'application/smil' 'smil' 'application/smil' 'snd' 'audio/basic' 'sol' 'application/solids' 'spc' 'application/x-pkcs7-certificates' 'spl' 'application/futuresplash' 'src' 'application/x-wais-source' 'sst' 'application/vnd.ms-pkicertstore' 'step' 'application/STEP' 'stl' 'application/vnd.ms-pkistl' 'stm' 'text/html' 'stp' 'application/STEP' 'sv4cpio' 'application/x-sv4cpio' 'sv4crc' 'application/x-sv4crc' 'svg' 'image/svg+xml' 'swf' 'application/x-shockwave-flash' 't' 'application/x-troff' 'tar' 'application/x-tar' 'tcl' 'application/x-tcl' 'tex' 'application/x-tex' 'texi' 'application/x-texinfo' 'texinfo' 'application/x-texinfo' 'tgz' 'application/x-compressed' 'tif' 'image/tiff' 'tiff' 'image/tiff' 'tr' 'application/x-troff' 'trm' 'application/x-msterminal' 'tsi' 'audio/TSP-audio' 'tsp' 'application/dsptype' 'tsv' 'text/tab-separated-values' 'txt' 'text/plain' 'uls' 'text/iuls' 'unv' 'application/i-deas' 'ustar' 'application/x-ustar' 'vcd' 'application/x-cdlink' 'vcf' 'text/x-vcard' 'vda' 'application/vda' 'viv' 'video/vnd.vivo' 'vivo' 'video/vnd.vivo' 'vrml' 'model/vrml' 'wav' 'audio/x-wav' 'wcm' 'application/vnd.ms-works' 'wdb' 'application/vnd.ms-works' 'wks' 'application/vnd.ms-works' 'wmf' 'application/x-msmetafile' 'wps' 'application/vnd.ms-works' 'wri' 'application/x-mswrite' 'wrl' 'model/vrml' 'wrz' 'x-world/x-vrml' 'xaf' 'x-world/x-vrml' 'xbm' 'image/x-xbitmap' 'xhtml' 'application/xhtml+xml' 'xla' 'application/vnd.ms-excel' 'xlc' 'application/vnd.ms-excel' 'xll' 'application/vnd.ms-excel' 'xlm' 'application/vnd.ms-excel' 'xls' 'application/vnd.ms-excel' 'xlt' 'application/vnd.ms-excel' 'xlw' 'application/vnd.ms-excel' 'xml' 'text/xml' 'xof' 'x-world/x-vrml' 'xpm' 'image/x-xpixmap' 'xwd' 'image/x-xwindowdump' 'xyz' 'chemical/x-pdb' 'z' 'application/x-compress' 'zip' 'application/zip' )! !!MAFileModel class methodsFor: 'initialization' stamp: 'lr 4/9/2009 09:57'!initialize	MimeTypes := Dictionary new.	1 to: self defaultMimeTypes size by: 2 do: [ :index |		MimeTypes 			at: (self defaultMimeTypes at: index)			put: (self defaultMimeTypes at: index + 1) ]! !!MAFileModel class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!mimetypeFor: aString	^ self mimetypes at: aString ifAbsent: [ self defaultMimeType ]! !!MAFileModel class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!mimetypes	^ MimeTypes! !!MAFileModel class methodsFor: 'instance-creation' stamp: 'lr 9/30/2007 18:13'!new	^ self basicNew initialize! !!MAFileModel class methodsFor: 'accessing-defaults' stamp: 'lr 11/3/2009 22:12'!validCharacters	"Answer a string with all the valid characters for filenames."		^ '-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz'! !!MAFileModel methodsFor: 'comparing' stamp: 'lr 2/16/2007 08:49'!= anObject	^ self species = anObject species		and: [ self filename = anObject filename		and: [ self mimetype = anObject mimetype ] ]! !!MAFileModel methodsFor: 'accessing' stamp: 'lr 10/18/2007 18:15'!contents	"Answer the contents of the file. This method is supposed to be overridden by concrete subclasses."	self subclassResponsibility! !!MAFileModel methodsFor: 'accessing' stamp: 'lr 2/12/2007 19:06'!contents: aByteArray	"Set the contents of the receiver. This method is supposed to be overridden by concrete subclasses."	filesize := aByteArray size! !!MAFileModel methodsFor: 'accessing-dynamic' stamp: 'lr 3/21/2006 19:56'!extension	"Answer the file-extension."	^ self filename copyAfterLast: $.! !!MAFileModel methodsFor: 'accessing' stamp: 'lr 2/12/2007 19:06'!filename	"Answer the filename of the receiver."	^ filename! !!MAFileModel methodsFor: 'accessing' stamp: 'lr 11/3/2009 22:12'!filename: aString	"Normalize the filenames. Don't just allow any stupid windows filename.'"	filename := aString isNil ifFalse: [ 		aString collect: [ :char |			(self class validCharacters includes: char)				ifTrue: [ char ]				ifFalse: [ 					char = Character space						ifTrue: [ $- ]						ifFalse: [ $_ ] ] ] ]! !!MAFileModel methodsFor: 'accessing-dynamic' stamp: 'lr 1/26/2007 18:20'!filesize	"Answer the size of the file."	^ filesize! !!MAFileModel methodsFor: 'initialization' stamp: 'lr 1/14/2008 16:53'!finalize	"Cleanup after a file is removed, subclasses might require to specialize this method."		self initialize! !!MAFileModel methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:32'!hash	^ self filename hash bitXor: self mimetype hash! !!MAFileModel methodsFor: 'initialization' stamp: 'lr 9/30/2007 18:06'!initialize	filesize := 0.	filename := 'unknown'.	mimetype := self class defaultMimeType! !!MAFileModel methodsFor: 'testing-types' stamp: 'lr 4/10/2007 21:39'!isApplication	"Return ==true== if the mimetype of the receiver is application-data. This message will match types like: application/postscript, application/zip, application/pdf, etc."	^ self maintype = 'application'! !!MAFileModel methodsFor: 'testing-types' stamp: 'lr 4/10/2007 21:40'!isAudio	"Return ==true== if the mimetype of the receiver is audio-data. This message will match types like: audio/basic, audio/tone, audio/mpeg, etc."	^ self maintype = 'audio'! !!MAFileModel methodsFor: 'testing' stamp: 'lr 1/26/2007 18:20'!isEmpty	^ self filesize isZero! !!MAFileModel methodsFor: 'testing-types' stamp: 'lr 4/10/2007 21:40'!isImage	"Return ==true== if the mimetype of the receiver is image-data. This message will match types like: image/jpeg, image/gif, image/png, image/tiff, etc."	^ self maintype = 'image'! !!MAFileModel methodsFor: 'testing-types' stamp: 'lr 4/10/2007 21:40'!isText	"Return ==true== if the mimetype of the receiver is text-data. This message will match types like: text/plain, text/html, text/sgml, text/css, text/xml, text/richtext, etc."	^ self maintype = 'text'! !!MAFileModel methodsFor: 'testing-types' stamp: 'lr 4/10/2007 21:40'!isVideo	"Return ==true== if the mimetype of the receiver is video-data. This message will match types like: video/mpeg, video/quicktime, etc."	^ self maintype = 'video'! !!MAFileModel methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:32'!maintype	"Answer the first part of the mime-type."	^ self mimetype copyUpTo: $/! !!MAFileModel methodsFor: 'accessing' stamp: 'lr 2/12/2007 19:06'!mimetype	"Answer the mimetype of the receiver."	^ mimetype! !!MAFileModel methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!mimetype: aString	mimetype := aString! !!MAFileModel methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:32'!subtype	"Answer the second part of the mime-type."	^ self mimetype copyAfter: $/! !!MAMemoryFileModel methodsFor: 'comparing' stamp: 'lr 11/6/2009 15:38'!= anObject    ^ super = anObject and: [ self contents = anObject contents ]! !!MAMemoryFileModel methodsFor: 'accessing' stamp: 'lr 10/18/2007 18:22'!contents	^ contents ifNil: [ contents := ByteArray new ]! !!MAMemoryFileModel methodsFor: 'accessing' stamp: 'lr 9/30/2007 18:20'!contents: aByteArray	super contents: aByteArray.	contents := aByteArray asByteArray! !!MAMemoryFileModel methodsFor: 'initialization' stamp: 'lr 9/30/2007 18:11'!finalize	super finalize.	contents := nil! !!MAMemoryFileModel methodsFor: 'comparing' stamp: 'lr 11/6/2009 15:38'!hash	^ super hash bitXor: self contents hash! !!MAAccessor methodsFor: 'converting' stamp: 'lr 4/10/2008 13:31'!asAccessor	^ self! !!MAAccessor methodsFor: 'testing' stamp: 'lr 5/6/2008 17:44'!canRead: aModel	"Test if ==aModel== can be read."	^ false! !!MAAccessor methodsFor: 'testing' stamp: 'lr 5/6/2008 17:44'!canWrite: aModel	"Test if ==aModel== can be written."	^ false! !!MAAccessor methodsFor: 'printing' stamp: 'lr 3/9/2006 11:31'!printOn: aStream	self storeOn: aStream! !!MAAccessor methodsFor: 'model' stamp: 'lr 5/6/2008 17:45'!read: aModel	"Read from ==aModel== using the access-strategy of the receiver."	^ nil! !!MAAccessor methodsFor: 'printing' stamp: 'lr 9/3/2009 17:14'!storeOn: aStream	self class storeOn: aStream.	aStream nextPutAll: ' new'! !!MAAccessor methodsFor: 'model' stamp: 'lr 5/6/2008 17:45'!write: anObject to: aModel	"Write ==anObject== to ==aModel== using the access-strategy of the receiver."! !!MAChainAccessor class methodsFor: 'instance-creation' stamp: 'lr 5/6/2008 18:11'!accessors: aSequenceableCollection	aSequenceableCollection isEmpty		ifTrue: [ self error: 'Unable to create accessor sequence from empty collection.' ].	aSequenceableCollection size = 1		ifTrue: [ ^ aSequenceableCollection first asAccessor ].	^ self 		on: aSequenceableCollection first asAccessor 		accessor: (self accessors: aSequenceableCollection allButFirst)! !!MAChainAccessor class methodsFor: 'instance-creation' stamp: 'lr 5/6/2008 18:10'!on: anAccessor accessor: anotherAccessor	^ (self on: anAccessor) accessor: anotherAccessor! !!MAChainAccessor methodsFor: 'comparing' stamp: 'lr 5/6/2008 17:43'!= anObject	^ super = anObject and: [ self accessor = anObject accessor ]! !!MAChainAccessor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!accessor	^ accessor! !!MAChainAccessor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!accessor: anAccessor	accessor := anAccessor! !!MAChainAccessor methodsFor: 'testing' stamp: 'lr 5/6/2008 17:48'!canRead: aModel	^ (super canRead: aModel) and: [ self accessor canRead: (self next read: aModel) ]! !!MAChainAccessor methodsFor: 'testing' stamp: 'lr 5/6/2008 17:48'!canWrite: aModel	^ (super canRead: aModel) and: [ self accessor canWrite: (self next read: aModel) ]! !!MAChainAccessor methodsFor: 'comparing' stamp: 'lr 5/6/2008 17:43'!hash	^ super hash bitXor: self accessor hash! !!MAChainAccessor methodsFor: 'copying' stamp: 'lr 5/6/2008 17:44'!postCopy	super postCopy.	accessor := accessor copy! !!MAChainAccessor methodsFor: 'model' stamp: 'lr 5/6/2008 17:49'!read: aModel	^ self accessor read: (super read: aModel)! !!MAChainAccessor methodsFor: 'printing' stamp: 'lr 9/3/2009 17:14'!storeOn: aStream	aStream nextPut: $(.	self class storeOn: aStream.	aStream		nextPutAll: ' on: ';		store: self next;		nextPutAll: ' accessor: ';		store: self accessor;		nextPut: $)! !!MAChainAccessor methodsFor: 'model' stamp: 'lr 5/6/2008 17:49'!write: anObject to: aModel	self accessor write: anObject to: (super read: aModel)! !!MADelegatorAccessor class methodsFor: 'testing' stamp: 'lr 2/14/2008 09:45'!isAbstract	^ false! !!MADelegatorAccessor class methodsFor: 'instance-creation' stamp: 'lr 2/14/2008 09:45'!on: anAccessor	^ self new next: anAccessor! !!MADelegatorAccessor methodsFor: 'comparing' stamp: 'lr 2/14/2008 09:53'!= anObject	^ super = anObject and: [ self next = anObject next ]! !!MADelegatorAccessor methodsFor: 'testing' stamp: 'lr 2/14/2008 09:52'!canRead: aModel	^ self next canRead: aModel! !!MADelegatorAccessor methodsFor: 'testing' stamp: 'lr 2/14/2008 09:52'!canWrite: aModel	^ self next canWrite: aModel! !!MADelegatorAccessor methodsFor: 'comparing' stamp: 'lr 2/14/2008 09:54'!hash	^  super hash bitXor: self next hash! !!MADelegatorAccessor methodsFor: 'accessing' stamp: 'lr 2/14/2008 09:44'!next	^ next! !!MADelegatorAccessor methodsFor: 'accessing' stamp: 'kph 6/12/2008 01:42'!next: anAccessor 	next := anAccessor asAccessor! !!MADelegatorAccessor methodsFor: 'copying' stamp: 'lr 5/6/2008 17:44'!postCopy	super postCopy.	next := next copy! !!MADelegatorAccessor methodsFor: 'model' stamp: 'lr 2/14/2008 09:53'!read: aModel	^ self next read: aModel! !!MADelegatorAccessor methodsFor: 'printing' stamp: 'lr 9/3/2009 17:14'!storeOn: aStream	aStream nextPut: $(.	self class storeOn: aStream.	aStream		nextPutAll: ' on: ';		store: self next;		nextPut: $)! !!MADelegatorAccessor methodsFor: 'model' stamp: 'lr 2/14/2008 09:53'!write: anObject to: aModel	self next write: anObject to: aModel! !!MADictionaryAccessor class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!isAbstract	^ false! !!MADictionaryAccessor class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:32'!key: aSymbol	^ self new		key: aSymbol;		yourself! !!MADictionaryAccessor methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:32'!= anObject	^ super = anObject		and: [ self key = anObject key ]! !!MADictionaryAccessor methodsFor: 'testing' stamp: 'lr 5/6/2008 17:50'!canRead: aModel	^ true! !!MADictionaryAccessor methodsFor: 'testing' stamp: 'lr 5/6/2008 17:50'!canWrite: aModel	^ true! !!MADictionaryAccessor methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:32'!hash	^ super hash bitXor: self key hash! !!MADictionaryAccessor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!key	^ key! !!MADictionaryAccessor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!key: aKey	key := aKey! !!MADictionaryAccessor methodsFor: 'model' stamp: 'lr 10/25/2007 23:53'!read: aModel	^ aModel at: self key ifAbsent: [ nil ]! !!MADictionaryAccessor methodsFor: 'printing' stamp: 'lr 9/3/2009 17:14'!storeOn: aStream	aStream nextPut: $(.	self class storeOn: aStream.	aStream		nextPutAll: ' key: ';		store: self key;		nextPut: $)! !!MADictionaryAccessor methodsFor: 'model' stamp: 'lr 3/9/2006 11:32'!write: anObject to: aModel	aModel at: self key put: anObject! !!MAIdentityAccessor class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!isAbstract	^ false! !!MAIdentityAccessor methodsFor: 'testing' stamp: 'lr 5/6/2008 17:50'!canRead: aModel	^ true! !!MAIdentityAccessor methodsFor: 'model' stamp: 'lr 3/9/2006 11:32'!read: aModel	^ aModel! !!MAIdentityAccessor methodsFor: 'model' stamp: 'lr 4/10/2008 14:11'!write: anObject to: aModel 	MAWriteError signal: 'Not supposed to write to ' , aModel asString , '.'! !!MANullAccessor class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isAbstract	^ false! !!MANullAccessor class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:33'!new	^ self uuid: MACompatibility uuid! !!MANullAccessor class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:33'!uuid: anUUID	^ self basicNew		uuid: anUUID;		yourself! !!MANullAccessor methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:32'!= anObject	^ super = anObject		and: [ self uuid = anObject uuid ]! !!MANullAccessor methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:32'!hash	^ super hash bitXor: self uuid hash! !!MANullAccessor methodsFor: 'model' stamp: 'lr 4/10/2008 14:11'!read: aModel 	MAReadError signal: 'This message is not appropriate for this object'! !!MANullAccessor methodsFor: 'printing' stamp: 'lr 9/3/2009 17:14'!storeOn: aStream	aStream nextPut: $(.	self class storeOn: aStream.	aStream		nextPutAll: ' uuid: ';		store: self uuid;		nextPut: $)! !!MANullAccessor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!uuid	^ uuid! !!MANullAccessor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!uuid: anObject	uuid := anObject! !!MANullAccessor methodsFor: 'model' stamp: 'lr 4/10/2008 14:11'!write: anObject to: aModel 	MAWriteError signal: 'This message is not appropriate for this object'! !!MAPluggableAccessor class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!isAbstract	^ false! !!MAPluggableAccessor class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:32'!read: aReadBlock write: aWriteBlock	^ self new		readBlock: aReadBlock;		writeBlock: aWriteBlock;		yourself! !!MAPluggableAccessor methodsFor: 'comparing' stamp: 'lr 2/16/2007 08:48'!= anObject	^ super = anObject		and: [ self readBlock = anObject readBlock		and: [ self writeBlock = anObject writeBlock ] ]! !!MAPluggableAccessor methodsFor: 'testing' stamp: 'lr 5/6/2008 17:42'!canRead: aModel	^ self readBlock notNil! !!MAPluggableAccessor methodsFor: 'testing' stamp: 'lr 5/6/2008 17:43'!canWrite: aModel	^ self writeBlock notNil! !!MAPluggableAccessor methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:31'!hash	^ super hash bitXor: (self readBlock hash bitXor: self writeBlock hash)! !!MAPluggableAccessor methodsFor: 'model' stamp: 'lr 3/9/2006 11:31'!read: aModel	^ self readBlock value: aModel! !!MAPluggableAccessor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!readBlock	^ readBlock! !!MAPluggableAccessor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!readBlock: aBlock	readBlock := aBlock! !!MAPluggableAccessor methodsFor: 'printing' stamp: 'lr 3/9/2006 11:31'!storeBlock: aBlock on: aStream	aStream nextPutAll: aBlock decompile asString allButFirst allButLast! !!MAPluggableAccessor methodsFor: 'printing' stamp: 'lr 9/3/2009 17:14'!storeOn: aStream	aStream nextPut: $(.	self class storeOn: aStream.	aStream nextPutAll: ' read: '.	self storeBlock: self readBlock on: aStream.	aStream nextPutAll: ' write: '.	self storeBlock: self writeBlock on: aStream.	aStream nextPut: $)! !!MAPluggableAccessor methodsFor: 'model' stamp: 'lr 3/9/2006 11:31'!write: anObject to: aModel	self writeBlock value: aModel value: anObject! !!MAPluggableAccessor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!writeBlock	^ writeBlock! !!MAPluggableAccessor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!writeBlock: aBlock	writeBlock := aBlock! !!MASelectorAccessor class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isAbstract	^ false! !!MASelectorAccessor class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:33'!read: aSelector	^ self read: aSelector write: nil! !!MASelectorAccessor class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:33'!read: aReadSelector write: aWriteSelector	^ self new		readSelector: aReadSelector;		writeSelector: aWriteSelector;		yourself! !!MASelectorAccessor class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:33'!selector: aSelector	^ self new		selector: aSelector;		yourself! !!MASelectorAccessor class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:33'!write: aSelector	^ self read: nil write: aSelector! !!MASelectorAccessor methodsFor: 'comparing' stamp: 'lr 2/16/2007 08:49'!= anObject	^ super = anObject		and: [ self readSelector = anObject readSelector		and: [ self writeSelector = anObject writeSelector ] ]! !!MASelectorAccessor methodsFor: 'testing' stamp: 'lr 5/6/2008 17:51'!canRead: aModel	^ self readSelector notNil and: [ aModel respondsTo: self readSelector ]! !!MASelectorAccessor methodsFor: 'testing' stamp: 'lr 5/6/2008 17:51'!canWrite: aModel	^ self writeSelector notNil and: [ aModel respondsTo: self writeSelector ]! !!MASelectorAccessor methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:32'!hash	^  super hash bitXor: (self readSelector hash bitXor: self writeSelector hash)! !!MASelectorAccessor methodsFor: 'model' stamp: 'lr 3/9/2006 11:32'!read: aModel	^ aModel perform: self readSelector! !!MASelectorAccessor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!readSelector	^ readSelector! !!MASelectorAccessor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!readSelector: aSelector	readSelector := aSelector! !!MASelectorAccessor methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:32'!selector	^ self readSelector! !!MASelectorAccessor methodsFor: 'accessing-dynamic' stamp: 'dkh 11/01/2007 17:38'!selector: aSelector	self readSelector: aSelector asSymbol.	self writeSelector: (aSelector asString copyWith: $:) asSymbol! !!MASelectorAccessor methodsFor: 'printing' stamp: 'lr 9/3/2009 17:15'!storeOn: aStream	aStream nextPut: $(.	self class storeOn: aStream.	aStream		nextPutAll: ' read: ';		store: self readSelector;		nextPutAll: ' write: ';		store: self writeSelector;		nextPut: $)! !!MASelectorAccessor methodsFor: 'model' stamp: 'lr 3/9/2006 11:32'!write: anObject to: aModel	aModel perform: self writeSelector with: anObject! !!MASelectorAccessor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!writeSelector	^ writeSelector! !!MASelectorAccessor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!writeSelector: aSelector	writeSelector := aSelector! !!MAVariableAccessor class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isAbstract	^ false! !!MAVariableAccessor class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:33'!name: aString	^ self new		name: aString;		yourself! !!MAVariableAccessor methodsFor: 'comparing' stamp: 'lr 5/6/2008 17:51'!= anObject	^ super = anObject and: [ self name = anObject name ]! !!MAVariableAccessor methodsFor: 'testing' stamp: 'lr 5/6/2008 17:51'!canRead: aModel	^ aModel class allInstVarNames includes: self name! !!MAVariableAccessor methodsFor: 'testing' stamp: 'lr 5/6/2008 17:52'!canWrite: aModel	^ self canRead: aModel! !!MAVariableAccessor methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:32'!hash	^ super hash bitXor: self name hash! !!MAVariableAccessor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!name	^ name! !!MAVariableAccessor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!name: aString	name := aString! !!MAVariableAccessor methodsFor: 'model' stamp: 'lr 3/9/2006 11:32'!read: aModel	^ aModel instVarNamed: self name! !!MAVariableAccessor methodsFor: 'printing' stamp: 'lr 9/3/2009 17:15'!storeOn: aStream	aStream nextPut: $(.	self class storeOn: aStream.	aStream		nextPutAll: ' name: ';		store: self name;		nextPut: $)! !!MAVariableAccessor methodsFor: 'model' stamp: 'lr 3/9/2006 11:32'!write: anObject to: aModel	aModel instVarNamed: self name put: anObject! !!MACondition class methodsFor: 'testing' stamp: 'lr 2/5/2009 21:05'!isAbstract	^ self name = #MACondition! !!MACondition class methodsFor: 'convenience' stamp: 'lr 2/5/2009 21:30'!receiver: anObject selector: aSelector	^ self receiver: anObject selector: aSelector arguments: #(nil) index: 1! !!MACondition class methodsFor: 'instance creation' stamp: 'lr 2/5/2009 21:30'!receiver: anObject selector: aSelector arguments: anArray index: anInteger	(aSelector numArgs = anArray size)		ifFalse: [ self error: 'Invalid number of arguments.' ].	(anInteger between: 0 and: anArray size)		ifFalse: [ self error: 'Index out of bounds.' ].	^ MAPluggableCondition new 		initializeReceiver: anObject		selector: aSelector		arguments: anArray		index: anInteger! !!MACondition class methodsFor: 'convenience' stamp: 'lr 2/5/2009 21:30'!selector: aSelector	^ self receiver: nil selector: aSelector arguments: #() index: 0! !!MACondition class methodsFor: 'convenience' stamp: 'lr 2/5/2009 21:30'!selector: aSelector argument: anObject	^ self receiver: nil selector: aSelector arguments: (Array with: anObject) index: 0! !!MACondition methodsFor: 'operators' stamp: 'lr 2/5/2009 20:40'!& aCondition 	^ MAConjunctiveCondition new & self & aCondition! !!MACondition methodsFor: 'operators' stamp: 'lr 2/5/2009 21:56'!not	^ MANegationCondition with: self! !!MACondition methodsFor: 'accessing' stamp: 'lr 2/5/2009 20:56'!numArgs	^ 1! !!MACondition methodsFor: 'evaluating' stamp: 'lr 2/5/2009 20:43'!value: anObject	self subclassResponsibility! !!MACondition methodsFor: 'operators' stamp: 'lr 2/5/2009 20:40'!| aCondition 	^ (self not & aCondition not) not! !!MAConjunctiveCondition methodsFor: 'operators' stamp: 'lr 2/5/2009 20:42'!& aCondition	conditions := conditions copyWith: aCondition! !!MAConjunctiveCondition methodsFor: 'initialization' stamp: 'lr 2/5/2009 20:42'!initialize	conditions := #()! !!MAConjunctiveCondition methodsFor: 'evaluating' stamp: 'lr 2/5/2009 20:44'!value: anObject	^ conditions allSatisfy: [ :each | each value: anObject ]! !!MANegationCondition class methodsFor: 'instance creation' stamp: 'lr 2/5/2009 20:45'!with: aCondition	^ self new initializeWith: aCondition! !!MANegationCondition methodsFor: 'initialization' stamp: 'lr 2/5/2009 21:55'!initializeWith: aCondition	condition := aCondition! !!MANegationCondition methodsFor: 'evaluating' stamp: 'lr 2/5/2009 20:44'!value: anObject	^ (condition value: anObject) not! !!MAPluggableCondition methodsFor: 'initialization' stamp: 'lr 2/5/2009 21:30'!initializeReceiver: anObject selector: aSelector arguments: anArray index: anInteger	receiver := anObject.	selector := aSelector.	arguments := anArray.	index := anInteger! !!MAPluggableCondition methodsFor: 'evaluating' stamp: 'lr 2/5/2009 21:31'!value: anObject	| actualReceiver actualArguments |	actualReceiver := index = 0		ifFalse: [ receiver ]		ifTrue: [ anObject ].	actualArguments := index > 0		ifFalse: [ arguments ]		ifTrue: [			arguments copy 				at: index put: anObject;				yourself ].	^ actualReceiver		perform: selector		withArguments: actualArguments! !!MAContainer class methodsFor: 'accessing-defaults' stamp: 'lr 4/10/2008 13:55'!defaultAccessor	^ MAIdentityAccessor new! !!MAContainer class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:32'!defaultCollection	^ OrderedCollection new! !!MAContainer class methodsFor: 'accessing-description' stamp: 'lr 4/18/2007 18:05'!descriptionChildren	^ MAToManyRelationDescription new		accessor: (MASelectorAccessor read: #children write: #setChildren:);		classes: [ MAElementDescription withAllConcreteClasses ] asDynamicObject;		default: self defaultCollection;		label: 'Elements';		priority: 400;		beOrdered;		yourself! !!MAContainer class methodsFor: 'accessing-description' stamp: 'lr 3/9/2006 11:32'!descriptionDefault	^ nil! !!MAContainer class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!isAbstract	^ false! !!MAContainer class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:32'!with: aDescription	^ self new		add: aDescription;		yourself! !!MAContainer class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:32'!withAll: aCollection	^ self new		addAll: aCollection;		yourself! !!MAContainer methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:32'!= anObject	^ super = anObject		and: [ self children = anObject children ]! !!MAContainer methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitContainer: self! !!MAContainer methodsFor: 'adding' stamp: 'lr 3/9/2006 11:32'!add: aDescription	self children add: aDescription! !!MAContainer methodsFor: 'adding' stamp: 'lr 3/9/2006 11:32'!addAll: aCollection	self children addAll: aCollection! !!MAContainer methodsFor: 'enumerating' stamp: 'lr 5/29/2006 10:09'!allSatisfy: aBlock	^ self children allSatisfy: aBlock! !!MAContainer methodsFor: 'enumerating' stamp: 'lr 5/29/2006 10:09'!anySatisfy: aBlock	^ self children anySatisfy: aBlock! !!MAContainer methodsFor: 'converting' stamp: 'lr 3/9/2006 11:32'!asContainer	^ self! !!MAContainer methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!at: anIndex	^ self children at: anIndex! !!MAContainer methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!at: anIndex ifAbsent: aBlock	^ self children at: anIndex ifAbsent: aBlock! !!MAContainer methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!children	^ children! !!MAContainer methodsFor: 'enumerating' stamp: 'lr 3/9/2006 11:32'!collect: aBlock	^ self copy		setChildren: (self children collect: aBlock);		yourself! !!MAContainer methodsFor: 'copying' stamp: 'lr 3/9/2006 11:32'!copyEmpty	^ self copy		setChildren: self class defaultCollection;		yourself! !!MAContainer methodsFor: 'copying' stamp: 'lr 3/9/2006 11:32'!copyFrom: aStartIndex to: anEndIndex	^ self copy		setChildren: (self children			copyFrom: aStartIndex			to: anEndIndex);		yourself! !!MAContainer methodsFor: 'copying' stamp: 'lr 2/12/2007 19:06'!copyWithout: anObject	^self reject: [:each | each = anObject]! !!MAContainer methodsFor: 'copying' stamp: 'lr 2/12/2007 19:06'!copyWithoutAll: aCollection	^self reject: [:each | aCollection includes: each]! !!MAContainer methodsFor: 'enumerating' stamp: 'lr 3/9/2006 11:32'!detect: aBlock	^ self children detect: aBlock! !!MAContainer methodsFor: 'enumerating' stamp: 'lr 3/9/2006 11:32'!detect: aBlock ifNone: anExceptionBlock	^ self children detect: aBlock ifNone: anExceptionBlock! !!MAContainer methodsFor: 'enumerating' stamp: 'lr 3/9/2006 11:32'!do: aBlock	self children do: aBlock! !!MAContainer methodsFor: 'enumerating' stamp: 'lr 3/9/2006 11:32'!do: aBlock separatedBy: aSeparatorBlock	self children do: aBlock separatedBy: aSeparatorBlock! !!MAContainer methodsFor: 'private' stamp: 'lr 3/9/2006 11:32'!errorNotFound: aDescription	self error: aDescription class label , ' not found.'! !!MAContainer methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!hasChildren	^ self notEmpty! !!MAContainer methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:32'!hash	^ super hash bitXor: self children hash! !!MAContainer methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!includes: aDescription	^ self children includes: aDescription! !!MAContainer methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:32'!initialize	super initialize.	self setChildren: self class defaultCollection! !!MAContainer methodsFor: 'enumerating' stamp: 'lr 3/9/2006 11:32'!inject: anObject into: aBlock	^ self children inject: anObject into: aBlock! !!MAContainer methodsFor: 'enumerating' stamp: 'lr 3/9/2006 11:32'!intersection: aCollection	^ self copy		setChildren: (self children intersection: aCollection);		yourself! !!MAContainer methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!isContainer	^ true! !!MAContainer methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!isEmpty	^ self children isEmpty! !!MAContainer methodsFor: 'enumerating' stamp: 'lr 4/10/2008 14:05'!keysAndValuesDo: aBlock	self children keysAndValuesDo: aBlock! !!MAContainer methodsFor: 'moving' stamp: 'lr 3/9/2006 11:32'!moveDown: aDescription	self children moveDown: aDescription! !!MAContainer methodsFor: 'moving' stamp: 'lr 3/9/2006 11:32'!moveUp: aDescription	self children moveUp: aDescription! !!MAContainer methodsFor: 'enumerating' stamp: 'lr 5/29/2006 10:08'!noneSatisfy: aBlock	^ self children noneSatisfy: aBlock! !!MAContainer methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!notEmpty	^ self children notEmpty! !!MAContainer methodsFor: 'copying' stamp: 'lr 3/9/2006 11:32'!postCopy	super postCopy.	self setChildren: self children copy! !!MAContainer methodsFor: 'enumerating' stamp: 'lr 3/9/2006 11:32'!reject: aBlock	^ self copy		setChildren: (self children reject: aBlock);		yourself! !!MAContainer methodsFor: 'removing' stamp: 'lr 3/9/2006 11:32'!remove: aDescription	self children remove: aDescription ifAbsent: [ self errorNotFound: aDescription ]! !!MAContainer methodsFor: 'removing' stamp: 'lr 3/9/2006 11:32'!removeAll	self setChildren: self class defaultCollection! !!MAContainer methodsFor: 'enumerating' stamp: 'lr 3/9/2006 11:32'!select: aBlock	^ self copy		setChildren: (self children select: aBlock);		yourself! !!MAContainer methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:32'!setChildren: aCollection	children := aCollection! !!MAContainer methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!size	^ self children size! !!MAContainer methodsFor: 'enumerating' stamp: 'lr 5/29/2006 10:09'!union: aContainer	^ self copy		addAll: (aContainer reject: [ :each | self includes: each ]);		yourself! !!MAContainer methodsFor: 'enumerating' stamp: 'lr 3/9/2006 11:32'!with: aCollection do: aBlock	self children with: aCollection do: aBlock! !!MAPriorityContainer class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultCollection	^ SortedCollection new! !!MAPriorityContainer methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitPriorityContainer: self! !!MAPriorityContainer methodsFor: 'moving' stamp: 'lr 3/9/2006 11:32'!moveDown: aDescription	self shouldNotImplement! !!MAPriorityContainer methodsFor: 'moving' stamp: 'lr 3/9/2006 11:32'!moveUp: aDescription	self shouldNotImplement! !!MAPriorityContainer methodsFor: 'actions' stamp: 'lr 3/9/2006 11:32'!resort	self setChildren: self children copy! !!MAPriorityContainer methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:32'!setChildren: aCollection	super setChildren: aCollection asSortedCollection! !!MADescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:32'!defaultAccessor	^ MANullAccessor new! !!MADescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:32'!defaultComment	^ nil! !!MADescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:32'!defaultConditions	^ Array new! !!MADescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:32'!defaultDefault	^ nil! !!MADescription class methodsFor: 'accessing-defaults' stamp: 'lr 10/27/2007 12:01'!defaultGroup	^ nil! !!MADescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:22'!defaultKind	^ Object! !!MADescription class methodsFor: 'accessing-defaults' stamp: 'lr 10/27/2007 12:01'!defaultLabel	^ String new! !!MADescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:32'!defaultPersistent	^ true! !!MADescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:32'!defaultPriority	^ 0! !!MADescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:32'!defaultReadonly	^ false! !!MADescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:32'!defaultRequired	^ false! !!MADescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:32'!defaultStringReader	^ MAStringReader! !!MADescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:32'!defaultStringWriter	^ MAStringWriter! !!MADescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:32'!defaultUndefined	^ String new! !!MADescription class methodsFor: 'accessing-defaults' stamp: 'lr 2/16/2007 08:39'!defaultValidator	^ MAValidatorVisitor! !!MADescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:32'!defaultVisible	^ true! !!MADescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionComment	^ MAMemoDescription new		accessor: #comment;		label: 'Comment';		priority: 110;		default: self defaultComment;		yourself! !!MADescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionDefault	^ self isAbstract ifFalse: 		[ self new			accessor: #default;			label: 'Default';			priority: 130;			default: self defaultDefault;			yourself ]! !!MADescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionGroup	^ MAStringDescription new		accessor: #group;		default: self defaultGroup;		label: 'Group';		priority: 105;		yourself! !!MADescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionLabel	^ MAStringDescription new		accessor: #label;		label: 'Label';		priority: 100;		default: self defaultLabel;		yourself! !!MADescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionName	^ MAStringDescription new		accessor: #name;		label: 'Kind';		priority: 0;		beReadonly;		yourself! !!MADescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionPriority	^ MANumberDescription new		accessor: #priority;		label: 'Priority';		priority: 130;		default: self defaultPriority;		beRequired;		yourself! !!MADescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionReadonly	^ MABooleanDescription new		accessor: #readonly;		label: 'Readonly';		priority: 200;		default: self defaultReadonly;		yourself! !!MADescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionRequired	^ MABooleanDescription new		accessor: #required;		label: 'Required';		priority: 220;		default: self defaultRequired;		yourself! !!MADescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionStringReader	^ MASingleOptionDescription new		accessor: #stringReader;		label: 'String Reader';		priority: 300;		default: self defaultStringReader;		options: [ self defaultStringReader withAllSubclasses ] asDynamicObject;		reference: MAClassDescription new;		yourself! !!MADescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionStringWriter	^ MASingleOptionDescription new		accessor: #stringWriter;		label: 'String Writer';		priority: 310;		default: self defaultStringWriter;		options: [ self defaultStringWriter withAllSubclasses ] asDynamicObject;		reference: MAClassDescription new;		yourself! !!MADescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionUndefined	^ MAStringDescription new		accessor: #undefined;		label: 'Undefined String';		priority: 140;		default: self defaultUndefined;		yourself! !!MADescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionValidator	^ MASingleOptionDescription new		accessor: #validator;		label: 'Validator';		priority: 250;		default: self defaultValidator;		options: [ self defaultValidator withAllSubclasses ] asDynamicObject;		reference: MAClassDescription new;		yourself! !!MADescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionVisible	^ MABooleanDescription new		accessor: #visible;		label: 'Visible';		priority: 210;		default: self defaultVisible;		yourself! !!MADescription class methodsFor: 'accessing-examples' stamp: 'lr 11/1/2009 08:36'!grouping	^ MADescriptionHolder groupOf: self! !!MADescription methodsFor: 'operators' stamp: 'lr 4/10/2007 21:32'!, aDescription	"Concatenate the receiver and ==aDescription== to one composed description. Answer a description container containing both descriptions."	^ self asContainer copy		addAll: aDescription asContainer;		yourself! !!MADescription methodsFor: 'operators' stamp: 'lr 4/10/2007 21:33'!<= anObject	"Answer whether the receiver should precede ==anObject== in a priority container."	^ self priority <= anObject priority! !!MADescription methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:32'!= anObject	^ super = anObject		and: [ self accessor = anObject accessor ]! !!MADescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitDescription: self! !!MADescription methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!accessor	"Answer the access-strategy of the model-value described by the receiver."	^ accessor ifNil: [ accessor := self class defaultAccessor ]! !!MADescription methodsFor: 'accessing' stamp: 'lr 4/10/2008 13:34'!accessor: anObject	accessor := anObject asAccessor! !!MADescription methodsFor: 'validation' stamp: 'lr 3/9/2006 11:32'!addCondition: aCondition	self addCondition: aCondition labelled: aCondition asString! !!MADescription methodsFor: 'validation' stamp: 'lr 2/5/2009 12:25'!addCondition: aCondition labelled: aString	"Add ==aCondition== as an additional validation condition to the receiver and give it the label ==aString==. The first argument is either a block-context or any other object that responds to ==#value:== with ==true== or ==false==."	self conditions: (self conditions		copyWith: (Association			key: aCondition			value: aString))! !!MADescription methodsFor: 'converting' stamp: 'lr 3/9/2006 11:32'!asContainer	"Answer a description container of the receiver."	self subclassResponsibility! !!MADescription methodsFor: 'actions' stamp: 'lr 3/9/2006 11:32'!beHidden	self visible: false! !!MADescription methodsFor: 'actions' stamp: 'lr 3/9/2006 11:32'!beOptional	self required: false! !!MADescription methodsFor: 'actions' stamp: 'lr 3/9/2006 11:32'!beReadonly	self readonly: true! !!MADescription methodsFor: 'actions' stamp: 'lr 3/9/2006 11:32'!beRequired	self required: true! !!MADescription methodsFor: 'actions' stamp: 'lr 3/9/2006 11:32'!beVisible	self visible: true! !!MADescription methodsFor: 'actions' stamp: 'lr 3/9/2006 11:32'!beWriteable	self readonly: false! !!MADescription methodsFor: 'accessors' stamp: 'kph 6/9/2008 17:50'!chainAccessor: anArray	"Uses ==anArray== of selectors to read from the model."	self accessor: (MAChainAccessor accessors: anArray)! !!MADescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!comment	"Answer a comment or help-text giving a hint what this description is used for. GUIs that are built from this description might display it as a tool-tip."	^ self propertyAt: #comment ifAbsent: [ self class defaultComment ]! !!MADescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!comment: aString	self propertyAt: #comment put: aString! !!MADescription methodsFor: 'accessing-properties' stamp: 'lr 2/5/2009 12:24'!conditions	"Answer a collection of additional conditions that need to be fulfilled so that the described model is valid. Internally the collection associates conditions with an error string."	^ self propertyAt: #conditions ifAbsent: [ self class defaultConditions ]! !!MADescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!conditions: anArray	self propertyAt: #conditions put: anArray! !!MADescription methodsFor: 'accessing-messages' stamp: 'lr 11/14/2006 17:42'!conflictErrorMessage	^ self propertyAt: #conflictErrorMessage ifAbsent: [ 'Input is conflicting with concurrent modification' ]! !!MADescription methodsFor: 'accessing-messages' stamp: 'lr 3/25/2009 19:29'!conflictErrorMessage: aString	self propertyAt: #conflictErrorMessage put: aString! !!MADescription methodsFor: 'accessing' stamp: 'lr 12/7/2006 15:44'!default	^ nil! !!MADescription methodsFor: 'accessing' stamp: 'lr 12/7/2006 15:44'!default: anObject! !!MADescription methodsFor: 'strings' stamp: 'lr 4/10/2007 21:33'!fromString: aString	"Answer an object being parsed from ==aString==."	^ self fromString: aString reader: self stringReader! !!MADescription methodsFor: 'strings' stamp: 'lr 9/12/2007 17:26'!fromString: aString reader: aParser	"Answer an object being parsed from ==aString== using ==aParser==."	^ aParser read: aString readStream description: self! !!MADescription methodsFor: 'strings' stamp: 'lr 4/10/2007 21:33'!fromStringCollection: aCollection	"Answer a collection of objects being parsed from ==aCollection== of strings."	^ self fromStringCollection: aCollection reader: self stringReader! !!MADescription methodsFor: 'strings' stamp: 'lr 4/10/2007 21:34'!fromStringCollection: aCollection reader: aParser	"Answer a collection of objects being parsed from ==aCollection== of strings using ==aParser==."	^ aCollection collect: [ :each | self fromString: each reader: aParser ]! !!MADescription methodsFor: 'accessing-properties' stamp: 'lr 2/8/2009 19:20'!group	"Answer the group of the receiving description. The group is a string used to categorize and group descriptions. Certain display interpreters with be able to use this information to improve the usability."	^ self propertyAt: #group ifAbsent: [ self class defaultGroup ]! !!MADescription methodsFor: 'accessing-properties' stamp: 'lr 3/25/2009 19:30'!group: aString	"Answer the group of the receiving description. The group is a string used to categorize and group descriptions. Certain display interpreters with be able to use this information to improve the usability."	self propertyAt: #group put: aString! !!MADescription methodsFor: 'testing' stamp: 'lr 4/10/2007 21:34'!hasChildren	"Answer ==true== if the receiver has any child-descriptions. A description container usually has children."	^ false! !!MADescription methodsFor: 'testing' stamp: 'lr 8/13/2008 23:48'!hasComment	"Answer ==true== if the the receiver has got a non empty comment."	^ self comment notNil and: [ self comment isEmpty not ]! !!MADescription methodsFor: 'testing' stamp: 'lr 8/13/2008 23:48'!hasLabel	"Answer ==true== if the the receiver has got a non empty label."	^ self label notNil and: [ self label isEmpty not ]! !!MADescription methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:32'!hash	^ super hash bitXor: self accessor hash! !!MADescription methodsFor: 'testing' stamp: 'lr 4/10/2007 21:34'!isContainer	"Answer ==true== if the receiver is a description container."	^ false! !!MADescription methodsFor: 'testing' stamp: 'lr 4/10/2007 21:34'!isDescription	"Answer ==true== if the receiver is a description."	^ true! !!MADescription methodsFor: 'testing' stamp: 'lr 7/25/2008 17:33'!isGrouped	^ false! !!MADescription methodsFor: 'testing' stamp: 'lr 6/2/2006 09:18'!isReadonly	^ self readonly! !!MADescription methodsFor: 'testing' stamp: 'lr 6/2/2006 09:18'!isRequired	^ self required! !!MADescription methodsFor: 'validation' stamp: 'lr 4/10/2007 21:34'!isSatisfiedBy: anObject	"Answer ==true== if ==anObject== is a valid instance of the receiver's description."	[ self validate: anObject ]		on: MAValidationError		do: [ :err | ^ false ].	^ true! !!MADescription methodsFor: 'testing' stamp: 'lr 8/18/2007 11:14'!isSortable	"Answer ==true== if the described object can be trivially sorted, e.g. it answers to #<=."	^ false! !!MADescription methodsFor: 'testing' stamp: 'lr 6/2/2006 09:18'!isVisible	^ self visible! !!MADescription methodsFor: 'accessing' stamp: 'lr 9/3/2009 17:22'!kind	"Answer the base-class (type) the receiver is describing. The default implementation answers the most generic class: Object, the root of the Smalltalk class hierarchy. Subclasses might refine this choice."	^ self propertyAt: #kind ifAbsent: [ self class defaultKind ]! !!MADescription methodsFor: 'accessing' stamp: 'lr 9/3/2009 17:22'!kind: aClass	self propertyAt: #kind put: aClass! !!MADescription methodsFor: 'accessing-messages' stamp: 'lr 11/14/2006 17:42'!kindErrorMessage	^ self propertyAt: #kindErrorMessage ifAbsent: [ 'Invalid input given' ]! !!MADescription methodsFor: 'accessing-messages' stamp: 'lr 3/25/2009 19:29'!kindErrorMessage: aString	self propertyAt: #kindErrorMessage put: aString! !!MADescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!label	"Answer the label of the receiving description. The label is mostly used as an identifier that is printed next to the input field when building a GUI from the receiver."	^ self propertyAt: #label ifAbsent: [ self class defaultLabel ]! !!MADescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!label: aString	self propertyAt: #label put: aString! !!MADescription methodsFor: 'accessing-messages' stamp: 'lr 11/14/2006 17:42'!multipleErrorsMessage	^ self propertyAt: #multipleErrorsMessage ifAbsent: [ 'Multiple errors' ]! !!MADescription methodsFor: 'accessing-messages' stamp: 'lr 3/25/2009 19:29'!multipleErrorsMessage: aString	self propertyAt: #multipleErrorsMessage put: aString! !!MADescription methodsFor: 'accessing-configuration' stamp: 'lr 4/10/2006 10:31'!name	"Answer the name of the description, a human-readable string describing the type."	^ self class label! !!MADescription methodsFor: 'copying' stamp: 'lr 3/26/2007 11:45'!postCopy	super postCopy.	accessor := accessor copy! !!MADescription methodsFor: 'printing' stamp: 'lr 3/9/2006 11:32'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' label: '; print: self label.	aStream nextPutAll: ' comment: '; print: self comment! !!MADescription methodsFor: 'accessing-properties' stamp: 'lr 5/29/2006 09:19'!priority	"Answer a number that is the priority of the receiving description. Priorities are used to give descriptions an explicit order by sorting them according to this number."	^ self propertyAt: #priority ifAbsent: [ self class defaultPriority ]! !!MADescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!priority: aNumber	self propertyAt: #priority put: aNumber! !!MADescription methodsFor: 'accessors' stamp: 'lr 7/8/2008 08:31'!propertyAccessor: aSelector	"Uses ==aSelector== to read from the property dictionary of the model."	self accessor: ((MAChainAccessor on: #properties) 		accessor: (MADictionaryAccessor key: aSelector))! !!MADescription methodsFor: 'accessing-properties' stamp: 'lr 4/10/2007 21:35'!readonly	"Answer ==true== if the model described by the receiver is read-only."	^ self propertyAt: #readonly ifAbsent: [ self class defaultReadonly ]! !!MADescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!readonly: aBoolean	self propertyAt: #readonly put: aBoolean! !!MADescription methodsFor: 'accessing-properties' stamp: 'lr 4/10/2007 21:35'!required	"Answer ==true== if the model described by the receiver is required, this is it cannot be ==nil==."	^ self propertyAt: #required ifAbsent: [ self class defaultRequired ]! !!MADescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!required: aBoolean	self propertyAt: #required put: aBoolean! !!MADescription methodsFor: 'accessing-messages' stamp: 'lr 11/14/2006 17:44'!requiredErrorMessage	^ self propertyAt: #requiredErrorMessage ifAbsent: [ 'Input is required but no input given' ]! !!MADescription methodsFor: 'accessing-messages' stamp: 'lr 3/25/2009 19:30'!requiredErrorMessage: aString	self propertyAt: #requiredErrorMessage put: aString! !!MADescription methodsFor: 'accessors' stamp: 'lr 9/12/2007 17:26'!selectorAccessor: aSelector	"Uses ==aSelector== to read from the model."	self accessor: (MASelectorAccessor selector: aSelector)! !!MADescription methodsFor: 'accessing-strings' stamp: 'lr 6/2/2006 09:07'!stringReader	"Answer a Visitor that can be used to parse the model described by the receiver from a string."	^ self propertyAt: #stringReader ifAbsent: [ self class defaultStringReader ]! !!MADescription methodsFor: 'accessing-strings' stamp: 'lr 3/9/2006 11:32'!stringReader: aClass	self propertyAt: #stringReader put: aClass! !!MADescription methodsFor: 'accessing-strings' stamp: 'lr 6/2/2006 09:10'!stringWriter	"Answer a Visitor that can be used to convert the model described by the receiver to a string."	^ self propertyAt: #stringWriter ifAbsent: [ self class defaultStringWriter ]! !!MADescription methodsFor: 'accessing-strings' stamp: 'lr 3/9/2006 11:32'!stringWriter: aClass	self propertyAt: #stringWriter put: aClass! !!MADescription methodsFor: 'strings' stamp: 'lr 4/10/2007 21:35'!toString: anObject	"Answer a string being formatted from ==anObject==."	^ self toString: anObject writer: self stringWriter! !!MADescription methodsFor: 'strings' stamp: 'lr 4/10/2007 21:35'!toString: anObject writer: aFormatter	"Answer a string being formatted from ==anObject== using ==aFormatter==."	^ aFormatter write: anObject description: self! !!MADescription methodsFor: 'strings' stamp: 'lr 4/10/2007 21:36'!toStringCollection: aCollection	"Answer a collection of strings being formatted from ==aCollection==."	^ self toStringCollection: aCollection writer: self stringWriter! !!MADescription methodsFor: 'strings' stamp: 'lr 4/10/2007 21:36'!toStringCollection: aCollection writer: aFormatter	"Answer a collection of strings being formatted from ==aCollection== using ==aFormatter==."	^ aCollection collect: [ :each | self toString: each writer: aFormatter ]! !!MADescription methodsFor: 'accessing-strings' stamp: 'lr 4/10/2007 21:37'!undefined	"Answer a string that is printed whenever the model described by the receiver is ==nil==."	^ (self propertyAt: #undefined ifAbsent: [ self class defaultUndefined ])		ifNil: [ self class defaultUndefined ]! !!MADescription methodsFor: 'accessing-strings' stamp: 'lr 3/9/2006 11:32'!undefined: aString	self propertyAt: #undefined put: aString! !!MADescription methodsFor: 'validation' stamp: 'lr 9/12/2007 17:26'!validate: anObject	"Validate ==anObject== in the context of the describing-receiver, raises an error in case of a problem. If ==anObject== is ==nil== and not required, most tests will be skipped. Do not override this message, instead have a look at ==#validateSpecific:== what is usually a better place to define the behaviour your description requires."	self validator on: anObject description: self! !!MADescription methodsFor: 'validation-private' stamp: 'lr 4/10/2007 21:38'!validateConditions: anObject	"Validate ==anObject== to satisfy all its custom conditions."	self conditions do: [ :each |		(each key value: anObject)			ifFalse: [ MAConditionError description: self signal: each value ] ]! !!MADescription methodsFor: 'validation-private' stamp: 'lr 4/10/2007 21:39'!validateKind: anObject	"Validate ==anObject== to be of the right kind."	(anObject isKindOf: self kind)		ifFalse: [ MAKindError description: self signal: self kindErrorMessage ]! !!MADescription methodsFor: 'validation-private' stamp: 'lr 4/10/2007 21:39'!validateRequired: anObject	"Validate ==anObject== not to be ==nil== if it is required."	(self isRequired and: [ anObject isNil ])		ifTrue: [ MARequiredError description: self signal: self requiredErrorMessage ]! !!MADescription methodsFor: 'validation-private' stamp: 'lr 4/10/2007 21:39'!validateSpecific: anObject	"Validate ==anObject== to satisfy its descriptions specific validation rules. Subclasses mostly want to override this method."! !!MADescription methodsFor: 'accessing-properties' stamp: 'lr 2/16/2007 08:39'!validator	"Answer a Visitor that can be used to validate the model described by the receiver."	^ self propertyAt: #validator ifAbsent: [ self class defaultValidator ]! !!MADescription methodsFor: 'accessing-properties' stamp: 'lr 2/16/2007 08:39'!validator: aClass	self propertyAt: #validator put: aClass! !!MADescription methodsFor: 'accessing-properties' stamp: 'lr 4/10/2007 21:39'!visible	"Answer ==true== if the model described by the receiver is visible, as an opposite to hidden."	^ self propertyAt: #visible ifAbsent: [ self class defaultVisible ]! !!MADescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!visible: aBoolean	self propertyAt: #visible put: aBoolean! !!MABooleanDescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:32'!defaultFalseString	^ self defaultFalseStrings first! !!MABooleanDescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:32'!defaultFalseStrings	^ #( 'false' 'f' 'no' 'n' '0' 'off' )! !!MABooleanDescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:23'!defaultKind	^ Boolean! !!MABooleanDescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:32'!defaultTrueString	^ self defaultTrueStrings first! !!MABooleanDescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:32'!defaultTrueStrings	^ #( 'true' 't' 'yes' 'y' '1' 'on' )! !!MABooleanDescription class methodsFor: 'accessing-descriptions' stamp: 'lr 4/10/2008 14:17'!descriptionFalseString	^ MAStringDescription new		accessor: #falseString;		default: self defaultFalseString;		label: 'False String';		priority: 410;		yourself! !!MABooleanDescription class methodsFor: 'accessing-descriptions' stamp: 'lr 3/9/2006 11:32'!descriptionRequired	^ nil! !!MABooleanDescription class methodsFor: 'accessing-descriptions' stamp: 'lr 4/10/2008 14:17'!descriptionTrueString	^ MAStringDescription new		accessor: #trueString;		default: self defaultTrueString;		label: 'True String';		priority: 400;		yourself! !!MABooleanDescription class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!isAbstract	^ false! !!MABooleanDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!label	^ 'Boolean'! !!MABooleanDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:31'!acceptMagritte: aVisitor	aVisitor visitBooleanDescription: self! !!MABooleanDescription methodsFor: 'accessing-selection' stamp: 'lr 3/9/2006 11:31'!allOptions	^ self options! !!MABooleanDescription methodsFor: 'accessing-selection' stamp: 'lr 3/9/2006 11:31'!allOptionsWith: anObject	^ self options! !!MABooleanDescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:31'!falseString	^ self propertyAt: #falseString ifAbsent: [ self class defaultFalseString ]! !!MABooleanDescription methodsFor: 'accessing-properties' stamp: 'lr 3/25/2009 19:30'!falseString: aString	self propertyAt: #falseString put: aString! !!MABooleanDescription methodsFor: 'accessing-readonly' stamp: 'lr 3/9/2006 11:31'!falseStrings	^ self class defaultFalseStrings! !!MABooleanDescription methodsFor: 'accessing-selection' stamp: 'lr 3/9/2006 11:31'!isExtensible	^ false! !!MABooleanDescription methodsFor: 'private' stamp: 'lr 4/21/2007 17:45'!labelForOption: anObject	anObject == true		ifTrue: [ ^ self trueString ].	anObject == false		ifTrue: [ ^ self falseString ].	^ self undefined! !!MABooleanDescription methodsFor: 'accessing-selection' stamp: 'lr 3/9/2006 11:31'!options	^ Array with: false with: true! !!MABooleanDescription methodsFor: 'accessing-selection' stamp: 'lr 3/9/2006 11:31'!reference	^ self! !!MABooleanDescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:31'!trueString	^ self propertyAt: #trueString ifAbsent: [ self class defaultTrueString ]! !!MABooleanDescription methodsFor: 'accessing-properties' stamp: 'lr 3/25/2009 19:30'!trueString: aString	self propertyAt: #trueString put: aString! !!MABooleanDescription methodsFor: 'accessing-readonly' stamp: 'lr 3/9/2006 11:31'!trueStrings	^ self class defaultTrueStrings! !!MAClassDescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:23'!defaultKind	^ Class! !!MAClassDescription class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!isAbstract	^ false! !!MAClassDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!label	^ 'Class'! !!MAClassDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:31'!acceptMagritte: aVisitor	aVisitor visitClassDescription: self! !!MAColorDescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:23'!defaultKind	^ MACompatibility colorClass! !!MAColorDescription class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!isAbstract	^ false! !!MAColorDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!label	^ 'Color'! !!MAColorDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:31'!acceptMagritte: aVisitor	aVisitor visitColorDescription: self! !!MAElementDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitElementDescription: self! !!MAElementDescription methodsFor: 'converting' stamp: 'lr 3/9/2006 11:32'!asContainer	^ MAContainer with: self! !!MAElementDescription methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!default	^ self propertyAt: #default ifAbsent: [ self class defaultDefault ]! !!MAElementDescription methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!default: anObject	self propertyAt: #default put: anObject! !!MAFileDescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:32'!defaultKind	^ MAMemoryFileModel! !!MAFileDescription class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isAbstract	^ false! !!MAFileDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!label	^ 'File'! !!MAFileDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitFileDescription: self! !!MADateAndTimeDescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:23'!defaultKind	^ DateAndTime! !!MADateAndTimeDescription class methodsFor: 'testing' stamp: 'pmm 8/31/2009 20:07'!isAbstract	^ false! !!MADateAndTimeDescription class methodsFor: 'accessing' stamp: 'pmm 8/31/2009 20:13'!label	^ 'Date and Time'! !!MADateAndTimeDescription methodsFor: 'visiting' stamp: 'pmm 8/31/2009 20:20'!acceptMagritte: aVisitor	aVisitor visitDateAndTimeDescription: self! !!MADateDescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:23'!defaultKind	^ Date! !!MADateDescription class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!isAbstract	^ false! !!MADateDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!label	^ 'Date'! !!MADateDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitDateDescription: self! !!MADurationDescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:23'!defaultKind	^ Duration! !!MADurationDescription class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isAbstract	^ false! !!MADurationDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!label	^ 'Duration'! !!MADurationDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitDurationDescription: self! !!MAMagnitudeDescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultMax	^ nil! !!MAMagnitudeDescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultMin	^ nil! !!MAMagnitudeDescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionMax	^ self new		accessor: #max;		label: 'Maximum';		priority: 410;		yourself! !!MAMagnitudeDescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionMin	^ self new		accessor: #min;		label: 'Min';		priority: 400;		yourself! !!MAMagnitudeDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitMagnitudeDescription: self! !!MAMagnitudeDescription methodsFor: 'testing' stamp: 'lr 8/18/2007 10:47'!isSortable	^ true! !!MAMagnitudeDescription methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!isWithinRange: anObject	^ (self min isNil or: [ self min <= anObject ])		and: [ self max isNil or: [ self max >= anObject ] ]! !!MAMagnitudeDescription methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!max	^ self propertyAt: #max ifAbsent: [ self class defaultMax ]! !!MAMagnitudeDescription methodsFor: 'accessing' stamp: 'lr 3/25/2009 19:31'!max: aMagnitudeOrNil	"Set the maximum for accepted values, or ==nil== if open."	self propertyAt: #max put: aMagnitudeOrNil! !!MAMagnitudeDescription methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!min	^ self propertyAt: #min ifAbsent: [ self class defaultMin ]! !!MAMagnitudeDescription methodsFor: 'accessing' stamp: 'lr 3/25/2009 19:31'!min: aMagnitudeOrNil	"Set the minimum for accepted values, or ==nil== if open."	self propertyAt: #min put: aMagnitudeOrNil! !!MAMagnitudeDescription methodsFor: 'conveniance' stamp: 'lr 4/10/2007 21:40'!min: aMinimumObject max: aMaximumObject	"Set the minimum and maximum of accepted values, or ==nil== if open."	self min: aMinimumObject; max: aMaximumObject! !!MAMagnitudeDescription methodsFor: 'accessing-messages' stamp: 'lr 7/25/2008 17:46'!rangeErrorMessage	| min max |	^ self propertyAt: #rangeErrorMessage ifAbsent: [		min := self toString: self min. max := self toString: self max.		(self min notNil and: [ self max notNil ])			ifTrue: [ ^ 'Input must be between ' , min , ' and ' , max ].		(self min notNil and: [ self max isNil ])			ifTrue: [ ^ 'Input must be above or equeal to ' , min ].		(self min isNil and: [ self max notNil ])			ifTrue: [ ^ 'Input must be below or equal to ' , max ] ]! !!MAMagnitudeDescription methodsFor: 'accessing-messages' stamp: 'lr 3/25/2009 19:31'!rangeErrorMessage: aString	self propertyAt: #rangeErrorMessage put: aString! !!MAMagnitudeDescription methodsFor: 'validation-private' stamp: 'lr 9/12/2007 17:27'!validateSpecific: anObject	super validateSpecific: anObject.	(self isWithinRange: anObject)		ifFalse: [ MARangeError description: self signal: self rangeErrorMessage ]! !!MANumberDescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:23'!defaultKind	^ Number! !!MANumberDescription class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isAbstract	^ false! !!MANumberDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!label	^ 'Number'! !!MANumberDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitNumberDescription: self! !!MANumberDescription methodsFor: 'convenience' stamp: 'lr 2/5/2009 21:16'!beInteger	self addCondition: (MACondition selector: #isInteger) labelled: 'No integer was entered'! !!MANumberDescription methodsFor: 'convenience' stamp: 'lr 2/5/2009 21:16'!beNegative	self addCondition: (MACondition selector: #negative) labelled: 'No negative number was entered'! !!MANumberDescription methodsFor: 'convenience' stamp: 'lr 2/5/2009 21:16'!bePositive	self addCondition: (MACondition selector: #positive) labelled: 'No positive number was entered'! !!MATimeDescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:23'!defaultKind	^ Time! !!MATimeDescription class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isAbstract	^ false! !!MATimeDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!label	^ 'Time'! !!MATimeDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitTimeDescription: self! !!MATimeStampDescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:23'!defaultKind	^ TimeStamp! !!MATimeStampDescription class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isAbstract	^ false! !!MATimeStampDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!label	^ 'Timestamp'! !!MATimeStampDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitTimeStampDescription: self! !!MAMultipleOptionDescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultDistinct	^ false! !!MAMultipleOptionDescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:23'!defaultKind	^ Collection! !!MAMultipleOptionDescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultOrdered	^ false! !!MAMultipleOptionDescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionDistinct	^ MABooleanDescription new		accessor: #distinct;		label: 'Distinct';		priority: 250;		default: self defaultDistinct;		yourself! !!MAMultipleOptionDescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionOrdered	^ MABooleanDescription new		accessor: #ordered;		label: 'Ordered';		priority: 260;		default: self defaultOrdered;		yourself! !!MAMultipleOptionDescription class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isAbstract	^ false! !!MAMultipleOptionDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!label	^ 'Multiple-Option'! !!MAMultipleOptionDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitMultipleOptionDescription: self! !!MAMultipleOptionDescription methodsFor: 'actions' stamp: 'lr 3/9/2006 11:32'!beDistinct	self distinct: true! !!MAMultipleOptionDescription methodsFor: 'actions' stamp: 'lr 3/9/2006 11:32'!beIndefinite	self distinct: false! !!MAMultipleOptionDescription methodsFor: 'actions' stamp: 'lr 3/9/2006 11:32'!beOrdered	self ordered: true! !!MAMultipleOptionDescription methodsFor: 'actions' stamp: 'lr 3/9/2006 11:32'!beUnordered	self ordered: false! !!MAMultipleOptionDescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!distinct	^ self propertyAt: #distinct ifAbsent: [ self class defaultDistinct ]! !!MAMultipleOptionDescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!distinct: aBoolean	self propertyAt: #distinct put: aBoolean! !!MAMultipleOptionDescription methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!isDistinct	^ self distinct! !!MAMultipleOptionDescription methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!isOrdered	^ self ordered! !!MAMultipleOptionDescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!ordered	^ self propertyAt: #ordered ifAbsent: [ self class defaultOrdered ]! !!MAMultipleOptionDescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!ordered: aBoolean	self propertyAt: #ordered put: aBoolean! !!MAMultipleOptionDescription methodsFor: 'validating' stamp: 'lr 11/14/2006 17:59'!validateKind: anObject	super validateKind: anObject.	(anObject allSatisfy: [ :each | self options includes: each ])		ifFalse: [ MAKindError description: self signal: self kindErrorMessage ]! !!MAMultipleOptionDescription methodsFor: 'validating' stamp: 'lr 2/16/2007 08:49'!validateRequired: anObject	super validateRequired: anObject.	(self isRequired and: [ anObject isCollection and: [ anObject isEmpty ] ])		ifTrue: [ MARequiredError description: self signal: self requiredErrorMessage ]! !!MAOptionDescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultOptions	^ OrderedCollection new! !!MAOptionDescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultSorted	^ false! !!MAOptionDescription class methodsFor: 'accessing-description' stamp: 'lr 3/9/2006 11:33'!descriptionDefault	^ nil! !!MAOptionDescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionOptions	^ MAMemoDescription new		accessor: #optionsTextual;		label: 'Options';		priority: 410;		default: self defaultOptions;		yourself! !!MAOptionDescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionSorted	^ MABooleanDescription new		accessor: #sorted;		label: 'Sorted';		priority: 240;		default: self defaultSorted;		yourself! !!MAOptionDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitOptionDescription: self! !!MAOptionDescription methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:32'!allOptions	^ self prepareOptions: self options copy! !!MAOptionDescription methodsFor: 'accessing-dynamic' stamp: 'lr 5/5/2006 19:31'!allOptionsWith: anObject	^ self prepareOptions: ((self shouldNotInclude: anObject)		ifFalse: [ self options copyWith: anObject ]		ifTrue: [ self options copy ])! !!MAOptionDescription methodsFor: 'actions' stamp: 'lr 3/9/2006 11:32'!beSorted	self sorted: true! !!MAOptionDescription methodsFor: 'actions' stamp: 'lr 3/9/2006 11:32'!beUnsorted	self sorted: false! !!MAOptionDescription methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!isSorted	^ self sorted! !!MAOptionDescription methodsFor: 'private' stamp: 'lr 9/12/2007 17:27'!labelForOption: anObject	self propertyAt: #labels ifPresent: [ :labels |		labels at: anObject ifPresent: [ :value |			^ value ] ].	^ self reference toString: anObject! !!MAOptionDescription methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!options	^ options ifNil: [ options := self class defaultOptions ]! !!MAOptionDescription methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!options: anArray	options := anArray! !!MAOptionDescription methodsFor: 'accessing' stamp: 'lr 9/12/2007 17:27'!optionsAndLabels: aCollection	"Set the options to be the keys of aCollection and the labels to be the values of aCollection."	self options: (aCollection collect: [ :assoc | assoc key ]).	self propertyAt: #labels put: (aCollection		inject: IdentityDictionary new		into: [ :result :assoc | result add: assoc; yourself ])! !!MAOptionDescription methodsFor: 'accessing-textual' stamp: 'lr 3/9/2006 11:32'!optionsTextual	^ (self reference toStringCollection: self options)		asMultilineString! !!MAOptionDescription methodsFor: 'accessing-textual' stamp: 'lr 4/21/2007 18:30'!optionsTextual: aString	| lines |	lines := (aString ifNil: [ String new ]) lines.	^ self options: (self reference fromStringCollection: lines)! !!MAOptionDescription methodsFor: 'copying' stamp: 'lr 3/26/2007 11:45'!postCopy	super postCopy.	options := options copy! !!MAOptionDescription methodsFor: 'private' stamp: 'lr 9/24/2007 19:18'!prepareOptions: aCollection	^ self isSorted		ifFalse: [ aCollection asArray ]		ifTrue: [ 			aCollection asArray				sort: self sortBlock;				yourself ]! !!MAOptionDescription methodsFor: 'accessing-dynamic' stamp: 'lr 5/5/2006 19:31'!shouldNotInclude: anObject	^ anObject isNil or: [ self options includes: anObject ]! !!MAOptionDescription methodsFor: 'private' stamp: 'lr 3/9/2006 11:32'!sortBlock	^ [ :a :b | (self reference toString: a) caseInsensitiveLessOrEqual: (self reference toString: b) ]! !!MAOptionDescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!sorted	^ self propertyAt: #sorted ifAbsent: [ self class defaultSorted ]! !!MAOptionDescription methodsFor: 'accessing-properties' stamp: 'lr 3/25/2009 19:31'!sorted: aBoolean	self propertyAt: #sorted put: aBoolean! !!MAOptionDescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!undefined: aString	super undefined: aString.	self reference isNil		ifFalse: [ self reference undefined: aString ]! !!MASingleOptionDescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultExtensible	^ false! !!MASingleOptionDescription class methodsFor: 'accessing-descriptions' stamp: 'lr 4/10/2008 14:17'!descriptionExtensible	^ MABooleanDescription new		accessor: #extensible;		label: 'Extensible';		priority: 250;		default: self defaultExtensible;		yourself! !!MASingleOptionDescription class methodsFor: 'accessing-descriptions' stamp: 'mb 4/10/2008 02:03'!descriptionGroupBy	^ MASymbolDescription new		selectorAccessor: #groupBy;		label: 'Grouped by';		priority: 260;		default: nil;		yourself! !!MASingleOptionDescription class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isAbstract	^ false! !!MASingleOptionDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!label	^ 'Single-Option'! !!MASingleOptionDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitSingleOptionDescription: self! !!MASingleOptionDescription methodsFor: 'actions' stamp: 'lr 3/9/2006 11:32'!beExtensible	self extensible: true! !!MASingleOptionDescription methodsFor: 'actions' stamp: 'lr 3/9/2006 11:32'!beLimited	self extensible: false! !!MASingleOptionDescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!extensible	^ self propertyAt: #extensible ifAbsent: [ self class defaultExtensible ]! !!MASingleOptionDescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!extensible: aBoolean	self propertyAt: #extensible put: aBoolean! !!MASingleOptionDescription methodsFor: 'accessing-properties' stamp: 'lr 9/3/2008 11:43'!groupBy	^ self propertyAt: #groupBy ifAbsent: [ nil ]! !!MASingleOptionDescription methodsFor: 'accessing-properties' stamp: 'lr 3/25/2009 19:31'!groupBy: anAccessor	"anAccessor to be sent to the options objects for getting their group."		self propertyAt: #groupBy put: anAccessor asAccessor! !!MASingleOptionDescription methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!isExtensible	^ self extensible! !!MASingleOptionDescription methodsFor: 'testing' stamp: 'mb 4/10/2008 00:37'!isGrouped	^ self groupBy notNil! !!MASingleOptionDescription methodsFor: 'private' stamp: 'lr 3/9/2006 11:32'!prepareOptions: aCollection	^ self isRequired		ifTrue: [ super prepareOptions: aCollection ]		ifFalse: [			(super prepareOptions: aCollection)				copyWithFirst: nil ]! !!MASingleOptionDescription methodsFor: 'accessing-dynamic' stamp: 'lr 5/5/2006 19:32'!shouldNotInclude: anObject	^ self isExtensible not		or: [ super shouldNotInclude: anObject ]! !!MASingleOptionDescription methodsFor: 'validating' stamp: 'lr 11/14/2006 17:59'!validateKind: anObject	super validateKind: anObject.	(self isExtensible or: [ self options includes: anObject ])		ifFalse: [ MAKindError description: self signal: self kindErrorMessage ]! !!MAReferenceDescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultReference	^ MAStringDescription new! !!MAReferenceDescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionReference	^ MAToOneRelationDescription new		accessor: #reference;		classes: [ MADescription withAllConcreteClasses ] asDynamicObject;		label: 'Description';		priority: 400;		beRequired;		yourself! !!MAReferenceDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitReferenceDescription: self! !!MAReferenceDescription methodsFor: 'copying' stamp: 'lr 3/26/2007 11:44'!postCopy	super postCopy.	reference := reference copy! !!MAReferenceDescription methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!reference	^ reference ifNil: [ reference := self class defaultReference ]! !!MAReferenceDescription methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!reference: aDescription	reference := aDescription! !!MARelationDescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultClasses	^ Set new! !!MARelationDescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultReference	^ nil! !!MARelationDescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionClasses	^ MAMultipleOptionDescription new		accessor: #classes;		label: 'Classes';		priority: 400;		options: [ Smalltalk allClasses ] asDynamicObject;		reference: MAClassDescription new;		yourself! !!MARelationDescription class methodsFor: 'accessing-description' stamp: 'lr 3/9/2007 14:32'!descriptionReference	^ super descriptionReference		classes: [ MAContainer withAllConcreteClasses ] asDynamicObject;		beOptional;		yourself! !!MARelationDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitRelationDescription: self! !!MARelationDescription methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:32'!allClasses	^ (Array withAll: self classes)		sort: [ :a :b | a label caseInsensitiveLessOrEqual: b label ];		yourself! !!MARelationDescription methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!classes	^ classes ifNil: [ classes := self class defaultClasses ]! !!MARelationDescription methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!classes: aCollection	classes := aCollection! !!MARelationDescription methodsFor: 'accessing-dynamic' stamp: 'lr 5/27/2006 17:20'!commonClass	"Answer a common superclass of the classes of the receiver. The algorithm is implemented to be as efficient as possible. The inner loop will be only executed the first few iterations."	| current |	self classes isEmpty		ifTrue: [ ^ self class descriptionContainer ].	current := self classes anyOne.	self classes do: [ :each |		[ each includesBehavior: current ]			whileFalse: [ current := current superclass ] ].	^ current! !!MARelationDescription methodsFor: 'copying' stamp: 'lr 3/26/2007 11:45'!postCopy	super postCopy.	classes := classes copy! !!MARelationDescription methodsFor: 'accessing-dynamic' stamp: 'lr 4/10/2007 21:42'!reference	"The reference within a ==*MARelationDescription*== is calculated automatically from all the classes of the receiver, if set to ==nil==. By setting the reference to a ==*MAContainer*== instance it is possible to customize the reference description."	^ super reference ifNil: [ self commonClass description ]! !!MAToManyRelationDescription class methodsFor: 'accessing-defaults' stamp: 'dc 4/16/2006 18:53'!defaultDefinitive	^ false! !!MAToManyRelationDescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:24'!defaultKind	^ Collection! !!MAToManyRelationDescription class methodsFor: 'accessing-defaults' stamp: 'dc 4/15/2006 15:02'!defaultOrdered	^ false! !!MAToManyRelationDescription class methodsFor: 'accessing-defaults' stamp: 'dc 4/16/2006 19:16'!defaultSorted	^ false! !!MAToManyRelationDescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionDefinitive	^ MABooleanDescription new		accessor: #definitive;		label: 'Definitive';		priority: 265;		default: self defaultDefinitive;		yourself! !!MAToManyRelationDescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionOrdered	^ MABooleanDescription new		accessor: #ordered;		label: 'Ordered';		priority: 260;		default: self defaultOrdered;		yourself! !!MAToManyRelationDescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionSorted	^ MABooleanDescription new		accessor: #sorted;		label: 'Sorted';		priority: 240;		default: self defaultSorted;		yourself! !!MAToManyRelationDescription class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isAbstract	^ false! !!MAToManyRelationDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!label	^ '1:m Relation'! !!MAToManyRelationDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitToManyRelationDescription: self! !!MAToManyRelationDescription methodsFor: 'actions' stamp: 'dc 4/16/2006 18:51'!beDefinitive	self definitive: true! !!MAToManyRelationDescription methodsFor: 'actions' stamp: 'dc 4/16/2006 18:56'!beModifiable	self definitive: false! !!MAToManyRelationDescription methodsFor: 'actions' stamp: 'dc 4/15/2006 15:01'!beOrdered	self ordered: true! !!MAToManyRelationDescription methodsFor: 'actions' stamp: 'dc 4/16/2006 19:16'!beSorted	self sorted: true! !!MAToManyRelationDescription methodsFor: 'actions' stamp: 'dc 4/15/2006 15:01'!beUnordered	self ordered: false! !!MAToManyRelationDescription methodsFor: 'actions' stamp: 'dc 4/16/2006 19:16'!beUnsorted	self sorted: false! !!MAToManyRelationDescription methodsFor: 'accessing-properties' stamp: 'dc 4/16/2006 18:50'!definitive	^ self propertyAt: #definitive ifAbsent: [ self class defaultDefinitive ]! !!MAToManyRelationDescription methodsFor: 'accessing-properties' stamp: 'dc 4/16/2006 18:51'!definitive: aBoolean	self propertyAt: #definitive put: aBoolean! !!MAToManyRelationDescription methodsFor: 'testing' stamp: 'dc 4/16/2006 18:51'!isDefinitive	^ self definitive! !!MAToManyRelationDescription methodsFor: 'testing' stamp: 'dc 4/15/2006 15:01'!isOrdered	^ self ordered! !!MAToManyRelationDescription methodsFor: 'testing' stamp: 'dc 4/16/2006 19:15'!isSorted	^ self sorted! !!MAToManyRelationDescription methodsFor: 'accessing-properties' stamp: 'dc 4/15/2006 15:01'!ordered	^ self propertyAt: #ordered ifAbsent: [ self class defaultOrdered ]! !!MAToManyRelationDescription methodsFor: 'accessing-properties' stamp: 'dc 4/15/2006 15:01'!ordered: aBoolean	self propertyAt: #ordered put: aBoolean! !!MAToManyRelationDescription methodsFor: 'accessing-properties' stamp: 'dc 4/16/2006 19:15'!sorted	^ self propertyAt: #sorted ifAbsent: [ self class defaultSorted ]! !!MAToManyRelationDescription methodsFor: 'accessing-properties' stamp: 'lr 3/25/2009 19:32'!sorted: aBoolean	self propertyAt: #sorted put: aBoolean! !!MAToManyRelationDescription methodsFor: 'validating' stamp: 'lr 11/14/2006 18:00'!validateKind: anObject	super validateKind: anObject.	anObject do: [ :object |		(self classes anySatisfy: [ :class | object species includesBehavior: class ])			ifFalse: [ MAKindError description: self signal: self kindErrorMessage ] ]! !!MAToManyRelationDescription methodsFor: 'validating' stamp: 'lr 2/16/2007 08:50'!validateRequired: anObject	super validateRequired: anObject.	(self isRequired and: [ anObject isCollection and: [ anObject isEmpty ] ])		ifTrue: [ MARequiredError description: self signal: self requiredErrorMessage ]! !!MAToManyScalarRelationDescription class methodsFor: 'accessing' stamp: 'pmm 11/3/2006 21:09'!label	^ '1:m scalar Relation'! !!MAToManyScalarRelationDescription methodsFor: 'visiting' stamp: 'pmm 11/3/2006 21:09'!acceptMagritte: aVisitor	aVisitor visitToManyScalarRelationDescription: self! !!MAToOneRelationDescription class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isAbstract	^ false! !!MAToOneRelationDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!label	^ '1:1 Relation'! !!MAToOneRelationDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitToOneRelationDescription: self! !!MAToOneRelationDescription methodsFor: 'validating' stamp: 'lr 11/14/2006 18:00'!validateKind: anObject	super validateKind: anObject.	(self classes anySatisfy: [ :class | anObject species = class ])		ifFalse: [ MAKindError description: self signal: self kindErrorMessage ]! !!MATableDescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultColumnLabels	^ OrderedCollection with: 'a' with: 'b' with: 'c'! !!MATableDescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:23'!defaultKind	^ MATableModel! !!MATableDescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultRowLabels	^ OrderedCollection with: '1' with: '2' with: '3'! !!MATableDescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionColumnLabels	^ MAMemoDescription new		accessor: #columnLabelsTextual;		label: 'Column Labels';		priority: 250;		yourself! !!MATableDescription class methodsFor: 'accessing-description' stamp: 'lr 3/9/2006 11:33'!descriptionDefault	^ nil! !!MATableDescription class methodsFor: 'accessing-description' stamp: 'lr 3/9/2006 11:33'!descriptionRequired	^ nil! !!MATableDescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionRowLabels	^ MAMemoDescription new		accessor: #rowLabelsTextual;		label: 'Row Labels';		priority: 250;		yourself! !!MATableDescription class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isAbstract	^ false! !!MATableDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!label	^ 'Table'! !!MATableDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitTableDescription: self! !!MATableDescription methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!columnCount	^ self columnLabels size! !!MATableDescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!columnLabels	^ self propertyAt: #columnLabels ifAbsent: [ self class defaultColumnLabels ]! !!MATableDescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!columnLabels: aCollection	self propertyAt: #columnLabels put: aCollection! !!MATableDescription methodsFor: 'accessing-textual' stamp: 'lr 3/9/2006 11:32'!columnLabelsTextual	^ (MAStringDescription new toStringCollection: self columnLabels)		asMultilineString! !!MATableDescription methodsFor: 'accessing-textual' stamp: 'lr 3/9/2006 11:32'!columnLabelsTextual: aString	self columnLabels: (MAStringDescription new fromStringCollection: aString lines)! !!MATableDescription methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!rowCount	^ self rowLabels size! !!MATableDescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!rowLabels	^ self propertyAt: #rowLabels ifAbsent: [ self class defaultRowLabels ]! !!MATableDescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!rowLabels: aCollection	self propertyAt: #rowLabels put: aCollection! !!MATableDescription methodsFor: 'accessing-textual' stamp: 'lr 3/9/2006 11:32'!rowLabelsTextual	^ (MAStringDescription new toStringCollection: self rowLabels)		asMultilineString! !!MATableDescription methodsFor: 'accessing-textual' stamp: 'lr 3/9/2006 11:32'!rowLabelsTextual: aString	self rowLabels: (MAStringDescription new fromStringCollection: aString lines)! !!MATableDescription methodsFor: 'validation-private' stamp: 'lr 9/12/2007 17:27'!validateSpecific: anObject	super validateSpecific: anObject.	(anObject rowCount ~= self rowCount or: [ anObject columnCount ~= self columnCount ])		ifTrue: [ MAKindError description: self signal: self kindErrorMessage ]! !!MATokenDescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:24'!defaultKind	^ Array! !!MATokenDescription class methodsFor: 'accessing-defaults' stamp: 'lr 2/5/2009 10:56'!defaultSeparators	^ ' ,;' , String crlf , String tab! !!MATokenDescription class methodsFor: 'accessing-description' stamp: 'lr 2/5/2009 10:45'!descriptionSeparators	^ MAStringDescription new		accessor: #separators;		label: 'Separators';		priority: 250;		yourself! !!MATokenDescription class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isAbstract	^ false! !!MATokenDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!label	^ 'Token'! !!MATokenDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitTokenDescription: self! !!MATokenDescription methodsFor: 'accessing' stamp: 'lr 2/5/2009 10:46'!separators	^ separators ifNil: [ separators := self class defaultSeparators ]! !!MATokenDescription methodsFor: 'accessing' stamp: 'lr 2/5/2009 10:57'!separators: aString	"A string with the separator characters to split tokens, the first character is used as a default for printing."	separators := aString! !!MAMemoDescription class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultLineCount	^ 3! !!MAMemoDescription class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionLineCount	^ MANumberDescription new		accessor: #lineCount;		label: 'Number of Lines';		priority: 400;		default: self defaultLineCount;		beInteger;		min: 1;		yourself! !!MAMemoDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!label	^ 'Memo'! !!MAMemoDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitMemoDescription: self! !!MAMemoDescription methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:32'!lineCount	^ self propertyAt: #lineCount ifAbsent: [ self class defaultLineCount ]! !!MAMemoDescription methodsFor: 'accessing-properties' stamp: 'lr 3/25/2009 19:31'!lineCount: anInteger	self propertyAt: #lineCount put: anInteger! !!MAPasswordDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!label	^ 'Password'! !!MAPasswordDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitPasswordDescription: self! !!MAPasswordDescription methodsFor: 'testing' stamp: 'lr 9/26/2007 18:32'!isObfuscated: anObject	^ anObject notNil		and: [ anObject isString		and: [ anObject isEmpty not		and: [ anObject allSatisfy: [ :each | each = $* ] ] ] ]! !!MAPasswordDescription methodsFor: 'testing' stamp: 'lr 8/18/2007 10:47'!isSortable	^ false! !!MAPasswordDescription methodsFor: 'operators' stamp: 'lr 3/9/2006 11:32'!obfuscated: anObject	^ String new: (self toString: anObject) size withAll: $*! !!MAStringDescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:23'!defaultKind	^ String! !!MAStringDescription class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isAbstract	^ false! !!MAStringDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!label	^ 'String'! !!MAStringDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitStringDescription: self! !!MAStringDescription methodsFor: 'testing' stamp: 'lr 8/18/2007 10:47'!isSortable	^ true! !!MASymbolDescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:23'!defaultKind	^ Symbol! !!MASymbolDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!label	^ 'Symbol'! !!MASymbolDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor	aVisitor visitSymbolDescription: self! !!MACachedMemento class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:32'!isAbstract	^ false! !!MACachedMemento methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!cache	^ cache! !!MACachedMemento methodsFor: 'actions' stamp: 'lr 3/9/2006 11:31'!commit	super commit.	self push: self cache.	self reset! !!MACachedMemento methodsFor: 'testing' stamp: 'lr 5/14/2008 20:28'!hasChanged	"Answer ==true==, if the cached data is different to the data in the model."	^ self isDifferent: self cache to: self pullRaw! !!MACachedMemento methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!readUsing: aDescription	^ self cache at: aDescription! !!MACachedMemento methodsFor: 'actions' stamp: 'lr 3/9/2006 11:31'!reset	super reset.	self setCache: self pull! !!MACachedMemento methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:31'!setCache: aDictionary	cache := aDictionary! !!MACachedMemento methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!write: anObject using: aDescription	self cache at: aDescription put: anObject! !!MACheckedMemento methodsFor: 'testing' stamp: 'lr 5/14/2008 20:26'!hasConflict	"Answer ==true==, if there is an edit conflict."	^ self hasChanged and: [ self isDifferent: self original to: self pullRaw ]! !!MACheckedMemento methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!original	^ original! !!MACheckedMemento methodsFor: 'actions' stamp: 'lr 3/9/2006 11:31'!reset	super reset.	self setOriginal: self pullRaw! !!MACheckedMemento methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:31'!setOriginal: aDictionary	original := aDictionary! !!MACheckedMemento methodsFor: 'actions' stamp: 'lr 5/14/2008 20:28'!validate	self hasConflict		ifFalse: [ ^ super validate ].	self reset.	MAConflictError		description: self description		signal: self description conflictErrorMessage! !!MAMemento class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:33'!model: aModel	^ self model: aModel description: aModel description! !!MAMemento class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:33'!model: aModel description: aDescription	^ self new		setModel: aModel;		setDescription: aDescription;		reset; yourself! !!MAMemento methodsFor: 'actions' stamp: 'lr 3/9/2006 11:32'!commit	"Commit the receiver into the model."! !!MAMemento methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!description	^ description! !!MAMemento methodsFor: 'private' stamp: 'lr 5/14/2008 20:27'!isDifferent: firstDictionary to: secondDictionary	| firstValue secondValue |	self description do: [ :each |		(each isVisible and: [ each isReadonly not ]) ifTrue: [			firstValue := firstDictionary at: each ifAbsent: [ nil ].			secondValue := secondDictionary at: each ifAbsent: [ nil ].			firstValue = secondValue ifFalse: [ ^ true ] ] ].	^ false! !!MAMemento methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!model	^ model! !!MAMemento methodsFor: 'printing' stamp: 'lr 3/9/2006 11:32'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' model: '; print: self model! !!MAMemento methodsFor: 'private' stamp: 'lr 2/8/2009 19:20'!pull	"Utility method to pull the model into a dictionary mapping descriptions to values. nil values are replaced with the default ones of the model."	| result |	result := self pullRaw.	result keysAndValuesDo: [ :key :value |		value isNil			ifTrue: [ result at: key put: key default yourself ] ].	^ result! !!MAMemento methodsFor: 'private' stamp: 'lr 5/14/2008 20:22'!pullRaw	| result |	result := Dictionary new.	self description do: [ :each |		result at: each put: (self model			readUsing: each) ].	^ result! !!MAMemento methodsFor: 'private' stamp: 'lr 2/8/2009 19:20'!push: aDictionary	"Utility method to push a dictionary mapping descriptions to values into the model."	aDictionary keysAndValuesDo: [ :key :value |		(key isVisible and: [ key isReadonly not ]) 			ifTrue: [ self model write: value using: key ] ]! !!MAMemento methodsFor: 'actions' stamp: 'lr 3/9/2006 11:32'!reset	"Reset the memento from the model."! !!MAMemento methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:32'!setDescription: aDescription	description := aDescription! !!MAMemento methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:32'!setModel: aModel	model := aModel! !!MAMemento methodsFor: 'actions' stamp: 'lr 5/29/2006 09:23'!validate	"Check if the data in the receiver would be valid if committed. In case of problems an exception is raised."	self description validate: self! !!MAStraitMemento class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isAbstract	^ false! !!MAStraitMemento methodsFor: 'private' stamp: 'lr 3/9/2006 11:32'!readUsing: aDescription	^ (self model readUsing: aDescription)		ifNil: [ aDescription default ]! !!MAStraitMemento methodsFor: 'private' stamp: 'lr 3/9/2006 11:32'!write: anObject using: aDescription	self model write: anObject using: aDescription! !!MAObject class methodsFor: 'initialization' stamp: 'lr 9/13/2007 15:38'!initialize	MACompatibility openWorkspace: self license titled: 'Magritte License'! !!MAObject class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isAbstract	^ true! !!MAObject class methodsFor: 'accessing' stamp: 'trs 9/3/2009 14:31'!license	"Return a string with the license of the package. This string shall not be removed or altered in any case."	^ 'The MIT LicenseCopyright (c) 2003-' , Date today year printString , ' Lukas Renggli, renggli at gmail.comCopyright (c) 2003-' , Date today year printString , ' ContributorsPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.'! !!MAObject class methodsFor: 'instance-creation' stamp: 'lr 9/28/2007 08:20'!new	"Create a new instance of the receiving class and checks if it is concrete."	self isAbstract		ifTrue: [ self error: self name , ' is abstract.' ].	^ self basicNew initialize! !!MAObject class methodsFor: 'reflection' stamp: 'lr 3/9/2006 11:33'!withAllConcreteClasses	^ Array streamContents: [ :stream |		self withAllConcreteClassesDo: [ :each |			stream nextPut: each ] ]! !!MAObject class methodsFor: 'reflection' stamp: 'lr 3/9/2006 11:33'!withAllConcreteClassesDo: aBlock	self withAllSubclassesDo: [ :each |		each isAbstract ifFalse: [			aBlock value: each ] ]! !!MAObject methodsFor: 'comparing' stamp: 'lr 4/10/2007 21:40'!= anObject	"Answer whether the receiver and the argument represent the same object. This default implementation checks if the species of the compared objects are the same, so that superclasses might call super before performing their own check. Also redefine the message ==#hash== when redefining this message."	^ self species = anObject species! !!MAObject methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!acceptMagritte: aVisitor! !!MAObject methodsFor: 'private' stamp: 'lr 4/10/2008 14:11'!errorPropertyNotFound: aSelector 	MAPropertyError signal: 'Property ' , aSelector , ' not found.'! !!MAObject methodsFor: 'testing' stamp: 'lr 4/10/2007 21:40'!hasProperty: aKey	"Test if the property ==aKey== is defined within the receiver."	^ self properties includesKey: aKey! !!MAObject methodsFor: 'comparing' stamp: 'lr 4/10/2007 21:40'!hash	"Answer a SmallInteger whose value is related to the receiver's identity. Also redefine the message ==#= == when redefining this message."	^ self species hash! !!MAObject methodsFor: 'initialization' stamp: 'lr 4/18/2007 17:37'!initialize! !!MAObject methodsFor: 'copying' stamp: 'lr 5/29/2006 09:05'!postCopy	"This method is called whenever a shallow copy of the receiver is made. Redefine this method in subclasses to copy other fields as necessary. Never forget to call super, else class invariants might be violated."	super postCopy.	properties := properties copy! !!MAObject methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!properties	"Answer the property dictionary of the receiver."	^ properties ifNil: [ properties := Dictionary new ]! !!MAObject methodsFor: 'accessing' stamp: 'lr 4/10/2007 21:41'!propertyAt: aKey	"Answer the value of the property ==aKey==, raises an error if the property doesn't exist."	^ self propertyAt: aKey ifAbsent: [ self errorPropertyNotFound: aKey ]! !!MAObject methodsFor: 'accessing' stamp: 'lr 4/10/2007 21:54'!propertyAt: aKey ifAbsent: aBlock	"Answer the value of the property ==aKey==, or the result of ==aBlock== if the property doesn't exist."	^ self properties at: aKey ifAbsent: aBlock! !!MAObject methodsFor: 'accessing' stamp: 'lr 4/10/2007 21:41'!propertyAt: aKey ifAbsentPut: aBlock	"Answer the value of the property ==aKey==, or if the property doesn't exist adds and answers the result of evaluating ==aBlock==."	^ self properties at: aKey ifAbsentPut: aBlock! !!MAObject methodsFor: 'accessing' stamp: 'lr 4/12/2007 19:49'!propertyAt: aKey ifPresent: aBlock	"Lookup the property ==aKey==, if it is present, answer the value of evaluating ==aBlock== block with the value. Otherwise, answer ==nil==."	^ self properties at: aKey ifPresent: aBlock! !!MAObject methodsFor: 'accessing' stamp: 'lr 4/10/2007 21:41'!propertyAt: aKey put: aValue	"Adds or replaces the property ==aKey== with ==aValue==."	^ self properties at: aKey put: aValue! !!MASortBlock class methodsFor: 'instance-creation' stamp: 'lr 4/10/2008 13:50'!accessor: anAccessor selector: aSelector	^ self basicNew initializeAccessor: anAccessor selector: aSelector! !!MASortBlock class methodsFor: 'instance-creation' stamp: 'lr 4/10/2008 13:55'!selector: aSelector 	^ self 		accessor: MAIdentityAccessor new		selector: aSelector! !!MASortBlock methodsFor: 'actions' stamp: 'lr 4/10/2008 14:01'!fixTemps! !!MASortBlock methodsFor: 'initialize-release' stamp: 'lr 4/10/2008 13:41'!initializeAccessor: anAccessor selector: aSelector	accessor := anAccessor asAccessor.	selector := aSelector! !!MASortBlock methodsFor: 'evaluating' stamp: 'lr 4/10/2008 13:42'!value: aFirstObject value: aSecondObject	^ (accessor read: aFirstObject)		perform: selector		with: (accessor read: aSecondObject)! !!MATableModel class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:33'!rows: aRowCount columns: aColumnCount	^ self rows: aRowCount columns: aColumnCount contents: (Array new: aRowCount * aColumnCount)! !!MATableModel class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:33'!rows: aRowCount columns: aColumnCount contents: anArray	^ self new		setRowCount: aRowCount;		setColumnCount: aColumnCount;		setContents: anArray;		yourself! !!MATableModel methodsFor: 'comparing' stamp: 'lr 2/16/2007 08:50'!= aTable	^ self species = aTable species		and: [ self rowCount = aTable rowCount		and: [ self columnCount = aTable columnCount		and: [ self contents = aTable contents ] ] ]! !!MATableModel methodsFor: 'accessing' stamp: 'lr 4/10/2007 21:42'!at: aRowIndex at: aColumnIndex	"Answer the contents of ==aRowIndex== and ==aColumnIndex==. Raises an error if the coordinates are out of bounds."	self checkAt: aRowIndex at: aColumnIndex.	^ self uncheckedAt: aRowIndex at: aColumnIndex! !!MATableModel methodsFor: 'accessing' stamp: 'lr 4/10/2007 21:43'!at: aRowIndex at: aColumnIndex put: aValue	"Set the contents of ==aRowIndex== and ==aColumnIndex==> to ==aValue==. Raises an error if the coordinates are out of bounds."	self checkAt: aRowIndex at: aColumnIndex.	^ self uncheckedAt: aRowIndex at: aColumnIndex put: aValue! !!MATableModel methodsFor: 'private' stamp: 'lr 3/9/2006 11:32'!checkAt: aRowIndex at: aColumnIndex	(aRowIndex between: 1 and: self rowCount)		ifFalse: [ self error: 'Row subscript out of range.' ].	(aColumnIndex between: 1 and: self columnCount)		ifFalse: [ self error: 'Column subscript out of range.' ]! !!MATableModel methodsFor: 'enumeration' stamp: 'lr 3/28/2007 10:28'!collect: aBlock	| copy |	copy := self copyEmpty.	self do: [ :row :col :val |		copy			at: row at: col			put: (aBlock value: row value: col value: val) ].	^ copy! !!MATableModel methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!columnCount	"Answer the column count of the table."	^ columnCount! !!MATableModel methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!contents	^ contents! !!MATableModel methodsFor: 'copying' stamp: 'lr 3/9/2006 11:32'!copyEmpty	^ self class rows: self rowCount columns: self columnCount! !!MATableModel methodsFor: 'copying' stamp: 'lr 3/9/2006 11:32'!copyRows: aRowCount columns: aColumnCount	| table |	table := self class rows: aRowCount columns: aColumnCount.	1 to: (self rowCount min: aRowCount) do: [ :row |		1 to: (self columnCount min: aColumnCount) do: [ :col |			table				uncheckedAt: row at: col				put: (self uncheckedAt: row at: col) ] ].	^ table! !!MATableModel methodsFor: 'enumeration' stamp: 'lr 3/9/2006 11:32'!do: aBlock	1 to: self rowCount do: [ :row |		1 to: self columnCount do: [ :col |			aBlock				value: row value: col				value: (self uncheckedAt: row at: col) ] ]! !!MATableModel methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:32'!hash	^ self contents hash! !!MATableModel methodsFor: 'private' stamp: 'lr 3/9/2006 11:32'!indexAt: aRowIndex at: aColumnIndex	^ (aRowIndex - 1) * self columnCount + aColumnIndex! !!MATableModel methodsFor: 'private' stamp: 'lr 3/9/2006 11:32'!pointAt: anIndex	^ Point x: (anIndex - 1 // self columnCount + 1) y: (anIndex - 1 \\ self columnCount + 1)! !!MATableModel methodsFor: 'copying' stamp: 'lr 3/9/2006 11:32'!postCopy	super postCopy.	self setContents: self contents copy! !!MATableModel methodsFor: 'operations' stamp: 'lr 4/10/2007 21:43'!reshapeRows: aRowCount columns: aColumnCount	"Change the size of the receiving table to ==aRowCount== times ==aColumnCount==, throwing away elements that are cut off and initializing empty cells with ==nil==."	self setContents: (self copyRows: aRowCount columns: aColumnCount) contents.	self setRowCount: aRowCount; setColumnCount: aColumnCount! !!MATableModel methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!rowCount	"Answer the row count of the table."	^ rowCount! !!MATableModel methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:32'!setColumnCount: anInteger	columnCount := anInteger! !!MATableModel methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:32'!setContents: anArray	contents := anArray! !!MATableModel methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:32'!setRowCount: anInteger	rowCount := anInteger! !!MATableModel methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!uncheckedAt: aRowIndex at: aColumnIndex	^ self contents at: (self indexAt: aRowIndex at: aColumnIndex)! !!MATableModel methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!uncheckedAt: aRowIndex at: aColumnIndex put: aValue	^ self contents at: (self indexAt: aRowIndex at: aColumnIndex) put: aValue! !!MADescriptionHolder class methodsFor: 'accessing' stamp: 'lr 10/29/2009 20:55'!descriptionClasses	^ MAElementDescription withAllConcreteClasses asOrderedCollection! !!MADescriptionHolder class methodsFor: 'accessing' stamp: 'lr 10/29/2009 20:56'!descriptionValue	^ MASingleOptionDescription new		reference: MAClassDescription new;		options: self descriptionClasses;		selectorAccessor: 'contents';		groupBy: #grouping;		label: 'Type';		priority: 20;		yourself! !!MADescriptionHolder class methodsFor: 'groups' stamp: 'lr 10/29/2009 20:59'!groupChoice	^ Set new		add: MABooleanDescription;		add: MASingleOptionDescription;		add: MAMultipleOptionDescription;		add: MAToOneRelationDescription;		add: MAToManyRelationDescription;		add: MAToManyScalarRelationDescription;				yourself! !!MADescriptionHolder class methodsFor: 'groups' stamp: 'lr 10/29/2009 20:58'!groupMagnitude	^ Set new		add: MANumberDescription;		add: MADurationDescription;		add: MADateDescription;		add: MATimeDescription;		add: MATimeStampDescription;		add: MADateAndTimeDescription;		yourself! !!MADescriptionHolder class methodsFor: 'groups' stamp: 'lr 10/29/2009 20:55'!groupMisc	^ Set new		add: MAFileDescription;		add: MAClassDescription;		add: MATableDescription;		yourself! !!MADescriptionHolder class methodsFor: 'groups' stamp: 'lr 10/29/2009 20:57'!groupOf: aClass 	(self groupText includes: aClass)		ifTrue: [ ^ 'Text' ].	(self groupChoice includes: aClass)		ifTrue: [ ^ 'Choice' ].	(self groupMagnitude includes: aClass)		ifTrue: [ ^ 'Magnitude' ].	(self groupPick includes: aClass)		ifTrue: [ ^ 'Pick' ].	(self groupMisc includes: aClass)		ifTrue: [ ^ 'Miscellaneous' ].	^ 'Other'! !!MADescriptionHolder class methodsFor: 'groups' stamp: 'lr 10/29/2009 20:56'!groupPick	^ Set new		add: MAColorDescription;		add: MATokenDescription;		yourself! !!MADescriptionHolder class methodsFor: 'groups' stamp: 'lr 10/29/2009 20:56'!groupText	^ Set new		add: MAStringDescription;		add: MAMemoDescription;		add: MASymbolDescription;		add: MAPasswordDescription;		yourself! !!MADescriptionHolder methodsFor: 'initialize-release' stamp: 'lr 8/14/2008 11:44'!initialize	super initialize.	self contents: self class descriptionClasses first! !!MAValueHolder class methodsFor: 'instance-creation' stamp: 'lr 8/14/2008 11:45'!new	^ self basicNew initialize! !!MAValueHolder class methodsFor: 'instance-creation' stamp: 'lr 8/14/2008 11:45'!on: anObject	^ self new contents: anObject! !!MAValueHolder methodsFor: 'accessing' stamp: 'lr 8/14/2008 11:43'!contents	^ contents! !!MAValueHolder methodsFor: 'accessing' stamp: 'lr 8/14/2008 11:43'!contents: anObject	contents := anObject! !!MAValueHolder methodsFor: 'initialize-release' stamp: 'lr 8/14/2008 11:45'!initialize! !!MAGraphVisitor methodsFor: 'initialization' stamp: 'lr 2/16/2007 08:35'!initialize	super initialize.	seen := IdentitySet new! !!MAGraphVisitor methodsFor: 'accessing' stamp: 'lr 2/16/2007 09:26'!object	^ object! !!MAGraphVisitor methodsFor: 'private' stamp: 'lr 9/12/2007 17:27'!use: anObject during: aBlock	| previous |	(seen includes: anObject)		ifTrue: [ ^ self ].	anObject isNil		ifFalse: [ seen add: anObject ].	previous := object. object := anObject.	aBlock ensure: [ object := previous ]! !!MAValidatorVisitor class methodsFor: 'instance-creation' stamp: 'lr 2/16/2007 08:32'!on: anObject description: aDescription	^ self new on: anObject description: aDescription! !!MAValidatorVisitor methodsFor: 'initialization' stamp: 'lr 11/6/2009 15:50'!on: anObject description: aDescription	self use: anObject during: [ self visit: aDescription ]! !!MAValidatorVisitor methodsFor: 'private' stamp: 'lr 4/20/2007 12:00'!validate: anObject using: aDescription	aDescription validateRequired: anObject.	anObject ifNil: [ ^ self ].	aDescription		validateKind: anObject;		validateSpecific: anObject;		validateConditions: anObject! !!MAValidatorVisitor methodsFor: 'visiting' stamp: 'lr 11/6/2009 15:49'!visit: aDescription	"Validate the current object using aDescription within an exception handler to avoid running further tests that might cause error-cascades. In case of an error record it in the error collection and re-raise it at a later point in time."		(aDescription isVisible and: [ aDescription isReadonly not ])		ifFalse: [ ^ self ].	super visit: aDescription! !!MAValidatorVisitor methodsFor: 'visiting-descriptions' stamp: 'lr 11/6/2009 15:57'!visitContainer: aDescription	| errors |	super visitContainer: aDescription.	self object ifNil: [ ^ self ].	errors := OrderedCollection new.	aDescription do: [ :description |		[ self			use: (object readUsing: description)			during: [ self visit: description ] ]				on: MAValidationError				do: [ :err | errors add: err ] ].	errors isEmpty ifFalse: [ 		MAMultipleErrors			description: aDescription 			errors: errors			signal: aDescription label ]! !!MAValidatorVisitor methodsFor: 'visiting-descriptions' stamp: 'lr 11/6/2009 09:23'!visitDescription: aDescription	self validate: self object using: aDescription! !!MAValidatorVisitor methodsFor: 'visiting-descriptions' stamp: 'lr 4/30/2008 22:29'!visitTableDescription: aDescription	super visitTableDescription: aDescription.	self object ifNil: [ ^ self ].	self object contents do: [ :each |		self use: each during: [			self visit: aDescription reference ] ]! !!MAReader class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:33'!read: aStream description: aDescription	^ self new read: aStream description: aDescription! !!MAReader methodsFor: 'private' stamp: 'lr 4/10/2008 14:11'!error: aString 	MAReadError signal: aString! !!MAReader methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!read: aStream description: aDescription	self		stream: aStream;		visit: aDescription.	^ self object! !!MAStringReader methodsFor: 'private' stamp: 'lr 5/21/2009 13:36'!nextMatchAll: aCollection on: aStream	"Tries to match ==aCollection== on ==aStream==. Answer ==true== if ==aCollection== was consumed, otherwise ==false==."	| position |	(aCollection isNil or: [ aCollection isEmpty ])		ifTrue: [ ^ false ].	position := aStream position.	aCollection do: [ :char |		(aStream atEnd or: [ aStream next ~= char ]) ifTrue: [			aStream position: position.			^ false ] ].	^ true! !!MAStringReader methodsFor: 'visiting' stamp: 'lr 5/21/2009 13:34'!read: aStream description: aDescription	(aStream atEnd or: [ self nextMatchAll: aDescription undefined on: aStream ])		ifTrue: [ ^ nil ].	^ super read: aStream description: aDescription! !!MAStringReader methodsFor: 'visiting-description' stamp: 'lr 4/10/2008 14:10'!visitBooleanDescription: aDescription	(aDescription trueString = self contents		or: [ aDescription trueStrings includes: self contents ])			ifTrue: [ ^ self object: true ].	(aDescription falseString = self contents		or: [ aDescription falseStrings includes: self contents ])			ifTrue: [ ^ self object: false ].	MAReadError signal! !!MAStringReader methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitClassDescription: aDescription	self shouldNotImplement! !!MAStringReader methodsFor: 'visiting-description' stamp: 'lr 4/10/2008 14:10'!visitColorDescription: aDescription	(self contents notEmpty and: [ self contents allSatisfy: [ :each | '#0123456789ABCDEFabcdef.' includes: each ] ])		ifFalse: [ MAReadError signal ].	self object: (aDescription kind fromString: self contents)! !!MAStringReader methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitContainer: anObject	self shouldNotImplement! !!MAStringReader methodsFor: 'visiting-description' stamp: 'lr 4/10/2008 14:10'!visitDurationDescription: aDescription	| contents |	contents := self contents.	contents isEmpty		ifTrue: [ MAReadError signal ].	(contents occurrencesOf: $-) > 1		ifTrue: [ MAReadError signal ].	(contents indexOf: $-) > 1		ifTrue: [ MAReadError signal ].	(contents occurrencesOf: $.) > 1		ifTrue: [ MAReadError signal ].	(contents allSatisfy: [:each | '-0123456789.:' includes: each])		ifFalse: [ MAReadError signal ].	super visitDurationDescription: aDescription! !!MAStringReader methodsFor: 'visiting-description' stamp: 'lr 4/10/2008 14:11'!visitElementDescription: aDescription	"This implementation can be very dangerous and might lead to a potential security hole (this is tested), since the default implementation of #readFrom: in Object evaluates the expression to find its value. Most subclasses like Number, Date, Time, ... override this implementation, but some others (like Boolean) do not."	self object: ([ aDescription kind readFrom: self stream ]		on: Error do: [ :err | MAReadError signal: err messageText ])! !!MAStringReader methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitFileDescription: aDescription	self shouldNotImplement! !!MAStringReader methodsFor: 'visiting-description' stamp: 'lr 1/18/2008 19:18'!visitMultipleOptionDescription: aDescription	self object: (Array streamContents: [ :output |		[ self stream atEnd ] whileFalse: [			output nextPut: (aDescription reference				fromString: (self stream upTo: $,)).			self stream peek = Character space				ifTrue: [ self stream next ] ] ])! !!MAStringReader methodsFor: 'visiting-description' stamp: 'lr 4/10/2008 14:10'!visitNumberDescription: aDescription	| contents |	contents := self contents.	contents isEmpty		ifTrue: [ MAReadError signal ].	(contents occurrencesOf: $-) > 1		ifTrue: [ MAReadError signal ].	(contents indexOf: $-) > 1		ifTrue: [ MAReadError signal ].	(contents occurrencesOf: $.) > 1		ifTrue: [ MAReadError signal ].	(contents allSatisfy: [ :each | '+-0123456789.eE' includes: each ])		ifFalse: [ MAReadError signal ].	super visitNumberDescription: aDescription! !!MAStringReader methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitRelationDescription: aDescription	self shouldNotImplement! !!MAStringReader methodsFor: 'visiting-description' stamp: 'lr 5/21/2009 13:39'!visitSingleOptionDescription: aDescription	aDescription propertyAt: #labels ifPresent: [ :labels |		labels keysAndValuesDo: [ :key :value |			(self nextMatchAll: value on: self stream)				ifTrue: [ ^ self object: key ] ] ].	self visit: aDescription reference! !!MAStringReader methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitStringDescription: aDescription	self object: self contents! !!MAStringReader methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitSymbolDescription: aDescription	self object: self contents asSymbol! !!MAStringReader methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitTableDescription: aDescription	self shouldNotImplement! !!MAStringReader methodsFor: 'visiting-description' stamp: 'lr 4/10/2008 14:10'!visitTimeDescription: aDescription	| string |	string := self contents.	(string notEmpty and: [ string allSatisfy: [ :each | '0123456789: apm' includes: each ] ])		ifFalse: [ MAReadError signal ].	self object: (aDescription kind readFrom: string readStream)! !!MAStringReader methodsFor: 'visiting-description' stamp: 'lr 2/5/2009 10:52'!visitTokenDescription: aDescription	| token |	self object: (aDescription kind streamContents: [ :output |		[ self stream atEnd ] whileFalse: [			token := WriteStream on: String new.			[ self stream atEnd or: [ aDescription separators includes: self stream peek ] ]				whileFalse: [ token nextPut: self stream next ].			self stream atEnd 				ifFalse: [ self stream next ].			token contents isEmpty				ifFalse: [ output nextPut: (aDescription reference fromString: token contents) ] ] ])! !!MAStreamingVisitor methodsFor: 'streaming' stamp: 'lr 3/9/2006 11:32'!contents	^ self stream contents! !!MAStreamingVisitor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!object	^ object! !!MAStreamingVisitor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!object: anObject	object := anObject! !!MAStreamingVisitor methodsFor: 'private' stamp: 'lr 3/9/2006 11:32'!object: anObject during: aBlock	| previous |	previous := self object. self object: anObject.	aBlock ensure: [ self object: previous ]! !!MAStreamingVisitor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!stream	^ stream! !!MAStreamingVisitor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!stream: aStream	stream := aStream! !!MAStringWriter methodsFor: 'private' stamp: 'lr 5/21/2009 13:24'!defaultWriteStream	^ WriteStream on: String new! !!MAStringWriter methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitBooleanDescription: aDescription	self stream nextPutAll: (self object		ifTrue: [ aDescription trueString ]		ifFalse: [ aDescription falseString ])! !!MAStringWriter methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitClassDescription: aDescription	self stream nextPutAll: self object label! !!MAStringWriter methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitColorDescription: aDescription	stream nextPut: $#.	stream nextPutAll: ((255 * self object red) asInteger		printPaddedWith: $0 to: 2 base: 16).	stream nextPutAll: ((255 * self object green) asInteger		printPaddedWith: $0 to: 2 base: 16).	stream nextPutAll: ((255 * self object blue) asInteger		printPaddedWith: $0 to: 2 base: 16)! !!MAStringWriter methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitContainer: aDescription	aDescription do: [ :each |		each isVisible ifTrue: [			each stringWriter				write: (self object readUsing: each)				description: each to: stream.			^ self ] ]! !!MAStringWriter methodsFor: 'visiting-description' stamp: 'pmm 8/31/2009 20:18'!visitDateAndTimeDescription: aDescription	self stream print: self object! !!MAStringWriter methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitElementDescription: aDescription	self stream nextPutAll: self object asString! !!MAStringWriter methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitFileDescription: aDescription	self stream nextPutAll: self object filename! !!MAStringWriter methodsFor: 'visiting-description' stamp: 'lr 5/21/2009 13:23'!visitMultipleOptionDescription: aDescription	self object isEmpty		ifTrue: [ self stream nextPutAll: aDescription undefined ]		ifFalse: [			self object				do: [ :each | self stream nextPutAll: (aDescription labelForOption: each) ]				separatedBy: [ self stream nextPutAll: ', ' ] ]! !!MAStringWriter methodsFor: 'visiting-description' stamp: 'lr 5/21/2009 13:21'!visitSingleOptionDescription: aDescription	self stream nextPutAll: (aDescription labelForOption: self object)! !!MAStringWriter methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitTimeDescription: aDescription	self object print24: true showSeconds: true on: self stream! !!MAStringWriter methodsFor: 'visiting-description' stamp: 'pmm 8/31/2009 20:18'!visitTimeStampDescription: aDescription	self stream print: self object asDate; space.	self stream print: self object asTime! !!MAStringWriter methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitToManyRelationDescription: aDescription	self object		do: [ :each | self object: each during: [ self visit: each description ] ]		separatedBy: [ self stream nextPutAll: ', ' ]! !!MAStringWriter methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitToOneRelationDescription: aDescription	self visit: self object description! !!MAStringWriter methodsFor: 'visiting-description' stamp: 'lr 2/5/2009 10:48'!visitTokenDescription: aDescription	self object		do: [ :each | self object: each during: [ self visit: aDescription reference ] ]		separatedBy: [ self stream nextPut: aDescription separators first ]! !!MAStringWriter methodsFor: 'visiting' stamp: 'lr 5/21/2009 13:25'!write: anObject description: aDescription to: aStream	anObject isNil 		ifTrue: [ aStream nextPutAll: aDescription undefined ]		ifFalse: [ super write: anObject description: aDescription to: aStream ].	^ aStream contents! !!MAWriter class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:33'!write: anObject	^ self new write: anObject! !!MAWriter class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:33'!write: anObject description: aDescription	^ self new write: anObject description: aDescription! !!MAWriter class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:33'!write: anObject description: aDescription to: aStream	^ self new write: anObject description: aDescription to: aStream! !!MAWriter methodsFor: 'private' stamp: 'lr 3/9/2006 11:32'!defaultWriteStream	self subclassResponsibility! !!MAWriter methodsFor: 'private' stamp: 'lr 4/10/2008 14:12'!error: aString 	MAWriteError signal: aString! !!MAWriter methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!write: anObject	^ self write: anObject description: anObject description! !!MAWriter methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!write: anObject description: aDescription	^ self write: anObject description: aDescription to: self defaultWriteStream! !!MAWriter methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:32'!write: anObject description: aDescription to: aStream	self		object: anObject;		stream: aStream;		visit: aDescription.	^ self contents! !!MAVisitor class methodsFor: 'private' stamp: 'lr 3/9/2006 11:33'!buildVisitorHierarchyForClass: aClass selector: aBlock classified: aSelector	" self buildVisitorHierarchyForClass: MADescription selector: [ :class | 'visit' , (class name allButFirst: 2) , ':' ] classified: #'visiting-description' "	aClass withAllSubclassesDo: [ :class |		(class category beginsWith: 'Magritte') ifTrue: [			self				compile: (String streamContents: [ :stream |					stream nextPutAll: (aBlock value: class); nextPutAll: ' anObject'; cr.					class = aClass ifFalse: [						stream tab; nextPutAll: 'self '; nextPutAll: (aBlock value: class superclass); nextPutAll: ' anObject.' ] ])				classified: aSelector.			class				compile: (String streamContents: [ :stream |					stream nextPutAll: 'acceptMagritte: aVisitor'; cr.					stream tab; nextPutAll: 'aVisitor '; nextPutAll: (aBlock value: class); nextPutAll: ' self.' ])				classified: #visiting ] ]! !!MAVisitor class methodsFor: 'instance creation' stamp: 'lr 8/14/2008 00:13'!new	^ self basicNew initialize! !!MAVisitor methodsFor: 'initialize-release' stamp: 'lr 8/14/2008 00:16'!initialize! !!MAVisitor methodsFor: 'visiting' stamp: 'lr 4/10/2007 21:43'!visit: anObject	"Visit ==anObject== with the receiving visitor."	anObject acceptMagritte: self! !!MAVisitor methodsFor: 'visiting' stamp: 'lr 4/10/2007 21:43'!visitAll: aCollection	"Visit all elements of ==aCollection== with the receiving visitor."	aCollection do: [ :each | self visit: each ]! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitBooleanDescription: anObject	self visitElementDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitClassDescription: anObject	self visitElementDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitColorDescription: anObject	self visitElementDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitContainer: anObject	self visitDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'pmm 8/31/2009 20:08'!visitDateAndTimeDescription: anObject	self visitMagnitudeDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitDateDescription: anObject	self visitMagnitudeDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitDurationDescription: anObject	self visitMagnitudeDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitElementDescription: anObject	self visitDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitFileDescription: anObject	self visitElementDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitMagnitudeDescription: anObject	self visitElementDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitMemoDescription: anObject	self visitStringDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitMultipleOptionDescription: anObject	self visitOptionDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitNumberDescription: anObject	self visitMagnitudeDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitOptionDescription: anObject	self visitReferenceDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitPasswordDescription: anObject	self visitStringDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitPriorityContainer: anObject	self visitContainer: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitReferenceDescription: anObject	self visitElementDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitRelationDescription: anObject	self visitReferenceDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitReportContainer: anObject	self visitContainer: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitSingleOptionDescription: anObject	self visitOptionDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitStringDescription: anObject	self visitElementDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitSymbolDescription: anObject	self visitStringDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitTableDescription: anObject	self visitReferenceDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitTableReference: anObject	^ self visitReferenceDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitTimeDescription: anObject	self visitMagnitudeDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'pmm 8/31/2009 20:08'!visitTimeStampDescription: anObject	self visitDateAndTimeDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitToManyRelationDescription: anObject	self visitRelationDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'pmm 11/3/2006 21:09'!visitToManyScalarRelationDescription: anObject	self visitToManyRelationDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitToOneRelationDescription: anObject	self visitRelationDescription: anObject! !!MAVisitor methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:32'!visitTokenDescription: anObject	self visitReferenceDescription: anObject! !!Object class methodsFor: '*magritte-model-accessing' stamp: 'lr 3/27/2006 15:47'!description	^ MADescriptionBuilder for: self! !!Object methodsFor: '*magritte-model-accessing' stamp: 'lr 2/18/2009 15:02'!basicDescription	"Return the description of the reciever. Subclasses might override this message to return instance-based descriptions."	^ self class description! !!Object methodsFor: '*magritte-model-accessing' stamp: 'lr 2/18/2009 15:05'!description	"Return the canonical description of the receiver. Never override this method, instead modify #description."	^ self basicDescription! !!Object methodsFor: '*magritte-model-model' stamp: 'lr 9/23/2008 08:15'!initializeMagritte	"Initializes the receiving object with the default values of its description."	self description do: [ :each |		each isReadonly			ifFalse: [ self write: each default using: each ] ]! !!Object methodsFor: '*magritte-model-testing' stamp: 'lr 3/9/2006 11:31'!isDescription	^ false! !!Object methodsFor: '*magritte-model-accessing' stamp: 'lr 3/9/2006 11:31'!mementoClass	"Return a class to be used to remember or cache the receiver, namely a memento object."	^ MACheckedMemento! !!Object methodsFor: '*magritte-model-model' stamp: 'lr 3/9/2006 11:31'!readUsing: aDescription	"Dispatch the read-access to the receiver using the accessor of aDescription."	^ aDescription accessor read: self! !!Object methodsFor: '*magritte-model-model' stamp: 'lr 3/9/2006 11:31'!write: anObject using: aDescription	"Dispatch the write-access to the receiver of anObject using the accessor of aDescription."	aDescription accessor write: anObject to: self! !!Collection methodsFor: '*magritte-model' stamp: 'lr 3/9/2006 11:31'!asMultilineString	^ String streamContents: [ :stream |		self			do: [ :each | stream nextPutAll: each ]			separatedBy: [ stream nextPut: Character cr ] ]! !!Collection methodsFor: '*magritte-model' stamp: 'lr 3/9/2006 11:31'!copyWithAll: aCollection	^ self copy		addAll: aCollection;		yourself! !!Collection methodsFor: '*magritte-model' stamp: 'lr 3/9/2006 11:31'!copyWithoutFirst: anObject	| done |	done := false.	^ self reject: [ :each |		each = anObject			and: [ done not ]			and: [ done := true ] ]! !!Collection methodsFor: '*magritte-model' stamp: 'trs 9/28/2009 19:04'!copyWithoutFirstOccurrenceOf: anObject	| done |	done := false.	^ self reject: [ :each |		each = anObject			and: [ done not ]			and: [ done := true ] ]! !!UndefinedObject methodsFor: '*magritte-model-converting' stamp: 'lr 4/10/2008 13:35'!asAccessor	^ MANullAccessor new! !!UndefinedObject methodsFor: '*magritte-model-accessing' stamp: 'lr 3/9/2006 11:31'!label	^ 'n/a'! !!Symbol methodsFor: '*magritte-model-converting' stamp: 'lr 4/10/2008 13:33'!asAccessor	^ MASelectorAccessor selector: self! !!Symbol methodsFor: '*magritte-model-testing' stamp: 'lr 3/27/2006 17:44'!isDescriptionDefinition	"Answer wheter the receiver is a method selector following the naming conventions of a description definition."	^ self isDescriptionSelector		and: [ self isUnary ]! !!Symbol methodsFor: '*magritte-model-testing' stamp: 'lr 2/12/2007 19:06'!isDescriptionExtension: aSelector	"Answer wheter the receiver is a method selector following the naming conventions of a description extension to aSelector."	^ self isDescriptionSelector		and: [ self numArgs = 1		and: [ self beginsWith: aSelector ] ]! !!Symbol methodsFor: '*magritte-model-testing' stamp: 'lr 2/12/2007 19:06'!isDescriptionSelector	"Answer wheter the receiver is a method selector following the naming conventions of a  description selector."	^ self ~= #description		and: [ self beginsWith: #description ]! !!ArrayedCollection methodsFor: '*magritte-model' stamp: 'lr 7/31/2007 21:29'!copyWithAll: aCollection	^ (self species new: self size + aCollection size)		replaceFrom: 1 to: self size with: self startingAt: 1;		replaceFrom: self size + 1 to: self size + aCollection size with: aCollection startingAt: 1;		yourself! !!SequenceableCollection methodsFor: '*magritte-model' stamp: 'kph 6/9/2008 17:51'!asAccessor	^ MAChainAccessor accessors: self! !!SequenceableCollection methodsFor: '*magritte-model' stamp: 'kph 10/13/2007 17:06'!moveDown: anObject	| first second |	first := self identityIndexOf: anObject ifAbsent: [ ^ 0 ].	second := first < self size ifTrue: [ first + 1 ] ifFalse: [ ^ first ].	self swap: first with: second.	^ second! !!SequenceableCollection methodsFor: '*magritte-model' stamp: 'kph 10/13/2007 17:06'!moveUp: anObject	| first second |	first := self identityIndexOf: anObject ifAbsent: [ ^ 0 ].	second := first > 1 ifTrue: [ first - 1 ] ifFalse: [ ^ first ].	self swap: first with: second.	^ second! !!SequenceableCollection methodsFor: '*magritte-model' stamp: 'lr 10/27/2007 12:12'!reduce: aBlock	| result |	self isEmpty		ifTrue: [ ^ nil ].	result := self first.	2 to: self size do: [ :index |		result := aBlock			value: result			value: (self at: index) ].	^ result! !!MAError methodsFor: 'printing' stamp: 'lr 8/2/2008 17:45'!displayString	^ self printString! !!MAMultipleErrors class methodsFor: 'instance-creation' stamp: 'lr 4/10/2008 14:12'!description: aDescription errors: aCollection signal: aString 	^ self new		setDescription: aDescription;		setCollection: aCollection;		signal: aString;		yourself! !!MAMultipleErrors methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!collection	^ collection! !!MAMultipleErrors methodsFor: 'printing' stamp: 'lr 11/14/2006 17:55'!printOn: aStream	self collection		do: [ :each | aStream print: each ]		separatedBy: [ aStream nextPut: Character cr ]! !!MAMultipleErrors methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:32'!setCollection: aCollection	collection := aCollection! !!MAValidationError class methodsFor: 'instance-creation' stamp: 'lr 4/10/2008 14:12'!description: aDescription signal: aString 	^ self new		setDescription: aDescription;		signal: aString;		yourself! !!MAValidationError methodsFor: 'printing' stamp: 'lr 4/30/2008 22:32'!printOn: aStream	(self tag isDescription and: [ self tag label notNil ])		ifTrue: [ aStream nextPutAll: self tag label; nextPutAll: ': ' ].	aStream nextPutAll: self messageText! !!MAValidationError methodsFor: 'initialization' stamp: 'lr 9/3/2008 14:32'!setDescription: aDescription	self tag: aDescription! !!String methodsFor: '*magritte-model-accessing' stamp: 'lr 3/28/2007 10:32'!lines	"Retrun a collection with the string-lines of the receiver."	| input |	input := self readStream.	^ Array streamContents: [ :output |		[ input atEnd ] whileFalse: [			output nextPut: (input upTo: Character cr).			input peek = Character lf				ifTrue: [ input next ] ] ]! !!String methodsFor: '*magritte-model-testing' stamp: 'lr 3/9/2006 11:31'!matches: aString	aString isEmpty ifTrue: [ ^ true ].	^ (aString includesAnyOf: '*#')		ifTrue: [ aString match: self ]		ifFalse: [ self includesSubstring: aString caseSensitive: false ]! !!Integer methodsFor: '*magritte-model-converting' stamp: 'lr 3/9/2006 11:31'!asFileSize	#( 'B' 'KB' 'MB' 'GB' 'TB' 'PB' 'EB' 'ZB' 'YB' )		inject: self		into: [ :value :each |			value < 1024				ifFalse: [ value // 1024 ]				ifTrue: [ ^ value asString , ' ' , each ] ]! !!Class methodsFor: '*magritte-model-configuration' stamp: 'lr 5/17/2006 15:47'!descriptionContainer	"Return the default description container."	^ MAPriorityContainer new		label: self label;		yourself! !!Class methodsFor: '*magritte-model-accessing' stamp: 'lr 3/9/2006 11:31'!label	"Answer a human-readable name of the receiving class. This implementation tries to be smart and return a nice label, unfortunately for a lot of classes this doesn't work well so subclasses might want to override this method and return soemthing more meaningfull to end-users."	| start input |	start := self name findFirst: [ :each | each isLowercase ].	input := (self name copyFrom: (1 max: start - 1) to: self name size)		readStream.	^ String streamContents: [ :stream |		[ input atEnd ] whileFalse: [			stream nextPut: input next.			(input atEnd or: [ input peek isLowercase ])				ifFalse: [ stream nextPut: Character space ] ] ]! !!MADynamicObject methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!realSubject	^ super realSubject on: UnhandledError do: [ :err | nil ]! !!MAProxyObject class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:33'!on: anObject	^ self basicNew realSubject: anObject! !!MAProxyObject methodsFor: 'copying' stamp: 'lr 5/17/2006 15:30'!copy	"It doesn't make sense to copy proxies in most cases, the real-subject needs to be looked up and will probably return a new instance on every call anyway."	^ self! !!MAProxyObject methodsFor: 'private' stamp: 'lr 3/9/2006 11:32'!doesNotUnderstand: aMessage	^ self realSubject		perform: aMessage selector		withArguments: aMessage arguments! !!MAProxyObject methodsFor: 'private' stamp: 'lr 4/10/2007 21:42'!isMorph	"Answer ==false==, since I am no morph. Squeak is calling this method after image-startup and might lock if I do not answer to this message."	^ false! !!MAProxyObject methodsFor: 'testing' stamp: 'lr 4/10/2007 21:42'!isNil	"This method is required to properly return ==true== if the ==realSubject== is ==nil==."	^ self realSubject isNil! !!MAProxyObject methodsFor: 'printing' stamp: 'lr 4/10/2007 21:42'!printOn: aStream	"Print the receiver on ==aStream== but within square-brackets to show that it is a proxied instance."	aStream nextPut: $[; print: self realSubject; nextPut: $]! !!MAProxyObject methodsFor: 'printing' stamp: 'lr 3/9/2006 11:32'!printString	^ String streamContents: [ :stream | self printOn: stream ]! !!MAProxyObject methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!realSubject	^ realSubject! !!MAProxyObject methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:32'!realSubject: anObject	realSubject := anObject! !"Magritte-Model"!!MAMockAddress class methodsFor: 'descriptions-extensions' stamp: 'lr 8/23/2008 12:04'!descriptionNilled1	^ nil! !!MAMockAddress class methodsFor: 'descriptions-extensions' stamp: 'lr 8/23/2008 12:04'!descriptionNilled1: aDescription	^ aDescription beRequired! !!MAMockAddress class methodsFor: 'descriptions-extensions' stamp: 'lr 8/23/2008 12:03'!descriptionNilled2	^ MAStringDescription new! !!MAMockAddress class methodsFor: 'descriptions-extensions' stamp: 'lr 8/23/2008 12:03'!descriptionNilled2: aDescription	^ nil! !!MAMockAddress class methodsFor: 'descriptions' stamp: 'lr 5/17/2009 22:37'!descriptionPlace	^ MAStringDescription new		accessor: #place;		label: 'Place';		yourself! !!MAMockAddress class methodsFor: 'descriptions-extensions' stamp: 'lr 8/23/2008 11:57'!descriptionPlace: aDescription	^ aDescription beRequired! !!MAMockAddress class methodsFor: 'descriptions-extensions' stamp: 'lr 8/23/2008 12:04'!descriptionPlaceOther: aDescription	^ aDescription beHidden! !!MAMockAddress class methodsFor: 'descriptions' stamp: 'lr 5/17/2009 22:37'!descriptionPlz	^ MANumberDescription new		accessor: #plz;		label: 'PLZ';		yourself! !!MAMockAddress class methodsFor: 'descriptions' stamp: 'lr 5/17/2009 22:37'!descriptionStreet	^ MAStringDescription new		accessor: #street;		label: 'Street';		yourself! !!MAMockAddress methodsFor: 'comparing' stamp: 'lr 2/16/2007 08:50'!= anObject	^ self species = anObject species		and: [ self street = anObject street		and: [ self plz = anObject plz		and: [ self place = anObject place ] ] ]! !!MAMockAddress methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:34'!hash	^ self street hash! !!MAMockAddress methodsFor: 'accessing-generated' stamp: 'lr 3/9/2006 11:34'!place	^ place! !!MAMockAddress methodsFor: 'accessing-generated' stamp: 'lr 3/9/2006 11:34'!place: anObject	place := anObject! !!MAMockAddress methodsFor: 'accessing-generated' stamp: 'lr 3/9/2006 11:34'!plz	^ plz! !!MAMockAddress methodsFor: 'accessing-generated' stamp: 'lr 3/9/2006 11:34'!plz: anObject	plz := anObject! !!MAMockAddress methodsFor: 'accessing-generated' stamp: 'lr 3/9/2006 11:34'!street	^ street! !!MAMockAddress methodsFor: 'accessing-generated' stamp: 'lr 3/9/2006 11:34'!street: anObject	street := anObject! !!MAAdaptiveModelTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:35'!descriptions	^ self scaffolder description children! !!MAAdaptiveModelTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:35'!scaffolder	^ scaffolder! !!MAAdaptiveModelTest methodsFor: 'running' stamp: 'lr 4/18/2007 17:58'!setUp	scaffolder := MAAdaptiveModel new.	scaffolder description		add: MAStringDescription new;		add: MANumberDescription new.	scaffolder write: 'foo' using: self descriptions first.	scaffolder write: 123 using: self descriptions second! !!MAAdaptiveModelTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!testRead	self assert: (self scaffolder readUsing: self descriptions first) = 'foo'.	self assert: (self scaffolder readUsing: self descriptions second) = 123! !!MAAdaptiveModelTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!testWrite	self scaffolder write: 'bar' using: self descriptions first.	self scaffolder write: 321 using: self descriptions second.	self assert: (self scaffolder readUsing: self descriptions first) = 'bar'.	self assert: (self scaffolder readUsing: self descriptions second) = 321! !!MAConditionTest methodsFor: 'testing' stamp: 'lr 2/5/2009 21:55'!testConjunctive	| condition |	condition := (MACondition selector: #isInteger) & (MACondition selector: #positive).	self assert: (condition value: 1).	self deny: (condition value: 1.5).		self deny: (condition value: -1).	self deny: (condition value: -1.5)! !!MAConditionTest methodsFor: 'testing' stamp: 'lr 2/5/2009 21:56'!testDisjunctive	| condition |	condition := (MACondition selector: #isInteger) | (MACondition selector: #positive).	self assert: (condition value: 1).	self assert: (condition value: 1.5).		self assert: (condition value: -1).	self deny: (condition value: -1.5)! !!MAConditionTest methodsFor: 'testing' stamp: 'lr 2/5/2009 21:54'!testNegation	| condition |	condition := (MACondition selector: #isInteger) not.	self assert: (condition value: 0.6).	self deny: (condition value: 1)! !!MAConditionTest methodsFor: 'testing' stamp: 'lr 2/5/2009 21:53'!testReceiverSelector	| condition |	condition := MACondition receiver: 1 selector: #=.	self assert: (condition value: 1).	self deny: (condition value: 0)! !!MAConditionTest methodsFor: 'testing' stamp: 'lr 2/5/2009 21:52'!testSelector	| condition |	condition := MACondition selector: #isInteger.	self assert: (condition value: -1).	self assert: (condition value: 1).	self deny: (condition value: 0.5)	! !!MAConditionTest methodsFor: 'testing' stamp: 'lr 2/5/2009 21:53'!testSelectorArgument	| condition |	condition := MACondition selector: #< argument: 5.	self assert: (condition value: 1).	self deny: (condition value: 5)! !!MADescriptionBuilderTest class methodsFor: 'mock-descriptions' stamp: 'lr 5/17/2006 15:56'!descriptionContainer	^ super descriptionContainer label: 'mock'! !!MADescriptionBuilderTest class methodsFor: 'mock-descriptions' stamp: 'lr 5/17/2006 15:58'!descriptionContainer: aDescription	^ aDescription propertyAt: #bar put: nil; yourself! !!MADescriptionBuilderTest class methodsFor: 'mock-descriptions' stamp: 'lr 5/17/2006 15:58'!descriptionContainerFoo: aDescription	^ aDescription propertyAt: #foo put: nil; yourself! !!MADescriptionBuilderTest class methodsFor: 'mock-descriptions' stamp: 'lr 2/14/2007 09:18'!descriptionDescription	^ MAToOneRelationDescription new label: 'foo'! !!MADescriptionBuilderTest class methodsFor: 'mock-descriptions' stamp: 'lr 5/17/2006 16:00'!descriptionDescription: aDescription	^ aDescription propertyAt: #foo put: nil; yourself! !!MADescriptionBuilderTest class methodsFor: 'mock-descriptions' stamp: 'lr 5/17/2006 16:00'!descriptionDescriptionBar: aDescription	^ aDescription propertyAt: #bar put: nil; yourself! !!MADescriptionBuilderTest class methodsFor: 'mock-descriptions' stamp: 'lr 2/14/2007 09:18'!descriptionDescriptionRec: aDescription	^ aDescription reference: self description! !!MADescriptionBuilderTest methodsFor: 'running' stamp: 'lr 3/30/2009 23:05'!setUp	super setUp.	MADescriptionBuilder default flush! !!MADescriptionBuilderTest methodsFor: 'testing' stamp: 'lr 5/17/2006 15:59'!testContainer	self assert: self description label = 'mock'.	self assert: (self description hasProperty: #foo).	self assert: (self description hasProperty: #bar)! !!MADescriptionBuilderTest methodsFor: 'testing' stamp: 'lr 2/14/2007 09:18'!testDescription	self assert: self description size = 1.	self assert: self description children first label = 'foo'.	self assert: (self description children first hasProperty: #foo).	self assert: (self description children first hasProperty: #bar)! !!MADescriptionBuilderTest methodsFor: 'testing' stamp: 'lr 8/23/2008 12:01'!testExtension	| description |	description := MAMockAddress new description		detect: [ :each | each accessor selector = #place ].	self assert: description isRequired.	self assert: description isVisible not! !!MADescriptionBuilderTest methodsFor: 'testing' stamp: 'lr 8/23/2008 12:03'!testNilled	| description |	description := MAMockAddress new description.	self assert: description size = 3! !!MADescriptionBuilderTest methodsFor: 'testing' stamp: 'lr 2/14/2007 09:19'!testRecursive	self assert: self description children first reference = self description! !!MADynamicObjectTest methodsFor: 'testing' stamp: 'lr 3/30/2009 22:58'!testCalculated	| object dummy |	object := [ Time millisecondClockValue ] asDynamicObject.	dummy := object yourself.	(Delay forMilliseconds: 2) wait.	self assert: dummy < object yourself! !!MADynamicObjectTest methodsFor: 'testing' stamp: 'lr 3/30/2009 22:58'!testCollection	| object |	object := [ OrderedCollection with: 1 with: 2 ] asDynamicObject.	self assert: object size = 2.	self assert: object first = 1.	self assert: object second = 2.	object add: 3.	self assert: object size = 2.	self assert: object first = 1.	self assert: object second = 2! !!MADynamicObjectTest methodsFor: 'testing' stamp: 'lr 3/30/2009 22:58'!testConstant	| object |	object := [ self ] asDynamicObject.	self assert: object = self.	object := [ 123 ] asDynamicObject.	self assert: object = 123! !!MADynamicObjectTest methodsFor: 'testing' stamp: 'lr 3/30/2009 22:58'!testCopy	| object first second |	object := [ Time millisecondClockValue ] asDynamicObject copy.	first := object yourself.	(Delay forMilliseconds: 2) wait.	second := object yourself.	self assert: first < second! !!MADynamicObjectTest methodsFor: 'testing' stamp: 'lr 3/30/2009 22:58'!testCounter	| object counter |	counter := nil.	object := [		counter := counter isNil			ifTrue: [ 1 ]			ifFalse: [ counter := counter + 1 ] ]		asDynamicObject.	self assert: object = 1.	self assert: object yourself = 2.	self assert: object yourself yourself = 3! !!MADynamicObjectTest methodsFor: 'testing' stamp: 'lr 3/30/2009 22:59'!testDynamic	| object collection |	collection := nil.	object := [		collection isNil			ifTrue: [ collection := OrderedCollection with: 1 with: 2 ]			ifFalse: [ collection ] ]		asDynamicObject.	self assert: object size = 2.	self assert: object first = 1.	self assert: object second = 2.	object add: 3.	self assert: object size = 3.	self assert: object first = 1.	self assert: object second = 2.	self assert: object third = 3! !!MADynamicObjectTest methodsFor: 'testing' stamp: 'lr 3/30/2009 22:59'!testException	| object |	object := [ 1 / 0 ] asDynamicObject.	self 		should: [ object asString ]		raise: ZeroDivide.	object := [ Halt signal ] asDynamicObject.	self assert: object asString = 'nil'! !!MADynamicObjectTest methodsFor: 'testing' stamp: 'lr 3/30/2009 22:59'!testNilOrNotNil	| object |	object := [ 1 ] asDynamicObject.	self deny: object isNil.	self assert: object notNil.	object := [ nil ] asDynamicObject.	self assert: object isNil.	self deny: object notNil! !!MAExtensionsTest methodsFor: 'testing-string' stamp: 'lr 8/13/2008 23:53'!testAsString	self assert: Object new asString = Object new printString.	self assert: 'Hello World' asString = 'Hello World'.	self assert: 123 asString = '123'	! !!MAExtensionsTest methodsFor: 'testing-collection' stamp: 'lr 5/14/2008 20:34'!testCopyWithAll	| col res |	col := #( a b ).	res := col copyWithAll: #( c d ).	self assert: res = #( a b c d ).	self deny: col == res.	col := Set with: #a with: #b.	res := col copyWithAll: #( c d ).	self assert: (res size = 4).	self assert: (res includes: #a).	self assert: (res includes: #b).	self assert: (res includes: #c).	self assert: (res includes: #d).	self deny: col == res.	col := OrderedCollection with: #a with: #b.	res := col copyWithAll: #( c d ).	self assert: res = (OrderedCollection with: #a with: #b with: #c with: #d).	self deny: col == res! !!MAExtensionsTest methodsFor: 'testing-collection' stamp: 'trs 9/28/2009 19:46'!testCopyWithoutFirst	| col res |	col := #( a b a c ).	res := col copyWithoutFirstOccurrenceOf: #a.	self assert: res = #( b a c ).	self deny: col == res.	col := Set with: #a with: #b with: #c.	res := col copyWithoutFirstOccurrenceOf: #a.	self assert: res size = 2.	self assert: (res includes: #b).	self assert: (res includes: #c).	self deny: col == res! !!MAExtensionsTest methodsFor: 'testing-integer' stamp: 'lr 3/9/2006 11:34'!testFileSize	self assert: (1000) asFileSize = '1000 B'.	self assert: (1024) asFileSize = '1 KB'.	self assert: (1000 * 1000) asFileSize = '976 KB'.	self assert: (1024 * 1024) asFileSize = '1 MB'.	self assert: (1000 * 1000 * 1000) asFileSize = '953 MB'.	self assert: (1024 * 1024 * 1024) asFileSize = '1 GB'.	self assert: (1000 * 1000 * 1000 * 1000) asFileSize = '931 GB'.	self assert: (1024 * 1024 * 1024 * 1024) asFileSize = '1 TB'.	" etc "! !!MAExtensionsTest methodsFor: 'testing-collection' stamp: 'lr 8/13/2008 23:57'!testHasEqualElements	| one two |	one := #( 1 2 3 ).	two := #( 1 2 3 ) asOrderedCollection.	self assert: (one hasEqualElements: two).	self assert: (two hasEqualElements: one).		two := #( 1 2 4 ).	self deny: (one hasEqualElements: two).	self deny: (two hasEqualElements: one).		two := #( 1 2 3 4 ).	self deny: (one hasEqualElements: two).	self deny: (two hasEqualElements: one).	! !!MAExtensionsTest methodsFor: 'testing-collection' stamp: 'lr 8/14/2008 00:04'!testIntersection	| group |	group := #( 1 2 3 ).		self assert: ((group intersection: group) hasEqualElements: group).	self assert: ((group intersection: #( )) hasEqualElements: #( )).	self assert: ((group intersection: #( 4 5 )) hasEqualElements: #( )).	self assert: ((group intersection: #( 1 3 4 5 )) hasEqualElements: #( 1 3 )).	self assert: ((group intersection: #( 2 )) hasEqualElements: #( 2 ))! !!MAExtensionsTest methodsFor: 'testing-collection' stamp: 'lr 8/13/2008 23:50'!testIsCollection	self deny: Object new isCollection.	self deny: nil isCollection.	self deny: 123 isCollection.	self assert: 'abc' isCollection.	self assert: #(a b c) isCollection! !!MAExtensionsTest methodsFor: 'testing-string' stamp: 'lr 8/13/2008 23:52'!testIsUnary	self assert: #testIsUnary isUnary.	self deny: #+ isUnary.	self deny: #with:with: isUnary.	! !!MAExtensionsTest methodsFor: 'testing-string' stamp: 'lr 3/30/2009 23:08'!testLines	self assert: ('') lines = #().	self assert: ('foo') lines = #('foo').	self assert: ('foo' , (String with: Character cr) , 'bar') lines = #('foo' 'bar').	self assert: ('foo' , (String with: Character cr with: Character lf) , 'bar') lines = #('foo' 'bar')! !!MAExtensionsTest methodsFor: 'testing-string' stamp: 'lr 3/9/2006 11:34'!testMatches	self assert: ('' matches: '').	self assert: ('zort' matches: '').	self assert: ('zort' matches: 'o').	self assert: ('zort' matches: 'O').	self assert: ('zort' matches: '*').	self assert: ('mobaz' matches: '*baz').	self deny: ('mobazo' matches: '*baz').	self assert: ('mobazo' matches: '*baz*').	self deny: ('mozo' matches: '*baz*').	self assert: ('foozo' matches: 'foo*').	self deny: ('bozo' matches: 'foo*').	self assert: ('foo23baz' matches: 'foo*baz').	self assert: ('foobaz' matches: 'foo*baz').	self deny: ('foo23bazo' matches: 'foo*baz').	self assert: ('Foo' matches: 'foo').	self deny: ('foobazort' matches: 'foo*baz*zort').	self assert: ('foobazzort' matches: 'foo*baz*zort').	self assert: ('afoo3zortthenfoo3zort' matches: '*foo#zort').	self assert: ('afoodezortorfoo3zort' matches: '*foo*zort')! !!MAExtensionsTest methodsFor: 'testing-collection' stamp: 'lr 3/9/2006 11:34'!testMoveDown	| col |	col := Array with: 1 with: 2 with: 3.	self assert: (col moveDown: 1) = 2.	self assert: col = #( 2 1 3 ).	self assert: (col moveDown: 1) = 3.	self assert: col = #( 2 3 1 ).	self assert: (col moveDown: 1) = 3.	self assert: col = #( 2 3 1 ).	self assert: (col moveDown: 0) = 0.	self assert: col = #( 2 3 1 )! !!MAExtensionsTest methodsFor: 'testing-collection' stamp: 'lr 3/9/2006 11:34'!testMoveUp	| col |	col := Array with: 1 with: 2 with: 3.	self assert: (col moveUp: 3) = 2.	self assert: col = #( 1 3 2 ).	self assert: (col moveUp: 3) = 1.	self assert: col = #( 3 1 2 ).	self assert: (col moveUp: 3) = 1.	self assert: col = #( 3 1 2 ).	self assert: (col moveUp: 0) = 0.	self assert: col = #( 3 1 2 )! !!MAExtensionsTest methodsFor: 'testing-collection' stamp: 'lr 10/27/2007 12:23'!testReduce	self assert: (#() reduce: [ :a :b | a ]) isNil.	self assert: ((1 to: 9) reduce: [ :a :b | a ]) = 1.	self assert: ((1 to: 9) reduce: [ :a :b | b ]) = 9.	self assert: ((1 to: 9) reduce: [ :a :b | a + b ]) = 45.	self assert: ((1 to: 9) reduce: [ :a :b | a * b ]) = 362880.	self assert: (#('a' 'b' 'c') reduce: [ :a :b | a , ' ' , b ]) = 'a b c'.	self assert: (#('a' 'b' 'c') reduce: [ :a :b | b , ' ' , a ]) = 'c b a'! !!MAExtensionsTest methodsFor: 'testing-collection' stamp: 'lr 8/14/2008 00:04'!testSort	| array |	array := Array with: 2 with: 3 with: 1.	array sort: [ :a :b | a < b ].	self assert: (array hasEqualElements: #( 1 2 3 )).	array sort: [ :a :b | a > b ].	self assert: (array hasEqualElements: #( 3 2 1 ))! !!MAExtensionsTest methodsFor: 'testing-string' stamp: 'lr 8/14/2008 00:09'!testSubstringCaseSensitive	self deny: ('' includesSubstring: '' caseSensitive: true).	self deny: ('' includesSubstring: '' caseSensitive: false).	self deny: ('abc' includesSubstring: '' caseSensitive: true).	self deny: ('abc' includesSubstring: '' caseSensitive: false).	self deny: ('' includesSubstring: 'abc' caseSensitive: true).	self deny: ('' includesSubstring: 'abc' caseSensitive: false).	self deny: ('abc' includesSubstring: 'aa' caseSensitive: true).	self deny: ('abc' includesSubstring: 'cc' caseSensitive: false).	self deny: ('abc' includesSubstring: 'aB' caseSensitive: true).	self assert: ('abc' includesSubstring: 'a' caseSensitive: true).	self assert: ('abc' includesSubstring: 'c' caseSensitive: false).	self assert: ('abc' includesSubstring: 'aB' caseSensitive: false).	self assert: ('abc' includesSubstring: 'AbC' caseSensitive: false).	self assert: ('abc' includesSubstring: 'ABC' caseSensitive: false).	self assert: ('abc' includesSubstring: 'aBc' caseSensitive: false)! !!MAExtensionsTest methodsFor: 'testing-time' stamp: 'lr 8/14/2008 11:46'!testTimePrintOn	| stream |	stream := String new writeStream.	Time now print24: true showSeconds: true on: stream.		self assert: (stream contents size) = 8.	self assert: (stream contents at: 3) = $:.	self assert: (stream contents at: 6) = $:! !!MAExtensionsTest methodsFor: 'testing-errors' stamp: 'lr 8/2/2008 17:57'!testValidationError	| result |	result := [ MARequiredError signal: 'some message' ]		on: MARequiredError		do: [ :err | err displayString ].	self assert: result = 'some message'.	result := [		MARequiredError 			description: (MAStringDescription new 				label: 'label';				yourself) 			signal: 'some message' ] 		on: MARequiredError		do: [ :err | err displayString ].	self assert: result = 'label: some message'! !!MAExternalFileModelTest methodsFor: 'private' stamp: 'lr 9/30/2007 18:18'!actualClass	^ MAExternalFileModel! !!MAFileModelTest class methodsFor: 'testing' stamp: 'lr 9/30/2007 18:30'!isAbstract	^ self name = #MAFileModelTest! !!MAFileModelTest methodsFor: 'private' stamp: 'lr 9/30/2007 18:18'!actualClass	^ self subclassResponsibility! !!MAFileModelTest methodsFor: 'running' stamp: 'lr 9/30/2007 18:16'!setUp	super setUp.	model := self actualClass new! !!MAFileModelTest methodsFor: 'running' stamp: 'lr 9/30/2007 18:16'!tearDown	model finalize! !!MAFileModelTest methodsFor: 'testing' stamp: 'nfr 10/17/2007 12:37'!testComparing	| other |	other := self actualClass new.	other 		filename: 'something.dat';		contents: (ByteArray with: 1 with: 2 with: 3).	self assert: model = model.		self deny: model = other.	self deny: other = model.	other finalize.	"should be in tearDown;  for now, at least let's discard when we pass"! !!MAFileModelTest methodsFor: 'testing' stamp: 'lr 9/30/2007 18:21'!testContents	self assert: model contents isEmpty.	model contents: (ByteArray with: 1 with: 2 with: 3).	self assert: model contents = (ByteArray with: 1 with: 2 with: 3).	self assert: model filesize = 3! !!MAFileModelTest methodsFor: 'testing' stamp: 'lr 9/30/2007 18:17'!testFilename	self assert: model filename = 'unknown'.	self assert: model extension isEmpty.	model filename: 'test.txt'.	self assert: model filename = 'test.txt'.	self assert: model extension = 'txt'! !!MAFileModelTest methodsFor: 'testing' stamp: 'lr 9/30/2007 18:17'!testIsEmpty	self assert: model isEmpty.	model filename: 'foo.txt'.	self assert: model isEmpty.	model mimetype: 'text/plain'.	self assert: model isEmpty.	model contents: 'hello'.	self deny: model isEmpty! !!MAFileModelTest methodsFor: 'testing' stamp: 'lr 9/30/2007 18:27'!testMimetype	self assert: model mimetype = 'application/octet-stream'.	self assert: model maintype = 'application'.	self assert: model subtype = 'octet-stream'.	model mimetype: 'text/html'.	self assert: model mimetype = 'text/html'.	self assert: model maintype = 'text'.	self assert: model subtype = 'html'! !!MAFileModelTest methodsFor: 'testing' stamp: 'lr 9/30/2007 18:17'!testMimetypeApplication	model mimetype: 'application/pdf'.	self assert: model isApplication.	self deny: model isAudio.	self deny: model isImage.	self deny: model isText.	self deny: model isVideo! !!MAFileModelTest methodsFor: 'testing' stamp: 'lr 9/30/2007 18:17'!testMimetypeAudio	model mimetype: 'audio/mpeg'.	self deny: model isApplication.	self assert: model isAudio.	self deny: model isImage.	self deny: model isText.	self deny: model isVideo! !!MAFileModelTest methodsFor: 'testing' stamp: 'lr 9/30/2007 18:17'!testMimetypeDefault	self assert: model isApplication.	self deny: model isAudio.	self deny: model isImage.	self deny: model isText.	self deny: model isVideo! !!MAFileModelTest methodsFor: 'testing' stamp: 'lr 9/30/2007 18:18'!testMimetypeImage	model mimetype: 'image/png'.	self deny: model isApplication.	self deny: model isAudio.	self assert: model isImage.	self deny: model isText.	self deny: model isVideo! !!MAFileModelTest methodsFor: 'testing' stamp: 'lr 9/30/2007 18:18'!testMimetypeText	model mimetype: 'text/xml'.	self deny: model isApplication.	self deny: model isAudio.	self deny: model isImage.	self assert: model isText.	self deny: model isVideo! !!MAFileModelTest methodsFor: 'testing' stamp: 'lr 9/30/2007 18:18'!testMimetypeVideo	model mimetype: 'video/mpeg'.		self deny: model isApplication.	self deny: model isAudio.	self deny: model isImage.	self deny: model isText.	self assert: model isVideo! !!MAMemoryFileModelTest methodsFor: 'private' stamp: 'lr 9/30/2007 18:19'!actualClass	^ MAMemoryFileModel! !!MAAccessorTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ true! !!MAAccessorTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!accessor	^ accessor! !!MAAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!accessorInstance	self subclassResponsibility! !!MAAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAAccessor! !!MAAccessorTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!instance	^ accessor! !!MAAccessorTest methodsFor: 'running' stamp: 'lr 3/9/2006 11:34'!setUp	super setUp.	accessor := self accessorInstance! !!MAAccessorTest methodsFor: 'testing-identity' stamp: 'lr 4/10/2008 13:36'!testAsAccessor	self assert: self instance asAccessor = self instance.	self assert: self instance asAccessor == self instance! !!MAAccessorTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testCanRead	self subclassResponsibility! !!MAAccessorTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testCanWrite	self subclassResponsibility! !!MAAccessorTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!testRead	self subclassResponsibility! !!MAAccessorTest methodsFor: 'testing-identity' stamp: 'lr 3/9/2006 11:34'!testStore	self assert: (self actualClass evaluatorClass		evaluate: self accessor storeString)			= self accessor! !!MAAccessorTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!testWrite	self subclassResponsibility! !!MAAccessorTest methodsFor: 'accessing-model' stamp: 'lr 3/9/2006 11:34'!value	^ value! !!MAAccessorTest methodsFor: 'accessing-model' stamp: 'lr 3/9/2006 11:34'!value: anObject	value := anObject! !!MAChainAccessorTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAChainAccessorTest methodsFor: 'private' stamp: 'lr 5/6/2008 18:11'!accessorInstance	^ self actualClass accessors: #( holder contents value )! !!MAChainAccessorTest methodsFor: 'private' stamp: 'lr 5/15/2006 20:49'!actualClass	^ MAChainAccessor! !!MAChainAccessorTest methodsFor: 'private' stamp: 'lr 8/14/2008 12:25'!holder	^ MAValueHolder on: self! !!MAChainAccessorTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!testAccessor	self accessor accessor: self.	self assert: self accessor accessor = self! !!MAChainAccessorTest methodsFor: 'testing' stamp: 'lr 5/6/2008 18:19'!testAsAccessor	super testAsAccessor.		accessor := #(value) asAccessor.	self assert: (accessor isKindOf: MASelectorAccessor).	self assert: (accessor selector = #value).		accessor := #(value contents) asAccessor.	self assert: (accessor isKindOf: MAChainAccessor).	self assert: (accessor next isKindOf: MASelectorAccessor).	self assert: (accessor next selector = #value).	self assert: (accessor accessor isKindOf: MASelectorAccessor).	self assert: (accessor accessor selector = #contents)! !!MAChainAccessorTest methodsFor: 'testing-testing' stamp: 'lr 5/6/2008 18:13'!testCanRead	self assert: (self accessor canRead: self).	self accessor accessor accessor readSelector: #zork.	self deny: (self accessor canRead: self)! !!MAChainAccessorTest methodsFor: 'testing-testing' stamp: 'lr 5/6/2008 18:13'!testCanWrite	self assert: (self accessor canWrite: self).	self accessor accessor accessor writeSelector: #zork.	self deny: (self accessor canWrite: self)! !!MAChainAccessorTest methodsFor: 'testing' stamp: 'lr 5/6/2008 18:11'!testKind	self assert: (self accessor class = MAChainAccessor).	self assert: (self accessor next class = MASelectorAccessor).	self assert: (self accessor accessor class = MAChainAccessor).	self assert: (self accessor accessor next class = MASelectorAccessor).	self assert: (self accessor accessor accessor class = MASelectorAccessor)! !!MAChainAccessorTest methodsFor: 'testing' stamp: 'lr 8/2/2008 18:00'!testNext	| next |	next := #foo asAccessor.	self accessor next: next.	self assert: self accessor next = next! !!MAChainAccessorTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!testRead	self value: 123.	self assert: (self accessor read: self) = 123.	self value: '12'.	self assert: (self accessor read: self) = '12'! !!MAChainAccessorTest methodsFor: 'testing' stamp: 'lr 5/6/2008 18:12'!testSelector	self assert: self accessor next selector = #holder.	self assert: self accessor accessor next selector = #contents.	self assert: self accessor accessor accessor selector = #value! !!MAChainAccessorTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!testWrite	self accessor write: 123 to: self.	self assert: self value = 123.	self accessor write: '123' to: self.	self assert: self value = '123'! !!MADelegatorAccessorTest class methodsFor: 'testing' stamp: 'lr 2/14/2008 09:47'!isAbstract	^ false! !!MADelegatorAccessorTest methodsFor: 'private' stamp: 'lr 2/14/2008 09:51'!accessorInstance	^ self actualClass on: (MASelectorAccessor selector: #value)! !!MADelegatorAccessorTest methodsFor: 'private' stamp: 'lr 2/14/2008 09:47'!actualClass	^ MADelegatorAccessor! !!MADelegatorAccessorTest methodsFor: 'testing-testing' stamp: 'lr 2/14/2008 09:50'!testCanRead	self assert: (self accessor canRead: self).	self accessor next readSelector: #zork.	self deny: (self accessor canRead: self)! !!MADelegatorAccessorTest methodsFor: 'testing-testing' stamp: 'lr 2/14/2008 09:52'!testCanWrite	self assert: (self accessor canWrite: self).	self accessor next writeSelector: #zork:.	self deny: (self accessor canWrite: self)! !!MADelegatorAccessorTest methodsFor: 'testing' stamp: 'lr 2/14/2008 09:52'!testRead	self value: 123.	self assert: (self accessor read: self) = 123.	self value: '123'.	self assert: (self accessor read: self) = '123'! !!MADelegatorAccessorTest methodsFor: 'testing' stamp: 'lr 2/14/2008 09:52'!testWrite	self accessor write: 123 to: self.	self assert: self value = 123.	self accessor write: '123' to: self.	self assert: self value = '123'! !!MADictionaryAccessorTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MADictionaryAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!accessorInstance	^ self actualClass key: #value! !!MADictionaryAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MADictionaryAccessor! !!MADictionaryAccessorTest methodsFor: 'accessing' stamp: 'lr 10/27/2007 12:18'!at: aKey ifAbsent: aBlock	^ aKey = #value 		ifTrue: [ value ]		ifFalse: [ aBlock value ]! !!MADictionaryAccessorTest methodsFor: 'accessing' stamp: 'lr 10/27/2007 12:18'!at: aKey put: aValue	self assert: aKey = #value.	^ value := aValue! !!MADictionaryAccessorTest methodsFor: 'testing-testing' stamp: 'lr 10/27/2007 12:20'!testCanRead	self assert: (self accessor canRead: self).	self accessor key: #zork.	self assert: (self accessor canRead: self)! !!MADictionaryAccessorTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testCanWrite	self assert: (self accessor canWrite: self)! !!MADictionaryAccessorTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!testKey	self accessor key: #other.	self assert: self accessor key = #other! !!MADictionaryAccessorTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!testRead	self value: 123.	self assert: (self accessor read: self) = 123.	self value: '12'.	self assert: (self accessor read: self) = '12'! !!MADictionaryAccessorTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!testWrite	self accessor write: 123 to: self.	self assert: self value = 123.	self accessor write: '123' to: self.	self assert: self value = '123'! !!MAIdentityAccessorTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAIdentityAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!accessorInstance	^ self actualClass new! !!MAIdentityAccessorTest methodsFor: 'private' stamp: 'lr 4/10/2008 13:55'!actualClass	^ MAIdentityAccessor! !!MAIdentityAccessorTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testCanRead	self assert: (self accessor canRead: self)! !!MAIdentityAccessorTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testCanWrite	self deny: (self accessor canWrite: self)! !!MAIdentityAccessorTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!testRead	self assert: (self accessor read: 123) = 123! !!MAIdentityAccessorTest methodsFor: 'testing' stamp: 'lr 3/5/2007 13:50'!testWrite	self		should: [ self accessor write: 123 to: self ]		raise: MAWriteError.	self assert: self value isNil! !!MANullAccessorTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MANullAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!accessorInstance	^ self actualClass new! !!MANullAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MANullAccessor! !!MANullAccessorTest methodsFor: 'testing-identity' stamp: 'lr 4/10/2008 13:37'!testAsAccessor	super testAsAccessor.	self assert: (nil asAccessor isKindOf: self actualClass)! !!MANullAccessorTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testCanRead	self deny: (self accessor canRead: self)! !!MANullAccessorTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testCanWrite	self deny: (self accessor canWrite: nil)! !!MANullAccessorTest methodsFor: 'testing' stamp: 'lr 3/5/2007 13:50'!testRead	self		should: [ self accessor read: self ]		raise: MAReadError! !!MANullAccessorTest methodsFor: 'testing' stamp: 'lr 3/5/2007 13:50'!testWrite	self		should: [ self accessor write: 123 to: self ]		raise: MAWriteError.	self assert: self value isNil! !!MAPluggableAccessorTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAPluggableAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!accessorInstance	^ self actualClass		read: [ :model | model value ]		write: [ :model :object | model value: object ]! !!MAPluggableAccessorTest methodsFor: 'private' stamp: 'lr 5/14/2008 20:29'!actualClass	^ MAPluggableAccessor! !!MAPluggableAccessorTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testCanRead	self assert: (self instance canRead: self).	self instance readBlock: nil.	self deny: (self instance canRead: self)! !!MAPluggableAccessorTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testCanWrite	self assert: (self instance canWrite: nil).	self assert: (self instance canWrite: 123).	self assert: (self instance canWrite: self).	self instance writeBlock: nil.	self deny: (self instance canWrite: nil).	self deny: (self instance canWrite: 123).	self deny: (self instance canWrite: self)! !!MAPluggableAccessorTest methodsFor: 'testing' stamp: 'lr 6/15/2006 08:52'!testRead	self value: 123.	self assert: (self accessor read: self) = 123.	self value: '12'.	self assert: (self accessor read: self) = '12'! !!MAPluggableAccessorTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!testReadBlock	self accessor readBlock: [ :model |		self assert: model = self. 123 ].	self assert: (self accessor read: self) = 123! !!MAPluggableAccessorTest methodsFor: 'testing-identity' stamp: 'lr 3/9/2006 11:34'!testStore	"The class BlockContext is not serializeable, ignore this test."! !!MAPluggableAccessorTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!testWrite	self accessor write: 123 to: self.	self assert: self value = 123.	self accessor write: '123' to: self.	self assert: self value = '123'! !!MAPluggableAccessorTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!testWriteBlock	self accessor writeBlock: [ :model :object |		self assert: model = self.		self assert: object = 123 ].	self accessor write: 123 to: self! !!MASelectorAccessorTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MASelectorAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!accessorInstance	^ self actualClass selector: #value! !!MASelectorAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MASelectorAccessor! !!MASelectorAccessorTest methodsFor: 'testing-identity' stamp: 'lr 4/10/2008 13:38'!testAsAccessor	super testAsAccessor.	self assert: #value asAccessor = self instance.	self deny: #value asAccessor == self instance! !!MASelectorAccessorTest methodsFor: 'testing-testing' stamp: 'lr 2/14/2008 09:50'!testCanRead	self assert: (self accessor canRead: self).	self accessor readSelector: #zork.	self deny: (self accessor canRead: self).	self accessor readSelector: nil.	self deny: (self accessor canRead: self)! !!MASelectorAccessorTest methodsFor: 'testing-testing' stamp: 'lr 2/14/2008 09:50'!testCanWrite	self assert: (self accessor canWrite: self).	self accessor writeSelector: #zork:.	self deny: (self accessor canWrite: self).	self accessor writeSelector: nil.	self deny: (self accessor canWrite: self)! !!MASelectorAccessorTest methodsFor: 'testing' stamp: 'lr 2/14/2008 09:51'!testRead	self value: 123.	self assert: (self accessor read: self) = 123.	self value: '12'.	self assert: (self accessor read: self) = '12'! !!MASelectorAccessorTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!testReadSelector	self accessor readSelector: #contents.	self assert: self accessor selector = #contents.	self assert: self accessor readSelector = #contents.	self assert: self accessor writeSelector = #value:! !!MASelectorAccessorTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!testSelector	self accessor selector: #contents.	self assert: self accessor selector = #contents.	self assert: self accessor readSelector = #contents.	self assert: self accessor writeSelector = #contents:! !!MASelectorAccessorTest methodsFor: 'testing' stamp: 'lr 2/14/2008 09:51'!testWrite	self accessor write: 123 to: self.	self assert: self value = 123.	self accessor write: '123' to: self.	self assert: self value = '123'! !!MASelectorAccessorTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!testWriteSelector	self accessor writeSelector: #contents:.	self assert: self accessor selector = #value.	self assert: self accessor readSelector = #value.	self assert: self accessor writeSelector = #contents:! !!MAVariableAccessorTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAVariableAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!accessorInstance	^ self actualClass name: 'value'! !!MAVariableAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MAVariableAccessor! !!MAVariableAccessorTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:35'!testCanRead	self assert: (self accessor canRead: self).	self accessor name: 'zork'.	self deny: (self accessor canRead: self)! !!MAVariableAccessorTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:35'!testCanWrite	self assert: (self accessor canWrite: self).	self accessor name: 'zork'.	self deny: (self accessor canWrite: self)! !!MAVariableAccessorTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!testName	self accessor name: 'other'.	self assert: self accessor name = 'other'! !!MAVariableAccessorTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!testRead	self value: 123.	self assert: (self accessor read: self) = 123.	self value: '12'.	self assert: (self accessor read: self) = '12'! !!MAVariableAccessorTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!testWrite	self accessor write: 123 to: self.	self assert: self value = 123.	self accessor write: '123' to: self.	self assert: self value = '123'! !!MAContainerTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAContainerTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAContainer! !!MAContainerTest methodsFor: 'accessing' stamp: 'lr 4/10/2008 14:17'!child1	^ child1 ifNil: 		[ child1 := MAStringDescription new			accessor: #child1;			label: 'child1';			priority: 1;			yourself ]! !!MAContainerTest methodsFor: 'accessing' stamp: 'lr 4/10/2008 14:17'!child2	^ child2 ifNil: 		[ child2 := MAStringDescription new			accessor: #child2;			label: 'child2';			priority: 2;			yourself ]! !!MAContainerTest methodsFor: 'accessing' stamp: 'lr 4/10/2008 14:17'!child3	^ child3 ifNil: 		[ child3 := MAStringDescription new			accessor: #child3;			label: 'child3';			priority: 3;			yourself ]! !!MAContainerTest methodsFor: 'private' stamp: 'lr 7/12/2007 18:59'!exampleInstance	^ MACachedMemento new		setDescription: self description;		setCache: (Dictionary new			at: self child1 put: nil;			at: self child2 put: nil;			at: self child3 put: nil;			yourself);		yourself! !!MAContainerTest methodsFor: 'testing-adding' stamp: 'lr 3/9/2006 11:34'!testAdd	self description add: self child1.	self assert: (self description size = 1).	self assert: (self description includes: self child1).	self description add: self child2.	self assert: (self description size = 2).	self assert: (self description includes: self child1).	self assert: (self description includes: self child2)! !!MAContainerTest methodsFor: 'testing-adding' stamp: 'lr 3/9/2006 11:34'!testAddAll	self description		addAll: (Array with: self child1 with: self child2).	self assert: (self description size = 2).	self assert: (self description includes: self child1).	self assert: (self description includes: self child2)! !!MAContainerTest methodsFor: 'testing-enumerating' stamp: 'lr 3/30/2009 23:02'!testAllSatisfy	self description add: self child1; add: self child2.	self assert: (self description allSatisfy: [ :each | each = self child1 or: [ each = self child2 ] ]).	self deny: (self description allSatisfy: [ :each | each = self child1 ])! !!MAContainerTest methodsFor: 'testing-enumerating' stamp: 'lr 3/30/2009 23:01'!testAnySatisfy	self description add: self child1; add: self child2.	self assert: (self description anySatisfy: [ :each | each = self child2 ]).	self deny: (self description anySatisfy: [ :each | each isNil ])! !!MAContainerTest methodsFor: 'testing-converting' stamp: 'lr 3/9/2006 11:34'!testAsContainer	self assert: self description asContainer = self description.	self assert: self description asContainer == self description! !!MAContainerTest methodsFor: 'testing-enumerating' stamp: 'lr 3/30/2009 23:02'!testAt	self description add: self child1; add: self child2.	self assert: (self description at: 1) = self child1.	self assert: (self description at: 2) = self child2.	self should: [ self description at: 3 ] raise: Error! !!MAContainerTest methodsFor: 'testing-enumerating' stamp: 'lr 3/30/2009 23:03'!testAtIfAbsent	self description add: self child1; add: self child2.	self assert: (self description at: 1 ifAbsent: [ 'not' ]) = self child1.	self assert: (self description at: 2 ifAbsent: [ 'not' ]) = self child2.	self assert: (self description at: 3 ifAbsent: [ 'not' ]) = 'not'! !!MAContainerTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testChildren	self assert: self description children isCollection.	self assert: self description children isEmpty! !!MAContainerTest methodsFor: 'testing-enumerating' stamp: 'lr 3/21/2006 20:01'!testCollect	| collected |	self description add: self child1; add: self child2.	collected := self description collect: [ :each | each ].	self assert: self description = collected.	self deny: self description == collected.	collected := self description collect: [ :each | each copy ].	self assert: self description = collected.	self deny: self description == collected.	collected := self description collect: [ :each |		each copy			accessor: (MASelectorAccessor selector: #foo);			yourself ].	self deny: self description = collected.	self deny: self description == collected! !!MAContainerTest methodsFor: 'testing-operators' stamp: 'lr 3/21/2006 18:43'!testConcatenate	| concatenate |	concatenate := self child1 , self child2.	self assert: concatenate size = 2.	self assert: concatenate children first = self child1.	self assert: concatenate children second = self child2.	concatenate := self child1 , self child2 , self child3.	self assert: concatenate size = 3.	self assert: concatenate children first = self child1.	self assert: concatenate children second = self child2.	self assert: concatenate children third = self child3! !!MAContainerTest methodsFor: 'testing-copying' stamp: 'lr 3/9/2006 11:34'!testCopy	self description add: self child1; add: self child2.	super testCopy.	self deny: self description copy children == self description children.	self assert: self description copy children first = self description children first.	self assert: self description copy children second = self description children second! !!MAContainerTest methodsFor: 'testing-copying' stamp: 'lr 3/9/2006 11:34'!testCopyEmpty	self description add: self child1; add: self child2.	self assert: self description copyEmpty isEmpty! !!MAContainerTest methodsFor: 'testing-copying' stamp: 'lr 3/9/2006 11:34'!testCopyFromTo	| copied |	self description add: self child1; add: self child2; add: self child3.	copied := self description copyFrom: 2 to: 3.	self assert: copied ~= self description.	self assert: copied size = 2.	self assert: copied children first = self child2.	self assert: copied children second = self child3! !!MAContainerTest methodsFor: 'testing-copying' stamp: 'lr 3/30/2009 23:14'!testCopyWithout	| copied |	self description add: self child1; add: self child2; add: self child3.	copied := self description copyWithout: self child1.	self assert: copied ~= self description.	self assert: copied size = 2.	self assert: copied children first = self child2.	self assert: copied children second = self child3! !!MAContainerTest methodsFor: 'testing-copying' stamp: 'lr 3/30/2009 23:14'!testCopyWithoutAll	| copied |	self description add: self child1; add: self child2; add: self child3.	copied := self description copyWithoutAll: (Array with: self child1 with: self child3).	self assert: copied ~= self description.	self assert: copied size = 1.	self assert: copied children first = self child2! !!MAContainerTest methodsFor: 'testing-enumerating' stamp: 'lr 3/9/2006 11:34'!testDetect	self description add: self child1.	self assert: (self description		detect: [ :each | self child1 = each ]) = self child1.	self should: [ self description		detect: [ :each | self child2 = each ] ] raise: Error! !!MAContainerTest methodsFor: 'testing-enumerating' stamp: 'lr 3/9/2006 11:34'!testDetectIfNone	self description add: self child1.	self assert: (self description		detect: [ :each | self child1 = each ]		ifNone: [ 123 ]) = self child1.	self assert: (self description		detect: [ :each | self child2 = each ]		ifNone: [ 123 ]) = 123! !!MAContainerTest methodsFor: 'testing-enumerating' stamp: 'lr 3/9/2006 11:34'!testDo	| collection |	collection := self description class defaultCollection.	self description add: self child1; add: self child2.	self description do: [ :each | collection add: each ].	self assert: (self description children hasEqualElements: collection)! !!MAContainerTest methodsFor: 'testing-enumerating' stamp: 'lr 3/9/2006 11:34'!testDoSepratedBy	| collection |	collection := OrderedCollection new.	self description add: self child1; add: self child2.	self description		do: [ :each | collection add: each ]		separatedBy: [ collection add: nil ].	self assert: collection size = 3.	self assert: collection first = self child1.	self assert: collection second isNil.	self assert: collection third = self child2! !!MAContainerTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testEmpty	self assert: self description isEmpty.	self description add: self child1.	self deny: self description isEmpty! !!MAContainerTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testHasChildren	super testHasChildren.	self description add: self child1.	self assert: self description hasChildren! !!MAContainerTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testIncludes	self deny: (self description includes: self child1).	self description add: self child1.	self assert: (self description includes: self child1)! !!MAContainerTest methodsFor: 'testing-enumerating' stamp: 'lr 3/9/2006 11:34'!testInjectInto	self description add: self child1; add: self child2.	self assert: (self description		inject: 'start'		into: [ :result :each | result , ' ' , each label ]) = 'start child1 child2'! !!MAContainerTest methodsFor: 'testing-operators' stamp: 'lr 3/9/2006 11:34'!testIntersection	| a b union |	a := self child1 , self child2.	b := self child2 , self child3.	union := a intersection: b.	self assert: (union size) = 1.	self deny: (union includes: self child1).	self assert: (union includes: self child2).	self deny: (union includes: self child3)! !!MAContainerTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testIsContainer	self assert: self description isContainer! !!MAContainerTest methodsFor: 'testing-enumerating' stamp: 'lr 4/10/2008 14:07'!testKeysAndValuesDo	self description		add: self child1;		add: self child2.	self description keysAndValuesDo: 		[ :index :each | 		index = 1 			ifTrue: [ self assert: self child1 = each ]			ifFalse: 				[ index = 2 					ifTrue: [ self assert: self child2 = each ]					ifFalse: [ self assert: false ] ] ]! !!MAContainerTest methodsFor: 'testing-moving' stamp: 'lr 3/9/2006 11:34'!testMoveDown	self description add: self child1; add: self child2.	self assert: self description children first = self child1.	self assert: self description children second = self child2.	self description moveDown: self child1.	self assert: self description children first = self child2.	self assert: self description children second = self child1.	self description moveDown: self child1.	self assert: self description children first = self child2.	self assert: self description children second = self child1! !!MAContainerTest methodsFor: 'testing-moving' stamp: 'lr 3/9/2006 11:34'!testMoveUp	self description add: self child1; add: self child2.	self assert: self description children first = self child1.	self assert: self description children second = self child2.	self description moveUp: self child2.	self assert: self description children first = self child2.	self assert: self description children second = self child1.	self description moveUp: self child2.	self assert: self description children first = self child2.	self assert: self description children second = self child1! !!MAContainerTest methodsFor: 'testing-validating' stamp: 'lr 7/12/2007 19:14'!testNoFailingValidation	| example |	self description		add: self child1;		add: self child2.	example := self exampleInstance.	self		shouldnt: [ example validate ]		raise: MAValidationError! !!MAContainerTest methodsFor: 'testing-enumerating' stamp: 'lr 3/30/2009 23:02'!testNoneSatisfy	self description add: self child1; add: self child2.	self assert: (self description noneSatisfy: [ :each | each isNil ])! !!MAContainerTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testNotEmpty	self deny: self description notEmpty.	self description add: self child1.	self assert: self description notEmpty! !!MAContainerTest methodsFor: 'testing-validating' stamp: 'lr 11/6/2009 15:11'!testOneFailingValidation	| example |	self description		add: self child1;		add: (self child2			addCondition: [ :v | false ];			beRequired;			yourself).	example := self exampleInstance.	self		should: [ example validate ]		raise: MAValidationError.	[ example validate ]		on: MAValidationError		do: [ :err |			self assert: err class = MAMultipleErrors.			self assert: err tag = self description.			self assert: err collection size = 1.			self assert: err collection first tag = self child2 ]! !!MAContainerTest methodsFor: 'testing-enumerating' stamp: 'lr 3/9/2006 11:34'!testReject	| rejected |	self description add: self child1; add: self child2.	rejected := self description reject: [ :each | false ].	self assert: self description = rejected.	rejected := self description reject: [ :each | true ].	self assert: rejected isEmpty! !!MAContainerTest methodsFor: 'testing-removing' stamp: 'lr 3/9/2006 11:34'!testRemove	self description add: self child1; add: self child2.	self description remove: self child1.	self assert: self description size = 1.	self deny: (self description includes: self child1).	self assert: (self description includes: self child2).	self description remove: self child2.	self assert: self description isEmpty! !!MAContainerTest methodsFor: 'testing-removing' stamp: 'lr 3/9/2006 11:34'!testRemoveAll	self description add: self child1; add: self child2.	self description removeAll.	self assert: self description isEmpty! !!MAContainerTest methodsFor: 'testing-enumerating' stamp: 'lr 3/9/2006 11:34'!testSelect	| selected |	self description add: self child1; add: self child2.	selected := self description select: [ :each | true ].	self assert: self description = selected.	selected := self description select: [ :each | false ].	self assert: selected isEmpty! !!MAContainerTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testSize	self assert: self description size isZero.	self description add: self child1.	self assert: self description size = 1.	self description add: self child2.	self assert: self description size = 2.	self description add: self child3.	self assert: self description size = 3! !!MAContainerTest methodsFor: 'testing-validating' stamp: 'lr 11/6/2009 15:10'!testTwoFailingValidation	| example |	self description		add: (self child1			addCondition: [ :v | false ];			beRequired;			yourself);		add: (self child2			addCondition: [ :v | false ];			beRequired;			yourself).	example := self exampleInstance.	self		should: [ example validate ]		raise: MAValidationError.	[ example validate ]		on: MAValidationError		do: [ :err |			self assert: err class = MAMultipleErrors.			self assert: err tag = self description.			self assert: err collection size = 2.			self assert: err collection first tag = self child1.			self assert: err collection last tag = self child2 ]! !!MAContainerTest methodsFor: 'testing-operators' stamp: 'lr 3/9/2006 11:34'!testUnion	| a b union |	a := self child1 , self child2.	b := self child2 , self child3.	union := a union: b.	self assert: (union size) = 3.	self assert: (union includes: self child1).	self assert: (union includes: self child2).	self assert: (union includes: self child3)! !!MAContainerTest methodsFor: 'testing-enumerating' stamp: 'lr 3/9/2006 11:34'!testWithDo	self description add: self child1; add: self child2.	self description with: self description children		do: [ :first :second | self assert: first = second ]! !!MAPriorityContainerTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAPriorityContainerTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MAPriorityContainer! !!MAPriorityContainerTest methodsFor: 'testing-moving' stamp: 'lr 3/9/2006 11:35'!testMoveDown	self should: [ super testMoveDown ] raise: Error! !!MAPriorityContainerTest methodsFor: 'testing-moving' stamp: 'lr 3/9/2006 11:35'!testMoveUp	self should: [ super testMoveUp ] raise: Error! !!MADescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ true! !!MADescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!shouldInheritSelectors	^ true! !!MADescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MADescription! !!MADescriptionTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!description	^ description! !!MADescriptionTest methodsFor: 'private' stamp: 'lr 2/16/2007 09:36'!descriptionInstance	^ self actualClass new		accessor: MANullAccessor new;		yourself! !!MADescriptionTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!instance	^ description! !!MADescriptionTest methodsFor: 'running' stamp: 'lr 4/18/2007 19:05'!setUp	super setUp.	description := self descriptionInstance.	self assert: description accessor notNil! !!MADescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testAccessor	self description accessor: (MASelectorAccessor selector: #foo).	self assert: self description accessor selector = #foo! !!MADescriptionTest methodsFor: 'testing-converting' stamp: 'lr 3/9/2006 11:34'!testAsContainer	self subclassResponsibility! !!MADescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testComment	self description comment: 'bar'.	self assert: self description comment = 'bar'! !!MADescriptionTest methodsFor: 'testing-copying' stamp: 'lr 3/9/2006 11:34'!testCopyAccessor	self assert: self description copy accessor = self description accessor.	self deny: self description copy accessor == self description accessor! !!MADescriptionTest methodsFor: 'testing-identity' stamp: 'lr 3/9/2006 11:34'!testDictionaryKey	| dictionary |	dictionary := Dictionary new.	dictionary at: self instance put: 1.	self assert: (dictionary at: self instance) = 1.	dictionary at: self instance put: 2.	self assert: (dictionary at: self instance) = 2! !!MADescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 10/27/2007 12:21'!testGroup	self assert: self description group isNil.	self description group: 'foo'.	self assert: self description group = 'foo'! !!MADescriptionTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testHasChildren	self deny: self description hasChildren! !!MADescriptionTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testHasComment	self description comment: nil.	self deny: self description hasComment.	self description comment: ''.	self deny: self description hasComment.	self description comment: 'comment'.	self assert:  self description hasComment! !!MADescriptionTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testHasLabel	self description label: nil.	self deny: self description hasLabel.	self description label: ''.	self deny: self description hasLabel.	self description label: 'label'.	self assert:  self description hasLabel! !!MADescriptionTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testIsContainer	self deny: self description isContainer! !!MADescriptionTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:34'!testIsDescription	self assert: self description isDescription! !!MADescriptionTest methodsFor: 'testing-testing' stamp: 'lr 3/30/2009 23:16'!testIsSortable	self assert: (self description isSortable or: [ self description isSortable not ])! !!MADescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testLabel	self description label: 'foo'.	self assert: self description label = 'foo'! !!MADescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testPriority	self description priority: 123.	self assert: self description priority = 123! !!MADescriptionTest methodsFor: 'testing-actions' stamp: 'lr 3/9/2006 11:34'!testReadonly	self description beReadonly.	self assert: self description readonly.	self assert: self description isReadonly.	self description beWriteable.	self deny: self description readonly.	self deny: self description isReadonly! !!MADescriptionTest methodsFor: 'testing-actions' stamp: 'lr 3/9/2006 11:34'!testRequired	self description beRequired.	self assert: self description required.	self assert: self description isRequired.	self description beOptional.	self deny: self description required.	self deny: self description isRequired! !!MADescriptionTest methodsFor: 'testing-identity' stamp: 'lr 3/9/2006 11:34'!testSetElement	| set |	set := Set new.	set add: self instance.	self assert: set size = 1.	self assert: (set includes: self instance).	set add: self instance.	self assert: set size = 1.	self assert: (set includes: self instance)! !!MADescriptionTest methodsFor: 'testing-actions' stamp: 'lr 3/9/2006 11:34'!testVisible	self description beHidden.	self deny: self description visible.	self deny: self description isVisible.	self description beVisible.	self assert: self description visible.	self assert: self description isVisible! !!MABooleanDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MABooleanDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MABooleanDescription! !!MABooleanDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!includedInstance	^ true! !!MABooleanDescriptionTest methodsFor: 'testing' stamp: 'lr 3/30/2009 23:12'!testFalseString	self description falseString: 'nein'.	self assert: (self description labelForOption: false) = 'nein'! !!MABooleanDescriptionTest methodsFor: 'testing' stamp: 'lr 3/30/2009 23:12'!testLabelForOption	self assert: (self description labelForOption: true) = 'true'.	self assert: (self description labelForOption: false) = 'false'.	self assert: (self description labelForOption: nil) = ''! !!MABooleanDescriptionTest methodsFor: 'testing' stamp: 'lr 3/30/2009 23:13'!testOptions	self assert: (self description options) = #(false true).	self assert: (self description allOptionsWith: Object new) = #(false true)! !!MABooleanDescriptionTest methodsFor: 'testing' stamp: 'lr 3/30/2009 23:11'!testTrueString	self description trueString: 'ja'.	self assert: (self description labelForOption: true) = 'ja'! !!MABooleanDescriptionTest methodsFor: 'testing-validation' stamp: 'lr 2/16/2007 09:47'!testValidateConditions! !!MAClassDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAClassDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAClassDescription! !!MAClassDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!includedInstance	^ String! !!MAClassDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!shouldSkipStringTests	^ true! !!MAColorDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAColorDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAColorDescription! !!MAColorDescriptionTest methodsFor: 'private' stamp: 'trs 9/3/2009 14:36'!includedInstance	^ MACompatibility colorClass blue! !!MAElementDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ true! !!MAElementDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAElementDescription! !!MAElementDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!emptyInstance	^ String new! !!MAElementDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!includedInstance	self subclassResponsibility! !!MAElementDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!includedInstanceString	^ MAStringWriter write: self includedInstance description: self descriptionInstance! !!MAElementDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!invalidInstance	^ Object new! !!MAElementDescriptionTest methodsFor: 'private' stamp: 'lr 3/24/2007 21:25'!invalidInstanceString	^ self invalidInstance asString! !!MAElementDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!nullInstance	^ nil! !!MAElementDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!shouldSkipStringTests	^ false! !!MAElementDescriptionTest methodsFor: 'testing-validation' stamp: 'lr 10/8/2007 16:02'!testAddCondition	self description		addCondition: [ :value | value isNil ].	self assert: self description conditions size = 1.	self assert: self description conditions first value isString! !!MAElementDescriptionTest methodsFor: 'testing-validation' stamp: 'lr 10/8/2007 16:02'!testAddConditionLabelled	self description		addCondition: [ :value | value isNil ]		labelled: 'ist net nil'.	self assert: self description conditions size = 1.	self assert: self description conditions first value = 'ist net nil'! !!MAElementDescriptionTest methodsFor: 'testing-converting' stamp: 'lr 3/9/2006 11:34'!testAsContainer	self assert: (self description asContainer size) = 1.	self assert: (self description asContainer includes: self description)! !!MAElementDescriptionTest methodsFor: 'testing-operators' stamp: 'lr 3/9/2006 11:34'!testConcatenation	| child1 child2 concatenate |	child1 := self description copy.	child2 := self description copy.	concatenate := child1 , child2.	self assert: concatenate size = 2.	self assert: concatenate children first = child1.	self assert: concatenate children second = child2.	concatenate := child1 , concatenate.	self assert: concatenate size = 3.	self assert: concatenate children first = child1.	self assert: concatenate children second = child1.	self assert: concatenate children third = child2! !!MAElementDescriptionTest methodsFor: 'testing-copying' stamp: 'lr 3/9/2006 11:34'!testCopy	super testCopy.	self assert: self description copy default = self description default! !!MAElementDescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 11/2/2007 14:02'!testDefault	self description default: self includedInstance.	self assert: self description default = self includedInstance! !!MAElementDescriptionTest methodsFor: 'testing-strings' stamp: 'lr 5/21/2009 13:35'!testFromString	self shouldSkipStringTests ifTrue: [ ^ self ].	self assert: (self description		fromString: self includedInstanceString)			= self includedInstance.	self assert: (self description		fromString: self includedInstanceString		reader: self description stringReader)			= self includedInstance.	self assert: (self description		fromString: self includedInstanceString		reader: self description stringReader new)			= self includedInstance! !!MAElementDescriptionTest methodsFor: 'testing-strings' stamp: 'lr 3/9/2006 11:34'!testFromStringCollection	self shouldSkipStringTests ifTrue: [ ^ self ].	self assert: (self description		fromStringCollection: (Array			with: self includedInstanceString			with: self includedInstanceString))				= (Array					with: self includedInstance					with: self includedInstance).	self assert: (self description		fromStringCollection: (Array			with: self includedInstanceString			with: self includedInstanceString)		reader: self description stringReader)				= (Array					with: self includedInstance					with: self includedInstance)! !!MAElementDescriptionTest methodsFor: 'testing-strings' stamp: 'lr 1/30/2008 09:45'!testFromStringEvaluated	"This ensures that the parsing algorithm doesn't compile the input, what would cause a  security hole in the framework."	| error |	error := nil.	self shouldSkipStringTests ifTrue: [ ^ self ].	[ self description fromString: '1 / 0. nil' ]		on: Exception 		do: [ :err | error := err ].	self deny: (error isKindOf: ZeroDivide)! !!MAElementDescriptionTest methodsFor: 'testing-strings' stamp: 'lr 11/2/2007 14:12'!testFromStringInvalid	self shouldSkipStringTests ifTrue: [ ^ self ].	self		should: [ self description fromString: self invalidInstanceString ]		raise: MAReadError! !!MAElementDescriptionTest methodsFor: 'testing-strings' stamp: 'lr 3/9/2006 11:34'!testFromStringNull	self shouldSkipStringTests ifTrue: [ ^ self ].	self assert: (self description		fromString: self emptyInstance) isNil.	self assert: (self description		fromString: self emptyInstance		reader: self description stringReader) isNil.	self assert: (self description		fromString: self emptyInstance		reader: self description stringReader new) isNil! !!MAElementDescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testKind	self assert: (self includedInstance isKindOf: self description kind)! !!MAElementDescriptionTest methodsFor: 'testing-validation' stamp: 'lr 2/12/2007 19:06'!testKindErrorMessage	self assert: self description kindErrorMessage notEmpty.	self description kindErrorMessage: 'zork'.	self assert: self description kindErrorMessage = 'zork'.	[ self description validateKind: self invalidInstance ]		on: MAKindError		do: [ :err | self assert: self description kindErrorMessage = err messageText ]! !!MAElementDescriptionTest methodsFor: 'testing-validation' stamp: 'lr 2/12/2007 19:06'!testRequiredErrorMessage	self assert: self description requiredErrorMessage notEmpty.	self description requiredErrorMessage: 'zork'.	self assert: self description requiredErrorMessage = 'zork'.	[ self description beRequired; validateRequired: self nullInstance ]		on: MARequiredError		do: [ :err | self assert: self description requiredErrorMessage = err messageText ]! !!MAElementDescriptionTest methodsFor: 'testing-testing' stamp: 'lr 2/16/2007 09:31'!testSatisfied	self assert: (self description isSatisfiedBy: self includedInstance).	self assert: (self description isSatisfiedBy: self nullInstance).	self deny: (self description isSatisfiedBy: self invalidInstance)! !!MAElementDescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testStringReader	| object |	self description stringReader: (object := MAStringReader new).	self assert: self description stringReader = object! !!MAElementDescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testStringWriter	| object |	self description stringWriter: (object := MAStringWriter new).	self assert: self description stringWriter = object! !!MAElementDescriptionTest methodsFor: 'testing-strings' stamp: 'lr 3/9/2006 11:34'!testToString	self shouldSkipStringTests ifTrue: [ ^ self ].	self assert: (self description		toString: self includedInstance)			= self includedInstanceString.	self assert: (self description		toString: self includedInstance		writer: self description stringWriter)			= self includedInstanceString.	self assert: (self description		toString: self includedInstance		writer: self description stringWriter new)			= self includedInstanceString! !!MAElementDescriptionTest methodsFor: 'testing-strings' stamp: 'lr 3/9/2006 11:34'!testToStringCollection	self shouldSkipStringTests ifTrue: [ ^ self ].	self assert: (self description		toStringCollection: (Array			with: self includedInstance			with: self includedInstance))				= (Array					with: self includedInstanceString					with: self includedInstanceString).	self assert: (self description		toStringCollection: (Array			with: self includedInstance			with: self includedInstance)		writer: self description stringWriter)			= (Array				with: self includedInstanceString				with: self includedInstanceString)! !!MAElementDescriptionTest methodsFor: 'testing-strings' stamp: 'lr 3/9/2006 11:34'!testToStringFromString	self shouldSkipStringTests ifTrue: [ ^ self ].	self assert: (self description		fromString: (self description			toString: self includedInstance))				= self includedInstance.	self assert: (self description		fromString: (self description			toString: self includedInstance			writer: self description stringWriter)		reader: self description stringReader)				= self includedInstance.	self assert: (self description		fromString: (self description			toString: self includedInstance			writer: self description stringWriter new)		reader: self description stringReader new)				= self includedInstance! !!MAElementDescriptionTest methodsFor: 'testing-strings' stamp: 'lr 5/21/2009 13:25'!testToStringNull	self shouldSkipStringTests ifTrue: [ ^ self ].	self assert: (self description		toString: self nullInstance)			= self description undefined.	self assert: (self description		toString: self nullInstance		writer: self description stringWriter)			= self description undefined.	self assert: (self description		toString: self nullInstance		writer: self description stringWriter new)			= self description undefined! !!MAElementDescriptionTest methodsFor: 'testing-strings' stamp: 'lr 3/9/2006 11:34'!testToStringUndefined	self shouldSkipStringTests ifTrue: [ ^ self ].	self description undefined: 'n/a'.	self assert: (self description		toString: self nullInstance)			= 'n/a'.	self assert: (self description		toString: self nullInstance		writer: self description stringWriter)			= 'n/a'.	self assert: (self description		toString: self nullInstance		writer: self description stringWriter new)			= 'n/a'! !!MAElementDescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testUndefined	self description undefined: 'nop'.	self assert: self description undefined = 'nop'! !!MAElementDescriptionTest methodsFor: 'testing-validation' stamp: 'lr 3/9/2006 11:34'!testValidate	self description beRequired.	self		shouldnt: [ self description validate: self includedInstance ]		raise: MAValidationError.	self		should: [ self description validate: self invalidInstance ]		raise: MAKindError.	self		should: [ self description validate: self nullInstance ]		raise: MARequiredError! !!MAElementDescriptionTest methodsFor: 'testing-validation' stamp: 'lr 8/2/2008 17:54'!testValidateConditions	"This test might fail for MADateDescriptionTest, since there is a bug in Squeak."	| object |	object := self includedInstance.	self description		addCondition: [ :value | object == value ]		labelled: 'included instance test'.	self		shouldnt: [ self description validate: object ]		raise: MAConditionError.	self		should: [ self description validate: object copy ]		raise: MAConditionError! !!MAElementDescriptionTest methodsFor: 'testing-validation' stamp: 'lr 3/9/2006 11:34'!testValidateKind	self		should: [ self description validateKind: self invalidInstance ]		raise: MAKindError.	self		shouldnt: [ self description validateKind: self includedInstance ]		raise: MAKindError! !!MAElementDescriptionTest methodsFor: 'testing-validation' stamp: 'lr 3/9/2006 11:34'!testValidateRequired	self description beOptional.	self		shouldnt: [ self description validateRequired: self nullInstance ]		raise: MARequiredError.	self		shouldnt: [ self description validateRequired: self includedInstance ]		raise: MARequiredError.	self description beRequired.	self		should: [ self description validateRequired: self nullInstance ]		raise: MARequiredError.	self		shouldnt: [ self description validateRequired: self includedInstance ]		raise: MARequiredError! !!MAElementDescriptionTest methodsFor: 'testing-validation' stamp: 'lr 2/16/2007 09:21'!testValidateSpecific	self		shouldnt: [ self description validate: self includedInstance ]		raise: MARequiredError! !!MAFileDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAFileDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAFileDescription! !!MAFileDescriptionTest methodsFor: 'private' stamp: 'lr 10/18/2007 18:21'!includedInstance	^ MAMemoryFileModel new		contents: 'Lukas Renggli';		filename: 'author.txt';		yourself! !!MAFileDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!shouldSkipStringTests	^ true! !!MAFileDescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/30/2009 23:16'!testKind	super testKind.	self description kind: MAExternalFileModel.	self assert: self description kind = MAExternalFileModel! !!MADateAndTimeDescriptionTest class methodsFor: 'testing' stamp: 'pmm 8/31/2009 20:10'!isAbstract	^ false! !!MADateAndTimeDescriptionTest methodsFor: 'private' stamp: 'pmm 8/31/2009 20:11'!actualClass	^ MADateAndTimeDescription! !!MADateAndTimeDescriptionTest methodsFor: 'private' stamp: 'pmm 8/31/2009 20:11'!excludedInstance	^ DateAndTime year: 1980 month: 1 day: 11 hour: 11 minute: 38 second: 12! !!MADateAndTimeDescriptionTest methodsFor: 'private' stamp: 'pmm 8/31/2009 20:11'!includedInstance	^ DateAndTime year: 1980 month: 6 day: 11 hour: 11 minute: 38 second: 12! !!MADateAndTimeDescriptionTest methodsFor: 'private' stamp: 'pmm 8/31/2009 20:11'!maxInstance	^ DateAndTime year: 1980 month: 6 day: 12 hour: 11 minute: 38 second: 12! !!MADateAndTimeDescriptionTest methodsFor: 'private' stamp: 'pmm 8/31/2009 20:11'!minInstance	^ DateAndTime year: 1980 month: 6 day: 10 hour: 11 minute: 38 second: 12! !!MADateDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MADateDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MADateDescription! !!MADateDescriptionTest methodsFor: 'private' stamp: 'dkh 11/01/2007 17:41'!excludedInstance	^ Date newDay: 1 month: (Date nameOfMonth: 6) year: 1980! !!MADateDescriptionTest methodsFor: 'private' stamp: 'lr 1/18/2008 19:16'!includedInstance	^ Date newDay: 11 month: (Date nameOfMonth: 6) year: 1980! !!MADateDescriptionTest methodsFor: 'private' stamp: 'dkh 11/01/2007 17:42'!maxInstance	^ Date newDay: 12 month: (Date nameOfMonth: 6) year: 1980! !!MADateDescriptionTest methodsFor: 'private' stamp: 'dkh 11/01/2007 17:42'!minInstance	^ Date newDay: 10 month: (Date nameOfMonth: 6) year: 1980! !!MADurationDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MADurationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MADurationDescription! !!MADurationDescriptionTest methodsFor: 'private' stamp: 'lr 11/14/2006 18:16'!excludedInstance	^ Duration days: 0 hours: 0 minutes: 0 seconds: 2! !!MADurationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!includedInstance	^ Duration days: 1 hours: 2 minutes: 3 seconds: 4! !!MADurationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!maxInstance	^ Duration days: 2 hours: 2 minutes: 3 seconds: 4! !!MADurationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!minInstance	^ Duration days: 0 hours: 2 minutes: 3 seconds: 4! !!MAMagnitudeDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ true! !!MAMagnitudeDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAMagnitudeDescription! !!MAMagnitudeDescriptionTest methodsFor: 'private' stamp: 'lr 11/14/2006 18:15'!excludedInstance	self subclassResponsibility! !!MAMagnitudeDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!maxInstance	self subclassResponsibility! !!MAMagnitudeDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!minInstance	self subclassResponsibility! !!MAMagnitudeDescriptionTest methodsFor: 'testing' stamp: 'lr 3/21/2006 20:01'!testInfToInf	self assert: self description min isNil.	self assert: self description max isNil.	self assert: (self description isSatisfiedBy: self minInstance).	self assert: (self description isSatisfiedBy: self includedInstance).	self assert: (self description isSatisfiedBy: self maxInstance)! !!MAMagnitudeDescriptionTest methodsFor: 'testing' stamp: 'lr 3/21/2006 20:01'!testInfToVal	self description max: self includedInstance.	self assert: self description min isNil.	self assert: self description max = self includedInstance.	self assert: (self description isSatisfiedBy: self minInstance).	self assert: (self description isSatisfiedBy: self includedInstance).	self deny: (self description isSatisfiedBy: self maxInstance)! !!MAMagnitudeDescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testMax	self description max: self maxInstance.	self assert: self description max = self maxInstance! !!MAMagnitudeDescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testMin	self description min: self minInstance.	self assert: self description min = self minInstance! !!MAMagnitudeDescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testMinMax	self description min: self minInstance max: self maxInstance.	self assert: self description min = self minInstance.	self assert: self description max = self maxInstance! !!MAMagnitudeDescriptionTest methodsFor: 'testing-validation' stamp: 'lr 7/25/2008 17:39'!testRangeErrorMessage	self description		min: self minInstance;		max: self maxInstance.	self assert: self description rangeErrorMessage notEmpty.	self description rangeErrorMessage: 'zork'.	self assert: self description rangeErrorMessage = 'zork'.	[ self description validate: self excludedInstance ]		on: MARangeError		do: [ :err | self assert: self description rangeErrorMessage = err messageText ]! !!MAMagnitudeDescriptionTest methodsFor: 'testing-validation' stamp: 'lr 7/25/2008 17:47'!testRangeErrorMessageGenerated	self description min: nil max: nil.	self assert: self description rangeErrorMessage isNil.		self description min: nil max: self maxInstance.	self assert: self description rangeErrorMessage notEmpty.		self description min: self minInstance max: nil.	self assert: self description rangeErrorMessage notEmpty.	self description min: self minInstance max: self maxInstance.	self assert: self description rangeErrorMessage notEmpty! !!MAMagnitudeDescriptionTest methodsFor: 'testing' stamp: 'lr 3/21/2006 20:01'!testValToInf	self description min: self includedInstance.	self assert: self description min = self includedInstance.	self assert: self description max isNil.	self deny: (self description isSatisfiedBy: self minInstance).	self assert: (self description isSatisfiedBy: self includedInstance).	self assert: (self description isSatisfiedBy: self maxInstance)! !!MAMagnitudeDescriptionTest methodsFor: 'testing' stamp: 'lr 3/21/2006 20:01'!testValToVal	self description min: self includedInstance.	self description max: self includedInstance.	self assert: self description min = self includedInstance.	self assert: self description max = self includedInstance.	self deny: (self description isSatisfiedBy: self minInstance).	self assert: (self description isSatisfiedBy: self includedInstance).	self deny: (self description isSatisfiedBy: self maxInstance)! !!MAMagnitudeDescriptionTest methodsFor: 'testing-validation' stamp: 'lr 2/16/2007 09:21'!testValidateSpecific	super testValidateSpecific.	self description		min: self minInstance;		max: self maxInstance.	self		shouldnt: [ self description validate: self includedInstance ]		raise: MARangeError.	self		should: [ self description validate: self excludedInstance ]		raise: MARangeError! !!MANumberDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MANumberDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MANumberDescription! !!MANumberDescriptionTest methodsFor: 'private' stamp: 'lr 11/14/2006 18:16'!excludedInstance	^ 0.6180! !!MANumberDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!includedInstance	^ 2.7182! !!MANumberDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!maxInstance	^ 3.1415! !!MANumberDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!minInstance	^ 1.6180! !!MANumberDescriptionTest methodsFor: 'testing' stamp: 'lr 3/30/2009 23:18'!testBeInteger	self description beInteger.	self assert: (self description isSatisfiedBy: 1).	self assert: (self description isSatisfiedBy: -1).	self deny: (self description isSatisfiedBy: 1 / 2).	self deny: (self description isSatisfiedBy: 1.2)! !!MANumberDescriptionTest methodsFor: 'testing' stamp: 'lr 3/30/2009 23:18'!testBeNegative	self description beNegative.	self assert: (self description isSatisfiedBy: -1).	self assert: (self description isSatisfiedBy: -1.5).	self deny: (self description isSatisfiedBy: 1).	self deny: (self description isSatisfiedBy: 1.5)! !!MANumberDescriptionTest methodsFor: 'testing' stamp: 'lr 3/30/2009 23:19'!testBePositive	self description bePositive.	self assert: (self description isSatisfiedBy: 1).	self assert: (self description isSatisfiedBy: 1.5).	self deny: (self description isSatisfiedBy: -0.1).	self deny: (self description isSatisfiedBy: -1)! !!MANumberDescriptionTest methodsFor: 'private' stamp: 'MatthiasBerth 3/25/2007 13:58'!testFromString	"We do some special tests here because #visitNumberDescription: in	MAStringReader works around problems with Number>>readFrom."	self shouldSkipStringTests		ifTrue: [^ self].	super testFromString.	self		should: [self description fromString: 'xyz']		raise: MAReadError		description: 'Non-numeric string should raise an error'.	self		should: [self description fromString: '12-234']		raise: MAReadError		description: 'Non-numeric string should raise an error'.	self		should: [self description fromString: '1.4.2007']		raise: MAReadError		description: 'Non-numeric string should raise an error'.	self assert: (self description fromString: '') isNil description: 'Empty string should be parsed to nil'.	self assert: (self description fromString: '-20')			= -20 description: 'Negative numbers should be accepted'! !!MANumberDescriptionTest methodsFor: 'testing' stamp: 'lr 8/2/2008 17:54'!testValidateConditions! !!MATimeDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MATimeDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MATimeDescription! !!MATimeDescriptionTest methodsFor: 'private' stamp: 'lr 11/14/2006 18:16'!excludedInstance	^ Time hour: 9 minute: 33 second: 12! !!MATimeDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!includedInstance	^ Time hour: 11 minute: 33 second: 12! !!MATimeDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!maxInstance	^ Time hour: 12 minute: 33 second: 12! !!MATimeDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!minInstance	^ Time hour: 10 minute: 33 second: 12! !!MATimeStampDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MATimeStampDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MATimeStampDescription! !!MATimeStampDescriptionTest methodsFor: 'private' stamp: 'lr 11/14/2006 18:16'!excludedInstance	^ TimeStamp year: 1980 month: 1 day: 11 hour: 11 minute: 38 second: 12! !!MATimeStampDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!includedInstance	^ TimeStamp year: 1980 month: 6 day: 11 hour: 11 minute: 38 second: 12! !!MATimeStampDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!maxInstance	^ TimeStamp year: 1980 month: 6 day: 12 hour: 11 minute: 38 second: 12! !!MATimeStampDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!minInstance	^ TimeStamp year: 1980 month: 6 day: 10 hour: 11 minute: 38 second: 12! !!MAMultipleOptionDescriptionTest class methodsFor: 'accessing-default' stamp: 'lr 3/9/2006 11:35'!defaultUnique	^ false! !!MAMultipleOptionDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAMultipleOptionDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAMultipleOptionDescription! !!MAMultipleOptionDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!includedInstance	^ self optionInstances copyFrom: 1 to: 2! !!MAMultipleOptionDescriptionTest methodsFor: 'testing-properties' stamp: 'lr 3/9/2006 11:34'!testOrdered	self description beOrdered.	self assert: self description isOrdered.	self assert: self description ordered.	self description beUnordered.	self deny: self description isOrdered.	self deny: self description ordered! !!MAMultipleOptionDescriptionTest methodsFor: 'testing-properties' stamp: 'lr 3/9/2006 11:34'!testSorted	self description beDistinct.	self assert: self description isDistinct.	self assert: self description distinct.	self description beIndefinite.	self deny: self description isDistinct.	self deny: self description distinct! !!MAOptionDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ true! !!MAOptionDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MAOptionDescription! !!MAOptionDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!optionInstances	^ Array with: 'foo' with: 'bar' with: 'zork'! !!MAOptionDescriptionTest methodsFor: 'running' stamp: 'lr 3/9/2006 11:34'!setUp	super setUp.	self description options: self optionInstances! !!MAOptionDescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:35'!testAllOptions	self description beRequired; beSorted; options: #( c b a ).	self assert: self description allOptions = #( a b c ).	self description beRequired; beUnsorted; options: #( c b a ).	self assert: self description allOptions = #( c b a )! !!MAOptionDescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testAllOptionsWithExisting	self description beRequired; options: #( a b c ).	self assert: (self description allOptionsWith: #a) = #( a b c )! !!MAOptionDescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testAllOptionsWithNil	self description beRequired; options: #( a b c ).	self assert: (self description allOptionsWith: nil) = #( a b c )! !!MAOptionDescriptionTest methodsFor: 'testing-copying' stamp: 'lr 3/9/2006 11:34'!testCopyOptions	self deny: self description copy options == self description options.	self assert: self description copy options = self description options! !!MAOptionDescriptionTest methodsFor: 'testing-strings' stamp: 'lr 3/24/2007 21:51'!testFromStringInvalid	"There is no invalid string input."! !!MAOptionDescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testOptions	self description options: #( a b c ).	self assert: self description options = #( a b c )! !!MAOptionDescriptionTest methodsFor: 'testing-strings' stamp: 'lr 9/12/2007 17:27'!testOptionsAndLabels	self description reference: MANumberDescription new.	self assert: (self description labelForOption: 1) = '1'.	self description optionsAndLabels: (Array with: 1 -> 'one' with: 2 -> 'two').	self assert: (self description labelForOption: 1) = 'one'.	self assert: (self description labelForOption: 2) = 'two'.	self assert: (self description labelForOption: 3) = '3'! !!MAOptionDescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/30/2009 23:20'!testOptionsTextual	self description optionsTextual: 'a' , (String with: Character cr) , 'b'.	self assert: self description optionsTextual = ('a' , (String with: Character cr) , 'b').	self assert: self description options = #( 'a' 'b' )! !!MAOptionDescriptionTest methodsFor: 'testing' stamp: 'lr 4/29/2008 17:00'!testReferencePrinting	self description reference: MAStringDescription new.	self assert: (self description labelForOption: 1) = '1'.	self assert: (self description labelForOption: 1 @ 2) = '1@2'.	self assert: (self description labelForOption: 1 -> 2) = '1->2'! !!MAOptionDescriptionTest methodsFor: 'testing-properties' stamp: 'lr 3/9/2006 11:35'!testSorted	self description beSorted.	self assert: self description isSorted.	self assert: self description sorted.	self description beUnsorted.	self deny: self description isSorted.	self deny: self description sorted! !!MASingleOptionDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MASingleOptionDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MASingleOptionDescription! !!MASingleOptionDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!includedInstance	^ self optionInstances first! !!MASingleOptionDescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:35'!testAllOptionsOptional	self description beOptional; beSorted; options: #( c b a ).	self assert: self description allOptions = #( nil a b c ).	self description beOptional; beUnsorted; options: #( c b a ).	self assert: self description allOptions = #( nil c b a )! !!MASingleOptionDescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 5/5/2006 19:37'!testAllOptionsWithExtensible	self description beRequired; beUnsorted; beLimited; options: #( c d a ).	self assert: (self description allOptionsWith: #b) = #( c d a ).	self description beRequired; beUnsorted; beExtensible; options: #( c d a ).	self assert: (self description allOptionsWith: #b) = #( c d a b ).	self description beRequired; beSorted; beLimited; options: #( c d a ).	self assert: (self description allOptionsWith: #b) = #( a c d ).	self description beRequired; beSorted; beExtensible; options: #( c d a ).	self assert: (self description allOptionsWith: #b) = #( a b c d )! !!MASingleOptionDescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 5/5/2006 19:26'!testAllOptionsWithOptional	self description beOptional; beSorted; beExtensible; options: #( c d a ).	self assert: (self description allOptionsWith: #b) = #( nil a b c d ).	self description beOptional; beSorted; beLimited; options: #( c d a ).	self assert: (self description allOptionsWith: #b) = #( nil a c d ).	self description beOptional; beUnsorted; beExtensible; options: #( c d a ).	self assert: (self description allOptionsWith: #b) = #( nil c d a b ).	self description beOptional; beUnsorted; beLimited; options: #( c d a ).	self assert: (self description allOptionsWith: #b) = #( nil c d a )! !!MASingleOptionDescriptionTest methodsFor: 'testing-properties' stamp: 'lr 3/9/2006 11:35'!testExtensible	self description beExtensible.	self assert: self description isExtensible.	self assert: self description extensible.	self description beLimited.	self deny: self description isExtensible.	self deny: self description extensible! !!MASingleOptionDescriptionTest methodsFor: 'testing-properties' stamp: 'mb 4/10/2008 00:46'!testGroupBy	self deny: self description isGrouped.	self description groupBy: #grouping.	self assert: self description isGrouped.! !!MASingleOptionDescriptionTest methodsFor: 'testing-properties' stamp: 'mb 4/10/2008 01:21'!testGroupOf	self assert: MADateDescription grouping = 'Magnitude'.! !!MASingleOptionDescriptionTest methodsFor: 'testing' stamp: 'lr 5/21/2009 13:43'!testOptionsAndLabelsFromString	self description 		undefined: 'void';		optionsAndLabels: (Array with: 1 -> 'one' with: 2 -> 'two').	self assert: (self description fromString: 'void') isNil.	self assert: (self description fromString: 'one') = 1.	self assert: (self description fromString: 'two') = 2! !!MASingleOptionDescriptionTest methodsFor: 'testing' stamp: 'lr 5/21/2009 13:43'!testOptionsAndLabelsToString	self description 		undefined: 'void';		optionsAndLabels: (Array with: 1 -> 'one' with: 2 -> 'two').	self assert: (self description toString: nil) = 'void'.	self assert: (self description toString: 1) = 'one'.	self assert: (self description toString: 2) = 'two'.	self assert: (self description toString: 3) = '3'! !!MAReferenceDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ true! !!MAReferenceDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MAReferenceDescription! !!MAReferenceDescriptionTest methodsFor: 'private' stamp: 'lr 4/18/2007 18:00'!referenceInstance	^ MAStringDescription new! !!MAReferenceDescriptionTest methodsFor: 'running' stamp: 'lr 4/18/2007 19:08'!setUp	super setUp.	self description reference: self referenceInstance.	self assert: self description reference accessor notNil! !!MAReferenceDescriptionTest methodsFor: 'testing-copying' stamp: 'lr 4/18/2007 19:05'!testCopyReference	self assert: self description copy reference = self description reference.	self deny: self description copy reference == self description reference! !!MARelationDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ true! !!MARelationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MARelationDescription! !!MARelationDescriptionTest methodsFor: 'private' stamp: 'lr 4/20/2007 14:30'!addressInstance1	^ MAMockAddress new		street: 'Tillierstrasse 17';		plz: 3005; place: 'Bern';		yourself! !!MARelationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!addressInstance2	^ MAMockAddress new		street: 'In der Au';		plz: 8765; place: 'Engi';		yourself! !!MARelationDescriptionTest methodsFor: 'running' stamp: 'lr 9/12/2007 17:27'!setUp	super setUp.	self description		reference: MAMockAddress description;		classes: (Array with: MAMockAddress)! !!MARelationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!shouldSkipStringTests	^ true! !!MARelationDescriptionTest methodsFor: 'testing-copying' stamp: 'lr 3/9/2006 11:35'!testCopyClasses	self assert: self description copy classes = self description classes.	self deny: self description copy classes == self description classes! !!MAToManyRelationDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAToManyRelationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MAToManyRelationDescription! !!MAToManyRelationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!includedInstance	^ Array with: self addressInstance1 with: self addressInstance2! !!MAToManyRelationDescriptionTest methodsFor: 'testing-properties' stamp: 'dc 4/18/2006 09:20'!testDefinitive	self description beDefinitive.	self assert: self description isDefinitive.	self assert: self description definitive.	self description beModifiable.	self deny: self description isDefinitive.	self deny: self description definitive! !!MAToManyRelationDescriptionTest methodsFor: 'testing-properties' stamp: 'dc 4/18/2006 09:17'!testOrdered	self description beOrdered.	self assert: self description isOrdered.	self assert: self description ordered.	self description beUnordered.	self deny: self description isOrdered.	self deny: self description ordered! !!MAToManyRelationDescriptionTest methodsFor: 'testing-properties' stamp: 'dc 4/18/2006 09:19'!testSorted	self description beSorted.	self assert: self description isSorted.	self assert: self description sorted.	self description beUnsorted.	self deny: self description isSorted.	self deny: self description sorted! !!MAToManyScalarRelationDescriptionTest methodsFor: 'private' stamp: 'pmm 11/3/2006 17:51'!actualClass	^ MAToManyScalarRelationDescription! !!MAToManyScalarRelationDescriptionTest methodsFor: 'private' stamp: 'pmm 11/3/2006 17:52'!includedInstance	^ Array with: '1' with: '2'! !!MAToManyScalarRelationDescriptionTest methodsFor: 'running' stamp: 'lr 9/12/2007 17:27'!setUp	super setUp.	self description		reference: (MAStringDescription new			accessor: MANullAccessor new;			yourself);		classes: (Array with: String)! !!MAToOneRelationDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAToOneRelationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MAToOneRelationDescription! !!MAToOneRelationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!includedInstance	^ self addressInstance1! !!MATableDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MATableDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MATableDescription! !!MATableDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!includedInstance	^ MATableModel rows: 3 columns: 3 contents: #( '1' '2' '3' '2' '4' '6' '3' '6' '9' )! !!MATableDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!shouldSkipStringTests	^ true! !!MATokenDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MATokenDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MATokenDescription! !!MATokenDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!includedInstance	^ #( 'foo' 'bar' )! !!MATokenDescriptionTest methodsFor: 'testing-strings' stamp: 'lr 3/24/2007 21:46'!testFromStringInvalid	"There is no invalid string input."! !!MAMemoDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAMemoDescription! !!MAMemoDescriptionTest methodsFor: 'testing-properties' stamp: 'lr 3/9/2006 11:34'!testLineCount	self description lineCount: 123.	self assert: self description lineCount = 123! !!MAPasswordDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAPasswordDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MAPasswordDescription! !!MAPasswordDescriptionTest methodsFor: 'testing' stamp: 'lr 9/26/2007 18:31'!testIsObfuscated	self deny: (self description isObfuscated: '').	self deny: (self description isObfuscated: nil).	self deny: (self description isObfuscated: 123).	self deny: (self description isObfuscated: '**1').	self assert: (self description isObfuscated:  '******')! !!MAPasswordDescriptionTest methodsFor: 'testing' stamp: 'lr 9/26/2007 18:32'!testObfuscated	self assert: (self description obfuscated: nil) = ''.	self assert: (self description obfuscated: 'zork') = '****'.	self assert: (self description obfuscated: 'foobar') = '******'! !!MAStringDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAStringDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MAStringDescription! !!MAStringDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!includedInstance	^ 'Lukas Renggli'! !!MAStringDescriptionTest methodsFor: 'testing-strings' stamp: 'lr 3/24/2007 21:51'!testFromStringInvalid	"There is no invalid string input."! !!MASymbolDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MASymbolDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MASymbolDescription! !!MASymbolDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!includedInstance	^ #magritte! !!MASymbolDescriptionTest methodsFor: 'testing-validation' stamp: 'lr 2/16/2007 09:47'!testValidateConditions! !!MACachedMementoTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MACachedMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MACachedMemento! !!MACachedMementoTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testCache	self assert: self memento cache size = self description size! !!MACachedMementoTest methodsFor: 'testing-actions' stamp: 'lr 3/9/2006 11:34'!testCommit	self write: self includedInstance.	self assert: self read = self includedInstance.	self assert: self value = self nullInstance.	self assert: self memento hasChanged.	self memento commit.	self assert: self read = self includedInstance.	self assert: self value = self includedInstance.	self deny: self memento hasChanged! !!MACachedMementoTest methodsFor: 'testing-basic' stamp: 'lr 3/9/2006 11:34'!testRead	self assert: self read = self defaultInstance.	self value: self includedInstance.	self assert: self read = self defaultInstance! !!MACachedMementoTest methodsFor: 'testing-actions' stamp: 'lr 3/9/2006 11:34'!testReset	self value: self defaultInstance.	self write: self includedInstance.	self assert: self memento hasChanged.	self memento reset.	self assert: self read = self defaultInstance.	self assert: self value = self defaultInstance.	self deny: self memento hasChanged! !!MACachedMementoTest methodsFor: 'testing-basic' stamp: 'lr 3/9/2006 11:34'!testWrite	self write: self includedInstance.	self assert: self read = self includedInstance.	self assert: self value = self nullInstance.	self write: self defaultInstance.	self assert: self read = self defaultInstance.	self assert: self value = self nullInstance! !!MACheckedMementoTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MACheckedMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MACheckedMemento! !!MACheckedMementoTest methodsFor: 'testing-actions' stamp: 'lr 3/9/2006 11:34'!testConflictCommit	self write: self includedInstance.	self assert: self read = self includedInstance.	self assert: self memento hasChanged.	self deny: self memento hasConflict.	self value: self otherInstance.	self assert: self read = self includedInstance.	self assert: self memento hasChanged.	self assert: self memento hasConflict.	self memento commit.	self assert: self read = self includedInstance.	self assert: self value = self includedInstance.	self deny: self memento hasChanged.	self deny: self memento hasConflict! !!MACheckedMementoTest methodsFor: 'testing-actions' stamp: 'lr 3/9/2006 11:34'!testConflictReset	self write: self includedInstance.	self assert: self read = self includedInstance.	self assert: self memento hasChanged.	self deny: self memento hasConflict.	self value: self otherInstance.	self assert: self read = self includedInstance.	self assert: self memento hasChanged.	self assert: self memento hasConflict.	self memento reset.	self assert: self read = self otherInstance.	self assert: self value = self otherInstance.	self deny: self memento hasChanged.	self deny: self memento hasConflict! !!MACheckedMementoTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testOriginal	self assert: self memento original size = self description size! !!MACheckedMementoTest methodsFor: 'testing-actions' stamp: 'lr 3/9/2006 11:34'!testValidateConflictCommit	self write: self includedInstance.	self shouldnt: [ self memento validate ] raise: MAValidationError.	self value: self otherInstance.	self should: [ self memento validate ] raise: MAValidationError.	self memento commit.	self shouldnt: [ self memento validate ] raise: MAValidationError! !!MACheckedMementoTest methodsFor: 'testing-actions' stamp: 'lr 3/9/2006 11:34'!testValidateConflictReset	self write: self includedInstance.	self shouldnt: [ self memento validate ] raise: MAValidationError.	self value: self otherInstance.	self should: [ self memento validate ] raise: MAValidationError.	self memento reset.	self shouldnt: [ self memento validate ] raise: MAValidationError! !!MAMementoTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ true! !!MAMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAMemento! !!MAMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!defaultInstance	^ 'Lukas Renggli'! !!MAMementoTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!description	^ description! !!MAMementoTest methodsFor: 'private' stamp: 'lr 4/10/2008 14:17'!descriptionInstance	^ MAContainer with: (MAStringDescription new			default: self defaultInstance;			accessor: #value;			yourself)! !!MAMementoTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!descriptionValue	^ self description children first! !!MAMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!includedInstance	^ 'Rene Magritte'! !!MAMementoTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!instance	^ memento! !!MAMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!invalidInstance	^ 31415! !!MAMementoTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!memento	^ memento! !!MAMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!mementoInstance	^ self actualClass model: self modelInstance! !!MAMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!modelInstance	^ self! !!MAMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!nullInstance	^ nil! !!MAMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!otherInstance	^ 'Ursula Freitag'! !!MAMementoTest methodsFor: 'accessing-memento' stamp: 'lr 3/9/2006 11:34'!read	^ self memento readUsing: self descriptionValue! !!MAMementoTest methodsFor: 'running' stamp: 'lr 3/9/2006 11:34'!setUp	super setUp.	description := self descriptionInstance.	memento := self mementoInstance! !!MAMementoTest methodsFor: 'testing-actions' stamp: 'lr 3/9/2006 11:34'!testCommit	self subclassResponsibility! !!MAMementoTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testDescription	self assert: self memento description = self description.	self assert: self memento description = self descriptionInstance! !!MAMementoTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:34'!testModel	self assert: self memento model = self modelInstance! !!MAMementoTest methodsFor: 'testing-basic' stamp: 'lr 3/9/2006 11:34'!testRead	self subclassResponsibility! !!MAMementoTest methodsFor: 'testing-actions' stamp: 'lr 3/9/2006 11:34'!testReset	self subclassResponsibility! !!MAMementoTest methodsFor: 'testing-actions' stamp: 'lr 3/9/2006 11:34'!testValidateIncluded	self write: self includedInstance.	self shouldnt: [ self memento validate ] raise: MAValidationError! !!MAMementoTest methodsFor: 'testing-actions' stamp: 'lr 3/9/2006 11:34'!testValidateInvalid	self write: self invalidInstance.	self should: [ self memento validate ] raise: MAValidationError! !!MAMementoTest methodsFor: 'testing-actions' stamp: 'lr 3/9/2006 11:34'!testValidateRequired	self descriptionValue beRequired.	self write: self nullInstance.	self should: [ self memento validate ] raise: MAValidationError! !!MAMementoTest methodsFor: 'testing-basic' stamp: 'lr 3/9/2006 11:34'!testWrite	self subclassResponsibility! !!MAMementoTest methodsFor: 'accessing-model' stamp: 'lr 3/9/2006 11:34'!value	^ value! !!MAMementoTest methodsFor: 'accessing-model' stamp: 'lr 3/9/2006 11:34'!value: anObject	value := anObject! !!MAMementoTest methodsFor: 'accessing-memento' stamp: 'lr 3/9/2006 11:34'!write: anObject	self memento write: anObject using: self descriptionValue! !!MAStraitMementoTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAStraitMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MAStraitMemento! !!MAStraitMementoTest methodsFor: 'testing-actions' stamp: 'lr 3/9/2006 11:35'!testCommit	self write: self includedInstance.	self assert: self value = self includedInstance.	self assert: self read = self includedInstance.	self memento commit.	self assert: self value = self includedInstance.	self assert: self read = self includedInstance! !!MAStraitMementoTest methodsFor: 'testing-basic' stamp: 'lr 3/9/2006 11:35'!testRead	self assert: self read = self defaultInstance.	self value: self includedInstance.	self assert: self read = self includedInstance.	self value: self defaultInstance.	self assert: self read = self defaultInstance! !!MAStraitMementoTest methodsFor: 'testing-actions' stamp: 'lr 3/9/2006 11:35'!testReset	self write: self includedInstance.	self memento reset.	self assert: self read = self includedInstance! !!MAStraitMementoTest methodsFor: 'testing-actions' stamp: 'lr 3/9/2006 11:35'!testValidateRequired! !!MAStraitMementoTest methodsFor: 'testing-basic' stamp: 'lr 3/9/2006 11:35'!testWrite	self write: self includedInstance.	self assert: self value = self includedInstance.	self write: self defaultInstance.	self assert: self value = self defaultInstance.	self write: self nullInstance.	self assert: self value = self nullInstance! !!MAObjectTest class methodsFor: 'building' stamp: 'dkh 04/28/2008 12:01'!buildTestClassFor: aClass	" self buildTestClassFor: MAObject "	| thisName thisClass thisCategory parentClass |	thisName := (aClass name , 'Test') asSymbol.	(thisName beginsWith: 'MA')		ifFalse: [ ^ self ].	thisClass := MACompatibility classNamed: thisName.	thisCategory := 'Magritte-Tests-' , (aClass category copyAfterLast: $-).	parentClass := self = thisClass		ifTrue: [ self superclass ]		ifFalse: [ MACompatibility classNamed: (aClass superclass name , 'Test') asSymbol ].	thisClass := parentClass		subclass: thisName		instanceVariableNames: (thisClass isNil			ifFalse: [ thisClass instanceVariablesString ]			ifTrue: [ String new ])			classVariableNames: ''			poolDictionaries: ''			category: thisCategory.	thisClass		compile: 'actualClass	^ ' , aClass name		classified: #private.	thisClass class		compile: 'isAbstract	^ ' , aClass isAbstract asString		classified: #testing.	aClass subclassesDo: [ :each | self buildTestClassFor: each ]! !!MAObjectTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ true! !!MAObjectTest class methodsFor: 'accessing' stamp: 'lr 4/12/2009 00:28'!packageNamesUnderTest	^ #('Magritte-Model')! !!MAObjectTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!shouldInheritSelectors	^ true! !!MAObjectTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAObject! !!MAObjectTest methodsFor: 'accessing' stamp: 'lr 4/5/2007 17:12'!instance	self subclassResponsibility! !!MAObjectTest methodsFor: 'testing-copying' stamp: 'lr 3/9/2006 11:34'!testCopy	self assert: self instance = self instance copy.	self deny: self instance == self instance copy! !!MAObjectTest methodsFor: 'testing-copying' stamp: 'lr 5/14/2008 20:32'!testCopyProperties	self deny: self instance properties == self instance copy properties! !!MAObjectTest methodsFor: 'testing-comparing' stamp: 'lr 3/9/2006 11:34'!testEqual	self assert: self instance = self instance.	self assert: self instance = self instance copy.	self assert: self instance copy = self instance.	self deny: self instance = 123.	self deny: self instance = String new! !!MAObjectTest methodsFor: 'testing-comparing' stamp: 'lr 3/9/2006 11:34'!testHash	self assert: self instance hash isInteger.	self assert: self instance hash = self instance hash.	self assert: self instance hash = self instance copy hash! !!MAObjectTest methodsFor: 'testing-testing' stamp: 'lr 10/28/2007 10:18'!testIsDescription	self deny: self instance isDescription! !!MAObjectTest methodsFor: 'testing-properties' stamp: 'lr 3/9/2006 11:34'!testProperties	self assert: self instance properties notNil.	self instance instVarNamed: 'properties' put: nil.	self instance propertyAt: #foo put: #bar.	self instance instVarNamed: 'properties' put: nil.	self instance propertyAt: #foo ifAbsent: [ nil ].	self instance instVarNamed: 'properties' put: nil.	self instance propertyAt: #foo ifAbsentPut: [ #bar ].	self instance instVarNamed: 'properties' put: nil.	self instance hasProperty: #foo.	self instance instVarNamed: 'properties' put: nil! !!MAObjectTest methodsFor: 'testing-properties' stamp: 'lr 3/5/2007 13:52'!testPropertiesAt	self assert: (self instance propertyAt: #foo put: 'bar') = 'bar'.	self assert: (self instance propertyAt: #foo) = 'bar'.	self should: [ self instance propertyAt: #bar ] raise: MAPropertyError! !!MAObjectTest methodsFor: 'testing-properties' stamp: 'lr 3/9/2006 11:34'!testPropertiesAtIfAbsent	self assert: (self instance propertyAt: #foo put: 'bar') = 'bar'.	self assert: (self instance propertyAt: #foo ifAbsent: [ 'baz' ]) = 'bar'.	self assert: (self instance propertyAt: #bar ifAbsent: [ 'baz' ]) = 'baz'! !!MAObjectTest methodsFor: 'testing-properties' stamp: 'lr 3/9/2006 11:34'!testPropertiesAtIfAbsentPut	self assert: (self instance propertyAt: #foo put: 'bar') = 'bar'.	self assert: (self instance propertyAt: #foo ifAbsentPut: [ 'baz' ]) = 'bar'.	self assert: (self instance propertyAt: #foo) = 'bar'.	self assert: (self instance propertyAt: #bar ifAbsentPut: [ 'baz' ]) = 'baz'.	self assert: (self instance propertyAt: #bar) = 'baz'! !!MAObjectTest methodsFor: 'testing-properties' stamp: 'lr 4/10/2008 13:56'!testPropertiesAtIfPresent	self assert: (self instance propertyAt: #foo ifPresent: [ :value | self assert: false ]) isNil.	self instance propertyAt: #foo put: 1.	self assert: (self instance propertyAt: #foo ifPresent: [ :value | self assert: value = 1. 2 ]) = 2! !!MAObjectTest methodsFor: 'testing-properties' stamp: 'lr 3/9/2006 11:34'!testPropertiesAtPut	self instance propertyAt: #foo put: 'bar'.	self assert: (self instance propertyAt: #foo) = 'bar'.	self instance propertyAt: #foo put: 'baz'.	self assert: (self instance propertyAt: #foo) = 'baz'! !!MAObjectTest methodsFor: 'testing-properties' stamp: 'lr 3/9/2006 11:34'!testPropertiesHas	self deny: (self instance hasProperty: #foo).	self instance propertyAt: #foo put: 'bar'.	self assert: (self instance hasProperty: #foo).	self deny: (self instance hasProperty: #bar)! !!MAObjectTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!testSanity	"If this test case fails, there is something wrong with the setup of the test-case."	self		assert: self actualClass isAbstract not		description: 'Unable to test abstract class.'.	self		assert: self instance class = self actualClass		description: 'Invalid test instance.'! !!MATableModelTest methodsFor: 'running' stamp: 'lr 3/9/2006 11:35'!setUp	table := (MATableModel rows: 3 columns: 4)		collect: [ :row :col :value | row raisedTo: col ]! !!MATableModelTest methodsFor: 'testing-accessing' stamp: 'lr 3/21/2006 20:04'!testAtAt	self assert: (table at: 1 at: 1) = 1.	self assert: (table at: 2 at: 3) = 8.	self assert: (table at: 3 at: 2) = 9.	self assert: (table at: 3 at: 4) = 81! !!MATableModelTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:35'!testAtAtAbsent	self should: [ table at: 0 at: 1 ] raise: Error.	self should: [ table at: 1 at: 0 ] raise: Error.	self should: [ table at: 4 at: 4 ] raise: Error.	self should: [ table at: 3 at: 5 ] raise: Error! !!MATableModelTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:35'!testAtAtPut	self assert: (table at: 1 at: 1 put: -1) = -1.	self assert: (table at: 2 at: 3 put: -8) = -8.	self assert: (table at: 3 at: 2 put: -9) = -9.	self assert: (table at: 3 at: 4 put: -81) = -81.	self assert: (table at: 1 at: 1) = -1.	self assert: (table at: 2 at: 3) = -8.	self assert: (table at: 3 at: 2) = -9.	self assert: (table at: 3 at: 4) = -81! !!MATableModelTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:35'!testAtAtPutAbsent	self should: [ table at: 0 at: 1 put: 0 ] raise: Error.	self should: [ table at: 1 at: 0 put: 0 ] raise: Error.	self should: [ table at: 4 at: 4 put: 0 ] raise: Error.	self should: [ table at: 3 at: 5 put: 0 ] raise: Error! !!MATableModelTest methodsFor: 'testing-enumerating' stamp: 'lr 3/9/2006 11:35'!testCollect	table := table collect: [ :row :col :val | row + col + val ].	table do: [ :row :col :val | self assert: (row raisedTo: col) = (val - row - col) ]! !!MATableModelTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:35'!testContents	self assert: table contents = #( 1 1 1 1 2 4 8 16 3 9 27 81 )! !!MATableModelTest methodsFor: 'testing-copying' stamp: 'lr 3/9/2006 11:35'!testCopy	self assert: table copy rowCount = table rowCount.	self assert: table copy columnCount = table columnCount.	self assert: table copy contents = table contents.	self deny: table copy contents == table contents! !!MATableModelTest methodsFor: 'testing-copying' stamp: 'lr 3/9/2006 11:35'!testCopyEmpty	self assert: table copyEmpty rowCount = table rowCount.	self assert: table copyEmpty columnCount = table columnCount.	self assert: (table copyEmpty contents allSatisfy: [ :each | each isNil ])! !!MATableModelTest methodsFor: 'testing-copying' stamp: 'lr 3/9/2006 11:35'!testCopyRowsColumns	self assert: (table copyRows: 1 columns: 2) rowCount = 1.	self assert: (table copyRows: 1 columns: 2) columnCount = 2.	self assert: (table copyRows: 1 columns: 2) contents = #(1 1).	self assert: (table copyRows: 4 columns: 3) rowCount = 4.	self assert: (table copyRows: 4 columns: 3) columnCount = 3.	self assert: (table copyRows: 4 columns: 3) contents = #(1 1 1 2 4 8 3 9 27 nil nil nil)! !!MATableModelTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:35'!testCoumnCount	self assert: table columnCount = 4! !!MATableModelTest methodsFor: 'testing-enumerating' stamp: 'lr 3/9/2006 11:35'!testDo	table do: [ :row :col :val | self assert: (row raisedTo: col) = val ]! !!MATableModelTest methodsFor: 'testing-comparing' stamp: 'lr 3/21/2006 18:43'!testEqual	self assert: table = table.	self assert: table = table copy.	self assert: table copy = table.	self assert: table copy = table copy.	self deny: table = (table copy at: 1 at: 2 put: 3).	self deny: table = (table copyRows: 3 columns: 3).	self deny: table = (table copyRows: 4 columns: 4)! !!MATableModelTest methodsFor: 'testing-comparing' stamp: 'lr 3/9/2006 11:35'!testHash	self assert: table hash = table hash.	self assert: table hash = table copy hash.	self assert: table copy hash = table hash.	self assert: table copy hash = table copy hash! !!MATableModelTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:35'!testRowCount	self assert: table rowCount = 3! !!MATableModelTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!testSetup	self assert: table rowCount = 3.	self assert: table columnCount = 4.	self assert: table contents = #( 1 1 1 1 2 4 8 16 3 9 27 81 )! !"Magritte-Tests"!!MASilentContainerMorph commentStamp: 'tg 5/6/2009 13:26' prior: 0!The only difference to the superclass is that on answer it does not delete the morph. This is useful when we want the morph to be embedded.!!MAElementDescription class methodsFor: '*magritte-morph-defaults' stamp: 'lr 3/9/2006 11:33'!defaultMorphClasses	^ Array with: MATextMorph! !!MAContainer class methodsFor: '*magritte-morph-defaults' stamp: 'lr 3/9/2006 11:33'!defaultMorphClasses	^ Array with: MAContainerMorph! !!MAContainer methodsFor: '*magritte-morph-converting' stamp: 'lr 3/9/2006 11:33'!asMorphOn: anObject	^ self morphClass		memento: (anObject mementoClass			model: anObject			description: self)! !!MAPasswordDescription class methodsFor: '*magritte-morph-default' stamp: 'lr 3/9/2006 11:33'!defaultMorphClasses	^ Array with: MAPasswordMorph! !!MAContainerMorph methodsFor: 'decorating' stamp: 'lr 3/9/2006 11:33'!addButtons	self addButtons: #( save cancel )! !!MAContainerMorph methodsFor: 'decorating' stamp: 'lr 10/30/2006 13:41'!addButtons: anArray	morph := self rectangleMorph		addMorphBack: self morph;		addMorphBack: (self barMorph: anArray);		yourself! !!MAContainerMorph methodsFor: 'decorating' stamp: 'jmck 1/30/2010 13:20'!addWindow	| scrollPane |	scrollPane := ScrollPane new.	scrollPane scroller addMorph: self morph.		morph := self windowMorph		model: self;		vResizing: #rigid;		addMorph: (scrollPane layoutInset: 5 @ 5)			frame: (0 @ 0 corner: 1 @ 1);		yourself! !!MAContainerMorph methodsFor: 'answering' stamp: 'tg 5/6/2009 11:05'!answer: anObject	answer ifNotNil: [ answer value: anObject ].	self morph delete! !!MAContainerMorph methodsFor: 'private' stamp: 'lr 3/9/2006 11:33'!buildChildren	^ Array streamContents: [ :stream |		self description do: [ :each |			each isVisible ifTrue: [				stream nextPut: (each morphClass					memento: self memento					description: each					parent: self) ] ] ]! !!MAContainerMorph methodsFor: 'private' stamp: 'lr 3/9/2006 11:33'!buildMorphView	| result |	result := self rectangleMorph		setBalloonText: self description comment;		listDirection: #topToBottom;		cellInset: 3;		yourself.	self children do: [ :each |		result addMorphBack: each morph ].	^ result! !!MAContainerMorph methodsFor: 'morphic' stamp: 'lr 3/9/2006 11:33'!callInHand	| result |	result := nil.	self onAnswer: [ :value | result := value ].	self openInHand; waitUntilClosed.	^ result! !!MAContainerMorph methodsFor: 'morphic' stamp: 'lr 3/9/2006 11:33'!callInWorld	| result |	result := nil.	self onAnswer: [ :value | result := value ].	self openInWorld; waitUntilClosed.	^ result! !!MAContainerMorph methodsFor: 'actions' stamp: 'lr 4/5/2007 17:12'!cancel	self reset; answer: nil! !!MAContainerMorph methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!children	^ children! !!MAContainerMorph methodsFor: 'answering' stamp: 'lr 3/9/2006 11:33'!onAnswer: aBlock	answer := aBlock! !!MAContainerMorph methodsFor: 'morphic' stamp: 'lr 3/9/2006 11:33'!openInHand	^ self morph openInHand! !!MAContainerMorph methodsFor: 'morphic' stamp: 'lr 3/9/2006 11:33'!openInWorld	^ self morph openInWorld! !!MAContainerMorph methodsFor: 'actions' stamp: 'jmck 1/30/2010 12:48'!save	[ self validate ]		on: MAValidationError		do: [ :err | ^ self inform: err asString ].	self commit; answer: self model! !!MAContainerMorph methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:33'!setChildren: aCollection	children := aCollection! !!MAContainerMorph methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:33'!setDescription: aDescription	super setDescription: aDescription.	self setChildren: self buildChildren! !!MAContainerMorph methodsFor: 'morphic' stamp: 'lr 3/9/2006 11:33'!waitUntilClosed	[ self morph world notNil ]		whileTrue: [ self morph outermostWorldMorph doOneCycle ]! !!MASilentContainerMorph methodsFor: 'as yet unclassified' stamp: 'tg 5/6/2009 13:25'!answer: anObject	answer ifNotNil: [ answer value: anObject ].! !!MADescriptionMorph class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:33'!memento: aMemento	^ self memento: aMemento description: aMemento description! !!MADescriptionMorph class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:33'!memento: aMemento description: aDescription	^ self memento: aMemento description: aDescription parent: nil! !!MADescriptionMorph class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:33'!memento: aMemento description: aDescription parent: aComponent	^ self new		setMemento: aMemento;		setDescription: aDescription;		setParent: aComponent;		yourself! !!MADescriptionMorph methodsFor: 'prototypes' stamp: 'lr 3/9/2006 11:33'!barMorph: anArray	| bar |	bar := self rectangleMorph		hResizing: #spaceFill;		vResizing: #spaceFill;		listDirection: #leftToRight;		listCentering: #center;		wrapCentering: #bottomRight;		cellInset: self defaultSpacerSize;		yourself.	anArray do: [ :selector |		bar addMorphBack: (self buttonMorph: selector) ].	^ bar! !!MADescriptionMorph methodsFor: 'private' stamp: 'lr 3/9/2006 11:33'!buildMorph	^ self description isReadonly		ifTrue: [ self buildMorphView ]		ifFalse: [ self buildMorphEditor ]! !!MADescriptionMorph methodsFor: 'private' stamp: 'lr 3/9/2006 11:33'!buildMorphEditor	^ self buildMorphView! !!MADescriptionMorph methodsFor: 'private' stamp: 'lr 3/9/2006 11:33'!buildMorphView	self subclassResponsibility! !!MADescriptionMorph methodsFor: 'prototypes' stamp: 'lr 2/21/2008 11:33'!buttonMorph: aSelector	| button |	button := PluggableButtonMorph		on: self		getState: #buttonState		action: aSelector.	button		label: aSelector;		hResizing: #spaceFill;		shortcutCharacter: aSelector first.	^ button! !!MADescriptionMorph methodsFor: 'private-morphic' stamp: 'lr 3/9/2006 11:33'!buttonState	^ true! !!MADescriptionMorph methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!commit	self memento commit! !!MADescriptionMorph methodsFor: 'accessing-configuration' stamp: 'lr 3/9/2006 11:33'!defaultBackgroundColor	^ self description morphColor! !!MADescriptionMorph methodsFor: 'accessing-configuration' stamp: 'lr 3/9/2006 11:33'!defaultSpacerSize	^ 5! !!MADescriptionMorph methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!description	^ description! !!MADescriptionMorph methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!memento	^ memento! !!MADescriptionMorph methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:33'!model	^ self memento model! !!MADescriptionMorph methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!morph	^ morph ifNil: [ morph := self buildMorph ]! !!MADescriptionMorph methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!parent	^ parent! !!MADescriptionMorph methodsFor: 'private-morphic' stamp: 'lr 3/9/2006 11:33'!perform: selector orSendTo: otherTarget	^ (self respondsTo: selector)		ifTrue: [ self perform: selector ]		ifFalse: [ otherTarget perform: selector ]! !!MADescriptionMorph methodsFor: 'prototypes' stamp: 'lr 3/9/2006 11:33'!rectangleMorph	^ RectangleMorph new		borderWidth: 0;		color: Color transparent;		layoutPolicy: TableLayout new;		cellPositioning: #topLeft;		vResizing: #shrinkWrap;		hResizing: #spaceFill;		yourself! !!MADescriptionMorph methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!reset	self memento reset! !!MADescriptionMorph methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:33'!root	^ self parent isNil		ifTrue: [ self ]		ifFalse: [ self parent root ]! !!MADescriptionMorph methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:33'!setDescription: aDescription	description := aDescription! !!MADescriptionMorph methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:33'!setMemento: aMemento	memento := aMemento! !!MADescriptionMorph methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:33'!setParent: aMorph	parent := aMorph! !!MADescriptionMorph methodsFor: 'prototypes' stamp: 'lr 3/9/2006 11:33'!stringMorph	^ StringMorph new! !!MADescriptionMorph methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!validate	"Flushes the cached state of some morphic elements (such as text-morphs) to the memento and then does the validation. I don't know of a better flush the morphic contents (happy flickering), probably morphic is just too limited to customize that easily or I am too dumb to find out."	self morph allMorphsDo: [ :each |		(each respondsTo: #accept)			ifTrue: [ each accept ] ].	self memento validate! !!MADescriptionMorph methodsFor: 'prototypes' stamp: 'lr 3/9/2006 11:33'!windowMorph	^ SystemWindow labelled: self description label! !!MACheckboxMorph methodsFor: 'private' stamp: 'tg 5/14/2009 22:04'!buildMorphEditor	^ UITheme current 		newCheckboxIn: nil		for: self		getSelected: #selected		setSelected: #selected:		getEnabled: #enabled		label: self description label 		help: self description comment! !!MACheckboxMorph methodsFor: 'actions' stamp: 'tg 5/14/2009 22:03'!enabled	^ true! !!MACheckboxMorph methodsFor: 'actions' stamp: 'tg 5/14/2009 22:03'!selected	^ (self value ifNil: [ self description default ]) ifNil: [ false ]! !!MACheckboxMorph methodsFor: 'actions' stamp: 'tg 5/14/2009 22:03'!selected: aBoolean	self value: aBoolean ! !!MAElementMorph methodsFor: 'private' stamp: 'lr 3/9/2006 11:33'!buildMorph	| result |	result := self rectangleMorph		layoutInset: 1 @ 1;		listDirection: #leftToRight;		addMorphBack: self buildMorphLabel;		addMorphBack: super buildMorph;		yourself.	self description hasComment		ifTrue: [ result setBalloonText: self description comment ].	self description isRequired		ifTrue: [ result addMorphBack: self buildMorphRequired ].	^ result! !!MAElementMorph methodsFor: 'private' stamp: 'lr 3/9/2006 11:33'!buildMorphLabel	^ self stringMorph		contents: self description label , ':';		width: 100;		yourself! !!MAElementMorph methodsFor: 'private' stamp: 'lr 3/9/2006 11:33'!buildMorphRequired	^ self stringMorph		contents: ' *';		color: Color red;		yourself! !!MAElementMorph methodsFor: 'private' stamp: 'lr 3/9/2006 11:33'!buildMorphView	^ self stringMorph		contents: self string;		yourself! !!MAElementMorph methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!string	^ self description toString: self value! !!MAElementMorph methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!string: aString	| value |	value := [ self description fromString: aString asString ]		ifError: [ aString ].	self value: value; changed: #string! !!MAElementMorph methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!value	^ self memento readUsing: self description! !!MAElementMorph methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!value: anObject	self memento write: anObject using: self description.	self changed: #value! !!MAFileMorph methodsFor: 'private' stamp: 'lr 3/9/2006 11:33'!buildMorphEditor	^ self buttonMorph: #choose! !!MAFileMorph methodsFor: 'actions' stamp: 'lr 4/10/2008 13:57'!choose	| stream |	stream := FileList2 modalFileSelector.	stream isNil ifTrue: [ ^ self ].	stream binary.	self value: (self description kind new		contents: stream contents;		filename: stream localName;		yourself)! !!MAListMorph methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:33'!options	^ self description allOptions! !!MAListMorph methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:33'!strings	^ self options collect: [ :each | self description reference toString: each ]! !!MAMultiSelectListMorph methodsFor: 'private' stamp: 'lr 10/30/2006 13:43'!buildMorphEditor	^ (PluggableListMorphOfMany on: self list: #strings primarySelection: #selected changePrimarySelection: #selected: listSelection: #selectionAt: changeListSelection: #selectionAt:put: menu: nil)		hResizing: #spaceFill;		borderColor: #inset;		borderWidth: 1;		yourself! !!MAMultiSelectListMorph methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!selected	^ selected ifNil: [ selected := 0 ]! !!MAMultiSelectListMorph methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!selected: anInteger	selected := anInteger.	self changed: #selected! !!MAMultiSelectListMorph methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!selectionAt: anInteger	^ self value includes: (self options at: anInteger)! !!MAMultiSelectListMorph methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!selectionAt: anInteger put: aBoolean	| option |	option := self options at: anInteger.	self value: (aBoolean		ifTrue: [ self value copyWith: option ]		ifFalse: [ self value copyWithout: option ]).	self changed: #selected! !!MASingleSelectListMorph methodsFor: 'private' stamp: 'lr 10/30/2006 13:43'!buildMorphEditor	^ (PluggableListMorph on: self list: #strings selected: #selected changeSelected: #selected:)		hResizing: #spaceFill;		borderColor: #inset;		borderWidth: 1;		yourself! !!MASingleSelectListMorph methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!selected	^ self options indexOf: self value! !!MASingleSelectListMorph methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!selected: anInteger	self value: (self options at: anInteger ifAbsent: [ nil ]).	self changed: #selected! !!MAMemoMorph methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!annotation	^ self string! !!MAMemoMorph methodsFor: 'private' stamp: 'tg 10/19/2007 11:12'!buildMorphEditor	"The selector #annotation should be #string instead, but we use this one and dispatch since this prevents morphic to draw a thin red border around changed fields. Stupid hack, really, but doesn't work otherwise."	^ (PluggableTextMorph on: self text: #annotation accept: #string:)		height: 400;		hResizing: #spaceFill;		borderColor: #inset;		borderWidth: 1;		yourself! !!MAMemoMorph methodsFor: 'accessing' stamp: 'tg 5/15/2009 00:03'!enabled	^ true! !!MAMemoMorph methodsFor: 'accessing' stamp: 'tg 5/15/2009 00:02'!selected	^ (self value ifNil: [ self description default ]) ifNil: [ false ]! !!MAMemoMorph methodsFor: 'accessing' stamp: 'tg 5/15/2009 00:03'!selected: aBoolean	self value: aBoolean ! !!MAPasswordMorph methodsFor: 'private' stamp: 'lr 3/9/2006 11:33'!buildMorphEditor	^ super buildMorphEditor		font: (StrikeFont passwordFontSize: 12);		yourself! !!MATextMorph methodsFor: 'private' stamp: 'jmck 2/8/2010 17:18'!buildMorphEditor	^ UITheme current 		newTextEntryIn: nil 		for: self  		get: #string  		set: #string: 		class: String		getEnabled: #enabled 		help: self description comment! !!MASingleOptionDescription class methodsFor: '*magritte-morph-defaults' stamp: 'lr 3/9/2006 11:33'!defaultMorphClasses	^ Array with: MASingleSelectListMorph! !!MADescription class methodsFor: '*magritte-morph-defaults' stamp: 'lr 3/9/2006 11:33'!defaultMorphClass	^ self defaultMorphClasses notEmpty		ifTrue: [ self defaultMorphClasses first ]! !!MADescription class methodsFor: '*magritte-morph-defaults' stamp: 'lr 3/9/2006 11:33'!defaultMorphClasses	^ Array new! !!MADescription class methodsFor: '*magritte-morph-defaults' stamp: 'lr 2/21/2008 11:36'!defaultMorphColor	^ Color white! !!MADescription class methodsFor: '*magritte-morph-description' stamp: 'lr 4/10/2008 14:17'!descriptionMorphClass	^ MASingleOptionDescription new		accessor: #morphClass;		label: 'Morph Class';		priority: 2000;		reference: MAClassDescription new;		options: self defaultMorphClasses;		default: self defaultMorphClass;		yourself! !!MADescription methodsFor: '*magritte-morph-accessing' stamp: 'lr 3/9/2006 11:33'!morphClass	^ self propertyAt: #morphClass ifAbsent: [ self class defaultMorphClass ]! !!MADescription methodsFor: '*magritte-morph-accessing' stamp: 'lr 3/9/2006 11:33'!morphClass: aClass	^ self propertyAt: #morphClass put: aClass! !!MADescription methodsFor: '*magritte-morph-accessing' stamp: 'lr 3/9/2006 11:33'!morphColor	^ self propertyAt: #morphColor ifAbsent: [ self class defaultMorphColor ]! !!MADescription methodsFor: '*magritte-morph-accessing' stamp: 'lr 3/9/2006 11:33'!morphColor: aColor	^ self propertyAt: #morphColor put: aColor! !!Object methodsFor: '*magritte-morph-converting' stamp: 'lr 3/9/2006 11:33' prior: 24942809!asMorph	^ self description asMorphOn: self! !!MAMemoDescription class methodsFor: '*magritte-morph-defaults' stamp: 'lr 3/9/2006 11:33'!defaultMorphClasses	^ Array with: MAMemoMorph! !!MABooleanDescription class methodsFor: '*magritte-morph-default' stamp: 'lr 3/9/2006 11:33'!defaultMorphClasses	^ Array with: MACheckboxMorph with: MASingleSelectListMorph! !!MAMultipleOptionDescription class methodsFor: '*magritte-morph-defaults' stamp: 'lr 3/9/2006 11:33'!defaultMorphClasses	^ Array with: MAMultiSelectListMorph! !!MAFileDescription class methodsFor: '*magritte-morph-defaults' stamp: 'lr 3/9/2006 11:33'!defaultMorphClasses	^ Array with: MAFileMorph! !"Magritte-Morph"!!MAFormDecoration commentStamp: 'lr 8/12/2008 09:26' prior: 0!I surround the owning component with a XHTML form element and render the form buttons.!!MASwitchDecoration commentStamp: 'lr 8/12/2008 09:26' prior: 0!I turn the owning component read-only and add an edit button. Clicking that button allows one to toggle between view and edit-mode.!!MAValidationDecoration commentStamp: 'lr 8/12/2008 09:22' prior: 0!I am a normally invisible component. I show a list of validation errors in case the owner component fails to validate.!!MADescribedComponentColumn commentStamp: 'pmm 8/23/2006 09:43' prior: 0!This column uses the component of a description to render the cell value.!!MAColorChooser commentStamp: '<historical>' prior: 0!MAColorComponent use me to display a beautiful palette!!MADescriptionComponent commentStamp: '<historical>' prior: 0!I'm a seaside object which provides all the functions for my subclasses to display MADescription subclasses.!!MAElementComponent commentStamp: '<historical>' prior: 0!I provide a basic display for all subclasses of MAElementDescription (only for readonly descriptions). The object is just displayed as a string. For more complex behaviour, overried #renderViewerOn:. !!MACheckboxComponent commentStamp: '<historical>' prior: 0!I'm a seaside component used to display MABooleanDescription. If I'm writeable (readonly property of my description to false) I display a checkbox otherwise, I display a string: 'yes' if true, 'no' if false', '' if nil.!!MAColorComponent commentStamp: '<historical>' prior: 0!Seaside component of MAColorDescription. I display a little box with the current selected color. If you click on the box, a beautiful palette will be displayed thanks to MAColorChooser.!!MAFileUploadComponent commentStamp: '<historical>' prior: 0!I'm the MAFileDescription seaside component. With me user can upload files to the server. I provide a button for the user to browse their computer for files.!!MAMultipleSelectionComponent commentStamp: '<historical>' prior: 0!I provide basic functionalities for MAListCompositionComponent and MACheckboxGroupComponent.!!MACheckboxGroupComponent commentStamp: '<historical>' prior: 0!Use for MAMultipleSelectionComponent. I display as many checkboxes as my description has options. Another representation for the same description is MAListCompositionComponent.!!MAListCompositonComponent commentStamp: '<historical>' prior: 0!I'm, like MACheckboxComponent, a seaside component for MAMultipleSelectionDescription. I display two lists. In the first, all available options, in the other, what the user selected. 2 buttons in between to add and remove elements to/from the selected list. If the everything property is set, I display two more buttons to allow the user to add or remove all options in one click.!!MARadioGroupComponent commentStamp: '<historical>' prior: 0!I display a set of radio buttons to render MASingleSelectionDescription.!!MASelectListComponent commentStamp: '<historical>' prior: 0!I display a simple list to allow the user to choose one element from the list. I am one of the two seaside components to render MASingleSelectionDescription.!!MATextAreaComponent commentStamp: 'lr 2/3/2007 23:12' prior: 0!I display an html text area for the magritte MAMemoDescription.!!MATextInputComponent commentStamp: '<historical>' prior: 0!I'm a simple input box for MAStringDescription.!!MATextPasswordComponent commentStamp: '<historical>' prior: 0!Password seaside component, I display stars '*' instead of the text typed by the user. My description is MAPasswordDescription.!!MAContainerDecoration methodsFor: 'accessing' stamp: 'lr 8/19/2008 22:25'!buttons	"Answer a collection of associations. The key is either a symbol that will be performed on the decorated component or a one-argument block that will be executed with the component as argument. The value is the button label."		self subclassResponsibility! !!MAContainerDecoration methodsFor: 'accessing' stamp: 'lr 4/5/2007 17:12'!default	^ self buttons first key! !!MAContainerDecoration methodsFor: 'actions' stamp: 'lr 8/19/2008 22:24'!execute: anObject	anObject isSymbol		ifFalse: [ anObject value: self component ]		ifTrue: [ self component perform: anObject ]! !!MAContainerDecoration methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isMultipart	^ self component isMultipart! !!MAContainerDecoration methodsFor: 'rendering' stamp: 'lr 8/19/2008 22:24'!renderButtonsOn: html	html div class: 'buttons'; with: [		self buttons do: [ :each |			html submitButton				accessKey: each value first;				callback: [ self execute: each key ];				text: each value ] ]! !!MAContainerDecoration methodsFor: 'rendering' stamp: 'lr 10/22/2009 21:48'!renderContentOn: html	html form		class: 'magritte';		multipart: self isMultipart;		defaultAction: [ self execute: self default ];		with: [			super renderContentOn: html.			self renderButtonsOn: html ]! !!MAFormDecoration class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:34'!buttons: aCollection	^ self new		addButtons: aCollection;		yourself! !!MAFormDecoration methodsFor: 'actions' stamp: 'lr 8/19/2008 22:25'!addButton: aSymbol	self addButton: aSymbol label: (self labelForSelector: aSymbol)! !!MAFormDecoration methodsFor: 'actions' stamp: 'lr 8/19/2008 22:25'!addButton: aSymbolOrOneArgumentBlock label: aString	self buttons add: aSymbolOrOneArgumentBlock -> aString! !!MAFormDecoration methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!addButtons: aCollection	aCollection do: [ :each |		each isVariableBinding			ifFalse: [ self addButton: each ]			ifTrue: [ self addButton: each key label: each value ] ]! !!MAFormDecoration methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!buttons	^ buttons! !!MAFormDecoration methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!buttons: aCollection	buttons := aCollection! !!MAFormDecoration methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:33'!initialize	super initialize.	self buttons: OrderedCollection new! !!MASwitchDecoration methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!buttons	^ self component isReadonly		ifTrue: [ Array with: #edit -> 'Edit' ]		ifFalse: [ Array with: #save -> 'Save' with: #cancel -> 'Cancel' ]! !!MASwitchDecoration methodsFor: 'processing' stamp: 'lr 3/9/2006 11:34'!handleAnswer: anObject continueWith: aBlock	self component readonly: true.	super handleAnswer: anObject continueWith: aBlock! !!MAValidationDecoration methodsFor: 'accessing' stamp: 'lr 4/20/2007 13:35'!errors	^ self component errors! !!MAValidationDecoration methodsFor: 'rendering' stamp: 'lr 10/22/2009 21:47'!renderContentOn: html	self errors isEmpty		ifFalse: [ self renderErrorsOn: html ].	super renderContentOn: html! !!MAValidationDecoration methodsFor: 'rendering' stamp: 'lr 9/12/2007 17:27'!renderErrorsOn: html	html unorderedList		class: 'errors';		list: self errors;		with: nil! !!MATokenDescription class methodsFor: '*magritte-seaside-defaults' stamp: 'lr 3/9/2007 15:27'!defaultComponentClasses	^ Array with: MATextInputComponent! !!MAClassDescription class methodsFor: '*magritte-seaside-accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultComponentClasses	^ Array with: MATextInputComponent! !!MAMemoDescription class methodsFor: '*magritte-seaside-defaults' stamp: 'lr 3/9/2006 11:33'!defaultComponentClasses	^ Array with: MATextAreaComponent! !!MADescription class methodsFor: '*magritte-seaside-defaults' stamp: 'lr 3/9/2006 11:33'!defaultComponentClass	^ self defaultComponentClasses isEmpty		ifTrue: [ MAUndefinedComponent ]		ifFalse: [ self defaultComponentClasses first ]! !!MADescription class methodsFor: '*magritte-seaside-defaults' stamp: 'lr 3/9/2006 11:33'!defaultComponentClasses	^ Array with: MAUndefinedComponent! !!MADescription class methodsFor: '*magritte-seaside-defaults' stamp: 'lr 1/10/2008 16:12'!defaultCssClasses	^ OrderedCollection new! !!MADescription class methodsFor: '*magritte-seaside-defaults' stamp: 'lr 3/9/2006 11:33'!defaultReportColumnClass	^ self defaultReportColumnClasses notEmpty		ifTrue: [ self defaultReportColumnClasses first ]! !!MADescription class methodsFor: '*magritte-seaside-defaults' stamp: 'lr 3/9/2006 11:33'!defaultReportColumnClasses	^ Array with: MADescribedColumn! !!MADescription class methodsFor: '*magritte-seaside-description' stamp: 'lr 4/10/2008 14:17'!descriptionComponentClass	^ MASingleOptionDescription new		accessor: #componentClass;		label: 'Component Class';		reference: MAClassDescription new;		options: self defaultComponentClasses;		default: self defaultComponentClass;		priority: 1000;		yourself! !!MADescription class methodsFor: '*magritte-seaside-description' stamp: 'lr 4/10/2008 14:17'!descriptionReportColumnClass	^ MASingleOptionDescription new		accessor: #reportColumnClass;		label: 'Report Column Class';		priority: 1010;		reference: MAClassDescription new;		options: self defaultReportColumnClasses;		default: self defaultReportColumnClass;		yourself! !!MADescription methodsFor: '*magritte-seaside-accessing' stamp: 'lr 3/9/2006 11:33'!componentClass	^ self propertyAt: #componentClass ifAbsent: [ self class defaultComponentClass ]! !!MADescription methodsFor: '*magritte-seaside-accessing' stamp: 'lr 3/25/2009 19:29'!componentClass: aClass	self propertyAt: #componentClass put: aClass! !!MADescription methodsFor: '*magritte-seaside-accessing' stamp: 'lr 1/10/2008 16:14'!cssClass: aString	(self propertyAt: #cssClasses ifAbsentPut: [ self class defaultCssClasses ])		add: aString! !!MADescription methodsFor: '*magritte-seaside-accessing' stamp: 'lr 1/10/2008 16:14'!cssClasses	^ self propertyAt: #cssClasses ifAbsent: [ self class defaultCssClasses ]! !!MADescription methodsFor: '*magritte-seaside-accessing' stamp: 'lr 3/25/2009 19:29'!cssClasses: aCollection	self propertyAt: #cssClasses put: aCollection! !!MADescription methodsFor: '*magritte-seaside-accessing' stamp: 'lr 12/22/2009 13:01'!currentCssClasses	| classes |	classes := OrderedCollection withAll: self cssClasses.	self isReadonly		ifTrue: [ classes add: 'readonly' ].	self isRequired		ifTrue: [ classes add: 'required' ].	^classes! !!MADescription methodsFor: '*magritte-seaside-accessing' stamp: 'lr 3/9/2006 11:33'!reportColumnClass	^ self propertyAt: #reportColumnClass ifAbsent: [ self class defaultReportColumnClass ]! !!MADescription methodsFor: '*magritte-seaside-accessing' stamp: 'lr 3/25/2009 19:29'!reportColumnClass: aClass	self propertyAt: #reportColumnClass put: aClass! !!MAActionColumn methodsFor: 'accessing-defaults' stamp: 'lr 4/13/2009 13:21'!defaultLabel	^ String new! !!MAActionColumn methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultUseLinks	^ true! !!MAActionColumn methodsFor: 'rendering' stamp: 'lr 3/9/2006 11:33'!renderCellContent: anObject on: html	self useLinks		ifTrue: [ self renderCellLinkContent: anObject on: html ]		ifFalse: [ self renderCellFormContent: anObject on: html ]! !!MAActionColumn methodsFor: 'rendering' stamp: 'lr 3/9/2006 11:33'!renderCellFormContent: anObject on: html	self subclassResponsibility! !!MAActionColumn methodsFor: 'rendering' stamp: 'lr 3/9/2006 11:33'!renderCellLinkContent: anObject  on: html	self subclassResponsibility! !!MAActionColumn methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!useLinks	^ self propertyAt: #useLinks ifAbsent: [ self defaultUseLinks ]! !!MAActionColumn methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!useLinks: aBoolean	self propertyAt: #useLinks put: aBoolean! !!MACommandColumn methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!addCommand: aBlock text: aString	self commands add: aBlock -> aString! !!MACommandColumn methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!addCommandOn: anObject selector: aSelector	self addCommandOn: anObject selector: aSelector text: aSelector allButLast asCapitalizedPhrase! !!MACommandColumn methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!addCommandOn: anObject selector: aSelector text: aString	self addCommand: (MessageSend receiver: anObject selector: aSelector) text: aString! !!MACommandColumn methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!commands	^ commands! !!MACommandColumn methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!commands: aCollection	commands := aCollection! !!MACommandColumn methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:33'!initialize	super initialize.	self commands: OrderedCollection new! !!MACommandColumn methodsFor: 'rendering' stamp: 'lr 3/10/2007 09:45'!renderCellFormContent: anObject on: html	self commands		do: [ :each |			html submitButton				callback: [ each key value: anObject ];				text: each value ]		separatedBy: [ html space ]! !!MACommandColumn methodsFor: 'rendering' stamp: 'lr 11/16/2006 18:56'!renderCellLinkContent: anObject on: html	self commands		do: [ :each |			html anchor				callback: [ each key value: anObject ];				with: each value ]		separatedBy: [ html space ]! !!MAIndexedCommandColumn methodsFor: 'accessing-defaults' stamp: 'pmm 11/3/2006 20:35'!defaultFormat	^ MessageSend receiver: self selector: #renderCellContent:on:index:! !!MAIndexedCommandColumn methodsFor: 'rendering' stamp: 'pmm 1/10/2009 18:36'!renderCellContent: anObject on: html index: anInteger	self commands		do: [ :each |			html anchor				callback: [ each key valueWithArguments: (Array					with: anObject					with: anInteger) ];				with: each value ]		separatedBy: [ html space ]! !!MACheckboxColumn methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultSelection	^ Set new! !!MACheckboxColumn methodsFor: 'accessing-defaults' stamp: 'lr 8/14/2008 12:14'!defaultStringDeselected	^ self webdings: 'c'! !!MACheckboxColumn methodsFor: 'accessing-defaults' stamp: 'lr 8/14/2008 12:21'!defaultStringSelected	^ self webdings: 'g'! !!MACheckboxColumn methodsFor: 'actions' stamp: 'lr 3/10/2007 09:40'!deselectRow: anObject	self selection remove: anObject ifAbsent: nil! !!MACheckboxColumn methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isSelected: anObject	^ self selection includes: anObject! !!MACheckboxColumn methodsFor: 'rendering' stamp: 'lr 3/10/2007 09:44'!renderCellFormContent: anObject on: html	html checkbox		value: (self isSelected: anObject);		callback: [ :value | self selectRow: anObject value: value ]! !!MACheckboxColumn methodsFor: 'actions' stamp: 'lr 3/10/2007 09:40'!selectRow: anObject	self selection add: anObject! !!MAOptionboxColumn methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultSelection	^ nil! !!MAOptionboxColumn methodsFor: 'accessing-defaults' stamp: 'lr 8/14/2008 12:21'!defaultStringDeselected	^ self webdings: '&nbsp;'! !!MAOptionboxColumn methodsFor: 'accessing-defaults' stamp: 'lr 8/14/2008 12:20'!defaultStringSelected	^ self webdings: 'a'! !!MAOptionboxColumn methodsFor: 'actions' stamp: 'lr 3/10/2007 09:41'!deselectRow: anObject	self selection: nil! !!MAOptionboxColumn methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isSelected: anObject	^ self selection == anObject! !!MAOptionboxColumn methodsFor: 'private' stamp: 'lr 3/9/2006 11:33'!radioGroupFor: html	"This is a very bad thing, you might never have seen in your own life. Very strange things might happen here, but for now it mostly does what we need."	| renderer |	renderer := self propertyAt: #radioGroupRenderer ifAbsentPut: nil.	^ renderer == html		ifTrue: [ self propertyAt: #radioGroupCallback ]		ifFalse: [			self propertyAt: #radioGroupRenderer put: html.			self propertyAt: #radioGroupCallback put: html radioGroup ]! !!MAOptionboxColumn methodsFor: 'rendering' stamp: 'lr 3/10/2007 09:44'!renderCellFormContent: anObject on: html	html radioButton		group: (self radioGroupFor: html);		selected: (self isSelected: anObject);		callback: [ self selectRow: anObject ]! !!MAOptionboxColumn methodsFor: 'actions' stamp: 'lr 3/10/2007 09:41'!selectRow: anObject	self selection: anObject! !!MASelectionColumn methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:34'!defaultSelection	self subclassResponsibility! !!MASelectionColumn methodsFor: 'accessing-defaults' stamp: 'lr 8/14/2008 12:05'!defaultStringDeselected	self subclassResponsibility! !!MASelectionColumn methodsFor: 'accessing-defaults' stamp: 'lr 8/14/2008 12:05'!defaultStringSelected	self subclassResponsibility! !!MASelectionColumn methodsFor: 'actions' stamp: 'lr 3/10/2007 09:39'!deselectRow: anObject	self subclassResponsibility! !!MASelectionColumn methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isSelected: anObject	self subclassResponsibility! !!MASelectionColumn methodsFor: 'actions' stamp: 'lr 3/9/2006 11:34'!refresh	super refresh.	self selection: self defaultSelection! !!MASelectionColumn methodsFor: 'rendering' stamp: 'lr 8/14/2008 12:19'!renderCellLinkContent: anObject on: html	| selected |	selected := self isSelected: anObject.	html anchor		class: (selected isNil ifFalse: [ 'selected' ]);		callback: [ self selectRow: anObject value: selected not ];		with: (selected			ifTrue: [ self stringSelected ]			ifFalse: [ self stringDeselected ])! !!MASelectionColumn methodsFor: 'actions' stamp: 'lr 3/10/2007 09:39'!selectRow: anObject	self subclassResponsibility! !!MASelectionColumn methodsFor: 'actions' stamp: 'lr 3/10/2007 09:39'!selectRow: anObject value: aBoolean	aBoolean		ifTrue: [ self selectRow: anObject ]		ifFalse: [ self deselectRow: anObject ]! !!MASelectionColumn methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!selection	selection isNil		ifTrue: [ self selection: self defaultSelection ].	^ selection! !!MASelectionColumn methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!selection: anObject	selection := anObject! !!MASelectionColumn methodsFor: 'accessing-settings' stamp: 'lr 8/14/2008 12:04'!stringDeselected	^ self propertyAt: #stringDeselected ifAbsent: [ self defaultStringDeselected ]! !!MASelectionColumn methodsFor: 'accessing-settings' stamp: 'lr 3/25/2009 19:32'!stringDeselected: aString	self propertyAt: #stringDeselected put: aString! !!MASelectionColumn methodsFor: 'accessing-settings' stamp: 'lr 8/14/2008 12:04'!stringSelected	^ self propertyAt: #stringSelected ifAbsent: [ self defaultStringSelected ]! !!MASelectionColumn methodsFor: 'accessing-settings' stamp: 'lr 3/25/2009 19:32'!stringSelected: aString	self propertyAt: #stringSelected put: aString! !!MASelectionColumn methodsFor: 'private' stamp: 'lr 8/14/2008 12:12'!webdings: aString	^ [ :html | html span style: 'font-family: Webdings'; with: [ html html: aString ] ]! !!MAColumn class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionComment	^ MAStringDescription new		accessor: #comment;		label: 'Comment';		priority: 200;		yourself! !!MAColumn class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionTitle	^ MAStringDescription new		accessor: #title;		label: 'Title';		priority: 100;		yourself! !!MAColumn class methodsFor: 'testing' stamp: 'lr 4/6/2009 13:20'!isAbstract	^ false! !!MAColumn methodsFor: 'accessing-settings' stamp: 'lr 4/6/2009 13:13'!accessor	^ accessor! !!MAColumn methodsFor: 'accessing-settings' stamp: 'lr 4/13/2009 15:39'!accessor: anAccessor	"Set the accessor used to get the column value for a given row object."	accessor := anAccessor asAccessor! !!MAColumn methodsFor: 'deprecated' stamp: 'lr 4/13/2009 12:59'!cascade: anArray	self deprecatedApi: 'Use MAColumn>>#accessor: instead.'.	self accessor: anArray! !!MAColumn methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!column	^ self report cache collect: [ :each | self valueFor: each ]! !!MAColumn methodsFor: 'accessing-settings' stamp: 'lr 4/13/2009 12:53'!comment	^ self propertyAt: #comment ifAbsent: [ self defaultComment ]! !!MAColumn methodsFor: 'accessing-settings' stamp: 'lr 4/13/2009 14:00'!comment: aString	"A descriptive comment of this column."	self propertyAt: #comment put: aString! !!MAColumn methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultComment	^ nil! !!MAColumn methodsFor: 'accessing-defaults' stamp: 'lr 4/6/2009 20:25'!defaultFilter	^ false! !!MAColumn methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultFooter	^ nil! !!MAColumn methodsFor: 'accessing-defaults' stamp: 'lr 4/13/2009 15:57'!defaultFormatter	^ MessageSend receiver: self selector: #stringFor:! !!MAColumn methodsFor: 'accessing-defaults' stamp: 'lr 4/13/2009 13:21'!defaultLabel	^ self accessor selector asCapitalizedPhrase! !!MAColumn methodsFor: 'accessing-defaults' stamp: 'lr 4/13/2009 12:58'!defaultRenderer	^ MessageSend receiver: self selector: #renderCellContent:on:! !!MAColumn methodsFor: 'accessing-defaults' stamp: 'lr 4/13/2009 15:43'!defaultSorter	^ [ :a :b | self sort: a and: b ]! !!MAColumn methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultVisible	^ true! !!MAColumn methodsFor: 'exporting' stamp: 'lr 4/13/2009 16:00'!exportContent: anObject index: aNumber on: aStream	| string |	string := (self formatter value: anObject) collect: [ :char | 		char isSeparator			ifTrue: [ Character space ]			ifFalse: [ char ] ].	aStream nextPutAll: string! !!MAColumn methodsFor: 'exporting' stamp: 'lr 4/13/2009 13:01'!exportHeadOn: aStream	self label isNil		ifFalse: [ aStream nextPutAll: self label ]! !!MAColumn methodsFor: 'accessing-settings' stamp: 'lr 4/6/2009 19:58'!filter	^ self propertyAt: #filter ifAbsent: [ self defaultFilter ]! !!MAColumn methodsFor: 'accessing-settings' stamp: 'lr 4/13/2009 12:53'!filter: aBoolean	"Enable or disable filtering of this column."	self propertyAt: #filter put: aBoolean! !!MAColumn methodsFor: 'private' stamp: 'lr 4/6/2009 20:29'!filterBlock	^ self 		propertyAt: #filterValue		ifPresent: [ :value | [ :row | (self valueFor: row) = value ] ]! !!MAColumn methodsFor: 'accessing-settings' stamp: 'lr 3/9/2006 11:33'!footer	^ self propertyAt: #footer ifAbsent: [ self defaultFooter ]! !!MAColumn methodsFor: 'accessing-settings' stamp: 'lr 4/13/2009 14:00'!footer: aBlock	"A block that renders the footer of this column."		self propertyAt: #footer put: aBlock! !!MAColumn methodsFor: 'deprecated' stamp: 'lr 4/13/2009 14:22'!format	self deprecatedApi: 'Use MAColumn>>#renderer instead.'.	^ self renderer! !!MAColumn methodsFor: 'deprecated' stamp: 'lr 4/13/2009 14:22'!format: aBlock	self deprecatedApi: 'Use MAColumn>>#renderer: instead.'.	self renderer: aBlock! !!MAColumn methodsFor: 'accessing-settings' stamp: 'lr 4/13/2009 15:57'!formatter	^ self propertyAt: #formatter ifAbsent: [ self defaultFormatter ]! !!MAColumn methodsFor: 'accessing-settings' stamp: 'lr 4/13/2009 15:57'!formatter: aBlock	"A block that converts the row value to a string."		self propertyAt: #formatter put: aBlock! !!MAColumn methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!index	^ self report columns indexOf: self! !!MAColumn methodsFor: 'initialization' stamp: 'lr 4/6/2009 13:14'!initialize	super initialize.	self accessor: #yourself! !!MAColumn methodsFor: 'testing' stamp: 'lr 4/6/2009 20:24'!isFiltered	^ self filter! !!MAColumn methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isReversed	^ self report sortReversed! !!MAColumn methodsFor: 'testing' stamp: 'lr 4/6/2009 20:24'!isSortable	^ self report sortEnabled and: [ self sorter notNil ]! !!MAColumn methodsFor: 'testing' stamp: 'trs 9/28/2009 19:08'!isSorted	^ self report sortColumn == self! !!MAColumn methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isVisible	^ self visible! !!MAColumn methodsFor: 'accessing-settings' stamp: 'lr 4/13/2009 12:55'!label	^ self propertyAt: #label ifAbsent: [ self defaultLabel ]! !!MAColumn methodsFor: 'accessing-settings' stamp: 'lr 4/13/2009 14:00'!label: aString	"The label of this column, also used to toggle the sort order of this column."		self propertyAt: #label put: aString! !!MAColumn methodsFor: 'actions' stamp: 'lr 4/6/2009 20:14'!refresh	self properties removeKey: #uniqueValues ifAbsent: [ ]! !!MAColumn methodsFor: 'rendering' stamp: 'lr 12/22/2009 12:58'!renderCell: anObject index: anInteger on: html	html tableData		class: self tableDataClass;		with: [ self renderer valueWithEnoughArguments: (Array with: anObject with: html with: anInteger) ]! !!MAColumn methodsFor: 'rendering' stamp: 'lr 4/13/2009 15:57'!renderCellContent: anObject on: html	html render: (self formatter value: (self valueFor: anObject))! !!MAColumn methodsFor: 'rendering' stamp: 'lr 4/6/2009 20:50'!renderFilterCellOn: html	html tableHeading: [ self renderFilterContentOn: html ]! !!MAColumn methodsFor: 'rendering' stamp: 'lr 4/13/2009 15:57'!renderFilterContentOn: html	self isFiltered 		ifFalse: [ ^ self ].	html form style: 'margin: 0; border: 0; padding: 0;'; with: [		html select			beOptional;			beSubmitOnChange;			optionalLabel: '(all)';			labels: self formatter;			list: self uniqueValues;			selected: (self propertyAt: #filterValue ifAbsent: [ nil ]);			callback: [ :value |				value isNil					ifTrue: [ self properties removeKey: #filterValue ifAbsent: [ ] ]					ifFalse: [ self propertyAt: #filterValue put: value ].				self report refresh ] ]! !!MAColumn methodsFor: 'rendering' stamp: 'lr 3/10/2007 09:53'!renderFootCellOn: html	html tableData: [ self renderFootContentOn: html ]! !!MAColumn methodsFor: 'rendering' stamp: 'lr 4/13/2009 15:49'!renderFootContentOn: html	html render: self footer! !!MAColumn methodsFor: 'rendering' stamp: 'lr 12/22/2009 12:59'!renderHeadCellOn: html	html tableHeading		title: self comment;		class: self sorterStyle;		class: self tableHeadingClass;		with: [			self isSortable				ifFalse: [ self renderHeadContentOn: html ]				ifTrue: [					html anchor	 					callback: [ self report sort: self ];						with: [ self renderHeadContentOn: html ] ] ]! !!MAColumn methodsFor: 'rendering' stamp: 'lr 4/13/2009 13:01'!renderHeadContentOn: html	html render: self label! !!MAColumn methodsFor: 'accessing-settings' stamp: 'lr 4/13/2009 13:59'!renderer	^ self propertyAt: #renderer ifAbsent: [ self defaultRenderer ]! !!MAColumn methodsFor: 'accessing-settings' stamp: 'lr 4/13/2009 13:59'!renderer: aBlock	"A block that renders the row value to HTML."	self propertyAt: #renderer put: aBlock! !!MAColumn methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!report	^ report! !!MAColumn methodsFor: 'deprecated' stamp: 'lr 4/13/2009 12:59'!selector: aSymbol	self deprecatedApi: 'Use MAColumn>>#accessor: instead.'.	self accessor: aSymbol! !!MAColumn methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:33'!setReport: aReport	report := aReport! !!MAColumn methodsFor: 'private' stamp: 'lr 4/13/2009 16:04'!sort: aFirstObject and: aSecondObject	| one two |	one := self valueFor: aFirstObject.	two := self valueFor: aSecondObject.	(one respondsTo: #<=) ifFalse: [		one := self formatter value: one.		two := self formatter value: two ].	^ one <= two! !!MAColumn methodsFor: 'private' stamp: 'nl 7/6/2006 08:43'!sortRows: aCollection	| result |	result := SortedCollection new: aCollection size.	result		sortBlock: self sorter;		addAll: aCollection.	^ self isReversed		ifFalse: [ result ]		ifTrue: [ result reversed ]! !!MAColumn methodsFor: 'accessing-settings' stamp: 'lr 3/9/2006 11:33'!sorter	^ self propertyAt: #sorter ifAbsent: [ self defaultSorter ]! !!MAColumn methodsFor: 'accessing-settings' stamp: 'lr 4/13/2009 12:54'!sorter: aBlock	"A sort block for this column."	self propertyAt: #sorter put: aBlock! !!MAColumn methodsFor: 'accessing' stamp: 'trs 9/28/2009 19:08'!sorterStyle	^ self isSorted		ifTrue: [			self isReversed				ifTrue: [ self report sorterStyles second ]				ifFalse: [ self report sorterStyles first ] ]		ifFalse: [ String new ]! !!MAColumn methodsFor: 'private' stamp: 'lr 4/13/2009 14:06'!stringFor: anObject	"Answer a string representation of the row value."		^ anObject displayString! !!MAColumn methodsFor: 'accessing' stamp: 'lr 12/22/2009 13:00'!tableDataClass	^ nil! !!MAColumn methodsFor: 'accessing' stamp: 'lr 12/22/2009 13:00'!tableHeadingClass	^ nil! !!MAColumn methodsFor: 'deprecated' stamp: 'lr 4/13/2009 12:59'!title	self deprecatedApi: 'Use MAColumn>>#label instead.'.	^ self label! !!MAColumn methodsFor: 'deprecated' stamp: 'lr 4/13/2009 13:00'!title: aString	self deprecatedApi: 'Use MAColumn>>#label: instead.'.	self label: aString! !!MAColumn methodsFor: 'private' stamp: 'lr 4/13/2009 16:29'!uniqueValues	"Answer the unique rows with the unique values, used for filtering."	^ self propertyAt: #uniqueValues ifAbsentPut: [		| uniqueValues |		uniqueValues := Dictionary new.		self report rows			do: [ :row | uniqueValues at: (self valueFor: row) put: row ].		uniqueValues := uniqueValues values asArray.		self sorter isNil			ifFalse: [ uniqueValues sort: self sorter ].		uniqueValues			collect: [ :row | self valueFor: row ] ]! !!MAColumn methodsFor: 'actions' stamp: 'lr 4/13/2009 14:23'!valueFor: aRow	"Answer the column value for aRow."	^ accessor read: aRow! !!MAColumn methodsFor: 'accessing-settings' stamp: 'lr 3/9/2006 11:33'!visible	^ self propertyAt: #visible ifAbsent: [ self defaultVisible ]! !!MAColumn methodsFor: 'accessing-settings' stamp: 'lr 4/13/2009 12:55'!visible: aBoolean	"Make this column visible or invisible."		self propertyAt: #visible put: aBoolean! !!MADescribedColumn methodsFor: 'accessing' stamp: 'lr 12/22/2009 13:01'!classFor: aDescription	| classes |	classes := OrderedCollection withAll: aDescription currentCssClasses.	^ classes reduce: [ :a :b | a , ' ' , b ]! !!MADescribedColumn methodsFor: 'accessing-defaults' stamp: 'lr 4/13/2009 15:33'!defaultComment	^ self description comment! !!MADescribedColumn methodsFor: 'accessing-defaults' stamp: 'lr 4/13/2009 13:21'!defaultLabel	^ self description label! !!MADescribedColumn methodsFor: 'accessing-defaults' stamp: 'lr 4/23/2009 22:48'!defaultSorter	^ (self description isSortable and: [ self description isRequired ])		ifTrue: [ super defaultSorter ]! !!MADescribedColumn methodsFor: 'accessing-defaults' stamp: 'lr 9/26/2007 19:23'!defaultVisible	^ self description isVisible! !!MADescribedColumn methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!description	^ description! !!MADescribedColumn methodsFor: 'accessing' stamp: 'lr 4/13/2009 15:34'!description: aDescription	description := aDescription.	accessor := aDescription accessor! !!MADescribedColumn methodsFor: 'actions' stamp: 'lr 4/13/2009 13:23'!stringFor: anObject	^ self description toString: anObject! !!MADescribedColumn methodsFor: 'accessing' stamp: 'lr 12/22/2009 13:02'!tableDataClass	^ self classFor: self description! !!MADescribedColumn methodsFor: 'accessing' stamp: 'lr 12/22/2009 13:02'!tableHeadingClass	^ self classFor: self description! !!MADescribedColumn methodsFor: 'actions' stamp: 'lr 4/13/2009 14:21'!valueFor: aRow	^ (super valueFor: aRow) ifNil: [ self description default ]! !!MADescribedComponentColumn methodsFor: 'readme' stamp: 'pmm 8/23/2006 09:46'!NOW	" very experimental ... use only if you're willing to fix bugs	  this only works for readonly views without callbacks	  on the positive side: only one component per column is created "! !!MADescribedComponentColumn methodsFor: 'accessing' stamp: 'pmm 8/23/2006 09:47'!component	component isNil ifTrue: [		component := self description componentClass new			setDescription: self description;			yourself ].	^component! !!MADescribedComponentColumn methodsFor: 'rendering' stamp: 'pmm 8/23/2006 09:55'!renderCellContent: anObject on: html	self component setMemento: (anObject mementoClass			model: anObject			description: self description asContainer).	self component renderViewerOn: html! !!MADescribedScalarColumn methodsFor: 'rendering' stamp: 'pmm 11/3/2006 18:14'!renderCellContent: anObject on: html	html render: (self description reference toString: (self valueFor: anObject))! !!MADescribedScalarColumn methodsFor: 'actions' stamp: 'pmm 11/3/2006 18:02'!valueFor: aRow	^aRow! !!MAToggleColumn methodsFor: 'rendering' stamp: 'lr 3/28/2007 10:29'!renderCellContent: anObject on: html	| value |	value := self valueFor: anObject.	html anchor		callback: [ anObject write: value not using: self description ];		with: (self description toString: value)! !!MAElementDescription methodsFor: '*magritte-seaside-accessing' stamp: 'lr 5/22/2007 22:33'!checkboxLabel	^ self propertyAt: #checkboxLabel ifAbsent: [ self label ]! !!MAElementDescription methodsFor: '*magritte-seaside-accessing' stamp: 'lr 5/22/2007 22:33'!checkboxLabel: aString	self propertyAt: #checkboxLabel put: aString! !!MAStringDescription class methodsFor: '*magritte-seaside-defaults' stamp: 'lr 3/9/2006 11:33'!defaultComponentClasses	^ Array with: MATextInputComponent! !!MADateDescription class methodsFor: '*magritte-seaside' stamp: 'pmm 10/22/2006 08:14'!defaultComponentClasses	^ Array with: MADateInputComponent with: MADateSelectorComponent! !!MAComponentRenderer class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:34'!component: aComponent on: aRenderer	^ self new component: aComponent on: aRenderer! !!MAComponentRenderer methodsFor: 'rendering' stamp: 'trs 9/28/2009 19:08'!basicRenderControl: aDescription	html render: (self childAt: aDescription)! !!MAComponentRenderer methodsFor: 'private' stamp: 'lr 10/27/2007 12:04'!childAt: aDescription	^ component childAt: aDescription! !!MAComponentRenderer methodsFor: 'private' stamp: 'lr 12/22/2009 13:00'!classFor: aDescription	| classes |	classes := OrderedCollection withAll: aDescription currentCssClasses.	(self hasError: aDescription)		ifTrue: [ classes add: 'error' ].	^ classes reduce: [ :a :b | a , ' ' , b ]! !!MAComponentRenderer methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:33'!component: aComponent on: aRenderer	self setComponent: aComponent; setRenderer: aRenderer.	self visit: aComponent description! !!MAComponentRenderer methodsFor: 'testing' stamp: 'lr 3/24/2009 08:31'!hasError: aDescription	| current |	errors ifNotNil: [ ^ errors includes: aDescription ].	errors := IdentitySet new.	current := component.	[ current notNil ] whileTrue: [		current isMagritteContainer ifTrue: [			current errors do: [ :each |				errors add: (each tag isDescription					ifTrue: [ each tag ]					ifFalse: [ current description ]) ] ].		current := current parent ].	^ self hasError: aDescription! !!MAComponentRenderer methodsFor: 'rendering' stamp: 'lr 3/9/2006 11:33'!renderContainer: aDescription	self visitAll: (aDescription select: [ :each |		each isVisible			and: [ each componentClass notNil ] ])! !!MAComponentRenderer methodsFor: 'rendering' stamp: 'trs 9/28/2009 19:08'!renderControl: aDescription	self basicRenderControl: aDescription! !!MAComponentRenderer methodsFor: 'rendering' stamp: 'lr 10/27/2007 12:03'!renderElement: aDescription	aDescription group = group		ifFalse: [ self renderGroup: aDescription ].	self renderLabel: aDescription.	self renderControl: aDescription! !!MAComponentRenderer methodsFor: 'rendering' stamp: 'lr 10/27/2007 12:09'!renderGroup: aDescription	group := aDescription group! !!MAComponentRenderer methodsFor: 'rendering' stamp: 'lr 4/20/2007 13:39'!renderLabel: aDescription	| label |	aDescription hasLabel ifFalse: [ ^ self ].	label := html label.	(self childAt: aDescription) hasLabelId		ifTrue: [ label for: (self childAt: aDescription) labelId ].	label with: [ html render: aDescription label; text: ':' ]! !!MAComponentRenderer methodsFor: 'initilization' stamp: 'lr 3/9/2006 11:33'!setComponent: aComponent	component := aComponent! !!MAComponentRenderer methodsFor: 'initilization' stamp: 'lr 3/9/2006 11:33'!setRenderer: aRenderer	html := aRenderer! !!MAComponentRenderer methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:33'!visitContainer: aDescription	self renderContainer: aDescription! !!MAComponentRenderer methodsFor: 'visiting-description' stamp: 'lr 3/9/2006 11:33'!visitElementDescription: aDescription	self renderElement: aDescription! !!MACssRenderer methodsFor: 'rendering' stamp: 'lr 4/18/2008 18:30'!renderContainer: aDescription 	html definitionList		class: (self classFor: aDescription);		with: [ super renderContainer: aDescription ]! !!MACssRenderer methodsFor: 'rendering' stamp: 'lr 4/20/2007 13:21'!renderControl: aDescription	html definitionData		class: (self classFor: aDescription);		with: [ super renderControl: aDescription ]! !!MACssRenderer methodsFor: 'rendering' stamp: 'lr 10/27/2007 12:12'!renderGroup: aDescription	super renderGroup: aDescription.	group isNil ifTrue: [ ^ self ].	html definitionTerm		class: 'group';		with: group! !!MACssRenderer methodsFor: 'rendering' stamp: 'lr 4/20/2007 13:21'!renderLabel: aDescription	html definitionTerm		title: aDescription comment;		class: (self classFor: aDescription);		with: [ super renderLabel: aDescription ]! !!MATableRenderer methodsFor: 'rendering' stamp: 'lr 1/10/2008 16:04'!renderContainer: aDescription 	html table		class: (self classFor: aDescription);		with: [super renderContainer: aDescription]! !!MATableRenderer methodsFor: 'rendering' stamp: 'lr 12/22/2009 13:03'!renderControl: aDescription	html tableData		class: (self classFor: aDescription);		with: [ self basicRenderControl: aDescription ]! !!MATableRenderer methodsFor: 'rendering' stamp: 'lr 12/22/2009 13:03'!renderElement: aDescription	aDescription group = group		ifFalse: [ self renderGroup: aDescription ].	html tableRow: [ self renderElementRow: aDescription ]! !!MATableRenderer methodsFor: 'rendering' stamp: 'trs 9/28/2009 19:08'!renderElementRow: aDescription	"Extracted this method to be better able to override behavior"	self renderLabel: aDescription.	self renderControl: aDescription! !!MATableRenderer methodsFor: 'rendering' stamp: 'lr 10/27/2007 12:15'!renderGroup: aDescription	super renderGroup: aDescription.	group isNil ifTrue: [ ^ self ].	html tableRow class: 'group'; with: [ 		html tableHeading			colSpan: 2;			with: group ]! !!MATableRenderer methodsFor: 'rendering' stamp: 'lr 4/20/2007 13:22'!renderLabel: aDescription	html tableHeading		title: aDescription comment;		class: (self classFor: aDescription);		with: [ super renderLabel: aDescription ]! !!MAToOneRelationDescription class methodsFor: '*magritte-seaside-defaults' stamp: 'lr 3/9/2006 11:33'!defaultComponentClasses	^ Array with: MAExternalEditorComponent with: MAInternalEditorComponent! !!MAColorChooser class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:34'!color: aColor	^ self new		color: aColor;		yourself! !!MAColorChooser class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MAColorChooser methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!cancel	self answer: nil! !!MAColorChooser methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!color	^ color! !!MAColorChooser methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!color: aColor	color := aColor! !!MAColorChooser methodsFor: 'accessing-dynamic' stamp: 'trs 9/3/2009 14:35'!palette	^ MACompatibility colorClass oldColorPaletteForDepth: 16 extent: 200 @ 100! !!MAColorChooser methodsFor: 'rendering' stamp: 'lr 7/14/2007 09:01'!renderContentOn: html	html map		callback: [ :point | self answer: (self palette colorAt: point) ];		with: [ html image form: self palette ]! !!MAColorChooser methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!save	self answer: self color! !!MAComponent class methodsFor: 'accessing' stamp: 'lr 8/14/2006 10:41'!description	^ MADescriptionBuilder for: self! !!MAComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ true! !!MAComponent class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:34'!new	"Create a new instance of the receiving component class and checks if it is not abstract."	self isAbstract		ifTrue: [ self error: self name , ' is abstract.' ].	^ super new! !!MAComponent class methodsFor: 'reflection' stamp: 'lr 3/9/2006 11:34'!withAllConcreteClasses	^ Array streamContents: [ :stream |		self withAllConcreteClassesDo: [ :each |			stream nextPut: each ] ]! !!MAComponent class methodsFor: 'reflection' stamp: 'lr 3/9/2006 11:34'!withAllConcreteClassesDo: aBlock	self withAllSubclassesDo: [ :each |		each isAbstract ifFalse: [			aBlock value: each ] ]! !!MAComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!ajaxId	^ self ajaxId: String new! !!MAComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!ajaxId: aSymbol	^ String streamContents: [ :stream |		stream			nextPutAll: 'ajax';			nextPutAll: self class name;			print: self hash;			nextPutAll: aSymbol ]! !!MAComponent methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isMultipart	^ self children anySatisfy: [ :each | each isMultipart ]! !!MAContainerComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MAContainerComponent methodsFor: 'decorating' stamp: 'lr 3/9/2006 11:33'!addForm	self addForm: #( save cancel )! !!MAContainerComponent methodsFor: 'decorating' stamp: 'lr 3/9/2006 11:33'!addForm: aCollection	self addDecoration: (MAFormDecoration buttons: aCollection)! !!MAContainerComponent methodsFor: 'decorating' stamp: 'lr 3/9/2006 11:33'!addSwitch	self addDecoration: MASwitchDecoration new.	self readonly: true! !!MAContainerComponent methodsFor: 'decorating' stamp: 'lr 3/9/2006 11:33'!addValidatedForm	self addForm; addValidation! !!MAContainerComponent methodsFor: 'decorating' stamp: 'lr 3/9/2006 11:33'!addValidatedForm: aCollection	self addForm: aCollection; addValidation! !!MAContainerComponent methodsFor: 'decorating' stamp: 'lr 3/9/2006 11:33'!addValidatedSwitch	self addSwitch; addValidation! !!MAContainerComponent methodsFor: 'decorating' stamp: 'lr 3/9/2006 11:33'!addValidation	self addDecoration: MAValidationDecoration new! !!MAContainerComponent methodsFor: 'private' stamp: 'lr 3/9/2006 11:33'!buildChildren	^ self description		inject: Dictionary new		into: [ :result :each |			each isVisible ifTrue: [				result at: each put: (each componentClass					memento: self memento description: each parent: self) ].			result ]! !!MAContainerComponent methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!cancel	self reset; answer: nil! !!MAContainerComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!childAt: aDescription	^ children at: aDescription ifAbsent: [ nil ]! !!MAContainerComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!children	^ children values! !!MAContainerComponent methodsFor: 'actions' stamp: 'lr 3/23/2009 13:49'!commit	self withContainersDo: [ :each | each memento commit ]! !!MAContainerComponent methodsFor: 'private' stamp: 'lr 11/6/2009 15:36'!doValidateTo: aCollectionOfErrors	self 		onValidationError: [ self memento validate ] 		addTo: aCollectionOfErrors.	self children do: [ :each | 		self 			onValidationError: [ each doValidateTo: aCollectionOfErrors ]			addTo: aCollectionOfErrors ]! !!MAContainerComponent methodsFor: 'actions' stamp: 'lr 3/23/2009 13:49'!edit	self readonly: false! !!MAContainerComponent methodsFor: 'accessing' stamp: 'lr 9/12/2007 17:26'!errors	"Answer a collection of exceptions, the list of standing errors."	^ errors! !!MAContainerComponent methodsFor: 'initialization' stamp: 'lr 4/20/2007 13:07'!initialize	super initialize.	errors := OrderedCollection new! !!MAContainerComponent methodsFor: 'testing' stamp: 'lr 3/23/2009 18:56'!isMagritteContainer	^ true! !!MAContainerComponent methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isReadonly	^ super isReadonly or: [ self readonly ]! !!MAContainerComponent methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:33'!readonly	^ readonly ifNil: [ readonly := false ]! !!MAContainerComponent methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:33'!readonly: aBoolean	readonly := aBoolean! !!MAContainerComponent methodsFor: 'rendering' stamp: 'lr 4/20/2007 13:07'!renderContentOn: html	self description componentRenderer		component: self on: html! !!MAContainerComponent methodsFor: 'actions' stamp: 'lr 3/23/2009 13:48'!reset	self withContainersDo: [ :each | each memento reset ]! !!MAContainerComponent methodsFor: 'actions' stamp: 'lr 4/20/2007 13:13'!save	self validate ifFalse: [ ^ self ].	self commit; answer: self model! !!MAContainerComponent methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:33'!setChildren: aDictionary	children := aDictionary! !!MAContainerComponent methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:33'!setDescription: aDescription	super setDescription: aDescription.	self setChildren: self buildChildren! !!MAContainerComponent methodsFor: 'actions' stamp: 'lr 11/6/2009 15:20'!validate	errors := OrderedCollection new.	self withContainersDo: [ :each | each doValidateTo: errors ].	^ errors isEmpty! !!MAContainerComponent methodsFor: 'private' stamp: 'lr 3/23/2009 18:53'!withContainersDo: aBlock	"This does a depth first search through all children and evaluates a block for all container components that have their own memento."		self withContainersDo: aBlock in: self! !!MAContainerComponent methodsFor: 'private' stamp: 'lr 3/23/2009 18:57'!withContainersDo: aBlock in: aComponent	"This does a depth first search through all children and evaluates a block for all container components that have their own memento."		aComponent childrenDo: [ :each |		self withContainersDo: aBlock in: each ].	aComponent isMagritteContainer		ifTrue: [ aBlock value: aComponent ]! !!MADescriptionComponent class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:34'!memento: aMemento	^ self memento: aMemento description: aMemento description! !!MADescriptionComponent class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:34'!memento: aMemento description: aDescription	^ self memento: aMemento description: aDescription parent: nil! !!MADescriptionComponent class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:34'!memento: aMemento description: aDescription parent: aComponent	^ self new		setMemento: aMemento;		setDescription: aDescription;		setParent: aComponent;		yourself! !!MADescriptionComponent methodsFor: 'accessing' stamp: 'lr 1/10/2008 16:23'!attributes	self deprecatedApi: '#attributes is not supported anymore.'.	^ WAHtmlAttributes new! !!MADescriptionComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!description	^ description! !!MADescriptionComponent methodsFor: 'private' stamp: 'lr 11/6/2009 15:19'!doValidateTo: aCollectionOfErrors	"Enables components to raise errors when the model is validated."! !!MADescriptionComponent methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:33'!id	^ self class name asLowercase , self hash asString! !!MADescriptionComponent methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isReadonly	^ self description isReadonly		or: [ self isRoot not		and: [ self parent isReadonly ] ]! !!MADescriptionComponent methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isRoot	^ self parent isNil! !!MADescriptionComponent methodsFor: 'accessing' stamp: 'lr 9/12/2007 17:26'!labelId	"Accessor that returns the an id that can be reference by a <label>-tag."	^ self ajaxId: 'label'! !!MADescriptionComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!memento	^ memento! !!MADescriptionComponent methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:33'!model	^ self memento model! !!MADescriptionComponent methodsFor: 'private' stamp: 'lr 11/6/2009 15:36'!onValidationError: aBlock addTo: aCollection	^ [ aBlock		on: MAMultipleErrors do: [ :err | aCollection addAll: err collection ] ]		on: MAValidationError do: [ :err | aCollection add: err ]! !!MADescriptionComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!parent	^ parent! !!MADescriptionComponent methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:33'!root	^ self isRoot		ifTrue: [ self ]		ifFalse: [ self parent root ]! !!MADescriptionComponent methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:33'!setDescription: aDescription	description := aDescription! !!MADescriptionComponent methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:33'!setMemento: aMemento	memento := aMemento! !!MADescriptionComponent methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:33'!setParent: aComponent	parent := aComponent! !!MACheckboxComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MACheckboxComponent methodsFor: 'testing' stamp: 'lr 4/20/2007 13:37'!hasLabelId	^ true! !!MACheckboxComponent methodsFor: 'rendering' stamp: 'lr 9/21/2008 10:42'!renderEditorOn: html	html label: [		html checkbox			id: self labelId;			disabled: self isReadonly;			on: #value of: self.		html space; render: self description checkboxLabel ]! !!MAColorComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MAColorComponent methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!choose	self chooser: (MAColorChooser color: self value)! !!MAColorComponent methodsFor: 'accessing' stamp: 'lr 9/3/2009 17:11'!form	| form |	form := Form extent: self width @ self height depth: 32.	form getCanvas		drawPolygon: (Array with: 0 @ self height with: 0 @ 0 with: self width @ 0)			color: MACompatibility colorClass white borderWidth: 0 borderColor: MACompatibility colorClass white;		drawPolygon: (Array with: 0 @ self height with: self width @ self height with: self width @ 0)			color: MACompatibility colorClass black borderWidth: 0 borderColor: MACompatibility colorClass white;		fillRectangle: (0 @ 0 extent: self width @ self height)			color: self value.	^ form! !!MAColorComponent methodsFor: 'testing' stamp: 'lr 4/20/2007 13:37'!hasLabelId	^ true! !!MAColorComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!height	^ 15! !!MAColorComponent methodsFor: 'rendering' stamp: 'lr 1/10/2008 16:01'!renderEditorOn: html	html imageButton		id: self labelId;		callback: [ self choose ];		attributeAt: 'width' put: self width;		attributeAt: 'height' put: self height;		attributeAt: 'src' put: (html context urlForDocument: self form)! !!MAColorComponent methodsFor: 'rendering' stamp: 'pmm 12/15/2006 17:00'!renderViewerOn: html	html image		id: self labelId;		form: self form! !!MAColorComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!value	^ super value ifNil: [ self description kind transparent ]! !!MAColorComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!width	^ 30! !!MAElementComponent methodsFor: 'calling' stamp: 'lr 3/9/2006 11:33'!chooser: aComponent	self chooser: aComponent titled: 'Edit ' , self description label! !!MAElementComponent methodsFor: 'calling' stamp: 'lr 3/9/2006 11:33'!chooser: aComponent titled: aString	| result |	result := self root call: (aComponent		addMessage: aString;		yourself).	result isNil		ifFalse: [ self value: result ]! !!MAElementComponent methodsFor: 'testing' stamp: 'lr 9/12/2007 17:27'!hasLabelId	"Return whether somewhere an element is rendered with the id ==labelId== that can be reference by a <label>-tag."	^ false! !!MAElementComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!reference	^ self description reference! !!MAElementComponent methodsFor: 'rendering' stamp: 'lr 3/9/2006 11:33'!renderContentOn: html	self isReadonly		ifTrue: [ self renderViewerOn: html ]		ifFalse: [ self renderEditorOn: html ]! !!MAElementComponent methodsFor: 'rendering' stamp: 'lr 3/9/2006 11:33'!renderEditorOn: html	self renderViewerOn: html! !!MAElementComponent methodsFor: 'rendering' stamp: 'lr 3/9/2006 11:33'!renderViewerOn: html	html render: self string! !!MAElementComponent methodsFor: 'accessing-model' stamp: 'lr 3/27/2006 11:42'!string	^ self value isString		ifTrue: [ self value ]		ifFalse: [ self description toString: self value ]! !!MAElementComponent methodsFor: 'accessing-model' stamp: 'lr 3/9/2006 11:33'!string: aString	| value |	value := [ self description fromString: aString ]		ifError: [ aString ].	self value: value! !!MAElementComponent methodsFor: 'accessing-model' stamp: 'lr 3/9/2006 11:33'!value	^ self memento readUsing: self description! !!MAElementComponent methodsFor: 'accessing-model' stamp: 'lr 3/9/2006 11:33'!value: anObject	self memento write: anObject using: self description! !!MAFileUploadComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MAFileUploadComponent methodsFor: 'testing' stamp: 'lr 1/26/2007 18:38'!hasLabelId	^ self isReadonly not and: [ self isMultipart ]! !!MAFileUploadComponent methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isMultipart	^ self value isNil or: [ self value isEmpty ]! !!MAFileUploadComponent methodsFor: 'actions' stamp: 'lr 9/30/2007 18:31'!remove	self value ifNotNil: [ self value finalize ].	self value: nil! !!MAFileUploadComponent methodsFor: 'rendering' stamp: 'lr 3/9/2006 11:33'!renderEditorOn: html	self isMultipart		ifTrue: [ self renderUploadOn: html ]		ifFalse: [ self renderRemoveOn: html ]! !!MAFileUploadComponent methodsFor: 'rendering' stamp: 'lr 3/26/2009 21:43'!renderRemoveOn: html	html render: self value.	html text: ' ('; render: self value filesize asFileSize; text: ') '.	html submitButton on: #remove of: self! !!MAFileUploadComponent methodsFor: 'rendering' stamp: 'lr 1/10/2008 16:02'!renderUploadOn: html	html fileUpload		id: self labelId;		on: #upload of: self.	html submitButton		text: 'upload'! !!MAFileUploadComponent methodsFor: 'rendering' stamp: 'lr 1/26/2007 18:50'!renderViewerOn: html	html render: self value! !!MAFileUploadComponent methodsFor: 'actions' stamp: 'lr 1/26/2007 18:38'!upload: aFile	self value: (aFile isNil ifFalse: [		self description kind new			mimetype: aFile contentType;			filename: aFile fileName;			contents: aFile contents;			yourself ])! !!MACheckboxGroupComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MACheckboxGroupComponent methodsFor: 'testing' stamp: 'lr 4/20/2007 13:37'!hasLabelId	^ self isReadonly! !!MACheckboxGroupComponent methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isDistinct	^ true! !!MACheckboxGroupComponent methodsFor: 'private' stamp: 'pmm 12/21/2006 22:41'!optionId: anInteger	^self ajaxId: 'option', anInteger displayString! !!MACheckboxGroupComponent methodsFor: 'private' stamp: 'pmm 12/21/2006 22:41'!optionsWithIndexDo: elementAndIndexBlock separatedBy: separatorBlock	| index |	index := 1.	self description allOptions		do: [ :each |			elementAndIndexBlock value: each value: index.			index := index + 1 ]		separatedBy: separatorBlock! !!MACheckboxGroupComponent methodsFor: 'rendering' stamp: 'lr 6/28/2008 11:00'!renderEditorOn: html	html hiddenInput 		callback: [ :value | self clear ].	self		optionsWithIndexDo: [ :each :index |			| optionId |			optionId := self optionId: index.			html checkbox				id: optionId;				value: (self selectedList includes: each);				onTrue: [ self add: each ] 				onFalse: [ self remove: each ].			html space.			html label				for: optionId;				with: (self labelForOption: each) ]		separatedBy: [ html break ]! !!MAListCompositonComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MAListCompositonComponent methodsFor: 'actions' stamp: 'lr 2/20/2010 12:37'!add	| added |	self availableSelected isNil		ifTrue: [ ^ self ].	added := self availableSelected.	self add: added.	self selectedSelected: added.	self description isDistinct		ifTrue: [ self availableSelected: nil ]! !!MAListCompositonComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!availableList	^ self description isDistinct		ifFalse: [ super availableList ]		ifTrue: [ super availableList copyWithoutAll: self selectedList ]! !!MAListCompositonComponent methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:33'!availableSelected	^ availableSelected! !!MAListCompositonComponent methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:33'!availableSelected: anObject	availableSelected := anObject! !!MAListCompositonComponent methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!moveDown	self selectedSelected isNil		ifFalse: [ self selectedList moveDown: self selectedSelected ]! !!MAListCompositonComponent methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!moveUp	self selectedSelected isNil		ifFalse: [ self selectedList moveUp: self selectedSelected ]! !!MAListCompositonComponent methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!remove	self selectedSelected isNil		ifTrue: [ ^ self ].	self remove: self selectedSelected.	self availableSelected: self selectedSelected.	self selectedSelected: nil! !!MAListCompositonComponent methodsFor: 'rendering-parts' stamp: 'lr 1/10/2008 16:03'!renderEditorAvailableOn: html	html select		size: 6; 		style: 'width: 150px';		list: self availableList;		selected: self availableSelected;		callback: [ :value | self availableSelected: value ];		labels: [ :value | self labelForOption: value ]! !!MAListCompositonComponent methodsFor: 'rendering-buttons' stamp: 'lr 3/9/2006 11:33'!renderEditorButtonAddOn: html	html submitButton		callback: [ self add ];		text: '>>'.	html break.	html submitButton		callback: [ self remove ];		text: '<<'! !!MAListCompositonComponent methodsFor: 'rendering-buttons' stamp: 'lr 3/9/2006 11:33'!renderEditorButtonOrderOn: html	html submitButton		callback: [ self moveUp ];		text: 'up'.	html break.	html submitButton		callback: [ self moveDown ];		text: 'down'! !!MAListCompositonComponent methodsFor: 'rendering' stamp: 'lr 4/10/2008 14:04'!renderEditorOn: html 	html table id: self labelId; with: [		html tableRow: [			html tableData: [ self renderEditorAvailableOn: html ].			html tableData 				style: 'vertical-align: center';				with: [ self renderEditorButtonAddOn: html ].			html tableData: [ self renderEditorSelectedOn: html ].			self isOrdered ifTrue: [				html tableData 					style: 'vertical-align: center';					with: [ self renderEditorButtonOrderOn: html ] ] ] ]! !!MAListCompositonComponent methodsFor: 'rendering-parts' stamp: 'lr 1/10/2008 16:03'!renderEditorSelectedOn: html	html select		size: 6; 		style: 'width: 150px';		list: self selectedList;		selected: self selectedSelected;		callback: [ :value | self selectedSelected: value ];		labels: [ :value | self labelForOption: value ]! !!MAListCompositonComponent methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:33'!selectedSelected	^ selectedSelected! !!MAListCompositonComponent methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:33'!selectedSelected: anObject	selectedSelected := anObject! !!MAMultipleSelectionComponent methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!add: anObject	(self isDistinct and: [ self value includes: anObject ])		ifFalse: [ self value: (self value copyWith: anObject) ]! !!MAMultipleSelectionComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!availableList	^ self description allOptions! !!MAMultipleSelectionComponent methodsFor: 'actions' stamp: 'lr 6/28/2008 10:59'!clear	self value: self value copyEmpty! !!MAMultipleSelectionComponent methodsFor: 'testing' stamp: 'lr 4/20/2007 13:37'!hasLabelId	^ true! !!MAMultipleSelectionComponent methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isDistinct	^ self description isDistinct! !!MAMultipleSelectionComponent methodsFor: 'testing' stamp: 'lr 2/16/2007 08:49'!isOrdered	^ self description isOrdered		and: [ (self value respondsTo: #moveUp:)		and: [ self value respondsTo: #moveDown: ] ]! !!MAMultipleSelectionComponent methodsFor: 'actions' stamp: 'trs 9/28/2009 19:08'!remove: anObject	self value: (self isDistinct		ifTrue: [ self value copyWithout: anObject ]		ifFalse: [ self value copyWithoutFirstOccurrenceOf: anObject ])! !!MAMultipleSelectionComponent methodsFor: 'rendering' stamp: 'lr 4/12/2007 19:33'!renderViewerOn: html	html unorderedList		id: self labelId;		list: self selectedList;		labels: [ :each | self labelForOption: each ]! !!MAMultipleSelectionComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!selectedList	^ self value! !!MAMultipleSelectionComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!value	^ super value ifNil: [ self value: Array new. super value ]! !!MAMultiselectListComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MAMultiselectListComponent methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isDistinct	^ true! !!MAMultiselectListComponent methodsFor: 'rendering' stamp: 'lr 1/10/2008 16:02'!renderEditorOn: html	html multiSelect		size: 8;		id: self labelId;		list: self availableList;		selected: self selectedList;		labels: [ :value | self labelForOption: value ];		callback: [ :value | self value: value ]! !!MAOptionComponent methodsFor: 'private' stamp: 'lr 4/12/2007 19:33'!labelForOption: anObject	^ self description labelForOption: anObject! !!MARadioGroupComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MARadioGroupComponent methodsFor: 'testing' stamp: 'lr 4/20/2007 13:37'!hasLabelId	^ self isReadonly not! !!MARadioGroupComponent methodsFor: 'private' stamp: 'pmm 12/21/2006 22:31'!optionId: anInteger	^self ajaxId: 'option', anInteger displayString! !!MARadioGroupComponent methodsFor: 'private' stamp: 'pmm 12/21/2006 22:37'!optionsWithIndexDo: elementAndIndexBlock separatedBy: separatorBlock	| index |	index := 1.	self options		do: [ :each |			elementAndIndexBlock value: each value: index.			index := index + 1 ]		separatedBy: separatorBlock! !!MARadioGroupComponent methodsFor: 'rendering' stamp: 'pmm 1/8/2007 11:12'!renderEditorOn: html	| group |	group := html radioGroup.	html span		id: self labelId;		with: [			self				optionsWithIndexDo: [ :each :index |					self						renderOption: each						index: index						in: group						on: html ]				separatedBy: [ html break ] ]! !!MARadioGroupComponent methodsFor: 'rendering' stamp: 'lr 1/10/2008 16:02'!renderOption: anObject index: anInteger in: aRadioGroup on: html	| optionId |	optionId := self optionId: anInteger.	html radioButton		id: optionId;		group: aRadioGroup;		selected: self value = anObject;		callback: [ self value: anObject ].	html space.	html label		for: optionId;		with: (self labelForOption: anObject)! !!MASelectListComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MASelectListComponent methodsFor: 'accessing-model' stamp: 'lr 9/21/2008 10:40'!groups	"The options objects are assumed to understand the 'groupBy' selector supplied by the description object. Keep the global ordering intact."	| groups group |	groups := OrderedCollection new.	self options do: [ :option | 		option isNil ifFalse: [			group := self description groupBy read: option.			(groups				detect: [ :each | each key = group ]				ifNone: [ groups addLast: group -> OrderedCollection new ])					value addLast: option ] ].	^ groups! !!MASelectListComponent methodsFor: 'testing' stamp: 'lr 4/20/2007 13:37'!hasLabelId	^ self isReadonly not! !!MASelectListComponent methodsFor: 'rendering-grouped' stamp: 'lr 8/14/2008 11:58'!renderEditorForGroupedOn: html 	html select 		id: self labelId;		selected: self value;		callback: [ :value | self value: value ];		with: [ self renderGroupsOn: html ]! !!MASelectListComponent methodsFor: 'rendering' stamp: 'mb 4/10/2008 00:39'!renderEditorForUngroupedOn: html	html select		id: self labelId;		list: self options;		selected: self value;		callback: [ :value | self value: value ];		labels: [ :value | self labelForOption: value ]! !!MASelectListComponent methodsFor: 'rendering' stamp: 'lr 4/29/2008 17:05'!renderEditorOn: html	self description isGrouped		ifTrue: [ self renderEditorForGroupedOn: html ]		ifFalse: [ self renderEditorForUngroupedOn: html ]! !!MASelectListComponent methodsFor: 'rendering-grouped' stamp: 'lr 7/10/2009 16:00'!renderGroupsOn: html	^ self groups do: [ :association |		html optionGroup			label: association key;			with: [ 				association value					do: [ :option | self renderOption: option on: html ] ] ]! !!MASelectListComponent methodsFor: 'rendering-grouped' stamp: 'lr 7/10/2009 16:01'!renderOption: option on: html	^ html option		selected: self value = option;		callback: [ self value: option ];		with: (self labelForOption: option)! !!MASingleSelectionComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!options	^ self description allOptionsWith: self value! !!MASingleSelectionComponent methodsFor: 'rendering' stamp: 'lr 4/29/2008 17:04'!renderViewerOn: html	html render: (self labelForOption: self value)! !!MARangeComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MARangeComponent methodsFor: 'testing' stamp: 'lr 4/20/2007 13:37'!hasLabelId	^ self isReadonly not! !!MARangeComponent methodsFor: 'accessing' stamp: 'lr 4/20/2007 13:38'!labelId	^ self id! !!MARangeComponent methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:33'!max	^ self description max ifNil: [ 100 ]! !!MARangeComponent methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:33'!min	^ self description min ifNil: [ -100 ]! !!MARangeComponent methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:33'!range	^ self max - self min! !!MARangeComponent methodsFor: 'rendering' stamp: 'lr 1/10/2008 16:02'!renderEditorOn: html	html rangeInput		id: self id;		onInput: self updateScript;		min: 0; "default"		max: 100; "default"		on: #string of: self.	html span id: self id , 'v'.	html script: self updateScript! !!MARangeComponent methodsFor: 'private' stamp: 'lr 3/9/2006 11:33'!updateScript	^ String streamContents: [ :stream |		stream			nextPutAll: 'document.getElementById('; print: self id , 'v';			nextPutAll: ').innerHTML = document.getElementById('; print: self id;			nextPutAll: ').value * ('; print: self range;			nextPutAll: ') / 100 + ('; print: self min;			nextPutAll: ');' ]! !!MARangeComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!value	^ ((super value ifNil: [ 0 ]) - self min) * 100 / self range! !!MARangeComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!value: aNumber	super value: (aNumber ifNotNil: [ aNumber * self range / 100 + self min ])! !!MAOneToManyComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MAOneToManyComponent methodsFor: 'actions' stamp: 'lr 12/22/2009 13:02'!add	| result |	result := self selected new.	result := self root call: (self validatedFormOn: result).	result isNil ifFalse: [		self			value: (self value copyWith: result);			refresh ]! !!MAOneToManyComponent methodsFor: 'private' stamp: 'lr 3/18/2008 23:03'!buildCommands	commands := MACommandColumn new setReport: self report.	self description isDefinitive ifFalse: [		commands			addCommandOn: self selector: #edit: text: 'edit';			addCommandOn: self selector: #remove: text: 'remove' ].	self description isOrdered ifTrue: [		commands			addCommandOn: self selector: #up: text: 'up';			addCommandOn: self selector: #down: text: 'down' ].	^ commands! !!MAOneToManyComponent methodsFor: 'private' stamp: 'lr 3/18/2008 23:01'!buildReport	^ (MAReport rows: self value description: self reference)		sortEnabled: self description isOrdered not;		yourself! !!MAOneToManyComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!children	^ Array with: self report! !!MAOneToManyComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!commands	^ commands ifNil: [ commands := self buildCommands ]! !!MAOneToManyComponent methodsFor: 'actions' stamp: 'dc 4/15/2006 15:08'!down: anElement	self value moveDown: anElement! !!MAOneToManyComponent methodsFor: 'actions' stamp: 'jmck 2/7/2010 01:15'!edit: anObject	self root call: (self validatedFormOn: anObject forOperation: 'Edit').	self refresh! !!MAOneToManyComponent methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!refresh	self report rows: self value! !!MAOneToManyComponent methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!remove: anObject	self value: (self value copyWithout: anObject).	self refresh! !!MAOneToManyComponent methodsFor: 'rendering' stamp: 'lr 3/18/2008 22:55'!renderEditorOn: html	self renderViewerOn: html.	self description isDefinitive		ifFalse: [ self renderSelectListOn: html ]! !!MAOneToManyComponent methodsFor: 'rendering-buttons' stamp: 'lr 3/9/2006 11:33'!renderSelectButtonOn: html	html submitButton on: #add of: self! !!MAOneToManyComponent methodsFor: 'rendering' stamp: 'lr 3/9/2006 11:33'!renderViewerOn: html	| columns |	columns := self report columns		copyWithout: self commands.	self report columns: (self isReadonly		ifFalse: [ columns copyWith: self commands ]		ifTrue: [ columns ]).	html render: self report! !!MAOneToManyComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!report	^ report ifNil: [ report := self buildReport ]! !!MAOneToManyComponent methodsFor: 'actions' stamp: 'dc 4/15/2006 15:08'!up: anElement	self value moveUp: anElement! !!MAOneToManyComponent methodsFor: 'private' stamp: 'jmck 2/7/2010 01:18'!validatedFormOn: result	"Extracted to better able to override behavior"	"Use vectored version for even better override behavior"	^ self validatedFormOn: result forOperation: 'Add'! !!MAOneToManyComponent methodsFor: 'private' stamp: 'jmck 2/7/2010 01:14'!validatedFormOn: result forOperation: aString	"Extracted to better able to override behavior"	^ result asComponent		addMessage: aString, ' ', self selected label;		addValidatedForm;		yourself! !!MAOneToManyScalarComponent methodsFor: 'actions' stamp: 'lr 8/14/2008 12:24'!add	| holder holderDescription |	holder := MAValueHolder new.	holderDescription := self reference copy		accessor: (MASelectorAccessor selector: #contents);		yourself.	holder := self root call: ((holderDescription asContainer asComponentOn: holder)		addMessage: 'Add ' , self selected label;		addValidatedForm;		yourself).	holder isNil		ifFalse: [ self value: (self value copyWith: holder contents); refresh ]! !!MAOneToManyScalarComponent methodsFor: 'private' stamp: 'lr 2/12/2007 19:06'!buildCommands	commands := MAIndexedCommandColumn new				setReport: self report.	self description isDefinitive		ifFalse: [ commands					addCommandOn: self selector: #edit:index: text: 'Edit';					addCommandOn: self selector: #remove:index: text: 'Remove'].	"not yet implemented	self description isOrdered		ifTrue: [ commands					addCommandOn: self selector: #up:index:;					addCommandOn: self selector: #down:index: ]. "	^ commands! !!MAOneToManyScalarComponent methodsFor: 'private' stamp: 'pmm 11/3/2006 18:07'!buildReport	^ MAReport rows: self value description: self description! !!MAOneToManyScalarComponent methodsFor: 'actions' stamp: 'lr 8/14/2008 12:24'!edit: anObject index: anInteger 	"sorry, but a collection might include duplicates like #(1 2 1) and you only want to edit the one with the correct index"	| holder holderDescription |	holder := MAValueHolder on: anObject.	holderDescription := self reference copy		accessor: (MASelectorAccessor selector: #contents);		yourself.	holder := self root call: ((holderDescription asContainer asComponentOn: holder)			addMessage: 'Edit ' , self selected label;			addValidatedForm;			yourself).	holder isNil ifTrue: [ ^ self ].	self value: (self value isSequenceable 			ifTrue: 				[ self copy value					at: anInteger						put: holder contents;					yourself ]			ifFalse: 				[ self value copy					remove: anObject;					add: holder contents;					yourself ]).	self refresh! !!MAOneToManyScalarComponent methodsFor: 'actions' stamp: 'pmm 11/3/2006 20:51'!remove: anObject index: anInteger	"sorry, but a collection might include duplicates like #(1 2 1) and you only want to remove the one with the correct index"	self value: (self value isSequenceable		ifTrue: [ self value copyWithoutIndex: anInteger ]		ifFalse: [ self value copyWithout: anObject ]).	self refresh! !!MAExternalEditorComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MAExternalEditorComponent methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!create	self chooser: (self editorFor: self selected new)! !!MAExternalEditorComponent methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!edit	self chooser: (self editorFor: self value)! !!MAExternalEditorComponent methodsFor: 'rendering' stamp: 'lr 3/9/2006 11:33'!renderButtonsOn: html	html submitButton on: #remove of: self.	html submitButton on: #edit of: self! !!MAExternalEditorComponent methodsFor: 'rendering' stamp: 'lr 4/29/2008 17:21'!renderViewerOn: html	html render: (self reference toString: self value)! !!MAInternalEditorComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MAInternalEditorComponent methodsFor: 'private' stamp: 'lr 5/17/2009 22:58'!buildComponent	^ self value isNil ifFalse: [ 		(self description reference asComponentOn: self value)			setParent: self;			yourself ]! !!MAInternalEditorComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!children	^ Array with: self component! !!MAInternalEditorComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!component	^ component ifNil: [ component := self buildComponent ]! !!MAInternalEditorComponent methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!create	self value: self selected new.	component := nil! !!MAInternalEditorComponent methodsFor: 'rendering' stamp: 'lr 3/9/2006 11:33'!renderViewerOn: html	html render: (self component		readonly: self isReadonly;		yourself)! !!MAOneToOneComponent methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!create	self subclassResponsibility! !!MAOneToOneComponent methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!remove	self value: nil! !!MAOneToOneComponent methodsFor: 'rendering' stamp: 'lr 3/9/2006 11:33'!renderButtonsOn: html! !!MAOneToOneComponent methodsFor: 'rendering' stamp: 'lr 3/9/2006 11:33'!renderEditorOn: html	self value isNil		ifTrue: [ self renderSelectListOn: html ]		ifFalse: [ self renderViewerOn: html; renderButtonsOn: html ]! !!MAOneToOneComponent methodsFor: 'rendering-tools' stamp: 'lr 3/9/2006 11:33'!renderSelectButtonOn: html	html submitButton on: #create of: self! !!MARelationComponent methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:33'!classes	^ self description classes! !!MARelationComponent methodsFor: 'private' stamp: 'lr 4/1/2009 21:02'!editorFor: anObject	^ (self description reference asComponentOn: anObject)		addValidatedForm;		yourself! !!MARelationComponent methodsFor: 'rendering-tools' stamp: 'lr 3/9/2006 11:33'!renderSelectButtonOn: html	self subclassResponsibility! !!MARelationComponent methodsFor: 'rendering-tools' stamp: 'lr 3/9/2006 11:33'!renderSelectListOn: html	self classes size > 1 ifTrue: [		html select			list: self classes;			selected: self selected;			callback: [ :value | self selected: value ];			labels: [ :value | value label ] ].	self classes notEmpty		ifTrue: [ self renderSelectButtonOn: html ]! !!MARelationComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!selected	^ selected ifNil: [ selected := self classes first ]! !!MARelationComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!selected: aClass	selected := aClass! !!MATableComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MATableComponent methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!buildComponentTable	^ self descriptionTable collect: [ :row :col :each |		each componentClass			memento: self			description: each			parent: self ]! !!MATableComponent methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!buildDataTable	^ MATableModel		rows: self description rowCount		columns: self description columnCount! !!MATableComponent methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!buildDescriptionTable	^ self dataTable collect: [ :row :col :each |		self description reference copy			accessor: MANullAccessor new;			label: row asString , '/' , col asString;			propertyAt: #row put: row;			propertyAt: #column put: col;			yourself ]! !!MATableComponent methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:34'!children	^ self componentTable contents! !!MATableComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!componentTable	^ componentTable ifNil: [ componentTable := self buildComponentTable ]! !!MATableComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!dataTable	self value isNil		ifTrue: [ self value: self buildDataTable ]		ifFalse: [			(self value rowCount = self description rowCount				and: [ self value columnCount = self description columnCount ]) ifFalse: [					self value: (self value						copyRows: self description rowCount						columns: self description columnCount) ] ].	^ self value! !!MATableComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!descriptionTable	^ descriptionTable ifNil: [ descriptionTable := self buildDescriptionTable ]! !!MATableComponent methodsFor: 'testing' stamp: 'lr 4/20/2007 13:37'!hasLabelId	^ true! !!MATableComponent methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!readUsing: aDescription	^ self dataTable		at: (aDescription propertyAt: #row)		at: (aDescription propertyAt: #column)! !!MATableComponent methodsFor: 'rendering' stamp: 'lr 4/10/2008 14:05'!renderViewerOn: html 	html table		id: self labelId;		with: 			[ html tableRow: 				[ html tableHeading: nil.				self description columnLabels do: [ :each | html tableHeading: each ] ].			self description rowLabels keysAndValuesDo: 				[ :rindex :row | 				html tableRow: 					[ html tableHeading: row.					self description columnLabels keysAndValuesDo: 						[ :cindex :col | 						html tableData: (self componentTable 								uncheckedAt: rindex								at: cindex) ] ] ] ]! !!MATableComponent methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!write: anObject using: aDescription	^ self dataTable		at: (aDescription propertyAt: #row)		at: (aDescription propertyAt: #column)		put: anObject! !!MATextAreaComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MATextAreaComponent methodsFor: 'testing' stamp: 'lr 4/20/2007 13:37'!hasLabelId	^ self isReadonly not! !!MATextAreaComponent methodsFor: 'rendering' stamp: 'lr 1/10/2008 16:02'!renderEditorOn: html	html textArea		id: self labelId;		rows: self description lineCount;		on: #string of: self! !!MATextAreaComponent methodsFor: 'rendering' stamp: 'lr 3/9/2006 11:34'!renderViewerOn: html	(self string findTokens: Character cr)		do: [ :each | html render: each ]		separatedBy: [ html break ]! !!MADateInputComponent methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!choose	| calendar |	calendar := WAMiniCalendar new.	calendar		date: ((self value notNil			and: [ self description isSatisfiedBy: self value ])				ifFalse: [ Date current ]				ifTrue: [ self value ]);		selectBlock: [ :value | calendar answer: value ];		canSelectBlock: [ :value | self description isSatisfiedBy: value ].	self chooser: calendar! !!MADateInputComponent methodsFor: 'rendering' stamp: 'lr 9/21/2008 10:06'!renderButtonOn: html	html submitButton on: #choose of: self! !!MADateInputComponent methodsFor: 'actions' stamp: 'lr 9/21/2008 10:03'!today	| calendar |	calendar := WAMiniCalendar new.	calendar		date: ((self value notNil			and: [ self description isSatisfiedBy: self value ])				ifFalse: [ Date current ]				ifTrue: [ self value ]);		selectBlock: [ :value | calendar answer: value ];		canSelectBlock: [ :value | self description isSatisfiedBy: value ].	self chooser: calendar! !!MADateSelectorComponent class methodsFor: 'testing' stamp: 'pmm 10/22/2006 07:57'!isAbstract	^false! !!MADateSelectorComponent methodsFor: 'rendering' stamp: 'lr 9/21/2008 10:06'!renderButtonOn: html! !!MADateSelectorComponent methodsFor: 'rendering' stamp: 'lr 9/21/2008 10:05'!renderInputOn: html	html dateInput		value: self value;		callback: [ :value | self value: value ]! !!MATextInputComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MATextInputComponent methodsFor: 'testing' stamp: 'lr 3/9/2007 14:44'!hasLabelId	^ self isReadonly not! !!MATextInputComponent methodsFor: 'rendering' stamp: 'lr 9/21/2008 09:59'!renderButtonOn: html! !!MATextInputComponent methodsFor: 'rendering' stamp: 'lr 9/21/2008 09:58'!renderEditorOn: html	self renderInputOn: html.	self renderButtonOn: html! !!MATextInputComponent methodsFor: 'rendering' stamp: 'lr 9/21/2008 09:59'!renderInputOn: html	html textInput		id: self labelId;		on: #string of: self! !!MATimeInputComponent methodsFor: 'actions' stamp: 'lr 9/21/2008 10:07'!now	self value: Time now! !!MATimeInputComponent methodsFor: 'rendering' stamp: 'lr 9/21/2008 10:07'!renderButtonOn: html	html submitButton on: #now of: self! !!MATimeSelectorComponent class methodsFor: 'testing' stamp: 'pmm 10/22/2006 07:48'!isAbstract	^false! !!MATimeSelectorComponent methodsFor: 'rendering' stamp: 'lr 9/21/2008 10:09'!renderInputOn: html	html timeInput		withSeconds;		value: self value;		callback: [ :value | self value: value ]! !!MATimeStampInputComponent methodsFor: 'actions' stamp: 'lr 3/9/2006 11:34'!current	self value: TimeStamp current! !!MATimeStampInputComponent methodsFor: 'rendering' stamp: 'lr 9/21/2008 10:01'!renderButtonOn: html	html submitButton on: #current of: self! !!MATextPasswordComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MATextPasswordComponent methodsFor: 'testing' stamp: 'lr 4/20/2007 13:37'!hasLabelId	^ self isReadonly not! !!MATextPasswordComponent methodsFor: 'rendering' stamp: 'lr 1/10/2008 16:02'!renderEditorOn: html	html passwordInput		id: self labelId;		on: #string of: self! !!MATextPasswordComponent methodsFor: 'accessing' stamp: 'lr 11/14/2008 09:58'!string	^ self description obfuscated: super string! !!MATextPasswordComponent methodsFor: 'accessing' stamp: 'lr 9/21/2007 13:21'!string: aString	(self description isObfuscated: aString)		ifFalse: [ super string: aString ]! !!MAVerifiedPasswordComponent methodsFor: 'private' stamp: 'lr 11/6/2009 15:40'!doValidateTo: aCollectionOfErrors	self value = verificationValue		ifTrue: [ super doValidateTo: aCollectionOfErrors ]		ifFalse: [ aCollectionOfErrors add: (MAConditionError description: self description signal: 'Your passwords do not match') ]! !!MAVerifiedPasswordComponent methodsFor: 'rendering' stamp: 'lr 11/14/2008 10:59'!renderEditorOn: html	super renderEditorOn: html.	html break.	html passwordInput		class: 'verification';		on: #verificationString of: self! !!MAVerifiedPasswordComponent methodsFor: 'initialization' stamp: 'lr 11/14/2008 11:36'!setDescription: aDescription	super setDescription: aDescription.	self verificationValue: self value! !!MAVerifiedPasswordComponent methodsFor: 'accessing' stamp: 'lr 11/14/2008 10:33'!verificationString	^ self description obfuscated: self verificationValue! !!MAVerifiedPasswordComponent methodsFor: 'accessing' stamp: 'lr 11/14/2008 11:00'!verificationString: aString	| value |	(self description isObfuscated: aString)		ifTrue: [ ^ self ].	value := [ self description fromString: aString ]		ifError: [ aString ].	self verificationValue: value! !!MAVerifiedPasswordComponent methodsFor: 'accessing' stamp: 'lr 11/14/2008 11:02'!verificationValue	^ verificationValue! !!MAVerifiedPasswordComponent methodsFor: 'accessing' stamp: 'lr 11/14/2008 10:05'!verificationValue: anObject	verificationValue := anObject! !!MAUndefinedComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MAUndefinedComponent methodsFor: 'testing' stamp: 'lr 4/20/2007 13:37'!hasLabelId	^ true! !!MAUndefinedComponent methodsFor: 'rendering' stamp: 'pmm 12/15/2006 17:17'!renderContentOn: html	html span		id: self labelId;		style: 'color: red;';		with: 'Undefined Component'! !!MAReportComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MAReportComponent methodsFor: 'testing' stamp: 'lr 4/20/2007 13:37'!hasLabelId	^ true! !!MAReportComponent methodsFor: 'rendering' stamp: 'lr 3/10/2007 09:48'!renderContentOn: html	html table id: self labelId; with: [		self renderTableCaptionOn: html.		self renderTableSummaryOn: html.		self renderTableHeadOn: html.		self renderTableFootOn: html.		self renderTableBodyOn: html ]! !!MAReportComponent methodsFor: 'rendering-parts' stamp: 'lr 8/13/2008 23:47'!renderTableBodyOn: html	(html tag: 'tbody') with: [		self description showBody ifTrue: [			(self value isNil or: [ self value isEmpty ])				ifTrue: [ self renderTableEmptyOn: html ]				ifFalse: [ self renderTableContentOn: html ] ] ]! !!MAReportComponent methodsFor: 'rendering-parts' stamp: 'lr 8/14/2008 00:22'!renderTableCaptionOn: html	self description caption isNil ifFalse: [		(html tag: 'caption')			with: self description caption ]! !!MAReportComponent methodsFor: 'rendering-content' stamp: 'lr 3/9/2006 11:34'!renderTableContentOn: html! !!MAReportComponent methodsFor: 'rendering-content' stamp: 'lr 3/9/2006 11:34'!renderTableEmptyOn: html! !!MAReportComponent methodsFor: 'rendering-parts' stamp: 'lr 3/10/2007 09:47'!renderTableFootOn: html	(html tag: 'tfoot') with: [		self description showFooter			ifTrue: [ self renderTableFooterOn: html ] ]! !!MAReportComponent methodsFor: 'rendering-content' stamp: 'lr 3/9/2006 11:34'!renderTableFooterOn: html! !!MAReportComponent methodsFor: 'rendering-parts' stamp: 'lr 3/10/2007 09:47'!renderTableHeadOn: html	(html tag: 'thead') with: [		self description showHeader			ifTrue: [ self renderTableHeaderOn: html ] ]! !!MAReportComponent methodsFor: 'rendering-content' stamp: 'lr 3/9/2006 11:34'!renderTableHeaderOn: html	html tableRow: [		self description do: [ :each |			each isVisible ifTrue: [				html tableData: each label ] ] ]! !!MAReportComponent methodsFor: 'rendering-parts' stamp: 'lr 8/14/2008 00:22'!renderTableSummaryOn: html	self description summary isNil ifFalse: [		(html tag: 'summary')			with: self description summary ]! !!MAReport class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:34'!isAbstract	^ false! !!MAReport class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:34'!rows: aCollection	^ self new		rows: aCollection;		yourself! !!MAReport class methodsFor: 'instance creation' stamp: 'lr 12/3/2006 22:06'!rows: aCollection description: aDescription	| report |	report := self rows: aCollection.	aDescription asContainer do: [ :each |		report addColumnDescription: each ].	^ report! !!MAReport methodsFor: 'columns' stamp: 'lr 3/9/2006 11:34'!addColumn: aColumn	columns := columns copyWith: aColumn.	^ aColumn setReport: self; yourself! !!MAReport methodsFor: 'columns' stamp: 'trs 9/28/2009 19:08'!addColumnCascade: anArray	^ (self addColumn: MAColumn new)		accessor: anArray;		yourself! !!MAReport methodsFor: 'columns' stamp: 'lr 4/13/2009 15:35'!addColumnDescription: aDescription	^ self addColumn: (aDescription reportColumnClass new		description: aDescription;		yourself)! !!MAReport methodsFor: 'columns' stamp: 'lr 3/9/2006 11:34'!addColumnSelector: aSelector	^ (self addColumn: MAColumn new)		selector: aSelector;		yourself! !!MAReport methodsFor: 'private-batch' stamp: 'lr 3/9/2006 11:34'!batchEndIndex	^ self batchPage * self batchSize min: self cache size! !!MAReport methodsFor: 'private-batch' stamp: 'lr 3/9/2006 11:34'!batchMaxPages	^ (self cache size / self batchSize)		ceiling! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:19'!batchPage	^ backtracked at: #batchPage ifAbsentPut: [ self defaultBatchPage ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:19'!batchPage: anInteger	backtracked at: #batchPage put: anInteger! !!MAReport methodsFor: 'private-batch' stamp: 'lr 3/9/2006 11:34'!batchPageRange	^ self batchPageRangeStart to: self batchPageRangeEnd! !!MAReport methodsFor: 'private-batch' stamp: 'lr 3/9/2006 11:34'!batchPageRangeEnd	^ self batchMaxPages min: self batchPage + 9! !!MAReport methodsFor: 'private-batch' stamp: 'lr 3/9/2006 11:34'!batchPageRangeStart	^ self defaultBatchPage max: self batchPage - 9! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:24'!batchSize	^ properties at: #batchSize ifAbsent: [ self defaultBatchSize ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:19'!batchSize: anInteger	properties at: #batchSize put: anInteger! !!MAReport methodsFor: 'private-batch' stamp: 'lr 3/9/2006 11:33'!batchStartIndex	^ (self batchPage - 1) * self batchSize + 1! !!MAReport methodsFor: 'accessing-readonly' stamp: 'lr 6/5/2008 13:40'!cache	"Return the cached rows of the receiver, these rows are filtered and sorted."	cache isNil ifTrue: [		self cache: (self			sortRows: (self				filterRows: self					rows asArray)) ].	^ cache! !!MAReport methodsFor: 'accessing-readonly' stamp: 'lr 3/9/2006 11:33'!cache: aCollection	cache := aCollection! !!MAReport methodsFor: 'accessing-readonly' stamp: 'lr 3/9/2006 11:34'!columns	^ columns! !!MAReport methodsFor: 'accessing-readonly' stamp: 'lr 3/9/2006 11:34'!columns: aCollection	columns := aCollection! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:34'!defaultBatchPage	^ 1! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:34'!defaultBatchSize	^ 10! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultRowFilter	^ nil! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:34'!defaultRowPeriod	^ 1! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:34'!defaultRowStyles	^ Array with: 'odd' with: 'even'! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:34'!defaultShowBatch	^ true! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:34'!defaultShowBatchFirstLast	^ false! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:34'!defaultShowBatchPages	^ true! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:34'!defaultShowBatchPreviousNext	^ true! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:34'!defaultShowBody	^ true! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:34'!defaultShowCaption	^ false! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 4/6/2009 20:04'!defaultShowFilter	^ false! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultShowFooter	^ false! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:34'!defaultShowHeader	^ true! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:34'!defaultShowSummary	^ false! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:34'!defaultSortColumn	^ nil! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultSortEnabled	^ true! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultSortReversed	^ false! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 11/7/2008 16:05'!defaultSorterStyles	^ Array with: 'ascending' with: 'descending'! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultTableCaption	^ nil! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultTableEmpty	^ 'The report is empty.'! !!MAReport methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:34'!defaultTableSummary	^ nil! !!MAReport methodsFor: 'exporting' stamp: 'lr 3/9/2006 11:34'!export	^ String streamContents: [ :stream |		self exportOn: stream ]! !!MAReport methodsFor: 'exporting' stamp: 'lr 6/15/2009 20:07'!exportBodyOn: aStream	self cache keysAndValuesDo: [ :index :row |		self visibleColumns			do: [ :column |				column					exportContent: (column valueFor: row)					index: index on: aStream ]			separatedBy: [ aStream tab ].		aStream nextPut: Character cr ]! !!MAReport methodsFor: 'exporting' stamp: 'lr 6/15/2009 20:07'!exportHeaderOn: aStream	self visibleColumns		do: [ :each | each exportHeadOn: aStream ]		separatedBy: [ aStream tab ].	aStream nextPut: Character cr! !!MAReport methodsFor: 'exporting' stamp: 'lr 3/9/2006 11:33'!exportOn: aStream	self showHeader		ifTrue: [ self exportHeaderOn: aStream ].	self showBody		ifTrue: [ self exportBodyOn: aStream ]! !!MAReport methodsFor: 'private' stamp: 'lr 4/6/2009 20:41'!filterRows: aCollection	| filters filter |	filters := OrderedCollection new.	self hasRowFilter		ifTrue: [ filters add: self rowFilter ].	self columns do: [ :each |		each isFiltered ifTrue: [			filter := each filterBlock.			filter isNil				ifFalse: [ filters add: filter ] ] ].	^ filters isEmpty		ifTrue: [ aCollection ]		ifFalse: [ aCollection select: [ :row | filters allSatisfy: [ :block | block value: row ] ] ]! !!MAReport methodsFor: 'testing' stamp: 'pmm 7/27/2006 19:41'!hasMoreThanOnePage	^self batchSize < self cache size! !!MAReport methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!hasRowFilter	^ self rowFilter notNil! !!MAReport methodsFor: 'initialization' stamp: 'lr 11/28/2007 19:16'!initialize	super initialize.	rows := columns := Array new.	properties := Dictionary new.	backtracked := Dictionary new! !!MAReport methodsFor: 'private-batch' stamp: 'lr 3/9/2006 11:33'!isOnFirstPage	^ self batchPage = 1! !!MAReport methodsFor: 'private-batch' stamp: 'lr 3/9/2006 11:34'!isOnLastPage	^ self batchPage = self batchMaxPages! !!MAReport methodsFor: 'testing' stamp: 'lr 3/9/2006 11:33'!isSorted	^ self sortColumn notNil! !!MAReport methodsFor: 'columns' stamp: 'lr 3/9/2006 11:33'!moveDown: aColumn	| index |	index := self columns indexOf: aColumn ifAbsent: [ ^ self ].	self columns swap: index with: (index = self size		ifFalse:[ index + 1 ]		ifTrue: [ 1 ])! !!MAReport methodsFor: 'columns' stamp: 'lr 3/9/2006 11:34'!moveUp: aColumn	| index |	index := self columns indexOf: aColumn ifAbsent: [ ^ self ].	self columns swap: index with: (index = 1		ifFalse:[ index - 1 ]		ifTrue: [ self size ])! !!MAReport methodsFor: 'actions' stamp: 'lr 3/9/2006 11:34'!nextPage	self isOnLastPage		ifFalse: [ self batchPage: self batchPage + 1 ]! !!MAReport methodsFor: 'actions' stamp: 'lr 3/9/2006 11:34'!previousPage	self isOnFirstPage		ifFalse: [ self batchPage: self batchPage - 1 ]! !!MAReport methodsFor: 'actions' stamp: 'lr 3/9/2006 11:34'!refresh	self cache: nil; batchPage: self defaultBatchPage.	self columns do: [ :each | each refresh ]! !!MAReport methodsFor: 'columns' stamp: 'lr 3/9/2006 11:33'!remove: aColumn	columns := columns copyWithout: aColumn! !!MAReport methodsFor: 'rendering-batch' stamp: 'lr 11/16/2006 18:56'!renderBatchFirstOn: html	self isOnFirstPage		ifFalse: [ html anchor callback: [ self batchPage: self defaultBatchPage ]; with: '|<' ]		ifTrue: [ html text: '|<' ].	html space! !!MAReport methodsFor: 'rendering-batch' stamp: 'pmm 9/5/2007 07:24'!renderBatchItemsOn: html	self batchPageRangeStart > self defaultBatchPage		ifTrue: [ html text: '...'; space ].	self batchPageRange do: [ :index |		self batchPage = index			ifFalse: [ html anchor callback: [ self batchPage: index ]; with: index ]			ifTrue: [ html span class: 'current'; with: index ].		html space ].	self batchPageRangeEnd < (self batchMaxPages - 1)		ifTrue: [ html text: '...'; space ].	self batchPageRangeEnd = self batchMaxPages		ifFalse: [			html anchor				callback: [ self batchPage: self batchMaxPages ];				with: self batchMaxPages ]! !!MAReport methodsFor: 'rendering-batch' stamp: 'lr 11/16/2006 18:56'!renderBatchLastOn: html	self isOnLastPage		ifFalse: [ html anchor callback: [ self batchPage: self batchMaxPages ]; with: '>|' ]		ifTrue: [ html text: '>|' ]! !!MAReport methodsFor: 'rendering-batch' stamp: 'lr 11/16/2006 18:56'!renderBatchNextOn: html	self isOnLastPage		ifFalse: [ html anchor callback: [ self nextPage ]; with: '>>' ]		ifTrue: [ html text: '>>' ].	html space! !!MAReport methodsFor: 'rendering-batch' stamp: 'lr 11/16/2006 18:56'!renderBatchPreviousOn: html	self isOnFirstPage		ifFalse: [ html anchor callback: [ self previousPage ]; with: '<<' ]		ifTrue: [ html text: '<<' ].	html space! !!MAReport methodsFor: 'rendering' stamp: 'lr 3/9/2006 11:34'!renderContentOn: html	html table		id: self ajaxId; class: 'report';		with: [ self renderTableOn: html ]! !!MAReport methodsFor: 'rendering-table' stamp: 'lr 9/26/2007 18:49'!renderTableBatchOn: html	self hasMoreThanOnePage ifTrue: [		html tableRow: [			html tableData				class: 'batch';				colSpan: self visibleColumns size;				with: [					self showBatchFirstLast						ifTrue: [ self renderBatchFirstOn: html ].					self showBatchPreviousNext						ifTrue: [ self renderBatchPreviousOn: html ].					self showBatchPages						ifTrue: [ self renderBatchItemsOn: html ].					self showBatchPreviousNext						ifTrue: [ self renderBatchNextOn: html ].					self showBatchFirstLast						ifTrue: [ self renderBatchLastOn: html ] ] ] ]! !!MAReport methodsFor: 'rendering-table' stamp: 'lr 4/10/2008 14:06'!renderTableBodyOn: html 	self visible isEmpty 		ifTrue: [ 			html tableRow				class: 'empty';				with: [ 					html tableData						colSpan: self visibleColumns size;						with: self tableEmpty ] ]		ifFalse: [			self visible keysAndValuesDo: [ :index :row | 				html tableRow					class: (self rowStyleForNumber: index);					with: [ 						self visibleColumns do: [ :col | 							col 								renderCell: row								index: index								on: html ] ] ] ]! !!MAReport methodsFor: 'rendering-table' stamp: 'lr 3/9/2006 11:34'!renderTableCaptionOn: html	(html tag: 'caption') with: self tableCaption! !!MAReport methodsFor: 'rendering-table' stamp: 'lr 4/6/2009 20:30'!renderTableFilterOn: html	html tableRow: [		self visibleColumns do: [ :each |			each renderFilterCellOn: html ] ]! !!MAReport methodsFor: 'rendering-table' stamp: 'lr 9/26/2007 18:48'!renderTableFootOn: html	html tableRow: [		self visibleColumns do: [ :each |			each renderFootCellOn: html ] ]! !!MAReport methodsFor: 'rendering-table' stamp: 'lr 9/26/2007 18:48'!renderTableHeadOn: html	html tableRow: [		self visibleColumns do: [ :each |			each renderHeadCellOn: html ] ]! !!MAReport methodsFor: 'rendering' stamp: 'lr 4/6/2009 20:03'!renderTableOn: html	self showCaption		ifTrue: [ self renderTableCaptionOn: html ].	self showSummary		ifTrue: [ self renderTableSummaryOn: html ].	html tableHead: [		self showHeader			ifTrue: [ self renderTableHeadOn: html ].		self showFilter			ifTrue: [ self renderTableFilterOn: html ] ].	((self showBatch		and: [ self hasMoreThanOnePage ])		or: [ self showFooter ]) ifTrue: [			"we must not produce an empty tfoot element, this is not valid xhtml"			html tableFoot: [				self showFooter					ifTrue: [ self renderTableFootOn: html ].				self showBatch					ifTrue: [ self renderTableBatchOn: html ] ] ].	html tableBody: [		self showBody			ifTrue: [ self renderTableBodyOn: html ] ]! !!MAReport methodsFor: 'rendering-table' stamp: 'lr 3/9/2006 11:34'!renderTableSummaryOn: html	(html tag: 'summary') with: self tableSummary! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:25'!rowFilter	^ backtracked at: #rowFilter ifAbsent: [ self defaultRowFilter ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:19'!rowFilter: aBlock	backtracked at: #rowFilter put: aBlock.	self refresh! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:25'!rowPeriod	^ properties at: #rowPeriod ifAbsent: [ self defaultRowPeriod ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:24'!rowPeriod: aNumber	properties at: #rowPeriod put: aNumber! !!MAReport methodsFor: 'private' stamp: 'lr 3/9/2006 11:33'!rowStyleForNumber: aNumber	^ self rowStyles		at: ((aNumber - 1 // self rowPeriod) \\ self rowStyles size) + 1		ifAbsent: [ String new ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:25'!rowStyles	^ properties at: #rowStyles ifAbsent: [ self defaultRowStyles ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:23'!rowStyles: aCollection	properties at: #rowStyles put: aCollection! !!MAReport methodsFor: 'accessing' stamp: 'lr 11/28/2007 19:16'!rows	"Return the rows of the receiver."	^ rows! !!MAReport methodsFor: 'accessing' stamp: 'lr 8/14/2008 11:55'!rows: aCollection	"Set the rows of the receiver."		rows := aCollection.	self refresh! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:25'!showBatch	^ properties at: #showBatch ifAbsent: [ self defaultShowBatch ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:23'!showBatch: aBoolean	properties at: #showBatch put: aBoolean! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:25'!showBatchFirstLast	^ properties at: #showBatchFirstLast ifAbsent: [ self defaultShowBatchFirstLast ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:23'!showBatchFirstLast: aBoolean	properties at: #showBatchFirstLast put: aBoolean! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:25'!showBatchPages	^ properties at: #showBatchPages ifAbsent: [ self defaultShowBatchPages ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:23'!showBatchPages: aBoolean	properties at: #showBatchPages put: aBoolean! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:25'!showBatchPreviousNext	^ properties at: #showBatchPreviousNext ifAbsent: [ self defaultShowBatchPreviousNext ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:23'!showBatchPreviousNext: aBoolean	properties at: #showBatchPreviousNext put: aBoolean! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:25'!showBody	^ properties at: #showBody ifAbsent: [ self defaultShowBody ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:23'!showBody: aBoolean	properties at: #showBody put: aBoolean! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:26'!showCaption	^ properties at: #showCaption ifAbsent: [ self defaultShowCaption ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:23'!showCaption: aBoolean	properties at: #showCaption put: aBoolean! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 4/6/2009 20:04'!showFilter	^ properties at: #showFilter ifAbsent: [ self defaultShowFilter ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 4/6/2009 20:04'!showFilter: aBoolean	properties at: #showFilter put: aBoolean! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:26'!showFooter	^ properties at: #showFooter ifAbsent: [ self defaultShowFooter ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:23'!showFooter: aBoolean	properties at: #showFooter put: aBoolean! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:26'!showHeader	^ properties at: #showHeader ifAbsent: [ self defaultShowHeader ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:23'!showHeader: aBoolean	properties at: #showHeader put: aBoolean! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:26'!showSummary	^ properties at: #showSummary ifAbsent: [ self defaultShowSummary ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:23'!showSummary: aBoolean	properties at: #showSummary put: aBoolean! !!MAReport methodsFor: 'actions' stamp: 'lr 3/9/2006 11:34'!sort: aColumn	aColumn = self sortColumn		ifTrue: [			self sortReversed				ifFalse: [ self sortReversed: true ]				ifTrue: [ self sortColumn: nil; sortReversed: false ] ]		ifFalse: [ self sortColumn: aColumn; sortReversed: false ].	self refresh! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:26'!sortColumn	^ backtracked at: #sortColumn ifAbsent: [ self defaultSortColumn ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:23'!sortColumn: aColumn	backtracked at: #sortColumn put: aColumn! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:26'!sortEnabled	^ properties at: #sortEnabled ifAbsent: [ self defaultSortEnabled ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:22'!sortEnabled: aBoolean	properties at: #sortEnabled put: aBoolean! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:26'!sortReversed	^ backtracked at: #sortReversed ifAbsent: [ self defaultSortReversed ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:22'!sortReversed: aBoolean	backtracked at: #sortReversed put: aBoolean! !!MAReport methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!sortRows: aCollection	^ self isSorted		ifFalse: [ aCollection ]		ifTrue: [ self sortColumn sortRows: aCollection ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:26'!sorterStyles	^ properties at: #sorterStyles ifAbsent: [ self defaultSorterStyles ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:22'!sorterStyles: aCollection	properties at: #sorterStyles put: aCollection! !!MAReport methodsFor: 'accessing-readonly' stamp: 'lr 11/28/2007 20:42'!states	^ Array with: backtracked! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:26'!tableCaption	^ properties at: #tableCaption ifAbsent: [ self defaultTableCaption ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:22'!tableCaption: aString	properties at: #tableCaption put: aString! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:26'!tableEmpty	^ properties at: #tableEmpty ifAbsent: [ self defaultTableEmpty ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:22'!tableEmpty: aString	properties at: #tableEmpty put: aString! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:26'!tableSummary	^ properties at: #tableSummary ifAbsent: [ self defaultTableSummary ]! !!MAReport methodsFor: 'accessing-settings' stamp: 'lr 11/28/2007 19:22'!tableSummary: aString	properties at: #tableSummary put: aString! !!MAReport methodsFor: 'accessing-readonly' stamp: 'lr 3/9/2006 11:34'!visible	^ self showBatch		ifFalse: [ self cache ]		ifTrue: [			self cache				copyFrom: self batchStartIndex				to: self batchEndIndex ]! !!MAReport methodsFor: 'accessing-readonly' stamp: 'lr 9/26/2007 18:47'!visibleColumns	^ self columns select: [ :each | each isVisible ]! !!MADescriptionEditor class methodsFor: 'initialization' stamp: 'lr 8/14/2008 11:48'!initialize	self registerAsApplication: 'magritte/editor'! !!MADescriptionEditor methodsFor: 'actions-items' stamp: 'lr 11/20/2007 08:53'!addDescription: aDescription	| element |	element := self call: (self		buildEditorFor: aDescription		titled: 'Add ' , aDescription class label).	element isNil ifTrue: [ ^ self ].	self description add: element.	self refresh! !!MADescriptionEditor methodsFor: 'private' stamp: 'trs 9/28/2009 19:08'!buildReport	^ (MAReport rows: self description children description: MAElementDescription description)		addColumn: (MAColumn new			accessor: #( description label );			label: 'Kind';			yourself);		addColumn: (MACommandColumn new			addCommandOn: self selector: #editDescription: text: 'edit';			addCommandOn: self selector: #moveUp: text: 'up';			addCommandOn: self selector: #moveDown: text: 'down';			addCommandOn: self selector: #removeDescription: text: 'remove';			yourself);		yourself! !!MADescriptionEditor methodsFor: 'rendering' stamp: 'mb 4/10/2008 01:52'!children	^super children copyWith: selectedComponent! !!MADescriptionEditor methodsFor: 'accessing-configuration' stamp: 'lr 3/9/2006 11:33'!defaultDescription	^ MAContainer new! !!MADescriptionEditor methodsFor: 'accessing-configuration' stamp: 'lr 3/9/2006 11:33'!defaultDescriptionClasses	^ OrderedCollection new		add: MAStringDescription;		add: MAMemoDescription;		add: MASymbolDescription;		add: MAPasswordDescription;		add: nil;		add: MABooleanDescription;		add: MASingleOptionDescription;		add: MAMultipleOptionDescription;		add: MAToOneRelationDescription;		add: MAToManyRelationDescription;		add: nil;		add: MANumberDescription;		add: MADurationDescription;		add: MADateDescription;		add: MATimeDescription;		add: MATimeStampDescription;		add: nil;		add: MAColorDescription;		add: MATokenDescription;		add: nil;		add: MAFileDescription;		add: MAClassDescription;		add: MATableDescription;		yourself! !!MADescriptionEditor methodsFor: 'accessing-configuration' stamp: 'lr 11/20/2007 08:51'!defaultExampleInstance	^ MAAdaptiveModel description: self description! !!MADescriptionEditor methodsFor: 'actions-items' stamp: 'lr 11/20/2007 08:53'!editDescription: aDescription	self call: (self		buildEditorFor: aDescription		titled: 'Edit ' , aDescription class label).	self refresh! !!MADescriptionEditor methodsFor: 'accessing' stamp: 'lr 11/20/2007 08:49'!example	^ example ifNil: [ example := self defaultExampleInstance ]! !!MADescriptionEditor methodsFor: 'initialize-release' stamp: 'mb 4/10/2008 01:50'!initialize	super initialize.	selected :=  MADescriptionHolder new.	selectedComponent := selected asComponent! !!MADescriptionEditor methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!preview	self call: (self example asComponent		addMessage: self description label;		addValidatedForm;		yourself)! !!MADescriptionEditor methodsFor: 'actions-items' stamp: 'lr 11/20/2007 08:53'!removeDescription: aDescription	self description remove: aDescription.	self refresh! !!MADescriptionEditor methodsFor: 'rendering' stamp: 'lr 8/14/2008 00:22'!renderButtonsOn: html	html submitButton		callback: [			selectedComponent save.			selected contents isNil				ifFalse: [ self addDescription: selected contents new ] ];		text: 'Add'.	super renderButtonsOn: html! !!MAExampleEditor class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:34'!description: aDescription	^ self new		description: aDescription;		yourself! !!MAExampleEditor methodsFor: 'private' stamp: 'lr 3/9/2006 11:33'!buildEditorFor: anObject titled: aString	^ anObject asComponent		addValidatedForm;		addMessage: aString;		yourself! !!MAExampleEditor methodsFor: 'private' stamp: 'lr 3/9/2006 11:33'!buildReport	self subclassResponsibility! !!MAExampleEditor methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!cancel	self answer: nil! !!MAExampleEditor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!children	^ Array with: self report! !!MAExampleEditor methodsFor: 'accessing-configuration' stamp: 'lr 3/9/2006 11:33'!defaultDescription	self subclassResponsibility! !!MAExampleEditor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!description	^ description ifNil: [ description := self defaultDescription ]! !!MAExampleEditor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!description: aDescription	description := aDescription! !!MAExampleEditor methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!edit	self call: (self		buildEditorFor: description		titled: 'Edit Container')! !!MAExampleEditor methodsFor: 'actions-items' stamp: 'lr 11/20/2007 08:53'!moveDown: aDescription	self description moveDown: aDescription.	self refresh! !!MAExampleEditor methodsFor: 'actions-items' stamp: 'lr 11/20/2007 08:53'!moveUp: aDescription	self description moveUp: aDescription.	self refresh! !!MAExampleEditor methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!preview	self subclassResponsibility! !!MAExampleEditor methodsFor: 'actions' stamp: 'lr 11/20/2007 08:54'!refresh	self report rows: self description children! !!MAExampleEditor methodsFor: 'rendering' stamp: 'lr 11/16/2006 18:16'!renderButtonsOn: html	html submitButton on: #edit of: self.	html submitButton on: #preview of: self! !!MAExampleEditor methodsFor: 'rendering' stamp: 'lr 3/9/2006 11:33'!renderChildrenOn: html	html render: self children! !!MAExampleEditor methodsFor: 'rendering' stamp: 'mb 4/10/2008 07:14'!renderContentOn: html	html form: [		self renderChildrenOn: html. "One of the children supplies input for the form"		self renderButtonsOn: html ]! !!MAExampleEditor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:33'!report	^ report ifNil: [ report := self buildReport ]! !!MAExampleEditor methodsFor: 'actions' stamp: 'lr 3/9/2006 11:33'!save	self answer: self description! !!WAComponent methodsFor: '*magritte-seaside' stamp: 'lr 3/23/2009 18:56'!isMagritteContainer	^ false! !!MAExternalFileModel methodsFor: '*magritte-seaside-accessing' stamp: 'lr 3/26/2009 21:37'!urlFor: aRenderingContext	^ self baseUrl isNil		ifTrue: [ super urlFor: aRenderingContext ]		ifFalse: [ self baseUrl , '/' , (self location reduce: [ :a :b | a , '/' , b ]) , '/' , self filename ]! !!MAFileModelHandler class methodsFor: 'instance creation' stamp: 'lr 4/19/2009 22:46'!on: aFileModel	^ self new initializeOn: aFileModel! !!MAFileModelHandler methodsFor: 'comparing' stamp: 'lr 4/19/2009 22:47'!= aHandler	^ self species = aHandler species and: [ self model = aHandler model ]! !!MAFileModelHandler methodsFor: 'processing' stamp: 'lr 4/19/2009 23:17'!handleRequest: aRequest	| response |	response := WAResponse new.	response		cacheForever;		contentType: self model mimetype;		headerAt: 'Content-Disposition' put: 'inline; filename="' , self model filename , '"';		contents: self model contents readStream.	^ response! !!MAFileModelHandler methodsFor: 'comparing' stamp: 'lr 4/19/2009 22:47'!hash	^ self model hash! !!MAFileModelHandler methodsFor: 'initialization' stamp: 'lr 4/19/2009 22:46'!initializeOn: aFileModel	model := aFileModel! !!MAFileModelHandler methodsFor: 'accessing' stamp: 'lr 4/19/2009 22:48'!model	^ model! !!MABooleanDescription class methodsFor: '*magritte-seaside-defaults' stamp: 'lr 3/9/2006 11:33'!defaultComponentClasses	^ Array with: MACheckboxComponent with: MASelectListComponent with: MARadioGroupComponent! !!Object methodsFor: '*magritte-seaside-converting' stamp: 'lr 3/9/2006 11:33'!asComponent	^ self description asComponentOn: self! !!MADateAndTimeDescription class methodsFor: '*magritte-seaside' stamp: 'trs 9/28/2009 19:28'!defaultComponentClasses	^ Array with: MATimeStampInputComponent! !!MAToManyRelationDescription class methodsFor: '*magritte-seaside-accessing-defaults' stamp: 'lr 3/9/2006 11:33'!defaultComponentClasses	^ Array with: MAOneToManyComponent! !!MAFileDescription class methodsFor: '*magritte-seaside-defaults' stamp: 'lr 3/9/2006 11:33'!defaultComponentClasses	^ Array with: MAFileUploadComponent! !!MAPasswordDescription class methodsFor: '*magritte-seaside-default' stamp: 'lr 9/21/2008 10:28'!defaultComponentClasses	^ Array with: MATextPasswordComponent with: MAVerifiedPasswordComponent with: MATextInputComponent! !!MANumberDescription class methodsFor: '*magritte-seaside' stamp: 'lr 3/9/2006 11:33'!defaultComponentClasses	^ Array with: MATextInputComponent with: MARangeComponent! !!MAMultipleErrors methodsFor: '*magritte-seaside-rendering' stamp: 'lr 1/30/2008 09:45'!renderOn: html	html unorderedList: [		self collection			do: [ :each | html listItem: each ] ]! !!Symbol methodsFor: '*magritte-seaside' stamp: 'lr 8/14/2006 10:59'!fixTemps	^ self! !!MAMultipleOptionDescription class methodsFor: '*magritte-seaside-defaults' stamp: 'lr 3/9/2006 11:33'!defaultComponentClasses	^ Array with: MAMultiselectListComponent with: MACheckboxGroupComponent with: MAListCompositonComponent! !!MATimeDescription class methodsFor: '*magritte-seaside' stamp: 'pmm 10/22/2006 13:06'!defaultComponentClasses	^ Array with: MATimeInputComponent with: MATimeSelectorComponent! !!MADurationDescription class methodsFor: '*magritte-seaside' stamp: 'lr 3/9/2006 11:33'!defaultComponentClasses	^ Array with: MATextInputComponent! !!MASingleOptionDescription class methodsFor: '*magritte-seaside-defaults' stamp: 'lr 3/9/2006 11:33'!defaultComponentClasses	^ Array with: MASelectListComponent with: MARadioGroupComponent! !!MAContainer class methodsFor: '*magritte-seaside-defaults' stamp: 'lr 3/9/2006 11:33'!defaultComponentClasses	^ Array with: MAContainerComponent! !!MAContainer class methodsFor: '*magritte-seaside-defaults' stamp: 'lr 3/9/2006 11:33'!defaultComponentRenderer	^ MATableRenderer! !!MAContainer methodsFor: '*magritte-seaside-converting' stamp: 'lr 3/9/2006 11:33'!asComponentOn: anObject	^ self componentClass		memento: (anObject mementoClass			model: anObject			description: self)! !!MAContainer methodsFor: '*magritte-seaside-accessing' stamp: 'lr 3/9/2006 11:33'!componentRenderer	^ self propertyAt: #componentRenderer ifAbsent: [ self class defaultComponentRenderer ]! !!MAContainer methodsFor: '*magritte-seaside-accessing' stamp: 'lr 3/9/2006 11:33'!componentRenderer: aClass	self propertyAt: #componentRenderer put: aClass! !!MATableDescription class methodsFor: '*magritte-seaside-defaults' stamp: 'lr 3/9/2006 11:33'!defaultComponentClasses	^ Array with: MATableComponent! !!MAToManyScalarRelationDescription class methodsFor: '*magritte-seaside-accessing-defaults' stamp: 'pmm 11/3/2006 17:49'!defaultComponentClasses	^ Array with: MAOneToManyScalarComponent! !!MAToManyScalarRelationDescription class methodsFor: '*magritte-seaside-accessing-defaults' stamp: 'pmm 11/3/2006 18:03'!defaultReportColumnClasses	^ Array with: MADescribedScalarColumn! !!MATimeStampDescription class methodsFor: '*magritte-seaside' stamp: 'lr 3/9/2006 11:33'!defaultComponentClasses	^ Array with: MATimeStampInputComponent! !!MAColorDescription class methodsFor: '*magritte-seaside-defaults' stamp: 'lr 3/9/2006 11:33'!defaultComponentClasses	^ Array with: MAColorComponent! !!MAFileModel methodsFor: '*magritte-seaside-rendering' stamp: 'lr 3/26/2009 21:39'!renderOn: html	"Renders a download link of the receiver."	html anchor		title: (String streamContents: [ :stream |			stream nextPutAll: self filename; nextPutAll: ' ('.			stream nextPutAll: self filesize asFileSize; nextPutAll: ', '.			stream nextPutAll: self mimetype; nextPut: $) ]);		url: (self urlFor: html context);		with: self filename! !!MAFileModel methodsFor: '*magritte-seaside-accessing' stamp: 'lr 4/19/2009 23:05'!urlFor: aRenderContext	"Answer a link to a request handler for the given file."		^ (aRenderContext registry 		urlForRequestHandler: (MAFileModelHandler on: self))			displayString! !!MAFileModel methodsFor: '*magritte-seaside-accessing' stamp: 'lr 3/26/2009 22:10'!urlOn: html	self deprecatedApi: 'Use #urlFor: with the rendering context instead.'.	^ self urlFor: html context! !"Magritte-Seaside"!!PRCurrentContext commentStamp: 'lr 5/28/2006 17:06' prior: 0!I am a dynamic variable. I answer the current context when being raised.!!PRDiffAlgorithm commentStamp: 'lr 9/28/2009 20:40' prior: 0!Smalltalk Diff Algorithm, based on the Javascript implementation by John Resig and Chu Alan.http://jquery-ui.googlecode.com/svn/tags/1.7.2/external/jsdiff/jsdiff.js!!PRObject commentStamp: 'lr 5/28/2006 17:00' prior: 0!I am the root of objects within Pier. I hold a dictionary of properties, so that users can easily annotate me with new values. I am visitable.!!PRCommand commentStamp: 'lr 4/10/2007 21:13' prior: 0!I am an abstract superclass of the command pattern in Pier. All modifications to the model have to be done through subclasses of myself, else they do not get properly logged with the persistency mechanism. I hold the context in which the receiver is executed in the instance variable context. To modify the resulting context, create a copy of the current context and store it in the instance variable answer.The following event-handlers are called when executing an action in the given order. Do override these messages to customize the command, never override the other internal methods:- Override the message ==#doValidate== to check the valid setup of the command and to raise exceptions in case any precondition isn't met. Speak here or forever have your peace!! Don't change the model in there.- Override the message ==#doExecute== to execute the actual command. Do not raise exceptions in there, catch all the problems in ==#doValidate==.- Override the message ==#doPersistency== to save the command that has been just executed with the current persistency strategy. Most commands don't need to override this message and just stick with the default behavior.- Override the message ==#doAnswer== to create the answer context. Most commands don't need to override this message and just stick with the default behavior.Do not play with funny jumpy things, such as resumable exceptions or continuations, inside the code of the command hierarchy or you will very likely run into severe problems.!!PRAddCommand commentStamp: '<historical>' prior: 0!I'm a command used to add new structures to your structures. My code is very interesting if you want to understand how Pier is designed.Type is the class (subclass of PRStructure) for which a new instance will be created.!!PRChangeCommand commentStamp: 'lr 11/5/2007 21:34' prior: 0!Abstract command to edit structures.!!PREditCommand commentStamp: 'lr 11/5/2007 21:40' prior: 0!Command to edit a structure, e.g. all the descriptions that are tagged as ==#beEditable==.!!PRLocationCommand commentStamp: 'lr 11/5/2007 21:36' prior: 0!Abstract command to copy or move a structure.!!PRCopyCommand commentStamp: 'lr 11/5/2007 21:35' prior: 0!Command to copy a structure.!!PRMoveCommand commentStamp: 'lr 11/5/2007 21:35' prior: 0!Command to move a structure.!!PRRemoveCommand commentStamp: 'lr 11/5/2007 21:35' prior: 0!Command to remove a structure.!!PRViewCommand commentStamp: 'lr 11/5/2007 21:35' prior: 0!Command (so called) to view a structure.!!PRContext commentStamp: 'lr 6/1/2006 21:12' prior: 0!I am the context in which a user is browsing the system. I hold all the information any part of Pier might be interested in: the currently used kernel, the structure that is currently displayed, the command that is being executed and the user currently logged in.I am an immutable object. Users should never try to modify me. Instead use the modification methods that return a copy of myself.!!PRDecorated commentStamp: 'lr 5/28/2006 17:43' prior: 0!I am an abstract decorated object. My decorations are subclasses of *PRDecoration*. I provide all the tools to add, remove, query and visit my decorations.!!PRStructure commentStamp: 'lr 5/28/2006 17:41' prior: 0!I am an abstract structure, representing the model of a single page. I've got a name, that must be unique within the scope of my parent, and a title. A structure is identified with a path of structure names.!!PRCase commentStamp: 'lr 1/15/2007 21:42' prior: 0!I am an abstract class holding onto a document definition representing the contents of the receiver. Most of my subclasses will allow user to edit myself using the Wiki syntax.!!PRPage commentStamp: 'lr 1/15/2007 21:42' prior: 0!I am the most important class of the structure hierarchy.!!PRFile commentStamp: 'lr 6/2/2006 10:54' prior: 0!I represent a data container for images, videos, sound, pdf or zip files. I reference an instance of *MAFileModel*. The mime-type is used to determine how the given file is be displayed. As an example images and videos are attempted to be inlined into the resulting output, whereas zip-files are referenced as a link to allow downloading.!!PRDecoration commentStamp: 'lr 5/30/2006 19:16' prior: 0!I am an abstract decoration to add new behaviour and data to structures. Every decoration knows its owner, a subclass of *PRDecorated*. Decorations are considered to be equal if they are of the same species, but subclasses might want to refine this behaviour to be able to add multiple instances of the same class.Within the owner decorations are ordered according to their priority. Decorations with a negative priority are visited before the owner, decorations with a positive one after the owner.!!PRChildren commentStamp: 'lr 5/28/2006 17:47' prior: 0!I hold the children of the decorated object.!!PRDocumentItem commentStamp: 'lr 5/28/2006 20:30' prior: 0!I am an abstract superclass for the document hierarchy. My subclasses include all the basic elements to represent a document.!!PRAnchor commentStamp: 'lr 5/29/2006 09:30' prior: 0!I am an anchor within a document. I am used as a reference point within a large document.!!PRDocumentGroup commentStamp: 'lr 5/28/2006 20:33' prior: 0!I am an abstract group of document items.!!PRDocument commentStamp: 'lr 5/28/2006 21:06' prior: 0!I am the root of a document composite.!!PRHeader commentStamp: 'lr 5/28/2006 20:34' prior: 0!I represent a header within a document. My level is a natural number.!!PRLink commentStamp: 'lr 5/28/2006 21:02' prior: 0!I am an abstract link built from an alias and a reference. The alias is the string representation that will be displayed to the user, whereas the reference is a string identifying the target. If there is no alias, the reference itself is displayed. Links can try to embed the referenced target into the containing document.!!Examples=*Reference*=+Alias>Embedded Reference*!!PRExternalLink commentStamp: 'lr 5/28/2006 20:41' prior: 0!I am an abstract external link with an URL (Uniform Resource Locator) as reference.!!PRMailLink commentStamp: 'lr 6/2/2006 11:29' prior: 0!I am an external link pointing to a mail address. I encode my URL to prevent spam bots collecting the address.!!PRInternalLink commentStamp: 'lr 4/10/2007 21:12' prior: 0!I am an internal link pointing to a structure within the current kernel. I reference my owning structure to be able to lookup the referenced structure. The referenced structure is cached in the instance variable ==target==.!!PRValueLink commentStamp: 'lr 2/5/2009 12:33' prior: 0!I am a link to a contextual value. Contrary to all other links I am not necessarily rendered as a link but as a plain string or dynamic document depending on the current browsing context. Possible values are defined in my methods marked with the pragma ==<value:comment:>==.!!PRList commentStamp: 'lr 5/28/2006 20:55' prior: 0!I am an abstract list. My children are instances of *PRListItem*.!!PRDefinitionList commentStamp: 'lr 12/30/2007 19:44' prior: 0!I am an definition list. I am typically used for a keyword and a longer definition string.!!PROrderedList commentStamp: 'lr 5/28/2006 20:53' prior: 0!I am an ordered list. I am typically used for numbered items.!!PRUnorderedList commentStamp: 'lr 5/28/2006 20:53' prior: 0!I am an unordered list. I am typically used for unnumbered lists!!PRListItem commentStamp: 'lr 6/2/2006 11:26' prior: 0!I am a item within a *PRList*.!!PRParagraph commentStamp: 'lr 5/28/2006 20:54' prior: 0!I am a paragraph of text.!!PRPreformatted commentStamp: 'lr 5/28/2006 20:56' prior: 0!I am preformatted text or source code. My children are instances of *PRText*.!!PRTable commentStamp: 'lr 5/28/2006 20:56' prior: 0!I am a table. My children are instances of *PRTableRow*.!!PRTableCell commentStamp: 'lr 5/28/2006 20:57' prior: 0!I am a cell of a table.!!PRTableRow commentStamp: 'lr 5/28/2006 20:56' prior: 0!I am a row of a table. My children are instances of *PRTableCell*.!!PRHorizontalRule commentStamp: 'lr 5/28/2006 20:57' prior: 0!I am a horizontal rule.!!PRLineBreak commentStamp: 'lr 9/14/2009 08:31' prior: 0!I am a line break. I only show up in the wiki format.!!PRText commentStamp: 'lr 5/28/2006 20:58' prior: 0!I am a plain text. I am the most important leaf node of the document composite.!!PRKernel commentStamp: 'lr 6/2/2006 10:33' prior: 0!I am the kernel of Pier. Several instances of myself might exist at the same time, but they all exist independently and don't share any data. I know the root structure and the persistency strategy of the whole data-model. Moreover I prevent any concurrent modifications to the model by providing a global mutex.!!PRPersistency commentStamp: 'lr 2/5/2009 16:21' prior: 0!An abstract persistency strategy. To use assign to a kernel by evaluating:= aKernel persistency: PRNullPersistency new!!PRHistoryPersistency commentStamp: 'lr 2/1/2009 17:03' prior: 0!A simple persistency strategy remembering a configurable amount of the history.!!PRNullPersistency commentStamp: 'lr 2/1/2009 17:07' prior: 0!The simplest possible persistency strategy. Using this strategy means there is no persistency (except for manual image saving). Also no history of applied commands is remembered.!!PRVisitor commentStamp: 'lr 6/2/2006 11:55' prior: 0!I am an abstract visitor. I provide a default implementation of all visit messages that does not descend automatically into children of the visited graph. Subclasses should override all my messages in appropriate ways to visit the nodes they need.!!PRDocumentWriter commentStamp: 'lr 6/1/2006 21:17' prior: 0!I am a visitor being able to transform a composite of document-items back into the original Wiki string.!!Example=| document |=document := PRDocumentParser parse: '+Hello+ *World*'.=string := PRDocumentWriter write: document.=string inspect.!!PRPathLookup commentStamp: 'lr 5/28/2006 21:19' prior: 0!I am a visitor used to look up a given path. I am able to lookup absolute and relative paths, following the syntax of unix operating systems.!!Example=(PRPathLookup=	start: aStructure=	path: '/Information/Copyright/..')=		inspect!!PRPathReference commentStamp: 'lr 5/28/2006 21:19' prior: 0!I am a visitor used to print a short path from a structure to another one.!!Example=(PRPathReference=	from: aFirstStructure=	to: aSecondStructure)=		inspect!!PRFullTextSearch commentStamp: 'lr 4/10/2007 21:12' prior: 0!I am a pluggable visitor to quickly look for matching text in a subtree of structures.!!ExampleThe following example opens an inspector on all structures with the text ==foo==:=(PRFullTextSearch =	from: aStructure=	find: 'foo'=	caseSensitive: false)=		inspect!!PRIncomingReferences commentStamp: 'lr 4/10/2007 21:12' prior: 0!I am a pluggable visitor to detect incoming references.!!ExampleThe following example opens inspectors on all instances of ==*PRInternalLink*== that point ==aStructure==:=aStructure incomingReferences =	from: aRootStructure=	to: aStructure=	do: [ :each | each inspect ]!!PROutgoingReferences commentStamp: 'lr 4/10/2007 21:12' prior: 0!I am a pluggable visitor visiting and probably following outgoing references. To do so I visit all the links of the page and evaluate my pluggable block for each of them. If the ==continue== block answers ==true== I follow the link and continue visiting the references of the target structure. The default behavior of the ==continue== block is to follow the link only if it is embedded. I take care not to run into infinite recursion, so no structure will be visited more than once.!!ExamplesThe following example answers a collection of referenced pages from ==aStructure==:=(aStructure outgoingReferences=	collect: [ :each | each target ])=		asSet		The following example answers a collection of all broken references that can be reached from ==aStructure==:=aStructure outgoingReferences=	continue: [ :each | each isBroken not ];= 	collect: [ :each | each isBroken ]!!PRStructureDescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:24'!defaultKind	^ PRStructure! !!PRStructureDescription class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRStructureDescription class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!label	^ 'Structure'! !!PRStructureDescription methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:30'!acceptMagritte: aVisitor	aVisitor visitStructureDescription: self! !!PRDocumentAccessor methodsFor: 'model' stamp: 'lr 2/14/2008 13:07'!write: anObject to: aModel	super write: anObject to: aModel.	anObject isNil		ifFalse: [ anObject owner: aModel ]! !!PRCurrentContext class methodsFor: 'utilities' stamp: 'lr 3/9/2006 11:30'!use: anObject during: aBlock	^ aBlock on: self do: [ :notification | notification resume: anObject ]! !!PRCurrentContext class methodsFor: 'accessing' stamp: 'lr 6/17/2009 22:17'!value	"This is the read accessor of the current context."	^ self raiseSignal ifNotNilDo: [ :result | result context ]! !!PRCurrentContext class methodsFor: 'accessing' stamp: 'lr 9/24/2007 19:14'!value: aContext	"This is the write accessor of the current context."	self raiseSignal context: aContext! !!MAVisitor methodsFor: '*pier-model-accessing' stamp: 'lr 3/9/2006 11:29'!context	^ PRCurrentContext value! !!MAVisitor methodsFor: '*pier-model-accessing' stamp: 'lr 3/9/2006 11:29'!context: aContext	PRCurrentContext value: aContext! !!MAVisitor methodsFor: '*pier-model-visiting-description' stamp: 'lr 10/17/2007 23:02'!visitDocumentDescription: anObject	self visitMemoDescription: anObject! !!MAVisitor methodsFor: '*pier-model-visiting-description' stamp: 'lr 10/16/2007 20:03'!visitStructureDescription: anObject	self visitElementDescription: anObject! !!MAStringWriter methodsFor: '*pier-model-visiting' stamp: 'lr 10/16/2007 20:11'!visitDocumentDescription: aDescription	aDescription writerClass 		write: self object		to: self stream! !!MAStringWriter methodsFor: '*pier-model-visiting' stamp: 'lr 4/11/2009 10:35'!visitStructureDescription: aDescription	stream nextPutAll: self object absolutePath! !!PRDocumentDescription class methodsFor: 'accessing-defaults' stamp: 'lr 9/3/2009 17:23'!defaultKind	^ PRDocument! !!PRDocumentDescription class methodsFor: 'accessing' stamp: 'lr 10/17/2007 22:59'!label	^ 'Document'! !!PRDocumentDescription methodsFor: 'visiting' stamp: 'lr 10/16/2007 20:02'!acceptMagritte: aVisitor	aVisitor visitDocumentDescription: self! !!PRDocumentDescription methodsFor: 'accessing' stamp: 'lr 4/10/2008 14:18'!accessor: anAccessor	super accessor: (PRDocumentAccessor on: anAccessor asAccessor)! !!PRDocumentDescription methodsFor: 'testing' stamp: 'lr 9/22/2008 08:38'!isDocumentDescription	^ true! !!PRDocumentDescription methodsFor: 'accessing' stamp: 'lr 10/16/2007 20:10'!parserClass	"Answer the default document parser for the receiver."	^ PRDocumentParser! !!PRDocumentDescription methodsFor: 'accessing' stamp: 'lr 10/16/2007 20:10'!writerClass	"Answer the default document writer for the receiver."	^ PRWikiWriter! !!Collection methodsFor: '*pier-model' stamp: 'lr 3/9/2006 11:29'!accept: aVisitor	aVisitor visitAll: self! !!Object methodsFor: '*pier-model' stamp: 'lr 3/9/2006 11:29'!accept: aVisitor	self subclassResponsibility! !!Object methodsFor: '*pier-model' stamp: 'lr 3/9/2006 11:29'!acceptDecorated: aVisitor	self accept: aVisitor! !!PRDiffAlgorithm class methodsFor: 'instance-creation' stamp: 'lr 9/27/2009 19:13'!from: aSourceSequence to: aTargetSequence	^ self basicNew initializeFrom: aSourceSequence to: aTargetSequence! !!PRDiffAlgorithm methodsFor: 'initialization' stamp: 'lr 9/28/2009 19:41'!initializeFrom: aSourceSequence to: aTargetSequence	self source: aSourceSequence.	self target: aTargetSequence.	self initializeMapping! !!PRDiffAlgorithm methodsFor: 'initialization' stamp: 'lr 9/28/2009 19:40'!initializeMapping	targetMap keysDo: [ :i |		((targetMap at: i) size = 1 and: [ (sourceMap includesKey: i) and: [ (sourceMap at: i) size = 1 ] ]) ifTrue: [ 			targetText at: (targetMap at: i) first put: (target at: (targetMap at: i) first).			targetRow at: (targetMap at: i) first put: (sourceMap at: i) first.			sourceText at: (sourceMap at: i) first put: (source at: (sourceMap at: i) first).			sourceRow at: (sourceMap at: i) first put: (targetMap at: i) first ] ].	1 to: target size - 1 do: [ :i |		((targetText at: i) notNil 			and: [ (targetText at: i + 1) isNil 			and: [ (targetRow at: i) + 1 < source size 			and: [ (sourceText at: (targetRow at: i) + 1) isNil 			and: [ (target at: i + 1) = (source at: (targetRow at: i) + 1) ] ] ] ]) ifTrue: [				targetText at: i + 1 put: (target at: i + 1).				targetRow at: i + 1 put: (targetRow at: i) + 1.				sourceText at: (targetRow at: i) + 1 put: (source at: (targetRow at: i) + 1).				sourceRow at: (targetRow at: i) + 1 put: i + 1 ] ].	target size to: 2 by: -1 do: [ :i |		((targetText at: i) notNil 			and: [ (targetText at: i - 1) isNil 			and: [ (targetRow at: i) > 1			and: [ (sourceText at: (targetRow at: i) - 1) isNil 			and: [ (target at: i - 1) = (source at: (targetRow at: i) - 1) ] ] ] ]) ifTrue: [				targetText at: i - 1 put: (target at: i - 1).				targetRow at: i - 1 put: (targetRow at: i) - 1.				sourceText at: (targetRow at: i) - 1 put: (source at: (targetRow at: i) - 1).				sourceRow at: (targetRow at: i) - 1 put: i - 1 ] ]! !!PRDiffAlgorithm methodsFor: 'patching' stamp: 'lr 9/28/2009 20:32'!patchset	| patchset |	patchset := OrderedCollection new.	self patchsetDo: [ :operation :object :index | patchset addLast: (Array with: operation with: object) ].	^ patchset asArray! !!PRDiffAlgorithm methodsFor: 'patching' stamp: 'lr 9/28/2009 21:24'!patchsetDo: aBlock	"Evaluate aBlock for every patch operation of the receiver. The first argument is the operation, where #= is identity, #+ is insertion, and #- is deletion. The second argument is the object. The third argument the index in the source or target list."	| sourceIndex targetIndex |	sourceIndex := targetIndex := 1.	[ sourceIndex <= source size or: [ targetIndex <= target size ] ] whileTrue: [		[ sourceIndex <= source size and: [ (sourceText at: sourceIndex) isNil ] ] whileTrue: [			aBlock value: #- value: (source at: sourceIndex) value: sourceIndex.			sourceIndex := sourceIndex + 1 ].		[ targetIndex <= target size and: [ (targetText at: targetIndex) isNil ] ] whileTrue: [			aBlock value: #+ value: (target at: targetIndex) value: targetIndex.			targetIndex := targetIndex + 1 ].		targetIndex <= target size			ifTrue: [ aBlock value: #= value: (targetText at: targetIndex) value: targetIndex ].		sourceIndex := sourceIndex + 1.		targetIndex := targetIndex + 1 ]! !!PRDiffAlgorithm methodsFor: 'accessing' stamp: 'lr 9/28/2009 18:53'!source: aCollection	"Set the source sequence."	source := aCollection asArray.	sourceText := Array new: source size.	sourceRow := Array new: source size.	sourceMap := Dictionary new.	source withIndexDo: [ :each :index |		(sourceMap at: each ifAbsentPut: [ OrderedCollection new ])			addLast: index ]! !!PRDiffAlgorithm methodsFor: 'accessing' stamp: 'lr 9/28/2009 18:53'!target: aCollection	"Set the target sequence."		target := aCollection asArray.	targetText := Array new: target size.	targetRow := Array new: target size.	targetMap := Dictionary new.	target withIndexDo: [ :each :index |		(targetMap at: each ifAbsentPut: [ OrderedCollection new ])			addLast: index ]! !!PRLineDiffAlgorithm methodsFor: 'accessing' stamp: 'lr 9/28/2009 18:09'!source: aString	super source: (aString ifNil: [ String new ]) lines! !!PRLineDiffAlgorithm methodsFor: 'accessing' stamp: 'lr 9/28/2009 18:08'!target: aString	super target: (aString ifNil: [ String new ]) lines! !!PRWordDiffAlgorithm methodsFor: 'accessing' stamp: 'lr 9/28/2009 14:24'!source: aString	self split: aString do: [ :tokens :spaces |		super source: tokens.		sourceSpaces := spaces ]! !!PRWordDiffAlgorithm methodsFor: 'private' stamp: 'lr 9/28/2009 14:25'!split: aString do: aBlock	"Split aString on all separators and pass in two collections inta aBlock, the first one being the split strings and the second one being the splitter strings inbetween."		| strings splitters input output |	strings := OrderedCollection new.	splitters := OrderedCollection new.	input := (aString ifNil: [ String new ])		withBlanksTrimmed readStream.	[ input atEnd ] whileFalse: [		output := WriteStream on: String new.		[ input atEnd or: [ input peek isSeparator ] ]			whileFalse: [ output nextPut: input next ].		output isEmpty			ifFalse: [ strings addLast: output contents ].		output := WriteStream on: String new.		[ input atEnd or: [ input peek isSeparator not ] ]			whileFalse: [ output nextPut: input next ].		output isEmpty			ifFalse: [ splitters addLast: output contents ] ].	splitters addLast: (String with: Character cr).	^ aBlock value: strings asArray value: splitters asArray! !!PRWordDiffAlgorithm methodsFor: 'accessing' stamp: 'lr 9/28/2009 14:24'!target: aString	self split: aString do: [ :tokens :spaces |		super target: tokens.		targetSpaces := spaces ]! !!PRDocumentParser class methodsFor: 'private' stamp: 'lr 5/26/2009 22:17'!buildLineMatcher	| result |	result := Dictionary new.	result		at: PRAnchor markup put: PRAnchor;		at: PRHorizontalRule markup put: PRHorizontalRule;		at: PRHeader markup put: PRHeader;		at: PRDataItem markup put: PRList;		at: PRTermItem markup put: PRList;		at: PRUnorderedList markup put: PRList;		at: PROrderedList markup put: PRList;		at: PRTableCell markup put: PRTable;		at: PRPreformatted markup put: PRPreformatted;		at: PRAnnotatedParagraph markup put: PRAnnotatedParagraph.	^ result! !!PRDocumentParser class methodsFor: 'private' stamp: 'lr 4/24/2007 21:25'!buildTextMatcher	| result |	result := Dictionary new.	result		at: '*' put: PRLink;		at: '+' put: PRLink.	PRFormat allSubclassesDo: [ :each |		result			at: each markup			put: each ].	^ result! !!PRDocumentParser class methodsFor: 'escaping' stamp: 'lr 12/21/2009 14:02'!escape: aString	^ self escape: aString all: (PRDocumentParser on: nil) textMatcher reverse! !!PRDocumentParser class methodsFor: 'escaping' stamp: 'lr 12/21/2009 14:02'!escape: aString all: anArray	^ anArray		inject: (self escape: aString using: '\')		into: [ :result :each | self escape: result using: each ]! !!PRDocumentParser class methodsFor: 'escaping' stamp: 'lr 4/5/2007 14:04'!escape: aString using: aSearchString	| string index |	string := aString.	index := string findString: aSearchString.	[ index > 0 ] whileTrue: [		string := (string first: index - 1) , '\' , (string allButFirst: index - 1).		index := string findString: aSearchString startingAt: index + aSearchString size + 1 ].	^ string! !!PRDocumentParser class methodsFor: 'initialization' stamp: 'lr 12/30/2007 21:46'!initialize	CharacterCr := Character cr.	CharacterLf := Character lf	! !!PRDocumentParser class methodsFor: 'accessing' stamp: 'lr 12/30/2007 22:34'!lineMatcher	^ LineMatcher ifNil: [ LineMatcher := self buildLineMatcher ]! !!PRDocumentParser class methodsFor: 'accessing' stamp: 'lr 4/24/2007 21:08'!lineMatcherDefault	^ LineMatcherDefault ifNil: [ LineMatcherDefault := PRParagraph ]! !!PRDocumentParser class methodsFor: 'parsing' stamp: 'lr 4/4/2007 14:59'!on: aStream	^ self basicNew initializeOn: aStream! !!PRDocumentParser class methodsFor: 'parsing' stamp: 'lr 4/4/2007 14:58'!parse: aString	^ self parseStream: aString readStream! !!PRDocumentParser class methodsFor: 'parsing' stamp: 'lr 4/4/2007 14:58'!parseStream: aStream	^ (self on: aStream) parse! !!PRDocumentParser class methodsFor: 'private' stamp: 'damiencassou 7/23/2009 16:52'!resetLineMatcher 	LineMatcher := nil! !!PRDocumentParser class methodsFor: 'private' stamp: 'damiencassou 7/23/2009 16:52'!resetTextMatcher 	TextMatcher := nil! !!PRDocumentParser class methodsFor: 'accessing' stamp: 'lr 4/24/2007 21:08'!textMatcher	^ TextMatcher ifNil: [ TextMatcher := self buildTextMatcher ]! !!PRDocumentParser class methodsFor: 'escaping' stamp: 'lr 6/15/2009 20:09'!unescape: aString	| input output |	input := aString readStream.	output := WriteStream on: (String new: aString size).	[ input atEnd ] whileFalse: [		output nextPutAll: (input upTo: $\).		input atEnd			ifFalse: [ output nextPut: input next ] ].	^ output contents! !!PRDocumentParser methodsFor: 'adding' stamp: 'lr 1/28/2009 10:06'!add: aDocumentItem	^ document add: aDocumentItem! !!PRDocumentParser methodsFor: 'adding' stamp: 'lr 1/28/2009 10:09'!addParagraph: aParagraph	aParagraph children isEmpty		ifTrue: [ self add: PREmptyParagraph new ]		ifFalse: [			self lastDocumentItem class = aParagraph class				ifFalse: [ self add: aParagraph ]				ifTrue: [					self lastDocumentItem						add: PRLineBreak new;						addAll: aParagraph children ] ].	^ self lastDocumentItem! !!PRDocumentParser methodsFor: 'adding' stamp: 'lr 1/28/2009 10:09'!combine: aClass with: aDocumentItem	^ self lastDocumentItem class = aClass		ifTrue: [ self lastDocumentItem add: aDocumentItem ]		ifFalse: [ self add: (aClass with: aDocumentItem) ]! !!PRDocumentParser methodsFor: 'accessing' stamp: 'lr 1/28/2009 10:07'!document	^ document! !!PRDocumentParser methodsFor: 'private' stamp: 'lr 3/10/2009 10:43'!findFirst: aSearchString at: anInteger in: aString	"Find the first non-escaped occurence of aSearchString starting at anInteger in aString."	| index |	index := aString findString: aSearchString startingAt: anInteger.	[ anInteger < index and: [ (aString at: index - 1 ifAbsent: nil) = $\ ] ]		whileTrue: [ index := aString findString: aSearchString startingAt: index + 1 ].	^ index! !!PRDocumentParser methodsFor: 'private' stamp: 'lr 3/10/2009 10:43'!findFirstOf: anArray at: anInteger in: aString	"Find the first non-escaped occurence of any of the search strings in anArray starting at anInteger in aString. Answer the search string or nil if not found."	| index minIndex minMarkup |	minIndex := aString size. minMarkup := nil.	anArray do: [ :each |		index := self findFirst: each at: anInteger in: aString.		(0 < index and: [ index < minIndex ])			ifTrue: [ minIndex := index. minMarkup := each ] ].	^ minMarkup! !!PRDocumentParser methodsFor: 'initialization' stamp: 'lr 9/4/2009 17:17'!initialize	textMatcher := self class textMatcher keys asArray		sort: [ :a :b | a size > b size ];		yourself.	lineMatcher := self class lineMatcher keys asArray		sort: [ :a :b | a size > b size ];		yourself! !!PRDocumentParser methodsFor: 'initialization' stamp: 'lr 9/4/2009 17:18'!initializeOn: aStream	self initialize.	stream := aStream! !!PRDocumentParser methodsFor: 'accessing' stamp: 'lr 1/28/2009 10:30'!lastDocumentItem	^ document children isEmpty ifFalse: [ document children last ]! !!PRDocumentParser methodsFor: 'accessing' stamp: 'lr 4/12/2007 14:04'!lineMatcher	^ lineMatcher! !!PRDocumentParser methodsFor: 'private' stamp: 'lr 12/20/2007 13:22'!nextLine	"Answer the next line. This method implements a state machine to properly detect line endings (cr, cr lf, or lf) as encountered from different sources."	| output next |	stream atEnd ifTrue: [ ^ nil ].	output := WriteStream on: (String new: 100).	[ stream atEnd ] whileFalse: [		next := stream next.		next == CharacterLf			ifTrue: [ ^ output contents ].		next == CharacterCr ifTrue: [			stream peek == CharacterLf				ifTrue: [ stream next ].			^ output contents ].		output nextPut: next ].	^ output contents! !!PRDocumentParser methodsFor: 'parsing' stamp: 'lr 1/28/2009 15:36'!parse	"Parse the input from the given stream and answer a *PRDocument*."	document := PRDocument new.	[ stream atEnd ]		whileFalse: [ self parseLine: self nextLine ].	^ document! !!PRDocumentParser methodsFor: 'parsing' stamp: 'lr 5/28/2007 16:31'!parseLine: aString	"Parses ==aString==, that represents a single line of input, to a *PRDocumentItem* and add it to the ==items== collection."	self lineMatcher do: [ :string |		(aString beginsWith: string) ifTrue: [			^ (self class lineMatcher at: string)				parse: aString with: self ] ].	self class lineMatcherDefault		parse: aString with: self! !!PRDocumentParser methodsFor: 'parsing' stamp: 'lr 4/5/2007 16:02'!parseString: aString	| string |	string := self class unescape: aString.	string isEmpty ifTrue: [ ^ #() ].	^ Array with: (PRText content: string)! !!PRDocumentParser methodsFor: 'parsing' stamp: 'lr 6/15/2009 20:09'!parseText: aString	"Parses ==aString== and answer a collection of *PRText*, *PRFormat* and *PRLink* instances. Take care not to take into account any markup item that is escaped. This implementation is a bit slow, but who cares, it happens only once."	| markup start stop result |	markup := self findFirstOf: self textMatcher at: 1 in: aString.	markup isNil ifFalse: [		start := self findFirst: markup at: 1 in: aString.		stop := self findFirst: markup at: start + markup size in: aString.		start < stop ifTrue: [			result := WriteStream on: Array new.			result nextPutAll: (self parseString: (aString first: start - 1)).			result nextPut: ((self class textMatcher at: markup)				parse: (aString copyFrom: start to: stop + markup size - 1)				with: self).			result nextPutAll: (self parseText: (aString allButFirst: stop + markup size - 1)).			^ result contents ] ].	^ self parseString: aString! !!PRDocumentParser methodsFor: 'accessing' stamp: 'lr 4/12/2007 14:04'!textMatcher	^ textMatcher! !!PRMacroExpander class methodsFor: 'accessing' stamp: 'lr 2/17/2009 09:30'!default	^ default! !!PRMacroExpander class methodsFor: 'class initialization' stamp: 'lr 2/17/2009 09:31'!initialize	default := self new.	default		on: $c do: #(command label);	" current command "		on: $r do: #(kernel root title);	" current root structure "		on: $t do: #(structure title);		" current structure "		on: $k do: #(kernel name)		" current kernel name "! !!PRMacroExpander class methodsFor: 'instance creation' stamp: 'lr 1/26/2008 09:58'!new	^ self basicNew initialize! !!PRMacroExpander class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:30'!on: aDictionary	^ self new		table: aDictionary;		yourself! !!PRMacroExpander methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!character	^ character! !!PRMacroExpander methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!character: aCharacter	character := aCharacter! !!PRMacroExpander methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:29'!defaultCharacter	^ $%! !!PRMacroExpander methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:29'!defaultTable	^ Dictionary new! !!PRMacroExpander methodsFor: 'evaluation' stamp: 'lr 4/24/2008 08:46'!expand: aString with: anObject	^ aString isEmptyOrNil		ifTrue: [ aString ]		ifFalse: [ self expandFrom: aString readStream with: anObject ]! !!PRMacroExpander methodsFor: 'private' stamp: 'lr 4/24/2008 08:44'!expandFrom: aReadStream with: anObject	^ String streamContents: [ :writeStream |		[ aReadStream atEnd ] whileFalse: [			writeStream nextPutAll: (aReadStream upTo: self character).			aReadStream atEnd 				ifFalse: [ self expandFrom: aReadStream with: anObject on: writeStream ] ] ]! !!PRMacroExpander methodsFor: 'private' stamp: 'lr 4/24/2008 08:45'!expandFrom: aReadStream with: anObject on: aWriteStream	| accessor char result |	accessor := self table		at: (char := aReadStream next)		ifAbsent: [ nil ].	accessor isNil		ifTrue: [ aWriteStream nextPut: char ]		ifFalse: [ 			result := accessor read: anObject.			result isNil				ifFalse: [ aWriteStream nextPutAll: result ] ]! !!PRMacroExpander methodsFor: 'initialization' stamp: 'lr 4/24/2008 08:27'!initialize	self table: self defaultTable.	self character: self defaultCharacter! !!PRMacroExpander methodsFor: 'configuration' stamp: 'lr 4/24/2008 08:15'!on: aCharacter do: anAccessor	table at: aCharacter put: anAccessor asAccessor! !!PRMacroExpander methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!table	^ table! !!PRMacroExpander methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!table: aDictionary	table := aDictionary! !!PRMigrations class methodsFor: 'initialization' stamp: 'lr 11/15/2009 23:32'!initialize	self migrateParameters.	self migrateChildren.	self migrateTableCells.	self migrateLinkOwner.	self migrateObsoleteWidgets.	self migrateChildrenArray! !!PRMigrations class methodsFor: 'migrations' stamp: 'lr 3/17/2008 16:42'!migrateChildren	PRCompatibility allSubInstancesOf: PRChildren do: [ :each |		(each children isKindOf: Dictionary)			ifTrue: [ each setChildren: each children asOrderedCollection ] ]! !!PRMigrations class methodsFor: 'migrations' stamp: 'lr 11/15/2009 23:32'!migrateChildrenArray	PRCompatibility allSubInstancesOf: PRChildren do: [ :each |		(each children isKindOf: OrderedCollection)			ifTrue: [ each setChildren: each children ] ]! !!PRMigrations class methodsFor: 'migrations' stamp: 'lr 4/6/2009 13:31'!migrateLinkOwner	PRCompatibility allSubInstancesOf: PRStructure do: [ :structure |		structure outgoingReferences			continue: [ :link | false ];			do: [ :link |				link owner isNil					ifTrue: [ link owner: structure ] ] ]! !!PRMigrations class methodsFor: 'migrations' stamp: 'lr 5/24/2009 22:55'!migrateObsoleteWidgets	| componentClass |	componentClass := (PRCompatibility classNamed: #PRComponent)		ifNil: [ ^ self ].	PRCompatibility allSubInstancesOf: componentClass do: [ :component |		[ :className :descriptionSelector |			| widgetClass description |			widgetClass := PRCompatibility classNamed: className.			(widgetClass notNil and: [ component componentClass includesBehavior: widgetClass ]) ifTrue: [				description := widgetClass perform: descriptionSelector.				component settings at: description ifPresent: [ :classes |					component settings 						at: description						put: (classes reject: [ :each | each isObsolete ]) ] ] ]			value: #PRViewsWidget value: #descriptionViewClasses;			value: #PRCommandsWidget value: #descriptionCommandClasses ]! !!PRMigrations class methodsFor: 'migrations' stamp: 'lr 3/17/2008 16:19'!migrateParameters	PRCompatibility allSubInstancesOf: PRLink do: [ :each |		each parameters isNil			ifTrue: [ each parameters: #() ] ]! !!PRMigrations class methodsFor: 'migrations' stamp: 'lr 8/14/2008 09:02'!migrateTableCells	PRCompatibility allSubInstancesOf: PRTableCell do: [ :each |		each heading isNil			ifTrue: [ each heading: false ] ]! !!PRAddCommand class methodsFor: 'accessing' stamp: 'lr 5/3/2006 16:58'!accessKey	^ $a! !!PRAddCommand class methodsFor: 'accessing-description' stamp: 'lr 5/31/2009 20:00'!descriptionName	^ MAStringDescription new		addCondition: (MACondition receiver: PRPath selector: #isValidName:)			labelled: 'Invalid structure name';		parameterName: 'name';		accessor: #name;		label: 'Name';		priority: 100;		beRequired;		yourself! !!PRAddCommand class methodsFor: 'accessing-description' stamp: 'lr 5/31/2009 20:00'!descriptionType	^ MASingleOptionDescription new		options: [ self structureClasses ] asDynamicObject;		reference: MAClassDescription new;		parameterName: 'type';		default: PRPage;		accessor: #type;		label: 'Type';		priority: 110;		beRequired;		beSorted;		yourself! !!PRAddCommand class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRAddCommand class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!label	^ 'Add'! !!PRAddCommand class methodsFor: 'private' stamp: 'lr 3/28/2007 11:07'!structureClasses	| context |	context := PRCurrentContext value.	^ PRStructure withAllConcreteClasses select: [ :each |		(context structure class canBeParentOf: each)			and: [ each canBeChildOf: context structure class ] ]! !!PRAddCommand methodsFor: 'private' stamp: 'lr 11/3/2009 21:55'!child	"Create a new structure of the selected species, a subclass of PRStructure. Set the title if necessary, else it will be generated automatically."	| child |	child := self type named: self name.	(self title notNil and: [ self title notEmpty ])		ifTrue: [ child title: self title ].	^ child! !!PRAddCommand methodsFor: 'events' stamp: 'lr 9/27/2007 09:15'!doExecute	"Create a new structure of requested type and add it to the children list of the current structure. If possible the following context will be set to an editor or a view onto the new structure."	| structure |	super doExecute.	self structure		addChild: (structure := self child).	self link isNil		ifFalse: [ self link target: structure; update ].	self answer: (self context		structure: structure		command: (structure editCommandClass notNil			ifTrue: [ structure editCommandClass ]			ifFalse: [ structure viewCommandClass ])				new)! !!PRAddCommand methodsFor: 'events' stamp: 'lr 1/29/2007 15:10'!doValidate	"Verify that the new structure can be added before launching #doExecute. Basically, the name must be unique."	super doValidate.	self validateChild: self child in: self structure! !!PRAddCommand methodsFor: 'accessing' stamp: 'lr 9/6/2006 13:14'!link	^ link! !!PRAddCommand methodsFor: 'accessing' stamp: 'lr 9/6/2006 13:14'!link: aLink	link := aLink! !!PRAddCommand methodsFor: 'accessing' stamp: 'lr 7/2/2009 18:38'!name	^ name ifNil: [ name := self uniqueName: self structure defaultChildName in: self structure ]! !!PRAddCommand methodsFor: 'accessing' stamp: 'lr 11/3/2009 21:51'!name: aString	name := aString! !!PRAddCommand methodsFor: 'actions' stamp: 'lr 11/3/2009 21:57'!suggestName: aString	"Suggest aString as the name and title of the newly created structure."	self name: (aString collect: [ :char |		(PRPath validCharacters includes: char)			ifTrue: [ char ]			ifFalse: [				char = Character space					ifTrue: [ $- ]					ifFalse: [ $_ ] ] ]).	self title: aString capitalized! !!PRAddCommand methodsFor: 'accessing' stamp: 'lr 11/3/2009 21:55'!title	^ title! !!PRAddCommand methodsFor: 'accessing' stamp: 'lr 11/3/2009 21:55'!title: aString	title := aString! !!PRAddCommand methodsFor: 'accessing' stamp: 'lr 5/26/2009 21:43'!type	^ type ifNil: [ type := self structure defaultChildClass ]! !!PRAddCommand methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!type: aClass	type := aClass! !!PRChangeCommand methodsFor: 'events' stamp: 'lr 11/6/2007 08:17'!doExecute	super doExecute.	self fields keysAndValuesDo: [ :desc :value | self target write: value using: desc ]! !!PRChangeCommand methodsFor: 'accessing' stamp: 'lr 2/8/2009 19:23'!fields	"Answer a dictionary mapping descriptions to their respective data fields."		^ fields ifNil: [ fields := Dictionary new ]! !!PRChangeCommand methodsFor: 'copying' stamp: 'lr 11/20/2007 16:23'!postCopy	super postCopy.	fields := fields copy! !!PRChangeCommand methodsFor: 'private' stamp: 'lr 11/5/2007 21:53'!readUsing: aDescription	^ self fields at: aDescription ifAbsent: [ self target readUsing: aDescription ]! !!PRChangeCommand methodsFor: 'accessing' stamp: 'lr 11/5/2007 21:53'!target	"The target where this edit operation is applied to."	^ self structure! !!PRChangeCommand methodsFor: 'private' stamp: 'lr 11/5/2007 21:38'!write: anObject using: aDescription	self fields at: aDescription put: anObject! !!PREditCommand class methodsFor: 'accessing' stamp: 'lr 5/3/2006 16:58'!accessKey	^ $e! !!PREditCommand class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PREditCommand class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!label	^ 'Edit'! !!PREditCommand methodsFor: 'accessing' stamp: 'lr 4/4/2009 17:33'!description	^ self structure editDescription! !!PREditCommand methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!isEdit	^ true! !!PRCommand class methodsFor: 'accessing' stamp: 'lr 5/3/2006 16:57'!accessKey	^ nil! !!PRCommand class methodsFor: 'instance-creation' stamp: 'lr 1/29/2008 09:04'!context: aContext	(self isValidIn: aContext)		ifFalse: [ self error: self label , ' is not useable in the given context.' ].	^ self new		setContext: aContext;		yourself! !!PRCommand class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isValidIn: aContext	"Verify that a command as a meaning for the context aContext. Override this command to add new constraints that are static to the command."	^ aContext structure isValidCommand: self in: aContext! !!PRCommand class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!shortLabel	^ self label! !!PRCommand class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!structureClass	^ PRStructure! !!PRCommand methodsFor: 'accessing' stamp: 'lr 10/22/2007 22:12'!answer	"Return a new context that should be activated after executing this action. Since the answer might get modified afterwards, this should always be a copy."	^ answer copy! !!PRCommand methodsFor: 'accessing' stamp: 'lr 10/22/2007 22:12'!answer: aContext	"Set the resulting context of this command."	answer := aContext! !!PRCommand methodsFor: 'toggling' stamp: 'lr 2/12/2007 19:07'!beChecked	"Enable checks when executing the receiver. This is the default."	checked := true! !!PRCommand methodsFor: 'toggling' stamp: 'lr 3/10/2009 10:43'!beUnchecked	"Disable checks when executing the receiver. Do this only in a trusted environment and if you are absolutely sure that the execution will cause no conflicts."	checked := false! !!PRCommand methodsFor: 'accessing-readonly' stamp: 'lr 3/9/2006 11:29'!context	"Return the current context of the receiver."	^ context! !!PRCommand methodsFor: 'accessing-readonly' stamp: 'lr 1/13/2009 19:36'!date	"Answer the date when the command was executed."	^ self timestamp isNil ifFalse: [ self timestamp asDate ]! !!PRCommand methodsFor: 'events' stamp: 'lr 4/13/2007 14:45'!doAnswer	"Override this message to create the answer context. Most commands don't need to override this message and just stick with the default behavior."	self answer ifNil: [ self answer: (self context structure: self structure) ]! !!PRCommand methodsFor: 'events' stamp: 'lr 4/10/2007 21:44'!doExecute	"Override this message to execute the actual command. Do not raise exceptions in there, catch all the problems in ==#doValidate==."! !!PRCommand methodsFor: 'events' stamp: 'lr 9/11/2006 10:54'!doValidate	"Override this message to check the valid setup of the command and to raise exceptions in case any precondition isn't met. Speak here or forever have your peace!! Don't change the model in there."	self structure validateCommand: self! !!PRCommand methodsFor: 'actions' stamp: 'lr 4/10/2007 21:44'!execute	"Execute the command of the receiver. To implement your action in the code of one of my subclasses. Never override this message, but instead have a look at the different template methods (==#doValidate==, ==#doExecute==, ==#doAnswer==) available in the events protocol."	self assert: self context command == self.	self isView		ifTrue: [ self shouldNotImplement ].	self timestamp: TimeStamp now.	self kernel persistency		execute: self.	self doAnswer! !!PRCommand methodsFor: 'testing' stamp: 'lr 4/10/2007 21:44'!isChecked	"Answer ==true== if the command should be checked before execution, e.g. the method ==#doValidate== should be executed at all."	^ checked ifNil: [ checked := true ]! !!PRCommand methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!isEdit	^ false! !!PRCommand methodsFor: 'testing' stamp: 'lr 5/27/2006 17:26'!isLogged	"Most commands are logged. This means they do modify the model and are therefore preserved in the history. However there are some that just display something or change the state of the current context and neither change the model nor need to be logged."	^ true! !!PRCommand methodsFor: 'testing' stamp: 'lr 5/27/2006 17:26'!isQuick	"Quick commands do not have a configuration interface (probably not even Magritte descriptions) and therefore should not be presented to the user but simply executed."	^ false! !!PRCommand methodsFor: 'testing' stamp: 'lr 4/10/2007 21:44'!isView	"Most commands are not a view. This means they override ==#doExecute== to do something meaningful on the context or the model."	^ false! !!PRCommand methodsFor: 'accessing-readonly' stamp: 'lr 5/28/2006 21:10'!kernel	"Answer the kernel the receiver is working on."	^ self context kernel! !!PRCommand methodsFor: 'accessing-readonly' stamp: 'lr 1/29/2008 09:01'!label	^ self class label! !!PRCommand methodsFor: 'accessing-readonly' stamp: 'lr 3/9/2006 11:29'!root	^ self context kernel root! !!PRCommand methodsFor: 'private' stamp: 'lr 5/5/2009 17:22'!sanitizeAnswer	<sanitize>		answer := nil! !!PRCommand methodsFor: 'initialization' stamp: 'lr 1/17/2007 11:30'!setContext: aContext	context := aContext! !!PRCommand methodsFor: 'accessing-readonly' stamp: 'rjl 5/11/2006 22:36'!structure	^ self context structure! !!PRCommand methodsFor: 'accessing-readonly' stamp: 'lr 1/13/2009 19:36'!time	"Answer the date when the command was executed."	^ self timestamp isNil ifFalse: [ self timestamp asTime ]! !!PRCommand methodsFor: 'accessing' stamp: 'lr 1/17/2007 11:30'!timestamp	^ timestamp! !!PRCommand methodsFor: 'accessing' stamp: 'lr 1/17/2007 11:34'!timestamp: aTimeStamp	timestamp := aTimeStamp! !!PRCommand methodsFor: 'private' stamp: 'lr 4/21/2009 15:23'!uniqueName: aString in: aStructure	"Answer an unique structure name with the prefix aString within the parent aStructure."	| index name |	(aStructure isNil or: [ aStructure hasChildren not ])		ifTrue: [ ^ aString ].	(aStructure childrenDecoration includes: aString)		ifFalse: [ ^ aString ].	index := 1.	[ aStructure childrenDecoration		includes: (name := aString , '-' , (index := index + 1) asString) ]		whileTrue.	^ name! !!PRCommand methodsFor: 'validating' stamp: 'lr 4/10/2007 21:45'!validateChild: aChildStructure in: aStructure	"Make sure that ==aChildStructure== can be added as child or replace an existing child in a ==aStructure==."	self validateChild: aChildStructure named: aChildStructure name in: aStructure! !!PRCommand methodsFor: 'validating' stamp: 'lr 3/9/2006 11:29'!validateChild: aChildStructure named: aString in: aStructure	self validateName: aString of: aChildStructure in: aStructure.	self validateNestingOf: aChildStructure in: aStructure! !!PRCommand methodsFor: 'validating' stamp: 'lr 4/10/2007 21:45'!validateName: aString of: aChildStructure in: aStructure	"Make sure that ==aChildStructure== with the title ==aString== can be added as child or replace an existing child in a ==aStructure==."	| child |	(aStructure isNil or: [ aStructure hasChildren not ])		ifTrue: [ ^ self ].	child := aStructure childrenDecoration		at: aString		ifAbsent: [ ^ self ].	child ~= aChildStructure		ifTrue: [ PRConflictingNameError description: self description signal: aString printString , ' conflicts in ' , aStructure title printString ]! !!PRCommand methodsFor: 'validating' stamp: 'lr 5/28/2007 16:31'!validateNestingOf: aChildStructure in: aStructure	"Make sure that ==aChildStructure== can be added as child to ==aStructure== and that ==aStructure== can have ==aChildStructure== as a child."	aStructure isNil		ifTrue: [ ^ self ].	((aStructure canBeParentOf: aChildStructure)		and: [ aChildStructure canBeChildOf: aStructure ])			ifTrue: [ ^ self ].	PRInvalidNestingError		description: self description		signal: aChildStructure title printString , ' can not be a child of ' , aStructure title printString! !!PRCopyCommand class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRCopyCommand class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!label	^ 'Copy'! !!PRCopyCommand methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:29'!defaultName	^ self uniqueName: self structure name , ' copy' in: self target! !!PRCopyCommand methodsFor: 'events' stamp: 'lr 4/15/2009 18:31'!doExecute	| structure |	super doExecute.	self target childrenDecoration		add: (structure := self structure copy			name: self name;			title: nil;			yourself).	self updateLinksFor: structure.	self answer: (self context		structure: structure)! !!PRLocationCommand class methodsFor: 'accessing-description' stamp: 'lr 5/31/2009 20:01'!descriptionName	^ MAStringDescription new		addCondition: (MACondition receiver: PRPath selector: #isValidName:)			labelled: 'Invalid structure name';		parameterName: 'name';		accessor: #name;		label: 'Name';		priority: 110;		beRequired;		yourself! !!PRLocationCommand class methodsFor: 'accessing-description' stamp: 'lr 5/31/2009 20:01'!descriptionTarget	^ PRStructureDescription new		parameterName: 'target';		accessor: #target;		label: 'Target';		priority: 100;		beRequired;		yourself! !!PRLocationCommand methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:29'!defaultName	^ self structure name! !!PRLocationCommand methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:29'!defaultTarget	^ self structure parent! !!PRLocationCommand methodsFor: 'events' stamp: 'lr 3/9/2006 11:29'!doValidate	super doValidate.	self validateChild: self structure named: self name in: self target! !!PRLocationCommand methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!name	^ name ifNil: [ name := self defaultName ]! !!PRLocationCommand methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!name: aString	name := aString! !!PRLocationCommand methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!target	^ target ifNil: [ target := self defaultTarget ]! !!PRLocationCommand methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!target: aStructure	target := aStructure! !!PRLocationCommand methodsFor: 'private' stamp: 'lr 4/15/2009 18:32'!updateLinksFor: aStructure	| structures |	structures := aStructure enumerator		everything contents.	aStructure root incomingReferences		toAll: structures;		do: [ :each | each update ].	structures do: [ :structure |		structure outgoingReferences			do: [ :link | link update ] ]! !!PRMoveCommand class methodsFor: 'accessing' stamp: 'lr 5/3/2006 16:58'!accessKey	^ $m! !!PRMoveCommand class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRMoveCommand class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isValidIn: aContext	^ (super isValidIn: aContext)		and: [ aContext structure isRoot not ]! !!PRMoveCommand class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!label	^ 'Move'! !!PRMoveCommand methodsFor: 'events' stamp: 'lr 6/12/2009 11:15'!doExecute	super doExecute.	self structure name: self name.	self structure parent = self target ifFalse: [		self target 			addChild: self structure remove ].	self updateLinksFor: self structure! !!PRMoveCommand methodsFor: 'events' stamp: 'lr 2/12/2007 19:07'!doValidate	super doValidate.	(self structure isAncestorOf: self target)		ifFalse: [ ^ self ].	PRInvalidNestingError		description: self description		signal: self structure title printString , ' can not be moved into itself'! !!PROrderCommand class methodsFor: 'accessing-description' stamp: 'lr 11/15/2009 23:42'!descriptionStructures	^ MAToManyRelationDescription new		classes: (Array with: PRStructure);		reference: (MAContainer new			add: PRStructure descriptionTitle;			add: PRStructure descriptionName;			yourself);		accessor: #structures;		label: 'Order';		priority: 200;		beDefinitive;		beOrdered;		yourself! !!PROrderCommand class methodsFor: 'testing' stamp: 'lr 3/18/2008 21:52'!isAbstract	^ false! !!PROrderCommand class methodsFor: 'testing' stamp: 'lr 11/15/2009 19:57'!isValidIn: aContext	^ (super isValidIn: aContext) and: [ aContext structure hasChildren ]! !!PROrderCommand class methodsFor: 'accessing' stamp: 'lr 3/18/2008 21:51'!label	^ 'Order'! !!PROrderCommand methodsFor: 'private' stamp: 'lr 3/18/2008 22:57'!currentStructures	^ self structure enumerator contents! !!PROrderCommand methodsFor: 'events' stamp: 'lr 11/15/2009 23:35'!doExecute	super doExecute.	self structure childrenDecoration 		setChildren: self structures! !!PROrderCommand methodsFor: 'events' stamp: 'lr 3/18/2008 22:58'!doValidate	"The order command needs to make sure that we don't loose added and that we don't reintroduce deleted structures. This code ensures that new structures are just a permutation of the existing ones."		| prev next |	super doValidate.	prev := self currentStructures.	next := structures copy.	prev do: [ :each |		(next includes: each)			ifFalse: [ structures := structures copyWith: each ] ].	next do: [ :each |		(prev includes: each)			ifFalse: [ structures := structures copyWithout: each ] ]! !!PROrderCommand methodsFor: 'accessing' stamp: 'lr 3/18/2008 22:07'!structures	^ structures ifNil: [ structures := self currentStructures ]! !!PROrderCommand methodsFor: 'accessing' stamp: 'lr 3/18/2008 22:57'!structures: aCollection	structures := aCollection! !!PRRemoveCommand class methodsFor: 'accessing' stamp: 'lr 5/3/2006 16:58'!accessKey	^ $r! !!PRRemoveCommand class methodsFor: 'accessing-description' stamp: 'lr 9/9/2009 19:05'!descriptionConfirmation	^ PRDocumentDescription new		accessor: #confirmation;		priority: 100;		beReadonly;		yourself! !!PRRemoveCommand class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRRemoveCommand class methodsFor: 'testing' stamp: 'lr 9/9/2009 18:59'!isValidIn: aContext	^ (super isValidIn: aContext) and: [ aContext structure isRoot not ]! !!PRRemoveCommand class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!label	^ 'Remove'! !!PRRemoveCommand methodsFor: 'accessing' stamp: 'lr 9/9/2009 19:31'!confirmation	^ self propertyAt: #confirmation ifAbsentPut: [		| wiki |		wiki := String streamContents: [ :stream |			| structures |			stream nextPutAll: '!!Do you really want to remove '; print: self structure title; nextPutAll: '?'; cr.			structures := self structure enumerator all contents.			structures isEmpty ifFalse: [				stream nextPutAll: 'There '; nextPutAll: (structures size > 1 ifTrue: [ 'are' ] ifFalse: [ 'is' ]); nextPutAll: ' '; print: structures size; nextPutAll: ' child '; nextPutAll: (structures size > 1 ifTrue: [ 'structures' ] ifFalse: [ 'structure' ]); nextPut: $:; cr.				structures 					do: [ :structure | stream nextPutAll: '# *'; nextPutAll: structure absolutePath; nextPutAll: '*'; cr ] ].			structures := self root incomingReferences to: self structure; collect: [ :each | each owner ].			structures isEmpty ifFalse: [				stream nextPutAll: 'There '; nextPutAll: (structures size > 1 ifTrue: [ 'are' ] ifFalse: [ 'is' ]); nextPutAll: ' '; print: structures size; nextPutAll: ' incoming '; nextPutAll: (structures size > 1 ifTrue: [ 'references' ] ifFalse: [ 'reference' ]); nextPut: $:; cr.				structures 					do: [ :structure | stream nextPutAll: '# *'; nextPutAll: structure absolutePath; nextPutAll: '*'; cr ] ] ].		(PRDocumentParser parse: wiki) owner: self structure; yourself]! !!PRRemoveCommand methodsFor: 'events' stamp: 'lr 3/28/2007 10:30'!doExecute	| parent |	super doExecute.	self root incomingReferences		toAll: (self structure enumerator			everything contents);		do: [ :each | each target: nil ].	parent := self structure parent.	self structure remove.	self answer: (self context		structure: parent)! !!PRRemoveCommand methodsFor: 'events' stamp: 'lr 3/5/2007 14:07'!doValidate	super doValidate.	self structure isRoot		ifFalse: [ ^ self ].	(PRStructureError structure: self structure)		signal: 'Unable to remove root node.'! !!PRViewCommand class methodsFor: 'accessing' stamp: 'lr 5/3/2006 16:58'!accessKey	^ $v! !!PRViewCommand class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRViewCommand class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!label	^ 'View'! !!PRViewCommand methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isLogged	^ false! !!PRViewCommand methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isView	^ true! !!PRContext class methodsFor: 'descriptions' stamp: 'lr 5/5/2009 16:57'!descriptionCommand	^ MAStringDescription new		chainAccessor: #(command label);		label: 'Command';		priority: 200;		beReadonly;		yourself! !!PRContext class methodsFor: 'descriptions' stamp: 'lr 5/5/2009 16:57'!descriptionDate	^ MADateDescription new		accessor: #(command date);		parameterName: 'date';		priority: 300;		label: 'Date';		beReadonly;		yourself! !!PRContext class methodsFor: 'descriptions' stamp: 'lr 5/5/2009 16:57'!descriptionStructure	^ PRStructureDescription new		accessor: (MASelectorAccessor read: #structure write: #setStructure:);		label: 'Structure';		priority: 100;		yourself! !!PRContext class methodsFor: 'descriptions' stamp: 'lr 5/5/2009 16:57'!descriptionTime	^ MATimeDescription new		accessor: #(command time);		parameterName: 'time';		priority: 400;		label: 'Time';		beReadonly;		yourself! !!PRContext class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRContext class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:30'!kernel: aKernel	^ self kernel: aKernel structure: aKernel root! !!PRContext class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:30'!kernel: aKernel structure: aStructure	^ self kernel: aKernel structure: aStructure command: aStructure viewCommandClass new! !!PRContext class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:30'!kernel: aKernel structure: aStructure command: aCommand	^ self new		setKernel: aKernel;		setStructure: aStructure;		setCommand: aCommand;		yourself! !!PRContext methodsFor: 'accessing' stamp: 'lr 4/10/2006 15:02'!command	"Answer the active command of this context."	^ command! !!PRContext methodsFor: 'navigation' stamp: 'lr 12/18/2009 13:50'!command: aCommand	"Create a copy of the current context with the current command replaced by ==aCommand==."	^ self structure: self structure command: aCommand! !!PRContext methodsFor: 'accessing-conveniance' stamp: 'lr 5/27/2006 17:28'!commands	"Answer a list of possible commands, dispatching through the command class."	^ PRCommand withAllConcreteClasses		select: [ :each | each isValidIn: self ]! !!PRContext methodsFor: 'enumerating' stamp: 'lr 4/11/2009 10:27'!enumerator	"Answer an enumerator on the current context."	^ self enumeratorFor: self structure! !!PRContext methodsFor: 'enumerating' stamp: 'lr 11/15/2009 20:06'!enumeratorFor: aStructure	"Answer an enumerator on ==aStructure==."	^ PRChildrenVisitor on: aStructure! !!PRContext methodsFor: 'testing' stamp: 'lr 4/10/2007 21:46'!isValid	"Answer ==true== if the receiver is a valid context."	^ self isValidCommand: self command class! !!PRContext methodsFor: 'testing' stamp: 'lr 4/10/2007 21:46'!isValidCommand: aCommandClass	"Answer ==true== if the receiver is a valid context with the current command replaced by ==aCommandClass==."	^ aCommandClass isValidIn: self! !!PRContext methodsFor: 'accessing' stamp: 'lr 4/10/2006 15:01'!kernel	"Answer the underlying kernel of this context."	^ kernel! !!PRContext methodsFor: 'accessing-conveniance' stamp: 'lr 5/10/2008 13:02'!parent	"Answer the parent structure of the current structure or nil."	^ self structure parent! !!PRContext methodsFor: 'copying' stamp: 'lr 8/14/2007 23:51'!postCopy	super postCopy.	self setCommand: command copy! !!PRContext methodsFor: 'printing' stamp: 'lr 3/9/2006 11:29'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' stucture: '; print: self structure title.	aStream nextPutAll: ' command: '; print: self command class label! !!PRContext methodsFor: 'accessing-conveniance' stamp: 'lr 3/9/2006 11:29'!root	"Answer the current root node of the structure-tree."	^ self kernel root! !!PRContext methodsFor: 'copying' stamp: 'lr 5/27/2009 16:13'!sanitize	"This method is used to prepare the receiver for persistent storage. Use it to clear temporal caches or references to UI objects."	(Pragma allNamed: #sanitize from: self class to: PRContext)		do: [ :pragma | self perform: pragma selector ].	(Pragma allNamed: #sanitize from: self command class to: PRCommand)		do: [ :pragma | self command perform: pragma selector ]! !!PRContext methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:29'!setCommand: aCommand	command := aCommand.	command setContext: self! !!PRContext methodsFor: 'initialization' stamp: 'lr 3/17/2008 16:37'!setKernel: aKernel	kernel := aKernel! !!PRContext methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:29'!setStructure: aStructure	structure := aStructure! !!PRContext methodsFor: 'accessing-conveniance' stamp: 'lr 2/8/2009 19:23'!siblings	"Answer a collection of siblings including the current structure."	^ self parent isNil 		ifTrue: [ Array with: self structure ]		ifFalse: [			(self enumeratorFor: self parent)				contents ]! !!PRContext methodsFor: 'accessing' stamp: 'lr 4/10/2006 15:02'!structure	"Answer the currently browsed structure of this context."	^ structure! !!PRContext methodsFor: 'navigation' stamp: 'lr 4/10/2007 21:46'!structure: aStructure	"Create a copy of the current context with the current structure replaced by ==aStructure== and the current command replaced by the default view."	^ self structure: aStructure command: aStructure viewCommandClass new! !!PRContext methodsFor: 'navigation' stamp: 'lr 4/10/2007 21:47'!structure: aStructure command: aCommand	"Create a copy of the current context with the current structure replaced by ==aStructure== and the current command by ==aCommand==."	^ self copy		setStructure: aStructure;		setCommand: aCommand;		yourself! !!PRDecorated methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:29'!acceptDecorated: aVisitor	self		decorationsDo: [ :each | aVisitor visit: each ]		ownerDo: [ :each | super acceptDecorated: aVisitor ]! !!PRDecorated methodsFor: 'adding' stamp: 'lr 4/10/2007 21:47'!addDecoration: aDecoration	"Add ==aDecoration== to the receiver. This message ensures that ==aDecoration== is only added once and that the decorations remain properly sorted."	^ self		addDecoration: aDecoration		ifPresent: [ :value | PRDecorationError signal: 'Decoration is already part of receiver.' ]! !!PRDecorated methodsFor: 'adding' stamp: 'lr 9/27/2007 10:39'!addDecoration: aDecoration ifPresent: aBlock	"Add ==aDecoration== to the receiver. This message ensures that the decorations remain properly sorted and that there are no duplicates. In case ==aDecoration== is already within the receiver, the existing decoration is passed into ==aBlock==."	| decoration |	decoration := self decorations		detect: [ :each | aDecoration = each ]		ifNone: [ nil ].	^ decoration isNil		ifFalse: [ aBlock value: decoration ]		ifTrue: [			self setDecorations: ((decorations				copyWith: (aDecoration					setDecorated: self;					yourself)) sort; yourself).			aDecoration ]! !!PRDecorated methodsFor: 'querying' stamp: 'lr 4/10/2007 21:47'!decorationOfClass: aClass	"Answer the first decoration of ==aClass==, raise an error if none could be found."	^ self		decorationOfClass: aClass		ifAbsent: [ PRDecorationError signal: 'Decoration not found.' ]! !!PRDecorated methodsFor: 'querying' stamp: 'lr 4/10/2007 21:47'!decorationOfClass: aClass ifAbsent: aBlock	"Answer the first decoration of ==aClass==, evaluate ==aBlock== if none could be found."	^ self decorations		detect: [ :each | aClass = each species ]		ifNone: aBlock! !!PRDecorated methodsFor: 'accessing' stamp: 'lr 5/28/2006 17:37'!decorations	"Answer the sorted decorations of the receiver."	^ decorations! !!PRDecorated methodsFor: 'enumerating' stamp: 'lr 4/10/2007 21:47'!decorationsDo: aBlock	"Evaluate ==aBlock== in the right order with each of the receiver's decorations as the argument."	self decorations do: aBlock! !!PRDecorated methodsFor: 'enumerating' stamp: 'lr 4/10/2007 21:48'!decorationsDo: aBlock ownerDo: anOwnerBlock	"Evaluate ==aBlock== and ==anOwnerBlock== in the right order with each of the receiver's decorations and the receiver as the argument."	self decorations do: [ :each |		each priority negative			ifTrue: [ aBlock value: each ] ].	anOwnerBlock value: self.	self decorations do: [ :each |		each priority positive			ifTrue: [ aBlock value: each ] ]! !!PRDecorated methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:29'!initialize	super initialize.	self setDecorations: #()! !!PRDecorated methodsFor: 'copying' stamp: 'lr 3/9/2006 11:29'!postCopy	super postCopy.	self setDecorations: (self decorations collect: [ :each |		each copy postCopyTo: self ])! !!PRDecorated methodsFor: 'removing' stamp: 'lr 4/10/2007 21:48'!removeDecoration: aDecoration	"Remove ==aDecoration== from the receiver, an error is raised if ==aDecoration== is not part of the receiver."	^ self		removeDecoration: aDecoration		ifAbsent: [ PRDecorationError signal: 'Decoration is not part of receiver.' ]! !!PRDecorated methodsFor: 'removing' stamp: 'lr 4/10/2007 21:48'!removeDecoration: aDecoration ifAbsent: aBlock	"Remove ==aDecoration== from the receiver, ==aBlock== is evaluated if ==aDecoration== is not part of the receiver."	| decoration |	decoration := self decorations		detect: [ :each | aDecoration = each ]		ifNone: [ ^ aBlock value ].	self setDecorations: (self decorations		copyWithout: (decoration			setDecorated: nil;			yourself)).	^ decoration! !!PRDecorated methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:29'!setDecorations: anArray	decorations := anArray! !!PRCase class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionDocument	^ PRDocumentDescription new		accessor: #document;		label: 'Contents';		beSearchable;		priority: 500;		beEditable;		yourself! !!PRCase methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitCase: self! !!PRCase methodsFor: 'accessing-dynamic' stamp: 'lr 2/14/2008 11:00'!contents	"Answer a wiki string representation of the receiving document."		^ self class descriptionDocument toString: (self readUsing: self class descriptionDocument)! !!PRCase methodsFor: 'accessing-dynamic' stamp: 'lr 2/14/2008 11:00'!contents: aString	self 		write: (self class descriptionDocument 			fromString: (aString ifNil: [ String new ]))		using: self class descriptionDocument! !!PRCase methodsFor: 'accessing-defaults' stamp: 'lr 10/17/2007 22:52'!defaultDocument	"Answer the default document of the receiver."	^ PRDocument new! !!PRCase methodsFor: 'accessing' stamp: 'lr 5/28/2006 17:35'!document	"Answer the document of the receiver."	^ document! !!PRCase methodsFor: 'accessing' stamp: 'lr 10/18/2007 17:43'!document: aDocument	document := aDocument.	document ifNotNil: [ document owner: self ]! !!PRCase methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!hasDocument	^ self document notNil! !!PRCase methodsFor: 'initialization' stamp: 'lr 1/15/2007 22:05'!initialize	super initialize.	self document: self defaultDocument! !!PRCase methodsFor: 'accessing-dynamic' stamp: 'lr 10/18/2007 17:31'!plainText	"Answer a plain text representation of the receiver's document."		^ PRTextWriter write: self document! !!PRCase methodsFor: 'copying' stamp: 'lr 3/9/2006 11:29'!postCopy	super postCopy.	self document: self document copy! !!PRPage class methodsFor: 'testing' stamp: 'lr 1/15/2007 21:35'!isAbstract	^ false! !!PRPage methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitPage: self! !!PRPage methodsFor: 'accessing-configuration' stamp: 'lr 4/5/2007 14:33'!defaultDocument	^ super defaultDocument		add: (PRParagraph new			add: (PRText content: 'Edit this page ...');			yourself);		yourself! !!PRFile class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionFile	^ MAFileDescription new		kind: MAExternalFileModel;		accessor: #file;		priority: 300;		label: 'File';		beEditable;		yourself! !!PRFile class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRFile class methodsFor: 'accessing' stamp: 'lr 1/8/2010 22:15'!label	^ 'File'! !!PRFile methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitFile: self! !!PRFile methodsFor: 'accessing-conveniance' stamp: 'lr 5/28/2008 15:00'!contents	^ self file contents asString! !!PRFile methodsFor: 'accessing-conveniance' stamp: 'lr 7/10/2009 17:35'!contents: aByteArray	self file contents: (aByteArray ifNil: [ ByteArray new ])! !!PRFile methodsFor: 'accessing-description' stamp: 'lr 4/4/2009 21:40'!editDescription	"Make text searchable and display a simple editor."	^ self isText		ifFalse: [ super editDescription ]		ifTrue: [			super editDescription				add: (MAMemoDescription new 					accessor: #contents;					label: 'Contents';					priority: 400;					yourself);				yourself ]! !!PRFile methodsFor: 'accessing' stamp: 'lr 11/14/2007 20:15'!file	^ file ifNil: [ file := self class descriptionFile kind new ]! !!PRFile methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!file: aFile	file := aFile! !!PRFile methodsFor: 'accessing-conveniance' stamp: 'lr 5/28/2008 15:30'!filename: aString	self file filename: aString! !!PRFile methodsFor: 'testing' stamp: 'lr 1/29/2007 17:10'!isFile	^ true! !!PRFile methodsFor: 'testing' stamp: 'lr 2/5/2009 21:30'!isImage	^ self file isImage! !!PRFile methodsFor: 'testing' stamp: 'lr 2/5/2009 21:37'!isText	^ self file isText! !!PRFile methodsFor: 'accessing-conveniance' stamp: 'lr 5/28/2008 14:43'!mimetype: aString	self file mimetype: aString! !!PRFile methodsFor: 'copying' stamp: 'lr 3/9/2006 11:29'!postCopy	super postCopy.	self file: self file copy! !!PRStructure class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!canBeChildOf: aStructureClass	^ true! !!PRStructure class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!canBeParentOf: aStructureClass	^ true! !!PRStructure class methodsFor: 'accessing-description' stamp: 'lr 3/26/2009 20:58'!descriptionName	^ MAStringDescription new		parameterName: 'name';		accessor: #name;		label: 'Name';		beSearchable;		beRequired;		yourself! !!PRStructure class methodsFor: 'accessing-description' stamp: 'lr 7/2/2009 08:10'!descriptionTags	^ MATokenDescription new		parameterName: 'tags';		accessor: #tags;		beSearchable;		label: 'Tags';		priority: 30;		yourself! !!PRStructure class methodsFor: 'accessing-description' stamp: 'lr 3/26/2009 20:58'!descriptionTitle	^ MAStringDescription new		parameterName: 'title';		accessor: #title;		beSearchable;		priority: 100;		label: 'Title';		beRequired;		beEditable;		yourself! !!PRStructure class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:30'!named: aString	^ self new		name: aString;		yourself! !!PRStructure methodsFor: 'querying-path' stamp: 'lr 4/11/2009 10:29'!absolutePath	"Answer an absolute path from the root to the receiver."	^ PRPathReference to: self! !!PRStructure methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitStructure: self! !!PRStructure methodsFor: 'actions' stamp: 'lr 4/10/2007 21:50'!addChild: aStructure	"Add ==aStructure== as child to the receiver."	^ self childrenDecoration add: aStructure! !!PRStructure methodsFor: 'testing' stamp: 'lr 4/10/2007 21:50'!canBeChildOf: aStructure	"Answer ==true== if the receiver can be a child of ==aStructure==."	^ self class canBeChildOf: aStructure class! !!PRStructure methodsFor: 'testing' stamp: 'lr 4/10/2007 21:50'!canBeParentOf: aStructure	"Answer ==true== if the receiver can be a parent of ==aStructure==."	^ self class canBeParentOf: aStructure class! !!PRStructure methodsFor: 'decorations' stamp: 'lr 9/25/2006 08:13'!childrenDecoration	"Answer a decoration with the children of the receiver. If no children exist, an empty children decoration is added to the receiver. Don't call this method directly to avoid empty children decorations."	^ self		decorationOfClass: self childrenDecorationClass		ifAbsent: [ self addDecoration: self childrenDecorationClass new ]! !!PRStructure methodsFor: 'decorations' stamp: 'lr 3/9/2006 11:30'!childrenDecorationClass	^ PRChildren! !!PRStructure methodsFor: 'accessing-commands' stamp: 'lr 5/26/2009 21:43'!defaultChildClass	"Answer the class of the structure that should be selected by default when adding children."		^ PRPage! !!PRStructure methodsFor: 'accessing-commands' stamp: 'lr 7/2/2009 18:39'!defaultChildName	^ 'untitled'! !!PRStructure methodsFor: 'accessing-commands' stamp: 'cdlm 8/7/2007 01:30'!defaultCommandClass	^ self viewCommandClass! !!PRStructure methodsFor: 'accessing-dynamic' stamp: 'lr 9/27/2009 20:27'!document	"Answer a default document to represent the receiver, by default just embed itself."	^ PRInternalLink new		embedded: true;		reference: '.';		owner: self;		target: self;		yourself! !!PRStructure methodsFor: 'accessing-commands' stamp: 'lr 6/2/2006 09:20'!editCommandClass	"Answer an instance of the default edit command of the receiver."	^ PREditCommand! !!PRStructure methodsFor: 'accessing-description' stamp: 'lr 4/4/2009 17:34'!editDescription	"Answer the descriptions that edit the receiver."	^ self description select: [ :each | each isEditable ]! !!PRStructure methodsFor: 'querying-relations' stamp: 'lr 3/9/2006 11:30'!enumerator	"Answer an enumerator on the children of the receiver."	^ PRChildrenVisitor on: self! !!PRStructure methodsFor: 'querying' stamp: 'lr 5/2/2009 09:55'!findAncestor: aConditionBlock	"Find the first structure starting at the receiver going up the parent chain, that satisfies the condition in aConditionBlock. Answer nil, if not present."		^ self findAncestor: aConditionBlock ifAbsent: [ nil ]! !!PRStructure methodsFor: 'querying' stamp: 'lr 5/2/2009 09:53'!findAncestor: aConditionBlock ifAbsent: anAbsentBlock	"Find the first structure starting at the receiver going up the parent chain, that satisfies the condition in aConditionBlock. Evaluate anAbsentBlock, if not present."		| current |	current := self.	[ (aConditionBlock value: current)		ifTrue: [ ^ current ].	  (current := current parent) isNil ]			whileFalse.	^ anAbsentBlock value! !!PRStructure methodsFor: 'querying-relations' stamp: 'lr 10/30/2006 20:15'!fullTextSearch	"Answer a visitor searching for text starting at the receiver."	^ PRFullTextSearch on: self! !!PRStructure methodsFor: 'testing' stamp: 'lr 9/27/2007 10:04'!hasChildren	"Answer ==true== if the receiver has got children, they might not be visible however."	self enumerator 		do: [ :each | ^ true ].	^ false! !!PRStructure methodsFor: 'testing' stamp: 'lr 4/7/2009 00:08'!hasDocument	"Answer wether the receiver has a changable document."	^ false! !!PRStructure methodsFor: 'testing' stamp: 'lr 4/10/2007 21:54'!hasParent	"Answer ==true== if the receiver has got a parent. This is the negation of ==#isRoot==."	^ self parent notNil! !!PRStructure methodsFor: 'querying-relations' stamp: 'lr 2/8/2009 19:24'!incomingReferences	"Answer a visitor on incoming references to structures being specified (using ==to:== and ==toAll:==) to the visitor before starting. The search will take off from the receiver."	^ PRIncomingReferences on: self! !!PRStructure methodsFor: 'testing' stamp: 'lr 4/10/2007 21:51'!isAllowedCommand: aCommandClass in: aContext 	"Answer ==true== if the receiver accepts ==aCommandClass== as allowed in ==aContext== on the receiver. If a command class is allowed is a security question and should therefore only depend on the permissions in the current context. The default implementation delegates the decision to the decorations of the receiver. Therefor this method should never be overridden by subclasses."	^ self decorations allSatisfy: [ :each |		each			isAllowedCommand: aCommandClass			in: aContext ]! !!PRStructure methodsFor: 'testing' stamp: 'lr 4/10/2007 21:51'!isAncestorOf: aStructure	"Answer ==true== if the receiver is an ancestor of ==aStructure==."	^ aStructure parents includes: self! !!PRStructure methodsFor: 'testing' stamp: 'lr 4/10/2007 21:51'!isApplyableCommand: aCommandClass in: aContext 	"Answer ==true== if the receiver accepts ==aCommandClass== as applyable in ==aContext== on the receiver. If a command class is applyable or not is a question of saneness and compatibility, not of security. This method should be overridden by subclasses who want to forbid some commands."	^ self isKindOf: aCommandClass structureClass! !!PRStructure methodsFor: 'testing' stamp: 'lr 1/29/2007 17:09'!isFile	^ false! !!PRStructure methodsFor: 'testing' stamp: 'lr 4/10/2007 21:51'!isRoot	"Answer ==true== if the receiver is the root of the Pier model. This is the negation of ==#hasParent==."	^ self parent isNil! !!PRStructure methodsFor: 'testing' stamp: 'lr 4/10/2007 21:52'!isValidCommand: aCommandClass in: aContext 	"Answer ==true== if the receiver accepts to execute ==aCommandClass== in ==aContext==. This message is the combination of ==#isApplyableCommand:in:== and ==#isAllowedCommand:in:==. It should not be overridden."	^ (self isApplyableCommand: aCommandClass in: aContext)		and: [ self isAllowedCommand: aCommandClass in: aContext ]! !!PRStructure methodsFor: 'accessing-dynamic' stamp: 'lr 2/18/2009 14:21'!kernel	"Answer the kernel of the receiver."	| root |	root := self root.	^ PRKernel instances		detect: [ :each | each root = root ]		ifNone: [ self error: self title , ' is not part of a kernel.' ]! !!PRStructure methodsFor: 'accessing-dynamic' stamp: 'lr 4/11/2009 23:59'!level	"Answer the nesting level of the receiver, the root has a level of 1."	| level current |	level := 1.	current := self.	[ current isRoot ] whileFalse: [ 		level := level + 1.		current := current parent ].	^ level! !!PRStructure methodsFor: 'querying-path' stamp: 'lr 4/11/2009 18:10'!lookupIncompletePath: aString	"Lookup the path ==aString== as far as possible and answer an association of the last structure and the failing path element."		^ PRIncompletePathLookup start: self path: aString! !!PRStructure methodsFor: 'querying-path' stamp: 'lr 4/11/2009 11:10'!lookupPath: aString	"Lookup the path ==aString== starting at the receiver, answer ==nil== in case the structure can't be found."		^ self lookupPath: aString ifAbsent: [ nil ]! !!PRStructure methodsFor: 'querying-path' stamp: 'lr 4/11/2009 23:55'!lookupPath: aString ifAbsent: aBlock	"Lookup the path ==aString== starting at the receiver, evaluate ==aBlock== in case of an error."		^ PRPathLookup start: self path: aString ifAbsent: aBlock! !!PRStructure methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!name	"Answer the name of the receiver. The name should be simple and only contain letters and numbers, since it is used as an identifier within restrictive protocols."	^ name! !!PRStructure methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!name: aString	name := aString! !!PRStructure methodsFor: 'querying-relations' stamp: 'lr 2/8/2009 19:24'!outgoingReferences	"Answer a visitor on all outgoing references taking off at the receiver. The visited objects are instances of ==*PRInternalLink*==."	^ PROutgoingReferences on: self! !!PRStructure methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!parent	"Answer the parent structure of the receiver."	^ parent! !!PRStructure methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!parent: aStructure	parent := aStructure! !!PRStructure methodsFor: 'accessing-dynamic' stamp: 'lr 4/11/2009 23:58'!parents	"Answer an ordered collection of all the parents of the receiver up and including the receiver."		| current result |	current := self.	result := OrderedCollection with: self.	[ current isRoot ]		whileFalse: [ result addFirst: (current := current parent) ].	^ result! !!PRStructure methodsFor: 'copying' stamp: 'lr 4/15/2009 18:06'!postCopy	super postCopy.	self parent: nil; tags: self tags copy.	self description do: [ :description |		description isDocumentDescription ifTrue: [			self				write: (self readUsing: description) copy				using: description ] ]! !!PRStructure methodsFor: 'copying' stamp: 'lr 4/15/2009 18:02'!postCopyTo: aStructure	self parent: aStructure! !!PRStructure methodsFor: 'printing' stamp: 'lr 3/9/2006 11:30'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' name: '; print: self name! !!PRStructure methodsFor: 'querying-path' stamp: 'lr 4/11/2009 10:33'!relativePathFrom: aStructrue	"Answer a relative path from ==aStructure== to the receiver."		^ aStructrue relativePathTo: self! !!PRStructure methodsFor: 'querying-path' stamp: 'lr 4/11/2009 10:37'!relativePathTo: aStructure	"Answer a relative path from the receiver to ==aStructure==."		^ PRPathReference from: self to: aStructure! !!PRStructure methodsFor: 'actions' stamp: 'lr 6/2/2006 09:22'!remove	"Remove the receiver from the parent structure."	self parent childrenDecoration remove: self! !!PRStructure methodsFor: 'accessing-dynamic' stamp: 'lr 4/11/2009 23:57'!root	"Answer the root structure of the receiver."		| current |	current := self.	[ current isRoot ]		whileFalse: [ current := current parent ].	^ current! !!PRStructure methodsFor: 'accessing' stamp: 'lr 4/5/2007 17:59'!tags	"Answer a list of tags specific to the receiver."	^ tags ifNil: [ tags := #() ]! !!PRStructure methodsFor: 'accessing' stamp: 'lr 3/9/2007 14:20'!tags: anArray	tags := anArray! !!PRStructure methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!title	"Answer the title of the receiver, essentially the name but starting uppercase."	^ title ifNil: [ title := self name capitalized ]! !!PRStructure methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!title: aString	title := aString! !!PRStructure methodsFor: 'testing' stamp: 'lr 2/8/2009 19:24'!validateCommand: aCommand 	"Validates ==Command== to be executed within the context of the receiver. Throw an exception if there is something wrong with the command."	self decorations do: [ :each | each validateCommand: aCommand ]! !!PRStructure methodsFor: 'accessing-commands' stamp: 'lr 6/2/2006 09:20'!viewCommandClass	"Answer the default view command of the receiver. Most likely you never need to change the default implementation."	^ PRViewCommand! !!PRChildren class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRChildren methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitChildren: self! !!PRChildren methodsFor: 'actions' stamp: 'lr 11/15/2009 23:24'!add: aStructure	"Add ==aStructure== as a child to the receiver."		(self isValidChild: aStructure)		ifFalse: [ self error: aStructure title , ' is an invalid child in ' , self decorated title , '.' ].	children := children 		copyWith: (aStructure			parent: self decorated;			yourself).	self triggerStructureAdded: aStructure.	^ aStructure! !!PRChildren methodsFor: 'accessing-children' stamp: 'lr 4/10/2007 21:43'!at: aString	"Answer the child structure with the name ==aString==, raise an error if the child can't be found."	^ self at: aString ifAbsent: [ self error: 'Child not found.' ]! !!PRChildren methodsFor: 'accessing-children' stamp: 'lr 3/17/2008 16:21'!at: aString ifAbsent: aBlock	"Answer the child structure with the name ==aString==, evaluate ==aBlock== if the child can't be found."	^ children		detect: [ :each | each name = aString ]		ifNone: aBlock! !!PRChildren methodsFor: 'accessing-children' stamp: 'lr 3/17/2008 16:20'!at: aString ifPresent: aBlock	^ aBlock value: (self at: aString ifAbsent: [ ^ nil ])! !!PRChildren methodsFor: 'accessing-children' stamp: 'lr 11/15/2009 23:27'!children	"Answer an array of the receivers children."		^ children! !!PRChildren methodsFor: 'accessing-children' stamp: 'lr 3/17/2008 16:25'!includes: aString	self at: aString ifAbsent: [ ^ false ].	^ true! !!PRChildren methodsFor: 'initialization' stamp: 'lr 3/17/2008 16:25'!initialize	super initialize.	self setChildren: OrderedCollection new! !!PRChildren methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!isEmpty	^ children isEmpty! !!PRChildren methodsFor: 'testing' stamp: 'lr 6/15/2009 19:50'!isValidChild: aStructure	^ (PRPath isValidName: aStructure name)		and: [ aStructure parent isNil		and: [ (self includes: aStructure name) not		and: [ (self decorated canBeParentOf: aStructure)		and: [ (aStructure canBeChildOf: self decorated) ] ] ] ]! !!PRChildren methodsFor: 'copying' stamp: 'lr 11/15/2009 23:27'!postCopyTo: anObject	super postCopyTo: anObject.	children := children collect: [ :each | 		each copy postCopyTo: self decorated ]! !!PRChildren methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!priority	^ 200! !!PRChildren methodsFor: 'actions' stamp: 'TestRunner 11/15/2009 23:29'!remove: aStructure	"Remove ==aStructure== from the receiver."	| index |	index := children 		indexOf: aStructure 		ifAbsent: [ ^ nil ].	children := (children copyFrom: 1 to: index - 1) , 		(children copyFrom: index + 1 to: children size).	self triggerStructureRemoved: aStructure.	self isEmpty		ifTrue: [ self remove ].	^ aStructure		parent: nil;		yourself! !!PRChildren methodsFor: 'initialization' stamp: 'lr 11/15/2009 23:26'!setChildren: anArray	children := anArray asArray! !!PRChildren methodsFor: 'accessing' stamp: 'lr 5/28/2006 17:47'!size	"Answer the number of children of the receiver."	^ self children size! !!PRChildren methodsFor: 'events' stamp: 'lr 3/9/2006 11:29'!triggerStructureAdded: aStructure	PRDecoration withAllConcreteClassesDo: [ :each | each onStructureAdded: aStructure ]! !!PRChildren methodsFor: 'events' stamp: 'lr 3/9/2006 11:29'!triggerStructureRemoved: aStructure	PRDecoration withAllConcreteClassesDo: [ :each | each onStructureRemoved: aStructure ]! !!PRDecoration class methodsFor: 'events' stamp: 'lr 3/9/2006 11:30'!onStructureAdded: aStructure	"This event is called whenever a structure is added as a child to another structure."! !!PRDecoration class methodsFor: 'events' stamp: 'lr 3/9/2006 11:30'!onStructureRemoved: aStructure	"This event is called whenever a structure is removed as a child from another structure."! !!PRDecoration methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!<= aDecoration	^ self priority <= aDecoration priority! !!PRDecoration methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!= aDecoration	^ self species = aDecoration species! !!PRDecoration methodsFor: 'accessing' stamp: 'lr 5/28/2006 17:45'!decorated	"Answer the owner of the receiver, the decorated object."	^ decorated! !!PRDecoration methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!hash	^ self species hash! !!PRDecoration methodsFor: 'testing' stamp: 'lr 4/10/2007 21:48'!isAllowedCommand: aCommandClass in: aContext 	"Answer ==true== if the receiver allows one to execute ==aCommandClass== in ==aContext==. The default decoration is fine with all the commands, subclasses might restrict to a selected set of commands within a given context. This method might be overridden by decorations that want to control the security."	^ true! !!PRDecoration methodsFor: 'copying' stamp: 'lr 3/9/2006 11:29'!postCopy	super postCopy.	self setDecorated: nil! !!PRDecoration methodsFor: 'copying' stamp: 'lr 3/9/2006 11:29'!postCopyTo: anObject	super postCopyTo: anObject.	self setDecorated: anObject! !!PRDecoration methodsFor: 'accessing' stamp: 'lr 5/29/2006 09:27'!priority	"The default priority returns a number that defines in witch order the visitors will traverse through decorated objects. Negative numbers are visited before the decorated objects, positive numbers afterwards."	^ self subclassResponsibility! !!PRDecoration methodsFor: 'utilities' stamp: 'lr 3/9/2006 11:29'!remove	self decorated notNil		ifFalse: [ ^ self ].	self decorated		removeDecoration: self		ifAbsent: [ ]! !!PRDecoration methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:29'!setDecorated: aStructure	decorated := aStructure! !!PRDecoration methodsFor: 'testing' stamp: 'lr 2/8/2009 19:23'!validateCommand: aCommand 	"Validates ==Command== to be executed within the context of the receiver."! !!PRAnchor class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRAnchor class methodsFor: 'accessing' stamp: 'lr 4/5/2007 13:10'!markup	^ '@'! !!PRAnchor class methodsFor: 'instance-creation' stamp: 'lr 4/5/2007 13:08'!named: aString	^ self new name: aString! !!PRAnchor class methodsFor: 'instance-creation' stamp: 'lr 4/24/2007 20:45'!parse: aString with: aParser	^ aParser add: (self named: (aString allButFirst: self markup size))! !!PRAnchor methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!= anObject	^ super = anObject		and: [ self name = anObject name ]! !!PRAnchor methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitAnchor: self! !!PRAnchor methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!hash	^ super hash bitXor: self name hash! !!PRAnchor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!name	^ name! !!PRAnchor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!name: aString	name := aString! !!PRDocument class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRDocument methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitDocument: self! !!PRDocumentGroup class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:30'!with: aDocumentItem	^ self new		add: aDocumentItem;		yourself! !!PRDocumentGroup class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:30'!withAll: aCollection	^ self new		addAll: aCollection;		yourself! !!PRDocumentGroup methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!= anObject	^ super = anObject		and: [ self children = anObject children ]! !!PRDocumentGroup methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitDocumentGroup: self! !!PRDocumentGroup methodsFor: 'adding' stamp: 'lr 3/20/2006 19:06'!add: aDocumentItem	self setChildren: (self children copyWith: aDocumentItem)! !!PRDocumentGroup methodsFor: 'adding' stamp: 'lr 7/31/2007 21:22'!addAll: aCollection	self setChildren: self children , aCollection! !!PRDocumentGroup methodsFor: 'accessing' stamp: 'lr 5/28/2006 20:32'!children	"Answer the children of the receiver."	^ children! !!PRDocumentGroup methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!hasChildren	^ self children notEmpty! !!PRDocumentGroup methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!hash	^ super hash bitXor: self children hash! !!PRDocumentGroup methodsFor: 'initialization' stamp: 'lr 4/4/2007 15:05'!initialize	super initialize.	self setChildren: #()! !!PRDocumentGroup methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!owner: anObject	super owner: anObject.	self children do: [ :each | each owner: anObject ]! !!PRDocumentGroup methodsFor: 'copying' stamp: 'lr 2/12/2007 19:07'!postCopy	super postCopy.	self setChildren: (self children		collect: [ :each | each copy ])! !!PRDocumentGroup methodsFor: 'initialization' stamp: 'lr 3/20/2006 19:06'!setChildren: aCollection	children := aCollection! !!PRDocumentGroup methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:29'!size	^ self children size! !!PRDocumentGroup methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:29'!text	^ String streamContents: [ :stream |		self children do: [ :each |			stream nextPutAll: each text ] ]! !!PRBoldFormat class methodsFor: 'testing' stamp: 'lr 3/30/2007 19:40'!isAbstract	^ false! !!PRBoldFormat class methodsFor: 'accessing' stamp: 'lr 4/5/2007 15:36'!markup	^ '""'! !!PRBoldFormat methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitBoldFormat: self! !!PRFormat class methodsFor: 'accessing' stamp: 'lr 9/27/2007 10:32'!markup	self subclassResponsibility! !!PRFormat class methodsFor: 'instance-creation' stamp: 'lr 4/24/2007 21:10'!parse: aString with: aParser	^ self withAll: (aParser parseText: (aString copyFrom: self markup size + 1 to: aString size - self markup size))! !!PRFormat methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitFormat: self! !!PRItalicFormat class methodsFor: 'testing' stamp: 'lr 3/30/2007 19:40'!isAbstract	^ false! !!PRItalicFormat class methodsFor: 'accessing' stamp: 'lr 4/5/2007 15:36'!markup	^ ''''''! !!PRItalicFormat methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitItalicFormat: self! !!PRMonospaceFormat class methodsFor: 'testing' stamp: 'lr 3/30/2007 19:40'!isAbstract	^ false! !!PRMonospaceFormat class methodsFor: 'accessing' stamp: 'lr 3/30/2007 20:40'!markup	^ '=='! !!PRMonospaceFormat methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitMonospaceFormat: self! !!PRStrikethroughFormat class methodsFor: 'testing' stamp: 'lr 3/30/2007 19:40'!isAbstract	^ false! !!PRStrikethroughFormat class methodsFor: 'accessing' stamp: 'lr 3/30/2007 19:44'!markup	^ '--'! !!PRStrikethroughFormat methodsFor: 'visiting' stamp: 'lr 5/31/2007 07:46'!accept: aVisitor	aVisitor visitStrikethroughFormat: self! !!PRSubscriptFormat class methodsFor: 'testing' stamp: 'lr 3/30/2007 19:40'!isAbstract	^ false! !!PRSubscriptFormat class methodsFor: 'accessing' stamp: 'lr 3/30/2007 19:46'!markup	^ '@@'! !!PRSubscriptFormat methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitSubscriptFormat: self! !!PRSuperscriptFormat class methodsFor: 'testing' stamp: 'lr 3/30/2007 19:40'!isAbstract	^ false! !!PRSuperscriptFormat class methodsFor: 'accessing' stamp: 'lr 3/30/2007 19:45'!markup	^ '^^'! !!PRSuperscriptFormat methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitSuperscriptFormat: self! !!PRUnderlineFormat class methodsFor: 'testing' stamp: 'lr 3/30/2007 19:43'!isAbstract	^ false! !!PRUnderlineFormat class methodsFor: 'accessing' stamp: 'lr 3/30/2007 19:43'!markup	^ '__'! !!PRUnderlineFormat methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitUnderlineFormat: self! !!PRHeader class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRHeader class methodsFor: 'accessing' stamp: 'lr 4/5/2007 13:10'!markup	^ '!!'! !!PRHeader class methodsFor: 'instance-creation' stamp: 'lr 4/24/2007 21:27'!parse: aString with: aParser	| index string |	index := 0. string := aString.	[ string beginsWith: self markup ] whileTrue: [		index := index + 1.		string := string allButFirst: self markup size ].	^ aParser add: (self withAll: (aParser parseText: string) level: index)! !!PRHeader class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:30'!withAll: aCollection level: anInteger	^ (self withAll: aCollection)		level: anInteger;		yourself! !!PRHeader methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!= anObject	^ super = anObject		and: [ self level = anObject level ]! !!PRHeader methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitHeader: self! !!PRHeader methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!hash	^ super hash bitXor: self level hash! !!PRHeader methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!level	^ level! !!PRHeader methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!level: anInteger	level := anInteger! !!PRExternalLink class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRExternalLink class methodsFor: 'testing' stamp: 'lr 8/26/2007 17:36'!isValidReference: aString	^ aString includesSubString: '://'! !!PRExternalLink methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitExternalLink: self! !!PRExternalLink methodsFor: 'testing' stamp: 'lr 4/1/2009 22:19'!isExternal	^ true! !!PRExternalLink methodsFor: 'accessing' stamp: 'lr 9/8/2008 21:30'!url	"Answer the URL the receiver is pointing to."	^ self urlPrefix , self urlEntry , self urlPostfix! !!PRExternalLink methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:29'!urlEntry	^ self reference! !!PRExternalLink methodsFor: 'accessing-dynamic' stamp: 'lr 10/20/2006 11:43'!urlPostfix	^ ''! !!PRExternalLink methodsFor: 'accessing-dynamic' stamp: 'lr 10/20/2006 11:43'!urlPrefix	^ ''! !!PRMailLink class methodsFor: 'testing' stamp: 'lr 9/22/2008 08:28'!isValidReference: aString	| index |	index := aString indexOf: $@ ifAbsent: [ ^ false ].	index := aString indexOf: $. startingAt: index ifAbsent: [ ^ false ].	^ aString allSatisfy: [ :each | each isAlphaNumeric or: [ '@-.' includes: each ] ]! !!PRMailLink class methodsFor: 'accessing' stamp: 'lr 1/9/2009 19:20'!priority	^ 50! !!PRMailLink methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitMailLink: self! !!PRMailLink methodsFor: 'accessing-dynamic' stamp: 'lr 5/24/2006 11:12'!urlEntry	^ String streamContents: [ :stream |		super urlEntry do: [ :each |			2 atRandom = 1				ifTrue: [ stream nextPut: each ]				ifFalse: [ stream nextPut: $%; nextPutAll: ((each asciiValue printStringBase: 16)		padded: #left to: 2 with: $0) ] ] ]! !!PRMailLink methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:29'!urlPrefix	^ 'mailto:'! !!PRInternalLink class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRInternalLink class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isValidReference: aString	^ true! !!PRInternalLink class methodsFor: 'accessing' stamp: 'lr 1/9/2009 19:20'!priority	^ 100! !!PRInternalLink class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:30'!reference: aString	| index |	^ (index := aString indexOf: $@) isZero		ifTrue: [ super reference: aString ]		ifFalse: [			self new				reference: (aString copyFrom: 1 to: index - 1);				anchor: (aString copyFrom: index + 1 to: aString size);				yourself ]! !!PRInternalLink methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!= anObject	^ super = anObject		and: [ self anchor = anObject anchor ]! !!PRInternalLink methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitInternalLink: self! !!PRInternalLink methodsFor: 'accessing' stamp: 'lr 5/28/2006 20:48'!anchor	"Answer an anchor string the receiver is pointing to."	^ anchor! !!PRInternalLink methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!anchor: aString	anchor := aString! !!PRInternalLink methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!hasAnchor	^ self anchor notNil! !!PRInternalLink methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!hash	^ super hash bitXor: self anchor hash! !!PRInternalLink methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!isBroken	^ self target isNil! !!PRInternalLink methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!isInternal	^ true! !!PRInternalLink methodsFor: 'accessing' stamp: 'lr 4/24/2009 13:46'!target	"Answer the referenced structure. Do a lookup, if we haven't cached a real object reference."	(target isNil and: [ self owner notNil and: [ self reference notNil ] ])		ifTrue: [ target := self owner lookupPath: self reference ifAbsent: [ nil ] ].	^ target! !!PRInternalLink methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!target: aStructure	target := aStructure! !!PRInternalLink methodsFor: 'accessing-dynamic' stamp: 'lr 2/12/2007 19:07'!title	^ self target isNil		ifTrue: [ super title ]		ifFalse: [ self target title ]! !!PRInternalLink methodsFor: 'actions' stamp: 'lr 4/15/2009 18:15'!update	"This method will be sent to all the internal-links whenever the owner is renamed or moved to a different location in the structure tree. It automatically adjusts the receivers state, so that the reference still points to the right location and doesn't get broken. The method tries to keep relative and absolute links consistent, whenever possible."		| absolute |	(self target isNil or: [ self owner isNil ])		ifTrue: [ ^ self ].	absolute := self reference notNil		and: [ self reference isEmpty not		and: [ self reference first = PRPath pathDelimiter ] ].	reference := absolute		ifTrue: [ self target absolutePath ]		ifFalse: [ self owner relativePathTo: self target ]! !!PRLink class methodsFor: 'instance-creation' stamp: 'lr 12/21/2009 14:14'!escape: aString	^ PRDocumentParser escape: aString all: (Array with: self markup with: self markupAlias with: self markupAnchor with: self markupEmbedded with: self markupParameter with: self markupParameterValue)! !!PRLink class methodsFor: 'instance-creation' stamp: 'lr 4/5/2007 15:16'!fromString: aString	| classes |	classes := self withAllConcreteClasses		select: [ :each | each isValidReference: aString ].	classes sort: [ :a :b | a priority < b priority ].	^ classes first reference: aString! !!PRLink class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isValidReference: aString	self subclassResponsibility! !!PRLink class methodsFor: 'accessing' stamp: 'lr 4/5/2007 15:13'!markup	^ '*'! !!PRLink class methodsFor: 'accessing' stamp: 'lr 4/5/2007 15:12'!markupAlias	^ '>'! !!PRLink class methodsFor: 'accessing' stamp: 'lr 4/5/2007 15:12'!markupAnchor	^ '@'! !!PRLink class methodsFor: 'accessing' stamp: 'lr 4/5/2007 15:12'!markupEmbedded	^ '+'! !!PRLink class methodsFor: 'accessing' stamp: 'lr 8/26/2007 17:40'!markupParameter	^ '|'! !!PRLink class methodsFor: 'accessing' stamp: 'lr 12/21/2009 14:14'!markupParameterValue	^ '='! !!PRLink class methodsFor: 'instance-creation' stamp: 'lr 12/21/2009 14:10'!parse: aString with: aParser	| string index embedded alias params |	string := aString copyFrom: self markup size + 1 to: aString size - self markup size.	embedded := aString beginsWith: self markupEmbedded.	index := aParser findFirst: self markupAlias at: 1 in: string.	index isZero		ifTrue: [ alias := #() ]		ifFalse: [			alias := aParser parseText: (string copyFrom: 1 to: index - 1).			alias isEmpty ifTrue: [ alias := alias copyWith: (PRText content: '') ].			string := string copyFrom: index + 1 to: string size ].	index := aParser findFirst: self markupParameter at: 1 in: string.	index isZero		ifTrue: [ params := #() ]		ifFalse: [			params := self parseParameters: (string copyFrom: index + 1 to: string size) with: aParser.			string := string copyFrom: 1 to: index - 1 ].	^ (self fromString: (aParser class unescape: string))		parameters: params;		embedded: embedded;		addAll: alias;		yourself! !!PRLink class methodsFor: 'instance-creation' stamp: 'lr 12/21/2009 14:15'!parseParameters: aString with: aParser	| index string result parameter |	index := 1.	string := aString.	result := OrderedCollection new.	[ string isEmpty ] whileFalse: [		index := aParser findFirst: self markupParameter at: 1 in: string.		index := index < 1 			ifTrue: [ string size ]			ifFalse: [ index - self markupParameter size ].		parameter := string first: index.		string := string allButFirst: (string size min: index + self markupParameter size).		parameter isEmpty ifFalse: [ 			index := aParser findFirst: self markupParameterValue at: 1 in: parameter.			result add: (index isZero 				ifTrue: [ (aParser class unescape: parameter) -> nil ]				ifFalse: [					(aParser class unescape: (parameter copyFrom: 1 to: index - 1))						-> (aParser class unescape: (parameter copyFrom: index + self markupParameterValue size to: parameter size)) ]) ] ].	^ result! !!PRLink class methodsFor: 'accessing' stamp: 'lr 1/9/2009 19:18'!priority	^ 0! !!PRLink class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:30'!reference: aString	^ self new		reference: aString;		yourself! !!PRLink methodsFor: 'comparing' stamp: 'lr 8/27/2007 10:28'!= anObject	^ super = anObject		and: [ self reference = anObject reference		and: [ self embedded = anObject embedded		and: [ self parameters = anObject parameters ] ] ]! !!PRLink methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitLink: self! !!PRLink methodsFor: 'accessing-dynamic' stamp: 'lr 5/28/2006 20:39'!alias	"Answer the alias of the receiver or an empty string if none."	^ self text! !!PRLink methodsFor: 'accessing' stamp: 'lr 4/10/2007 21:49'!embedded	"Answer ==true== if the reference should be embedded."	^ embedded! !!PRLink methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!embedded: aBoolean	embedded := aBoolean! !!PRLink methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!hasAlias	^ self hasChildren! !!PRLink methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!hasAnchor	^ false! !!PRLink methodsFor: 'accessing-parameters' stamp: 'lr 10/9/2008 12:08'!hasParameter: aKey	self		parameterAt: aKey		ifAbsent: [ ^ false ].	^ true! !!PRLink methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!hash	^ super hash bitXor: (self reference hash bitXor: self embedded hash)! !!PRLink methodsFor: 'initialization' stamp: 'lr 1/30/2009 20:03'!initialize	super initialize.	self embedded: false.	self parameters: #()! !!PRLink methodsFor: 'testing' stamp: 'lr 4/10/2007 21:49'!isBroken	"Answer ==true== if the receiver is broken."	^ false! !!PRLink methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!isEmbedded	^ self embedded! !!PRLink methodsFor: 'testing' stamp: 'lr 4/1/2009 22:18'!isExternal	^ false! !!PRLink methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!isInternal	^ false! !!PRLink methodsFor: 'testing' stamp: 'lr 4/16/2007 12:00'!isLink	^ true! !!PRLink methodsFor: 'accessing' stamp: 'lr 4/6/2009 13:22'!owner	^ owner! !!PRLink methodsFor: 'accessing' stamp: 'lr 4/15/2009 18:12'!owner: anObject	super owner: (owner := anObject)! !!PRLink methodsFor: 'accessing-parameters' stamp: 'lr 9/8/2008 17:17'!parameterAt: aKey	^ self parameterAt: aKey ifAbsent: [ nil ]! !!PRLink methodsFor: 'accessing-parameters' stamp: 'lr 1/30/2009 20:03'!parameterAt: aKey ifAbsent: aBlock	| association |	association := self parameters		detect: [ :assoc | assoc key = aKey ] 		ifNone: [ ^ aBlock value ].	^ association value! !!PRLink methodsFor: 'accessing-parameters' stamp: 'lr 2/2/2009 19:08'!parameterAt: aKey ifPresent: aBlock	^ aBlock value: (self parameterAt: aKey ifAbsent: [ ^ nil ])! !!PRLink methodsFor: 'accessing-parameters' stamp: 'lr 1/30/2009 20:03'!parameterAt: aKey put: aValue	self parameters do: [ :assoc |		assoc key = aKey ifTrue: [ 			assoc value: aValue. 			^ aValue ] ].	self parameters: (self parameters		copyWith: aKey -> aValue).	^ aValue! !!PRLink methodsFor: 'accessing' stamp: 'lr 5/20/2008 08:20'!parameters	"Answer an array of parameters."	^ parameters! !!PRLink methodsFor: 'accessing' stamp: 'lr 8/27/2007 10:41'!parameters: aCollection	parameters := aCollection asArray! !!PRLink methodsFor: 'copying' stamp: 'lr 4/4/2009 11:50'!postCopy	super postCopy.	self parameters: (self parameters		collect: [ :each | each copy ])! !!PRLink methodsFor: 'accessing' stamp: 'lr 5/28/2006 20:39'!reference	"Answer the reference of the receiver."	^ reference! !!PRLink methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!reference: aString	reference := aString! !!PRLink methodsFor: 'accessing-dynamic' stamp: 'lr 1/9/2009 19:26'!text	| text |	^ (text := super text) isEmpty 		ifTrue: [ self reference ]		ifFalse: [ text ]! !!PRLink methodsFor: 'accessing-dynamic' stamp: 'lr 10/20/2006 11:40'!title	"Answer a title of the link, this is should never be nil."	^ self reference! !!PRLink methodsFor: 'actions' stamp: 'lr 4/15/2009 17:36'!update	"Update the dynamic information of links, such as references and links."! !!PRValueLink class methodsFor: 'testing' stamp: 'lr 1/9/2009 19:20'!isAbstract	^ false! !!PRValueLink class methodsFor: 'testing' stamp: 'lr 1/9/2009 20:19'!isValidReference: aString	^ aString beginsWith: 'value:'! !!PRValueLink methodsFor: 'visiting' stamp: 'lr 5/13/2009 11:46'!accept: aVisitor	aVisitor visitValueLink: self! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/22/2009 12:58'!childrenIn: aContext	<value: 'children' comment: 'Display immediate children of the current structure.'>	^ self lookupStructure: aContext structure do: [ :structure |		self			formatStructureCollection: (aContext				enumeratorFor: structure) 			in: aContext ]! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/22/2009 12:57'!contentsIn: aContext	<value: 'contents' comment: 'Display all the children of the current structure.'>	^ self lookupStructure: aContext structure do: [ :structure |		self 			formatStructureCollection: (aContext				enumeratorFor: structure) all			in: aContext ]! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/13/2009 09:30'!contextIn: aContext	<value: 'context' comment: 'Display the current context.'>	^ self formatDescribed: aContext default: #(command label)! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/1/2009 21:50'!dateIn: aContext	<value: 'date' comment: 'Display the current date.'>	^ Date today! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/1/2009 21:51'!editedIn: aContext	<value: 'edited' comment: 'Display the last performed context.'>		^ self lookupStructure: aContext structure do: [ :structure |		aContext kernel persistency			reverseDo: [ :each | ^ self contextIn: each ]			for: structure.		nil ]! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/22/2009 12:59'!findIn: aContext	<value: 'find' comment: 'Display all the structures matching the query parameter.'>	^ self parameterAt: 'query' ifPresent: [ :query |		self lookupStructure: aContext structure do: [ :structure |			self				formatStructureCollection: (structure fullTextSearch					subString: query)				in: aContext ] ]! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/22/2009 12:59'!firstIn: aContext	<value: 'first' comment: 'Display the first sibling of the current structure.'>		^ self lookupStructure: aContext structure do: [ :structure |		self 			formatStructure: (aContext structure: structure)				siblings first			in: aContext ]! !!PRValueLink methodsFor: 'private' stamp: 'lr 4/1/2009 22:13'!formatCollection: aCollection	"Format a collection of document objects or strings."		| collection separator |	collection := Array streamContents: [ :stream |		aCollection do: [ :each |			each isNil ifFalse: [ 				each isString					ifTrue: [ stream nextPut: (PRText content: each) ]					ifFalse: [ stream nextPut: each ] ] ] ].	collection isEmpty ifTrue: [ ^ nil ].	^ (separator := self parameterAt: 'separator') isNil		ifTrue: [			collection				inject: PRUnorderedList new				into: [ :result :each | result add: (PRListItem with: each); yourself ] ]		ifFalse: [			Array streamContents: [ :stream |				collection					do: [ :each | stream nextPut: each ]					separatedBy: [ stream nextPut: (PRText content: separator) ] ] ]! !!PRValueLink methodsFor: 'private' stamp: 'lr 4/1/2009 21:34'!formatDescribed: anObject default: anAccessor	"Formats a described object anObject according to the display parameter, use anAccessor as a default."		| display |	anObject isNil 		ifTrue: [ ^ nil ].	(display := self parameterAt: 'display') isNil		ifTrue: [ ^ anAccessor asAccessor read: anObject ].	anObject description do: [ :description |		description parameterName = display			ifTrue: [ ^ description toString: ((anObject readUsing: description) ifNil: [ ^ nil ]) ] ].	^ nil! !!PRValueLink methodsFor: 'private' stamp: 'lr 4/22/2009 15:09'!formatStructure: aStructure in: aContext	"Format ==aStructure==. Link it, if the parameter ==link== is given; embed it, if the paremeter ==embed== is given."		| string |	((self selectAndReject: aStructure) isNil		or: [ (aContext structure: aStructure) isValid not		or: [ (aStructure propertyAt: #hideFromMenus ifAbsent: [ false ]) ] ])			ifTrue: [ ^ nil ].	string := self 		formatDescribed: aStructure		default: #title.	^ ((self hasParameter: 'link') or: [ self hasParameter: 'embed' ])		ifTrue: [			PRInternalLink new				embedded: (self hasParameter: 'embed');				parameters: self parameters;				target: aStructure;				addAll: (string isNil					ifTrue: [ Array new ]					ifFalse: [ Array with: (PRText content: string) ]);				yourself ]		ifFalse: [ string isNil ifFalse: [ PRText content: string ] ]! !!PRValueLink methodsFor: 'private' stamp: 'lr 4/29/2009 16:48'!formatStructureCollection: aCollection in: aContext	"Format a collection of structures."	| result |	^ self formatCollection: (Array streamContents: [ :stream |		aCollection do: [ :each |			(result := self formatStructure: each in: aContext) isNil				ifFalse: [ stream nextPut: result ] ] ])! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/1/2009 22:24'!historyIn: aContext	<value: 'history' comment: 'Display the history for the current structure.'>		| contexts |	^ self lookupStructure: aContext structure do: [ :structure |		contexts := (aContext kernel persistency historyFor: structure)			collect: [ :context | self contextIn: context ].		self formatCollection: contexts ]! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/29/2009 16:42'!incomingIn: aContext	<value: 'incoming' comment: 'Display all structures referencing the current structure.'>	^ self lookupStructure: aContext structure do: [ :structure |		self 			formatStructureCollection: ((aContext root incomingReferences				to: structure; 				collect: [ :each | each owner ])				select: [ :each | each notNil ]) asSet			in: aContext ]! !!PRValueLink methodsFor: 'testing' stamp: 'lr 5/13/2009 11:57'!isBroken	^ self selector isNil! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/1/2009 21:51'!kernelIn: aContext	<value: 'kernel' comment: 'Display kernel of this site.'>	^ self formatDescribed: aContext kernel default: #name! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/22/2009 13:00'!lastIn: aContext	<value: 'last' comment: 'Display the last sibling of the current structure.'>		^ self lookupStructure: aContext structure do: [ :structure |		self 			formatStructure: (aContext structure: structure) 				siblings last			in: aContext ]! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/1/2009 22:18'!linksIn: aContext	<value: 'links' comment: 'Display all links from the current structure.'>	^ self lookupStructure: aContext structure do: [ :structure |		self formatCollection: ((structure outgoingReferences 			select: [ :each | each isInternal or: [ each isExternal ] ])			collect: [ :each | each copy embedded: false ]) ]! !!PRValueLink methodsFor: 'private' stamp: 'lr 4/24/2009 10:30'!lookupStructure: aStructure do: aBlock	"Lookup aStructure and evaluate aBlock if it is found. This performs different kinds of navigation starting from aStructure. If the parameter ==path== is given an absolute or relative lookup is started. The parameter ==level== choses a structure at the specified level in the parent chain, where the root is 1 and direct children of the root 2, etc. 0 is the current structure, -1 the parent of the current structure, etc. Furthermore the levels can be delimited using ==lower== and ==upper== bounds."	| structure |	structure := aStructure ifNil: [ ^ nil ].	self parameterAt: 'target' ifPresent: [ :path |		structure := structure			lookupPath: path			ifAbsent: [ ^ nil ] ].	(self hasParameter: 'level') ifTrue: [		| parents extractor level |		parents := structure parents.		extractor := [ :name |			| value |			value := (self parameterAt: name)				asNumber asInteger.			value < 1				ifTrue: [ parents size + value ]				ifFalse: [ value ] ].		((level := extractor value: 'level') between: 1 and: parents size)			ifFalse: [ ^ nil ].		((self hasParameter: 'lower') and: [ level < (extractor value: 'lower') ])			ifTrue: [ ^ nil ].		((self hasParameter: 'upper') and: [ level > (extractor value: 'upper') ])			ifTrue: [ ^ nil ].		structure := parents at: level ifAbsent: [ ^ nil ] ].	^ aBlock value: structure! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/23/2009 14:48'!nextIn: aContext	<value: 'next' comment: 'Display the following sibling of the current structure.'>		^ self lookupStructure: aContext structure do: [ :target |		| elements output |		elements := (self hasParameter: 'nested')			ifFalse: [ (aContext structure: target) siblings ]			ifTrue: [ (aContext enumeratorFor: target root) everything contents ].		(elements copyAfter: target) do: [ :structure |			(output := self formatStructure: structure in: aContext) notNil				ifTrue: [ ^ output ] ].		nil ]! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/22/2009 12:58'!outgoingIn: aContext	<value: 'outgoing' comment: 'Display all structures referenced from the current structure.'>	^ self lookupStructure: aContext structure do: [ :structure |		self 			formatStructureCollection: ((structure outgoingReferences				select: [ :each | each isInternal ])				collect: [ :each | each target ])			in: aContext ]! !!PRValueLink methodsFor: 'values' stamp: 'lr 5/6/2009 08:06'!parentIn: aContext	<value: 'parent' comment: 'Display the parent of the current structure.'>		| output |	^ self lookupStructure: aContext structure do: [ :target |		target isRoot ifFalse: [			target parent parents reverseDo: [ :structure |				(output := self formatStructure: structure in: aContext) notNil					ifTrue: [ ^ output ] ] ].		nil ]! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/22/2009 12:58'!parentsIn: aContext	<value: 'parents' comment: 'Display the parent chain of the current structure.'>		^ self lookupStructure: aContext structure do: [ :structure |		self 			formatStructureCollection: structure parents			in: aContext ]! !!PRValueLink methodsFor: 'querying' stamp: 'lr 4/6/2009 23:59'!pragmas	"Answer the method annotations of all currently supported value-links."		^ Pragma allNamed: #value:comment: from: self class to: PRValueLink sortedByArgument: 1! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/23/2009 14:48'!previousIn: aContext	<value: 'previous' comment: 'Display the previous sibling of the current structure.'>		^ self lookupStructure: aContext structure do: [ :target |		| elements output |		elements := (self hasParameter: 'nested')			ifFalse: [ (aContext structure: target) siblings ]			ifTrue: [ (aContext enumeratorFor: target root) everything contents ].		(elements copyUpTo: target) reverseDo: [ :structure |			(output := self formatStructure: structure in: aContext) notNil				ifTrue: [ ^ output ] ].		nil ]! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/22/2009 13:03'!randomIn: aContext	<value: 'random' comment: 'Display a random child of the current structure.'>	| structures |	^ self lookupStructure: aContext structure do: [ :structure |		structures := (aContext structure: structure)			enumerator all contents.		structures isEmpty 			ifFalse: [ self formatStructure: structures atRandom in: aContext ] ]! !!PRValueLink methodsFor: 'accessing' stamp: 'lr 1/9/2009 20:21'!reference: aString	super reference: aString.	selector := self selectorFor: self title asLowercase withBlanksTrimmed! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/22/2009 13:04'!rootIn: aContext	<value: 'root' comment: 'Display the root structure.'>		^ self formatStructure: aContext root in: aContext! !!PRValueLink methodsFor: 'private' stamp: 'lr 4/22/2009 15:08'!selectAndReject: anObject	self parameterAt: 'select' ifPresent: [ :tokens |		(tokens includesSubString: anObject class label)			ifFalse: [ ^ nil ] ].	self parameterAt: 'reject' ifPresent: [ :tokens |		(tokens includesSubString: anObject class label)			ifTrue: [ ^ nil ] ].	^ anObject! !!PRValueLink methodsFor: 'accessing' stamp: 'lr 5/13/2009 11:56'!selector	^ selector! !!PRValueLink methodsFor: 'querying' stamp: 'lr 4/1/2009 21:47'!selectorFor: aString	"Answer the method selector for the given value link ==aString==, of nil if not found."	self pragmas do: [ :pragma | 		pragma arguments first = aString			ifTrue: [ ^ pragma selector ] ].	^ nil! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/22/2009 12:58'!siblingsIn: aContext	<value: 'siblings' comment: 'Display the siblings of the current structure.'>		^ self lookupStructure: aContext structure do: [ :structure |		self 			formatStructureCollection: (aContext structure: structure)				siblings			in: aContext ]! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/22/2009 13:04'!structureIn: aContext	<value: 'structure' comment: 'Display the current structure.'>		^ self lookupStructure: aContext structure do: [ :structure |		self formatStructure: structure in: aContext ]! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/1/2009 22:06'!timeIn: aContext	<value: 'time' comment: 'Display the current time.'>	^ Time now! !!PRValueLink methodsFor: 'accessing' stamp: 'lr 3/10/2009 10:42'!title	^ self reference copyAfter: $:! !!PRValueLink methodsFor: 'querying' stamp: 'lr 5/13/2009 11:56'!valueIn: aContext	"Answer the current value within aContext. The answer is either a ==PRDocument== composite, any other ==Object== that is printable, or ==nil== if context or parameters are invalid."	^ (aContext notNil and: [ self class selectors includes: self selector ])		ifTrue: [ self perform: self selector with: aContext ]! !!PRValueLink methodsFor: 'values' stamp: 'lr 4/1/2009 22:06'!valuesIn: aContext	<value: 'values' comment: 'Display a table with all possible values with comment.'>	^ PRTable new		add: (PRTableRow new			add: (PRTableCell new				add: (PRText content: 'Markup');				beHeading;				yourself);			add: (PRTableCell new				add: (PRText content: 'Comment');				beHeading;				yourself);			yourself);		addAll: (self pragmas collect: [ :pragma |			PRTableRow new				add: (PRTableCell new					add: (PRMonospaceFormat new						add: (PRText content: '+value:' , pragma arguments first , '+');						yourself);					yourself);				add: (PRTableCell new					add: (PRText content: pragma arguments second);					yourself);				yourself ]);		yourself! !!PRDefinitionList class methodsFor: 'testing' stamp: 'lr 12/30/2007 17:23'!isAbstract	^ false! !!PRDefinitionList methodsFor: 'visiting' stamp: 'lr 12/30/2007 17:23'!accept: aVisitor	aVisitor visitDefinitionList: self! !!PRList class methodsFor: 'private' stamp: 'lr 1/28/2009 16:24'!parse: aString to: aGroup with: aParser	| specification remainder |	(specification := self specificationFor: aString) isNil		ifTrue: [ ^ aGroup addAll: (aParser parseText: aString) ].	(aGroup children isEmpty or: [ aGroup children last class ~= specification second ])		ifTrue: [ aGroup add: specification second new ].	remainder := aString allButFirst: specification first size.	(aGroup children last children isEmpty or: [ (self specificationFor: remainder) isNil ])		ifTrue: [ aGroup children last add: specification third new ].	^ self parse: remainder to: aGroup children last children last with: aParser! !!PRList class methodsFor: 'instance-creation' stamp: 'lr 1/28/2009 15:46'!parse: aString with: aParser	^ self parse: aString to: aParser document with: aParser! !!PRList class methodsFor: 'private' stamp: 'lr 12/30/2007 22:51'!specificationFor: aString	(aString beginsWith: PROrderedList markup)		ifTrue: [ ^ Array with: PROrderedList markup with: PROrderedList with: PRListItem ].	(aString beginsWith: PRUnorderedList markup)		ifTrue: [ ^ Array with: PRUnorderedList markup with: PRUnorderedList with: PRListItem ].	(aString beginsWith: PRTermItem markup)		ifTrue: [ ^ Array with: PRTermItem markup with: PRDefinitionList with: PRTermItem ].	(aString beginsWith: PRDataItem markup)		ifTrue: [ ^ Array with: PRDataItem markup with: PRDefinitionList with: PRDataItem ].	^ nil! !!PRList methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitList: self! !!PROrderedList class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PROrderedList class methodsFor: 'accessing' stamp: 'lr 4/5/2007 13:12'!markup	^ '#'! !!PROrderedList methodsFor: 'visiting' stamp: 'lr 12/30/2007 19:31'!accept: aVisitor	aVisitor visitOrderedList: self! !!PRUnorderedList class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRUnorderedList class methodsFor: 'accessing' stamp: 'lr 4/5/2007 13:12'!markup	^ '-'! !!PRUnorderedList methodsFor: 'visiting' stamp: 'lr 12/30/2007 19:31'!accept: aVisitor	aVisitor visitUnorderedList: self! !!PRDataItem class methodsFor: 'accessing' stamp: 'lr 12/30/2007 21:59'!markup	^ ':'! !!PRDataItem methodsFor: 'visiting' stamp: 'lr 12/30/2007 21:50'!accept: aVisitor	aVisitor visitDataItem: self! !!PRListItem class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRListItem methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitListItem: self! !!PRTermItem class methodsFor: 'accessing' stamp: 'lr 12/30/2007 22:00'!markup	^ ';'! !!PRTermItem methodsFor: 'visiting' stamp: 'lr 12/30/2007 21:51'!accept: aVisitor	aVisitor visitTermItem: self! !!PRAnnotatedParagraph class methodsFor: 'accessing' stamp: 'lr 5/26/2009 21:59'!markup	^ '@@'! !!PRAnnotatedParagraph class methodsFor: 'instance-creation' stamp: 'lr 6/15/2009 20:34'!parse: aString with: aParser	| string annotation |	string := aString allButFirst: self markup size.	annotation := string copyUpTo: Character space.	string := string copyAfter: Character space.	^ aParser add: (self withAll: (aParser parseText: string) annotation: annotation)! !!PRAnnotatedParagraph class methodsFor: 'instance-creation' stamp: 'lr 5/26/2009 22:04'!withAll: aCollection annotation: aString	^ (self withAll: aCollection)		annotation: aString;		yourself! !!PRAnnotatedParagraph methodsFor: 'comparing' stamp: 'lr 5/26/2009 22:07'!= anObject	^ super = anObject and: [ self annotation = anObject annotation ]! !!PRAnnotatedParagraph methodsFor: 'visiting' stamp: 'lr 5/26/2009 21:59'!accept: aVisitor	aVisitor visitAnnotatedParagraph: self! !!PRAnnotatedParagraph methodsFor: 'accessing' stamp: 'lr 5/26/2009 21:59'!annotation	^ annotation! !!PRAnnotatedParagraph methodsFor: 'accessing' stamp: 'lr 5/26/2009 21:59'!annotation: aString	annotation := aString! !!PRAnnotatedParagraph methodsFor: 'comparing' stamp: 'lr 5/26/2009 22:07'!hash	^ super hash bitXor: self annotation hash! !!PREmptyParagraph methodsFor: 'visiting' stamp: 'lr 12/20/2007 12:12'!accept: aVisitor	aVisitor visitEmptyParagraph: self! !!PRParagraph class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRParagraph class methodsFor: 'instance-creation' stamp: 'lr 12/9/2007 09:16'!parse: aString with: aParser	^ aParser addParagraph: (self withAll: (aParser parseText: aString))! !!PRParagraph methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitParagraph: self! !!PRPreformatted class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRPreformatted class methodsFor: 'accessing' stamp: 'lr 4/5/2007 13:12'!markup	^ '='! !!PRPreformatted class methodsFor: 'instance-creation' stamp: 'lr 4/24/2007 20:55'!parse: aString with: aParser	^ aParser combine: self with: (PRText content: (aString allButFirst: self markup size))! !!PRPreformatted methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitPreformatted: self! !!PRTable class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRTable class methodsFor: 'instance-creation' stamp: 'lr 8/14/2008 09:21'!parse: aString with: aParser	| line row cell markup index changed |	line := aString.	row := PRTableRow new.	[ line isEmpty ] whileFalse: [		cell := PRTableCell new.		line := line allButFirst: cell class markup size.		[	changed := false.				#(markupLeft markupCenter markupRight markupHeading) 				with: #(beAlignedLeft beAlignedCenter beAlignedRight beHeading) 				do: [ :selector :align |					markup := cell class perform: selector.					(line beginsWith: markup) ifTrue: [						line := line allButFirst: markup size.						cell perform: align.						changed := true ] ].			changed ] whileTrue.		index := (aParser findFirst: cell class markup at: 1 in: line) - 1.		index < 1 ifTrue: [ index := line size ].		row add: (cell addAll: (aParser parseText: (line first: index))).		line := line allButFirst: index ].	^ aParser combine: self with: row! !!PRTable methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitTable: self! !!PRTable methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!columnCount	^ self children inject: 0 into: [ :max :row | max max: row columnCount ]! !!PRTable methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!rowCount	^ self children size! !!PRTableCell class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRTableCell class methodsFor: 'accessing' stamp: 'lr 4/5/2007 13:13'!markup	^ '|'! !!PRTableCell class methodsFor: 'accessing' stamp: 'lr 4/5/2007 16:11'!markupCenter	^ '|'! !!PRTableCell class methodsFor: 'accessing' stamp: 'lr 8/14/2008 08:53'!markupHeading	^ '!!'! !!PRTableCell class methodsFor: 'accessing' stamp: 'lr 4/5/2007 16:11'!markupLeft	^ '{'! !!PRTableCell class methodsFor: 'accessing' stamp: 'lr 4/5/2007 16:11'!markupRight	^ '}'! !!PRTableCell methodsFor: 'comparing' stamp: 'lr 8/14/2008 08:52'!= anObject	^ super = anObject		and: [ self align = anObject align		and: [ self heading = anObject heading ] ]! !!PRTableCell methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitTableCell: self! !!PRTableCell methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!align	^ align! !!PRTableCell methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!align: aSymbol	align := aSymbol! !!PRTableCell methodsFor: 'actions' stamp: 'lr 3/9/2006 11:30'!beAlignedCenter	self align: #center! !!PRTableCell methodsFor: 'actions' stamp: 'lr 3/9/2006 11:30'!beAlignedLeft	self align: #left! !!PRTableCell methodsFor: 'actions' stamp: 'lr 3/9/2006 11:30'!beAlignedRight	self align: #right! !!PRTableCell methodsFor: 'actions' stamp: 'lr 8/14/2008 08:52'!beHeading	self heading: true! !!PRTableCell methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:30'!hash	^ super hash bitXor: self align hash! !!PRTableCell methodsFor: 'accessing' stamp: 'lr 8/14/2008 08:52'!heading	^ heading! !!PRTableCell methodsFor: 'accessing' stamp: 'lr 8/14/2008 08:52'!heading: aBoolean	heading := aBoolean! !!PRTableCell methodsFor: 'initialization' stamp: 'lr 8/14/2008 09:01'!initialize	super initialize.	heading := false! !!PRTableCell methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAligned	^ self align notNil! !!PRTableCell methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAlignedCenter	^ self align = #center! !!PRTableCell methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAlignedLeft	^ self align = #left! !!PRTableCell methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAlignedRight	^ self align = #right! !!PRTableCell methodsFor: 'testing' stamp: 'lr 8/14/2008 09:00'!isHeading	^ self heading! !!PRTableRow class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRTableRow methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitTableRow: self! !!PRTableRow methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!columnCount	^ self children size! !!PRDocumentItem class methodsFor: 'instance-creation' stamp: 'lr 4/24/2007 20:37'!parse: aString with: aParser	self error: self name , ' is not supposed to be parsed by ' , aParser printString! !!PRDocumentItem methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!= anObject	^ self species = anObject species! !!PRDocumentItem methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitDocumentItem: self! !!PRDocumentItem methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!hasChildren	^ false! !!PRDocumentItem methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!hash	^ self species hash! !!PRDocumentItem methodsFor: 'testing' stamp: 'lr 4/16/2007 12:00'!isLink	^ false! !!PRDocumentItem methodsFor: 'accessing' stamp: 'lr 4/10/2007 21:48'!owner	"Answer the object owning the receiver. The default implementation doesn't know about its owner and therefore always returns ==nil==."	^ nil! !!PRDocumentItem methodsFor: 'accessing' stamp: 'lr 5/28/2006 20:30'!owner: anObject! !!PRDocumentItem methodsFor: 'accessing-dynamic' stamp: 'lr 5/28/2006 20:31'!text	"Answer a string representation of the receiver."	^ String new! !!PRHorizontalRule class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRHorizontalRule class methodsFor: 'accessing' stamp: 'lr 4/5/2007 13:13'!markup	^ '_'! !!PRHorizontalRule class methodsFor: 'instance-creation' stamp: 'lr 4/24/2007 21:01'!parse: aString with: aParser	| index |	index := aString findLast: [ :char | char isSeparator not ].	^ self markup size < index		ifFalse: [ aParser add: self new ]		ifTrue: [ aParser class lineMatcherDefault parse: aString with: aParser ]! !!PRHorizontalRule methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitHorizontalRule: self! !!PRLineBreak class methodsFor: 'testing' stamp: 'lr 12/9/2007 09:19'!isAbstract	^ false! !!PRLineBreak methodsFor: 'visiting' stamp: 'lr 12/9/2007 09:05'!accept: aVisitor	aVisitor visitLineBreak: self! !!PRText class methodsFor: 'instance-creation' stamp: 'lr 4/5/2007 14:41'!content: aString	^ self new text: aString! !!PRText class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRText methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:30'!= anObject	^ super = anObject		and: [ self text = anObject text ]! !!PRText methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitText: self! !!PRText methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:30'!hash	^ super hash bitXor: self text hash! !!PRText methodsFor: 'printing' stamp: 'lr 3/9/2006 11:30'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' text: '; print: self text! !!PRText methodsFor: 'accessing' stamp: 'lr 4/5/2007 14:40'!text	"Answer the string the receiver is representing."	^ text! !!PRText methodsFor: 'accessing' stamp: 'lr 4/5/2007 14:40'!text: aString	text := aString! !!PRKernel class methodsFor: 'configuration' stamp: 'lr 1/13/2009 16:20'!defaultInfo	^ (PRPage named: 'information')		addChild: self defaultInfoIntroduction;		addChild: self defaultInfoSyntax;		addChild: self defaultInfoLicense;		contents: '+value:children|link+';		yourself! !!PRKernel class methodsFor: 'configuration' stamp: 'lr 1/13/2009 20:26'!defaultInfoIntroduction	^ (PRPage named: 'introduction')		contents: 'Pier is a powerful and extensible implementation of a meta-described content management and Wiki system, written with objects from top to bottom:-''''Object-Oriented Design:'''' Pier features a fully object oriented and meta-described domain model built using Magritte. The content of the pages is parsed and stored as a tree of different entities representing text, links, tables, lists, formattings, etc.-''''Extensibility:'''' Everything in Pier can be extended: page types, storage mechanism, actions, security mechanism, web-server, etc. Plug-ins can be shared within the community and loaded independently of each other into the system.-''''Open Source:'''' Pier is released under the MIT license which grants unrestricted rights to copy, modify, and redistribute as long as the original copyright and license terms are retained.-''''Test Suites:'''' Pier is heavily tested. There are more than 1200 unit tests included with the core of Pier. This makes it easy to change and verify the code and comes in extremely useful when porting Pier to other Smalltalk dialects or when writing extensions.Up to date information about *Pier>http://www.piercms.com* and *Magritte>http://www.lukas-renggli.ch/smalltalk/magritte* can be obtained through their respective web sites.!!Development- *Code Repository>http://source.lukas-renggli.ch/pier.html*- *Issue Tracker>http://code.google.com/p/pier/*!!Mailing-Lists- *Magritte, Pier and Related Tools>https://www.iam.unibe.ch/mailman/listinfo/smallwiki*- *Seaside -- The Squeak Enterprise Aubergines Server>http://lists.squeakfoundation.org/cgi-bin/mailman/listinfo/seaside*!!Documentation- *Magritte -- Meta-Described Web Application Development>http://www.iam.unibe.ch/~scg/Archive/Diploma/Reng06a.pdf* (Chapter 3)';		yourself! !!PRKernel class methodsFor: 'configuration' stamp: 'lr 9/13/2007 21:00'!defaultInfoLicense	^ (PRPage named: 'license')		contents: '!!' , MAObject license;		yourself! !!PRKernel class methodsFor: 'configuration' stamp: 'lr 3/17/2009 17:24'!defaultInfoSyntax	^ (PRPage named: 'syntax')		contents: '!!ParagraphsA single newline has no effect on the layout. An empty line starts a new paragraph.!!SectionsA line starting with ==!!== becomes a section heading. Use multiple ==!!== to create a subsection.!!Horizontal LineA line starting with ==_== (underline) becomes a horizontal line. This is often used to separate topics.!!ListsLines starting with ==#==, ==-==, ==;== or ==:== create a list:-A block of lines, where each line starts with ==-== is transformed to a bulleted list, where each line is an entry.-A block of lines, where each line starts with ==#== is transformed to an ordered list, where each line is an entry.-A block of lines, where each line starts with ==;== or ==:== is transformed to a definition list, where the keyword is prepended with ==;== and the definition with ==:==. Keywords and definitions can be mixed arbitrary.Lists can also be nested. Thus, a line starting with ==#-== is an element of a bulleted list that is part of an ordered list.!!TablesTo create a table, start off the lines with ==|== and separate the elements with ==|==s. Each new line represents a new row of the table. The contents of cells can be aligned left, centered or aligned right by using ==|{==, ==||== or ==|}== respectively. Add a single ==!!== to let the cell become a table heading.!!PreformattedTo create a preformatted section, begin each line with ==\===. A preformatted section uses equally spaced text so that spacing is preserved.!!FormattingThere is some sugar for font formatting:-To make something ""bold"", surround it with ==\""==-To make something ''''italic'''', surround it with ==\''''==-To make something ==monospaced==, surround it with ==\=\===-To make something --strikethrough--, surround it with ==\--==-To make something @@subscript@@, surround it with ==\@@==-To make something ^^superscript^^, surround it with ==\^^==-To make something __underlined__, surround it with ==\__==!!LinksTo create a link, put it between ==\*==. All links have the following form ==\*reference\*==, or ==\*alias>reference|parameters\*== for the complete form. The ''''reference'''' depends on the kind of link that is created (see below). The ''''alias'''' is a string being used as the text of the link, if left out a default is used. The ''''parameters'''' are optional parameters to further configure the behavior on the link, again this depends on the kind of link you create. The contents of some links, e.g. links pointing to image-files, downloads or other pages, can be embedded into the current document by putting the reference between ==\+== instead of ==\*==, for example ==\+reference\+==. Not all types of links support embedding and quietly ignore it.!!!!Internal LinksIf a structure with the given name exists, a link to that item shows up when the page is saved. In case the path points to an non-existing structure, the user will be offered the possibility to create a new one when clicking on the link. The reference can be an absolute (==/information/license==) or relative (==../license==) path. The parameters ==command== and ==view== are supported to create specific links onto commands and views of the target page.!!!!External Links-If the link is an URL (e.g. ==\*http://www.lukas-renggli.ch\*==), a link to the external page shows up.-If the link is an e-mail address (e.g. ==\*renggli@gmail.com\*==), a link to mail that person shows up.!!!!Value LinksTo add dynamic content to a page use a value link. For example, the expression ==\+value:date\+== adds the current date ==+value:date+==. Some values might be undefined at certain points, in this case the alias of the link is displayed instead. For example, the expression ==\+untouched>value:edited|display=date\+== displays the date of the last edit operation, or ==untouched== if the current page has never been edited. There is a wide variety of possible expression available:	+value:values+	The expressions that work on structures (==children==, ==parent==, ...) support a wide variety of ==display== parameters, namely ==title==, ==name==, ==tags==, ==menu==, ==owner==, and ==group==. Furthermore these expressions become an internal link if you add the parameter ==link==. The expressions on contexts (==context== and ==edited==) also support ==display== parameters, namely ==date==, ==time== and ==user==.';		yourself! !!PRKernel class methodsFor: 'configuration' stamp: 'lr 1/13/2009 20:26'!defaultRoot	^ (PRPage named: 'pier')		addChild: self defaultInfo;		contents: 'Welcome to Pier, the next generation of a fully extensible content management system implemented in Smalltalk. To read additional information, please consult the *information page>information* or go to the official Pier *web site>http://www.piercms.com*.';		yourself! !!PRKernel class methodsFor: 'accessing-description' stamp: 'lr 3/26/2009 20:58'!descriptionName	^ MAStringDescription new		parameterName: 'name';		accessor: #name;		label: 'Name';		priority: 100;		beRequired;		yourself! !!PRKernel class methodsFor: 'initialization' stamp: 'lr 9/13/2007 21:59'!initialize	MACompatibility openWorkspace: MAObject license titled: 'Pier License'! !!PRKernel class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!instanceNamed: aString	^ self instances detect: [ :each | each name = aString ]! !!PRKernel class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!instances	^ Instances ifNil: [ Instances := Set new ]! !!PRKernel class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRKernel class methodsFor: 'instance-creation' stamp: 'lr 1/17/2007 11:05'!named: aString	^ self named: aString root: self defaultRoot! !!PRKernel class methodsFor: 'instance-creation' stamp: 'lr 1/17/2007 11:05'!named: aString root: aStructure	^ self instances add: (self new		name: aString;		root: aStructure;		yourself)! !!PRKernel class methodsFor: 'private' stamp: 'tg 2/19/2009 08:49'!reset	"This method is for development and testing purpose only, you should not call it directly unless you want to loose your wiki-kernels."	Instances := nil! !!PRKernel methodsFor: 'configuration' stamp: 'lr 9/13/2007 22:00'!defaultName	^ 'Pier'! !!PRKernel methodsFor: 'configuration' stamp: 'lr 1/29/2008 08:59'!defaultPersistency	^ PRHistoryPersistency new! !!PRKernel methodsFor: 'initialization' stamp: 'lr 1/17/2007 11:03'!initialize	super initialize.	self name: self defaultName.	self persistency: self defaultPersistency! !!PRKernel methodsFor: 'accessing' stamp: 'lr 1/16/2007 22:45'!name	"Answer the name of the kernel."	^ name! !!PRKernel methodsFor: 'accessing' stamp: 'lr 5/28/2006 17:10'!name: aString	name := aString! !!PRKernel methodsFor: 'accessing' stamp: 'lr 1/16/2007 22:44'!persistency	"Answer the persistency strategy of the receiver."	^ persistency! !!PRKernel methodsFor: 'accessing' stamp: 'lr 2/18/2009 14:39'!persistency: aPersistency	| replacement |	replacement := aPersistency 		ifNil: [ PRNullPersistency new ].	replacement setKernel: self.	persistency isNil		ifFalse: [ persistency setKernel: nil ].	persistency := replacement! !!PRKernel methodsFor: 'printing' stamp: 'lr 3/9/2006 11:29'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' name: '; print: self name! !!PRKernel methodsFor: 'accessing' stamp: 'lr 1/16/2007 22:45'!root	"Answer the root structure of the kernel."	^ root! !!PRKernel methodsFor: 'accessing' stamp: 'lr 5/28/2006 17:10'!root: aStructure	root := aStructure! !!PRObject class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ true! !!PRObject class methodsFor: 'instance-creation' stamp: 'lr 6/15/2009 20:11'!new	"Create a new instance of this class and checks if it isn't abstract."	self isAbstract		ifTrue: [ self error: self name , ' is abstract.' ].	^ self basicNew initialize! !!PRObject class methodsFor: 'reflection' stamp: 'lr 3/9/2006 11:30'!withAllConcreteClasses	^ Array streamContents: [ :stream |		self withAllConcreteClassesDo: [ :each |			stream nextPut: each ] ]! !!PRObject class methodsFor: 'reflection' stamp: 'lr 3/9/2006 11:30'!withAllConcreteClassesDo: aBlock	self withAllSubclassesDo: [ :each |		each isAbstract ifFalse: [			aBlock value: each ] ]! !!PRObject methodsFor: 'visiting' stamp: 'lr 4/10/2007 21:49'!accept: aVisitor	"Dispatch to ==aVisitor== depending on the receiver."! !!PRObject methodsFor: 'private' stamp: 'lr 3/5/2007 14:03'!errorPropertyNotFound: aSelector	MAPropertyError signal: 'Property ' , aSelector , ' not found.'! !!PRObject methodsFor: 'testing' stamp: 'lr 4/10/2007 21:49'!hasProperty: aKey	"Test if the property ==aKey== is defined within the receiver."	^ self properties includesKey: aKey! !!PRObject methodsFor: 'initialization' stamp: 'lr 5/5/2006 19:20'!initialize! !!PRObject methodsFor: 'copying' stamp: 'lr 3/9/2006 11:29'!postCopy	super postCopy.	properties := properties copy! !!PRObject methodsFor: 'copying' stamp: 'lr 3/9/2006 11:29'!postCopyTo: anObject! !!PRObject methodsFor: 'printing' stamp: 'lr 12/18/2009 16:27'!printOn: aStream	super printOn: aStream.	aStream nextPut: $[; print: self identityHash; nextPut: $]! !!PRObject methodsFor: 'accessing-properties' stamp: 'lr 5/28/2006 17:01'!properties	"Answer the property dictionary of the receiver."	^ properties ifNil: [ properties := Dictionary new ]! !!PRObject methodsFor: 'accessing-properties' stamp: 'lr 4/10/2007 21:49'!propertyAt: aKey	"Answer the value of the property ==aKey==, raises an error if the property doesn't exist."	^ self propertyAt: aKey ifAbsent: [ self errorPropertyNotFound: aKey ]! !!PRObject methodsFor: 'accessing-properties' stamp: 'lr 4/10/2007 21:49'!propertyAt: aKey ifAbsent: aBlock	"Answer the value of the property ==aKey==, or the result of ==aBlock== if the property doesn't exist."	^ self properties at: aKey ifAbsent: aBlock! !!PRObject methodsFor: 'accessing-properties' stamp: 'lr 4/10/2007 21:49'!propertyAt: aKey ifAbsentPut: aBlock	"Answer the value of the property ==aKey==, or if the property doesn't exist adds and answers the result of evaluating ==aBlock==."	^ self properties at: aKey ifAbsentPut: aBlock! !!PRObject methodsFor: 'accessing-properties' stamp: 'lr 4/10/2007 21:50'!propertyAt: aKey put: aValue	"Adds or replaces the property ==aKey== with ==aValue==."	^ self properties at: aKey put: aValue! !!PRHistoryPersistency class methodsFor: 'accessing-descriptions' stamp: 'lr 1/29/2009 21:18'!descriptionMaxHistory	^ MANumberDescription new		comment: 'The maximum number of history items to keep.';		accessor: #maxHistory;		label: 'Max History';		default: 1024;		priority: 100;		beInteger;		yourself! !!PRHistoryPersistency methodsFor: 'actions' stamp: 'lr 5/5/2009 16:49'!add: aContext	history addLast: aContext copy sanitize.	maxHistory isNil ifTrue: [ ^ self ].	[ history size <= maxHistory ]		whileFalse: [ history removeFirst ]! !!PRHistoryPersistency methodsFor: 'enumerating' stamp: 'lr 1/29/2008 08:13'!do: aBlock	history do: aBlock! !!PRHistoryPersistency methodsFor: 'actions' stamp: 'lr 5/5/2009 16:49'!execute: aCommand	self mutex critical: [		self apply: aCommand.		aCommand isLogged 			ifTrue: [ self add: aCommand context ] ]! !!PRHistoryPersistency methodsFor: 'accessing' stamp: 'lr 6/22/2008 17:58'!maxHistory	^ maxHistory! !!PRHistoryPersistency methodsFor: 'accessing' stamp: 'lr 6/22/2008 17:58'!maxHistory: anInteger	"The maximum number of commands to keep."	maxHistory := anInteger! !!PRHistoryPersistency methodsFor: 'enumerating' stamp: 'lr 1/29/2008 08:13'!reverseDo: aBlock	history reverseDo: aBlock! !!PRHistoryPersistency methodsFor: 'initialization' stamp: 'lr 2/18/2009 14:49'!setKernel: aKernel	super setKernel: aKernel.	history := OrderedCollection new.	(aKernel notNil and: [ aKernel persistency notNil ])		ifTrue: [ aKernel persistency do: [ :each | self add: each ] ]! !!PRNullPersistency methodsFor: 'enumerating' stamp: 'lr 1/17/2007 10:41'!do: aBlock	"There is no history for now."! !!PRPersistency class methodsFor: 'testing' stamp: 'lr 1/16/2007 22:11'!isAbstract	^ self name = #PRPersistency! !!PRPersistency methodsFor: 'protected' stamp: 'lr 2/12/2007 19:07'!apply: aCommand	"This method should not be called directly. It performs the basic execution of aCommand in the context of the receiver."	aCommand isChecked		ifTrue: [ aCommand doValidate ].	aCommand doExecute! !!PRPersistency methodsFor: 'configuration' stamp: 'lr 1/16/2007 22:12'!defaultMutex	^ Semaphore forMutualExclusion! !!PRPersistency methodsFor: 'enumerating' stamp: 'lr 3/9/2006 11:29'!do: aBlock	"Evaluates aBlock in chronological order for every item in the history of the kernel."	self subclassResponsibility! !!PRPersistency methodsFor: 'enumerating' stamp: 'lr 3/9/2006 11:29'!do: aBlock for: aStructure	"Evaluates aBlock in chronological order for every item in the history of aStructure. Subclasses might want to override the default implementation for efficiency."	self do: [ :each |		each structure = aStructure			ifTrue: [ aBlock value: each ] ]! !!PRPersistency methodsFor: 'actions' stamp: 'lr 4/10/2007 21:50'!execute: aCommand	"Execute aCommand using the persistency of the receiver. Subclasses might override this method, e.g. to create a transitional logic or to commit changes after execution. Make sure that you always perform the method ==#apply:== when overriding this code."	self mutex critical: [ self apply: aCommand ]! !!PRPersistency methodsFor: 'convenience' stamp: 'lr 3/9/2006 11:29'!history	^ Array streamContents: [ :stream |		self do: [ :each |			stream nextPut: each ] ]! !!PRPersistency methodsFor: 'convenience' stamp: 'lr 3/9/2006 11:29'!historyFor: aStructure	^ Array streamContents: [ :stream |		self			do: [ :each | stream nextPut: each ]			for: aStructure ]! !!PRPersistency methodsFor: 'initialization' stamp: 'lr 3/10/2009 10:42'!initialize	super initialize.	self initializeMagritte.	mutex := self defaultMutex! !!PRPersistency methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!kernel	^ kernel! !!PRPersistency methodsFor: 'accessing' stamp: 'lr 2/12/2007 19:07'!mutex	"Return a mutex (an object that understands #critical:) to ensure that only one process is modifying the model at once. This is needed to make certain that the model remains in a consistent state. All write access must go through this mutex."	^ mutex! !!PRPersistency methodsFor: 'enumerating' stamp: 'lr 3/9/2006 11:29'!reverseDo: aBlock	"Evaluates aBlock in inverse chronological order for every item in the history of aStructure. Subclasses might want to override the default implementation for efficiency."	self history reverseDo: aBlock! !!PRPersistency methodsFor: 'enumerating' stamp: 'lr 3/9/2006 11:29'!reverseDo: aBlock for: aStructure	"Evaluates aBlock in inverse chronological order for every item in the history of aStructure. Subclasses might want to override the default implementation for efficiency."	(self historyFor: aStructure)		reverseDo: aBlock! !!PRPersistency methodsFor: 'initialization' stamp: 'lr 2/18/2009 14:33'!setKernel: aKernel	"Set the kernel the receiver is supposed to run on."	kernel := aKernel! !!PRDocumentWriter class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:30'!write: anObject	^ self new write: anObject! !!PRDocumentWriter class methodsFor: 'instance-creation' stamp: 'lr 5/13/2009 11:32'!write: anObject to: aStream	^ self new write: anObject to: aStream! !!PRDocumentWriter methodsFor: 'streaming' stamp: 'lr 5/13/2009 11:24'!contents	^ stream contents! !!PRDocumentWriter methodsFor: 'private' stamp: 'lr 6/15/2009 20:10'!defaultStream	^ WriteStream on: String new! !!PRDocumentWriter methodsFor: 'private' stamp: 'lr 4/5/2007 14:07'!nest: aString do: aBlock	nesting add: aString.	aBlock ensure: [ nesting removeLast ]! !!PRDocumentWriter methodsFor: 'private' stamp: 'lr 12/20/2007 19:45'!newLine	stream nextPut: Character cr.	newline := true! !!PRDocumentWriter methodsFor: 'streaming' stamp: 'lr 3/9/2006 11:29'!nextPut: aCharacter	stream nextPut: aCharacter.	newline := false! !!PRDocumentWriter methodsFor: 'streaming' stamp: 'lr 3/9/2006 11:29'!nextPutAll: aString	stream nextPutAll: aString.	newline := false! !!PRDocumentWriter methodsFor: 'visiting' stamp: 'lr 12/20/2007 14:28'!start: anObject	newline := true.	nesting := OrderedCollection new.	super start: anObject.	(stream isEmpty not and: [ stream last = Character cr ])		ifTrue: [ stream skip: -1 ]! !!PRDocumentWriter methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!stream: aStream	stream := aStream! !!PRDocumentWriter methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 20:09'!visitLineBreak: anObject	self newLine! !!PRDocumentWriter methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 14:23'!visitParagraph: anObject	super visitParagraph: anObject.	self newLine! !!PRDocumentWriter methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:29'!write: anObject	^ self write: anObject to: self defaultStream! !!PRDocumentWriter methodsFor: 'visiting' stamp: 'lr 5/13/2009 11:29'!write: anObject to: aStream	^ self stream: aStream; start: anObject; contents! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'lr 12/30/2007 23:25'!visitDataItem: anObject	self nest: ' ' do: [ super visitDataItem: anObject ]! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'lr 12/30/2007 23:24'!visitDefinitionList: anObject	newline ifFalse: [ self newLine ].	self visitAll: anObject children! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 14:22'!visitHeader: anObject	super visitHeader: anObject.	self newLine! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 14:22'!visitHorizontalRule: anObject	self nextPutAll: (String new: 40 withAll: $-); newLine! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'lr 2/7/2007 15:04'!visitLink: anObject	anObject hasAlias		ifTrue: [ super visitLink: anObject ]		ifFalse: [ self nextPutAll: anObject title ]! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 20:06'!visitListItem: anObject	nesting last isInteger		ifTrue: [ nesting addLast: nesting removeLast + 1 ].	nesting size - 1 timesRepeat: [ stream tab ].	self nextPutAll: nesting last asString.	self nextPutAll: (nesting last isInteger 		ifTrue: [ '. ' ] ifFalse: [ ' ' ]).	super visitListItem: anObject.	newline ifFalse: [ self newLine ]! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 19:59'!visitOrderedList: anObject	newline ifFalse: [ self newLine ].	self nest: 0 do: [ super visitOrderedList: anObject ]! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 19:56'!visitPreformatted: anObject	anObject children do: [ :each | self visit: each; newLine ]! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 14:22'!visitTableRow: anObject	anObject children		do: [ :each | self visit: each ]		separatedBy: [ self nextPut: Character tab ].	self newLine! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'lr 12/30/2007 23:24'!visitTermItem: anObject	self nest: '-' do: [ super visitDataItem: anObject ]! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'lr 2/6/2007 18:55'!visitText: anObject	self nextPutAll: anObject text! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 19:54'!visitUnorderedList: anObject	newline ifFalse: [ self newLine ].	self nest: '*' do: [ super visitUnorderedList: anObject ]! !!PRWikiWriter methodsFor: 'accessing' stamp: 'lr 4/5/2007 13:07'!lineMatcher	^ PRDocumentParser lineMatcher! !!PRWikiWriter methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 14:19'!visitAnchor: anObject	self nextPutAll: anObject class markup; nextPutAll: anObject name; newLine! !!PRWikiWriter methodsFor: 'visiting-document' stamp: 'lr 9/17/2009 17:59'!visitAnnotatedParagraph: anObject	self 		nextPutAll: anObject class markup;		nextPutAll: anObject annotation.	anObject hasChildren 		ifTrue: [ self nextPut: Character space ].	super visitAnnotatedParagraph: anObject! !!PRWikiWriter methodsFor: 'visiting-document' stamp: 'lr 12/30/2007 21:59'!visitDefinitionList: anObject	newline ifFalse: [ self newLine ].	anObject children do: [ :each |		self 			nest: each class markup			do: [ self visit: each ] ]! !!PRWikiWriter methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:08'!visitFormat: anObject	self nextPutAll: anObject class markup.	super visitFormat: anObject.	self nextPutAll: anObject class markup! !!PRWikiWriter methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 14:20'!visitHeader: anObject	anObject level timesRepeat: [ self nextPutAll: anObject class markup ].	super visitHeader: anObject.	self newLine! !!PRWikiWriter methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 14:20'!visitHorizontalRule: anObject	self nextPutAll: anObject class markup; newLine! !!PRWikiWriter methodsFor: 'visiting-document' stamp: 'lr 12/21/2009 14:16'!visitLink: anObject	self nextPutAll: (anObject isEmbedded		ifFalse: [ anObject class markup ]		ifTrue: [ anObject class markupEmbedded ]).	anObject hasAlias ifTrue: [		super visitLink: anObject.		self nextPutAll: anObject class markupAlias ].	self nextPutAll: anObject reference.	anObject hasAnchor ifTrue: [		self nextPutAll: anObject class markupAnchor.		self nextPutAll: (anObject class escape: anObject anchor) ].	anObject parameters do: [ :assoc |		self nextPutAll: anObject class markupParameter.		self nextPutAll: (anObject class escape: assoc key).		assoc value isNil			ifFalse: [ self nextPutAll: anObject class markupParameterValue; nextPutAll: (anObject class escape: assoc value asString) ] ].	self nextPutAll: (anObject isEmbedded		ifFalse: [ anObject class markup ]		ifTrue: [ anObject class markupEmbedded ])! !!PRWikiWriter methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 19:45'!visitList: anObject	newline ifFalse: [ self newLine ].	self nest: anObject class markup do: [ super visitList: anObject ]! !!PRWikiWriter methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 19:52'!visitListItem: anObject	nesting do: [ :each | self nextPutAll: each ].	super visitListItem: anObject.	newline ifFalse: [ self newLine ]! !!PRWikiWriter methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 14:21'!visitPreformatted: anObject	anObject children do: [ :each |		self			nextPutAll: anObject class markup; 			nextPutAll: each text;			newLine ]! !!PRWikiWriter methodsFor: 'visiting-document' stamp: 'lr 8/14/2008 08:58'!visitTableCell: anObject	self nextPutAll: anObject class markup.	anObject isAligned ifTrue: [		anObject isAlignedLeft ifTrue: [ self nextPutAll: anObject class markupLeft ].		anObject isAlignedCenter ifTrue: [ self nextPutAll: anObject class markupCenter ].		anObject isAlignedRight ifTrue: [ self nextPutAll: anObject class markupRight ] ].	anObject isHeading ifTrue: [ self nextPutAll: anObject class markupHeading ].	super visitTableCell: anObject! !!PRWikiWriter methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 14:21'!visitTableRow: anObject	super visitTableRow: anObject.	self newLine! !!PRWikiWriter methodsFor: 'visiting-document' stamp: 'lr 9/4/2009 17:19'!visitText: anObject	"Write out ==anObject=='s text to the receivers output-stream and escape special characters within and at the beginning of a line."	| string key |	string := anObject text.	newline ifTrue: [		key := self lineMatcher keys			detect: [ :each | string beginsWith: each ]			ifNone: [ nil ].		key isNil ifFalse: [			self nextPut: $\; nextPutAll: key.			string := string allButFirst: key size ] ].	self nextPutAll: (PRDocumentParser escape: string)! !!PRPath class methodsFor: 'utilities' stamp: 'lr 11/3/2009 21:58'!cleanName: aString	^ aString isNil ifFalse: [		 aString collect: [ :char |			(self validCharacters includes: char)				ifTrue: [ char asLowercase ]				ifFalse: [					char = Character space						ifTrue: [ $- ]						ifFalse: [ $_ ] ] ] ]! !!PRPath class methodsFor: 'accessing' stamp: 'lr 9/27/2007 09:55'!currentStructure	^ '.'! !!PRPath class methodsFor: 'testing' stamp: 'lr 4/21/2009 15:23'!isValidName: aString	^ aString isNil not		and: [ aString isEmpty not		and: [ aString ~= self parentStructure		and: [ aString ~= self currentStructure		and: [ aString allSatisfy: [ :char | self validCharacters includes: char ] ] ] ] ]! !!PRPath class methodsFor: 'accessing' stamp: 'lr 9/27/2007 09:54'!parentStructure	^ '..'! !!PRPath class methodsFor: 'accessing' stamp: 'lr 9/27/2007 09:55'!pathDelimiter	^ $/! !!PRPath class methodsFor: 'accessing' stamp: 'lr 11/3/2009 21:36'!validCharacters	"Answer a string with all the valid characters for path names, these are all the Safe-HTTP characters."		^ '-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz'! !!PRPath methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!stream	^ stream! !!PRPath methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!stream: aStream	stream := aStream! !!PRIncompletePathLookup methodsFor: 'private' stamp: 'lr 4/11/2009 18:03'!childNotFound: aStructure	self escape: aStructure! !!PRIncompletePathLookup methodsFor: 'actions' stamp: 'lr 4/11/2009 18:09'!lookup: aStructure	^ Association 		key: (super lookup: aStructure)		value: self pathElement! !!PRPathLookup class methodsFor: 'instance creation' stamp: 'lr 4/11/2009 16:04'!start: aStructure path: aString	^ self start: aStructure path: aString ifAbsent: [ nil ]! !!PRPathLookup class methodsFor: 'instance creation' stamp: 'lr 4/11/2009 16:04'!start: aStructure path: aString ifAbsent: aBlock	^ self new		stream: aString readStream;		absentBlock: aBlock;		lookup: aStructure! !!PRPathLookup methodsFor: 'accessing' stamp: 'lr 4/11/2009 16:03'!absentBlock	^ absentBlock! !!PRPathLookup methodsFor: 'accessing' stamp: 'lr 4/11/2009 16:04'!absentBlock: aBlock	absentBlock := aBlock! !!PRPathLookup methodsFor: 'private' stamp: 'lr 4/11/2009 18:04'!childNotFound: aStructure	self escape: self absentBlock value! !!PRPathLookup methodsFor: 'actions' stamp: 'lr 9/27/2007 09:57'!lookup: aStructure	^ self withEscaper: [		self stream peek = self class pathDelimiter			ifTrue: [ self lookupRoot: aStructure ]			ifFalse: [ self lookupStart: aStructure ].		self childNotFound: aStructure ]! !!PRPathLookup methodsFor: 'actions' stamp: 'lr 3/9/2006 11:29'!lookupRoot: aStructure	self stream next.	self visit: aStructure root! !!PRPathLookup methodsFor: 'actions' stamp: 'lr 3/9/2006 11:29'!lookupStart: aStructure	self visit: aStructure! !!PRPathLookup methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!pathElement	^ pathElement! !!PRPathLookup methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!pathElement: aString	pathElement := aString! !!PRPathLookup methodsFor: 'private' stamp: 'lr 9/27/2007 09:58'!readNext	^ self stream upTo: self class pathDelimiter! !!PRPathLookup methodsFor: 'visiting-decorations' stamp: 'lr 4/21/2009 18:44'!visitChildren: anObject	"This method does the lookup of the next structure by checking for a child with that name, since this value is hashed it can be done efficiently. If the lookup by name fails, it tries to match the title case-insensitive by iterating through the children. If this fails as well, the message ==#childNotFound:== is sent."	anObject		at: self pathElement		ifPresent: [ :value | ^ self visit: value ].	anObject children do: [ :each |		((self pathElement sameAs: each name)			or: [ self pathElement sameAs: each title ])				ifTrue: [ ^ self visit: each ] ].	self childNotFound: anObject decorated! !!PRPathLookup methodsFor: 'visiting-structure' stamp: 'lr 9/27/2007 09:58'!visitStructure: aStructure	self stream atEnd		ifTrue: [ self escape: aStructure ].	self pathElement: self readNext.	self pathElement = self class currentStructure		ifTrue: [ ^ self visit: aStructure ].	self pathElement = self class parentStructure		ifTrue: [			^ self visit: (aStructure isRoot				ifTrue: [ aStructure ]				ifFalse: [ aStructure parent ]) ].	aStructure hasChildren		ifFalse: [ self childNotFound: aStructure ]! !!PRPathReference class methodsFor: 'instance creation' stamp: 'lr 11/2/2007 13:29'!from: aFirstStructure to: aSecondStructure	^ self new		setSource: aFirstStructure;		setTarget: aSecondStructure;		relativeReference! !!PRPathReference class methodsFor: 'instance creation' stamp: 'lr 11/2/2007 13:30'!to: aStructure	^ self new		setTarget: aStructure;		absoluteReference! !!PRPathReference methodsFor: 'actions' stamp: 'lr 11/2/2007 13:32'!absoluteReference	self targetPath removeFirst.	self writeDelimiter.	self targetPath 			do: [ :each | self visit: each ]		separatedBy: [ self writeDelimiter ].	^ self stream contents! !!PRPathReference methodsFor: 'private' stamp: 'lr 9/27/2007 09:42'!hasCommonPath	"Answer true if the source and target path start with the same structure."		 ^ self sourcePath notEmpty		and: [ self targetPath notEmpty		and: [ self sourcePath first = self targetPath first ] ]! !!PRPathReference methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:29'!initialize	super initialize.	stream := WriteStream on: String new! !!PRPathReference methodsFor: 'actions' stamp: 'lr 11/2/2007 13:36'!relativeReference	self validateKernel.	self removeCommonPath.	self source = self target 		ifTrue: [ ^ self class currentStructure ].	self sourcePath reverseDo: [ :each |		self writeParent; writeDelimiter ].	self targetPath 			do: [ :each | self visit: each; writeDelimiter ].	^ self stream skip: -1; contents! !!PRPathReference methodsFor: 'private' stamp: 'lr 9/27/2007 09:44'!removeCommonPath	"Remove all common path elements from the source and target path."		[ self hasCommonPath ] whileTrue: [ 		self sourcePath removeFirst.		self targetPath removeFirst ]! !!PRPathReference methodsFor: 'initialization' stamp: 'lr 9/27/2007 09:41'!setSource: aStructure	source := aStructure.	sourcePath := aStructure parents! !!PRPathReference methodsFor: 'initialization' stamp: 'lr 9/27/2007 09:41'!setTarget: aStructure	target := aStructure.	targetPath := aStructure parents! !!PRPathReference methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!source	^ source! !!PRPathReference methodsFor: 'accessing' stamp: 'lr 9/27/2007 09:41'!sourcePath	^ sourcePath! !!PRPathReference methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!target	^ target! !!PRPathReference methodsFor: 'accessing' stamp: 'lr 9/27/2007 09:41'!targetPath	^ targetPath! !!PRPathReference methodsFor: 'private' stamp: 'lr 9/27/2007 09:43'!validateKernel	"Validate that the source and target are contained within the same kernel. This is done by comparing the root structure."		self hasCommonPath		ifFalse: [ PRInvalidKernelError signal: 'Unable to reference external wiki.' ]! !!PRPathReference methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:29'!visitStructure: aStructure	stream nextPutAll: aStructure name! !!PRPathReference methodsFor: 'private-writing' stamp: 'lr 9/27/2007 09:58'!writeDelimiter	stream nextPut: self class pathDelimiter! !!PRPathReference methodsFor: 'private-writing' stamp: 'lr 9/27/2007 09:54'!writeParent	stream nextPutAll: self class parentStructure! !!PRChildrenVisitor methodsFor: 'actions' stamp: 'lr 3/9/2006 11:29'!all	"Tell the receiver to visit structures recursively."	all := true! !!PRChildrenVisitor methodsFor: 'actions' stamp: 'lr 9/27/2007 10:02'!everything	"Tell the receiver to visit everything."	with := all := true! !!PRChildrenVisitor methodsFor: 'initialization' stamp: 'lr 3/18/2008 22:35'!initialize	super initialize.	with := all := false! !!PRChildrenVisitor methodsFor: 'accessing' stamp: 'lr 8/24/2006 22:42'!sortBlock: aBlock	sortBlock := aBlock! !!PRChildrenVisitor methodsFor: 'visiting-decoration' stamp: 'lr 11/15/2009 20:03'!visitChildren: aDecoration	(all or: [ structure = aDecoration decorated ])		ifFalse: [ ^ self ].	self visitAll: (sortBlock isNil 		ifTrue: [ aDecoration children ]		ifFalse: [ aDecoration children asSortedCollection: sortBlock ])! !!PRChildrenVisitor methodsFor: 'visiting-structure' stamp: 'lr 9/27/2007 10:11'!visitStructure: aStructure	(with or: [ structure ~= aStructure ])		ifTrue: [ block value: aStructure ]! !!PRChildrenVisitor methodsFor: 'actions' stamp: 'lr 3/9/2006 11:29'!with	"Tell the receiver to visit the start structure as well."	with := true! !!PREnumerableVisitor class methodsFor: 'instance creation' stamp: 'lr 1/21/2007 11:04'!on: aStructure	^ self new structure: aStructure! !!PREnumerableVisitor methodsFor: 'enumerating' stamp: 'lr 11/25/2008 09:06'!anySatisfy: aBlock	"Evaluate aBlock for every structure visited by the receiver. If aBlock returns true for any element return true. Otherwise return false."	self do: [ :each | 		(aBlock value: each)			ifTrue: [ ^ true ] ].	^ false! !!PREnumerableVisitor methodsFor: 'enumerating' stamp: 'lr 10/30/2006 17:13'!collect: aBlock	"Evaluate aBlock for every structure visited by the receiver and answer a collection of the results."	^ Array streamContents: [ :stream |		self do: [ :each |			stream nextPut: (aBlock value: each) ] ]! !!PREnumerableVisitor methodsFor: 'accessing' stamp: 'lr 1/19/2007 14:07'!contents	"Answer a collection of all elements that have been visited."	^ self collect: [ :each | each ]! !!PREnumerableVisitor methodsFor: 'enumerating' stamp: 'lr 1/21/2007 10:49'!do: aBlock	"Evaluate aBlock for every structure visited by the receiver."	self setBlock: aBlock; start: structure; setBlock: nil! !!PREnumerableVisitor methodsFor: 'enumerating' stamp: 'lr 4/5/2007 17:59'!do: aBlock separatedBy: aSeparatorBlock	"Evaluate aBlock for every structure visited by the receiver, and evaluate aSeparatorBlock between."	| first |	first := true.	self do: [ :each |		first			ifTrue: [ first := false ]			ifFalse: [ aSeparatorBlock value ].		aBlock value: each ]! !!PREnumerableVisitor methodsFor: 'enumerating' stamp: 'lr 4/5/2007 17:59'!inject: anObject into: aBlock	"Accumulate a running value associated with evaluating the argument aBlock with the current value of the argument anObject and the receiver as block arguments."	| next |	next := anObject.	self do: [ :each | next := aBlock value: next value: each ].	^ next! !!PREnumerableVisitor methodsFor: 'enumerating' stamp: 'lr 4/10/2007 21:49'!reject: aBlock	"Evaluate aBlock for every structure visited by the receiver and answer a collection for which aBlock evaluates to ==false==."	^ self select: [ :each | (aBlock value: each) not ]! !!PREnumerableVisitor methodsFor: 'enumerating' stamp: 'lr 4/10/2007 21:49'!select: aBlock	"Evaluate aBlock for every structure visited by the receiver and answer a collection for which aBlock evaluates to ==true==."	^ Array streamContents: [ :stream |		self do: [ :each |			(aBlock value: each)				ifTrue: [ stream nextPut: each ] ] ]! !!PREnumerableVisitor methodsFor: 'accessing' stamp: 'lr 5/5/2009 21:49'!size	"Answer the number of elements."	| tally |	tally := 0.	self do: [ :each | tally := tally + 1 ].	^ tally! !!PREnumerableVisitor methodsFor: 'accessing' stamp: 'lr 1/21/2007 11:04'!structure: aStructure	structure := aStructure! !!PRFullTextSearch methodsFor: 'accessing' stamp: 'lr 9/12/2009 12:01'!acceptToken: aString	"Add the token aString to be accepted."		aString isEmpty		ifFalse: [ acceptToken add: aString ]! !!PRFullTextSearch methodsFor: 'accessing' stamp: 'lr 2/12/2007 19:07'!caseSensitive: aBoolean	"Set if the search text is case sensitive or not."	caseSensitive := aBoolean! !!PRFullTextSearch methodsFor: 'initialization' stamp: 'lr 9/12/2009 11:58'!initialize	super initialize.	acceptToken := Set new.	rejectToken := Set new.	caseSensitive := false! !!PRFullTextSearch methodsFor: 'accessing' stamp: 'lr 9/12/2009 12:01'!rejectToken: aString	"Add the token aString to be rejected."	aString isEmpty		ifFalse: [ rejectToken add: aString ]! !!PRFullTextSearch methodsFor: 'visiting' stamp: 'lr 9/12/2009 12:08'!start: anObject	(acceptToken isEmpty and: [ rejectToken isEmpty ])		ifTrue: [ ^ self ].	super start: anObject! !!PRFullTextSearch methodsFor: 'deprecated' stamp: 'lr 9/12/2009 12:00'!subString: aString	self acceptToken: aString! !!PRFullTextSearch methodsFor: 'visiting-decoration' stamp: 'lr 3/9/2006 11:29'!visitChildren: anObject	self visitAll: anObject children! !!PRFullTextSearch methodsFor: 'visiting-structure' stamp: 'lr 9/12/2009 12:31'!visitStructure: aStructure	| accepted string |	accepted := false.	aStructure description do: [ :description |		description isSearchable ifTrue: [			string := description toString: (aStructure readUsing: description).			(rejectToken anySatisfy: [ :token | string includesSubstring: token caseSensitive: caseSensitive ])				ifTrue: [ ^ self ].			accepted := accepted				or: [ acceptToken anySatisfy: [ :token | string includesSubstring: token caseSensitive: caseSensitive ] ] ] ].	(accepted or: [ acceptToken isEmpty ])		ifTrue: [ block value: aStructure ]! !!PRIncomingReferences methodsFor: 'initialization' stamp: 'lr 10/30/2006 20:11'!initialize	super initialize.	structures := Set new! !!PRIncomingReferences methodsFor: 'accessing' stamp: 'lr 10/30/2006 20:30'!to: aStructure	structures add: aStructure! !!PRIncomingReferences methodsFor: 'accessing' stamp: 'lr 10/30/2006 20:30'!toAll: aCollection	structures addAll: aCollection! !!PRIncomingReferences methodsFor: 'visiting-decoration' stamp: 'lr 3/9/2006 11:29'!visitChildren: anObject	self visitAll: anObject children! !!PRIncomingReferences methodsFor: 'visiting-document' stamp: 'lr 10/30/2006 20:12'!visitInternalLink: anObject	(structures includes: anObject target)		ifTrue: [ block value: anObject ]! !!PRIncomingReferences methodsFor: 'visiting-structure' stamp: 'lr 2/18/2009 15:56'!visitStructure: aStructure	aStructure description do: [ :each |		each isDocumentDescription			ifTrue: [ self visit: (aStructure readUsing: each) ] ]! !!PROutgoingReferences methodsFor: 'accessing' stamp: 'lr 2/12/2007 19:07'!continue: aBlock	"A block to decide if the visitor should visit the structure referenced by the link passed into aBlock or not."	continue := aBlock! !!PROutgoingReferences methodsFor: 'initialization' stamp: 'lr 4/1/2009 21:58'!initialize	super initialize.	continue := [ :each | each isEmbedded and: [ each isBroken not ] ]! !!PROutgoingReferences methodsFor: 'visiting' stamp: 'lr 10/30/2006 19:42'!start: anObject	structures := Set new.	super start: anObject! !!PROutgoingReferences methodsFor: 'visiting-document' stamp: 'lr 4/1/2009 21:54'!visitInternalLink: anObject	super visitInternalLink: anObject.	(anObject target isNil or: [ structures includes: anObject target ])		ifTrue: [ ^ self ].	(continue value: anObject)		ifTrue: [ self visit: anObject target ]! !!PROutgoingReferences methodsFor: 'visiting-document' stamp: 'lr 4/1/2009 21:54'!visitLink: anObject	block value: anObject! !!PROutgoingReferences methodsFor: 'visiting-structure' stamp: 'lr 2/18/2009 15:14'!visitStructure: aStructure	structures add: aStructure.	aStructure description do: [ :each |		each isDocumentDescription			ifTrue: [ self visit: (aStructure readUsing: each) ] ]! !!PRPluggableVisitor methodsFor: 'initialization' stamp: 'lr 10/30/2006 16:53'!setBlock: aBlock	block := aBlock! !!PRVisitor class methodsFor: 'building' stamp: 'lr 3/30/2007 19:58'!buildVisitorHierarchyForClass: aClass selector: aSelectorBlock classified: aClassifiedBlock	" self buildVisitorHierarchyForClass: PRObject selector: [ :class | 'visit' , (class name allButFirst: 2) , ':' ] classified: [ :class | 'visiting-' , (class category copyAfterLast: $-) asLowercase ] "	aClass withAllSubclassesDo: [ :class |		(class category beginsWith: 'Pier-Model') ifTrue: [			(self selectors includes: (aSelectorBlock value: class)) ifFalse: [				self					compile: (String streamContents: [ :stream |						stream nextPutAll: (aSelectorBlock value: class); nextPutAll: ' anObject'; cr.						class = aClass ifFalse: [							stream tab; nextPutAll: 'self '; nextPutAll: (aSelectorBlock value: class superclass); nextPutAll: ' anObject' ] ])					classified: (aClassifiedBlock value: class) ].			class				compile: (String streamContents: [ :stream |					stream nextPutAll: 'accept: aVisitor'; cr.					stream tab; nextPutAll: 'aVisitor '; nextPutAll: (aSelectorBlock value: class); nextPutAll: ' self' ])				classified: #visiting ] ]! !!PRVisitor methodsFor: 'escaping' stamp: 'lr 3/9/2006 11:30'!escape: anObject	escaper value: anObject! !!PRVisitor methodsFor: 'escaping' stamp: 'lr 3/9/2006 11:30'!hasEscaper	^ escaper notNil! !!PRVisitor methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:30'!start: anObject	self visit: anObject! !!PRVisitor methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:30'!visit: anObject	anObject acceptDecorated: self! !!PRVisitor methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:30'!visitAll: aCollection	aCollection do: [ :each | self visit: each ]! !!PRVisitor methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:30'!visitAll: aCollection separatedBy: aBlock	aCollection do: [ :each | self visit: each ] separatedBy: aBlock! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitAnchor: anObject	self visitDocumentItem: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 5/26/2009 22:07'!visitAnnotatedParagraph: aDocument	self visitParagraph: aDocument! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitBoldFormat: anObject	self visitFormat: anObject! !!PRVisitor methodsFor: 'visiting-structure' stamp: 'lr 3/30/2007 20:01'!visitCase: anObject	self visitStructure: anObject! !!PRVisitor methodsFor: 'visiting-structure' stamp: 'lr 10/16/2007 22:28'!visitChildren: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 12/30/2007 21:53'!visitDataItem: anObject	self visitListItem: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 12/30/2007 19:33'!visitDefinitionList: anObject	self visitList: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitDocument: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:05'!visitDocumentGroup: anObject	self visitAll: anObject children! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:04'!visitDocumentItem: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 12:13'!visitEmptyParagraph: anObject	self visitParagraph: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitExternalLink: anObject	self visitLink: anObject! !!PRVisitor methodsFor: 'visiting-structure' stamp: 'lr 3/30/2007 20:01'!visitFile: anObject	self visitStructure: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitFormat: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitHeader: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitHorizontalRule: anObject	self visitDocumentItem: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitInternalLink: anObject	self visitLink: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitItalicFormat: anObject	self visitFormat: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 12/30/2007 19:56'!visitLineBreak: anObject	self visitDocumentItem: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitLink: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitList: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitListItem: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitMailLink: anObject	self visitExternalLink: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitMonospaceFormat: anObject	self visitFormat: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitOrderedList: anObject	self visitList: anObject! !!PRVisitor methodsFor: 'visiting-structure' stamp: 'lr 3/30/2007 20:01'!visitPage: anObject	self visitCase: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitParagraph: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitPreformatted: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 5/31/2007 07:46'!visitStrikethroughFormat: anObject	self visitFormat: anObject! !!PRVisitor methodsFor: 'visiting-structure' stamp: 'lr 10/16/2007 22:26'!visitStructure: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitSubscriptFormat: anObject	self visitFormat: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitSuperscriptFormat: anObject	self visitFormat: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitTable: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitTableCell: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitTableRow: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 12/30/2007 21:53'!visitTermItem: anObject	self visitListItem: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitText: anObject	self visitDocumentItem: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitUnderlineFormat: anObject	self visitFormat: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitUnorderedList: anObject	self visitList: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 1/9/2009 19:59'!visitValueLink: anObject 	self visitLink: anObject! !!PRVisitor methodsFor: 'escaping' stamp: 'lr 3/9/2006 11:30'!withEscaper: aBlock	| old |	old := escaper.	escaper := [ :value | ^ value ].	^ aBlock ensure: [ escaper := old ]! !!PRCompatibility class methodsFor: 'environment' stamp: 'lr 3/9/2006 11:30'!hashPassword: aString	"Answer a secure-hash value to be used to store and compare passwords in a save way."	^ SecureHashAlgorithm new hashMessage: aString! !!UndefinedObject methodsFor: '*pier-model' stamp: 'lr 3/9/2006 11:29'!accept: aVisitor	"do nothing"! !!PRInvalidNestingError class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:30'!of: aChildStructure in: aParentStructure	^ (self structure: aParentStructure)		signal: aChildStructure title printString , ' can not be a child of ' , aParentStructure title printString! !!PRStructureError class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:30'!structure: aStructure	^ self new		setStructure: aStructure;		yourself! !!PRStructureError methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:30'!setStructure: aStructure	structure := aStructure! !!PRStructureError methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!structure	^ structure! !!MADescription methodsFor: '*pier-model' stamp: 'lr 5/24/2006 15:15'!beEditable	self propertyAt: #editable put: true! !!MADescription methodsFor: '*pier-model' stamp: 'lr 12/15/2006 12:08'!beSearchable	self propertyAt: #searchable put: true! !!MADescription methodsFor: '*pier-model-deprecated' stamp: 'lr 4/8/2009 16:31'!displayName	^ self parameterName! !!MADescription methodsFor: '*pier-model-deprecated' stamp: 'lr 4/8/2009 16:31'!displayName: aString	self parameterName: aString! !!MADescription methodsFor: '*pier-model' stamp: 'lr 9/22/2008 08:39'!isDocumentDescription	^ false! !!MADescription methodsFor: '*pier-model' stamp: 'lr 5/24/2006 15:15'!isEditable	^ self propertyAt: #editable ifAbsent: [ false ]! !!MADescription methodsFor: '*pier-model' stamp: 'lr 12/15/2006 12:08'!isSearchable	^ self propertyAt: #searchable ifAbsent: [ false ]! !!MADescription methodsFor: '*pier-model' stamp: 'lr 3/26/2009 20:56'!parameterName	^ self propertyAt: #parameterName ifAbsent: [ nil ]! !!MADescription methodsFor: '*pier-model' stamp: 'lr 3/26/2009 20:57'!parameterName: aString	self propertyAt: #parameterName put: aString! !!MAStringReader methodsFor: '*pier-model-visiting' stamp: 'lr 10/16/2007 20:12'!visitDocumentDescription: aDescription	self object: (aDescription parserClass		parseStream: self stream)! !!MAStringReader methodsFor: '*pier-model-visiting' stamp: 'lr 4/11/2009 11:10'!visitStructureDescription: aDescription	self object: (self context structure		lookupPath: self contents		ifAbsent: [ self error: 'Invalid path' ])! !"Pier-Model"!!PRPersistencyTest commentStamp: 'kph 10/4/2006 19:56' prior: 0!For persistency tests we do not bypass PRKernel instances, instead we use kernels prefixed with '####'.!!PRDocumentDescriptionTest methodsFor: 'private' stamp: 'lr 11/2/2007 13:56'!actualClass	^ PRDocumentDescription! !!PRDocumentDescriptionTest methodsFor: 'private' stamp: 'lr 11/2/2007 13:57'!includedInstance	^ self description fromString: '!!Hello World'! !!PRDocumentDescriptionTest methodsFor: 'testing-accessing' stamp: 'lr 3/19/2008 21:13'!testAccessor	"This doesn't work, as the document description wraps the accessor with an accessor-delegator."! !!PRMockDecoration class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRMockDecoration methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!= aDecoration	^ super = aDecoration		and: [ self priority = aDecoration priority ]! !!PRMockDecoration methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!hash	^ super hash bitXor: self priority hash! !!PRMockDecoration methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!priority	^ priority! !!PRMockDecoration methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!priority: anInteger	priority := anInteger! !!PRDiffAlgorithmTests methodsFor: 'accessing' stamp: 'lr 9/28/2009 21:39'!assertDiffFrom: aSourceArray to: aTargetArray gives: aResultArray	| diff |	diff := PRDiffAlgorithm from: aSourceArray to: aTargetArray.	self assert: diff patchset = aResultArray! !!PRDiffAlgorithmTests methodsFor: 'testing-addition' stamp: 'lr 9/28/2009 20:23'!testAdditionBegin	self assertDiffFrom: #(3 4) to: #(1 2 3 4) gives: #((+ 1) (+ 2) (= 3) (= 4))! !!PRDiffAlgorithmTests methodsFor: 'testing-addition' stamp: 'lr 9/28/2009 21:34'!testAdditionBeginDuplicated	self assertDiffFrom: #(1 2 3) to: #(1 2 1 2 3) gives: #((+ 1) (+ 2) (= 1) (= 2) (= 3))! !!PRDiffAlgorithmTests methodsFor: 'testing-addition' stamp: 'lr 9/28/2009 20:23'!testAdditionEnd	self assertDiffFrom: #(1 2) to: #(1 2 3 4) gives: #((= 1) (= 2) (+ 3) (+ 4))! !!PRDiffAlgorithmTests methodsFor: 'testing-addition' stamp: 'lr 9/28/2009 21:35'!testAdditionEndDuplicated	self assertDiffFrom: #(1 2 3) to: #(1 2 3 1 2) gives: #((= 1) (= 2) (= 3) (+ 1) (+ 2))! !!PRDiffAlgorithmTests methodsFor: 'testing-addition' stamp: 'lr 9/28/2009 20:23'!testAdditionMiddle	self assertDiffFrom: #(1 4) to: #(1 2 3 4) gives: #((= 1) (+ 2) (+ 3) (= 4))! !!PRDiffAlgorithmTests methodsFor: 'testing-addition' stamp: 'lr 9/28/2009 21:37'!testAdditionMiddleDuplicated	self assertDiffFrom: #(1 2 3 4) to: #(1 2 2 3 3 4) gives: #((= 1) (= 2) (+ 2) (+ 3) (= 3) (= 4))! !!PRDiffAlgorithmTests methodsFor: 'testing-deformed' stamp: 'lr 9/28/2009 21:53'!testDifferent	self assertDiffFrom: #(1 2 3 4) to: #(5 6 7 8) gives: #((- 1) (- 2) (- 3) (- 4) (+ 5) (+ 6) (+ 7) (+ 8))! !!PRDiffAlgorithmTests methodsFor: 'testing-deformed' stamp: 'lr 9/28/2009 19:35'!testEmpty	self assertDiffFrom: #() to: #() gives: #()! !!PRDiffAlgorithmTests methodsFor: 'testing-deformed' stamp: 'lr 9/28/2009 20:26'!testIdentical	self assertDiffFrom: #(1 2 3 4) to: #(1 2 3 4) gives: #((= 1) (= 2) (= 3) (= 4))! !!PRDiffAlgorithmTests methodsFor: 'testing-removal' stamp: 'lr 9/28/2009 20:24'!testRemovalBegin	self assertDiffFrom: #(1 2 3 4) to: #(3 4) gives: #((- 1) (- 2) (= 3) (= 4))! !!PRDiffAlgorithmTests methodsFor: 'testing-removal' stamp: 'lr 9/28/2009 21:40'!testRemovalBeginDuplicated	self assertDiffFrom: #(1 2 1 2 3 4) to: #(1 2 3 4) gives: #((- 1) (- 2) (= 1) (= 2) (= 3) (= 4))! !!PRDiffAlgorithmTests methodsFor: 'testing-removal' stamp: 'lr 9/28/2009 20:24'!testRemovalEnd	self assertDiffFrom: #(1 2 3 4) to: #(1 2) gives: #((= 1) (= 2) (- 3) (- 4))! !!PRDiffAlgorithmTests methodsFor: 'testing-removal' stamp: 'lr 9/28/2009 21:39'!testRemovalEndDuplicated	self assertDiffFrom: #(1 2 3 4 3 4) to: #(1 2 3 4) gives: #((= 1) (= 2) (= 3) (= 4) (- 3) (- 4))! !!PRDiffAlgorithmTests methodsFor: 'testing-removal' stamp: 'lr 9/28/2009 20:24'!testRemovalMiddle	self assertDiffFrom: #(1 2 3 4) to: #(1 4) gives: #((= 1) (- 2) (- 3) (= 4))! !!PRDiffAlgorithmTests methodsFor: 'testing-removal' stamp: 'lr 9/28/2009 21:40'!testRemovalMiddleDuplicated	self assertDiffFrom: #(1 2 2 3 3 4) to: #(1 2 3 4) gives: #((= 1) (= 2) (- 2) (- 3) (= 3) (= 4))! !!PRDiffAlgorithmTests methodsFor: 'testing' stamp: 'lr 9/28/2009 21:47'!testSmalltalkMethod	self assertDiffFrom: #('patchsetDo:' 'aBlock' '"Evaluate' 'aBlock' 'for' 'every' 'patch' 'operation' 'of' 'the' 'receiver.' 'The' 'first' 'argument' 'is' 'the' 'operation,' 'where' '#=' 'is' 'identity,' '#+' 'is' 'insertion,' 'and' '#-' 'is' 'deletion.' 'The' 'second' 'argument' 'is' 'the' 'object.' 'The' 'third' 'argument' 'the' 'index' 'in' 'the' 'source' 'or' 'target' 'list."' '|' 'sourceIndex' 'targetIndex' '|' 'sourceIndex' ':=' 'targetIndex' ':=' '1.' '[' 'sourceIndex' '<=' 'source' 'size' 'or:' '[' 'targetIndex' '<=' 'target' 'size' ']' ']' 'whileTrue:' '[' '[' 'sourceIndex' '<=' 'source' 'size' 'and:' '[' '(sourceText' 'at:' 'sourceIndex)' 'isNil' ']' ']' 'whileTrue:' '[' 'aBlock' 'value:' '#-' 'value:' '(source' 'at:' 'sourceIndex)' 'value:' 'sourceIndex.' 'sourceIndex' ':=' 'sourceIndex' '+' '1' '].' '[' 'targetIndex' '<=' 'target' 'size' 'and:' '[' '(targetText' 'at:' 'targetIndex)' 'isNil' ']' ']' 'whileTrue:' '[' 'aBlock' 'value:' '#+' 'value:' '(target' 'at:' 'targetIndex)' 'value:' 'targetIndex.' 'targetIndex' ':=' 'targetIndex' '+' '1' '].' 'targetIndex' '<=' 'target' 'size' 'ifTrue:' '[' 'aBlock' 'value:' '#=' 'value:' '(targetText' 'at:' 'targetIndex)' 'value:' 'targetIndex' '].' 'sourceIndex' ':=' 'sourceIndex' '+' '1.' 'targetIndex' ':=' 'targetIndex' '+' '1' ']') to: #('patchsetDo:' 'aBlock' '"Evaluate' 'aBlock' 'for' 'every' 'patch' 'operation' 'of' 'the' 'receiver.' 'The' 'first' 'argument' 'is' 'the' 'operation,' 'where' '#=' 'is' 'identity,' '#+' 'is' 'insertion,' 'and' '#-' 'is' 'deletion.' 'The' 'second' 'argument' 'is' 'the' 'object.' 'The' 'third' 'argument' 'the' 'index' 'in' 'the' 'source' 'or' 'target' 'array."' '|' 'sourceIndex' 'targetIndex' '|' 'sourceIndex' ':=' 'targetIndex' ':=' '1.' '[' 'sourceIndex' '<=' 'source' 'size' 'or:' '[' 'targetIndex' '<=' 'target' 'size' ']' ']' 'whileTrue:' '[' '[' 'sourceIndex' '<=' 'source' 'size' 'and:' '[' '(sourceText' 'at:' 'sourceIndex)' 'isNil' ']' ']' 'whileTrue:' '[' 'aBlock' 'value:' '#-' 'value:' '(source' 'at:' 'sourceIndex)' 'value:' 'sourceIndex.' 'sourceIndex' ':=' 'sourceIndex' '+' '1' '].' '[' 'targetIndex' '<=' 'target' 'size' 'and:' '[' '(targetText' 'at:' 'targetIndex)' 'isNil' ']' ']' 'whileTrue:' '[' 'aBlock' 'value:' '#+' 'value:' '(target' 'at:' 'targetIndex)' 'value:' 'targetIndex.' 'targetIndex' ':=' 'targetIndex' '+' '1' '].' '[' 'sourceIndex' '<=' 'source' 'size' 'and:' '[' 'targetIndex' '<=' 'target' 'size' 'and:' '[' '(source' 'at:' 'sourceIndex)' 'notNil' 'and:' '[' '(target' 'at:' 'targetIndex)' 'notNil' 'and:' '[' '(source' 'at:' 'sourceIndex)' '=' '(target' 'at:' 'targetIndex)' ']' ']' ']' ']' ']' 'whileTrue:' '[' 'aBlock' 'value:' '#=' 'value:' '(target' 'at:' 'targetIndex)' 'value:' 'targetIndex.' 'sourceIndex' ':=' 'sourceIndex' '+' '1.' 'targetIndex' ':=' 'targetIndex' '+' '1' ']' ']') gives: #((= 'patchsetDo:') (= 'aBlock') (= '"Evaluate') (= 'aBlock') (= 'for') (= 'every') (= 'patch') (= 'operation') (= 'of') (= 'the') (= 'receiver.') (= 'The') (= 'first') (= 'argument') (= 'is') (= 'the') (= 'operation,') (= 'where') (= '#=') (= 'is') (= 'identity,') (= '#+') (= 'is') (= 'insertion,') (= 'and') (= '#-') (= 'is') (= 'deletion.') (= 'The') (= 'second') (= 'argument') (= 'is') (= 'the') (= 'object.') (= 'The') (= 'third') (= 'argument') (= 'the') (= 'index') (= 'in') (= 'the') (= 'source') (= 'or') (= 'target') (- 'list."') (+ 'array."') (= '|') (= 'sourceIndex') (= 'targetIndex') (= '|') (= 'sourceIndex') (= ':=') (= 'targetIndex') (= ':=') (= '1.') (= '[') (= 'sourceIndex') (= '<=') (= 'source') (= 'size') (= 'or:') (= '[') (= 'targetIndex') (= '<=') (= 'target') (= 'size') (= ']') (= ']') (= 'whileTrue:') (= '[') (= '[') (= 'sourceIndex') (= '<=') (= 'source') (= 'size') (= 'and:') (= '[') (= '(sourceText') (= 'at:') (= 'sourceIndex)') (= 'isNil') (= ']') (= ']') (= 'whileTrue:') (= '[') (= 'aBlock') (= 'value:') (= '#-') (= 'value:') (= '(source') (= 'at:') (= 'sourceIndex)') (= 'value:') (= 'sourceIndex.') (= 'sourceIndex') (= ':=') (= 'sourceIndex') (= '+') (= '1') (= '].') (= '[') (= 'targetIndex') (= '<=') (= 'target') (= 'size') (= 'and:') (= '[') (= '(targetText') (= 'at:') (= 'targetIndex)') (= 'isNil') (= ']') (= ']') (= 'whileTrue:') (= '[') (= 'aBlock') (= 'value:') (= '#+') (= 'value:') (= '(target') (= 'at:') (= 'targetIndex)') (= 'value:') (= 'targetIndex.') (= 'targetIndex') (= ':=') (= 'targetIndex') (= '+') (= '1') (= '].') (- 'targetIndex') (- '<=') (- 'target') (- 'size') (- 'ifTrue:') (- '[') (- 'aBlock') (- 'value:') (- '#=') (- 'value:') (- '(targetText') (- 'at:') (- 'targetIndex)') (- 'value:') (- 'targetIndex') (- '].') (- 'sourceIndex') (- ':=') (- 'sourceIndex') (- '+') (- '1.') (- 'targetIndex') (- ':=') (- 'targetIndex') (- '+') (- '1') (- ']') (+ '[') (+ 'sourceIndex') (+ '<=') (+ 'source') (+ 'size') (+ 'and:') (+ '[') (+ 'targetIndex') (+ '<=') (+ 'target') (+ 'size') (+ 'and:') (+ '[') (+ '(source') (+ 'at:') (+ 'sourceIndex)') (+ 'notNil') (+ 'and:') (+ '[') (+ '(target') (+ 'at:') (+ 'targetIndex)') (+ 'notNil') (+ 'and:') (+ '[') (+ '(source') (+ 'at:') (+ 'sourceIndex)') (+ '=') (+ '(target') (+ 'at:') (+ 'targetIndex)') (+ ']') (+ ']') (+ ']') (+ ']') (+ ']') (+ 'whileTrue:') (+ '[') (+ 'aBlock') (+ 'value:') (+ '#=') (+ 'value:') (+ '(target') (+ 'at:') (+ 'targetIndex)') (+ 'value:') (+ 'targetIndex.') (+ 'sourceIndex') (+ ':=') (+ 'sourceIndex') (+ '+') (+ '1.') (+ 'targetIndex') (+ ':=') (+ 'targetIndex') (+ '+') (+ '1') (+ ']') (+ ']'))! !!PRDiffAlgorithmTests methodsFor: 'testing-deformed' stamp: 'lr 9/28/2009 20:25'!testSourceOnly	self assertDiffFrom: #() to: #(1 2 3 4) gives: #((+ 1) (+ 2) (+ 3) (+ 4))! !!PRDiffAlgorithmTests methodsFor: 'testing-deformed' stamp: 'lr 9/28/2009 20:25'!testTargetOnly	self assertDiffFrom: #(1 2 3 4) to: #() gives: #((- 1) (- 2) (- 3) (- 4))	! !!PRDocumentParserTest methodsFor: 'running' stamp: 'lr 4/5/2007 13:53'!setUp	parser := PRDocumentParser new! !!PRDocumentParserTest methodsFor: 'testing-escaping' stamp: 'lr 4/5/2007 14:04'!testEscape1	self assert: (parser class escape: '' using: 'a') = ''.	self assert: (parser class escape: 'a' using: 'a') = '\a'.	self assert: (parser class escape: 'ab' using: 'a') = '\ab'.	self assert: (parser class escape: 'ba' using: 'a') = 'b\a'.	self assert: (parser class escape: 'bab' using: 'a') = 'b\ab'! !!PRDocumentParserTest methodsFor: 'testing-escaping' stamp: 'lr 4/5/2007 14:05'!testEscape2	self assert: (parser class escape: 'aa' using: 'a') = '\a\a'.	self assert: (parser class escape: 'aab' using: 'a') = '\a\ab'.	self assert: (parser class escape: 'baa' using: 'a') = 'b\a\a'.	self assert: (parser class escape: 'baab' using: 'a') = 'b\a\ab'! !!PRDocumentParserTest methodsFor: 'testing-escaping' stamp: 'lr 4/5/2007 15:54'!testEscape3	self assert: (parser class escape: 'a' using: 'aa') = 'a'.	self assert: (parser class escape: 'aa' using: 'aa') = '\aa'.	self assert: (parser class escape: 'aaa' using: 'aa') = '\aaa'.	self assert: (parser class escape: 'aaaa' using: 'aa') = '\aa\aa'! !!PRDocumentParserTest methodsFor: 'testing' stamp: 'lr 4/5/2007 13:57'!testFindFirstAtIn1	self assert: (parser findFirst: 'ab' at: 1 in: '') = 0.	self assert: (parser findFirst: 'ab' at: 1 in: 'ab') = 1.	self assert: (parser findFirst: 'ab' at: 1 in: 'cab') = 2.	self assert: (parser findFirst: 'ab' at: 1 in: '\ab') = 0.	self assert: (parser findFirst: 'ab' at: 1 in: 'c\ab') = 0.	self assert: (parser findFirst: 'ab' at: 1 in: '\abab') = 4.	self assert: (parser findFirst: 'ab' at: 1 in: 'c\abab') = 5! !!PRDocumentParserTest methodsFor: 'testing' stamp: 'lr 4/5/2007 13:57'!testFindFirstAtIn2	self assert: (parser findFirst: 'ab' at: 2 in: 'ab') = 0.	self assert: (parser findFirst: 'ab' at: 2 in: 'cab') = 2.	self assert: (parser findFirst: 'ab' at: 5 in: '\abab') = 0.	self assert: (parser findFirst: 'ab' at: 5 in: 'c\abab') = 5! !!PRDocumentParserTest methodsFor: 'testing' stamp: 'lr 4/6/2007 22:02'!testNextCrLf1	parser initializeOn: ('a' , String cr , 'b') readStream.	self assert: parser nextLine = 'a'.	self assert: parser nextLine = 'b'.	self assert: parser nextLine isNil.	parser initializeOn: ('a' , String lf , 'b') readStream.	self assert: parser nextLine = 'a'.	self assert: parser nextLine = 'b'.	self assert: parser nextLine isNil.	parser initializeOn: ('a' , String cr , String lf , 'b') readStream.	self assert: parser nextLine = 'a'.	self assert: parser nextLine = 'b'.	self assert: parser nextLine isNil! !!PRDocumentParserTest methodsFor: 'testing' stamp: 'lr 4/6/2007 22:03'!testNextCrLf2	parser initializeOn: (String lf , 'a') readStream.	self assert: parser nextLine = ''.	self assert: parser nextLine = 'a'.	self assert: parser nextLine isNil.	parser initializeOn: (String cr , 'a') readStream.	self assert: parser nextLine = ''.	self assert: parser nextLine = 'a'.	self assert: parser nextLine isNil.	parser initializeOn: (String cr , String lf , 'a') readStream.	self assert: parser nextLine = ''.	self assert: parser nextLine = 'a'.	self assert: parser nextLine isNil! !!PRDocumentParserTest methodsFor: 'testing' stamp: 'lr 4/6/2007 22:03'!testNextCrLf3	parser initializeOn: ('a' , String lf) readStream.	self assert: parser nextLine = 'a'.	self assert: parser nextLine isNil.	parser initializeOn: ('a' , String cr) readStream.	self assert: parser nextLine = 'a'.	self assert: parser nextLine isNil.	parser initializeOn: ('a' , String cr , String lf) readStream.	self assert: parser nextLine = 'a'.	self assert: parser nextLine isNil! !!PRDocumentParserTest methodsFor: 'testing' stamp: 'lr 5/28/2007 16:31'!testNextCrLf4	parser initializeOn: (String lf , String lf) readStream.	self assert: parser nextLine = ''.	self assert: parser nextLine = ''.	self assert: parser nextLine isNil.	parser initializeOn: (String cr , String cr) readStream.	self assert: parser nextLine = ''.	self assert: parser nextLine = ''.	self assert: parser nextLine isNil.	parser initializeOn: (String cr , String lf) readStream.	self assert: parser nextLine = ''.	self assert: parser nextLine isNil.	parser initializeOn: (String lf , String cr) readStream.	self assert: parser nextLine = ''.	self assert: parser nextLine = ''.	self assert: parser nextLine isNil! !!PRDocumentParserTest methodsFor: 'testing-escaping' stamp: 'lr 4/5/2007 14:02'!testUnescape1	self assert: (parser class unescape: '\a') = 'a'.	self assert: (parser class unescape: '\ab') = 'ab'.	self assert: (parser class unescape: 'b\a') = 'ba'.	self assert: (parser class unescape: 'b\ab') = 'bab'! !!PRDocumentParserTest methodsFor: 'testing-escaping' stamp: 'lr 4/5/2007 14:02'!testUnescape2	self assert: (parser class unescape: '\a\a') = 'aa'.	self assert: (parser class unescape: '\a\ab') = 'aab'.	self assert: (parser class unescape: 'b\a\a') = 'baa'.	self assert: (parser class unescape: 'b\a\ab') = 'baab'! !!PRDocumentParserTest methodsFor: 'testing-escaping' stamp: 'lr 4/5/2007 14:03'!testUnescape3	self assert: (parser class unescape: '') = ''.	self assert: (parser class unescape: '\') = ''.	self assert: (parser class unescape: '\\') = '\'.	self assert: (parser class unescape: '\\\') = '\'.	self assert: (parser class unescape: '\\\\') = '\\'! !!PRAddCommandTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRAddCommandTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRAddCommand! !!PRAddCommandTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!testAddChild	| child |	self		shouldnt: [ self command execute ]		raise: PRStructureError.	self assert: (self structure childrenDecoration		includes: self command name).	child := self structure childrenDecoration		at: self command name.	self assert: child name = self command name.	self assert: child species = self command type! !!PRAddCommandTest methodsFor: 'testing' stamp: 'lr 1/10/2007 10:49'!testAddConflict	self		shouldnt: [ self command execute ]		raise: PRConflictingNameError.	self		should: [ self command execute ]		raise: PRConflictingNameError! !!PRAddCommandTest methodsFor: 'testing-accessing' stamp: 'lr 4/15/2009 18:23'!testLink	| link |	self assert: self command link isNil.		link := PRInternalLink new.	link owner: self command structure.	self command link: link.	self assert: self command link = link.	self assert: link isBroken.		self command execute.	self deny: link isBroken.	self assert: link target name = self command name.	self assert: link reference = 'untitled'! !!PRAddCommandTest methodsFor: 'testing-accessing' stamp: 'lr 3/30/2009 21:43'!testName	self assert: self command name = 'untitled'.	self command name: 'something'.	self assert: self command name = 'something'! !!PRAddCommandTest methodsFor: 'testing-utilties' stamp: 'lr 11/3/2009 22:03'!testSuggestName	command := self command		suggestName: 'sucker for your sound'.	self assert: self command name = 'sucker-for-your-sound'.	self assert: self command title = 'Sucker for your sound'.		command := self command		suggestName: 'Gameboy/Homeboy'.	self assert: self command name = 'Gameboy_Homeboy'.	self assert: self command title = 'Gameboy/Homeboy'! !!PRAddCommandTest methodsFor: 'testing-accessing' stamp: 'lr 3/30/2009 21:42'!testType	self assert: self command type = PRPage.	self command type: PRFile.	self assert: self command type = PRFile! !!PRAddCommandTest methodsFor: 'testing-utilties' stamp: 'lr 3/30/2009 21:59'!testTypeClasses	| classes |	PRCurrentContext		use: self		during: [ classes := self actualClass structureClasses ].	self assert: (classes notEmpty).	self assert: (classes includes: PRPage)! !!PRAddCommandTest methodsFor: 'testing' stamp: 'lr 3/30/2009 21:25'!testUncheckedConflict	self command execute.		self command beUnchecked.	self command structure enumerator		do: [ :each | each remove ].		self		shouldnt: [ self command execute ]		raise: PRConflictingNameError! !!PRAddCommandTest methodsFor: 'testing-utilties' stamp: 'lr 4/21/2009 15:25'!testUniqueTitle	20 timesRepeat: [		self			shouldnt: [				self structure addChild: (PRPage named: (self command					uniqueName: 'foo' in: self structure)) ]			raise: PRConflictingNameError ].	#( 'foo' 'foo-2' 'foo-9' 'foo-10' 'foo-11' 'foo-20' ) do: [ :each |		self assert: (self structure childrenDecoration includes: each) ]! !!PRCommandTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRCommandTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRCommand! !!PRCommandTest methodsFor: 'private' stamp: 'lr 2/24/2007 21:04'!actualInstance	^ self actualClass new! !!PRCommandTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!command	^ command ifNil: [ command := self actualInstance ]! !!PRCommandTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!context	^ context ifNil: [ context := self contextInstance ]! !!PRCommandTest methodsFor: 'private' stamp: 'lr 2/24/2007 21:03'!contextInstance	^ PRContext kernel: self kernel structure: self structure command: self command! !!PRCommandTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!instance	^ self command! !!PRCommandTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!kernel	^ kernel ifNil: [ kernel := self kernelInstance ]! !!PRCommandTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!kernelInstance	^ PRKernel new		root: ((PRPage named: 'root')			addChild: (PRPage named: 'folder');			addChild: (self structure);			yourself);		yourself! !!PRCommandTest methodsFor: 'running' stamp: 'lr 2/24/2007 21:08'!setUp	context := self contextInstance! !!PRCommandTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!structure	^ structure ifNil: [ structure := self structureInstance ]! !!PRCommandTest methodsFor: 'private' stamp: 'lr 1/15/2007 21:34'!structureInstance	^ PRPage named: 'command'! !!PRCommandTest methodsFor: 'testing-accessing' stamp: 'lr 3/30/2009 21:39'!testAccessKey	self assert: (self actualClass accessKey isNil or: [ self actualClass accessKey isCharacter ])! !!PRCommandTest methodsFor: 'testing-accessing' stamp: 'lr 10/22/2007 22:17'!testAnswer	self assert: self command answer isNil.	self command answer: self context.	self deny: self command answer = self context! !!PRCommandTest methodsFor: 'testing-accessing' stamp: 'lr 10/22/2007 22:06'!testContext	self assert: self command context notNil.	context := self context command: self command.	self assert: self command context = self context! !!PRCommandTest methodsFor: 'testing-accessing' stamp: 'lr 3/30/2009 21:51'!testDate	| stamp |	self assert: self command date isNil.	self command timestamp: (stamp := TimeStamp now).	self assert: self command date = stamp asDate! !!PRCommandTest methodsFor: 'testing-testing' stamp: 'lr 2/12/2007 19:07'!testIsChecked	self assert: self command isChecked.	self command beUnchecked.	self deny: self command isChecked.	self command beChecked.	self assert: self command isChecked! !!PRCommandTest methodsFor: 'testing-testing' stamp: 'lr 3/30/2009 21:52'!testIsEdit	self deny: self command isEdit! !!PRCommandTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:31'!testIsLogged	self assert: self command isLogged! !!PRCommandTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:31'!testIsQuick	self deny: self command isQuick! !!PRCommandTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:31'!testIsView	self deny: self command isView! !!PRCommandTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testKernel	self assert: self command kernel = self kernel! !!PRCommandTest methodsFor: 'testing-accessing' stamp: 'lr 3/30/2009 21:50'!testLabel	self assert: self actualClass label isString.	self assert: self actualClass label isEmpty not.		self assert: self instance label isString.	self assert: self instance label isEmpty not! !!PRCommandTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testRoot	self assert: self command root = self kernel root! !!PRCommandTest methodsFor: 'testing-accessing' stamp: 'lr 3/30/2009 21:40'!testShortLabel	self assert: self actualClass shortLabel isString.	self assert: self actualClass shortLabel isEmpty not! !!PRCommandTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testStructure	self assert: self command structure = self structure! !!PRCommandTest methodsFor: 'testing-accessing' stamp: 'lr 3/30/2009 21:51'!testTime	| stamp |	self assert: self command time isNil.	self command timestamp: (stamp := TimeStamp now).	self assert: self command time = stamp asTime! !!PRCommandTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testTimestamp	| stamp |	self assert: self command timestamp isNil.	self command timestamp: (stamp := TimeStamp now).	self assert: self command timestamp = stamp! !!PRCommandTest methodsFor: 'testing-utilities' stamp: 'lr 2/12/2007 19:07'!testUniqueName	20 timesRepeat: [		self			shouldnt: [				self structure addChild: (PRPage named: (self command					uniqueName: 'foo' in: self structure)) ]			raise: PRConflictingNameError ]! !!PRCommandTest methodsFor: 'testing-utilities' stamp: 'lr 2/12/2007 19:07'!testUniqueNameDoesNotAddDecoration	self command uniqueName: 'foo' in: self structure.	self structure		decorationOfClass: self structure childrenDecorationClass		ifAbsent: [ ^ self ].	self assert: self structure hasChildren! !!PRCommandTest methodsFor: 'testing-validating' stamp: 'lr 1/10/2007 10:49'!testValidateChild	self		should: [			self command				validateChild: (PRPage named: 'folder')				in: self context root ]		raise: PRConflictingNameError.	self		shouldnt: [			self command				validateChild: (PRPage named: 'zork')				in: self context root ]		raise: PRConflictingNameError.	self		shouldnt: [			self command				validateChild: (self context root childrenDecoration at: 'folder')				in: self context root ]		raise: PRConflictingNameError! !!PRCommandTest methodsFor: 'testing-validating' stamp: 'lr 1/15/2007 21:34'!testValidateChildDoesNotAddDecoration	self command		validateChild: (PRPage named: 'zork')		in: self context root.	self structure		decorationOfClass: self structure childrenDecoration		ifAbsent: [ ^ self ].	self assert: self structure hasChildren! !!PRCommandTest methodsFor: 'testing-validating' stamp: 'lr 1/15/2007 21:34'!testValidateChildNamed	self		should: [			self command				validateChild: PRPage new				named: 'folder'				in: self context root ]		raise: PRConflictingNameError.	self		shouldnt: [			self command				validateChild: PRPage new				named: 'zork'				in: self context root ]		raise: PRConflictingNameError.	self		shouldnt: [			self command				validateChild: (self context root childrenDecoration					at: 'folder')				named: 'zork'				in: self context root ]		raise: PRConflictingNameError! !!PRCommandTest methodsFor: 'testing-validating' stamp: 'lr 1/10/2007 10:49'!testValidateName	self		shouldnt: [			self command				validateName: 'zork'				of: PRPage new				in: self context root ]		raise: PRConflictingNameError.	self		should: [			self command				validateName: 'folder'				of: PRPage new				in: self context root ]		raise: PRConflictingNameError.	self		shouldnt: [			self command				validateName: 'zork'				of: (self context root childrenDecoration at: 'folder')				in: self context root ]		raise: PRConflictingNameError.	self		shouldnt: [			self command				validateName: 'folder'				of: (self context root childrenDecoration at: 'folder')				in: self context root ]		raise: PRConflictingNameError! !!PRCommandTest methodsFor: 'testing-validating' stamp: 'lr 1/15/2007 21:34'!testValidateNesting	self		shouldnt: [			self command				validateNestingOf: self context root				in: PRPage new ]		raise: PRInvalidNestingError.	self		shouldnt: [			self command				validateNestingOf: PRPage new				in: self context root ]		raise: PRInvalidNestingError! !!PREditCommandTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PREditCommandTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PREditCommand! !!PREditCommandTest methodsFor: 'testing-testing' stamp: 'lr 3/30/2009 21:52'!testIsEdit	self assert: self command isEdit! !!PREditCommandTest methodsFor: 'testing-title' stamp: 'lr 3/9/2006 11:31'!testTitleChanged	| title |	self command		write: (title := 'foo')		using: PRStructure descriptionTitle.	self		shouldnt: [ self command execute ]		raise: PRStructureError.	self assert: self structure title = title! !!PREditCommandTest methodsFor: 'testing-title' stamp: 'lr 3/9/2006 11:31'!testTitleInitialized	self assert: (self command readUsing: PRStructure descriptionTitle) = self structure title! !!PREditCommandTest methodsFor: 'testing-title' stamp: 'lr 3/9/2006 11:31'!testTitleUnchanged	| title |	title := self structure title.	self		shouldnt: [ self command execute ]		raise: PRStructureError.	self assert: self structure title = title! !!PREditFileCommandTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isAbstract	^ false! !!PREditFileCommandTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!structureInstance	^ PRFile named: 'command'! !!PREditFileCommandTest methodsFor: 'testing-file' stamp: 'lr 3/9/2006 11:31'!testFileChanged	| file |	self command		write: (file := MAFileModel new			contents: 'foobar';			filename: 'test.txt';			mimetype: 'text/plain';			yourself)		using: PRFile descriptionFile.	self		shouldnt: [ self command execute ]		raise: PRStructureError.	self assert: self structure file = file! !!PREditFileCommandTest methodsFor: 'testing-file' stamp: 'lr 3/9/2006 11:31'!testFileInitialized	self assert: (self command readUsing: PRFile descriptionFile) = self structure file! !!PREditFileCommandTest methodsFor: 'testing-file' stamp: 'lr 3/9/2006 11:31'!testFileUnchanged	| file |	file := self structure file.	self		shouldnt: [ self command execute ]		raise: PRStructureError.	self assert: self structure file = file! !!PREditPageCommandTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isAbstract	^ false! !!PREditPageCommandTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!structureInstance	^ PRPage named: 'command'! !!PREditPageCommandTest methodsFor: 'testing-contents' stamp: 'lr 10/18/2007 17:38'!testContentsChanged	| document |	document := PRPage descriptionDocument		fromString: '!!foo'.	self command		write: document		using: PRPage descriptionDocument.	self		shouldnt: [ self command execute ]		raise: PRStructureError.	self assert: self structure document = document! !!PREditPageCommandTest methodsFor: 'testing-contents' stamp: 'lr 10/18/2007 17:37'!testContentsInitialized	self assert: (self command readUsing: PRPage descriptionDocument) = self structure document! !!PREditPageCommandTest methodsFor: 'testing-contents' stamp: 'lr 10/18/2007 17:38'!testContentsUnchanged	| document |	document := self structure document.	self		shouldnt: [ self command execute ]		raise: PRStructureError.	self assert: self structure document = document! !!PRCopyCommandTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRCopyCommandTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRCopyCommand! !!PRCopyCommandTest methodsFor: 'testing' stamp: 'lr 3/21/2006 18:43'!testCopy	self command name: 'foo'.	self		shouldnt: [ self command execute ]		raise: PRStructureError.	self assert: (self structure parent childrenDecoration		includes: 'foo').	self assert: (self structure parent childrenDecoration		at: 'foo') = self command answer structure! !!PRCopyCommandTest methodsFor: 'testing' stamp: 'lr 3/21/2006 18:43'!testCopyIntoChild	self command		name: 'foo';		target: self structure.	self		shouldnt: [ self command execute ]		raise: PRStructureError.	self assert: (self structure childrenDecoration		includes: 'foo').	self assert: (self structure childrenDecoration		at: 'foo') = self command answer structure! !!PRCopyCommandTest methodsFor: 'testing' stamp: 'lr 3/21/2006 18:43'!testCopyIntoRoot	self command		name: 'foo';		target: self command root.	self		shouldnt: [ self command execute ]		raise: PRStructureError.	self assert: (self command root childrenDecoration		includes: 'foo').	self assert: (self command root childrenDecoration		at: 'foo') = self command answer structure! !!PRCopyCommandTest methodsFor: 'testing' stamp: 'lr 4/10/2006 14:52'!testCopyTitle	self command name: 'foo'; execute.	self assert: (self structure title) = 'Command'.	self assert: (self structure parent childrenDecoration		at: 'foo') title = 'Foo'! !!PRCopyCommandTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!testInitialized	super testInitialized.	self assert: self structure name , ' copy' = self command name! !!PRLocationCommandTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRLocationCommandTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRLocationCommand! !!PRLocationCommandTest methodsFor: 'testing' stamp: 'lr 1/10/2007 10:50'!testConflict	self command name: 'folder'.	self		should: [ self command execute ]		raise: PRConflictingNameError! !!PRLocationCommandTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!testInitialized	self assert: self command target = self structure parent! !!PRMoveCommandTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRMoveCommandTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRMoveCommand! !!PRMoveCommandTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!testInitialized	super testInitialized.	self assert: self structure name = self command name! !!PRMoveCommandTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!testMove	self command target: self command root.	self		shouldnt: [ self command execute ]		raise: PRStructureError.	self assert: (self command root childrenDecoration		includes: self structure name)! !!PRMoveCommandTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!testMoveIntoChild	self command target: self structure.	self		should: [ self command execute ]		raise: PRInvalidNestingError.	self assert: (self structure parent childrenDecoration		includes: self structure name)! !!PRMoveCommandTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!testMoveIntoFolder	self command target: (self command root childrenDecoration		at: 'folder').	self		shouldnt: [ self command execute ]		raise: PRStructureError.	self deny: (self command root childrenDecoration		includes: self structure name).	self assert: ((self command root childrenDecoration		at: 'folder') childrenDecoration			includes: self structure name)! !!PRMoveCommandTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!testRename	self command name: 'foo'.	self		shouldnt: [ self command execute ]		raise: PRConflictingNameError.	self deny: (self structure parent childrenDecoration		includes: 'command').	self assert: (self structure parent childrenDecoration		includes: 'foo')! !!PRMoveCommandTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!testRenameExisting	self command name: 'folder'.	self		should: [ self command execute ]		raise: PRConflictingNameError.	self assert: (self structure parent childrenDecoration		includes: 'command').	self assert: (self structure parent childrenDecoration		includes: 'folder')! !!PRMoveCommandTest methodsFor: 'testing' stamp: 'lr 6/12/2009 11:00'!testRenameOrder	self kernel root		addChild: (PRPage named: 'other').	self assert: (self kernel root enumerator		collect: [ :each | each name ])			= #('folder' 'command' 'other').	self command name: 'renamed'.	self		shouldnt: [ self command execute ]		raise: PRConflictingNameError.	self assert: (self kernel root enumerator		collect: [ :each | each name ])			= #('folder' 'renamed' 'other')! !!PROrderCommandTest class methodsFor: 'testing' stamp: 'lr 3/18/2008 23:14'!isAbstract	^ false! !!PROrderCommandTest methodsFor: 'private' stamp: 'lr 3/18/2008 23:12'!actualClass	^ PROrderCommand! !!PROrderCommandTest methodsFor: 'accessing' stamp: 'lr 3/18/2008 23:25'!children	^ self context enumerator contents! !!PROrderCommandTest methodsFor: 'accessing' stamp: 'lr 3/18/2008 23:31'!childrenNames	^ self children collect: [ :each | each name ]! !!PROrderCommandTest methodsFor: 'private' stamp: 'lr 3/18/2008 23:21'!structureInstance	^ super structureInstance		addChild: (PRPage named: 'a');		addChild: (PRPage named: 'b');		addChild: (PRPage named: 'c');		yourself! !!PROrderCommandTest methodsFor: 'testing-setup' stamp: 'lr 11/15/2009 23:38'!testDefaultOrder	self assert: self childrenNames = #( 'a' 'b' 'c' ).	self assert: (self command class isValidIn: self context)! !!PROrderCommandTest methodsFor: 'testing' stamp: 'lr 3/18/2008 23:28'!testInitialized	self children		with: self command structures		do: [ :a :b | self assert: a = b ]! !!PROrderCommandTest methodsFor: 'testing' stamp: 'lr 8/29/2008 12:01'!testReorderBasic	self command structures		swap: 1 with: 3.	self		shouldnt: [ self command execute ]		raise: Error.	self assert: self childrenNames = #( 'c' 'b' 'a' )! !!PROrderCommandTest methodsFor: 'testing' stamp: 'lr 8/29/2008 12:01'!testReorderWithConcurrentAdd	self command structures		swap: 1 with: 3.	self structure childrenDecoration		add: (PRPage named: 'd').	self		shouldnt: [ self command execute ]		raise: Error.	self assert: self childrenNames = #( 'c' 'b' 'a' 'd' )! !!PROrderCommandTest methodsFor: 'testing' stamp: 'lr 8/29/2008 12:01'!testReorderWithConcurrentDelete	self command structures		swap: 1 with: 3.	self structure childrenDecoration		remove: self children first.	self		shouldnt: [ self command execute ]		raise: Error.	self assert: self childrenNames = #( 'c' 'b' )! !!PRRemoveCommandTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRRemoveCommandTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRRemoveCommand! !!PRRemoveCommandTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!testRemoveLeaf	self assert: (self kernel root childrenDecoration		includes: self structure name).	self		shouldnt: [ self command execute ]		raise: PRStructureError.	self assert: self structure parent isNil.	self deny: (self kernel root childrenDecoration		includes: self structure name)! !!PRRemoveCommandTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!testRemoveNode	self structure		addChild: (PRPage named: 'foo');		addChild: (PRPage named: 'bar').	self assert: (self kernel root childrenDecoration		includes: self structure name).	self		shouldnt: [ self command execute ]		raise: PRStructureError.	self assert: self structure parent isNil.	self deny: (self kernel root childrenDecoration		includes: self structure name)! !!PRRemoveCommandTest methodsFor: 'testing' stamp: 'lr 3/5/2007 14:06'!testRemoveRoot	context := self context		structure: self kernel root		command: self actualClass new.	self		should: [ context command execute ]		raise: PRStructureError! !!PRViewCommandTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRViewCommandTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRViewCommand! !!PRViewCommandTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:31'!testIsLogged	self deny: self command isLogged! !!PRViewCommandTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:31'!testIsView	self assert: self command isView! !!PRViewCommandTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!testSimple	self		should: [ self command execute ]		raise: Error! !!PRContextTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRContextTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRContext! !!PRContextTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!context	^ context ifNil: [ context := self contextInstance ]! !!PRContextTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!instance	^ self context! !!PRContextTest methodsFor: 'testing-conveniance' stamp: 'lr 5/10/2008 13:23'!testCommands	self assert: (self context commands notEmpty).	self assert: (self context commands includes: PRViewCommand).	self assert: (self context commands includes: PRRemoveCommand) not.		context := self context structure: (self context structure childrenDecoration at: 'folder').	self assert: (self context commands notEmpty).	self assert: (self context commands includes: PRViewCommand).	self assert: (self context commands includes: PRRemoveCommand)! !!PRContextTest methodsFor: 'testing' stamp: 'lr 8/14/2007 23:51'!testCopy	| copy |	copy := self context copy.	self assert: self context command context == self context.	self assert: copy command context == copy! !!PRContextTest methodsFor: 'testing' stamp: 'lr 4/13/2007 14:57'!testEnumerator	| array |	array := self context enumerator contents.	self assert: array first name = 'folder'.	self assert: array size = 1! !!PRContextTest methodsFor: 'testing-navigation' stamp: 'lr 4/13/2007 14:59'!testGotoCommand	| current currentStructure currentCommand next nextCommand |	currentStructure := self context structure.	currentCommand := self context command.	current := self context.	nextCommand := self context structure editCommandClass new.	next := self context command: nextCommand.	self deny: current = next.	self assert: current structure = currentStructure.	self assert: current command = currentCommand.	self assert: next structure = currentStructure.	self assert: next command = nextCommand! !!PRContextTest methodsFor: 'testing-navigation' stamp: 'lr 4/13/2007 14:59'!testGotoStructure	| current currentStructure currentCommand next nextStructure |	currentStructure := self context structure.	currentCommand := self context command.	current := self context.	nextStructure := self context structure childrenDecoration at: 'folder'.	next := self context structure: nextStructure.	self deny: current = next.	self assert: current structure = currentStructure.	self assert: current command = currentCommand.	self assert: next structure = nextStructure.	self assert: next command isView! !!PRContextTest methodsFor: 'testing-navigation' stamp: 'lr 4/13/2007 15:00'!testGotoStructureCommand	| current currentStructure currentCommand next nextStructure nextCommand |	currentStructure := self context structure.	currentCommand := self context command.	current := self context.	nextStructure := self context structure childrenDecoration at: 'folder'.	nextCommand := nextStructure editCommandClass new.	next := self context structure: nextStructure command: nextCommand.	self deny: current = next.	self assert: current structure = currentStructure.	self assert: current command = currentCommand.	self assert: next structure = nextStructure.	self assert: next command = nextCommand! !!PRContextTest methodsFor: 'testing' stamp: 'lr 4/13/2007 14:52'!testInitialState	self assert: self context structure = self context root.	self assert: self context command isView! !!PRContextTest methodsFor: 'testing-conveniance' stamp: 'lr 5/10/2008 13:12'!testParent	self assert: self context parent isNil.		context := self context structure: (self context structure childrenDecoration at: 'folder').	self assert: self context root == self context parent.	context := self context structure: (self context structure childrenDecoration at: 'child').	self assert: (self context root childrenDecoration at: 'folder') == context parent! !!PRContextTest methodsFor: 'testing-conveniance' stamp: 'lr 5/10/2008 13:12'!testRoot	self assert: self context root == self context structure.		context := self context structure: (self context structure childrenDecoration at: 'folder').	self assert: self context root == self context parent.	context := self context structure: (self context structure childrenDecoration at: 'child').	self assert: self context root == self context parent parent! !!PRContextTest methodsFor: 'testing-conveniance' stamp: 'lr 5/10/2008 13:15'!testSiblings	self assert: self context siblings = (Array with: self context root).		context := self context structure: (self context structure childrenDecoration at: 'folder').	self assert: self context siblings = (Array with: self context structure).	context := self context structure: (self context structure childrenDecoration at: 'child').	self assert: (self context siblings includes: self context structure).	self assert: self context siblings size = 2! !!PRDecoratedTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRDecoratedTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRDecorated! !!PRDecoratedTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!decorationWithPriority: anInteger	^ PRMockDecoration new		priority: anInteger;		yourself! !!PRDecoratedTest methodsFor: 'testing-adding' stamp: 'lr 3/5/2007 14:00'!testAddDecoration	| mock1 mock2 index1 index2 |	mock1 := self decorationWithPriority: 10.	mock2 := self decorationWithPriority: -5.	self assert: (self instance addDecoration: mock1) = mock1.	self assert: self instance = mock1 decorated.	self assert: (self instance decorations includes: mock1).	self assert: (self instance addDecoration: mock2) = mock2.	self assert: self instance = mock2 decorated.	self assert: (self instance decorations includes: mock2).	index1 := self instance decorations indexOf: mock1.	index2 := self instance decorations indexOf: mock2.	self assert: index1 > index2.	self should: [ self instance addDecoration: mock1 ] raise: PRDecorationError.	self should: [ self instance addDecoration: mock2 ] raise: PRDecorationError.	self assert: (self instance decorations includes: mock2).	self assert: (self instance decorations includes: mock2)! !!PRDecoratedTest methodsFor: 'testing-adding' stamp: 'lr 3/9/2006 11:31'!testAddDecorationIfPresent	| mock1 mock2 index1 index2 |	mock1 := self decorationWithPriority: 10.	mock2 := self decorationWithPriority: -5.	self assert: (self instance		addDecoration: mock1		ifPresent: [ :value | self assert: false ]) = mock1.	self assert: self instance = mock1 decorated.	self assert: (self instance decorations includes: mock1).	self assert: (self instance		addDecoration: mock2		ifPresent: [ :value | self assert: false ]) = mock2.	self assert: self instance = mock2 decorated.	self assert: (self instance decorations includes: mock2).	index1 := self instance decorations indexOf: mock1.	index2 := self instance decorations indexOf: mock2.	self assert: index1 > index2.	self assert: (self instance		addDecoration: mock1		ifPresent: [ :value | nil ]) isNil.	self assert: (self instance		addDecoration: mock2		ifPresent: [ :value | nil ]) isNil.	self assert: (self instance decorations includes: mock1).	self assert: (self instance decorations includes: mock2)! !!PRDecoratedTest methodsFor: 'testing-copying' stamp: 'lr 3/9/2006 11:31'!testCopyDecorations	| decoration copiedInstance copiedDecoration |	decoration := self instance addDecoration: (self decorationWithPriority: SmallInteger minVal).	copiedInstance := self instance copy.	copiedDecoration := copiedInstance decorations first.	self deny: self instance == copiedInstance.	self deny: decoration == copiedDecoration.	self assert: self instance decorations first = decoration.	self assert: self instance = decoration decorated.	self assert: copiedInstance decorations first = copiedDecoration.	self assert: copiedInstance = copiedDecoration decorated! !!PRDecoratedTest methodsFor: 'testing-querying' stamp: 'lr 3/5/2007 14:00'!testDecorationOfClass	| mock |	self should: [ self instance decorationOfClass: PRMockDecoration ] raise: PRDecorationError.	self instance addDecoration: (mock := self decorationWithPriority: 1).	self assert: (self instance decorationOfClass: PRMockDecoration) = mock! !!PRDecoratedTest methodsFor: 'testing-querying' stamp: 'lr 3/9/2006 11:31'!testDecorationOfClassIfAbsent	| mock |	self assert: (self instance decorationOfClass: PRMockDecoration ifAbsent: [ nil ]) isNil.	self instance addDecoration: (mock := self decorationWithPriority: 1).	self assert: (self instance decorationOfClass: PRMockDecoration) = mock! !!PRDecoratedTest methodsFor: 'testing-enumerating' stamp: 'lr 3/9/2006 11:31'!testDecorationsDo	| first second |	self instance		addDecoration: (first := self decorationWithPriority: SmallInteger minVal);		addDecoration: (second := self decorationWithPriority: SmallInteger maxVal).	self instance decorationsDo: [ :each |		(first notNil and: [ second notNil and: [ each = first ] ])			ifTrue: [ first := nil ].		(first isNil and: [ second notNil and: [ each = second ] ])			ifTrue: [ second := nil ] ].	self assert: first isNil.	self assert: second isNil! !!PRDecoratedTest methodsFor: 'testing-enumerating' stamp: 'lr 3/9/2006 11:31'!testDecorationsDoOwnerDo	| instance first second |	instance := self instance		addDecoration: (first := self decorationWithPriority: SmallInteger minVal);		addDecoration: (second := self decorationWithPriority: SmallInteger maxVal);		yourself.	self instance		decorationsDo: [ :each |			(first notNil and: [ instance notNil and: [ second notNil and: [ each = first ] ] ])				ifTrue: [ first := nil ].			(first isNil and: [ instance isNil and: [ second notNil and: [ each = second ] ] ])				ifTrue: [ second := nil ] ]		ownerDo: [ :each |			self assert: first isNil.			self assert: second notNil.			self assert: instance notNil.			instance := nil ].	self assert: first isNil.	self assert: second isNil.	self assert: instance isNil! !!PRDecoratedTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!testInitialized	self assert: (self instance decorations isKindOf: Collection)! !!PRDecoratedTest methodsFor: 'testing-removing' stamp: 'lr 3/5/2007 14:00'!testRemoveDecoration	| mock1 mock2 |	self instance		addDecoration: (mock1 := self decorationWithPriority: 1);		addDecoration: (mock2 := self decorationWithPriority: 2).	self assert: (self instance removeDecoration: mock1) = mock1.	self deny: (self instance decorations includes: mock1).	self assert: (self instance decorations includes: mock2).	self assert: (self instance removeDecoration: mock2) = mock2.	self deny: (self instance decorations includes: mock1).	self deny: (self instance decorations includes: mock2).	self should: [ self instance removeDecoration: mock2 ] raise: PRDecorationError! !!PRDecoratedTest methodsFor: 'testing-removing' stamp: 'lr 3/9/2006 11:31'!testRemoveDecorationIfAbsent| mock1 mock2 |	self instance		addDecoration: (mock1 := self decorationWithPriority: 1);		addDecoration: (mock2 := self decorationWithPriority: 2).	self assert: (self instance removeDecoration: mock1 ifAbsent: [ nil ]) = mock1.	self deny: (self instance decorations includes: mock1).	self assert: (self instance decorations includes: mock2).	self assert: (self instance removeDecoration: mock2 ifAbsent: [ nil ]) = mock2.	self deny: (self instance decorations includes: mock1).	self deny: (self instance decorations includes: mock2).	self assert: (self instance removeDecoration: mock2 ifAbsent: [ nil ]) isNil! !!PRCaseTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRCaseTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRCase! !!PRCaseTest methodsFor: 'private' stamp: 'lr 10/18/2007 17:45'!actualInstance	^ super actualInstance		contents: '!!A Title-A simple List-Element';		yourself! !!PRCaseTest methodsFor: 'testing' stamp: 'lr 10/18/2007 17:45'!testContents	self structure contents: nil.	self assert: self structure contents = ''.	self structure contents: ''.	self assert: self structure contents = ''.	self structure contents: 'Foo'.	self assert: self structure contents = 'Foo'! !!PRCaseTest methodsFor: 'testing' stamp: 'lr 4/13/2007 15:27'!testDocument	self structure document: PRDocument new.	self assert: self structure document = PRDocument new.	self assert: self structure contents = ''.		structure := self actualClass new.	self assert: structure document = structure defaultDocument! !!PRCaseTest methodsFor: 'testing-visiting' stamp: 'lr 2/12/2007 19:07'!testFullTextSearch	| matches |	matches := self root fullTextSearch		subString: 'title';		caseSensitive: true;		contents.	self assert: matches size = 0.	matches := self root fullTextSearch		subString: 'Title';		caseSensitive: true;		contents.	self assert: matches size = 1.	self assert: matches first = self structure.	matches := self root fullTextSearch		subString: 'title';		caseSensitive: false;		contents.	self assert: matches size = 1.	self assert: matches first = self structure.	matches := self root fullTextSearch		subString: 'list-element';		caseSensitive: true;		contents.	self assert: matches size = 0.	matches := self root fullTextSearch		subString: 'List-Element';		caseSensitive: true;		contents.	self assert: matches size = 1.	self assert: matches first = self structure.	matches := self root fullTextSearch		subString: 'list-element';		caseSensitive: false;		contents.	self assert: matches size = 1.	self assert: matches first = self structure! !!PRCaseTest methodsFor: 'testing-testing' stamp: 'lr 3/30/2009 21:38'!testHasDocument	self assert: self instance hasDocument! !!PRCaseTest methodsFor: 'testing-visiting' stamp: 'lr 2/12/2007 19:07'!testIncomingReferences	| matches |	matches := self root incomingReferences		to: self structure;		collect: [ :each | each owner ].	self assert: matches size = 0.	self root contents: '*/folder/structure*'.	matches := self root incomingReferences		to: self structure;		collect: [ :each | each owner ].	self assert: matches size = 1.	self assert: matches first = self root.	self folder contents: '+/folder/structure+'.	matches := self root incomingReferences		to: self structure;		collect: [ :each | each owner ].	self assert: matches size = 2.	self assert: matches first = self root.	self assert: matches second = self folder! !!PRCaseTest methodsFor: 'testing-visiting' stamp: 'lr 2/12/2007 19:07'!testOutgoingReferences	| matches |	self structure contents: ''.	matches := self structure outgoingReferences		collect: [ :each | each target ].	self assert: matches size = 0.	self structure contents: '*/*'.	matches := self structure outgoingReferences		collect: [ :each | each target ].	self assert: matches size = 1.	self assert: matches first = self root.	self structure contents: '*.*'.	matches := self structure outgoingReferences		collect: [ :each | each target ].	self assert: matches size = 1.	self assert: matches first = self structure.	self structure contents: '*.* */* */*'.	matches := self structure outgoingReferences		collect: [ :each | each target ].	self assert: matches size = 3.	self assert: matches first = self structure.	self assert: matches second = self root.	self assert: matches third = self root! !!PRCaseTest methodsFor: 'testing' stamp: 'lr 3/30/2009 21:49'!testPlainText	self structure contents: nil.	self assert: self structure plainText = ''.	self structure contents: ''.	self assert: self structure plainText = ''.	self structure contents: 'Foo'.	self assert: self structure plainText = 'Foo'! !!PRPageTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRPageTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRPage! !!PRFileTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRFileTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRFile! !!PRFileTest methodsFor: 'testing' stamp: 'lr 12/30/2007 16:34'!testFile	| model |	model := MAMemoryFileModel new.	self structure file: model.	self assert: self structure file = model! !!PRFileTest methodsFor: 'testing-testing' stamp: 'lr 3/30/2009 21:37'!testIsFile	self assert: self instance isFile! !!PRStructureTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRStructureTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRStructure! !!PRStructureTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!actualInstance	^ self actualClass named: 'structure'! !!PRStructureTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!child	^ child! !!PRStructureTest methodsFor: 'private' stamp: 'lr 10/30/2006 16:41'!childInstance	^ PRPage named: 'child'! !!PRStructureTest methodsFor: 'utilities' stamp: 'lr 9/25/2007 09:15'!enumerator: aVisitor gives: aCollection	| children |	children := aVisitor collect: [ :each | each name ].	self		assert: children = aCollection		description: children asString , ' should be ' , aCollection asString		resumable: true! !!PRStructureTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!folder	^ folder! !!PRStructureTest methodsFor: 'private' stamp: 'lr 10/30/2006 16:41'!folderInstance	^ PRPage named: 'folder'! !!PRStructureTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!instance	^ structure! !!PRStructureTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!root	^ root! !!PRStructureTest methodsFor: 'private' stamp: 'lr 10/30/2006 16:41'!rootInstance	^ PRPage named: 'root'! !!PRStructureTest methodsFor: 'running' stamp: 'lr 3/9/2006 11:31'!setUp	root := self rootInstance.	folder := self folderInstance.	child := self childInstance.	structure := self actualInstance.	self root addChild: self folder.	self folder addChild: self child.	self folder addChild: self structure! !!PRStructureTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!structure	^ structure! !!PRStructureTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:31'!testCanBeChildOf	PRStructure withAllConcreteClassesDo: [ :each |		self			shouldnt: [ self structure canBeChildOf: each new ]			raise: Error ]! !!PRStructureTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:31'!testCanBeParentOf	PRStructure withAllConcreteClassesDo: [ :each |		self			shouldnt: [ self structure canBeParentOf: each new ]			raise: Error ]! !!PRStructureTest methodsFor: 'testing-accessing' stamp: 'lr 4/13/2007 15:15'!testCommands	self assert: (self structure viewCommandClass includesBehavior: PRCommand).	self assert: (self structure editCommandClass includesBehavior: PRCommand)! !!PRStructureTest methodsFor: 'testing-copying' stamp: 'lr 3/21/2006 18:43'!testCopyChildren	| folderCopy childCopy structureCopy |	folderCopy := self folder copy.	childCopy := folderCopy childrenDecoration at: 'child'.	structureCopy := folderCopy childrenDecoration at: 'structure'.	self deny: self folder = folderCopy.	self deny: self child = childCopy.	self deny: self structure = structureCopy.	self assert: self folder parent = self root.	self assert: self child parent = self folder.	self assert: self structure parent = self folder.	self assert: folderCopy parent isNil.	self assert: childCopy parent = folderCopy.	self assert: structureCopy parent = folderCopy! !!PRStructureTest methodsFor: 'testing-enumerator' stamp: 'lr 9/27/2007 10:05'!testEnumerator	self enumerator: self root enumerator gives: #( 'folder' ).	self enumerator: self root enumerator with gives: #( 'root' 'folder' ).	self enumerator: self root enumerator all gives: #( 'folder' 'child' 'structure' ).	self enumerator: self root enumerator with all gives: #( 'root' 'folder' 'child' 'structure' ).	self enumerator: self root enumerator everything gives: #( 'root' 'folder' 'child' 'structure' )! !!PRStructureTest methodsFor: 'testing-enumerator' stamp: 'lr 3/30/2009 22:01'!testEnumeratorAnySatisfy	self assert: (self root enumerator everything		anySatisfy: [ :each | each = self structure ])! !!PRStructureTest methodsFor: 'testing-enumerator' stamp: 'lr 3/30/2009 22:05'!testEnumeratorDoSeparatedBy	| result |	result := String new.	self root enumerator everything		do: [ :each | result := result , each name ]		separatedBy: [ result := result , ', ' ].	self assert: result = 'root, folder, child, structure'! !!PRStructureTest methodsFor: 'testing-enumerator' stamp: 'lr 3/30/2009 22:03'!testEnumeratorInjectInto	self assert: (self root enumerator everything		inject: String new		into: [ :result :each | result , each name ])			= 'rootfolderchildstructure'! !!PRStructureTest methodsFor: 'testing-enumerator' stamp: 'lr 4/1/2009 22:28'!testEnumeratorReject	self		enumerator: (self root enumerator everything			reject: [ :each | each = self structure ])		gives: #( 'root' 'folder' 'child' )! !!PRStructureTest methodsFor: 'testing-enumerator' stamp: 'lr 3/30/2009 22:12'!testEnumeratorSelect	self		enumerator: (self root enumerator everything			select: [ :each | each = self structure ])		gives: #( 'structure' )! !!PRStructureTest methodsFor: 'testing-querying' stamp: 'lr 5/2/2009 10:02'!testFindAncestor	self assert: (self structure findAncestor: [ :each | each = self structure ]) = self structure.	self assert: (self structure findAncestor: [ :each | each = self folder ]) = self folder.	self assert: (self structure findAncestor: [ :each | each = self root ]) = self root.	self assert: (self structure findAncestor: [ :each | each = self child ]) isNil! !!PRStructureTest methodsFor: 'testing-querying' stamp: 'lr 5/2/2009 10:02'!testFindAncestorIfAbsent	self assert: (self structure findAncestor: [ :each | each = self structure ] ifAbsent: [ 123 ]) = self structure.	self assert: (self structure findAncestor: [ :each | each = self folder ]  ifAbsent: [ 123 ]) = self folder.	self assert: (self structure findAncestor: [ :each | each = self root ] ifAbsent: [ 123 ]) = self root.	self assert: (self structure findAncestor: [ :each | each = self child ] ifAbsent: [ 123 ]) = 123! !!PRStructureTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:31'!testHasChildren	self assert: self root hasChildren.	self assert: self folder hasChildren.	self deny: self child hasChildren.	self deny: self structure hasChildren! !!PRStructureTest methodsFor: 'testing-testing' stamp: 'lr 4/13/2007 15:18'!testHasDocument	self assert: self root hasDocument.	self assert: self folder hasDocument.	self assert: self child hasDocument! !!PRStructureTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:31'!testHasParent	self deny: self root hasParent.	self assert: self folder hasParent.	self assert: self child hasParent.	self assert: self structure hasParent! !!PRStructureTest methodsFor: 'testing-lookup' stamp: 'lr 4/11/2009 18:09'!testIncompleteLookupName	| lookup |	lookup := self root lookupIncompletePath: '/folder/zork'.	self assert: lookup key = self folder.	self assert: lookup value = 'zork'.		lookup := self root lookupIncompletePath: '/folder/zork/'.	self assert: lookup key = self folder.	self assert: lookup value = 'zork'.	lookup := self structure lookupIncompletePath: '../structure/foo/bar'.	self assert: lookup key = self structure.	self assert: lookup value = 'foo'.		lookup := self structure lookupIncompletePath: '../structure/foo/bar/'.	self assert: lookup key = self structure.	self assert: lookup value = 'foo'! !!PRStructureTest methodsFor: 'testing-lookup' stamp: 'lr 4/11/2009 18:10'!testIncompleteLookupTitle	| lookup |	lookup := self root lookupIncompletePath: '/Folder/zork'.	self assert: lookup key = self folder.	self assert: lookup value = 'zork'.		lookup := self root lookupIncompletePath: '/Folder/zork/'.	self assert: lookup key = self folder.	self assert: lookup value = 'zork'.	lookup := self structure lookupIncompletePath: '../Structure/foo/bar'.	self assert: lookup key = self structure.	self assert: lookup value = 'foo'.		lookup := self structure lookupIncompletePath: '../Structure/foo/bar/'.	self assert: lookup key = self structure.	self assert: lookup value = 'foo'! !!PRStructureTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:31'!testIsAncestorOf	self assert: (self root isAncestorOf: self root).	self assert: (self root isAncestorOf: self folder).	self assert: (self root isAncestorOf: self child).	self assert: (self root isAncestorOf: self structure).	self deny: (self folder isAncestorOf: self root).	self assert: (self folder isAncestorOf: self folder).	self assert: (self folder isAncestorOf: self child).	self assert: (self folder isAncestorOf: self structure).	self deny: (self child isAncestorOf: self root).	self deny: (self child isAncestorOf: self folder).	self assert: (self child isAncestorOf: self child).	self deny: (self child isAncestorOf: self structure).	self deny: (self structure isAncestorOf: self root).	self deny: (self structure isAncestorOf: self folder).	self deny: (self structure isAncestorOf: self child).	self assert: (self structure isAncestorOf: self structure)! !!PRStructureTest methodsFor: 'testing-testing' stamp: 'lr 3/30/2009 21:36'!testIsFile	self deny: self instance isFile! !!PRStructureTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:31'!testIsRoot	self assert: self root isRoot.	self deny: self folder isRoot.	self deny: self child isRoot.	self deny: self structure isRoot! !!PRStructureTest methodsFor: 'testing-accessing' stamp: 'lr 3/30/2009 21:37'!testKernel	self		should: [ self instance kernel ]		raise: Error! !!PRStructureTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testLevel	self assert: self root level = 1.	self assert: self folder level = 2.	self assert: self child level = 3.	self assert: self structure level = 3! !!PRStructureTest methodsFor: 'testing-lookup' stamp: 'lr 4/21/2009 19:04'!testLookupCaseSensitive	| struc |	struc := self actualInstance 		name: 'Child';		title: 'Structure';		yourself.	self folder addChild: struc.	self assert: (self folder lookupPath: 'Child') = struc.	self assert: (self folder lookupPath: 'CHILD') = self child.	self assert: (self folder lookupPath: 'Structure') = self structure! !!PRStructureTest methodsFor: 'testing-lookup' stamp: 'lr 4/11/2009 16:07'!testLookupComposed	self assert: (self child lookupPath: '../child/..') = self folder.	self assert: (self child lookupPath: '../child/../') = self folder.	self assert: (self child lookupPath: '../structure/..') = self folder.	self assert: (self child lookupPath: '../structure/../') = self folder.	self assert: (self child lookupPath: '../structure/../child') = self child.	self assert: (self child lookupPath: '../structure/../child/') = self child.	self assert: (self child lookupPath: '../structure/../structure') = self structure.	self assert: (self child lookupPath: '../structure/../structure/') = self structure! !!PRStructureTest methodsFor: 'testing-lookup' stamp: 'lr 4/11/2009 16:11'!testLookupComposedTitle	self assert: (self child lookupPath: '../Child/..') = self folder.	self assert: (self child lookupPath: '../Child/../') = self folder.	self assert: (self child lookupPath: '../Structure/..') = self folder.	self assert: (self child lookupPath: '../Structure/../') = self folder.	self assert: (self child lookupPath: '../Structure/../child') = self child.	self assert: (self child lookupPath: '../structure/../Child/') = self child.	self assert: (self child lookupPath: '../Structure/../structure') = self structure.	self assert: (self child lookupPath: '../structure/../Structure/') = self structure! !!PRStructureTest methodsFor: 'testing-lookup' stamp: 'lr 4/11/2009 16:10'!testLookupEmpty	self assert: (self root lookupPath: '') = self root.	self assert: (self folder lookupPath: '') = self folder.	self assert: (self child lookupPath: '') = self child.	self assert: (self structure lookupPath: '') = self structure! !!PRStructureTest methodsFor: 'testing-lookup' stamp: 'lr 4/21/2009 18:46'!testLookupError	self assert: (self root lookupPath: 'unknown') isNil.	self assert: (self root lookupPath: 'unknown/') isNil.	self assert: (self root lookupPath: 'zork') isNil.	self assert: (self root lookupPath: 'zork/') isNil.	self assert: (self root lookupPath: 'folder/unknown') isNil.	self assert: (self root lookupPath: 'folder/unknown/') isNil.	self assert: (self root lookupPath: 'folder/unknown/unknown') isNil.	self assert: (self root lookupPath: 'folder/unknown/unknown/') isNil.	self assert: (self root lookupPath: 'folder/instance/unknown') isNil.	self assert: (self root lookupPath: 'folder/instance/unknown/') isNil! !!PRStructureTest methodsFor: 'testing-lookup' stamp: 'lr 4/21/2009 18:46'!testLookupErrorIfAbsent	self assert: (self root lookupPath: 'unknown' ifAbsent: [ self structure ]) = self structure.	self assert: (self root lookupPath: 'unknown/' ifAbsent: [ self structure ]) = self structure.	self assert: (self root lookupPath: 'zork' ifAbsent: [ self structure ]) = self structure.	self assert: (self root lookupPath: 'zork/' ifAbsent: [ self structure ]) = self structure.	self assert: (self root lookupPath: 'folder/unknown' ifAbsent: [ self structure ]) = self structure.	self assert: (self root lookupPath: 'folder/unknown/' ifAbsent: [ self structure ]) = self structure.	self assert: (self root lookupPath: 'folder/unknown/unknown' ifAbsent: [ self structure ]) = self structure.	self assert: (self root lookupPath: 'folder/unknown/unknown/' ifAbsent: [ self structure ]) = self structure.	self assert: (self root lookupPath: 'folder/instance/unknown' ifAbsent: [ self structure ]) = self structure.	self assert: (self root lookupPath: 'folder/instance/unknown/' ifAbsent: [ self structure ]) = self structure! !!PRStructureTest methodsFor: 'testing-lookup' stamp: 'lr 4/11/2009 16:11'!testLookupParent	self assert: (self root lookupPath: '..') = self root.	self assert: (self root lookupPath: '../') = self root.	self assert: (self folder lookupPath: '..') = self root.	self assert: (self folder lookupPath: '../') = self root.	self assert: (self child lookupPath: '..') = self folder.	self assert: (self child lookupPath: '../') = self folder.	self assert: (self structure lookupPath: '..') = self folder.	self assert: (self structure lookupPath: '../') = self folder! !!PRStructureTest methodsFor: 'testing-lookup' stamp: 'lr 4/11/2009 16:08'!testLookupParentParent	self assert: (self root lookupPath: '../..') = self root.	self assert: (self root lookupPath: '../../') = self root.	self assert: (self folder lookupPath: '../..') = self root.	self assert: (self folder lookupPath: '../../') = self root.	self assert: (self child lookupPath: '../..') = self root.	self assert: (self child lookupPath: '../../') = self root.	self assert: (self structure lookupPath: '../..') = self root.	self assert: (self structure lookupPath: '../..') = self root! !!PRStructureTest methodsFor: 'testing-lookup' stamp: 'lr 3/9/2006 11:31'!testLookupParsing	self assert: (PRPathLookup new stream: 'abc' readStream; readNext) = 'abc'.	self assert: (PRPathLookup new stream: 'abc/' readStream; readNext) = 'abc'.	self assert: (PRPathLookup new stream: 'abc/def' readStream; readNext) = 'abc'.	self assert: (PRPathLookup new stream: 'abc/def/' readStream; readNext) = 'abc'.	self assert: (PRPathLookup new stream: 'abc' readStream; readNext; readNext) = ''.	self assert: (PRPathLookup new stream: 'abc/' readStream; readNext; readNext) = ''.	self assert: (PRPathLookup new stream: 'abc/def' readStream; readNext; readNext) = 'def'.	self assert: (PRPathLookup new stream: 'abc/def/' readStream; readNext; readNext) = 'def'! !!PRStructureTest methodsFor: 'testing-lookup' stamp: 'lr 4/11/2009 16:07'!testLookupRelative	self assert: (self structure lookupPath: '../structure') = self structure.	self assert: (self structure lookupPath: '../structure/') = self structure.	self assert: (self structure lookupPath: '../../folder') = self folder.	self assert: (self structure lookupPath: '../../folder/') = self folder.	self assert: (self structure lookupPath: '../../folder/structure') = self structure.	self assert: (self structure lookupPath: '../../folder/structure/') = self structure! !!PRStructureTest methodsFor: 'testing-lookup' stamp: 'lr 4/11/2009 16:09'!testLookupRelativeTitle	self assert: (self structure lookupPath: '../Structure') = self structure.	self assert: (self structure lookupPath: '../Structure/') = self structure.	self assert: (self structure lookupPath: '../../Folder') = self folder.	self assert: (self structure lookupPath: '../../Folder/') = self folder.	self assert: (self structure lookupPath: '../../Folder/Structure') = self structure.	self assert: (self structure lookupPath: '../../Folder/Structure/') = self structure! !!PRStructureTest methodsFor: 'testing-lookup' stamp: 'lr 4/11/2009 16:10'!testLookupRoot	self assert: (self root lookupPath: '/') = self root.	self assert: (self root lookupPath: '/folder') = self folder.	self assert: (self root lookupPath: '/folder/child') = self child.	self assert: (self root lookupPath: '/folder/structure') = self structure.	self assert: (self structure lookupPath: '/') = self root.	self assert: (self structure lookupPath: '/folder') = self folder.	self assert: (self structure lookupPath: '/folder/child') = self child.	self assert: (self structure lookupPath: '/folder/structure') = self structure! !!PRStructureTest methodsFor: 'testing-lookup' stamp: 'lr 4/11/2009 16:06'!testLookupRootTitle	self assert: (self root lookupPath: '/Folder') = self folder.	self assert: (self root lookupPath: '/Folder/Child') = self child.	self assert: (self root lookupPath: '/Folder/Structure') = self structure.	self assert: (self structure lookupPath: '/Folder') = self folder.	self assert: (self structure lookupPath: '/Folder/Child') = self child.	self assert: (self structure lookupPath: '/Folder/Structure') = self structure! !!PRStructureTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testName	self assert: self root name = 'root'.	self assert: self folder name = 'folder'.	self assert: self child name = 'child'.	self assert: self structure name = 'structure'! !!PRStructureTest methodsFor: 'testing-accessing' stamp: 'lr 8/24/2008 11:56'!testParent	self assert: self root parent isNil.	self assert: self folder parent = root.	self assert: self child parent = folder.	self assert: self structure parent = folder! !!PRStructureTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testParents	self assert: self root parents size = 1.	self assert: self root parents first = self root.	self assert: self folder parents size = 2.	self assert: self folder parents first = self root.	self assert: self folder parents second = self folder.	self assert: self child parents size = 3.	self assert: self child parents first = self root.	self assert: self child parents second = self folder.	self assert: self child parents third = self child.	self assert: self structure parents size = 3.	self assert: self structure parents first = self root.	self assert: self structure parents second = self folder.	self assert: self structure parents third = self structure! !!PRStructureTest methodsFor: 'testing-reference' stamp: 'lr 4/11/2009 10:37'!testReferenceEmpty	self assert: (self root relativePathTo: self root) = '.'.	self assert: (self folder relativePathTo: self folder) = '.'.	self assert: (self child relativePathTo: self child) = '.'.	self assert: (self structure relativePathTo: self structure) = '.'.		self assert: (self root relativePathFrom: self root) = '.'.	self assert: (self folder relativePathFrom: self folder) = '.'.	self assert: (self child relativePathFrom: self child) = '.'.	self assert: (self structure relativePathFrom: self structure) = '.'! !!PRStructureTest methodsFor: 'testing-reference' stamp: 'lr 4/11/2009 10:38'!testReferenceError	self should: [ self structure relativePathFrom: PRPage new ] raise: PRInvalidKernelError.	self should: [ PRPage new relativePathFrom: self structure ] raise: PRInvalidKernelError.	self should: [ self structure relativePathTo: PRPage new ] raise: PRInvalidKernelError.	self should: [ PRPage new relativePathTo: self structure ] raise: PRInvalidKernelError! !!PRStructureTest methodsFor: 'testing-reference' stamp: 'lr 4/11/2009 10:40'!testReferenceParent	self assert: (self folder relativePathTo: self root) = '..'.	self assert: (self child relativePathTo: self folder) = '..'.	self assert: (self structure relativePathTo: self folder) = '..'.		self assert: (self root relativePathFrom: self folder) = '..'.	self assert: (self folder relativePathFrom: self child) = '..'.	self assert: (self folder relativePathFrom: self structure) = '..'.	self assert: (self child relativePathTo: self root) = '../..'.	self assert: (self structure relativePathTo: self root) = '../..'.		self assert: (self root relativePathFrom: self child) = '../..'.	self assert: (self root relativePathFrom: self structure) = '../..'! !!PRStructureTest methodsFor: 'testing-reference' stamp: 'lr 4/11/2009 10:41'!testReferenceRelative	self assert: (self structure relativePathFrom: self child) = '../structure'.	self assert: (self child relativePathFrom: self structure) = '../child'.		self assert: (self child relativePathTo: self structure) = '../structure'.	self assert: (self structure relativePathTo: self child) = '../child'! !!PRStructureTest methodsFor: 'testing-reference' stamp: 'lr 4/11/2009 10:49'!testReferenceRoot	self assert: (self root absolutePath) = '/'.	self assert: (self folder absolutePath) = '/folder'.	self assert: (self child absolutePath) = '/folder/child'.	self assert: (self structure absolutePath) = '/folder/structure'.	self assert: (self root relativePathTo: self root) = '.'.	self assert: (self root relativePathTo: self folder) = 'folder'.	self assert: (self root relativePathTo: self child) = 'folder/child'.	self assert: (self root relativePathTo: self structure) = 'folder/structure'.		self assert: (self root relativePathFrom: self root) = '.'.	self assert: (self folder relativePathFrom: self root) = 'folder'.	self assert: (self child relativePathFrom: self root) = 'folder/child'.	self assert: (self structure relativePathFrom: self root) = 'folder/structure'! !!PRStructureTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testRoot	self assert: self root root = self root.	self assert: self folder root = self root.	self assert: self child root = self root.	self assert: self structure root = self root! !!PRStructureTest methodsFor: 'testing-accessing' stamp: 'lr 5/28/2007 16:31'!testTags	self assert: self structure tags isEmpty.	self structure tags: #( 'foo' 'bar' ).	self assert: (self structure tags includes: 'foo').	self assert: (self structure tags includes: 'bar')! !!PRChildrenTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRChildrenTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRChildren! !!PRChildrenTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!firstChildInstance	^ PRPage named: 'child1'! !!PRChildrenTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!secondChildInstance	^ PRPage named: 'child2'! !!PRChildrenTest methodsFor: 'testing-actions' stamp: 'lr 3/9/2006 11:31'!testAdd	| child1 child2 |	child1 := self firstChildInstance.	self assert: (self decoration add: child1) = child1.	self assert: self decorated = child1 parent.	child2 := self secondChildInstance.	self assert: (self decoration add: child2) = child2.	self assert: self decorated = child2 parent! !!PRChildrenTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testAt	| child1 child2 |	self decoration		add: (child1 := self firstChildInstance);		add: (child2 := self secondChildInstance).	self assert: (self decoration at: child1 name) = child1.	self assert: (self decoration at: child2 name) = child2.	self should: [ self decoration at: 'zork' ] raise: Error! !!PRChildrenTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testAtIfAbsent	| child1 child2 |	self decoration		add: (child1 := self firstChildInstance);		add: (child2 := self secondChildInstance).	self assert: (self decoration at: child1 name ifAbsent: [ nil ]) = child1.	self assert: (self decoration at: child2 name ifAbsent: [ nil ]) = child2.	self assert: (self decoration at: 'zork' ifAbsent: [ nil ]) isNil! !!PRChildrenTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testAtIfPresent	| child1 child2 |	self decoration		add: (child1 := self firstChildInstance);		add: (child2 := self secondChildInstance).	self assert: (self decoration		at: child1 name		ifPresent: [ :val | val ]) = child1.	self assert: (self decoration		at: child2 name		ifPresent: [ :val | 'zork' ]) = 'zork'.	self assert: (self decoration		at: 'zork'		ifPresent: [ :val | self assert: false ]) isNil! !!PRChildrenTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testIncludes	| child1 child2 |	self decoration		add: (child1 := self firstChildInstance);		add: (child2 := self secondChildInstance).	self assert: (self decoration includes: child1 name).	self assert: (self decoration includes: child2 name).	self deny: (self decoration includes: 'zork')! !!PRChildrenTest methodsFor: 'testing-testing' stamp: 'lr 9/25/2006 08:20'!testIsEmpty	self assert: self decoration isEmpty.	self decoration add: self firstChildInstance.	self deny: self decoration isEmpty! !!PRChildrenTest methodsFor: 'testing-actions' stamp: 'TestRunner 11/15/2009 23:30'!testRemove	| child1 child2 |	self decoration		add: (child1 := self firstChildInstance);		add: (child2 := self secondChildInstance).	self assert: (self decoration remove: child1) = child1.	self assert: (self decoration remove: child2) = child2.	self assert: (self decoration isEmpty).	self assert: (self decoration decorated isNil)! !!PRChildrenTest methodsFor: 'testing-actions' stamp: 'lr 9/25/2006 08:18'!testRemoveLast	"Tests that the children decoration is properly removed if the last child has been removed from the decoration."	| child |	self decoration		add: (child := self firstChildInstance).	self decoration		remove: child.	self decorated		decorationOfClass: self actualClass		ifAbsent: [ ^ self ].	self assert: false! !!PRChildrenTest methodsFor: 'testing-accessing' stamp: 'lr 3/30/2009 21:50'!testSize	self assert: self decoration size = 0.	self decoration		add: self firstChildInstance;		add: self secondChildInstance.	self assert: self decoration size = 2! !!PRDecorationTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRDecorationTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRDecoration! !!PRDecorationTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!actualInstance	^ self actualClass new! !!PRDecorationTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!decorated	^ decorated! !!PRDecorationTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!decoratedInstance	^ PRPage new! !!PRDecorationTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!decoration	^ decoration! !!PRDecorationTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!instance	^ decoration! !!PRDecorationTest methodsFor: 'running' stamp: 'lr 3/9/2006 11:31'!setUp	decorated := self decoratedInstance.	decoration := self actualInstance.	decorated addDecoration: decoration! !!PRDecorationTest methodsFor: 'testing-copying' stamp: 'lr 3/9/2006 11:31'!testCopyDecorated	| ownerCopy decorationCopy |	ownerCopy := self decorated copy.	decorationCopy := ownerCopy decorations first.	self deny: self decorated == ownerCopy.	self deny: self decorated == decorationCopy.	self assert: self decorated decorations size = 1.	self assert: self decorated decorations first = self decoration.	self assert: self decorated = self decoration decorated.	self assert: ownerCopy decorations size = 1.	self assert: ownerCopy decorations first = decorationCopy.	self assert: ownerCopy = decorationCopy decorated! !!PRDecorationTest methodsFor: 'testing-copying' stamp: 'lr 3/9/2006 11:31'!testCopyDecoration	| decorationCopy |	decorationCopy := self decoration copy.	self deny: self decoration == decorationCopy.	self assert: self decoration = decorationCopy.	self assert: self decoration decorated = self decorated.	self assert: decorationCopy decorated isNil! !!PRDecorationTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testDecorated	self assert: self decoration decorated = self decorated! !!PRDecorationTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testPriority	self assert: self decoration priority isNumber! !!PRDecorationTest methodsFor: 'testing-utilities' stamp: 'lr 2/12/2007 19:07'!testRemove	self decoration remove.	self assert: self decoration decorated isNil.	self decorated		decorationOfClass: self actualClass		ifAbsent: [ ^ self ].	self assert: false! !!PRAnchorTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRAnchorTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRAnchor! !!PRAnchorTest methodsFor: 'testing-comparing' stamp: 'lr 4/5/2007 13:16'!testEqualName	self deny: (self actualClass named: 'foo') = (self actualClass named: 'bar')! !!PRAnchorTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testName	self instance name: 'zork'.	self assert: self instance name = 'zork'! !!PRAnchorTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 13:08'!testParseBasic	| wiki text tree |	wiki := '@name'.	text := ''.	tree := PRDocument new		add: (PRAnchor named: 'name');		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRAnchorTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 23:00'!testParseMultiple	| wiki text tree |	wiki := '@one' , String cr ,'@two' , String cr ,String cr ,'@tree'.	text := ''.	tree := PRDocument new		add: (PRAnchor named: 'one');		add: (PRAnchor named: 'two');		add: PREmptyParagraph new;		add: (PRAnchor named: 'tree');		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRAnchorTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 13:08'!testParseSpaces	| wiki text tree |	wiki := '@one two'.	text := ''.	tree := PRDocument new		add: (PRAnchor named: 'one two');		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRAnchorTest methodsFor: 'testing-instantiation' stamp: 'lr 4/5/2007 13:16'!testWith	instance := self actualClass named: 'test'.	self assert: self instance name = 'test'! !!PRAnnotatedParagraphTest class methodsFor: 'testing' stamp: 'lr 5/26/2009 22:22'!isAbstract	^ false! !!PRAnnotatedParagraphTest methodsFor: 'private' stamp: 'lr 5/26/2009 22:21'!actualClass	^ PRAnnotatedParagraph! !!PRAnnotatedParagraphTest methodsFor: 'testing-parsing' stamp: 'lr 5/26/2009 22:31'!testParseBasic	| wiki text tree |	wiki := '@@foo bar zork'.	text := 'bar zork'.	tree := PRDocument new		add: (PRAnnotatedParagraph new			annotation: 'foo';			add: (PRText content: 'bar zork');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRAnnotatedParagraphTest methodsFor: 'testing-parsing' stamp: 'lr 9/17/2009 18:02'!testParseEmptyFollwedByPreformatted	| wiki text tree |	wiki := '@@foo' , String cr , '=bar'.	text := String cr , 'bar'.	tree := PRDocument new		add: (PRAnnotatedParagraph new			annotation: 'foo';			yourself);		add: (PRPreformatted new			add: (PRText content: 'bar');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRAnnotatedParagraphTest methodsFor: 'testing-parsing' stamp: 'lr 5/26/2009 22:31'!testParseOnlyAnnotation	| wiki text tree |	wiki := '@@foo'.	text := ''.	tree := PRDocument new		add: (PRAnnotatedParagraph new			annotation: 'foo';			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRAnnotatedParagraphTest methodsFor: 'testing-parsing' stamp: 'lr 5/26/2009 22:31'!testParseOnlyNothing	| wiki text tree |	wiki := '@@'.	text := ''.	tree := PRDocument new		add: (PRAnnotatedParagraph new			annotation: '';			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRAnnotatedParagraphTest methodsFor: 'testing-parsing' stamp: 'lr 5/26/2009 22:31'!testParseOnlyText	| wiki text tree |	wiki := '@@ foo bar'.	text := 'foo bar'.	tree := PRDocument new		add: (PRAnnotatedParagraph new			add: (PRText content: 'foo bar');			annotation: '';			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRDocumentGroupTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRDocumentGroupTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRDocumentGroup! !!PRDocumentGroupTest methodsFor: 'testing-adding' stamp: 'lr 3/9/2006 11:31'!testAdd	self instance add: self fooInstance.	self assert: self instance children size = 1.	self assert: self instance children first = self fooInstance.	self instance add: self barInstance.	self assert: self instance children size = 2.	self assert: self instance children first = self fooInstance.	self assert: self instance children second = self barInstance! !!PRDocumentGroupTest methodsFor: 'testing-adding' stamp: 'lr 3/9/2006 11:31'!testAddAll	self instance addAll: self foobarInstances.	self assert: self instance children size = 2.	self assert: self instance children first = self fooInstance.	self assert: self instance children second = self barInstance! !!PRDocumentGroupTest methodsFor: 'testing-copying' stamp: 'lr 3/9/2006 11:31'!testCopyChildren	self instance addAll: self foobarInstances.	self assert: self instance children = self instance copy children.	self deny: self instance children == self instance copy children.	self instance children		with: self instance copy children		do: [ :a :b | self assert: a = b. self deny: a == b ]! !!PRDocumentGroupTest methodsFor: 'testing-testing' stamp: 'lr 3/20/2006 19:08'!testHasChildren	self deny: self instance hasChildren.	self instance add: self fooInstance.	self assert: self instance hasChildren! !!PRDocumentGroupTest methodsFor: 'testing-accessing' stamp: 'lr 3/30/2009 21:55'!testSize	self assert: self instance size = 0.	self instance add: self fooInstance.	self assert: self instance size = 1! !!PRDocumentGroupTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testText	self instance addAll: self foobarInstances.	self assert: self instance text = 'foobar'! !!PRDocumentGroupTest methodsFor: 'testing-instantiation' stamp: 'lr 3/9/2006 11:31'!testWith	instance := self actualClass with: self fooInstance.	self assert: instance children size = 1.	self assert: instance children first = self fooInstance! !!PRDocumentGroupTest methodsFor: 'testing-instantiation' stamp: 'lr 3/9/2006 11:31'!testWithAll	instance := self actualClass withAll: self foobarInstances.	self assert: instance children size = 2.	self assert: instance children first = self fooInstance.	self assert: instance children second = self barInstance! !!PRDocumentTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRDocumentTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRDocument! !!PRDocumentTest methodsFor: 'testing-parsing' stamp: 'lr 12/9/2007 17:02'!testParseEmpty	| wiki text tree |	wiki := String new.	text := String new.	tree := PRDocument new.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRBoldFormatTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRBoldFormatTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRBoldFormat! !!PRFormatTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRFormatTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRFormat! !!PRFormatTest methodsFor: 'accessing' stamp: 'lr 4/5/2007 16:08'!otherClass	^ otherClass ifNil: [ otherClass := PRFormat allSubclasses detect: [ :each | self actualClass ~= each ] ]! !!PRFormatTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 15:37'!testParseBasic	| wiki text tree |	wiki := '1' , self actualClass markup , '2' , self actualClass markup , '3'.	text := '123'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '1');			add: (self actualClass with: (PRText content: '2'));			add: (PRText content: '3');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRFormatTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:32'!testParseEnd	| wiki text tree |	wiki := '1' , self actualClass markup , '2' , self actualClass markup.	text := '12'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '1');			add: (self actualClass with: (PRText content: '2'));			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRFormatTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 15:57'!testParseEscaped	| wiki text tree |	wiki := ' \' , self actualClass markup , '\' , self actualClass markup.	text := ' ' , self actualClass markup , self actualClass markup.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: ' ' , self actualClass markup , self actualClass markup);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRFormatTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 15:47'!testParseIncomplete	| wiki1 wiki2 text tree |	wiki1 := '1' , self actualClass markup , '2'.	wiki2 := '1\' , self actualClass markup , '2'.	text := '1' , self actualClass markup , '2'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '1' , self actualClass markup , '2');			yourself);		yourself.	self assertWiki: wiki1 equalsTree: tree.	self assertWiki: wiki2 equalsTree: tree.	self assertTree: tree equalsWiki: wiki2.	self assertTree: tree equalsText: text! !!PRFormatTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:32'!testParseMany	| wiki text tree |	wiki := '1' , self actualClass markup , '2' , self actualClass markup , '3' , self actualClass markup , '4' , self actualClass markup , '5'.	text := '12345'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '1');			add: (self actualClass with: (PRText content: '2'));			add: (PRText content: '3');			add: (self actualClass with: (PRText content: '4'));			add: (PRText content: '5');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRFormatTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 16:06'!testParseNested	| wiki text tree |	wiki := '1' , self actualClass markup , '2' , self otherClass markup , '3' , self otherClass markup , '4' , self actualClass markup , '5'.	text := '12345'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '1');			add: (self actualClass new				add: (PRText content: '2');				add: (self otherClass new					add: (PRText content: '3');					yourself);				add: (PRText content: '4');				yourself);			add: (PRText content: '5');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRFormatTest methodsFor: 'testing-parsing' stamp: 'lr 12/20/2007 14:36'!testParseNestedTight	| wiki text tree |	wiki := ' ' , self actualClass markup , self otherClass markup , self otherClass markup , self actualClass markup.	text := ' '.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: ' ');			add: (self actualClass new				add: self otherClass new				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRItalicFormatTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRItalicFormatTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRItalicFormat! !!PRMonospaceFormatTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRMonospaceFormatTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRMonospaceFormat! !!PRStrikethroughFormatTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRStrikethroughFormatTest methodsFor: 'private' stamp: 'lr 5/31/2007 07:48'!actualClass	^ PRStrikethroughFormat! !!PRSubscriptFormatTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRSubscriptFormatTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRSubscriptFormat! !!PRSuperscriptFormatTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRSuperscriptFormatTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRSuperscriptFormat! !!PRUnderlineFormatTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRUnderlineFormatTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRUnderlineFormat! !!PRHeaderTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRHeaderTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRHeader! !!PRHeaderTest methodsFor: 'testing-comparing' stamp: 'lr 3/9/2006 11:31'!testEqualLevel	self deny: (self actualClass new level: 1) = (self actualClass new level: 2)! !!PRHeaderTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testName	self instance level: 3.	self assert: self instance level = 3! !!PRHeaderTest methodsFor: 'testing-parsing' stamp: 'lr 10/18/2007 19:22'!testParseEmpty	| wiki text tree |	wiki := '!!'.	text := ''.	tree := PRDocument new		add: (PRHeader new			level: 1;			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHeaderTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:33'!testParseLevel1	| wiki text tree |	wiki := '!!foo'.	text := 'foo'.	tree := PRDocument new		add: ((PRHeader new)			level: 1;			add: (PRText content: 'foo');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHeaderTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:33'!testParseLevel2	| wiki text tree |	wiki := '!!!!foo'.	text := 'foo'.	tree := PRDocument new		add: ((PRHeader new)			level: 2;			add: (PRText content: 'foo');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHeaderTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:33'!testParseLevel3	| wiki text tree |	wiki := '!!!!!!foo'.	text := 'foo'.	tree := PRDocument new		add: ((PRHeader new)			level: 3;			add: (PRText content: 'foo');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHeaderTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:33'!testParseLevel4	| wiki text tree |	wiki := '!!!!!!!!foo'.	text := 'foo'.	tree := PRDocument new		add: ((PRHeader new)			level: 4;			add: (PRText content: 'foo');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHeaderTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:33'!testParseLevel5	| wiki text tree |	wiki := '!!!!!!!!!!foo'.	text := 'foo'.	tree := PRDocument new		add: ((PRHeader new)			level: 5;			add: (PRText content: 'foo');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHeaderTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:33'!testParseLevel6	| wiki text tree |	wiki := '!!!!!!!!!!!!foo'.	text := 'foo'.	tree := PRDocument new		add: ((PRHeader new)			level: 6;			add: (PRText content: 'foo');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHeaderTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:33'!testParseNested	| wiki text tree |	wiki := '!!!!Hello *Link*'.	text := 'Hello Link'.	tree := PRDocument new		add: (PRHeader new			level: 2;			add: (PRText content: 'Hello ');			add: (PRInternalLink new				reference: 'Link';				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHeaderTest methodsFor: 'testing-instantiation' stamp: 'lr 3/9/2006 11:31'!testWithAllLevel	instance := self actualClass withAll: self foobarInstances level: 3.	self assert: self instance children size = 2.	self assert: self instance children first = self fooInstance.	self assert: self instance children second = self barInstance.	self assert: self instance level = 3! !!PRExternalLinkTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRExternalLinkTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRExternalLink! !!PRExternalLinkTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!referenceString	^ 'http://www.lukas-renggli.ch'! !!PRExternalLinkTest methodsFor: 'as yet unclassified' stamp: 'lr 4/1/2009 22:29'!testIsExternal	self assert: self instance isExternal! !!PRExternalLinkTest methodsFor: 'testing-accessing' stamp: 'lr 10/20/2006 12:06'!testTitle	self instance reference: 'http://www.lukas-renggli.ch'.	self assert: self instance title = 'http://www.lukas-renggli.ch'! !!PRExternalLinkTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testUrl	self instance reference: 'http://www.lukas-renggli.ch'.	self assert: self instance url = 'http://www.lukas-renggli.ch'! !!PRMailLinkTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRMailLinkTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRMailLink! !!PRMailLinkTest methodsFor: 'private' stamp: 'lr 11/13/2008 14:15'!referenceString	^ 'renggli@gmail.com'! !!PRMailLinkTest methodsFor: 'testing-parsing' stamp: 'lr 9/22/2008 08:25'!testParseBogus	| wiki text tree |	wiki := '*ab12@x.com*'.	text := 'ab12@x.com'.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				reference: 'ab12@x.com';				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRMailLinkTest methodsFor: 'testing-accessing' stamp: 'lr 11/13/2008 14:16'!testTitle	super testTitle.	self instance reference: self referenceString.	self assert: self instance title = self referenceString! !!PRMailLinkTest methodsFor: 'testing-accessing' stamp: 'lr 11/13/2008 15:01'!testUrl	self instance reference: self referenceString.	self assert: (self instance url beginsWith: 'mailto:').	self assert: self instance url ~= ('mailto:' , self referenceString)! !!PRInternalLinkTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRInternalLinkTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRInternalLink! !!PRInternalLinkTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!referenceString	^ 'Page'! !!PRInternalLinkTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testAnchor	self instance anchor: 'zork'.	self assert: self instance anchor = 'zork'.	self assert: self instance hasAnchor! !!PRInternalLinkTest methodsFor: 'testing-comparing' stamp: 'lr 3/9/2006 11:31'!testEqualAnchor	self deny: (self actualClass new anchor: 'foo'; yourself) = ((self actualClass new) anchor: 'bar'; yourself)! !!PRInternalLinkTest methodsFor: 'testing' stamp: 'lr 3/30/2009 21:35'!testIsInternal	self assert: self instance isInternal! !!PRInternalLinkTest methodsFor: 'testing-parsing' stamp: 'lr 2/7/2007 15:18'!testParseAnchoredEmbedded	| wiki text tree |	wiki := '+' , self referenceString , '@Anchor+'.	text := self actualClass new		reference: self referenceString;		anchor: 'Anchor';		embedded: true;		title.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				reference: self referenceString;				anchor: 'Anchor';				embedded: true;				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRInternalLinkTest methodsFor: 'testing-parsing' stamp: 'lr 2/7/2007 15:17'!testParseAnchoredReferenced	| wiki text tree |	wiki := '*' , self referenceString , '@Anchor*'.	text := self actualClass new		reference: self referenceString;		anchor: 'Anchor';		title.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				reference: self referenceString;				anchor: 'Anchor';				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRInternalLinkTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:33'!testParseEverything	| wiki text tree |	wiki := '*Alias>' , self referenceString , '@Anchor*'.	text := 'Alias'.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				add: (PRText content: 'Alias');				reference: self referenceString;				anchor: 'Anchor';				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRInternalLinkTest methodsFor: 'testing-accessing' stamp: 'lr 10/20/2006 11:45'!testTitle	super testTitle.	self instance reference: 'page'.	self assert: self instance title = 'page'! !!PRLinkTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRLinkTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRLink! !!PRLinkTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!referenceString	self subclassResponsibility! !!PRLinkTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testAlias	self deny: self instance hasAlias.	self instance add: self fooInstance.	self assert: self instance hasAlias.	self assert: self instance alias = 'foo'.	self instance add: self barInstance.	self assert: self instance hasAlias.	self assert: self instance alias = 'foobar'! !!PRLinkTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testAnchor	self deny: self instance hasAnchor! !!PRLinkTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testEmbedded	self instance embedded: true.	self assert: self instance isEmbedded.	self instance embedded: false.	self deny: self instance isEmbedded! !!PRLinkTest methodsFor: 'testing-comparing' stamp: 'lr 3/9/2006 11:31'!testEqualEmbedded	self deny: (self actualClass new embedded: false; yourself) = (self actualClass new embedded: true; yourself)! !!PRLinkTest methodsFor: 'testing-comparing' stamp: 'lr 3/9/2006 11:31'!testEqualReference	self deny: (self actualClass new reference: 'foo'; yourself) = (self actualClass new reference: 'bar'; yourself)! !!PRLinkTest methodsFor: 'testing-parameters' stamp: 'lr 10/9/2008 12:10'!testHasParameter	self instance parameters: (Array with: 'foo' -> 'zork' with: 'bar' -> nil).	self assert: (self instance hasParameter: 'foo').	self assert: (self instance hasParameter: 'bar').	self deny: (self instance hasParameter: 'zork')! !!PRLinkTest methodsFor: 'testing' stamp: 'lr 3/30/2009 21:35'!testIsBroken	self assert: (self instance isBroken or: [ self instance isBroken not ])! !!PRLinkTest methodsFor: 'testing' stamp: 'lr 4/1/2009 22:28'!testIsExternal	self deny: self instance isExternal! !!PRLinkTest methodsFor: 'testing' stamp: 'lr 3/30/2009 21:35'!testIsInternal	self deny: self instance isInternal! !!PRLinkTest methodsFor: 'testing' stamp: 'lr 3/30/2009 21:36'!testIsLink	self assert: self instance isLink! !!PRLinkTest methodsFor: 'testing-parameters' stamp: 'lr 9/8/2008 17:20'!testParameterAt	self instance parameters: (Array with: 'foo' -> 'bar').	self assert: (self instance parameterAt: 'foo') = 'bar'.	self assert: (self instance parameterAt: 'bar') isNil! !!PRLinkTest methodsFor: 'testing-parameters' stamp: 'lr 9/8/2008 17:20'!testParameterAtIfAbsent	self instance parameters: (Array with: 'foo' -> 'bar').	self assert: (self instance parameterAt: 'foo' ifAbsent: [ 'zork' ]) = 'bar'.	self assert: (self instance parameterAt: 'bar'  ifAbsent: [ 'zork' ]) = 'zork'! !!PRLinkTest methodsFor: 'testing-parameters' stamp: 'lr 3/30/2009 21:53'!testParameterAtIfPresent	self instance parameters: (Array with: 'foo' -> 'bar').	self assert: (self instance parameterAt: 'foo' ifPresent: [ :value | '!!' , value ]) = '!!bar'.	self assert: (self instance parameterAt: 'bar' ifPresent: [ :value | '!!' , value ]) isNil! !!PRLinkTest methodsFor: 'testing-parameters' stamp: 'lr 1/30/2009 20:17'!testParameterAtPut	self assert: (self instance parameterAt: 'foo' put: 'bar') = 'bar'.	self assert: (self instance parameters size = 1).	self assert: (self instance parameters first key = 'foo').	self assert: (self instance parameters first value = 'bar').		self assert: (self instance parameterAt: 'foo' put: 'zork') = 'zork'.	self assert: (self instance parameters size = 1).	self assert: (self instance parameters first key = 'foo').	self assert: (self instance parameters first value = 'zork')! !!PRLinkTest methodsFor: 'testing-parameters' stamp: 'lr 4/4/2009 11:55'!testParameterCopy	| copy |	self instance parameterAt: 'class' put: 'active'.	copy := self instance copy.	copy parameterAt: 'class' put: 'inactive'.	copy parameterAt: 'foo' put: 'bar'.		self assert: (self instance parameterAt: 'class') = 'active'.	self deny: (self instance hasParameter: 'foo').		self assert: (copy parameterAt: 'class') = 'inactive'.	self assert: (copy parameterAt: 'foo') = 'bar'! !!PRLinkTest methodsFor: 'testing-parameters' stamp: 'lr 8/27/2007 10:22'!testParameters	self assert: self instance parameters isEmpty.	self instance parameters: (Array with: 'foo' -> 'bar').	self assert: self instance parameters size = 1! !!PRLinkTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:33'!testParseAliased	| wiki text tree |	wiki := '*Alias>' , self referenceString , '*'.	text := 'Alias'.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				add: (PRText content: 'Alias');				reference: self referenceString;				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'testing-parsing' stamp: 'lr 2/2/2009 16:01'!testParseAliasedEmpty	| wiki text tree |	wiki := '*>' , self referenceString , '*'.	text := ''.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				add: (PRText content: '');				reference: self referenceString;				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'testing-parsing' stamp: 'lr 2/7/2007 15:06'!testParseBasic	| wiki text tree |	wiki := '*' , self referenceString , '*'.	text := self actualClass new		reference: self referenceString;		title.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				reference: self referenceString;				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:51'!testParseEasynessEmbedded	| wiki1 wiki2 text tree |	wiki1 := '+' , String cr ,'+' , self referenceString.	wiki2 := '\+' , String cr ,'\+' , self referenceString.	text := '+' , String cr ,'+' , self referenceString.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '+');			add: (PRLineBreak new);			add: (PRText content: '+' , self referenceString);			yourself);		yourself.	self assertWiki: wiki1 equalsTree: tree.	self assertWiki: wiki2 equalsTree: tree.	self assertTree: tree equalsWiki: wiki2.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:51'!testParseEasynessReferenced	| wiki1 wiki2 text tree |	wiki1 := '*' , String cr ,'*' , self referenceString.	wiki2 := '\*' , String cr ,'\*' , self referenceString.	text := '*' , String cr ,'*' , self referenceString.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '*');			add: (PRLineBreak new);			add: (PRText content: '*' , self referenceString);			yourself);		yourself.	self assertWiki: wiki1 equalsTree: tree.	self assertWiki: wiki2 equalsTree: tree.	self assertTree: tree equalsWiki: wiki2.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:33'!testParseEmbeddedAliased	| wiki text tree |	wiki := '+Alias>' , self referenceString , '+'.	text := 'Alias'.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				add: (PRText content: 'Alias');				reference: self referenceString;				embedded: true;				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'testing-parsing' stamp: 'lr 2/7/2007 15:10'!testParseEmbeddedBasic	| wiki text tree |	wiki := '+' , self referenceString , '+'.	text := self actualClass new		reference: self referenceString;		embedded: true;		title.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				reference: self referenceString;				embedded: true;				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:51'!testParseEscaped	| wiki text tree |	wiki := 'Star \*' , self referenceString , '\*' , String cr ,'Cross \+' , self referenceString , '\+'.	text := 'Star *' , self referenceString , '*' , String cr ,'Cross +' , self referenceString , '+'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: 'Star *' , self referenceString , '*');			add: (PRLineBreak new);			add: (PRText content: 'Cross +' , self referenceString , '+');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'testing-parsing' stamp: 'lr 12/21/2009 13:54'!testParseParameters	| wiki text tree |	wiki := '*Alias>' , self referenceString , '|a=1|b=2|c*'.	text := 'Alias'.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				add: (PRText content: 'Alias');				reference: self referenceString;				parameters: (Array					with: 'a' -> '1'					with: 'b' -> '2'					with: 'c' -> nil);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'testing-parsing' stamp: 'lr 9/12/2007 18:18'!testParseParametersEmpty	| wiki text tree |	wiki := '*Alias>' , self referenceString , '|a||b|*'.	text := 'Alias'.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				add: (PRText content: 'Alias');				reference: self referenceString;				parameters: (Array					with: 'a' -> nil					with: 'b' -> nil);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'testing-parsing' stamp: 'TestRunner 12/21/2009 13:58'!testParseParametersEscaped	| wiki text tree |	wiki := '*Alias>' , self referenceString , '|\|\==1|2=\|\=*'.	text := 'Alias'.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				add: (PRText content: 'Alias');				reference: self referenceString;				parameters: (Array					with: '|=' -> '1'					with: '2' -> '|=');				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testReference	self instance reference: 'zork'.	self assert: self instance reference = 'zork'! !!PRLinkTest methodsFor: 'testing-accessing' stamp: 'lr 10/20/2006 11:43'!testTitle	self deny: self instance title notNil! !!PRValueLinkTest class methodsFor: 'testing' stamp: 'lr 1/9/2009 20:28'!isAbstract	^ false! !!PRValueLinkTest methodsFor: 'private' stamp: 'lr 1/9/2009 20:27'!actualClass	^ PRValueLink! !!PRValueLinkTest methodsFor: 'private' stamp: 'lr 1/13/2009 20:13'!referenceString	^ 'value:structure'! !!PRValueLinkTest methodsFor: 'testing' stamp: 'lr 1/13/2009 20:13'!testBroken	self assert: self instance isBroken.		self instance reference: 'value:does-not-exist'.	self assert: self instance isBroken.		self instance reference: 'value:STRUCTURE'.	self deny: self instance isBroken.		self instance reference: 'value:structure'.	self deny: self instance isBroken.		self instance reference: 'value:  structure'.	self deny: self instance isBroken.		self instance reference: 'value:structure  '.	self deny: self instance isBroken! !!PRValueLinkTest methodsFor: 'testing-utilities' stamp: 'lr 4/22/2009 15:16'!testFilterReject	self instance parameterAt: 'reject' put: 'Page'.	self assert: (self instance selectAndReject: PRPage new) isNil.	self assert: (self instance selectAndReject: PRFile new) notNil.	! !!PRValueLinkTest methodsFor: 'testing-utilities' stamp: 'lr 4/22/2009 15:16'!testFilterSelect	self instance parameterAt: 'select' put: 'Page'.	self assert: (self instance selectAndReject: PRPage new) notNil.	self assert: (self instance selectAndReject: PRFile new) isNil! !!PRValueLinkTest methodsFor: 'testing-utilities' stamp: 'lr 4/22/2009 13:07'!testFormatStructure	| structure context document |	structure := PRPage named: 'foo'.	context := PRContext kernel: PRKernel basicNew structure: structure.	self instance reference: 'value:structure'.	document := self instance formatStructure: structure in: context.	self assert: document text = 'Foo'.	self instance parameterAt: 'display' put: 'name'.	document := self instance formatStructure: structure in: context.	self assert: document text = 'foo'.		self instance parameterAt: 'link' put: nil.	document := self instance formatStructure: structure in: context.	self assert: document target = structure.	self assert: document children first text = 'foo'! !!PRValueLinkTest methodsFor: 'testing-utilities' stamp: 'lr 2/2/2009 22:16'!testLookupStructure	| structure1 structure2 structure3 |	structure1 := PRPage named: '1'.	structure2 := PRPage named: '2'.	structure3 := PRPage named: '3'.	structure1 addChild: structure2.	structure2 addChild: structure3.		self instance reference: 'value:structure'.	self instance parameterAt: 'level' put: '-3'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) isNil.		self instance parameterAt: 'level' put: '-2'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) = structure1.		self instance parameterAt: 'level' put: '-1'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) = structure2.		self instance parameterAt: 'level' put: '0'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) = structure3.		self instance parameterAt: 'level' put: '1'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) = structure1.		self instance parameterAt: 'level' put: '2'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) = structure2.		self instance parameterAt: 'level' put: '3'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) = structure3.		self instance parameterAt: 'level' put: '4'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) isNil! !!PRValueLinkTest methodsFor: 'testing-utilities' stamp: 'lr 2/2/2009 22:19'!testLookupStructureLower	| structure1 structure2 structure3 |	structure1 := PRPage named: '1'.	structure2 := PRPage named: '2'.	structure3 := PRPage named: '3'.	structure1 addChild: structure2.	structure2 addChild: structure3.		self instance reference: 'value:structure'.	self instance parameterAt: 'lower' put: '2'.	self instance parameterAt: 'level' put: '-3'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) isNil.		self instance parameterAt: 'level' put: '-2'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) isNil.		self instance parameterAt: 'level' put: '-1'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) = structure2.		self instance parameterAt: 'level' put: '0'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) = structure3.		self instance parameterAt: 'level' put: '1'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) isNil.		self instance parameterAt: 'level' put: '2'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) = structure2.		self instance parameterAt: 'level' put: '3'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) = structure3.		self instance parameterAt: 'level' put: '4'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) isNil! !!PRValueLinkTest methodsFor: 'testing-utilities' stamp: 'lr 2/2/2009 22:19'!testLookupStructureUpper	| structure1 structure2 structure3 |	structure1 := PRPage named: '1'.	structure2 := PRPage named: '2'.	structure3 := PRPage named: '3'.	structure1 addChild: structure2.	structure2 addChild: structure3.		self instance reference: 'value:structure'.	self instance parameterAt: 'upper' put: '2'.	self instance parameterAt: 'level' put: '-3'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) isNil.		self instance parameterAt: 'level' put: '-2'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) = structure1.		self instance parameterAt: 'level' put: '-1'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) = structure2.		self instance parameterAt: 'level' put: '0'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) isNil.		self instance parameterAt: 'level' put: '1'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) = structure1.		self instance parameterAt: 'level' put: '2'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) = structure2.		self instance parameterAt: 'level' put: '3'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) isNil.		self instance parameterAt: 'level' put: '4'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) isNil! !!PRValueLinkTest methodsFor: 'testing-utilities' stamp: 'lr 4/22/2009 15:15'!testSelectAndReject	| structure1 structure2 structure3 |	structure1 := PRPage named: '1'.	structure2 := PRPage named: '2'.	structure3 := PRPage named: '3'.	structure1 addChild: structure2.	structure2 addChild: structure3.		self instance reference: 'value:structure'.	self instance parameterAt: 'lower' put: '2'.	self instance parameterAt: 'level' put: '-3'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) isNil.		self instance parameterAt: 'level' put: '-2'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) isNil.		self instance parameterAt: 'level' put: '-1'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) = structure2.		self instance parameterAt: 'level' put: '0'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) = structure3.		self instance parameterAt: 'level' put: '1'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) isNil.		self instance parameterAt: 'level' put: '2'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) = structure2.		self instance parameterAt: 'level' put: '3'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) = structure3.		self instance parameterAt: 'level' put: '4'.	self assert: (self instance lookupStructure: structure3 do: [ :structure | structure ]) isNil! !!PRValueLinkTest methodsFor: 'testing' stamp: 'lr 1/13/2009 20:13'!testSelectorFor	self assert: (self instance selectorFor: 'date') = #dateIn:.	self assert: (self instance selectorFor: 'context') = #contextIn:! !!PRValueLinkTest methodsFor: 'testing' stamp: 'lr 3/30/2009 22:13'!testSmoke	| context |	context := self contextInstance.	self instance pragmas do: [ :pragma |		self instance reference: 'value:' , pragma arguments first.		self assert: self instance title = pragma arguments first.		self			shouldnt: [ self instance valueIn: context ]			raise: Error ]! !!PRValueLinkTest methodsFor: 'testing' stamp: 'lr 2/2/2009 21:46'!testTitle	self instance reference: 'value:structure'.	self assert: self instance title = 'structure'! !!PRListItemTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRListItemTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRListItem! !!PRDefinitionDataTest class methodsFor: 'testing' stamp: 'lr 12/30/2007 21:37'!isAbstract	^ false! !!PRDefinitionDataTest methodsFor: 'private' stamp: 'lr 12/30/2007 21:37'!actualClass	^ PRDefinitionList! !!PRDefinitionDataTest methodsFor: 'private' stamp: 'lr 12/30/2007 23:30'!listItemClass	^ PRDataItem! !!PRDefinitionDataTest methodsFor: 'testing' stamp: 'lr 1/28/2009 16:33'!testParseBug	| wiki1 wiki2 tree |	wiki1 := '::1' , String cr , '::-2'.	wiki2 := ':' , String cr , '::1' , String cr , '::-2'.	tree := PRDocument new		add: (PRDefinitionList new			add: (PRDataItem new				add: (PRDefinitionList new					add: (PRDataItem new						add: (PRText content: '1');						add: (PRUnorderedList new							add: (PRListItem new								add: (PRText content: '2');								yourself);							yourself);						yourself);					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki1 equalsTree: tree.	self assertWiki: wiki2 equalsTree: tree.	self assertTree: tree equalsWiki: wiki2! !!PRDefinitionDataTest methodsFor: 'testing' stamp: 'lr 2/3/2008 22:53'!testParseMixed	| wiki tree |	wiki := ';1' , String cr ,':2'.	tree := PRDocument new		add: (PRDefinitionList new			add: (PRTermItem new				add: (PRText content: '1');				yourself);			add: (PRDataItem new				add: (PRText content: '2');				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRDefinitionDataTest methodsFor: 'private' stamp: 'lr 12/30/2007 23:33'!textString: anObject level: anInteger	^ (super textString: anObject level: anInteger) , '  '! !!PRDefinitionDataTest methodsFor: 'private' stamp: 'lr 12/30/2007 23:30'!wikiString	^ ':'! !!PRDefinitionTermTest class methodsFor: 'testing' stamp: 'lr 12/30/2007 23:29'!isAbstract	^ false! !!PRDefinitionTermTest methodsFor: 'private' stamp: 'lr 12/30/2007 23:29'!actualClass	^ PRDefinitionList! !!PRDefinitionTermTest methodsFor: 'private' stamp: 'lr 12/30/2007 23:30'!listItemClass	^ PRTermItem! !!PRDefinitionTermTest methodsFor: 'testing' stamp: 'lr 2/3/2008 22:53'!testParseMixed	| wiki tree |	wiki := ';1' , String cr ,';2' , String cr ,':3' , String cr ,':4'.	tree := PRDocument new		add: (PRDefinitionList new			add: (PRTermItem new				add: (PRText content: '1');				yourself);			add: (PRTermItem new				add: (PRText content: '2');				yourself);			add: (PRDataItem new				add: (PRText content: '3');				yourself);			add: (PRDataItem new				add: (PRText content: '4');				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRDefinitionTermTest methodsFor: 'private' stamp: 'lr 12/30/2007 23:33'!textString: anObject level: anInteger	^ (super textString: anObject level: anInteger) , '- '! !!PRDefinitionTermTest methodsFor: 'private' stamp: 'lr 12/30/2007 23:29'!wikiString	^ ';'! !!PRListTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRListTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRList! !!PRListTest methodsFor: 'private' stamp: 'lr 12/30/2007 23:28'!listItemClass	^ PRListItem! !!PRListTest methodsFor: 'private' stamp: 'lr 12/30/2007 23:28'!listItemWithText: aString	^ self listItemClass new		add: (PRText content: aString);		yourself! !!PRListTest methodsFor: 'testing-parsing' stamp: 'lr 12/30/2007 23:31'!testParseEmpty	| wiki text tree |	wiki := self wikiString.	text := self textString: 1 level: 1.	tree := PRDocument new		add: (self actualClass new			add: self listItemClass new;			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRListTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:52'!testParseFlat	| wiki text tree |	wiki := self wikiString , '1st' , String cr ,self wikiString , '2nd' , String cr ,self wikiString , '3rd'.	text := (self textString: 1 level: 1) , '1st' , String cr ,(self textString: 2 level: 1) , '2nd' , String cr ,(self textString: 3 level: 1) , '3rd'.	tree := PRDocument new		add: (self actualClass new			add: (self listItemWithText: '1st');			add: (self listItemWithText: '2nd');			add: (self listItemWithText: '3rd');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRListTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:53'!testParseMultiple	| wiki text tree |	wiki := self wikiString , '1st' , String cr ,self wikiString , '2nd' , String cr ,String cr ,self wikiString , '3rd'.	text := (self textString: 1 level: 1) , '1st' , String cr ,(self textString: 2 level: 1) , '2nd' , String cr ,String cr ,(self textString: 1 level: 1) , '3rd'.	tree := PRDocument new		add: (self actualClass new			add: (self listItemWithText: '1st');			add: (self listItemWithText: '2nd');			yourself);		add: (PREmptyParagraph new);		add: (self actualClass new			add: (self listItemWithText: '3rd');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRListTest methodsFor: 'private' stamp: 'lr 12/20/2007 23:21'!textString: anObject level: anInteger	^ (2 to: anInteger) inject: '' into: [ :result :each | result , '	' ]! !!PRListTest methodsFor: 'private' stamp: 'lr 2/7/2007 16:22'!wikiString	self subclassResponsibility! !!PROrderedListTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PROrderedListTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PROrderedList! !!PROrderedListTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:53'!testParseMixed	| wiki tree |	wiki := '#1' , String cr ,'#2' , String cr ,'-3'.	tree := PRDocument new		add: (PROrderedList new			add: (self listItemWithText: '1');			add: (self listItemWithText: '2');			yourself);		add: (PRUnorderedList new			add: (self listItemWithText: '3');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PROrderedListTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:54'!testParseNested	| wiki text tree |	wiki := self wikiString , '1' , String cr ,self wikiString , self wikiString , '1.1' , String cr ,self wikiString , self wikiString , '1.2'.	text := (self textString: 1 level: 1) , '1' , String cr ,(self textString: 1 level: 2) , '1.1' , String cr ,(self textString: 2 level: 2) , '1.2'.	tree := PRDocument new		add: (self actualClass new			add: (PRListItem new				add: (PRText content: '1');				add: (self actualClass new					add: (self listItemWithText: '1.1');					add: (self listItemWithText: '1.2');					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PROrderedListTest methodsFor: 'private' stamp: 'lr 12/20/2007 23:20'!textString: anObject level: anInteger	^ (super textString: anObject level: anInteger) , anObject asString , '. '! !!PROrderedListTest methodsFor: 'private' stamp: 'lr 12/20/2007 20:13'!wikiString	^ '#'! !!PRUnorderedListTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRUnorderedListTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRUnorderedList! !!PRUnorderedListTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:54'!testParseMixed	| wiki tree text |	wiki := '#1' , String cr ,'##2' , String cr ,'###3' , String cr ,'#-4' , String cr ,'#-5' , String cr ,'##6' , String cr ,'#7'.	text := '1. 1' , String cr ,'	1. 2' , String cr ,'		1. 3' , String cr ,'	* 4' , String cr ,'	* 5' , String cr ,'	1. 6' , String cr ,'2. 7'.	tree := PRDocument new		add: (PROrderedList new			add: (PRListItem new				add: (PRText content: '1');				add: (PROrderedList new					add: (PRListItem new						add: (PRText content: '2');						add: (PROrderedList new							add: (self listItemWithText: '3');							yourself);						yourself);					yourself);				add: (PRUnorderedList new					add: (self listItemWithText: '4');					add: (self listItemWithText: '5');					yourself);				add: (PROrderedList new					add: (self listItemWithText: '6');					yourself);				yourself);			add: (self listItemWithText: '7');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text	! !!PRUnorderedListTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:55'!testParseNested	| wiki text tree |	wiki := self wikiString , '1' , String cr ,self wikiString , self wikiString , '1.1' , String cr ,self wikiString , self wikiString , self wikiString , '1.1.1'.	text := (self textString: 1 level: 1) , '1' , String cr ,(self textString: 1 level: 2) , '1.1' , String cr ,(self textString: 1 level: 3) , '1.1.1'.	tree := PRDocument new		add: (self actualClass new			add: (PRListItem new				add: (PRText content: '1');				add: (self actualClass new					add: (PRListItem new						add: (PRText content: '1.1');						add: (self actualClass new							add: (self listItemWithText: '1.1.1');							yourself);						yourself);					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRUnorderedListTest methodsFor: 'private' stamp: 'lr 12/20/2007 23:20'!textString: anObject level: anInteger	^ (super textString: anObject level: anInteger) , '* '! !!PRUnorderedListTest methodsFor: 'private' stamp: 'lr 2/7/2007 16:23'!wikiString	^ '-'! !!PRParagraphTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRParagraphTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRParagraph! !!PRParagraphTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:55'!testParseEmptyLineAtBeginning	| wiki text tree |	wiki := '' , String cr ,'Lorem ipsum dolor sit amet.'.	text := wiki.	tree := PRDocument new		add: (PREmptyParagraph new);		add: (PRParagraph new			add: (PRText content: 'Lorem ipsum dolor sit amet.');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRParagraphTest methodsFor: 'testing-parsing' stamp: 'lr 12/9/2007 09:38'!testParseOneLine	| wiki text tree |	wiki := 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Nulla quis urna.'.	text := wiki.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: wiki);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRParagraphTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 23:01'!testParseTreeEmptyLines	| wiki text tree |	wiki := 'Lorem ipsum dolor sit amet.' , String cr ,String cr ,String cr ,'Nulla mattis elementum nulla.'.	text := wiki.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: 'Lorem ipsum dolor sit amet.');			yourself);		add: (PREmptyParagraph new);		add: (PREmptyParagraph new);		add: (PRParagraph new			add: (PRText content: 'Nulla mattis elementum nulla.');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRParagraphTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:55'!testParseTwoEmptyLines	| wiki text tree |	wiki := 'Lorem ipsum dolor sit amet.' , String cr ,String cr ,String cr ,'Nulla mattis elementum nulla.'.	text := wiki.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: 'Lorem ipsum dolor sit amet.');			yourself);		add: (PREmptyParagraph new);		add: (PREmptyParagraph new);		add: (PRParagraph new			add: (PRText content: 'Nulla mattis elementum nulla.');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRPreformattedTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRPreformattedTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRPreformatted! !!PRPreformattedTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:34'!testParseBasic	| wiki text tree |	wiki := '=Line'.	text := 'Line'.	tree := PRDocument new		add: (PRPreformatted new			add: (PRText content: 'Line');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRPreformattedTest methodsFor: 'testing-parsing' stamp: 'lr 10/18/2007 19:43'!testParseEmpty	| wiki text tree |	wiki := '='.	text := ''.	tree := PRDocument new		add: (PRPreformatted new			add: (PRText content: '');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRPreformattedTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:56'!testParseMultiple	| wiki text tree |	wiki := '=line 1.1' , String cr ,'=line 1.2' , String cr ,String cr ,'=line 2.1'.	text := 'line 1.1' , String cr ,'line 1.2' , String cr ,String cr ,'line 2.1'.	tree := PRDocument new		add: (PRPreformatted new			add: (PRText content: 'line 1.1');			add: (PRText content: 'line 1.2');			yourself);		add: (PREmptyParagraph new);		add: (PRPreformatted new			add: (PRText content: 'line 2.1');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRPreformattedTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:56'!testParseSpaces	| wiki text tree |	wiki := '=   A line with 3 spaces' , String cr ,'=	A line with a tab'.	text := '   A line with 3 spaces' , String cr ,'	A line with a tab'.	tree := PRDocument new		add: (PRPreformatted new			add: (PRText content: '   A line with 3 spaces');			add: (PRText content: '	A line with a tab');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRPreformattedTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:34'!testParseSpecials	| wiki text tree |	wiki := '=|, {, }, *, *, [, ||, |{, |}, +, +'.	text := '|, {, }, *, *, [, ||, |{, |}, +, +'.	tree := PRDocument new		add: (PRPreformatted new			add: (PRText content: '|, {, }, *, *, [, ||, |{, |}, +, +');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTableCellTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRTableCellTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRTableCell! !!PRTableCellTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testAlign	self instance align: #right.	self assert: self instance align = #right! !!PRTableCellTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testBeAlignedCenter	self instance beAlignedCenter.	self assert: self instance align = #center.	self assert: self instance isAlignedCenter.	self deny: self instance isAlignedLeft.	self deny: self instance isAlignedRight! !!PRTableCellTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testBeAlignedLeft	self instance beAlignedLeft.	self assert: self instance align = #left.	self deny: self instance isAlignedCenter.	self assert: self instance isAlignedLeft.	self deny: self instance isAlignedRight! !!PRTableCellTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testBeAlignedRight	self instance beAlignedRight.	self assert: self instance align = #right.	self deny: self instance isAlignedCenter.	self deny: self instance isAlignedLeft.	self assert: self instance isAlignedRight! !!PRTableCellTest methodsFor: 'testing-comparing' stamp: 'lr 3/9/2006 11:31'!testEqualAlign	self deny: self actualClass new beAlignedRight				= self actualClass new beAlignedCenter.	self deny: self actualClass new beAlignedCenter				= self actualClass new beAlignedLeft! !!PRTableCellTest methodsFor: 'testing-accessing' stamp: 'lr 8/14/2008 08:59'!testHeading	self deny: self instance heading.	self deny: self instance isHeading.		self instance heading: true.	self assert: self instance heading.	self assert: self instance isHeading.		self instance heading: false.	self deny: self instance heading.	self deny: self instance isHeading! !!PRTableCellTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:34'!testParseAlign1	| wiki text tree |	wiki := '|{left||center|}right'.	text := 'left	center	right'.	tree := PRDocument new		add: (PRTable new			add: (PRTableRow new				add: (PRTableCell new					beAlignedLeft;					add: (PRText content: 'left');					yourself);				add: (PRTableCell new					beAlignedCenter;					add: (PRText content: 'center');					yourself);				add: (PRTableCell new					beAlignedRight;					add: (PRText content: 'right');					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTableCellTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:34'!testParseAlign2	| wiki text tree |	wiki := '|}right|none|{left|none'.	text := 'right	none	left	none'.	tree := PRDocument new		add: (PRTable new			add: (PRTableRow new				add: (PRTableCell new					beAlignedRight;					add: (PRText content: 'right');					yourself);				add: (PRTableCell new					add: (PRText content: 'none');					yourself);				add: (PRTableCell new					beAlignedLeft;					add: (PRText content: 'left');					yourself);				add: (PRTableCell new					add: (PRText content: 'none');					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTableCellTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:34'!testParseEncoding	| wiki text tree |	wiki := '|*link*|+embedded+|foo{}'.	text := 'link	embedded	foo{}'.	tree := PRDocument new		add: (PRTable new			add: (PRTableRow new				add: (PRTableCell new					add: (PRInternalLink new						reference: 'link';						yourself);					yourself);				add: (PRTableCell new					add: (PRInternalLink new						reference: 'embedded';						embedded: true;						yourself);					yourself);				add: (PRTableCell new					add: (PRText content: 'foo{}');					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTableCellTest methodsFor: 'testing-parsing' stamp: 'lr 8/14/2008 09:17'!testParseHeading1	| wiki text tree |	wiki := '|!!head|{!!left||!!center|}!!right'.	text := 'head	left	center	right'.	tree := PRDocument new		add: (PRTable new			add: (PRTableRow new				add: (PRTableCell new					beHeading;					add: (PRText content: 'head');					yourself);				add: (PRTableCell new					beHeading;					beAlignedLeft;					add: (PRText content: 'left');					yourself);				add: (PRTableCell new					beHeading;					beAlignedCenter;					add: (PRText content: 'center');					yourself);				add: (PRTableCell new					beHeading;					beAlignedRight;					add: (PRText content: 'right');					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTableCellTest methodsFor: 'testing-parsing' stamp: 'lr 8/14/2008 09:17'!testParseHeading2	| wiki1 wiki2 text tree |	wiki1 := '|!!head|!!{left|!!|center|!!}right'.	wiki2 := '|!!head|{!!left||!!center|}!!right'.	text := 'head	left	center	right'.	tree := PRDocument new		add: (PRTable new			add: (PRTableRow new				add: (PRTableCell new					beHeading;					add: (PRText content: 'head');					yourself);				add: (PRTableCell new					beHeading;					beAlignedLeft;					add: (PRText content: 'left');					yourself);				add: (PRTableCell new					beHeading;					beAlignedCenter;					add: (PRText content: 'center');					yourself);				add: (PRTableCell new					beHeading;					beAlignedRight;					add: (PRText content: 'right');					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki1 equalsTree: tree.	self assertTree: tree equalsWiki: wiki2.	self assertTree: tree equalsText: text! !!PRTableRowTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRTableRowTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRTableRow! !!PRTableRowTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testCount	self instance add: PRTableCell new.	self assert: self instance columnCount = 1.	self instance add: PRTableCell new.	self assert: self instance columnCount = 2! !!PRTableTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRTableTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRTable! !!PRTableTest methodsFor: 'accessing' stamp: 'lr 12/21/2009 16:56'!expectedFailures	^ #(testParseWithPreformattedAndLinkWithParameters)! !!PRTableTest methodsFor: 'testing-accessing' stamp: 'lr 3/21/2006 18:43'!testCount	self instance add: (PRTableRow new add: PRTableCell new; yourself).	self assert: self instance rowCount = 1; assert: self instance columnCount = 1.	self instance add: (PRTableRow new add: PRTableCell new; add: PRTableCell new; yourself).	self assert: self instance rowCount = 2; assert: self instance columnCount = 2.	self instance add: (PRTableRow new add: PRTableCell new; yourself).	self assert: self instance rowCount = 3; assert: self instance columnCount = 2! !!PRTableTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:34'!testParseBasic	| wiki text tree |	wiki := '|cell'.	text := 'cell'.	tree := PRDocument new		add: (PRTable new			add: (PRTableRow new				add: (PRTableCell new					add: (PRText content: 'cell');					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTableTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:56'!testParseSquare	| wiki text tree |	wiki := '|a11|a12' , String cr ,'|a21|a22'.	text := 'a11	a12' , String cr ,'a21	a22'.	tree := PRDocument new		add: (PRTable new			add: (PRTableRow new				add: (PRTableCell new					add: (PRText content: 'a11');					yourself);				add: (PRTableCell new					add: (PRText content: 'a12');					yourself);				yourself);			add: (PRTableRow new				add: (PRTableCell new					add: (PRText content: 'a21');					yourself);				add: (PRTableCell new					add: (PRText content: 'a22');					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTableTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:57'!testParseTriangle	| wiki text tree |	wiki := '|a11' , String cr ,'|a21|a22' , String cr ,'|a31|a32|a33'.	text := 'a11' , String cr ,'a21	a22' , String cr ,'a31	a32	a33'.	tree := PRDocument new		add: (PRTable new			add: (PRTableRow new				add: (PRTableCell new					add: (PRText content: 'a11');					yourself);				yourself);			add: (PRTableRow new				add: (PRTableCell new					add: (PRText content: 'a21');					yourself);				add: (PRTableCell new					add: (PRText content: 'a22');					yourself);				yourself);			add: (PRTableRow new				add: (PRTableCell new					add: (PRText content: 'a31');					yourself);				add: (PRTableCell new					add: (PRText content: 'a32');					yourself);				add: (PRTableCell new					add: (PRText content: 'a33');					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTableTest methodsFor: 'testing-parsing' stamp: 'damiencassou 7/23/2009 16:35'!testParseWithPreformattedAndLinkWithParameters	| wiki tree |	wiki := '|==\+link\|a\+==|'.	tree := PRDocument new		add: (PRTable new			add: (PRTableRow new				add: (PRTableCell new					add: (PRMonospaceFormat new						add: (PRText content: '+link|a+');						yourself);					yourself);				add: (PRTableCell new					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.! !!PRDocumentItemTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRDocumentItemTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRDocumentItem! !!PRDocumentItemTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!actualInstance	^ self actualClass new! !!PRDocumentItemTest methodsFor: 'utilities' stamp: 'lr 12/20/2007 20:10'!assertTree: aDocument equalsText: aString	self		assert: (PRTextWriter write: aDocument) = aString		description: aString resumable: true! !!PRDocumentItemTest methodsFor: 'utilities' stamp: 'lr 12/20/2007 15:03'!assertTree: aDocument equalsWiki: aString	"Asswert that traversing aDocument using the wiki writer results in aString."	self		assert: (PRWikiWriter write: aDocument) = aString		description: aString resumable: true! !!PRDocumentItemTest methodsFor: 'utilities' stamp: 'lr 8/27/2007 10:39'!assertWiki: aString equalsTree: aDocument	"Assert that parsing aString results in aDocument."	self		assert: (PRDocumentParser parse: aString) = aDocument		description: aString resumable: true! !!PRDocumentItemTest methodsFor: 'private' stamp: 'lr 4/5/2007 14:32'!barInstance	^ PRText content: 'bar'! !!PRDocumentItemTest methodsFor: 'private' stamp: 'lr 4/5/2007 14:32'!fooInstance	^ PRText content: 'foo'! !!PRDocumentItemTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!foobarInstances	^ Array with: self fooInstance with: self barInstance! !!PRDocumentItemTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!instance	^ instance! !!PRDocumentItemTest methodsFor: 'running' stamp: 'lr 3/9/2006 11:31'!setUp	super setUp.	instance := self actualInstance! !!PRDocumentItemTest methodsFor: 'testing-copying' stamp: 'lr 3/9/2006 11:31'!testCopy	self assert: self instance = self instance copy.	self assert: self instance hash = self instance copy hash.	self deny: self instance == self instance copy! !!PRDocumentItemTest methodsFor: 'testing-comparing' stamp: 'lr 3/9/2006 11:31'!testEqueal	self assert: self instance = self instance.	self assert: self instance = self actualInstance! !!PRDocumentItemTest methodsFor: 'testing-comparing' stamp: 'lr 3/9/2006 11:31'!testEquealNil	self deny: self instance isNil! !!PRDocumentItemTest methodsFor: 'testing-comparing' stamp: 'lr 3/9/2006 11:31'!testEquealOther	self deny: self instance = self fooInstance.	self deny: self instance = self barInstance! !!PRDocumentItemTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:31'!testHasChildren	self deny: self instance hasChildren! !!PRDocumentItemTest methodsFor: 'testing-comparing' stamp: 'lr 3/9/2006 11:31'!testHash	self assert: self instance hash = self instance copy hash! !!PRDocumentItemTest methodsFor: 'testing' stamp: 'lr 3/30/2009 21:36'!testIsLink	self deny: self instance isLink! !!PRDocumentItemTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testOwner	self assert: self instance owner isNil! !!PRDocumentItemTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testText	self assert: self instance text isString! !!PRHorizontalRuleTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRHorizontalRuleTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRHorizontalRule! !!PRHorizontalRuleTest methodsFor: 'testing-parsing' stamp: 'lr 2/7/2007 16:42'!testParseBasic	| wiki text tree |	wiki := '_'.	text := self textString.	tree := PRDocument new		add: PRHorizontalRule new;		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHorizontalRuleTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 15:59'!testParseLink	| wiki1 wiki2 text tree |	wiki1 := '_ *link*'.	wiki2 := '\_ *link*'.	text := '_ link'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '_ ');			add: (PRInternalLink new				reference: 'link';				yourself);			yourself);		yourself.	self assertWiki: wiki1 equalsTree: tree.	self assertWiki: wiki2 equalsTree: tree.	self assertTree: tree equalsWiki: wiki2.	self assertTree: tree equalsText: text! !!PRHorizontalRuleTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:57'!testParseMultiple	| wiki text tree |	wiki := '_' , String cr ,'_' , String cr ,String cr ,'_'.	text := self textString , String cr ,self textString , String cr ,String cr ,self textString.	tree := PRDocument new		add: PRHorizontalRule new;		add: PRHorizontalRule new;		add: PREmptyParagraph new;		add: PRHorizontalRule new;		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHorizontalRuleTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:33'!testParseParagraph	| wiki text tree |	wiki := '\_ is parsed as paragraph'.	text := '_ is parsed as paragraph'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '_ is parsed as paragraph');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHorizontalRuleTest methodsFor: 'testing-parsing' stamp: 'nfr 9/26/2007 09:55'!testParseSpaces	| wiki text tree |	wiki := '_       '.	text := self textString.	tree := PRDocument new		add: PRHorizontalRule new;		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: '_'.	self assertTree: tree equalsText: text! !!PRHorizontalRuleTest methodsFor: 'private' stamp: 'lr 2/7/2007 16:42'!textString	^ String new: 40 withAll: $-! !!PRLineBreakTest class methodsFor: 'testing' stamp: 'lr 12/9/2007 09:24'!isAbstract	^ false! !!PRLineBreakTest methodsFor: 'private' stamp: 'lr 12/9/2007 09:24'!actualClass	^ PRLineBreak! !!PRLineBreakTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:57'!testParseOneEmptyLine	| wiki text tree |	wiki := 'Lorem ipsum dolor sit amet.' , String cr ,String cr ,'Nulla quis urna.'.	text := wiki.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: 'Lorem ipsum dolor sit amet.');			yourself);		add: (PREmptyParagraph new);		add: (PRParagraph new			add: (PRText content: 'Nulla quis urna.')			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLineBreakTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:58'!testParseTreeLines	| wiki text tree |	wiki := 'Lorem ipsum dolor sit amet.' , String cr ,'Nulla quis urna.' , String cr ,'Vestibulum turpis.'.	text := wiki.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: 'Lorem ipsum dolor sit amet.');			add: (PRLineBreak new);			add: (PRText content: 'Nulla quis urna.');			add: (PRLineBreak new);			add: (PRText content: 'Vestibulum turpis.');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLineBreakTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:58'!testParseTwoEmptyLines	| wiki text tree |	wiki := 'Lorem ipsum dolor sit amet.' , String cr ,String cr ,String cr , 'Nulla quis urna.'.	text := wiki.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: 'Lorem ipsum dolor sit amet.');			yourself);		add: (PREmptyParagraph new);		add: (PREmptyParagraph new);		add: (PRParagraph new			add: (PRText content: 'Nulla quis urna.')			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: text.	self assertTree: tree equalsText: text! !!PRLineBreakTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:58'!testParseTwoLines	| wiki text tree |	wiki := 'Lorem ipsum dolor sit amet.' , String cr ,'Nulla quis urna.'.	text := wiki.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: 'Lorem ipsum dolor sit amet.');			add: (PRLineBreak new);			add: (PRText content: 'Nulla quis urna.')			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTextTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRTextTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRText! !!PRTextTest methodsFor: 'testing-instantiation' stamp: 'lr 4/5/2007 14:41'!testContent	instance := self actualClass content: 'zork'.	self assert: self instance text = 'zork'! !!PRTextTest methodsFor: 'testing-comparing' stamp: 'lr 4/5/2007 14:43'!testEqualText	self deny: (self actualClass content: 'foo') = (self actualClass content: 'bar')! !!PRTextTest methodsFor: 'testing-parsing' stamp: 'lr 9/4/2009 17:04'!testEscapeCpp	| wiki tree |	wiki := 'Text: \+\+'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: 'Text: ++');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRTextTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:59'!testEscapeFirst	| wiki tree |	wiki := '\* text' , String cr ,'\+ text' , String cr ,'\= text' , String cr ,'\@ text' , String cr ,'\!! text' , String cr ,'\| text' , String cr ,'\# text' , String cr ,'\- text'.	tree := (PRDocument new)		add: (PRParagraph new			add: (PRText content: '* text');			add: (PRLineBreak new);			add: (PRText content: '+ text');			add: (PRLineBreak new);			add: (PRText content: '= text');			add: (PRLineBreak new);			add: (PRText content: '@ text');			add: (PRLineBreak new);			add: (PRText content: '!! text');			add: (PRLineBreak new);			add: (PRText content: '| text');			add: (PRLineBreak new);			add: (PRText content: '# text');			add: (PRLineBreak new);			add: (PRText content: '- text');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRTextTest methodsFor: 'testing-parsing' stamp: 'lr 2/3/2008 22:59'!testEscapeStrange	| wiki tree |	wiki := '< text' , String cr ,'> text'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '< text');			add: (PRLineBreak new);			add: (PRText content: '> text');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRTextTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:37'!testEscapeText	| wiki tree |	wiki := 'Text: \*\+'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: 'Text: *+');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRTextTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:39'!testEscapeWiki	| wiki tree |	wiki := 'Wiki: =, |, !!, #, {, }, |{, ||, |}, [, ] and -'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: 'Wiki: =, |, !!, #, {, }, |{, ||, |}, [, ] and -');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRTextTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:39'!testParseBasic	| wiki tree |	wiki := 'abcdefghijklmnopqrstuvwxyz... ABCDEFGHIJKLMNOPQRSTUVWXYZ... 0123456789...'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: 'abcdefghijklmnopqrstuvwxyz... ABCDEFGHIJKLMNOPQRSTUVWXYZ... 0123456789...');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRTextTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:40'!testParseHtml	| wiki tree |	wiki := '<strong>strong <emph>strong, emph</emph></strong>'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '<strong>strong <emph>strong, emph</emph></strong>');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRTextTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:40'!testParseLatex	| wiki text tree |	wiki := '\\begin{foo}[bar]$zork$\\end{foo}'.	text := '\begin{foo}[bar]$zork$\end{foo}'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '\begin{foo}[bar]$zork$\end{foo}');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTextTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:40'!testParseSpecial	| wiki tree |	wiki := '????????????¬å???????????????¬ú??¬ü¬¬°¬¢¬£¬§¬·?¬ß?¬©¬¬´¬¨?¬Æ¬Ø¬¬±???¬µ¬¬??¬¬ª???¬ø¦Ä¦Å¦Ç¦É¦Ñ¦Ö¦Ü¦á¦à¦â¦ä¦ã¦å¦ç¦é¦è?¦ë¦í¦ì¦î¦ï¦ñ?¦ò¦ô¦ö¦õ¦ú??¦ü¦¦°¦¢¦£¦§¦·¦¶¦ß¦®¦©¦¦´¦¨¦¦Æ¦Ø?¦±¦¦¦¥¦µ¦¦¦¦¦¦ª¦º??'.	tree := (PRDocument new)				add: ((PRParagraph new)							add: (PRText										content: '????????????¬å???????????????¬ú??¬ü¬¬°¬¢¬£¬§¬·?¬ß?¬©¬¬´¬¨?¬Æ¬Ø¬¬±???¬µ¬¬??¬¬ª???¬ø¦Ä¦Å¦Ç¦É¦Ñ¦Ö¦Ü¦á¦à¦â¦ä¦ã¦å¦ç¦é¦è?¦ë¦í¦ì¦î¦ï¦ñ?¦ò¦ô¦ö¦õ¦ú??¦ü¦¦°¦¢¦£¦§¦·¦¶¦ß¦®¦©¦¦´¦¨¦¦Æ¦Ø?¦±¦¦¦¥¦µ¦¦¦¦¦¦ª¦º??');							yourself);				yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRTextTest methodsFor: 'testing-parsing' stamp: 'lr 4/5/2007 14:40'!testParseWiki	| wiki tree |	wiki := ' !!_#-|=]@:<>\*'.	tree := (PRDocument new)				add: ((PRParagraph new)							add: (PRText content: ' !!_#-|=]@:<>*');							yourself);				yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRTextTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testText	self instance text: 'zork'.	self assert: self instance text = 'zork'! !!PRKernelTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRKernelTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRKernel! !!PRKernelTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!instance	^ self kernel! !!PRKernelTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!kernel	^ kernel ifNil: [ kernel := self kernelInstance ]! !!PRKernelTest methodsFor: 'testing' stamp: 'lr 1/17/2007 10:44'!testInitialState	self deny: self kernel name isNil.	self deny: self kernel root isNil.	self deny: self kernel persistency isNil! !!PRKernelTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testName	self kernel name: 'kernel'.	self assert: self kernel name = 'kernel'! !!PRKernelTest methodsFor: 'testing-accessing' stamp: 'lr 2/18/2009 14:43'!testPersistency	| persistency1 persistency2 |	self kernel persistency: (persistency1 := PRHistoryPersistency new).	self assert: self kernel persistency = persistency1.	self assert: self kernel = persistency1 kernel.	self kernel persistency: (persistency2 := PRNullPersistency new).	self assert: persistency1 kernel isNil.	self assert: self kernel persistency = persistency2.	self assert: self kernel = persistency2 kernel.			self kernel persistency: nil.	self assert: persistency2 kernel isNil.	self assert: self kernel persistency kernel = self kernel! !!PRKernelTest methodsFor: 'testing-accessing' stamp: 'lr 3/9/2006 11:31'!testRoot	| structure |	self kernel root: (structure := PRPage new).	self assert: self kernel root = structure! !!PRObjectTest class methodsFor: 'building' stamp: 'dkh 04/28/2008 12:04'!buildTestClassFor: aClass	" self buildTestClassFor: PRObject "	| thisName thisClass thisCategory parentClass |	thisName := (aClass name , 'Test') asSymbol.	(thisName beginsWith: 'PR')		ifFalse: [ ^ self ].	thisClass := MACompatibility classNamed: thisName.	thisCategory := 'Pier-Tests-' , (aClass category copyAfterLast: $-).	parentClass := self = thisClass		ifTrue: [ self superclass ]		ifFalse: [ MACompatibility classNamed: (aClass superclass name , 'Test') asSymbol ].	thisClass := parentClass		subclass: thisName		instanceVariableNames: (thisClass isNil			ifFalse: [ thisClass instanceVariablesString ]			ifTrue: [ String new ])			classVariableNames: ''			poolDictionaries: ''			category: thisCategory.	thisClass		compile: 'actualClass	^ ' , aClass name		classified: #private.	thisClass class		compile: 'isAbstract	^ ' , aClass isAbstract asString		classified: #testing.	aClass subclassesDo: [ :each | self buildTestClassFor: each ]! !!PRObjectTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRObjectTest class methodsFor: 'accessing' stamp: 'lr 4/12/2009 00:26'!packageNamesUnderTest	^ #('Pier-Model')! !!PRObjectTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!shouldInheritSelectors	^ true! !!PRObjectTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRObject! !!PRObjectTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!contextInstance	^ PRContext kernel: self kernelInstance! !!PRObjectTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!instance	self subclassResponsibility! !!PRObjectTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!kernelInstance	^ PRKernel new		name: 'test';		root: self rootInstance;		persistency: self persistencyInstance;		yourself! !!PRObjectTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!persistencyInstance	^ PRNullPersistency new! !!PRObjectTest methodsFor: 'private' stamp: 'lr 1/15/2007 21:34'!rootInstance	^ (PRPage named: 'root')		addChild: ((PRPage named: 'folder')			addChild: (PRPage named: 'child');			addChild: (self structureInstance);			yourself);		yourself! !!PRObjectTest methodsFor: 'private' stamp: 'lr 1/15/2007 21:34'!structureInstance	^ PRPage named: 'structure'! !!PRObjectTest methodsFor: 'testing-copying' stamp: 'lr 6/22/2008 18:24'!testCopyProperties	self deny: self instance properties == self instance copy properties! !!PRObjectTest methodsFor: 'testing-properties' stamp: 'lr 3/9/2006 11:31'!testProperties	self assert: self instance properties notNil.	self instance instVarNamed: 'properties' put: nil.	self instance propertyAt: #foo put: #bar.	self instance instVarNamed: 'properties' put: nil.	self instance propertyAt: #foo ifAbsent: [ nil ].	self instance instVarNamed: 'properties' put: nil.	self instance propertyAt: #foo ifAbsentPut: [ #bar ].	self instance instVarNamed: 'properties' put: nil.	self instance hasProperty: #foo.	self instance instVarNamed: 'properties' put: nil! !!PRObjectTest methodsFor: 'testing-properties' stamp: 'lr 3/5/2007 14:07'!testPropertiesAt	self assert: (self instance propertyAt: #foo put: 'bar') = 'bar'.	self assert: (self instance propertyAt: #foo) = 'bar'.	self should: [ self instance propertyAt: #bar ] raise: MAPropertyError! !!PRObjectTest methodsFor: 'testing-properties' stamp: 'lr 3/9/2006 11:31'!testPropertiesAtIfAbsent	self assert: (self instance propertyAt: #foo put: 'bar') = 'bar'.	self assert: (self instance propertyAt: #foo ifAbsent: [ 'baz' ]) = 'bar'.	self assert: (self instance propertyAt: #bar ifAbsent: [ 'baz' ]) = 'baz'! !!PRObjectTest methodsFor: 'testing-properties' stamp: 'lr 3/9/2006 11:31'!testPropertiesAtIfAbsentPut	self assert: (self instance propertyAt: #foo put: 'bar') = 'bar'.	self assert: (self instance propertyAt: #foo ifAbsentPut: [ 'baz' ]) = 'bar'.	self assert: (self instance propertyAt: #foo) = 'bar'.	self assert: (self instance propertyAt: #bar ifAbsentPut: [ 'baz' ]) = 'baz'.	self assert: (self instance propertyAt: #bar) = 'baz'! !!PRObjectTest methodsFor: 'testing-properties' stamp: 'lr 3/9/2006 11:31'!testPropertiesAtPut	self instance propertyAt: #foo put: 'bar'.	self assert: (self instance propertyAt: #foo) = 'bar'.	self instance propertyAt: #foo put: 'baz'.	self assert: (self instance propertyAt: #foo) = 'baz'! !!PRObjectTest methodsFor: 'testing-properties' stamp: 'lr 3/9/2006 11:31'!testPropertiesHas	self deny: (self instance hasProperty: #foo).	self instance propertyAt: #foo put: 'bar'.	self assert: (self instance hasProperty: #foo).	self deny: (self instance hasProperty: #bar)! !!PRObjectTest methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!testSanity	"If this test case fails, there is something wrong with the setup of the test-case."	self		assert: self actualClass isAbstract not		description: 'Unable to test abstract class.'.	self		assert: self instance class = self actualClass		description: 'Invalid test instance.'! !!PRHistoryPersistencyTest class methodsFor: 'testing' stamp: 'lr 9/23/2008 08:20'!isAbstract	^ false! !!PRHistoryPersistencyTest methodsFor: 'private' stamp: 'lr 1/29/2008 08:17'!actualClass	^ PRHistoryPersistency! !!PRHistoryPersistencyTest methodsFor: 'testing' stamp: 'lr 5/2/2009 11:31'!testHistory	| command |	command := self editTitle: 'Foo'.	self assert: self persistency history isEmpty.	self 		shouldnt: [ self persistency execute: command ]		raise: Error.	self assert: self persistency history size = 1.	self deny: self persistency history first = command context.	self assert: self persistency history first structure = command context structure! !!PRHistoryPersistencyTest methodsFor: 'testing' stamp: 'lr 5/2/2009 11:33'!testMaxHistory	| command |	self persistency maxHistory: 5.	10 timesRepeat: [ 		self persistency 			execute: (command := self editTitle: 'Foo').		self assert: self persistency history size <= 5 ].	self assert: self persistency history size = 5! !!PRHistoryPersistencyTest methodsFor: 'testing' stamp: 'lr 5/2/2009 11:33'!testReplacement	| command1 command2 |	self persistency		execute: (command1 := self editTitle: '1');		execute: (command2 := self editTitle: '2').	self assert: self persistency history size = 2.	self deny: self persistency history first command = command1.	self assert: self persistency history first command class = command1 class.	self deny: self persistency history second command = command2.	self assert: self persistency history second command class = command2 class.		self kernel persistency: self persistencyInstance.	self assert: self persistency history size = 2.	self deny: self persistency history first command = command1.	self assert: self persistency history first command class = command1 class.	self deny: self persistency history second command = command2.	self assert: self persistency history second command class = command2 class.		self kernel persistency: nil.	self assert: self persistency history isEmpty.		self kernel persistency: self persistencyInstance.	self assert: self persistency history isEmpty! !!PRNullPersistencyTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRNullPersistencyTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRNullPersistency! !!PRPersistencyTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRPersistencyTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRPersistency! !!PRPersistencyTest methodsFor: 'running' stamp: 'lr 9/23/2008 08:31'!editTitle: aString	| context |	context := PRContext 		kernel: self kernel 		structure: self kernel root		command: (PREditCommand new			write: aString			using: PRStructure descriptionTitle).	^ context command! !!PRPersistencyTest methodsFor: 'accessing' stamp: 'lr 1/17/2007 10:45'!instance	^ self persistency! !!PRPersistencyTest methodsFor: 'accessing' stamp: 'lr 1/17/2007 10:55'!kernel	^ kernel ifNil: [ kernel := self kernelInstance ]! !!PRPersistencyTest methodsFor: 'accessing' stamp: 'lr 1/17/2007 10:51'!mutex	^ self persistency mutex! !!PRPersistencyTest methodsFor: 'accessing' stamp: 'lr 1/17/2007 10:51'!persistency	^ self kernel persistency! !!PRPersistencyTest methodsFor: 'private' stamp: 'lr 1/17/2007 10:55'!persistencyInstance	^ self actualClass new! !!PRPersistencyTest methodsFor: 'running' stamp: 'lr 1/17/2007 10:51'!tearDown	self kernel persistency: PRNullPersistency new! !!PRPersistencyTest methodsFor: 'testing-smoke' stamp: 'lr 9/23/2008 08:24'!testConveniance	self assert: (self persistency history) isCollection.	self assert: (self persistency historyFor: self kernel root) isCollection! !!PRPersistencyTest methodsFor: 'testing-smoke' stamp: 'lr 9/23/2008 08:25'!testEnumeration	self persistency do: [ :each | ].	self persistency do: [ :each | ] for: self kernel root.		self persistency reverseDo: [ :each | ].	self persistency reverseDo: [ :each | ] for: self kernel root! !!PRPersistencyTest methodsFor: 'testing-mutex' stamp: 'lr 3/5/2007 14:04'!testMutexError	"An error inside the critical section should properly unlock it for others to enter."	| marker |	marker := nil.	self		should: [ self mutex critical: [ 1 / 0 ] ]		raise: ZeroDivide.	self mutex critical: [ marker := 1 ].	self assert: marker = 1! !!PRPersistencyTest methodsFor: 'testing-mutex' stamp: 'lr 1/17/2007 10:52'!testMutexSimple	| marker |	marker := nil.	self mutex critical: [ marker := 1 ].	self assert: marker = 1! !!PRPersistencyTest methodsFor: 'testing' stamp: 'lr 1/17/2007 11:22'!testSetup	self assert: self persistency kernel = self kernel.	self assert: self kernel persistency = self persistency! !!PRUtilitiesTests methodsFor: 'accessing' stamp: 'lr 4/24/2008 08:42'!number1	^ '1!!'! !!PRUtilitiesTests methodsFor: 'accessing' stamp: 'lr 4/24/2008 08:42'!number2	^ '!!2'! !!PRUtilitiesTests methodsFor: 'accessing' stamp: 'lr 4/24/2008 08:46'!number3	^ '3'! !!PRUtilitiesTests methodsFor: 'testing-escaper' stamp: 'lr 10/30/2006 19:49'!testEnsureEscape	| visitor tag |	visitor := PRVisitor new.	tag := nil.	self assert: (visitor withEscaper: [		[ true ]			ensure: [ tag := 1 ] ]).	self assert: tag = 1.	self assert: (visitor withEscaper: [		[ visitor escape: true ]			ensure: [ tag := 2 ] ]).	self assert: tag = 2! !!PRUtilitiesTests methodsFor: 'testing-escaper' stamp: 'lr 2/12/2007 19:07'!testEscaper	| visitor |	visitor := PRVisitor new.	self assert: (visitor withEscaper: [ true ]).	self deny: (visitor withEscaper: [ false ]).	self assert: (visitor withEscaper: [ visitor escape: true. false ]).	self deny: (visitor withEscaper: [ visitor escape: false. true ])! !!PRUtilitiesTests methodsFor: 'testing-escaper' stamp: 'lr 10/30/2006 19:49'!testHasEscaper	| visitor |	visitor := PRVisitor new.	self deny: visitor hasEscaper.	self assert: (visitor withEscaper: [ visitor hasEscaper ])! !!PRUtilitiesTests methodsFor: 'testing-expander' stamp: 'lr 4/24/2008 08:47'!testMacroExpand	| expander |	expander := PRMacroExpander new.	expander		on: $0 do: #(selector);		on: $1 do: #(number1);		on: $2 do: #(number2);		on: $3 do: #(yourself number3).	self assert: (expander expand: '' with: self) = ''.	self assert: (expander expand: 'xyz' with: self) = 'xyz'.	self assert: (expander expand: '%0' with: self) = 'testMacroExpand'.	self assert: (expander expand: '%1' with: self) = '1!!'.	self assert: (expander expand: '%2' with: self) = '!!2'.	self assert: (expander expand: '%3' with: self) = '3'.	self assert: (expander expand: '%1xy' with: self) = '1!!xy'.	self assert: (expander expand: 'x%1y' with: self) = 'x1!!y'.	self assert: (expander expand: 'xy%1' with: self) = 'xy1!!'.	self assert: (expander expand: '%2xy' with: self) = '!!2xy'.	self assert: (expander expand: 'x%2y' with: self) = 'x!!2y'.	self assert: (expander expand: 'xy%2' with: self) = 'xy!!2'.	self assert: (expander expand: '%1%2' with: self) = '1!!!!2'.	self assert: (expander expand: 'x%1%2' with: self) = 'x1!!!!2'.	self assert: (expander expand: 'x%1y%2' with: self) = 'x1!!y!!2'.	self assert: (expander expand: 'x%1y%2z' with: self) = 'x1!!y!!2z'.	self assert: (expander expand: '%%' with: self) = '%'.	self assert: (expander expand: '%3' with: self) = '3'! !!PRUtilitiesTests methodsFor: 'testing-expander' stamp: 'lr 4/24/2008 08:34'!testMacroInitialized	| expander |	expander := PRMacroExpander new.	self assert: expander character = $%.	self assert: expander table isEmpty! !!PRVisitorTests methodsFor: 'running' stamp: 'lr 2/12/2007 19:07'!setUp	root := PRPage named: 'root'.	folder := PRPage named: 'folder'.	child1 := PRPage named: 'child1'.	child2 := PRPage named: 'child2'.	root addChild: folder.	folder addChild: child1.	folder addChild: child2! !!PRVisitorTests methodsFor: 'testing-incoming' stamp: 'lr 1/19/2007 13:59'!testIncomingReferencesMultiple	| matched |	root contents: '*folder*'.	folder contents: '*child1* *child2*'.	child1 contents: '*/*'.	child2 contents: ''.	matched := root incomingReferences		toAll: (Array with: root with: folder);		collect: [ :each | each owner ].	self assert: (matched collect: [ :each | each name ]) = #( 'root' 'child1' ).	matched := folder incomingReferences		toAll: (Array with: root with: folder);		collect: [ :each | each owner ].	self assert: (matched collect: [ :each | each name ]) = #( 'child1' ).	matched := folder incomingReferences		toAll: (Array with: child1 with: child2);		collect: [ :each | each owner ].	self assert: (matched collect: [ :each | each name ]) = #( 'folder' 'folder' )! !!PRVisitorTests methodsFor: 'testing-incoming' stamp: 'lr 2/12/2007 19:07'!testIncomingReferencesSingle	| matched |	root contents: '*folder*'.	folder contents: '*child1* *child2*'.	child1 contents: '*/*'.	child2 contents: ''.	matched := root incomingReferences		to: root;		collect: [ :each | each owner ].	self assert: (matched collect: [ :each | each name ]) = #( 'child1' ).	matched := root incomingReferences		to: folder;		collect: [ :each | each owner ].	self assert: (matched collect: [ :each | each name ]) = #( 'root' ).	matched := root incomingReferences		to: child1;		collect: [ :each | each owner ].	self assert: (matched collect: [ :each | each name ]) = #( 'folder' ).	matched := root incomingReferences		to: child2;		collect: [ :each | each owner ].	self assert: (matched collect: [ :each | each name ]) = #( 'folder' )! !!PRVisitorTests methodsFor: 'testing-outgoing' stamp: 'lr 2/12/2007 19:07'!testOutgoingReferencesContinue	| matched |	root contents: '+folder+'.	folder contents: '+child1+ +child2+'.	child1 contents: '+/+'.	child2 contents: ''.	matched := root outgoingReferences		continue: [ :each | false ];		collect: [ :each | each target ].	self assert: (matched collect: [ :each | each name ]) = #( 'folder' ).	matched := root outgoingReferences		continue: [ :each | each owner = root ];		collect: [ :each | each target ].	self assert: (matched collect: [ :each | each name ]) = #( 'folder' 'child1' 'child2' ).	matched := root outgoingReferences		continue: [ :each | each target ~= child1 ];		collect: [ :each | each target ].	self assert: (matched collect: [ :each | each name ]) = #( 'folder' 'child1' 'child2' )! !!PRVisitorTests methodsFor: 'testing-outgoing' stamp: 'lr 2/12/2007 19:07'!testOutgoingReferencesEmbedded	| matched |	root contents: '+folder+'.	folder contents: '+child1+ +child2+'.	child1 contents: '+/+'.	child2 contents: ''.	matched := root outgoingReferences collect: [ :each | each target ].	self assert: (matched collect: [ :each | each name ]) = #( 'folder' 'child1' 'root' 'child2' ).	matched := folder outgoingReferences collect: [ :each | each target ].	self assert: (matched collect: [ :each | each name ]) = #( 'child1' 'root' 'folder' 'child2' ).	matched := child1 outgoingReferences collect: [ :each | each target ].	self assert: (matched collect: [ :each | each name ]) = #( 'root' 'folder' 'child1' 'child2' ).	matched := child2 outgoingReferences collect: [ :each | each target ].	self assert: (matched collect: [ :each | each name ]) = #( )! !!PRVisitorTests methodsFor: 'testing-outgoing' stamp: 'lr 2/12/2007 19:07'!testOutgoingReferencesStandard	| matched |	root contents: '*folder*'.	folder contents: '*child1* *child2*'.	child1 contents: '*/*'.	child2 contents: ''.	matched := root outgoingReferences collect: [ :each | each target ].	self assert: (matched collect: [ :each | each name ]) = #( 'folder' ).	matched := folder outgoingReferences collect: [ :each | each target ].	self assert: (matched collect: [ :each | each name ]) = #( 'child1' 'child2' ).	matched := child1 outgoingReferences collect: [ :each | each target ].	self assert: (matched collect: [ :each | each name ]) = #( 'root' ).	matched := child2 outgoingReferences collect: [ :each | each target ].	self assert: (matched collect: [ :each | each name ]) = #( )! !!PRVisitorTests methodsFor: 'testing-search' stamp: 'lr 2/12/2007 19:07'!testSearchCaseSensitive	| match |	root contents: 'struct 1 foo'.	folder contents: 'struct 2 bar'.	child1 contents: 'struct 3 zork'.	child2 contents: 'struct 4 plonk'.	match := root fullTextSearch subString: 'Bar'; caseSensitive: true.	self assert: (match collect: [ :each | each name ]) = #( ).	match := root fullTextSearch subString: 'bar'; caseSensitive: true.	self assert: (match collect: [ :each | each name ]) = #( 'folder' ).	match := root fullTextSearch subString: 'Bar'; caseSensitive: false.	self assert: (match collect: [ :each | each name ]) = #( 'folder' ).	match := root fullTextSearch subString: 'bar'; caseSensitive: false.	self assert: (match collect: [ :each | each name ]) = #( 'folder' ).	match := root fullTextSearch subString: 'Bar'.	self assert: (match collect: [ :each | each name ]) = #( 'folder' ).	match := root fullTextSearch subString: 'bar'.	self assert: (match collect: [ :each | each name ]) = #( 'folder' )! !!PRVisitorTests methodsFor: 'testing-search' stamp: 'lr 2/12/2007 19:07'!testSearchContents	| match |	root contents: 'struct 1 foo'.	folder contents: 'struct 2 bar'.	child1 contents: 'struct 3 zork'.	child2 contents: 'struct 4 plonk'.	match := root fullTextSearch subString: 'foo'.	self assert: (match collect: [ :each | each name ]) = #( 'root' ).	match := root fullTextSearch subString: 'bar'.	self assert: (match collect: [ :each | each name ]) = #( 'folder' ).	match := root fullTextSearch subString: 'zork'.	self assert: (match collect: [ :each | each name ]) = #( 'child1' ).	match := root fullTextSearch subString: 'plonk'.	self assert: (match collect: [ :each | each name ]) = #( 'child2' )! !!PRVisitorTests methodsFor: 'testing-search' stamp: 'lr 2/12/2007 19:07'!testSearchMultiple	| match |	root contents: 'struct 1 foo'.	folder contents: 'struct 2 bar'.	child1 contents: 'struct 3 zork'.	child2 contents: 'struct 4 plonk'.	match := root fullTextSearch subString: '1'.	self assert: (match collect: [ :each | each name ]) = #( 'root' 'child1' ).	match := root fullTextSearch subString: '2'.	self assert: (match collect: [ :each | each name ]) = #( 'folder' 'child2' )! !!PRVisitorTests methodsFor: 'testing-search' stamp: 'lr 2/12/2007 19:07'!testSearchNonRoot	| match |	root contents: 'struct 1 foo'.	folder contents: 'struct 2 bar'.	child1 contents: 'struct 3 zork'.	child2 contents: 'struct 4 plonk'.	match := root fullTextSearch subString: 'plonk'.	self assert: (match collect: [ :each | each name ]) = #( 'child2'  ).	match := folder fullTextSearch subString: 'plonk'.	self assert: (match collect: [ :each | each name ]) = #( 'child2'  ).	match := child1 fullTextSearch subString: 'plonk'.	self assert: (match collect: [ :each | each name ]) = #(  ).	match := child2 fullTextSearch subString: 'plonk'.	self assert: (match collect: [ :each | each name ]) = #( 'child2' )! !!PRVisitorTests methodsFor: 'testing-search' stamp: 'lr 2/12/2007 19:07'!testSearchTitle	| match |	root contents: 'struct 1 foo'.	folder contents: 'struct 2 bar'.	child1 contents: 'struct 3 zork'.	child2 contents: 'struct 4 plonk'.	match := root fullTextSearch subString: 'root'.	self assert: (match collect: [ :each | each name ]) = #( 'root' ).	match := root fullTextSearch subString: 'folder'.	self assert: (match collect: [ :each | each name ]) = #( 'folder' ).	match := root fullTextSearch subString: 'child1'.	self assert: (match collect: [ :each | each name ]) = #( 'child1' ).	match := root fullTextSearch subString: 'child2'.	self assert: (match collect: [ :each | each name ]) = #( 'child2' )! !!PRStructureDescriptionTest class methodsFor: 'testing' stamp: 'lr 11/2/2007 13:55'!isAbstract	^ false! !!PRStructureDescriptionTest methodsFor: 'private' stamp: 'lr 11/2/2007 13:56'!actualClass	^ PRStructureDescription! !!PRStructureDescriptionTest methodsFor: 'private' stamp: 'lr 11/2/2007 14:05'!context	^ PRContext kernel: PRKernel new structure: self includedInstance! !!PRStructureDescriptionTest methodsFor: 'private' stamp: 'lr 11/2/2007 14:03'!includedInstance	^ page ifNil: [ page := PRPage new ]! !!PRStructureDescriptionTest methodsFor: 'running' stamp: 'lr 11/2/2007 14:00'!runCase	PRCurrentContext use: self during: [ super runCase ]! !"Pier-Tests"!!PRRenderer commentStamp: 'lr 11/13/2008 18:56' prior: 0!The renderer is a visitor that knows the canvas and painter object it is supposed to generate HTML to.Instance Variables	html:		<WACanvas>	painter:		<WAHtmlCanvas>!!PRBlueprintLibrary commentStamp: 'lr 1/11/2008 08:05' prior: 0!!!Blueprint CSS FrameworkWelcome to *Blueprint>http://code.google.com/p/blueprintcss*!! This is a CSS framework designed to cut down on your CSS development time. It gives you a solid foundation to build your own CSS on. Here are some of the features BP provides out-of-the-box:- An easily customizable grid- Sensible default typography- A typographic baseline- Perfected browser CSS reset- A stylesheet for printing- Absolutely no bloat!!!!!!LicenseCopyright (c) 2007 Olav Bjorkoy (http://bjorkoy.com)Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sub-license, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice, and every other copyright notice found in this software, and all the attributions in every file, and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.!!PRSettingsCommand commentStamp: 'lr 11/5/2007 21:40' prior: 0!Command to edit settings of a structure. This command collects all the descriptions tagged as ==#beSetting==.!!MADescription methodsFor: '*pier-seaside' stamp: 'lr 5/22/2007 23:43'!beSetting	self propertyAt: #setting put: true! !!MADescription methodsFor: '*pier-seaside' stamp: 'lr 5/22/2007 23:44'!isSetting	^ self propertyAt: #setting ifAbsent: [ false ]! !!PRWordDiffAlgorithm methodsFor: '*pier-seaside-rendering' stamp: 'lr 9/28/2009 19:58'!renderOn: html	self patchsetDo: [ :operation :object :index |		operation = #-			ifTrue: [ html deleted: [ self renderText: object spaces: (sourceSpaces at: index) on: html ] ]			ifFalse: [ 				operation = #+					ifTrue: [ html inserted: [ self renderText: object spaces: (targetSpaces at: index) on: html ] ]					ifFalse: [ self renderText: object spaces: (targetSpaces at: index) on: html ] ] ]! !!PRWordDiffAlgorithm methodsFor: '*pier-seaside-rendering' stamp: 'lr 9/28/2009 15:10'!renderText: aString spaces: aSpacesString on: html	| stream char |	html text: aString.	stream := aSpacesString readStream.	[ stream atEnd ] whileFalse: [ 		char := stream next.		char = Character cr			ifTrue: [ html break ]			ifFalse: [ html text: char ] ]! !!WAComponent class methodsFor: '*pier-seaside' stamp: 'lr 9/3/2008 11:49'!groupLabel	^ 'Seaside Component'! !!WAComponent class methodsFor: '*pier-seaside' stamp: 'lr 5/26/2009 17:18'!owner: aStructure link: anInternalLink	^ self new initializeOwner: aStructure link: anInternalLink! !!WAComponent methodsFor: '*pier-seaside-initialization' stamp: 'lr 2/20/2010 12:26'!initializeOwner: aStructure link: anInternalLink	"Initialize the receiver with the settings from aStructure and overriding parameters of anInternalLink."	| preference |	aStructure componentDescription do: [ :description |		preference := aStructure settings at: description ifAbsent: [ nil ].		anInternalLink notNil ifTrue: [			anInternalLink 				parameterAt: description parameterName 				ifPresent: [ :value | preference := description fromString: value ] ].		self			write: (preference ifNil: [ description default yourself ])			using: description ]! !!WAPresenter methodsFor: '*pier-seaside-accessing' stamp: 'lr 3/9/2006 11:30'!context	^ PRCurrentContext value! !!WAPresenter methodsFor: '*pier-seaside-accessing' stamp: 'lr 3/9/2006 11:30'!context: aContext	PRCurrentContext value: aContext! !!WAPresenter methodsFor: '*pier-seaside-events' stamp: 'lr 3/9/2006 11:30'!onChangeContext: aContext	"Inform components about a new context that will be used from now on."! !!PRStructureComponent methodsFor: 'actions' stamp: 'lr 11/2/2007 16:15'!choose	| tree |	tree := WATree root: self context root path: self context structure parents.	tree		labelBlock: [ :structure | structure title ];		childrenBlock: [ :structure |			(self context enumeratorFor: structure)				contents ];		canSelectBlock: [ :structure | 			self description isSatisfiedBy: structure ].	self chooser: tree! !!PRStructureComponent methodsFor: 'rendering' stamp: 'lr 3/27/2006 11:32'!renderEditorOn: html	super renderEditorOn: html.	html submitButton on: #choose of: self! !!PRStructureComponent methodsFor: 'rendering' stamp: 'lr 11/5/2007 22:10'!renderViewerOn: html	self value isNil		ifTrue: [ ^ html render: self string ].	html anchor		goto: (self context structure: self value);		with: self string! !!PRComponent class methodsFor: 'accessing' stamp: 'lr 9/3/2008 11:48'!componentClasses	| sortBlock |	sortBlock := [ :a :b | 		a groupLabel = b groupLabel			ifTrue: [ a label < b label ]			ifFalse: [ a groupLabel < b groupLabel ] ].	^ ((PRWidget allSubclasses reject: [ :each | each isAbstract ]) asArray 		sort: sortBlock;		yourself) ,	  ((WAComponent allSubclasses select: [ :each | each canBeRoot ]) asArray		sort: sortBlock;		yourself)! !!PRComponent class methodsFor: 'accessing-description' stamp: 'lr 4/4/2009 17:29'!descriptionComponentClass	^ MASingleOptionDescription new		options: [ self componentClasses ] asDynamicObject;		reference: MAClassDescription new;		accessor: #componentClass;		label: 'Component Class';		groupBy: #groupLabel;		priority: 200;		beRequired;		beEditable;		yourself! !!PRComponent class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRComponent class methodsFor: 'accessing' stamp: 'lr 1/8/2010 22:15'!label	^ 'Component'! !!PRComponent methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:30'!accept: aVisitor	aVisitor visitComponent: self! !!PRComponent methodsFor: 'accessing-dynamic' stamp: 'lr 5/26/2009 17:22'!component	"Answer a new instance of the Seaside component."	^ self componentFor: self document! !!PRComponent methodsFor: 'accessing' stamp: 'lr 5/26/2009 17:24'!componentClass	"Answer the component class of the receiver. The default is an empty Seaside component to avoid any troubles."	^ (componentClass isNil or: [ componentClass isObsolete ])		ifFalse: [ componentClass ]		ifTrue: [ WAComponent ]! !!PRComponent methodsFor: 'accessing' stamp: 'lr 8/17/2007 10:45'!componentClass: aComponentClass	componentClass = aComponentClass ifTrue: [ ^ self ].	componentClass := aComponentClass.	self flush; reset! !!PRComponent methodsFor: 'accessing-description' stamp: 'lr 4/9/2009 08:34'!componentDescription	"Answer the description of the component. Directly call the description builder, in case this is a stupid Seaside comment that returns a string as its description."		| description |	description := self componentClass description.	description isDescription		ifFalse: [ description := MADescriptionBuilder for: self componentClass ].	description := description collect: [ :each | each copy ].	description do: [ :each |		each group isNil			ifTrue: [ each group: 'Component' ] ].	^ description! !!PRComponent methodsFor: 'accessing-dynamic' stamp: 'lr 5/26/2009 17:23'!componentFor: anInternalLink	"Answer a new instance of the Seaside component."	^ self componentClass 		owner: self link: anInternalLink! !!PRComponent methodsFor: 'accessing-description' stamp: 'lr 4/9/2009 08:26'!description	^ (MAContainer withAll: super description) 		addAll: self componentDescription;		yourself! !!PRComponent methodsFor: 'accessing' stamp: 'lr 5/26/2009 17:21'!document	^ link ifNil: [ link := super document ]! !!PRComponent methodsFor: 'accessing-description' stamp: 'lr 4/9/2009 08:30'!editDescription	^ self hasComponent		ifFalse: [ super editDescription ]		ifTrue: [			MAContainer new				addAll: ((self basicDescription					copyWithout: self class descriptionComponentClass)					select: [ :each | each isEditable ]);				add: (self class descriptionComponentClass					beReadonly;					yourself);				addAll: self componentDescription;				yourself ]! !!PRComponent methodsFor: 'accessing-dynamic' stamp: 'lr 5/26/2009 17:32'!embeddedComponents	^ super embeddedComponents copyWith: self document! !!PRComponent methodsFor: 'actions' stamp: 'lr 6/17/2009 22:15'!flush	PRCurrentContext value ifNotNilDo: [ :context | context flushComponent: self ]! !!PRComponent methodsFor: 'testing' stamp: 'lr 4/4/2009 17:36'!hasComponent	^ componentClass notNil! !!PRComponent methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:30'!initialize	super initialize.	self reset! !!PRComponent methodsFor: 'testing' stamp: 'lr 5/12/2007 16:27'!isComponent	^ true! !!PRComponent methodsFor: 'copying' stamp: 'lr 8/17/2007 08:01'!postCopy	super postCopy.	settings := settings copy! !!PRComponent methodsFor: 'private' stamp: 'lr 2/18/2009 15:03'!readUsing: aDescription	^ (self basicDescription includes: aDescription)		ifTrue: [ super readUsing: aDescription ]		ifFalse: [ self settings at: aDescription ifAbsentPut: [ aDescription default yourself ] ]! !!PRComponent methodsFor: 'actions' stamp: 'lr 5/22/2007 23:57'!reset	settings := Dictionary new! !!PRComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!settings	^ settings! !!PRComponent methodsFor: 'accessing-description' stamp: 'lr 4/9/2009 08:32'!settingsDescription	^ self hasComponent		ifFalse: [ super settingsDescription ]		ifTrue: [ 			MAContainer new				add: self class descriptionComponentClass;				addAll: (self basicDescription					select: [ :each | each isSetting ]);				yourself ]! !!PRComponent methodsFor: 'private' stamp: 'lr 2/18/2009 15:03'!write: anObject using: aDescription	(self basicDescription includes: aDescription)		ifTrue: [ super write: anObject using: aDescription ]		ifFalse: [			(anObject notNil and: [ aDescription isDocumentDescription ])				ifTrue: [ anObject owner: self ].			self settings at: aDescription put: anObject ]! !!PRStructure class methodsFor: '*pier-seaside-descriptions' stamp: 'lr 2/5/2009 21:35'!descriptionEnvironment	^ PRStructureDescription new		accessor: #localEnvironment;		addCondition: (MACondition selector: #hasDocument)			labelled: 'The environment has to have a document';		addCondition: (MACondition selector: #hasContentsWidget)			labelled: 'Invalid environment, make sure to embed the contents widget';		group: 'Layout Settings';		label: 'Environment';		priority: 800;		beSetting;		yourself! !!PRStructure class methodsFor: '*pier-seaside-descriptions' stamp: 'lr 8/24/2008 10:21'!descriptionHideFromMenus	^ MABooleanDescription new		comment: 'Hides this structure from navigation facilities.';		checkboxLabel: 'Hide from menus';		accessor: #hideFromMenus;		label: 'Visibility';		priority: 10;		beSetting;		yourself! !!PRStructure class methodsFor: '*pier-seaside-descriptions' stamp: 'lr 1/11/2010 21:27'!descriptionIcon	^ PRStructureDescription new		accessor: #localIcon;		addCondition: (MACondition selector: #isFile) & (MACondition selector: #isImage)			labelled: 'Invalid icon';		group: 'Layout Settings';		label: 'Shortcut Icon';		priority: 820;		beSetting;		yourself! !!PRStructure class methodsFor: '*pier-seaside-descriptions' stamp: 'lr 3/26/2009 20:58'!descriptionNavigationTitle	^ MAStringDescription new		comment: 'A short title used for navigation facilities.';		label: 'Navigation Title';		parameterName: 'menu';		accessor: #menu;		beSearchable;		priority: 20;		beSetting;		yourself! !!PRStructure class methodsFor: '*pier-seaside-descriptions' stamp: 'lr 2/5/2009 21:37'!descriptionStyleSheet	^ PRStructureDescription new		addCondition: (MACondition selector: #isFile) & (MACondition selector: #isText)			labelled: 'Invalid style sheet';		accessor: #localStyleSheet;		group: 'Layout Settings';		label: 'Style Sheet';		priority: 810;		beSetting;		yourself! !!PRStructure class methodsFor: '*pier-seaside-descriptions' stamp: 'lr 7/2/2009 08:12'!descriptionTagsSeaside: aDescription	^ aDescription beSetting! !!PRStructure methodsFor: '*pier-seaside-accessing' stamp: 'lr 5/26/2009 17:34'!componentsIn: aContext	^ self embeddedComponents collect: [ :each | aContext componentFor: each ]! !!PRStructure methodsFor: '*pier-seaside-accessing' stamp: 'lr 8/10/2007 18:53'!cssClass	"Answer a CSS class that should be used in the body-tag when browsing the structure. Furthermore it is put into menus and links that reference the receiver."	^ self class fullName asLowercase allButFirst: 2! !!PRStructure methodsFor: '*pier-seaside-configuration' stamp: 'lr 4/15/2009 17:53'!defaultEnvironment	^ (PRPage named: 'environment')		addChild: ((PRFile named: 'style.css')			filename: 'style.css';			mimetype: 'text/css';			contents: '/* blueprint patches */h1, h2, h3, h4, h5, h6 { margin: 0; font-weight: inherit; font-size: 100%; line-height: 1; }h1 { font-size: 2em; margin-bottom: 0.75em; }h2 { font-size: 1.5em; line-height: 1; margin-bottom: 1em; }h3 { font-size: 1.2em; height: 1.25em; line-height: 1.25; margin-bottom: 1.25em; }h4 { font-size: 1em; font-weight: bold; margin-bottom: 1.5em; }h5 { font-size: 1em; font-weight: bold; }h6 { font-size: 1em; }/* pier */a.broken { color: #8a1f11; }a.protected { color: #514721; }h1.heading { font-size: 3em; line-height: 1; margin-bottom: 0.5em; }pre, code, tt { font-size: 1.3em; background-color: #eaeaea; }/* widgets */ul.toc { list-style: none; margin-left: 0; }ul.toc li.toc-level-1 { margin-left: 0em; }ul.toc li.toc-level-2 { margin-left: 1em; }ul.toc li.toc-level-3 { margin-left: 2em; }ul.toc li.toc-level-4 { margin-left: 3em; }ul.toc li.toc-level-5 { margin-left: 4em; }ul.toc li.toc-level-6 { margin-left: 5em; }/* magritte */.magritte td { vertical-align: top; }.magritte textarea { width: 100%; height: 250px; padding: 0; margin: 0; }.magritte tr td.required:after { content: "*"; color: #8a1f11; font-weight: bold; margin-left: 0.5em; }.magritte th { vertical-align: top; padding-top: 10px; background-color: inherit; width: 120px; }.magritte tr.group th { font-size: 1.5em; line-height: 1; margin-bottom: 1em; width: 100% }.magritte .error { border: 0; padding: 4px 10px 4px 5px; }/* default look */.header .title a.page {	height: 59px;	outline: none;	display: block;	text-indent: -1000em;	background: url(/seaside/pier/environment/pier.png?view=PRDownloadView) no-repeat;}.header .search input {	width: 140px;	outline: none;}.header .search ul {	margin: 0;	padding: 0;	background: #fff;	list-style-type: none;	border: 1px solid #666;	border-top: none;}.header .search li.selected {	background-color: #009;}.header .search li {	margin: 0;	display: block;	padding: 0.2em;	cursor: pointer;	list-style-type: none;}.header .search a {	text-decoration: none;}.header .search li.selected a {	color: #fff;}.header .children {	height: 4em;}.header .children ul {	margin: 0 0 1em 0;	list-style-type: none;}.header .children ul li {	float: left;	width: 110px;	margin-right: 10px;	list-style-type: none;}.header .children .active {	font-weight: bold;}.sidebar ul {	margin-top: 0;	margin-left: 0;	list-style-type: none;}.sidebar ul ul {	margin-bottom: 0;	margin-left: 1.5em;}.sidebar .active {	font-weight: bold;}.footer {	font-size: 0.8em;	margin-top: 1em;	text-align: center;}';			yourself);		addChild: ((PRFile named: 'pier.png')			filename: 'pier.png';			mimetype: 'image/png';			contents: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 125 0 0 0 59 8 2 0 0 0 217 227 18 3 0 0 0 25 116 69 88 116 83 111 102 116 119 97 114 101 0 65 100 111 98 101 32 73 109 97 103 101 82 101 97 100 121 113 201 101 60 0 0 11 128 73 68 65 84 120 218 236 92 95 108 20 199 25 159 221 251 135 237 59 167 150 33 22 118 8 146 35 25 91 10 180 17 9 8 94 138 2 60 244 1 106 250 84 12 177 213 23 136 68 250 2 168 41 72 141 44 30 74 26 21 164 170 32 5 75 81 98 2 230 165 170 221 152 170 145 48 200 17 18 22 6 75 169 105 226 179 19 211 144 96 163 68 118 0 223 249 236 251 59 253 237 140 111 188 183 123 183 55 187 103 83 27 238 211 228 56 150 221 157 217 223 126 243 251 126 223 55 115 81 40 165 100 233 89 98 42 52 121 245 218 163 254 219 211 193 225 240 80 80 28 119 151 7 42 183 191 94 211 188 207 223 80 79 150 179 41 75 13 247 71 253 183 198 206 95 156 236 185 102 125 218 134 243 31 252 100 211 107 69 220 23 6 241 111 207 188 143 79 153 147 87 212 84 111 186 250 233 242 197 221 189 68 198 49 122 242 189 177 246 11 242 231 207 142 141 47 107 158 89 18 184 15 31 251 195 247 157 255 176 117 9 252 125 89 227 174 46 5 122 177 11 58 172 106 207 47 139 184 23 100 136 162 118 47 129 152 169 105 222 95 196 189 32 75 78 133 236 130 190 161 253 3 8 202 34 238 79 206 106 90 246 63 5 160 47 137 184 138 36 72 70 59 86 238 120 125 237 161 55 151 123 186 180 180 244 59 178 164 123 103 223 215 231 165 122 86 169 106 220 13 208 151 187 128 89 186 121 19 36 249 236 216 216 227 254 219 218 52 12 4 202 26 214 249 235 235 159 2 74 89 30 117 130 121 157 51 254 253 205 129 65 124 246 15 220 105 88 87 91 179 186 106 199 182 45 53 213 85 207 28 238 67 195 119 241 9 8 100 206 12 133 195 248 18 240 251 101 206 215 91 255 192 96 79 111 31 62 121 119 220 214 164 226 165 52 53 161 186 95 122 245 149 119 91 15 23 136 62 110 62 21 154 30 26 30 157 143 49 213 85 47 84 87 109 218 184 193 174 79 224 251 230 87 55 100 189 16 255 138 7 153 10 105 56 148 7 252 6 167 201 131 59 198 215 211 123 227 106 111 31 110 193 143 0 199 243 231 222 43 15 148 101 237 166 243 242 21 61 94 172 203 178 230 189 141 45 77 123 204 151 24 122 185 53 112 7 159 248 142 35 235 146 209 117 169 88 93 50 202 17 159 207 108 93 190 182 85 107 79 182 30 193 99 20 254 58 205 246 171 93 59 223 58 176 47 215 123 197 216 218 59 58 59 47 247 112 196 133 157 61 245 142 126 60 56 237 76 219 133 246 142 46 243 205 143 29 57 200 113 200 137 59 110 125 166 237 162 0 194 112 253 201 214 195 121 187 201 16 45 213 85 103 255 252 142 193 247 1 129 246 82 63 235 19 88 108 77 68 94 73 204 212 165 98 122 172 13 246 161 175 226 63 21 171 240 238 101 102 18 158 226 239 221 87 204 72 89 219 241 35 7 91 154 26 13 247 105 191 212 213 217 125 197 140 6 247 197 174 142 179 226 175 111 28 120 27 47 56 235 157 133 215 102 193 29 215 0 68 225 224 102 195 180 250 184 237 79 252 59 78 59 214 122 42 235 104 12 134 206 48 56 188 0 220 191 179 187 71 255 70 43 105 114 119 108 234 103 201 217 50 154 242 16 226 98 7 83 186 166 31 98 183 183 252 19 79 0 247 185 214 253 145 53 226 240 27 128 238 140 139 4 244 218 107 235 238 201 133 163 176 91 189 127 227 142 252 215 115 23 208 175 197 153 28 189 12 253 142 62 206 95 234 178 158 137 130 31 241 37 175 155 27 38 233 239 91 79 227 133 235 47 1 226 191 137 62 4 171 248 32 25 9 241 165 143 211 52 226 137 204 70 51 29 25 51 47 107 95 120 120 60 136 140 55 228 50 60 26 62 225 227 146 19 37 56 50 10 64 209 35 250 205 139 30 70 238 118 54 208 198 166 67 161 80 216 238 131 161 75 189 227 128 85 0 58 224 94 69 136 23 148 199 154 1 247 36 131 59 206 90 140 16 125 127 136 7 102 220 1 211 161 163 39 242 186 142 140 151 252 241 212 57 249 243 111 222 30 4 238 96 127 25 76 16 47 149 199 83 225 230 131 191 43 124 160 118 13 62 126 116 118 162 134 144 10 17 226 51 79 160 233 79 202 208 231 184 255 64 200 199 222 231 122 60 126 78 92 152 221 250 75 228 73 111 193 13 131 217 179 107 167 252 236 119 17 111 229 245 27 3 79 126 160 191 142 61 126 153 38 158 79 187 185 194 255 80 231 221 30 71 196 49 52 15 107 152 243 159 122 2 147 170 54 77 163 177 248 142 109 91 87 173 172 16 36 121 248 248 187 56 104 45 87 160 133 98 177 248 208 200 2 251 25 250 253 247 157 160 141 186 152 227 200 83 160 149 16 234 226 160 186 137 226 101 205 151 254 194 155 71 107 90 1 73 157 123 7 156 19 35 138 170 115 240 27 2 244 99 173 167 173 123 228 50 12 1 6 74 241 217 173 71 206 16 5 25 69 196 77 102 221 140 221 121 243 105 232 19 93 19 239 0 51 115 154 205 131 239 84 207 60 81 126 214 151 166 151 211 121 121 0 218 89 136 218 255 63 238 242 73 154 133 48 114 112 213 39 222 242 160 226 25 141 145 175 102 201 189 40 115 118 134 50 49 249 62 73 31 76 185 200 164 226 50 100 0 8 212 224 244 188 221 33 119 19 137 219 147 15 102 102 39 112 35 215 194 108 133 12 24 127 240 67 214 44 201 250 122 158 191 224 73 160 112 108 245 13 183 61 81 2 122 39 72 145 254 18 121 48 171 146 18 111 102 84 165 132 50 89 163 112 89 147 36 51 73 50 65 141 133 235 67 71 78 200 140 89 175 124 242 138 113 110 32 37 92 133 155 227 209 108 165 93 128 197 122 72 240 84 55 78 18 99 170 239 168 181 37 158 222 58 176 159 39 141 248 196 189 36 159 199 96 156 175 147 174 180 150 212 225 174 164 19 39 202 112 159 157 33 35 46 159 89 240 229 237 66 43 171 233 184 165 253 146 148 234 64 208 230 32 214 172 174 146 199 29 193 3 23 90 123 33 50 50 213 48 62 121 188 240 36 250 100 122 211 198 245 206 38 93 165 6 42 241 149 166 185 37 51 186 10 146 65 139 81 50 145 201 51 14 152 16 17 88 6 68 248 162 69 65 201 250 109 1 70 67 153 193 48 24 52 213 49 83 183 236 109 92 16 178 91 147 138 187 160 102 203 116 160 235 162 171 32 125 180 153 184 145 223 37 173 190 174 86 76 142 147 18 19 90 31 132 237 26 247 93 193 4 230 127 5 177 23 164 103 12 21 193 254 129 59 206 238 243 98 42 94 170 57 187 66 50 155 226 229 109 206 223 227 38 49 35 111 33 198 69 0 29 25 162 12 47 65 227 59 115 118 193 102 60 242 233 131 10 215 175 93 29 103 249 157 221 134 36 91 190 131 133 82 99 107 146 177 18 191 6 241 156 15 40 233 36 21 113 53 69 73 82 81 52 114 167 177 25 45 18 232 197 187 188 117 94 190 130 209 158 105 187 32 163 100 16 78 77 46 37 27 183 16 9 244 147 6 183 210 23 110 245 150 137 251 3 89 220 55 155 24 201 89 80 229 9 148 175 140 249 184 194 178 86 30 86 117 74 134 178 26 77 120 150 58 115 118 46 28 33 123 228 53 140 221 184 237 192 28 238 39 16 140 105 119 162 100 45 212 148 86 184 230 252 61 141 187 94 201 40 9 40 27 37 73 29 146 187 188 248 203 186 156 18 28 25 181 19 192 215 59 193 93 62 161 48 4 141 155 78 157 157 175 111 248 202 25 161 43 233 226 204 28 201 104 206 14 146 161 172 64 51 51 67 121 89 102 49 12 130 34 215 242 225 34 37 89 238 204 57 21 118 150 163 6 157 150 153 32 102 52 220 159 83 136 75 248 59 3 94 144 76 130 147 15 141 76 211 97 183 119 49 16 255 237 193 125 22 66 206 214 163 149 7 252 139 200 51 230 88 111 177 56 149 23 247 192 42 149 64 183 112 220 85 134 123 186 248 171 145 12 254 198 200 39 153 32 17 143 186 128 112 131 19 64 229 121 213 193 144 29 158 145 79 128 220 14 180 96 125 221 75 6 114 119 204 239 165 132 186 53 133 206 252 221 69 20 94 120 20 36 147 208 190 226 208 212 36 117 44 34 133 30 127 129 65 12 201 145 11 107 120 207 208 240 168 97 127 192 147 224 25 103 38 153 118 243 36 16 238 163 127 146 58 4 213 149 42 241 40 138 91 195 157 168 10 47 18 104 36 147 160 148 113 190 6 189 90 80 80 109 222 219 152 107 69 80 36 177 103 218 46 114 239 193 23 161 106 236 138 52 189 142 204 83 143 204 200 47 194 97 185 73 154 17 181 59 165 43 248 72 28 182 255 60 67 48 172 76 37 128 187 6 186 103 46 75 66 2 165 176 164 73 59 226 81 136 91 163 32 215 10 165 146 38 183 38 34 218 254 142 100 212 46 238 188 92 156 213 128 236 27 7 222 62 214 122 90 63 101 69 78 107 215 217 229 115 26 181 192 216 221 222 33 187 42 203 201 148 23 155 244 197 25 119 137 162 45 125 128 66 188 76 213 64 200 11 208 93 132 183 210 10 165 186 193 245 166 235 209 209 217 9 180 221 113 123 91 183 241 92 0 87 255 116 124 89 188 177 233 80 214 61 23 120 34 126 48 56 178 88 21 99 39 60 19 10 79 139 231 225 235 238 50 12 203 87 121 16 121 68 153 148 139 153 242 26 149 145 59 163 26 143 182 190 167 105 71 38 105 52 198 87 231 116 100 77 131 90 93 171 144 40 29 255 58 85 247 93 148 120 236 237 155 4 142 64 89 75 179 87 87 65 146 231 245 21 78 241 247 11 200 75 100 113 151 143 141 32 22 182 103 33 140 249 40 233 236 96 88 49 7 225 242 124 113 17 206 238 11 164 211 84 149 185 54 99 21 26 103 178 93 200 121 253 70 3 133 68 194 206 3 172 164 4 16 193 192 113 18 110 7 119 233 34 1 176 150 76 187 117 26 121 254 103 49 175 109 92 207 113 127 49 21 247 249 149 140 141 3 72 80 21 58 183 226 33 140 255 19 251 111 98 60 245 104 130 246 148 250 201 162 25 102 36 47 70 218 21 105 182 170 232 139 190 190 42 42 159 186 66 102 6 197 207 169 70 32 158 160 36 78 193 36 218 103 18 60 147 110 148 55 50 121 63 245 205 23 169 15 125 21 139 87 48 208 239 254 148 119 196 185 107 51 229 181 44 238 55 111 47 252 156 226 219 34 13 121 86 185 182 181 189 118 222 151 147 12 101 13 116 66 99 148 55 77 68 38 88 234 196 94 73 52 76 131 215 19 95 12 82 128 126 195 93 186 72 160 235 235 180 206 46 95 18 254 206 119 107 102 149 86 205 108 205 228 91 213 51 253 99 42 49 163 57 56 141 51 184 163 172 105 208 19 126 240 225 127 147 95 245 198 7 255 25 191 254 208 119 162 228 121 61 232 0 168 165 169 209 238 62 239 92 132 126 173 251 35 61 25 58 0 221 86 97 220 109 86 41 11 98 64 228 120 238 37 27 60 231 249 75 93 159 15 223 253 50 238 243 253 43 182 118 179 135 169 26 38 93 224 229 81 58 53 150 2 226 63 126 147 74 198 40 176 238 41 241 139 88 202 196 232 22 196 12 94 59 148 217 141 108 161 178 246 236 218 217 162 139 249 14 146 32 158 12 91 231 101 102 155 223 15 108 177 123 216 174 239 200 188 124 190 250 115 47 248 245 174 120 104 71 60 236 242 42 101 149 154 106 153 158 164 192 58 162 168 159 187 86 12 187 124 248 228 107 29 2 235 172 119 182 222 39 109 70 10 183 218 190 109 75 94 176 16 255 45 52 27 31 207 30 71 43 177 78 112 135 35 163 51 156 124 181 183 79 40 92 204 247 250 186 90 196 76 249 65 112 93 132 251 148 210 84 93 42 6 121 19 33 10 252 122 66 117 243 200 105 112 109 201 20 9 55 68 72 52 231 128 252 199 58 184 155 45 106 226 191 137 16 218 166 60 160 253 130 197 193 239 88 114 226 190 110 227 47 36 175 1 107 47 8 171 10 141 12 150 16 123 187 133 31 61 77 191 102 202 201 239 182 248 209 113 196 207 93 146 221 64 158 49 83 57 139 217 218 174 100 87 216 22 45 11 238 50 59 105 205 28 90 4 174 64 115 221 29 143 88 239 25 55 219 221 123 247 65 190 242 107 90 69 203 130 187 191 114 173 221 107 66 161 105 136 54 232 253 159 174 111 240 249 188 69 16 29 242 187 51 67 40 182 85 29 43 90 6 238 22 59 40 101 36 96 17 65 135 184 155 127 35 107 171 2 83 68 176 160 188 201 226 215 217 22 42 94 242 71 211 69 179 202 87 5 117 220 188 61 24 28 185 139 23 144 107 61 140 111 62 177 254 95 14 20 205 218 254 39 192 0 85 75 56 201 129 50 9 35 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray;			yourself);		addChild: ((PRPage named: 'title')			contents: '!!*/*';			yourself);		addChild: ((PRComponent named: 'search')			componentClass: PRAjaxSearchWidget;			yourself);		addChild: ((PRComponent named: 'children')			componentClass: PRChildrenWidget;			write: 1 using: PRChildrenWidget descriptionLevel;			yourself);		addChild: ((PRPage named: 'sidebar')			addChild: ((PRComponent named: 'navigation')				componentClass: PRChildrenWidget;				write: 2 using: PRChildrenWidget descriptionLevel;				write: true using: PRChildrenWidget descriptionExpand;				yourself);			addChild: ((PRComponent named: 'views')				componentClass: PRViewsWidget;				yourself);			addChild: ((PRComponent named: 'commands')				componentClass: PRCommandsWidget;				yourself);			contents: '+navigation++views++commands+';			yourself);		addChild: ((PRComponent named: 'contents')			componentClass: PRContentsWidget;			write: '%c' using: PRContentsWidget descriptionHeading;			yourself);		addChild: ((PRPage named: 'footer')			contents: 'Powered by *Seaside>http://www.seaside.st/*, *Magritte>http://www.lukas-renggli.ch/smalltalk/magritte*		and *Pier>http://www.piercms.com/*.';			yourself);		contents: '<div class="container">	<div class="header column span-24">		<div class="title column span-20">+title+</div>		<div class="search column span-4 last">+search+</div>		<div class="children column span-24 last">+children+</div>	</div>	<div class="body column span-24">		<div class="sidebar column span-4">+sidebar+</div>		<div class="contents column span-20 last">+contents+</div>	</div>	<div class="footer column span-24">+footer+</div></div>';	yourself! !!PRStructure methodsFor: '*pier-seaside-accessing' stamp: 'lr 5/26/2009 17:31'!embeddedComponents	"Answer a list of embedded component links."		^ self outgoingReferences embeddedComponents! !!PRStructure methodsFor: '*pier-seaside-environment' stamp: 'lr 10/25/2007 23:28'!environment	"Answer the (inherited) environment structure of the receiver, if none is available a default one is created."	^ self localEnvironment ifNil: [		self isRoot			ifTrue: [ self newEnvironment ]			ifFalse: [ self parent environment ] ]! !!PRStructure methodsFor: '*pier-seaside-testing' stamp: 'lr 5/27/2009 16:04'!hasContentsWidget	^ self embeddedComponents anySatisfy: [ :each | each target componentClass includesBehavior: PRContentsWidget ]! !!PRStructure methodsFor: '*pier-seaside-accessing' stamp: 'lr 6/22/2007 18:43'!hideFromMenus	^ self propertyAt: #hideFromMenus ifAbsentPut: [ false ]! !!PRStructure methodsFor: '*pier-seaside-accessing' stamp: 'lr 6/22/2007 18:43'!hideFromMenus: aBoolean	^ self propertyAt: #hideFromMenus put: aBoolean! !!PRStructure methodsFor: '*pier-seaside-environment' stamp: 'DamienPollet 11/13/2008 00:17'!icon	"Answer the (inherited) icon structure of the receiver,"	| icon |	icon := self localIcon.	^ (icon notNil and: [icon file notNil])		ifTrue: [ icon ]		ifFalse: [			self isRoot				ifTrue: [ nil ]				ifFalse: [ self parent icon ] ]! !!PRStructure methodsFor: '*pier-seaside-testing' stamp: 'lr 5/12/2007 16:26'!isComponent	^ false! !!PRStructure methodsFor: '*pier-seaside-testing' stamp: 'lr 3/9/2006 11:30'!isValidView: aComponentClass in: aContext	"Answer true if aComponentClass is a valid command in aContext."	^ true! !!PRStructure methodsFor: '*pier-seaside-environment' stamp: 'lr 10/19/2007 14:33'!localEnvironment	^ self propertyAt: #localEnvironment ifAbsent: [ nil ]! !!PRStructure methodsFor: '*pier-seaside-environment' stamp: 'lr 10/25/2007 23:27'!localEnvironment: aStructure	self propertyAt: #localEnvironment put: aStructure! !!PRStructure methodsFor: '*pier-seaside-environment' stamp: 'DamienPollet 11/13/2008 00:04'!localIcon	^ self propertyAt: #localIcon ifAbsent: [ nil ]! !!PRStructure methodsFor: '*pier-seaside-environment' stamp: 'DamienPollet 11/12/2008 23:59'!localIcon: aStructure	self propertyAt: #localIcon put: aStructure! !!PRStructure methodsFor: '*pier-seaside-environment' stamp: 'lr 11/2/2007 17:18'!localStyleSheet	^ self propertyAt: #localStyleSheet ifAbsent: [ nil ]! !!PRStructure methodsFor: '*pier-seaside-environment' stamp: 'lr 11/2/2007 17:22'!localStyleSheet: aStructure	self propertyAt: #localStyleSheet put: aStructure! !!PRStructure methodsFor: '*pier-seaside-accessing' stamp: 'lr 6/22/2007 18:36'!menu	^ self propertyAt: #menu ifAbsent: [ self title ]! !!PRStructure methodsFor: '*pier-seaside-accessing' stamp: 'lr 6/22/2007 18:37'!menu: aString	(aString isNil or: [ aString isEmpty or: [ aString = self title ] ])		ifTrue: [ self properties removeKey: #menu ifAbsent: [ ] ]		ifFalse: [ self propertyAt: #menu put: aString ]! !!PRStructure methodsFor: '*pier-seaside-configuration' stamp: 'lr 4/15/2009 17:46'!newEnvironment	self localEnvironment: self defaultEnvironment.	self localStyleSheet: (self localEnvironment 		childrenDecoration at: 'style.css').	self childrenDecoration copy children do: [ :each |		self localEnvironment name = each name			ifTrue: [ self childrenDecoration remove: each ] ].	self childrenDecoration add: self localEnvironment.	^ self localEnvironment! !!PRStructure methodsFor: '*pier-seaside-description' stamp: 'lr 5/22/2007 23:44'!settingsDescription	"Answer a description container of settings for the Seaside view."	^ self description select: [ :each | each isSetting ]! !!PRStructure methodsFor: '*pier-seaside-environment' stamp: 'lr 11/10/2008 22:24'!styleSheets	"Answer the a collection of stylesheets of the receiver."		^ (self parents collect: [ :each | each localStyleSheet ])		reject: [ :each | each isNil or: [ each file isNil ] ]! !!PRStructure methodsFor: '*pier-seaside-configuration' stamp: 'lr 3/9/2006 11:30'!viewComponentClass	"Return the default view component class of the reciever."	^ PRDefaultView! !!PRPierFrame class methodsFor: 'registration' stamp: 'lr 10/1/2008 23:04'!applicationNamed: aString	| application |	application := WAApplication named: aString.	application configuration		addAncestor: PRPierConfiguration new.	application 		addLibrary: PRBlueprintLibrary.	Smalltalk at: #SULibrary ifPresent: [ :class | 		application libraries 			add: class; 			add: PRJavaScriptSupport ].	^ application! !!PRPierFrame class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!canBeRoot	^ true! !!PRPierFrame class methodsFor: 'private' stamp: 'lr 4/5/2010 17:56'!classFromRequest: aRequest name: aString base: aBaseClass	| value |	value := aRequest		at: aString		ifAbsent: [ ^ nil ].	^ aBaseClass withAllConcreteClasses		detect: [ :each | 			each isAbstract not				and: [ each name asString = value 				or: [ each label = value ] ] ]		ifNone: [ nil ]! !!PRPierFrame class methodsFor: 'registration' stamp: 'lr 12/19/2009 16:35'!description	^ 'Pier'! !!PRPierFrame class methodsFor: 'examples' stamp: 'lr 8/24/2008 08:18'!exampleDocumentation	"Create a (static) Pier instance from all the comments in the source code of pier, a sort of poor mans documentation. It might take a while to get all the classes traversed and to parse the source."	^ self on: (PRContext 		kernel: (PRKernel new			name: 'Documentation';			root: ((PRPage named: 'documentation')				addChild: (self pageForClass: PRObject);				addChild: (self pageForClass: MAObject);				yourself);			yourself))! !!PRPierFrame class methodsFor: 'examples' stamp: 'lr 1/5/2010 18:05'!exampleEmpty	"Pier can be easily used as a component within any Seaside application, this is just an example of a dumb wiki. To see this example browse to /seaside/examples/examplebrowser and select the receiver class."	^ self on: (PRContext kernel: (PRKernel new		name: 'Pier';		root: (PRPage new			title: 'Pier Example';			contents: 'Pier can be easily used as a component within any Seaside application (maybe you should adapt the style-sheets), this is just an example of a dumb and non-persistent wiki.';			yourself)))! !!PRPierFrame class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRPierFrame class methodsFor: 'testing' stamp: 'lr 8/29/2008 11:36'!isDeployed	^ true! !!PRPierFrame class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:30'!on: aContext	"This contructor creates a new SmallWiki frame that can be used within any Seaside application. It doesn't require a special session class, since all the required state is hold in the context of the wiki itself."	^ self new		context: aContext;		yourself! !!PRPierFrame class methodsFor: 'examples' stamp: 'lr 6/15/2009 20:27'!pageForClass: aClass	| page |	page := (PRPage named: aClass name)		contents: (String streamContents: [ :stream |			stream nextPutAll: '!!Class definition'; nextPut: Character cr.			aClass definition linesDo: [ :each |				(MACompatibility classNamed: #SPHighlightedCode) isNil					ifTrue: [ stream nextPut: $= ]					ifFalse: [ stream nextPutAll: '==' ].				 stream nextPutAll: each; nextPut: Character cr ].			aClass hasComment ifTrue: [				stream nextPutAll: '!!Class comment'; nextPut: Character cr.				stream nextPutAll: aClass comment; nextPut: Character cr ].			aClass selectorsAndMethodsDo: [ :selector :method |				(aClass firstCommentAt: selector) ifNotEmptyDo: [ :comment |					stream nextPutAll: '!!!!'; nextPutAll: selector; nextPut: Character cr.					stream nextPutAll: comment; nextPut: Character cr; nextPut: Character cr ] ] ]);		yourself.	aClass subclassesDo: [ :each | page addChild: (self pageForClass: each) ].	^ page! !!PRPierFrame class methodsFor: 'registration' stamp: 'lr 7/12/2007 19:41'!registerAsApplication: aString kernel: aKernel	^ (self registerAsApplication: aString)		preferenceAt: #kernel put: aKernel;		yourself! !!PRPierFrame methodsFor: 'private' stamp: 'lr 2/14/2008 13:24'!buildChildren	^ Set new		addAll: (self componentsOf: self environment);		addAll: (self componentsOf: self structure);		yourself! !!PRPierFrame methodsFor: 'accessing-dynamic' stamp: 'lr 9/30/2007 18:00'!children	^ children ifNil: [ children := self buildChildren ]! !!PRPierFrame methodsFor: 'private' stamp: 'lr 2/14/2008 09:35'!componentsOf: aStructure	^ aStructure componentsIn: self context! !!PRPierFrame methodsFor: 'accessing' stamp: 'lr 12/19/2009 16:17'!context	"Answer the current context of Pier, initialize with a default context if nil."	^ context ifNil: [ context := PRContext kernel: self kernel ]! !!PRPierFrame methodsFor: 'accessing' stamp: 'lr 9/4/2008 12:35'!context: aContext	aContext isValid		ifFalse: [ ^ self forbidden: aContext ].	context := aContext.	children := nil.	self update! !!PRPierFrame methodsFor: 'processing' stamp: 'lr 2/20/2008 14:52'!decorationChainDo: aRenderer	self withContextDo: [ super decorationChainDo: aRenderer ]! !!PRPierFrame methodsFor: 'accessing-dynamic' stamp: 'lr 8/23/2008 18:11'!dispatcher	^ WADispatcher default! !!PRPierFrame methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:30'!environment	^ self context structure environment! !!PRPierFrame methodsFor: 'processing-errors' stamp: 'lr 9/4/2008 13:35'!forbidden: aContext	"This method is called whenever aContext is forbidden to be accessed. If everything fails, we show a plain error notification."		| error |	error := aContext		structure: aContext structure		view: PRForbiddenView.	[ error structure isRoot or: [ error isValid ] ] whileFalse: [ 		error := error			structure: error structure parent			view: PRForbiddenView ].	error command viewComponent 		forbidden: aContext copy.	error isValid		ifTrue: [ self context: error ]		ifFalse: [			self session returnResponse: (WAResponse 				forbidden: self session currentRequest url) ]! !!PRPierFrame methodsFor: 'processing' stamp: 'lr 12/19/2009 16:50'!initialRequest: aRequest	| structure following |	super initialRequest: aRequest.	following := self context		structure: (structure := self 			parseStructure: aRequest 			ifAbsent: [ ^ self notFound ])		command: (self			parseCommand: aRequest			structure: structure).	following command		initialRequest: aRequest.	self context: following! !!PRPierFrame methodsFor: 'processing' stamp: 'lr 8/23/2008 18:14'!invalidDispatcher: aRequest 	self session returnResponse: (WAResponse new		nextPutAll: '<h1>Invalid Seaside dispatcher configuration.</h1>';		nextPutAll: '<p>';		nextPutAll: self dispatcher name;		nextPutAll: ' is not the start of ';		nextPutAll: aRequest url;		nextPutAll: '</p>';		internalError;		yourself)! !!PRPierFrame methodsFor: 'accessing-dynamic' stamp: 'lr 1/5/2010 18:03'!kernel	^ self application preferenceAt: #kernel! !!PRPierFrame methodsFor: 'processing-errors' stamp: 'lr 1/5/2010 18:03'!notFound	"This method is called whenever the current request cannot be resolved to a structure."		self context: (self context		structure: self context root		view: PRNotFoundView)! !!PRPierFrame methodsFor: 'processing' stamp: 'lr 12/19/2009 16:37'!parseCommand: aRequest structure: aStructure	| commandClass |	commandClass := self class 		classFromRequest: aRequest 		name: 'command'		base: PRCommand.	(commandClass isNil or: [ commandClass isAbstract ])		ifTrue: [ commandClass := aStructure defaultCommandClass ].	^ commandClass new! !!PRPierFrame methodsFor: 'processing' stamp: 'lr 1/5/2010 18:04'!parseStructure: aRequest ifAbsent: aBlock	| path |	path := aRequest url findTokens: $/.	(self dispatcher name findTokens: $/) do: [ :each |		each = path removeFirst			ifFalse: [ self invalidDispatcher: aRequest ] ].	(path notEmpty		and: [ path first = self application name		or: [ path first = (self dispatcher entryPoints keyAtValue: self application ifAbsent: [ nil ]) ] ])			ifTrue: [ path removeFirst ].	path := path		inject: String new		into: [ :result :each | result , '/' , each ].	^ self context root		lookupPath: path		ifAbsent: aBlock! !!PRPierFrame methodsFor: 'rendering' stamp: 'lr 4/8/2009 20:16'!renderContentOn: html	html rendererInstance		start: self environment		in: self on: html! !!PRPierFrame methodsFor: 'private' stamp: 'lr 3/26/2009 22:01'!rendererForRoot: aHtmlRoot	^ self rendererClass		context: aHtmlRoot context		callbacks: (aHtmlRoot context			callbacksFor: self)! !!PRPierFrame methodsFor: 'accessing-dynamic' stamp: 'lr 7/13/2007 09:55'!states	^ Array with: self! !!PRPierFrame methodsFor: 'accessing-dynamic' stamp: 'lr 2/3/2007 18:28'!structure	^ self context structure! !!PRPierFrame methodsFor: 'updating' stamp: 'lr 9/3/2008 14:13'!update	self visiblePresentersDo: [ :each | each onChangeContext: self context ]! !!PRPierFrame methodsFor: 'updating' stamp: 'lr 4/1/2009 22:41'!updateBody: aHtmlRoot	aHtmlRoot beXhtml10Strict.	aHtmlRoot bodyAttributes addClass: self structure cssClass.	aHtmlRoot meta name: 'generator'; content: 'Pier - Magritte - Seaside'! !!PRPierFrame methodsFor: 'updating-extras' stamp: 'lr 2/14/2009 18:14'!updateCanonical: aHtmlRoot	"Defines the canonical URL, the URL for the current page that should be used when search engines index or when people bookmark the current page."	aHtmlRoot link		relationship: 'canonical';		url: self context url! !!PRPierFrame methodsFor: 'updating' stamp: 'lr 4/1/2009 22:41'!updateDtd: aHtmlRoot	aHtmlRoot beXhtml10Strict! !!PRPierFrame methodsFor: 'updating-extras' stamp: 'lr 1/11/2010 21:26'!updateIcon: aHtmlRoot	| structure |	structure := self structure icon ifNil: [ ^ self ].	structure file ifNil: [ ^ self ].	aHtmlRoot link		beShortcutIcon;		type: structure file mimetype;		url: (structure file urlFor: aHtmlRoot context)! !!PRPierFrame methodsFor: 'updating-extras' stamp: 'lr 3/10/2009 08:26'!updateNavigation: aHtmlRoot	| siblings index |	siblings := self context siblings.	index := siblings indexOf: self structure.	self structure isRoot ifFalse: [		self 			updateRelationship: 'top'			with: self structure root			on: aHtmlRoot ].	self		updateRelationship: 'up'		with: self structure parent		on: aHtmlRoot.	self 		updateRelationship: 'previous'		with: (siblings at: index - 1 ifAbsent: [ nil ])		on: aHtmlRoot.	self 		updateRelationship: 'next'		with: (siblings at: index + 1 ifAbsent: [ nil ])		on: aHtmlRoot! !!PRPierFrame methodsFor: 'updating-extras' stamp: 'lr 3/26/2009 22:06'!updateRelationship: aString with: aStructure on: aHtmlRoot	| target renderer |	aStructure isNil ifTrue: [ ^ self ].	target := self context structure: aStructure.	target isValid ifFalse: [ ^ self ].	renderer := self rendererForRoot: aHtmlRoot.	aHtmlRoot link		relationship: aString; 		url: (target urlOn: renderer)! !!PRPierFrame methodsFor: 'updating' stamp: 'kph 3/26/2009 18:33'!updateRoot: aHtmlRoot	super updateRoot: aHtmlRoot.	self		updateDtd: aHtmlRoot;		updateBody: aHtmlRoot;		updateStyleSheets: aHtmlRoot;		updateNavigation: aHtmlRoot;		updateCanonical: aHtmlRoot;		updateIcon: aHtmlRoot! !!PRPierFrame methodsFor: 'updating-extras' stamp: 'lr 3/26/2009 21:40'!updateStyleSheets: aHtmlRoot	self structure styleSheets do: [ :structure |		structure file isEmpty ifFalse: [			aHtmlRoot stylesheet 				url: (structure file urlFor: aHtmlRoot context) ] ]! !!PRPierFrame methodsFor: 'updating' stamp: 'lr 8/15/2007 14:18'!updateUrl: anUrl	super updateUrl: anUrl.	anUrl adaptToContext: self context! !!PRPierFrame methodsFor: 'private' stamp: 'lr 9/3/2008 14:24'!withContextDo: aBlock	^ PRCurrentContext use: self during: aBlock! !!PRDefaultView class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRDefaultView class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!label	^ 'View'! !!PRDefaultView methodsFor: 'testing' stamp: 'lr 7/13/2009 20:55'!isRestful	^ true! !!PRDefaultView methodsFor: 'accessing' stamp: 'lr 1/29/2008 09:06'!label	^ self context structure title! !!PRDefaultView methodsFor: 'rendering' stamp: 'lr 5/19/2009 11:22'!render: aStructure on: html	html rendererInstance withinContentDo: [ 		html rendererInstance 			continue: aStructure 			in: self on: html ]! !!PRDefaultView methodsFor: 'rendering' stamp: 'lr 1/17/2007 23:29'!renderContentOn: html	self render: self context structure on: html! !!PRDefaultView methodsFor: 'accessing' stamp: 'lr 2/20/2007 15:08'!robots	^ 'index,follow'! !!PRDefaultView methodsFor: 'updating' stamp: 'lr 9/2/2008 16:07'!updateRoot: aHtmlRoot	"Add universal edit button: http://universaleditbutton.org/."	| editContext |	super updateRoot: aHtmlRoot.	editContext := self context command: self context structure		editCommandClass new.	editContext isValid ifTrue: [		aHtmlRoot link			beAlternate;			type: 'application/x-wiki';			title: editContext command label;			url: (editContext urlOn: (self rendererClass				context: aHtmlRoot context				callbacks: (aHtmlRoot context callbacksFor: self))) ]! !!PRErrorView class methodsFor: 'testing' stamp: 'lr 3/17/2009 17:28'!isListed	^ false! !!PRErrorView class methodsFor: 'testing' stamp: 'lr 9/4/2008 12:05'!isValidIn: aContext	^ true! !!PRErrorView class methodsFor: 'accessing' stamp: 'lr 9/4/2008 11:28'!label	^ 'Error'! !!PRErrorView methodsFor: 'rendering' stamp: 'lr 4/4/2009 17:17'!renderContentOn: html	self session onRespond: [ :value | value status: self status ].	self renderErrorOn: html.	self renderSolutionsOn: html! !!PRErrorView methodsFor: 'rendering' stamp: 'lr 9/4/2008 12:31'!renderErrorOn: html! !!PRErrorView methodsFor: 'rendering-options' stamp: 'lr 9/4/2008 12:00'!renderOptionExternalOn: html	<option: 400>		| referer |	referer := self session currentRequest referer.	referer isNil ifFalse: [		html listItem: [			html text: 'If you clicked a link from an external page '.			html anchor				url: referer;				with: referer.			html text: ', please inform the webmaster of this site of his mistake.' ] ]! !!PRErrorView methodsFor: 'rendering-options' stamp: 'lr 9/4/2008 12:18'!renderOptionLinkOn: html	<option: 100>		html listItem: 'Click on a link on this site.'! !!PRErrorView methodsFor: 'rendering-options' stamp: 'lr 9/4/2008 11:27'!renderOptionRootOn: html	<option: 200>		| rootContext |	rootContext := self context structure: self context root.	rootContext isValid ifTrue: [		html listItem: [			html text: 'Jump to the '.			html anchor				goto: rootContext;				with: rootContext structure title.			html text: ' homepage.' ] ]! !!PRErrorView methodsFor: 'rendering-options' stamp: 'lr 9/4/2008 11:27'!renderOptionSpellingOn: html	<option: 300>		html listItem: 'If you typed the page address, make sure that it is spelled correctly.'! !!PRErrorView methodsFor: 'rendering' stamp: 'lr 4/6/2009 23:58'!renderOptionsOn: html	(Pragma allNamed: #option: from: self class to: PRErrorView sortedUsing: [ :a :b | a arguments first < b arguments first])		do: [ :each | self perform: each selector with: html ]! !!PRErrorView methodsFor: 'rendering' stamp: 'lr 9/4/2008 12:18'!renderSolutionsOn: html	html paragraph: 'You might want to try one of these options:'.	html unorderedList: [ self renderOptionsOn: html ]! !!PRErrorView methodsFor: 'accessing' stamp: 'lr 4/4/2009 17:15'!status	^ 200! !!PRForbiddenView class methodsFor: 'testing' stamp: 'lr 9/4/2008 11:49'!isAbstract	^ false! !!PRForbiddenView class methodsFor: 'accessing' stamp: 'lr 9/4/2008 11:49'!label	^ 'Forbidden'! !!PRForbiddenView methodsFor: 'accessing' stamp: 'lr 9/4/2008 12:38'!forbidden: aContext	forbidden := aContext! !!PRForbiddenView methodsFor: 'rendering' stamp: 'lr 9/4/2008 14:19'!renderErrorOn: html	html paragraph: [ 		html text: 'You are not allowed to '.		html text: (forbidden isNil			ifTrue: [ 'view' ]			ifFalse: [ forbidden command class label asLowercase ]).		html text: ' this page.' ]! !!PRForbiddenView methodsFor: 'accessing' stamp: 'lr 4/4/2009 17:16'!status	^ 403! !!PRNotFoundView class methodsFor: 'testing' stamp: 'lr 9/4/2008 11:49'!isAbstract	^ false! !!PRNotFoundView class methodsFor: 'accessing' stamp: 'lr 9/4/2008 11:49'!label	^ 'Not Found'! !!PRNotFoundView methodsFor: 'rendering' stamp: 'lr 4/4/2009 17:15'!renderErrorOn: html	html paragraph: [ 		html 			text: 'The requested object '; 			code: self session currentRequest url;			text: ' was not found on this server.' ]! !!PRNotFoundView methodsFor: 'rendering-options' stamp: 'lr 5/27/2009 16:03'!renderSearchOn: html	<option: 500>		| widgets |	widgets := self context structure environment embeddedComponents		select: [ :each | each target componentClass includesBehavior: PRSearchWidget ].	widgets isEmpty ifTrue: [ ^ self ].	html listItem: 'Use the search on this page to find what you are looking for.'! !!PRNotFoundView methodsFor: 'accessing' stamp: 'lr 4/4/2009 17:16'!status	^ 404! !!PRChangesView class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRChangesView class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!label	^ 'Changes'! !!PRChangesView methodsFor: 'private' stamp: 'lr 11/20/2007 16:24'!buildReport	^ super buildReport		addColumn: (MACommandColumn new			addCommand: [ :value | self open: value copy ] text: 'open';			yourself);		yourself! !!PRChangesView methodsFor: 'private' stamp: 'lr 11/20/2007 16:16'!isVisible: aContext	^ aContext command isEdit and: [ super isVisible: aContext ]! !!PRDiffView class methodsFor: 'testing' stamp: 'lr 9/28/2009 10:07'!isAbstract	^ false! !!PRDiffView class methodsFor: 'accessing' stamp: 'lr 9/28/2009 10:07'!label	^ 'Diff'! !!PRDiffView methodsFor: 'private' stamp: 'lr 9/28/2009 10:23'!buildList	"Answer a list of all edit contexts in the receiver that are visible."	^ ((self context kernel persistency historyFor: self context structure) 		select: [ :each | self isVisible: each ])		reversed! !!PRDiffView methodsFor: 'accessing' stamp: 'lr 9/28/2009 10:05'!children	^ #()! !!PRDiffView methodsFor: 'accessing' stamp: 'lr 9/28/2009 10:10'!contexts	^ contexts ifNil: [ contexts := self buildList ]! !!PRDiffView methodsFor: 'testing' stamp: 'lr 9/28/2009 11:58'!isVisible: aContext	^ aContext command isEdit and: [ super isVisible: aContext ]! !!PRDiffView methodsFor: 'private' stamp: 'lr 9/28/2009 15:22'!labelFor: aContext	^ String streamContents: [ :stream |		stream print: aContext command date; space.		stream print: aContext command time; space.		(aContext respondsTo: #user)			ifTrue: [ stream nextPut: $(; nextPutAll: aContext user name; nextPut: $) ] ]! !!PRDiffView methodsFor: 'rendering' stamp: 'lr 9/28/2009 10:07'!renderContentOn: html	self renderSelectorOn: html.	self renderDiffOn: html! !!PRDiffView methodsFor: 'rendering' stamp: 'lr 9/28/2009 19:41'!renderDiffOn: html	| someContext sourceString targetString |	(sourceContext isNil and: [ targetContext isNil ])		ifTrue: [ ^ self ].	someContext := sourceContext isNil		ifTrue: [ targetContext ]		ifFalse: [ sourceContext ].	html table: [		someContext command description do: [ :desc |			html tableRow: [				html tableHeading: desc label.				html tableData: [					sourceString := sourceContext isNil						ifFalse: [ desc toString: (sourceContext command readUsing: desc) ].					targetString := targetContext isNil						ifFalse: [ desc toString: (targetContext command readUsing: desc) ].					html render: (PRWordDiffAlgorithm from: sourceString to: targetString) ] ] ] ]! !!PRDiffView methodsFor: 'rendering' stamp: 'lr 9/28/2009 15:16'!renderSelectorOn: html	html form: [		html table: [			html tableRow: [				html tableHeading: 'Source'.				html tableHeading: 'Target'.				html tableHeading ].			html tableRow: [				html tableData: [					html select						list: self contexts;						selected: self sourceContext;						labels: [ :value | self labelFor: value ];						callback: [ :value | sourceContext := value ] ].				html tableData: [					html select						list: self contexts;						selected: self targetContext;						labels: [ :value | self labelFor: value ];						callback: [ :value | targetContext := value ] ].				html tableData: [					html submitButton: 'update' ] ] ] ]! !!PRDiffView methodsFor: 'accessing' stamp: 'lr 9/28/2009 10:10'!sourceContext	^ sourceContext ifNil: [ sourceContext := self contexts at: 2 ifAbsent: [ nil ] ]! !!PRDiffView methodsFor: 'accessing' stamp: 'lr 9/28/2009 10:10'!targetContext	^ targetContext ifNil: [ targetContext := self contexts at: 1 ifAbsent: [ nil ] ]! !!PRHistoryView methodsFor: 'actions' stamp: 'lr 11/20/2007 16:20'!apply: aContext	aContext command execute! !!PRHistoryView methodsFor: 'private' stamp: 'lr 3/9/2006 11:30'!buildDescription	^ PRContext description! !!PRHistoryView methodsFor: 'private' stamp: 'lr 9/28/2009 10:05'!buildList	^ Array streamContents: [ :stream |		self context kernel persistency reverseDo: [ :each | 			(self isVisible: each)				ifTrue: [ stream nextPut: each ] ] ]! !!PRHistoryView methodsFor: 'private' stamp: 'lr 3/9/2006 11:30'!buildReport	^ (MAReport rows: self buildList description: self buildDescription)		sortEnabled: false;		batchSize: 20;		yourself! !!PRHistoryView methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!children	^ Array with: self report! !!PRHistoryView methodsFor: 'testing' stamp: 'lr 10/2/2008 16:08'!isVisible: aContext	^ (aContext structure parents includes: self context structure) and: [ aContext isValidCommand: aContext structure viewCommandClass ]! !!PRHistoryView methodsFor: 'actions' stamp: 'lr 3/20/2008 11:32'!open: aContext	(self context isValidCommand: aContext command class)		ifFalse: [ self inform: 'Unable to open ' , aContext command label printString , ' in the current context.' ]		ifTrue: [ self context: aContext ]! !!PRHistoryView methodsFor: 'rendering' stamp: 'lr 3/9/2006 11:30'!renderContentOn: html	html render: self report! !!PRHistoryView methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!report	^ report ifNil: [ report := self buildReport ]! !!PRLogView class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRLogView class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!label	^ 'Log'! !!PRDownloadView class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRDownloadView class methodsFor: 'testing' stamp: 'lr 1/29/2007 17:10'!isValidIn: aContext	^ (super isValidIn: aContext) and: [ aContext structure isFile ]! !!PRDownloadView class methodsFor: 'converting' stamp: 'lr 3/9/2006 11:30'!label	^ 'Download'! !!PRDownloadView methodsFor: 'accessing' stamp: 'lr 1/20/2007 18:47'!file	^ self context structure file! !!PRDownloadView methodsFor: 'rendering' stamp: 'lr 4/4/2009 10:49'!renderWithContext: aRenderingContext	self session		returnResponse: (WAResponse new			redirectTo: (self file urlFor: aRenderingContext);			cacheForever;			status: 301;			yourself)! !!PRPlainView class methodsFor: 'testing' stamp: 'lr 2/6/2007 18:58'!isAbstract	^ false! !!PRPlainView class methodsFor: 'testing' stamp: 'lr 2/6/2007 18:58'!isValidIn: aContext	^ (super isValidIn: aContext) and: [ aContext structure hasDocument ]! !!PRPlainView class methodsFor: 'converting' stamp: 'lr 2/6/2007 18:58'!label	^ 'Text'! !!PRPlainView methodsFor: 'rendering' stamp: 'lr 3/17/2009 15:49'!renderContentOn: aResponse	aResponse contentType: 'text/plain'.	PRTextWriter		write: self context structure document		to: aResponse stream! !!PRRawView methodsFor: 'testing' stamp: 'lr 7/13/2009 20:55'!isRestful	^ true! !!PRRawView methodsFor: 'rendering' stamp: 'lr 11/10/2008 22:18'!renderWithContext: aRenderingContext	| response |	response := WAResponse new.	response cacheForever.	self renderContentOn: response.	self session returnResponse: response! !!PRWikiView class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRWikiView class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isValidIn: aContext	^ (super isValidIn: aContext) and: [ aContext structure hasDocument ]! !!PRWikiView class methodsFor: 'converting' stamp: 'lr 3/9/2006 11:30'!label	^ 'Wiki'! !!PRWikiView methodsFor: 'rendering' stamp: 'lr 3/17/2009 15:50'!renderContentOn: aResponse	| structure |	structure := self context structure.	aResponse contentType: 'text/plain'.	aResponse stream nextPutAll: (structure class descriptionDocument 		toString: structure document)! !!PRSearchView class methodsFor: 'testing' stamp: 'lr 9/12/2009 11:40'!isAbstract	^ false! !!PRSearchView class methodsFor: 'accessing' stamp: 'lr 9/12/2009 11:40'!label	^ 'Search'! !!PRSearchView methodsFor: 'testing' stamp: 'lr 9/12/2009 16:47'!hasSearchForm	^ hideForm not! !!PRSearchView methodsFor: 'testing' stamp: 'lr 9/12/2009 16:52'!hasSearchResults	^ self hasValidQuery and: [ self items notEmpty ]! !!PRSearchView methodsFor: 'testing' stamp: 'lr 9/12/2009 16:52'!hasValidQuery	^ self query notNil and: [ self query notEmpty ]! !!PRSearchView methodsFor: 'actions' stamp: 'lr 9/12/2009 13:05'!hideForm	hideForm := true! !!PRSearchView methodsFor: 'initialization' stamp: 'lr 9/12/2009 11:36'!initialRequest: aRequest	super initialRequest: aRequest.	aRequest fields 		at: self queryFieldName		ifPresent: [ :value | self query: value ]! !!PRSearchView methodsFor: 'initialization' stamp: 'lr 9/12/2009 13:05'!initialize	super initialize.	hideForm := false.	items := OrderedCollection new! !!PRSearchView methodsFor: 'testing' stamp: 'lr 9/12/2009 11:34'!isRestful	^ true! !!PRSearchView methodsFor: 'accessing-readonly' stamp: 'lr 9/12/2009 16:52'!items	^ items! !!PRSearchView methodsFor: 'accessing' stamp: 'lr 9/12/2009 16:52'!query	^ query! !!PRSearchView methodsFor: 'accessing' stamp: 'lr 9/12/2009 11:46'!query: aString	query := aString.	self refresh! !!PRSearchView methodsFor: 'configuration' stamp: 'lr 9/12/2009 11:36'!queryFieldName	^ 'query'! !!PRSearchView methodsFor: 'actions' stamp: 'lr 9/12/2009 16:53'!refresh	| searcher |	items := OrderedCollection new.	self hasValidQuery ifFalse: [ ^ self ].	searcher := self context root fullTextSearch.	(self query findTokens: Character space) do: [ :token | 		(token notEmpty and: [ token first = $+ ]) 			ifTrue: [ searcher acceptToken: token allButFirst ]			ifFalse: [				(token notEmpty and: [ token first = $- ]) 					ifTrue: [ searcher rejectToken: token allButFirst ]					ifFalse: [ searcher acceptToken: token ] ] ].	self items addAll: (searcher select: [ :structure | 		structure parents allSatisfy: [ :parent | 			(self context structure: parent) isValid ] ])! !!PRSearchView methodsFor: 'rendering' stamp: 'lr 9/12/2009 18:54'!renderContentOn: html	self hasSearchForm		ifTrue: [ self renderFormOn: html ].	(self query isNil or: [ self items notEmpty ])		ifTrue: [ self renderResultOn: html ]		ifFalse: [ self renderNoResultOn: html ]! !!PRSearchView methodsFor: 'rendering' stamp: 'lr 9/12/2009 16:54'!renderFormOn: html	html form class: 'search-form'; with: [		html label: [			html span: 'Enter your keywords: '.			html textInput				value: self query;				callback: [ :value | self query: value ].			html submitButton: 'Search' ] ]! !!PRSearchView methodsFor: 'rendering' stamp: 'lr 9/12/2009 16:50'!renderNoResultOn: html	html paragraph: 'Your search yielded no results.'.	html unorderedList: [		html listItem: 'Check if your spelling is correct.'.		html listItem: 'Consider loosening your query by removing words.' ]! !!PRSearchView methodsFor: 'rendering' stamp: 'lr 9/12/2009 16:53'!renderResultOn: html	self items isEmpty 		ifTrue: [ ^ self ].	html definitionList class: 'search-result'; with: [		self items do: [ :structure |			html definitionTerm: [				html anchor					goto: (self context structure: structure);					with: structure title ].			html definitionData: (self summaryOf: structure) ] ]! !!PRSearchView methodsFor: 'private' stamp: 'lr 9/12/2009 12:43'!summaryOf: aStructure	| input output |	aStructure description do: [ :description |		description isDocumentDescription ifTrue: [			output := WriteStream on: String new.			input := (PRTextWriter write: (aStructure readUsing: description)) readStream.			[ input atEnd ] whileFalse: [				output nextPutAll: (input upTo: $<).				input upTo: $> ].			self summarySize isNil ifFalse: [				output position: (output size min: self summarySize).				output atEnd					ifFalse: [ output nextPutAll: '...' ] ].			^ output contents ] ].	^ nil! !!PRSearchView methodsFor: 'configuration' stamp: 'lr 9/12/2009 12:42'!summarySize	^ 256! !!PRSearchView methodsFor: 'updating' stamp: 'lr 9/12/2009 16:52'!updateUrl: anUrl 	super updateUrl: anUrl.	self hasValidQuery ifTrue: [ 		anUrl 			addParameter: self queryFieldName			value: self query ]! !!PRViewComponent class methodsFor: 'testing' stamp: 'lr 3/17/2009 17:28'!isListed	^ true! !!PRViewComponent class methodsFor: 'testing' stamp: 'lr 6/11/2009 09:22'!isValidIn: aContext	"Verify that a view as a meaning for the context aContext. Override this message, to add new tests, but do not forget to call this super implementation."	^ self isAbstract not and: [ aContext structure isValidView: self in: aContext ]! !!PRViewComponent class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:30'!on: aContext	^ self new		setContext: aContext;		yourself! !!PRViewComponent methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!context	^ context! !!PRViewComponent methodsFor: 'accessing' stamp: 'lr 9/12/2007 18:18'!cssClass	"Answer a CSS class that should be used in the body-tag when this view is displayed."	^ self class fullName asLowercase allButFirst: 2! !!PRViewComponent methodsFor: 'private' stamp: 'lr 5/2/2009 10:05'!find: aStructureClass	^ self context structure findAncestor: [ :each | each isKindOf: aStructureClass ]! !!PRViewComponent methodsFor: 'testing' stamp: 'lr 7/13/2009 20:55'!isRestful	^ false! !!PRViewComponent methodsFor: 'accessing' stamp: 'lr 1/29/2008 09:06'!label	^ self class label! !!PRViewComponent methodsFor: 'rendering' stamp: 'lr 3/9/2006 11:30'!renderContentOn: html	html strong: self context! !!PRViewComponent methodsFor: 'accessing' stamp: 'lr 4/8/2009 20:17'!rendererInstance	^ PRViewRenderer new! !!PRViewComponent methodsFor: 'accessing' stamp: 'lr 2/28/2007 16:04'!robots	^ 'noindex,nofollow'! !!PRViewComponent methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:30'!setContext: aContext	context := aContext! !!PRViewComponent methodsFor: 'updating' stamp: 'lr 8/11/2007 08:28'!updateRoot: aHtmlRoot	super updateRoot: aHtmlRoot.	aHtmlRoot bodyAttributes addClass: self cssClass! !!PRBatcherWidget class methodsFor: 'accessing-descriptions' stamp: 'lr 3/26/2009 22:34'!descriptionShowFirstLast	^ MABooleanDescription new		parameterName: 'show-first-last';		checkboxLabel: 'First/Last';		accessor: #showFirstLast;		label: 'Show Links';		default: true;		priority: 100;		yourself! !!PRBatcherWidget class methodsFor: 'accessing-descriptions' stamp: 'lr 3/26/2009 22:34'!descriptionShowNumbers	^ MABooleanDescription new		parameterName: 'show-numbers';		checkboxLabel: 'Numbers';		accessor: #showNumbers;		default: true;		priority: 230;		yourself! !!PRBatcherWidget class methodsFor: 'accessing-descriptions' stamp: 'lr 3/26/2009 22:34'!descriptionShowPreviousNext	^ MABooleanDescription new		parameterName: 'show-previous-next';		checkboxLabel: 'Previous/Next';		accessor: #showPreviousNext;		default: true;		priority: 210;		yourself! !!PRBatcherWidget class methodsFor: 'testing' stamp: 'lr 8/22/2007 15:25'!isAbstract	^ false! !!PRBatcherWidget class methodsFor: 'accessing' stamp: 'lr 8/22/2007 15:32'!label	^ 'Batcher'! !!PRBatcherWidget methodsFor: 'accessing' stamp: 'lr 9/12/2007 18:18'!nextSibling	"Answer the next sibling in the current context or nil."	^ self siblings after: self context structure ifAbsent: [ nil ]! !!PRBatcherWidget methodsFor: 'accessing' stamp: 'lr 8/22/2007 15:26'!previousSibling	"Answer the previous sibling in the current context or nil."	^ self siblings before: self context structure ifAbsent: [ nil ]! !!PRBatcherWidget methodsFor: 'rendering' stamp: 'lr 8/24/2008 11:56'!renderContentOn: html 	self siblings isEmpty ifTrue: [ ^ self ].	(self read: #descriptionShowFirstLast) ifTrue: 		[ self 			renderLabel: '|<'			class: 'first'			structure: self siblings first			on: html ].	(self read: #descriptionShowPreviousNext) ifTrue: 		[ self 			renderLabel: '<<'			class: 'previous'			structure: self previousSibling			on: html ].	(self read: #descriptionShowNumbers) ifTrue: 		[ self siblings keysAndValuesDo: 			[ :index :each | 			self 				renderLabel: index				class: 'number'				structure: each				on: html ] ].	(self read: #descriptionShowPreviousNext) ifTrue: 		[ self 			renderLabel: '>>'			class: 'next'			structure: self nextSibling			on: html ].	(self read: #descriptionShowFirstLast) ifTrue: 		[ self 			renderLabel: '>|'			class: 'last'			structure: self siblings last			on: html ]! !!PRBatcherWidget methodsFor: 'rendering' stamp: 'lr 9/12/2007 18:18'!renderLabel: aString class: aCssString structure: aStructure on: html	| active |	active := self context structure = aStructure.	(active or: [ aStructure isNil ])		ifTrue: [			html span				class: aCssString;				class: 'active' if: active;				with: aString ]		ifFalse: [			html anchor				class: aCssString;				title: aStructure title;				goto: (self context structure: aStructure);				with: aString ].	html text: ' '! !!PRBatcherWidget methodsFor: 'accessing' stamp: 'lr 9/12/2007 18:18'!siblings	"Answer an list of siblings in the current context."	^ (self context enumeratorFor: self context structure parent) contents! !!PRContentsWidget class methodsFor: 'descriptions' stamp: 'lr 4/10/2008 14:17'!descriptionHeadAuthor	^ MAStringDescription new		comment: 'The author to appear in the html head.';		accessor: #headAuthor;		label: 'Head Author';		priority: 220;		beSetting;		yourself! !!PRContentsWidget class methodsFor: 'descriptions' stamp: 'lr 4/10/2008 14:17'!descriptionHeadKeywords	^ MAStringDescription new		comment: 'The keywords to appear in the html head.';		accessor: #headKeywords;		label: 'Head Keywords';		default: '%k %t';		priority: 210;		beSetting;		yourself! !!PRContentsWidget class methodsFor: 'descriptions' stamp: 'lr 4/10/2008 14:17'!descriptionHeadTitle	^ MAStringDescription new		comment: 'The title to appear in the browser window.';		accessor: #headTitle;		label: 'Head Title';		default: '%k: %t';		priority: 200;		beSetting;		yourself! !!PRContentsWidget class methodsFor: 'descriptions' stamp: 'lr 4/10/2008 14:17'!descriptionHeading	^ MAStringDescription new		comment: 'The header to appear on before the page contents.';		accessor: #heading;		label: 'Heading';		priority: 110;		yourself! !!PRContentsWidget class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRContentsWidget class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!label	^ 'Contents'! !!PRContentsWidget methodsFor: 'private' stamp: 'lr 3/9/2006 11:30'!buildComponent: aContext	^ aContext command asComponent		onAnswer: [ :value | self onAnswerCommand: value ];		yourself! !!PRContentsWidget methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:30'!children	^ Array with: self component! !!PRContentsWidget methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!component	^ component ifNil: [ component := self buildComponent: self context ]! !!PRContentsWidget methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!component: aComponent	component := aComponent! !!PRContentsWidget methodsFor: 'accessing-properties' stamp: 'lr 10/24/2007 20:36'!headAuthor	^ self expand: (self read: #descriptionHeadAuthor)! !!PRContentsWidget methodsFor: 'accessing-properties' stamp: 'lr 10/24/2007 20:38'!headKeywords	^ self expand: (self read: #descriptionHeadKeywords)! !!PRContentsWidget methodsFor: 'accessing-properties' stamp: 'lr 10/24/2007 20:36'!headTitle	^ self expand: (self read: #descriptionHeadTitle)! !!PRContentsWidget methodsFor: 'accessing-properties' stamp: 'lr 4/23/2007 08:04'!heading	^ self expand: (self read: #descriptionHeading)! !!PRContentsWidget methodsFor: 'events' stamp: 'lr 4/20/2007 14:23'!onAnswerCommand: aCommand	aCommand isNil		ifTrue: [ ^ self context: (self context structure: self context structure) ].	[ aCommand execute ]		on: Error		do: [ :err | ^ self component errors add: err ].	self context: aCommand answer! !!PRContentsWidget methodsFor: 'events' stamp: 'lr 3/9/2006 11:30'!onChangeContext: aContext	super onChangeContext: aContext.	aContext command isQuick		ifTrue: [ self onAnswerCommand: aContext command ]		ifFalse: [ self component: (self buildComponent: aContext) ]! !!PRContentsWidget methodsFor: 'rendering' stamp: 'lr 10/28/2008 12:21'!renderContentOn: html	PRContentsRendered value		ifTrue: [ ^ self ].	PRContentsRendered use: true during: [		self heading isEmptyOrNil ifFalse: [			html heading				level: 1;				class: 'heading';				with: self heading ].		html render: self component ]! !!PRContentsWidget methodsFor: 'accessing-dynamic' stamp: 'lr 5/12/2007 11:40'!states	^ Array with: self! !!PRContentsWidget methodsFor: 'updating' stamp: 'lr 11/3/2007 09:51'!updateRoot: aHtmlRoot	super updateRoot: aHtmlRoot.	aHtmlRoot title: self headTitle.	self context command updateRoot: aHtmlRoot.	self headAuthor isEmptyOrNil ifFalse: [		aHtmlRoot meta			name: 'author';			content: self headAuthor ].	self headKeywords isEmptyOrNil ifFalse: [		aHtmlRoot meta			name: 'keywords';			content: self headKeywords ]! !!PRFileSettings class methodsFor: 'accessing' stamp: 'lr 2/13/2009 20:43'!groupLabel	^ 'Pier Settings'! !!PRFileSettings class methodsFor: 'testing' stamp: 'lr 2/13/2009 20:33'!isAbstract	^ false! !!PRFileSettings class methodsFor: 'accessing' stamp: 'lr 2/13/2009 20:33'!label	^ 'File Settings'! !!PRFileSettings methodsFor: 'accessing' stamp: 'lr 2/13/2009 20:40'!children	^ Array with: component! !!PRFileSettings methodsFor: 'accessing' stamp: 'lr 2/13/2009 20:48'!description	^ MAContainer new		add: (MAStringDescription new			label: 'Base Directory';			accessor: #baseDirectory;			comment: 'Defines the base-directory where the files are stored. If this field is left empty, it default to a subdirectory of of the current image-location.';			yourself);		add: (MAStringDescription new			label: 'Base URL';			accessor: #baseUrl;			comment: 'Defines the base-URL where the files are served from, when using an external web server. if this field is left empty, files are served through the image.';			yourself);		yourself! !!PRFileSettings methodsFor: 'initialization' stamp: 'lr 2/13/2009 20:57'!initialize	super initialize.	component := (self description asComponentOn: self)		addValidatedForm;		yourself! !!PRFileSettings methodsFor: 'accessing' stamp: 'lr 2/13/2009 20:54'!model	^ MAExternalFileModel! !!PRFileSettings methodsFor: 'dispatching' stamp: 'lr 2/13/2009 20:59'!readUsing: aDescription	| result |	result := self model readUsing: aDescription.	^ (result isKindOf: FileDirectory)		ifTrue: [ result pathName ]		ifFalse: [ result ]! !!PRFileSettings methodsFor: 'rendering' stamp: 'lr 2/13/2009 20:40'!renderContentOn: html	html render: self children! !!PRFileSettings methodsFor: 'dispatching' stamp: 'lr 2/13/2009 21:02'!write: anObject using: aDescription	^ self model write: anObject using: aDescription! !!PRHtmlWidget class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:30'!defaultText	^ '<h1>%k</h1><h2>%c</h2>'! !!PRHtmlWidget class methodsFor: 'accessing-descriptions' stamp: 'lr 4/4/2009 18:26'!descriptionText	^ MAMemoDescription new		default: self defaultText;		parameterName: 'text';		accessor: #text;		priority: 100;		label: 'Text';		yourself! !!PRHtmlWidget class methodsFor: 'testing' stamp: 'lr 9/3/2008 13:55'!isAbstract	^ false! !!PRHtmlWidget class methodsFor: 'accessing' stamp: 'lr 7/5/2007 22:37'!label	^ 'HTML'! !!PRHtmlWidget methodsFor: 'rendering' stamp: 'lr 7/5/2007 22:41'!renderContentOn: html	html html: self text! !!PRHtmlWidget methodsFor: 'accessing' stamp: 'lr 7/5/2007 22:37'!text	^ self expand: (self read: #descriptionText)! !!PRKernelSettings class methodsFor: 'accessing' stamp: 'lr 2/13/2009 20:43'!groupLabel	^ 'Pier Settings'! !!PRKernelSettings class methodsFor: 'testing' stamp: 'lr 9/3/2008 13:55'!isAbstract	^ false! !!PRKernelSettings class methodsFor: 'accessing' stamp: 'lr 2/13/2009 20:24'!label	^ 'Kernel Settings'! !!PRKernelSettings methodsFor: 'accessing' stamp: 'lr 9/3/2008 13:53'!children	^ Array with: component! !!PRKernelSettings methodsFor: 'initialization' stamp: 'lr 9/3/2008 13:51'!initialize	super initialize.	component := self kernel asComponent		addValidatedForm;		yourself! !!PRKernelSettings methodsFor: 'rendering' stamp: 'lr 9/3/2008 13:56'!renderContentOn: html	html render: self children! !!PRCommandsWidget class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:30'!defaultCommandClasses	^ (Array withAll: PRCommand withAllConcreteClasses)		sort: [ :a :b | a label caseInsensitiveLessOrEqual: b label ];		yourself! !!PRCommandsWidget class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionCommandClasses	^ MAMultipleOptionDescription new		default: [ self defaultCommandClasses ] asDynamicObject;		options: [ self defaultCommandClasses ] asDynamicObject;		componentClass: MAListCompositonComponent;		reference: MAClassDescription new;		accessor: #commandClasses;		label: 'Command Classes';		priority: 200;		beOrdered;		beDistinct;		beSorted;		yourself! !!PRCommandsWidget class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRCommandsWidget class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!label	^ 'Commands'! !!PRCommandsWidget methodsFor: 'accessing' stamp: 'lr 4/18/2007 14:35'!commandClasses	^ self read: #descriptionCommandClasses! !!PRCommandsWidget methodsFor: 'accessing' stamp: 'lr 8/15/2007 20:51'!items	| commands |	commands := self context commands.	^ self commandClasses select: [ :each | commands includes: each ]! !!PRCommandsWidget methodsFor: 'accessing' stamp: 'lr 4/18/2007 14:58'!labelFor: anObject	^ anObject shortLabel! !!PRCommandsWidget methodsFor: 'rendering' stamp: 'lr 4/18/2007 14:58'!renderItem: aClass on: html	html anchor		class: 'active' if: (self isActive: aClass);		accessKey: aClass accessKey;		goto: (self context			structure: self context structure			command: aClass new);		with: (self labelFor: aClass)! !!PRCommandsWidget methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!selected	^ self context command class! !!PRListWidget class methodsFor: 'accessing' stamp: 'lr 9/3/2008 11:46'!groupLabel	^ 'Pier List'! !!PRListWidget methodsFor: 'testing' stamp: 'lr 2/9/2007 15:00'!isActive: anObject	^ self selected = anObject! !!PRListWidget methodsFor: 'accessing' stamp: 'lr 5/28/2007 16:31'!items	"Answer the list items."	self subclassResponsibility! !!PRListWidget methodsFor: 'accessing' stamp: 'lr 4/18/2007 14:57'!labelFor: anObject	^ anObject! !!PRListWidget methodsFor: 'rendering' stamp: 'lr 1/29/2008 10:25'!renderContentOn: html	| items |	items := self items.	items isEmpty		ifFalse: [ self renderItems: self items on: html ]! !!PRListWidget methodsFor: 'rendering' stamp: 'lr 4/18/2007 14:57'!renderItem: anObject on: html	html render: (self labelFor: anObject)! !!PRListWidget methodsFor: 'rendering' stamp: 'lr 12/18/2007 21:45'!renderItems: aCollection on: html	html unorderedList: [		aCollection do: [ :each |			html listItem: [				self renderItem: each on: html ] ] ]! !!PRListWidget methodsFor: 'accessing' stamp: 'lr 5/28/2007 16:31'!selected	"Answer the selected list item."	self subclassResponsibility! !!PRAjaxSearchWidget class methodsFor: 'accessing-defaults' stamp: 'lr 9/12/2009 12:49'!defaultMaxItems	^ 10! !!PRAjaxSearchWidget class methodsFor: 'accessing-description' stamp: 'lr 9/12/2009 12:49'!descriptionDropdownList	^ nil! !!PRAjaxSearchWidget class methodsFor: 'accessing-descriptions' stamp: 'lr 4/10/2008 14:17'!descriptionExampleText	^ MAStringDescription new		accessor: #exampleText;		default: 'Search';		label: 'Example';		priority: 400;		yourself! !!PRAjaxSearchWidget class methodsFor: 'accessing' stamp: 'lr 9/12/2009 12:49'!groupLabel	^ 'Pier Search'! !!PRAjaxSearchWidget class methodsFor: 'testing' stamp: 'lr 9/12/2009 12:49'!isAbstract	^ false! !!PRAjaxSearchWidget class methodsFor: 'accessing' stamp: 'lr 9/12/2009 12:55'!label	^ 'Search Field (AJAX)'! !!PRAjaxSearchWidget methodsFor: 'accessing-dynamic' stamp: 'lr 9/12/2009 12:49'!dropdownList	^ false! !!PRAjaxSearchWidget methodsFor: 'accessing' stamp: 'lr 6/24/2007 09:51'!exampleText	^ self read: #descriptionExampleText! !!PRAjaxSearchWidget methodsFor: 'private' stamp: 'lr 9/12/2009 12:50'!findItems	^ (self context root fullTextSearch subString: self searchText) contents! !!PRAjaxSearchWidget methodsFor: 'rendering' stamp: 'lr 11/14/2007 21:04'!renderContentOn: html	| inputId autoId |	html textInput		id: (inputId := html nextId);		exampleText: self exampleText;		onEnter: (html autocompleter			alias: (autoId := html nextId);			activate);		callback: [ :value | self searchText: value ].	html div 		script: (html autocompleter			assignTo: autoId;			element: inputId;			onSelected: (self selectionHandlerOn: html);			on: #renderItemsOn: of: self)! !!PRAjaxSearchWidget methodsFor: 'rendering' stamp: 'lr 6/24/2007 10:10'!renderItemsOn: html	html unorderedList: [		self items do: [ :each |			html listItem				passenger: each; " the only difference to the original "				with: [ self renderItem: each on: html ] ] ]! !!PRAjaxSearchWidget methodsFor: 'accessing' stamp: 'lr 9/12/2009 12:49'!searchText	^ searchText ifNil: [ searchText := String new ]! !!PRAjaxSearchWidget methodsFor: 'accessing' stamp: 'lr 9/12/2009 12:49'!searchText: aString	searchText := aString.	items := nil! !!PRAjaxSearchWidget methodsFor: 'private' stamp: 'lr 4/5/2007 17:59'!selectionHandlerOn: html	| structure |	structure := ValueHolder new.	^ html evaluator		callback: [ :value | structure contents: (html context callbacks at: value ifAbsent: [ nil ]) ]			value: (SUStream new				nextPutAll: 'arguments[1].id.match';				argument: SUSortable passengerRegexp;				nextPutAll: '[1]');		callback: [ :script |			self searchText: String new.			structure contents isNil ifFalse: [				script goto: ((self context structure: structure contents)					urlOn: html) ] ]! !!PRAjaxSearchWidget methodsFor: 'accessing-dynamic' stamp: 'lr 9/12/2009 12:49'!unfilteredItems	^ items ifNil: [ items := self findItems ]! !!PRBreadcrumbWidget class methodsFor: 'accessing-defaults' stamp: 'lr 6/27/2007 12:23'!defaultAllButLast	^ false! !!PRBreadcrumbWidget class methodsFor: 'accessing-descriptions' stamp: 'lr 3/26/2009 22:35'!descriptionAllButLast	^ MABooleanDescription new		default: self defaultAllButLast;		parameterName: 'all-but-last';		accessor: #allButLast;		label: 'All But Last';		priority: 300;		yourself! !!PRBreadcrumbWidget class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRBreadcrumbWidget class methodsFor: 'accessing' stamp: 'lr 8/29/2008 11:51'!label	^ 'Breadcrumb'! !!PRBreadcrumbWidget methodsFor: 'accessing' stamp: 'lr 6/27/2007 12:25'!allButLast	^ self read: #descriptionAllButLast! !!PRBreadcrumbWidget methodsFor: 'accessing' stamp: 'lr 6/27/2007 12:26'!unfilteredItems	| items |	items := self context structure parents.	self allButLast ifTrue: [ items := items allButLast ].	^ items! !!PRChildrenWidget class methodsFor: 'accessing-defaults' stamp: 'lr 7/11/2007 11:57'!defaultExpand	^ false! !!PRChildrenWidget class methodsFor: 'accessing-defaults' stamp: 'lr 2/3/2007 13:01'!defaultLevel	^ nil! !!PRChildrenWidget class methodsFor: 'accessing-description' stamp: 'lr 3/26/2009 22:31'!descriptionExpand	^ MABooleanDescription new		default: self defaultExpand;		parameterName: 'expand';		accessor: #expand;		label: 'Expand';		priority: 310;		yourself! !!PRChildrenWidget class methodsFor: 'accessing-description' stamp: 'lr 3/26/2009 22:31'!descriptionLevel	^ MANumberDescription new		default: self defaultLevel;		parameterName: 'level';		accessor: #level;		label: 'Level';		priority: 300;		beInteger;		min: 0;		yourself! !!PRChildrenWidget class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRChildrenWidget class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!label	^ 'Children'! !!PRChildrenWidget methodsFor: 'accessing' stamp: 'lr 7/11/2007 12:03'!expand	^ self read: #descriptionExpand! !!PRChildrenWidget methodsFor: 'accessing' stamp: 'lr 4/18/2007 14:15'!level	^ self read: #descriptionLevel! !!PRChildrenWidget methodsFor: 'rendering' stamp: 'lr 9/25/2007 08:02'!renderItem: aStrucure on: html	| children |	super renderItem: aStrucure on: html.	self expand ifFalse: [ ^ self ].	children := self childrenOf: aStrucure.	children isEmpty		ifFalse: [ self renderItems: children on: html ]! !!PRChildrenWidget methodsFor: 'accessing' stamp: 'lr 9/12/2007 18:18'!unfilteredItems	| structure children |	structure :=  self context structure.	self level isNil ifFalse: [		^ self childrenOf: (structure parents			at: self level			ifAbsent: [ ^ #() ]) ].	children := self childrenOf: structure.	^ (children isEmpty and: [ structure isRoot not ])		ifTrue: [ self childrenOf: structure parent ]		ifFalse: [ children ]! !!PRNavigationWidget class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRNavigationWidget class methodsFor: 'accessing' stamp: 'lr 2/14/2008 14:19'!label	^ 'Navigation'! !!PRNavigationWidget methodsFor: 'rendering' stamp: 'lr 4/23/2007 07:44'!renderContentOn: html	self renderParents: self context structure parents on: html! !!PRNavigationWidget methodsFor: 'rendering' stamp: 'lr 2/9/2007 19:37'!renderParents: aCollection on: html	html unorderedList: [		html listItem: [			self renderItem: aCollection first on: html.			(aCollection size = 1 or: [ aCollection size = 2 and: [ (self childrenOf: aCollection last) isEmpty ] ])				ifTrue: [ self renderItems: (self childrenOf: aCollection first) on: html ]				ifFalse: [ self renderParents: aCollection allButFirst on: html ] ] ]! !!PRReferencesWidget class methodsFor: 'accessing-defaults' stamp: 'lr 2/9/2007 14:48'!defaultMaxItems	^ 10! !!PRReferencesWidget class methodsFor: 'testing' stamp: 'lr 4/16/2007 13:39'!isAbstract	^ false! !!PRReferencesWidget class methodsFor: 'accessing' stamp: 'lr 4/16/2007 13:39'!label	^ 'References'! !!PRReferencesWidget methodsFor: 'accessing' stamp: 'lr 4/29/2009 16:42'!unfilteredItems	^ ((self context root incomingReferences		to: self context structure;		collect: [ :each | each owner ])		select: [ :each | each notNil ])			asSet! !!PRStructuresWidget class methodsFor: 'accessing-defaults' stamp: 'lr 4/18/2007 14:01'!defaultDropdownList	^ false! !!PRStructuresWidget class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:30'!defaultFilter	^ Array new! !!PRStructuresWidget class methodsFor: 'accessing-defaults' stamp: 'lr 5/3/2006 17:28'!defaultLabel	^ self defaultLabels first! !!PRStructuresWidget class methodsFor: 'accessing-defaults' stamp: 'lr 6/22/2007 18:34'!defaultLabels	^ #( menu title name )! !!PRStructuresWidget class methodsFor: 'accessing-defaults' stamp: 'lr 2/3/2007 13:07'!defaultMaxItems	^ nil! !!PRStructuresWidget class methodsFor: 'accessing-description' stamp: 'lr 3/26/2009 22:35'!descriptionDropdownList	^ MABooleanDescription new		comment: 'Displays the structures as a dropdown list';		default: self defaultDropdownList;		parameterName: 'dropdown-list';		accessor: #dropdownList;		label: 'Dropdown List';		priority: 270;		yourself! !!PRStructuresWidget class methodsFor: 'accessing-description' stamp: 'lr 11/25/2008 09:22'!descriptionFilter	^ MAMultipleOptionDescription new		default: [ PRStructure withAllConcreteClasses ] asDynamicObject;		options: [ PRStructure withAllConcreteClasses ] asDynamicObject;		comment: 'The types of structures not to display.';		componentClass: MAMultiselectListComponent;		reference: MAClassDescription new;		default: self defaultFilter;		accessor: #filter;		label: 'Filter';		priority: 210;		beSorted;		yourself! !!PRStructuresWidget class methodsFor: 'accessing-description' stamp: 'lr 11/25/2008 09:22'!descriptionLabel	^ MASingleOptionDescription new		comment: 'The label to be used to name structures.';		options: self defaultLabels;		default: self defaultLabel;		accessor: #label;		label: 'Label';		priority: 200;		beRequired;		beSorted;		yourself! !!PRStructuresWidget class methodsFor: 'accessing-description' stamp: 'lr 3/26/2009 22:35'!descriptionMaxItems	^ MANumberDescription new		comment: 'The maximum number of items to be displayed.';		default: self defaultMaxItems;		parameterName: 'max-items';		accessor: #maxItems;		label: 'Max Items';		priority: 230;		beInteger;		min: 1;		yourself! !!PRStructuresWidget methodsFor: 'private' stamp: 'lr 4/23/2007 07:53'!childrenOf: aStructure	^ (self context enumeratorFor: aStructure) reject: [ :each | self isFiltered: each ]! !!PRStructuresWidget methodsFor: 'accessing-settings' stamp: 'lr 4/18/2007 14:45'!dropdownList	^ self read: #descriptionDropdownList! !!PRStructuresWidget methodsFor: 'accessing-settings' stamp: 'lr 4/18/2007 14:13'!filter	^ self read: #descriptionFilter! !!PRStructuresWidget methodsFor: 'testing' stamp: 'lr 11/25/2008 09:17'!isFiltered: aStructure	"Test if aStructure should be filtered from the widget:		(1) Do not display if it is hidden from the menus.	(2) Do not display if itself or one of the parents has an invalid view.	(3) Do not display if it is one of the filtered classses."	aStructure hideFromMenus		ifTrue: [ ^ true ].	aStructure parents do: [ :parent |		(self context structure: parent) isValid			ifFalse: [ ^ true ] ].	^ self filter 		anySatisfy: [ :each | aStructure class = each ]! !!PRStructuresWidget methodsFor: 'testing' stamp: 'lr 2/14/2009 16:55'!isPath: aStructure	"Test if aStructure is within the path of the currently active structure."		^ (self isActive: aStructure) not and: [ self selected parents includes: aStructure ]! !!PRStructuresWidget methodsFor: 'accessing' stamp: 'lr 4/18/2007 14:49'!items	| items |	items := self unfilteredItems asArray		reject: [ :each | self isFiltered: each ].	self maxItems isNil		ifFalse: [ items := items first: (items size min: self maxItems) ].	^ items! !!PRStructuresWidget methodsFor: 'accessing-settings' stamp: 'lr 4/18/2007 14:14'!label	^ self read: #descriptionLabel! !!PRStructuresWidget methodsFor: 'accessing' stamp: 'lr 4/18/2007 14:58'!labelFor: aStructure	^ aStructure perform: self label! !!PRStructuresWidget methodsFor: 'accessing-settings' stamp: 'lr 4/18/2007 14:14'!maxItems	^ self read: #descriptionMaxItems! !!PRStructuresWidget methodsFor: 'rendering' stamp: 'lr 5/28/2007 16:31'!renderContentOn: html	self dropdownList		ifTrue: [ self renderSelect: self items on: html ]		ifFalse: [ super renderContentOn: html ]! !!PRStructuresWidget methodsFor: 'rendering' stamp: 'lr 5/24/2009 19:38'!renderItem: aStructure on: html	html anchor		class: 'path' if: (self isPath: aStructure);		class: 'active' if: (self isActive: aStructure);		goto: (self context structure: aStructure);		with: [ html html: (self labelFor: aStructure) ]! !!PRStructuresWidget methodsFor: 'rendering' stamp: 'lr 4/18/2007 15:45'!renderSelect: aCollection on: html	html form: [		html select			list: aCollection;			beSubmitOnChange;			selected: self selected;			labels: [ :each | self labelFor: each ];			callback: [ :each | self context: (self context structure: each) ] ]! !!PRStructuresWidget methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!selected	^ self context structure! !!PRStructuresWidget methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!unfilteredItems	^ self subclassResponsibility! !!PRTreeWidget class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:30'!defaultAutoCollapse	^ true! !!PRTreeWidget class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:30'!defaultAutoExpand	^ true! !!PRTreeWidget class methodsFor: 'accessing-defaults' stamp: 'lr 9/16/2009 11:58'!defaultDisplayRoot	^ true! !!PRTreeWidget class methodsFor: 'accessing-defaults' stamp: 'lr 9/16/2009 11:46'!defaultLevel	^ nil! !!PRTreeWidget class methodsFor: 'accessing-description' stamp: 'lr 3/26/2009 22:32'!descriptionAutoCollapse	^ MABooleanDescription new		comment: 'Automatically collaps structures not currently active.';		default: self defaultAutoCollapse;		parameterName: 'auto-collapse';		accessor: #autoCollapse;		label: 'Auto Collapse';		priority: 310;		yourself! !!PRTreeWidget class methodsFor: 'accessing-description' stamp: 'lr 3/26/2009 22:32'!descriptionAutoExpand	^ MABooleanDescription new		comment: 'Automatically expand to current structure.';		default: self defaultAutoExpand;		parameterName: 'auto-expand';		accessor: #autoExpand;		label: 'Auto Expand';		priority: 300;		yourself! !!PRTreeWidget class methodsFor: 'accessing-description' stamp: 'lr 9/16/2009 11:58'!descriptionDisplayRoot	^ MABooleanDescription new		comment: 'Whether the root node of the tree should be displayed';		default: self defaultDisplayRoot;		parameterName: 'display-root';		accessor: #displayRoot;		label: 'Display Root';		priority: 320;		yourself! !!PRTreeWidget class methodsFor: 'accessing-description' stamp: 'lr 4/18/2007 15:05'!descriptionDropdownList	^ nil! !!PRTreeWidget class methodsFor: 'accessing-description' stamp: 'lr 9/16/2009 11:57'!descriptionLevel	^ MANumberDescription new		comment: 'The level from which the tree should be displayed.';		default: self defaultLevel;		parameterName: 'level';		accessor: #level;		label: 'Level';		priority: 230;		beInteger;		min: 0;		yourself! !!PRTreeWidget class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRTreeWidget class methodsFor: 'converting' stamp: 'lr 3/9/2006 11:30'!label	^ 'Tree'! !!PRTreeWidget methodsFor: 'accessing-properties' stamp: 'lr 4/18/2007 14:16'!autoCollapse	^ self read: #descriptionAutoCollapse! !!PRTreeWidget methodsFor: 'accessing-properties' stamp: 'lr 4/18/2007 14:16'!autoExpand	^ self read: #descriptionAutoExpand! !!PRTreeWidget methodsFor: 'actions' stamp: 'lr 3/9/2006 11:30'!collapseStructure: aStructure	expanded remove: aStructure ifAbsent: [ "should never happen" ]! !!PRTreeWidget methodsFor: 'accessing-properties' stamp: 'lr 9/16/2009 11:58'!displayRoot	^ self read: #descriptionDisplayRoot! !!PRTreeWidget methodsFor: 'accessing-properties' stamp: 'lr 4/18/2007 15:14'!dropdownList	^ false! !!PRTreeWidget methodsFor: 'actions' stamp: 'lr 3/9/2006 11:30'!expandStructure: aStructure	expanded add: aStructure! !!PRTreeWidget methodsFor: 'initialization' stamp: 'lr 5/12/2007 11:40'!initialize	super initialize.	expanded := Set new! !!PRTreeWidget methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isExpanded: aNode	^ expanded includes: aNode! !!PRTreeWidget methodsFor: 'accessing-properties' stamp: 'lr 9/16/2009 11:46'!level	^ self read: #descriptionLevel! !!PRTreeWidget methodsFor: 'events' stamp: 'lr 3/9/2006 11:30'!onChangeContext: aContext	super onChangeContext: aContext.	self autoCollapse		ifTrue: [ expanded removeAll: expanded copy ].	self autoExpand		ifTrue: [ expanded addAll: aContext structure parents ]! !!PRTreeWidget methodsFor: 'rendering' stamp: 'lr 9/16/2009 11:59'!renderContentOn: html	| root |	root := self context root.	self level notNil ifTrue: [		root := self context structure parents			at: self level			ifAbsent: [ ^ self ] ].	self displayRoot		ifFalse: [ self renderStructureChildren: root on: html ]		ifTrue: [ html unorderedList: [ self renderStructure: root on: html ] ]! !!PRTreeWidget methodsFor: 'rendering-items' stamp: 'lr 2/12/2007 19:07'!renderStructure: aStructure on: html	html listItem: [		self renderStructureButton: aStructure on: html.		self renderStructureLabel: aStructure on: html.		self renderStructureChildren: aStructure on: html ]! !!PRTreeWidget methodsFor: 'rendering-items' stamp: 'lr 5/28/2007 16:28'!renderStructureButton: aStructure on: html	| isExpanded |	html span class: 'button'; with: [		(self childrenOf: aStructure) isEmpty			ifTrue: [ html space ]			ifFalse: [				isExpanded := self isExpanded: aStructure.				html anchor					callback: [						isExpanded							ifTrue: [ self collapseStructure: aStructure ]							ifFalse: [ self expandStructure: aStructure ] ];					with: (isExpanded						ifTrue: [ '-' ]						ifFalse: [ '+' ]) ] ]! !!PRTreeWidget methodsFor: 'rendering-items' stamp: 'lr 3/9/2006 11:30'!renderStructureChildren: aStructure on: html	| children |	(self isExpanded: aStructure)		ifFalse: [ ^ self ].	children := self childrenOf: aStructure.	children isEmpty ifTrue: [ ^ self ].	html unorderedList: [		children do: [ :each |			self renderStructure: each on: html ] ]! !!PRTreeWidget methodsFor: 'rendering-items' stamp: 'lr 3/9/2006 11:30'!renderStructureLabel: aStructure on: html	self renderItem: aStructure on: html! !!PRTreeWidget methodsFor: 'accessing' stamp: 'lr 5/12/2007 11:40'!states	^ Array with: expanded! !!PRTreeWidget methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!unfilteredItems	self shouldNotImplement! !!PRVisitedWidget class methodsFor: 'defaults' stamp: 'lr 8/29/2008 11:13'!defaultMaxItems	^ 10! !!PRVisitedWidget class methodsFor: 'accessing-description' stamp: 'lr 3/26/2009 22:33'!descriptionRemoveDuplicates	^ MABooleanDescription new		comment: 'Avoid duplicates in the list';		parameterName: 'remove-duplicates';		accessor: #removeDuplicates;		label: 'Remove Duplicates';		default: true;		priority: 260;		yourself! !!PRVisitedWidget class methodsFor: 'testing' stamp: 'lr 8/29/2008 11:15'!isAbstract	^ false! !!PRVisitedWidget class methodsFor: 'accessing' stamp: 'lr 8/29/2008 11:51'!label	^ 'Visited Pages'! !!PRVisitedWidget methodsFor: 'initialization' stamp: 'lr 8/29/2008 11:15'!initialize	super initialize.	structures := OrderedCollection new! !!PRVisitedWidget methodsFor: 'accessing' stamp: 'lr 8/29/2008 11:24'!items	^ structures! !!PRVisitedWidget methodsFor: 'events' stamp: 'lr 8/29/2008 11:30'!onChangeContext: aContext	super onChangeContext: aContext.	(structures isEmpty or: [ structures last ~= aContext structure ]) ifTrue: [		(self isFiltered: aContext structure) ifFalse: [ 			self removeDuplicates				ifTrue: [ structures remove: aContext structure ifAbsent: [ ] ].			structures addLast: aContext structure ] ].	self maxItems isNil ifFalse: [		[ self maxItems < structures size ]			whileTrue: [ structures removeFirst ] ]! !!PRVisitedWidget methodsFor: 'accessing-settings' stamp: 'lr 8/29/2008 11:30'!removeDuplicates	^ self read: #descriptionRemoveDuplicates! !!PRVisitedWidget methodsFor: 'accessing' stamp: 'lr 8/29/2008 11:58'!unfilteredItems	self shouldNotImplement! !!PRViewsWidget class methodsFor: 'accessing-default' stamp: 'lr 3/17/2009 17:31'!defaultViewClasses	^ ((Array withAll: PRViewComponent withAllConcreteClasses)		select: [ :each | each isListed ])		sort: [ :a :b | a label caseInsensitiveLessOrEqual: b label ];		yourself! !!PRViewsWidget class methodsFor: 'accessing-description' stamp: 'lr 3/26/2009 22:33'!descriptionViewClasses	^ MAMultipleOptionDescription new		default: [ self defaultViewClasses ] asDynamicObject;		options: [ self defaultViewClasses ] asDynamicObject;		componentClass: MAListCompositonComponent;		reference: MAClassDescription new;		accessor: #viewClasses;		label: 'View Classes';		priority: 200;		beOrdered;		beDistinct;		beSorted;		yourself! !!PRViewsWidget class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRViewsWidget class methodsFor: 'converting' stamp: 'lr 3/9/2006 11:30'!label	^ 'Views'! !!PRViewsWidget methodsFor: 'accessing' stamp: 'lr 8/15/2007 20:55'!items	| views |	views := self context views.	^ self viewClasses select: [ :each | views includes: each ]! !!PRViewsWidget methodsFor: 'accessing' stamp: 'lr 4/18/2007 14:59'!labelFor: anObject	^ anObject label! !!PRViewsWidget methodsFor: 'rendering' stamp: 'lr 4/18/2007 14:59'!renderItem: aClass on: html	html anchor		class: 'active' if: (self isActive: aClass);		goto: (self context view: aClass);		with: (self labelFor: aClass)! !!PRViewsWidget methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!selected	^ self context command isView		ifTrue: [ self context command viewComponent class ]! !!PRViewsWidget methodsFor: 'accessing' stamp: 'lr 4/18/2007 14:34'!viewClasses	^ self read: #descriptionViewClasses! !!PRMenuWidget class methodsFor: 'accessing-default' stamp: 'lr 2/14/2008 14:37'!defaultDocument	^ PRDocumentParser parse: '- *Home>/*- *Syntax>/information/syntax*- *About>/information/license*'! !!PRMenuWidget class methodsFor: 'accessing-description' stamp: 'lr 4/4/2009 18:26'!descriptionDocument	^ PRDocumentDescription new		default: self defaultDocument;		parameterName: 'document';		accessor: #document;		label: 'Document';		beRequired;		yourself! !!PRMenuWidget class methodsFor: 'testing' stamp: 'lr 2/14/2008 14:19'!isAbstract	^ false! !!PRMenuWidget class methodsFor: 'accessing' stamp: 'lr 2/14/2008 14:19'!label	^ 'Menu'! !!PRMenuWidget methodsFor: 'accessing' stamp: 'lr 5/26/2009 17:34'!children	^ (PROutgoingReferences on: self document) embeddedComponents 		collect: [ :each | self context componentFor: each ]! !!PRMenuWidget methodsFor: 'accessing' stamp: 'lr 2/14/2008 14:32'!document	^ self read: #descriptionDocument! !!PRMenuWidget methodsFor: 'rendering' stamp: 'lr 8/5/2008 23:45'!renderContentOn: html	| visitor |	visitor := PRMostSpecificInternalLinkVisitor new		visit: self document.	PRMenuRenderer new		target: visitor target;		continue: self document 		in: self on: html! !!PRPersistencySettings class methodsFor: 'accessing' stamp: 'lr 2/13/2009 20:43'!groupLabel	^ 'Pier Settings'! !!PRPersistencySettings class methodsFor: 'testing' stamp: 'lr 9/3/2008 11:59'!isAbstract	^ false! !!PRPersistencySettings class methodsFor: 'accessing' stamp: 'lr 2/13/2009 20:25'!label	^ 'Persistency Settings'! !!PRPersistencySettings methodsFor: 'actions' stamp: 'lr 9/3/2008 12:08'!activate: aClass	self kernel persistency class = aClass		ifFalse: [ self kernel persistency: aClass new ]! !!PRPersistencySettings methodsFor: 'actions' stamp: 'lr 9/4/2009 17:31'!edit: aPersistency	self show: (aPersistency asComponent		addValidatedForm;		yourself)! !!PRPersistencySettings methodsFor: 'rendering' stamp: 'damiencassou 2/18/2009 16:03'!renderContentOn: html	html form: [		html select			labels: [ :each | each label ];			selected: self kernel persistency class;			list: PRPersistency withAllConcreteClasses;			callback: [ :each | self activate: each ].		html space.		html submitButton			with: 'select'.		5 timesRepeat: [ html space ].		html submitButton			callback: [ self edit: self kernel persistency ];			disabled: self kernel persistency description isEmpty;			with: 'edit'.		(self kernel persistency respondsTo: #snapshot) ifTrue: [			html space.			html submitButton				callback: [ self kernel persistency snapshot ];				text: 'snapshot' ] ].	html paragraph: self kernel persistency class comment! !!PRSearchWidget class methodsFor: 'accessing-descriptions' stamp: 'lr 9/12/2009 18:59'!descriptionExampleText	^ MAStringDescription new		parameterName: 'example-button';		accessor: #exampleText;		label: 'Example';		priority: 310;		yourself! !!PRSearchWidget class methodsFor: 'accessing-description' stamp: 'lr 9/12/2009 18:59'!descriptionSearchButton	^ MAStringDescription new		parameterName: 'search-button';		accessor: #searchButton;		label: 'Button';		priority: 300;		yourself! !!PRSearchWidget class methodsFor: 'accessing' stamp: 'lr 9/3/2008 11:46'!groupLabel	^ 'Pier Search'! !!PRSearchWidget class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRSearchWidget class methodsFor: 'accessing' stamp: 'lr 9/3/2008 11:33'!label	^ 'Search Field'! !!PRSearchWidget methodsFor: 'accessing-dynamic' stamp: 'lr 9/12/2009 18:56'!exampleText	^ self read: #descriptionExampleText! !!PRSearchWidget methodsFor: 'accessing' stamp: 'lr 9/12/2009 12:51'!query	^ query! !!PRSearchWidget methodsFor: 'accessing' stamp: 'lr 9/12/2009 13:17'!query: aString	query := aString.	context := self context 		structure: self context structure		view: PRSearchView.	context command viewComponent 		query: aString;		hideForm.	self context: context! !!PRSearchWidget methodsFor: 'rendering' stamp: 'lr 9/12/2009 19:59'!renderContentOn: html	html form class: 'search-widget'; with: [		html textInput			type: 'search';			value: self query;			exampleText: self exampleText;			callback: [ :value | self query: value ].		self searchButton isEmptyOrNil			ifFalse: [ html submitButton: self searchButton ] ]! !!PRSearchWidget methodsFor: 'accessing-dynamic' stamp: 'lr 9/12/2009 18:56'!searchButton	^ self read: #descriptionSearchButton! !!PRTocWidget class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRTocWidget class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!label	^ 'Table of Contents'! !!PRTocWidget methodsFor: 'rendering' stamp: 'lr 4/23/2007 07:44'!renderContentOn: html	PRTocRenderer new		start: self context structure		in: self on: html! !!PRWidget class methodsFor: 'accessing' stamp: 'lr 9/3/2008 11:46'!groupLabel	^ 'Pier Widget'! !!PRWidget methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!context	^ context ifNil: [ context := super context ]! !!PRWidget methodsFor: 'private' stamp: 'lr 4/24/2008 08:28'!expand: aString	^ PRMacroExpander default expand: aString with: self context! !!PRWidget methodsFor: 'accessing' stamp: 'lr 9/4/2009 17:50'!inform: a! !!PRWidget methodsFor: 'initialization' stamp: 'lr 5/26/2009 17:16'!initializeOwner: aStructure link: anInternalLink	super initializeOwner: (owner := aStructure) link: anInternalLink! !!PRWidget methodsFor: 'accessing' stamp: 'lr 9/3/2008 12:01'!kernel	^ self context kernel! !!PRWidget methodsFor: 'events' stamp: 'lr 3/9/2006 11:30'!onChangeContext: aContext	super onChangeContext: aContext.	context := aContext! !!PRWidget methodsFor: 'accessing' stamp: 'lr 11/3/2007 10:00'!owner	"The owning structure where this widget is instantiated and configured from."		^ owner! !!PRWidget methodsFor: 'accessing-properties' stamp: 'lr 4/30/2007 21:00'!properties	^ properties ifNil: [ properties := Dictionary new ]! !!PRWidget methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:30'!propertyAt: aKey	^ self properties at: aKey! !!PRWidget methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:30'!propertyAt: aKey ifAbsent: aBlock	^ self properties at: aKey ifAbsent: aBlock! !!PRWidget methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:30'!propertyAt: aKey ifAbsentPut: aBlock	^ self properties at: aKey ifAbsentPut: aBlock! !!PRWidget methodsFor: 'accessing-properties' stamp: 'lr 3/9/2006 11:30'!propertyAt: aKey put: aValue	^ self properties at: aKey put: aValue! !!PRWidget methodsFor: 'private' stamp: 'lr 4/18/2007 14:55'!read: aSymbol	^ self readUsing: (self class perform: aSymbol)! !!PRWidget methodsFor: 'private-model' stamp: 'lr 4/30/2007 20:59'!readUsing: aDescription	^ self propertyAt: aDescription! !!PRWidget methodsFor: 'rendering' stamp: 'lr 5/28/2007 16:31'!renderContentOn: html	"Note: If you code ends up in here you most certainly need to rename #renderWidgetOn: to #renderContentOn:"	self subclassResponsibility! !!PRWidget methodsFor: 'private-model' stamp: 'lr 4/18/2007 14:55'!write: anObject using: aDescription	^ self propertyAt: aDescription put: anObject! !!WAUrl methodsFor: '*pier-seaside-mapping' stamp: 'lr 8/3/2007 17:43'!adaptToContext: aContext	path := aContext session baseUrl path copy.	aContext structure parents allButFirst		do: [ :each | self path add: each name ].	aContext command updateUrl: self! !!WAUrl methodsFor: '*pier-seaside-mapping' stamp: 'lr 5/28/2008 16:57'!purgeOtherFields	self parameters keys do: [ :each |		(self isSeasideField: each)			ifFalse: [ self parameters removeKey: each ] ]! !!WAUrl methodsFor: '*pier-seaside-mapping' stamp: 'lr 1/21/2007 10:33'!purgeSeasideFields	self parameters keys do: [ :each |		(self isSeasideField: each)			ifTrue: [ self parameters removeKey: each ] ]! !!PRMostSpecificInternalLinkVisitor methodsFor: 'accessing' stamp: 'lr 8/5/2008 23:42'!target	^ target! !!PRMostSpecificInternalLinkVisitor methodsFor: 'visiting' stamp: 'lr 8/5/2008 23:47'!visitInternalLink: anObject	| context structure targetStructure |	context := PRCurrentContext value.	structure := context structure.	targetStructure := anObject target.	((structure parents includes: targetStructure) 		and: [ target isNil or: [ targetStructure parents includes: target ] ])			ifTrue: [ target := targetStructure ]! !!PRDeepRenderer methodsFor: 'initialization' stamp: 'lr 4/19/2007 00:20'!initialize	super initialize.	visited := OrderedCollection new! !!PRDeepRenderer methodsFor: 'private' stamp: 'lr 4/7/2009 00:29'!linkRendererFor: aLink	"Answer an instance of the most appropriate renderer for this link. If the link is internal and embedded, avoid the embedding and simply create a reference."	| class |	class := aLink isBroken		ifTrue: [ PRBrokenRenderer ]		ifFalse: [			(aLink isEmbedded not				or: [ aLink isInternal				and: [ aLink target hasDocument				and: [ visited includes: aLink target ] ] ])					ifTrue: [ PRReferenceRenderer ]					ifFalse: [ PREmbeddedRenderer ] ].	^ class parent: self! !!PRDeepRenderer methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:30'!start: anObject	visited := OrderedCollection new.	super start: anObject! !!PRDeepRenderer methodsFor: 'public' stamp: 'lr 4/7/2009 00:02'!structure: aStructure during: aBlock	"Always go through this method when rendering a structure. This allows the system to remember the currently rendered structures and avoid deadly recursion as well as enables plugins to intercept when the different parts of a page are rendered."		visited addLast: aStructure.	^ aBlock ensure: [ visited removeLast ]! !!PRDeepRenderer methodsFor: 'visiting-structure' stamp: 'lr 5/19/2009 10:58'!visitStructure: aStructure	self 		structure: aStructure		during: [ self visit: aStructure document ]! !!PRDeepRenderer methodsFor: 'private' stamp: 'lr 5/19/2009 11:19'!visitsOf: anObject	^ visited occurrencesOf: anObject! !!PRTocRenderer methodsFor: 'utilities' stamp: 'lr 3/9/2006 11:30'!enable: aBoolean while: aBlock	| old |	old := enabled. enabled := aBoolean.	aBlock ensure: [ enabled := old ]! !!PRTocRenderer methodsFor: 'utilities' stamp: 'lr 3/9/2006 11:30'!ifEnabledDo: aBlock	enabled ifTrue: [ aBlock value ]! !!PRTocRenderer methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!level: anInteger	| value |	value := anInteger min: 6 max: 1.	value < current ifTrue: [		anInteger + 1 to: current do: [ :index |			counter at: index put: 0 ] ].	counter		at: (current := value)		put: (counter at: value) + 1! !!PRTocRenderer methodsFor: 'visiting' stamp: 'lr 9/24/2008 11:00'!start: anObject	enabled := false. current := 1.	counter := Array new: 6 withAll: 0.	html unorderedList		class: 'toc';		with: [ super start: anObject ]! !!PRTocRenderer methodsFor: 'visiting-document' stamp: 'lr 9/24/2008 11:02'!visitHeader: anObject	self level: anObject level.	html listItem class: 'toc-level-' , anObject level asString; with: [		html anchor url: '#' , anObject hash asString; with: [			html span class: 'toc-number'; with: [				(counter first: current)					do: [ :each | html render: each; text: '.' ] ].			html text: ' '.			html span class: 'toc-contents'; with: [				self					enable: true					while: [ super visitHeader: anObject ] ] ] ]! !!PRTocRenderer methodsFor: 'visiting-document' stamp: 'lr 3/9/2006 11:30'!visitText: anObject	self ifEnabledDo: [ html text: anObject text ]! !!PRTocRenderer methodsFor: 'visiting-document' stamp: 'lr 2/2/2009 22:37'!visitValueLink: anObject	self ifEnabledDo: [ super visitValueLink: anObject ]! !!PRMenuRenderer methodsFor: 'accessing' stamp: 'tg 4/4/2009 15:47'!target: aStructure	withinContent := true.	target := aStructure! !!PRMenuRenderer methodsFor: 'visiting-links' stamp: 'lr 4/4/2009 11:47'!visitInternalLink: aLink	| link |	link := aLink copy.	link target = target ifTrue: [		link			parameterAt: 'class'			put: (aLink				parameterAt: 'class'				ifAbsent: [ String new ]) , ' active' ].	super visitInternalLink: link! !!PRViewRenderer class methodsFor: 'initialization' stamp: 'lr 5/2/2009 15:05'!initialize	TextEntities := OrderedCollection new.	TextEntities		add: '(r)' -> '&reg;';		add: '(R)' -> '&reg;';		add: '(c)' -> '&copy;';		add: '(C)' -> '&copy;';		add: '--' -> '&mdash;';		add: '''''' -> '&rdquo;';		add: '''' -> '&rsquo;';		add: '``' -> '&ldquo;';		add: '`' -> '&lsquo;'! !!PRViewRenderer methodsFor: 'initialization' stamp: 'lr 11/13/2007 14:05'!initialize	super initialize.	withinContent := false! !!PRViewRenderer methodsFor: 'visiting-document' stamp: 'lr 5/5/2009 09:10'!visitAnchor: anObject	html anchor name: (anObject name		select: [ :each | each isAlphaNumeric ])! !!PRViewRenderer methodsFor: 'visiting-document' stamp: 'lr 5/26/2009 22:20'!visitAnnotatedParagraph: anObject	html paragraph		class: 'annotated';		class: anObject annotation;		with: [ self visitAll: anObject children ]! !!PRViewRenderer methodsFor: 'visiting-formats' stamp: 'lr 3/30/2007 20:23'!visitBoldFormat: anObject	html strong: [ super visitBoldFormat: anObject ]! !!PRViewRenderer methodsFor: 'visiting-document' stamp: 'lr 12/30/2007 23:14'!visitDataItem: anObject	html definitionData: [ self visitAll: anObject children ]! !!PRViewRenderer methodsFor: 'visiting-document' stamp: 'lr 12/30/2007 21:54'!visitDefinitionList: anObject	html definitionList: [ super visitDefinitionList: anObject ]! !!PRViewRenderer methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 15:11'!visitEmptyParagraph: anObject	"This is simple."! !!PRViewRenderer methodsFor: 'visiting-document' stamp: 'lr 5/12/2007 20:59'!visitHeader: anObject	html heading level: anObject level; with: [		html anchor name: anObject hash.		super visitHeader: anObject ]! !!PRViewRenderer methodsFor: 'visiting-document' stamp: 'lr 3/9/2006 11:30'!visitHorizontalRule: anObject	html horizontalRule! !!PRViewRenderer methodsFor: 'visiting-formats' stamp: 'lr 3/30/2007 20:24'!visitItalicFormat: anObject	html emphasis: [ super visitItalicFormat: anObject ]! !!PRViewRenderer methodsFor: 'visiting-document' stamp: 'lr 12/20/2007 15:10'!visitLineBreak: anObject	html text: ' '! !!PRViewRenderer methodsFor: 'visiting-links' stamp: 'lr 3/24/2009 23:07'!visitLink: anObject	(self linkRendererFor: anObject)		start: anObject 		in: component		on: html! !!PRViewRenderer methodsFor: 'visiting-document' stamp: 'lr 12/9/2007 17:13'!visitListItem: anObject	html listItem: [ super visitListItem: anObject ]! !!PRViewRenderer methodsFor: 'visiting-formats' stamp: 'lr 12/30/2009 13:54'!visitMonospaceFormat: anObject	html code: anObject text! !!PRViewRenderer methodsFor: 'visiting-document' stamp: 'lr 12/9/2007 17:13'!visitOrderedList: anObject	html orderedList: [ super visitOrderedList: anObject ]! !!PRViewRenderer methodsFor: 'visiting-document' stamp: 'lr 8/30/2008 08:00'!visitParagraph: anObject	"Rendering paragraphs is tricky, when requiring (mostly) valid XHTML and full accessibility.	# Paragraphs appearing within the environment are ignored alltogether.# Other paragraphs are created using the normal XHTML paragraph markup."	withinContent		ifFalse: [ ^ super visitParagraph: anObject ].	html paragraph: [ super visitParagraph: anObject ]! !!PRViewRenderer methodsFor: 'visiting-document' stamp: 'lr 5/27/2009 22:29'!visitPreformatted: anObject	html preformatted: [		anObject children			do: [ :each | html text: each text ]			separatedBy: [ html text: String crlf ] ]! !!PRViewRenderer methodsFor: 'visiting-formats' stamp: 'lr 12/9/2007 17:06'!visitStrikethroughFormat: anObject	html deleted: [ super visitStrikethroughFormat: anObject ]! !!PRViewRenderer methodsFor: 'visiting-formats' stamp: 'lr 5/20/2008 08:41'!visitSubscriptFormat: anObject	html subscript: [ super visitSubscriptFormat: anObject ]! !!PRViewRenderer methodsFor: 'visiting-formats' stamp: 'lr 5/20/2008 08:41'!visitSuperscriptFormat: anObject	html superscript: [ super visitSuperscriptFormat: anObject ]! !!PRViewRenderer methodsFor: 'visiting-document' stamp: 'lr 12/9/2007 17:12'!visitTable: anObject	html table: [ super visitTable: anObject ]! !!PRViewRenderer methodsFor: 'visiting-document' stamp: 'lr 8/14/2008 09:03'!visitTableCell: anObject	(anObject isHeading ifTrue: [ html tableHeading ] ifFalse: [ html tableData ])		style: (anObject align isNil ifFalse: [ 'text-align: ' , anObject align ]);		with: [ super visitTableCell: anObject ]! !!PRViewRenderer methodsFor: 'visiting-document' stamp: 'lr 12/9/2007 17:12'!visitTableRow: anObject	html tableRow: [ super visitTableRow: anObject ]! !!PRViewRenderer methodsFor: 'visiting-document' stamp: 'lr 12/30/2007 23:14'!visitTermItem: anObject	html definitionTerm: [ self visitAll: anObject children ]! !!PRViewRenderer methodsFor: 'visiting-document' stamp: 'lr 4/23/2009 22:21'!visitText: anObject	html html: (TextEntities inject: anObject text into: [ :text :assoc | text copyReplaceAll: assoc key with: assoc value ])! !!PRViewRenderer methodsFor: 'visiting-formats' stamp: 'lr 12/9/2007 17:06'!visitUnderlineFormat: anObject	html inserted: [ super visitUnderlineFormat: anObject ]! !!PRViewRenderer methodsFor: 'visiting-document' stamp: 'lr 12/9/2007 17:12'!visitUnorderedList: anObject	html unorderedList: [ super visitUnorderedList: anObject ]! !!PRViewRenderer methodsFor: 'accessing' stamp: 'lr 11/13/2007 14:04'!withinContentDo: aBlock	"Change to the contents mode, e.g. paragraphs are no longer rendered as div but as meaningful XHTML paragraphs."		| previous |	previous := withinContent. withinContent := true.	^ aBlock ensure: [ withinContent := previous ]! !!PRBrokenRenderer methodsFor: 'private' stamp: 'lr 3/24/2009 22:37'!anchorFor: aLink	^ (super anchorFor: aLink)		class: 'broken';		yourself! !!PRBrokenRenderer methodsFor: 'visiting-document' stamp: 'lr 11/3/2009 21:56'!visitInternalLink: aLink	"Allow users to add new content, if they have the appropriate permissions."	| lookup context |	lookup := self context structure		lookupIncompletePath: aLink reference.	context := self context		structure: lookup key		command: PRAddCommand new.	context command		link: aLink;		suggestName: lookup value.	(self anchorFor: aLink)		goto: context;		with: [ self visitLink: aLink ]! !!PRLinkRenderer class methodsFor: 'instance-creation' stamp: 'lr 3/24/2009 21:31'!parent: aVisitor	^ self new setParent: aVisitor! !!PRLinkRenderer methodsFor: 'private' stamp: 'lr 5/2/2009 21:41'!anchorFor: aLink	"Answer a default anchor for aLink."		| anchor |	anchor := html anchor.	anchor attributes: (self attributesFor: aLink).	anchor attributes at: 'title' ifAbsentPut: [ aLink title ].	^ anchor! !!PRLinkRenderer methodsFor: 'private' stamp: 'lr 3/27/2009 11:13'!attributeNames	"Answer a list of valid HTML attributes that can be added to links and other elements."	^ #( 'accesskey' 'align' 'alt' 'class' 'dir' 'lang' 'disabled' 'height' 'id' 'longdesc' 'style' 'tabindex' 'title' 'width' )! !!PRLinkRenderer methodsFor: 'private' stamp: 'lr 3/24/2009 22:48'!attributesFor: aLink	"Answer a set of attributes from the link."	^ aLink parameters		inject: WAHtmlAttributes new		into: [ :attributes :each |			(self attributeNames includes: each key)				ifTrue: [ attributes at: each key put: each value ].			attributes ]! !!PRLinkRenderer methodsFor: 'initialization' stamp: 'lr 3/24/2009 22:29'!setParent: aVisitor	parent := aVisitor! !!PRLinkRenderer methodsFor: 'visiting' stamp: 'lr 3/24/2009 23:55'!start: aLink	super start: (link := aLink)! !!PRLinkRenderer methodsFor: 'visiting-document' stamp: 'lr 3/24/2009 22:40'!visitExternalLink: aLink	(self anchorFor: aLink)		url: aLink url;		class: 'external';		with: [ self visitLink: aLink ]! !!PRLinkRenderer methodsFor: 'visiting-document' stamp: 'lr 5/24/2009 19:37'!visitLink: aLink	"If present render the alias of the link with the default renderer, otherwise simply display the title."	aLink hasAlias		ifTrue: [ parent visitAll: aLink children ]		ifFalse: [ html html: aLink title ]! !!PREmbeddedRenderer methodsFor: 'visiting-structure' stamp: 'lr 5/26/2009 17:34'!visitComponent: aStructure	parent 		structure: aStructure		during: [ html render: (self context componentFor: link) ]! !!PREmbeddedRenderer methodsFor: 'visiting-document' stamp: 'lr 3/24/2009 23:13'!visitExternalLink: aLink	"Goes through all the pragmas and check for the first match with the given URL."		| pragmas |	pragmas := Pragma		allNamed: #external:priority:		from: self class 		to: PREmbeddedRenderer		sortedByArgument: 2.	pragmas do: [ :pragma |		(aLink url includesSubstring: pragma arguments first caseSensitive: false)			ifTrue: [ ^ self perform: pragma selector with: aLink ] ].	super visitExternalLink: aLink! !!PREmbeddedRenderer methodsFor: 'visiting-document' stamp: 'lr 3/24/2009 23:35'!visitExternalLinkIframe: aLink	<external: '.htm' priority: 0>	<external: '.html' priority: 0>	html iframe		attributes: (self attributesFor: aLink);		title: aLink title;		url: aLink url! !!PREmbeddedRenderer methodsFor: 'visiting-document' stamp: 'lr 3/24/2009 22:56'!visitExternalLinkImage: aLink	<external: '.png' priority: 0>	<external: '.jpg' priority: 0>	<external: '.jpeg' priority: 0>	<external: '.gif' priority: 0>	html image		attributes: (self attributesFor: aLink);		title: aLink title;		url: aLink url! !!PREmbeddedRenderer methodsFor: 'visiting-structure' stamp: 'lr 6/8/2009 09:07'!visitFile: aStructure	"This code does not use the Magritte rendering to be able to add additional attributes to the generated tags. Similar to the internal embedded links it goes the pragmas and checks for the first match with the given mimetype. If no renderer can be found, simply put a link."	| pragmas |	aStructure file ifNil: [ ^ self ].	parent structure: aStructure during: [		(link hasParameter: 'anchor') ifTrue: [			html anchor name: (aStructure name				select: [ :each | each isAlphaNumeric ]) ].		(link hasParameter: 'download')			ifTrue: [ ^ self visitFileDownload: aStructure ].		pragmas := Pragma			allNamed: #internal:priority:			from: self class			to: PREmbeddedRenderer			sortedByArgument: 2.		pragmas do: [ :pragma |			(aStructure file mimetype beginsWith: pragma arguments first)				ifTrue: [ ^ self perform: pragma selector with: aStructure ] ].		self visitFileDownload: aStructure ]! !!PREmbeddedRenderer methodsFor: 'visiting-structure' stamp: 'lr 3/25/2009 00:25'!visitFileDownload: aStructure	<internal: 'application/' priority: 0>		(self anchorFor: link)		goto: (self context structure: aStructure view: PRDownloadView);		with: [ self visitLink: link ]! !!PREmbeddedRenderer methodsFor: 'visiting-structure' stamp: 'lr 3/26/2009 21:42'!visitFileImage: aStructure	<internal: 'image/' priority: 0>		html image		attributes: (self attributesFor: link);		altText: aStructure title;		url: (aStructure file urlFor: html context)! !!PREmbeddedRenderer methodsFor: 'visiting-structure' stamp: 'lr 3/26/2009 21:41'!visitFileMedia: aStructure	<internal: 'video/' priority: 0>	<internal: 'audio/' priority: 0>	| url mime |	url := aStructure file urlFor: html context.	mime := aStructure file mimetype.	(html tag: 'object')		attributes: (self attributesFor: link);		attributeAt: 'data' put: url;		attributeAt: 'type' put: mime;		with: [ 			(html tag: 'param')				attributeAt: 'name' put: 'src';				with: url.			(html tag: 'param')				attributeAt: 'name' put: 'scale';				with: 'aspect'.			(html tag: 'param')				attributeAt: 'name' put: 'autoplay';				with: 'false'.			(html tag: 'embed')				attributes: (self attributesFor: link);				attributeAt: 'src' put: url;				attributeAt: 'scale' put: 'aspect';				attributeAt: 'autoplay' put: 'false';				attributeAt: 'type' put: mime;				with: [ super visitInternalLink: link ] ]! !!PREmbeddedRenderer methodsFor: 'visiting-structure' stamp: 'lr 3/24/2009 23:50'!visitFileText: aStructure	<internal: 'text/' priority: 0>	html preformatted		attributes: (self attributesFor: link);		with: aStructure file contents! !!PREmbeddedRenderer methodsFor: 'visiting-document' stamp: 'lr 5/19/2009 11:19'!visitInternalLink: aLink	"Visits the target to embed it, if the user has permissions to see the target, ignore otherwise."	(parent visitsOf: aLink target) > 1		ifTrue: [ super visitInternalLink: aLink ]		ifFalse: [			(self context structure: aLink target) isValid				ifTrue: [ self visit: aLink target ] ]! !!PREmbeddedRenderer methodsFor: 'visiting-structure' stamp: 'lr 4/4/2009 21:50'!visitPage: aPage	(link hasParameter: 'menu')		ifTrue: [ self visitPageMenu: aPage ]		ifFalse: [ super visitPage: aPage ]! !!PREmbeddedRenderer methodsFor: 'visiting-structure' stamp: 'lr 4/6/2009 23:54'!visitPageMenu: aPage 	| visitor |	visitor := PRMostSpecificInternalLinkVisitor new.	visitor visit: aPage document.	parent structure: aPage during: [		PRMenuRenderer new			copyFrom: parent;			target: visitor target;			continue: aPage document			in: aPage on: html ]! !!PREmbeddedRenderer methodsFor: 'visiting-structure' stamp: 'lr 4/6/2009 23:37'!visitStructure: aStructure	parent visit: aStructure! !!PRReferenceRenderer methodsFor: 'private' stamp: 'lr 6/2/2009 09:51'!configureCommandIn: aContext link: aLink	aContext command description do: [ :description |		aLink			parameterAt: description parameterName			ifPresent: [ :value | aContext command write: (description fromString: value) using: description ] ]! !!PRReferenceRenderer methodsFor: 'private' stamp: 'lr 6/2/2009 09:55'!configureViewIn: aContext link: aLink	aContext command isView		ifFalse: [ ^ self ].	aContext command viewComponentClass description do: [ :description |		aLink			parameterAt: description parameterName			ifPresent: [ :value | aContext command viewComponent write: (description fromString: value) using: description ] ]! !!PRReferenceRenderer methodsFor: 'private' stamp: 'lr 6/2/2009 09:50'!contextForCommandIn: aContext link: aLink	aLink parameterAt: 'command' ifPresent: [ :name |		PRCommand withAllConcreteClassesDo: [ :class |			(class name = name or: [ class label = name ]) 				ifTrue: [ ^ aContext command: class new ] ] ].	^ aContext! !!PRReferenceRenderer methodsFor: 'querying' stamp: 'lr 6/2/2009 09:54'!contextForLink: aLink	| context |	context := self context structure: aLink target.	context := self contextForCommandIn: context link: aLink.	self configureCommandIn: context link: aLink.	context := self contextForViewIn: context link: aLink.	self configureViewIn: context link: aLink.	context command answer: self context.	^ context! !!PRReferenceRenderer methodsFor: 'private' stamp: 'lr 6/2/2009 09:51'!contextForViewIn: aContext link: aLink	aLink parameterAt: 'view' ifPresent: [ :name |		PRViewComponent withAllConcreteClassesDo: [ :class |			(class name = name or: [ class label = name ]) 				ifTrue: [ ^ aContext view: class ] ] ].	^ aContext! !!PRReferenceRenderer methodsFor: 'visiting-document' stamp: 'lr 3/24/2009 22:37'!visitExternalLink: aLink	| anchor |	anchor := self anchorFor: aLink.	anchor class: 'external'; url: aLink url.	(aLink hasCounter and: [ html callbacks isKindOf: WACallbackRegistry ]) ifTrue: [		anchor onClick: (html request			callback: [ aLink incrementCounter ];			asynchronous: false;			return: true) ].	anchor with: [ self visitLink: aLink ]! !!PRReferenceRenderer methodsFor: 'visiting-document' stamp: 'lr 6/3/2009 11:26'!visitInternalLink: aLink	| anchor |	anchor := self anchorFor: aLink.	anchor class: 'internal'; goto: (self contextForLink: aLink).	aLink anchor isNil ifFalse: [ 		anchor url fragment: (aLink anchor			select: [ :each | each isAlphaNumeric ]) ].	(aLink hasCounter and: [ html callbacks isKindOf: WACallbackRegistry ]) ifTrue: [		anchor url addParameter: (html callbacks			registerCallback: [ aLink incrementCounter ]) ].	anchor with: [ self visitLink: aLink ]! !!PRReferenceRenderer methodsFor: 'visiting-document' stamp: 'lr 3/25/2009 23:35'!visitValueLink: aLink	"Value links are always embedded, there is no point in not embedding them. Values can be either a document (the document is visited) or any other Smalltalk object (the value is renderered). If the value is nil, the alias of the link is displayed."	| value |	value := aLink valueIn: self context.	value isNil		ifTrue: [ ^ self visitLink: aLink ].	(value isCollection and: [ value isString not ])		ifTrue: [ ^ parent visitAll: value ].	(value isKindOf: PRDocumentItem)		ifTrue: [ ^ parent visit: value ].	html render: value! !!PRRenderer methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!component	^ component! !!PRRenderer methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!component: aComponent	component := aComponent! !!PRRenderer methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:30'!context	^ PRCurrentContext value! !!PRRenderer methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:30'!context: aContext	PRCurrentContext value: aContext! !!PRRenderer methodsFor: 'visiting' stamp: 'lr 4/8/2009 20:21'!continue: anObject in: aComponent on: aRenderer	| previous |	previous := self shallowCopy.	self component: aComponent.	self renderer: aRenderer.	[ self visit: anObject ]		ensure: [ self copyFrom: previous ]! !!PRRenderer methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!renderer	^ html! !!PRRenderer methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!renderer: aRenderer	html := aRenderer! !!PRRenderer methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:30'!start: anObject in: aComponent on: aRenderer	self component: aComponent.	self renderer: aRenderer.	self start: anObject! !!PRVisitor methodsFor: '*pier-seaside-visiting-structure' stamp: 'lr 3/9/2006 11:30'!visitComponent: anObject	self visitStructure: anObject! !!PROutgoingReferences methodsFor: '*pier-seaside-accessing' stamp: 'lr 6/3/2009 11:26'!embeddedComponents	^ self select: [ :each | each isInternal and: [ each isEmbedded and: [ each isBroken not and: [ each target isComponent ] ] ] ]! !!PRContentsRendered class methodsFor: 'defaults' stamp: 'lr 10/28/2008 12:20'!defaultValue	^ false! !!PRRemoveCommand methodsFor: '*pier-seaside-converting' stamp: 'lr 9/9/2009 19:30'!saveButton	^ super saveButton value: self class label! !!PRDocumentComponent methodsFor: 'rendering' stamp: 'lr 9/9/2009 19:11'!renderViewerOn: html	html rendererInstance visit: self value! !!PRLink methodsFor: '*pier-seaside' stamp: 'lr 1/30/2009 20:24'!hasCounter	^ self hasParameter: 'counter'! !!PRLink methodsFor: '*pier-seaside' stamp: 'lr 1/30/2009 20:31'!incrementCounter	"Increment the counter by one, if defined as a property of the receiver."	| value |	value := self parameterAt: 'counter' ifAbsent: [ ^ self ].	value := value isNil ifTrue: [ 0 ] ifFalse: [ value asNumber ].	^ self parameterAt: 'counter' put: value + 1! !!PRCommand methodsFor: '*pier-seaside-converting' stamp: 'lr 11/6/2007 13:29'!asComponent	"Answer a compoent to configure the edit operation of the receiver. This does not require to be a Magritte component, but in most cases it is."	^ super asComponent		addValidatedForm: self buttonSpecification;		yourself! !!PRCommand methodsFor: '*pier-seaside-converting' stamp: 'lr 11/6/2007 13:30'!buttonSpecification	^ Array with: self saveButton with: self cancelButton! !!PRCommand methodsFor: '*pier-seaside-converting' stamp: 'lr 8/11/2007 21:55'!cancelButton	^ #cancel -> 'Cancel'! !!PRCommand methodsFor: '*pier-seaside-accessing' stamp: 'lr 9/12/2007 18:18'!cssClass	"Answer a CSS class that should be used in the body-tag when dis command is rendered."	^ self class fullName asLowercase allButFirst: 2! !!PRCommand methodsFor: '*pier-seaside-protected' stamp: 'lr 8/3/2007 17:47'!initialRequest: aRequest	"Override this to extract additional data from the request. This is only called for requests that don't have a valid session yet.'"! !!PRCommand methodsFor: '*pier-seaside-testing' stamp: 'lr 7/13/2009 20:54'!isRestful	^ false! !!PRCommand methodsFor: '*pier-seaside-accessing' stamp: 'lr 4/8/2009 20:18'!rendererInstance	"Answer a renderer, that is the visitor that is used to display the page."	^ PRViewRenderer new! !!PRCommand methodsFor: '*pier-seaside-accessing' stamp: 'lr 2/20/2007 15:07'!robots	^ 'noindex,follow'! !!PRCommand methodsFor: '*pier-seaside-converting' stamp: 'lr 8/11/2007 21:55'!saveButton	^ #save -> 'Save'! !!PRCommand methodsFor: '*pier-seaside-protected' stamp: 'lr 9/12/2007 18:18'!updateRoot: aHtmlRoot	"Override customize the <head> section of an HTML document."	aHtmlRoot meta		name: 'robots';		content: self robots.	aHtmlRoot bodyAttributes		addClass: self cssClass! !!PRCommand methodsFor: '*pier-seaside-protected' stamp: 'lr 9/12/2007 18:18'!updateUrl: anUrl	"Override to customize the URL used to display this command."	self class = self structure defaultCommandClass		ifFalse: [ anUrl addParameter: 'command' value: self class name displayString ]! !!PRStructureDescription class methodsFor: '*pier-seaside-defaults' stamp: 'lr 3/9/2006 11:30'!defaultComponentClasses	^ Array with: PRStructureComponent! !!PRDocumentDescription class methodsFor: '*pier-seaside-defaults' stamp: 'lr 9/9/2009 19:11'!defaultComponentClasses	^ Array with: PRDocumentComponent! !!PRDocumentDescription class methodsFor: '*pier-seaside-defaults' stamp: 'lr 1/10/2008 16:13'!defaultCssClasses	^ super defaultCssClasses add: 'wiki'; yourself! !!MAContainerComponent methodsFor: '*pier-seaside-actions' stamp: 'lr 11/6/2007 13:43'!apply	"This is an ugly hack that will only work in the context of Pier. It assumes that the underlying model is a command and that it can be told to redisplay itself."		self validate ifFalse: [ ^ self ].	self commit.	self model answer isNil		ifTrue: [ self model answer: self model context copy ].	self answer: self model! !!WARenderCanvas methodsFor: '*pier-seaside' stamp: 'lr 4/8/2009 20:16'!rendererInstance	"Answer an instance of the current render visitor. This instance is only valid during the current rendering pass."		^ context properties		at: #rendererInstance		ifAbsentPut: [			PRCurrentContext value 				command rendererInstance ]! !!PRBlueprintDebugLibrary methodsFor: 'uploaded' stamp: 'lr 1/29/2008 09:19'!gridCss	^ '.container { background: url(grid.png); }'! !!PRBlueprintDebugLibrary methodsFor: 'uploaded' stamp: 'tg 1/20/2008 12:38'!gridPng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 40 0 0 0 18 8 6 0 0 0 41 31 156 166 0 0 0 4 115 66 73 84 8 8 8 8 124 8 100 136 0 0 0 9 112 72 89 115 0 0 10 240 0 0 10 240 1 66 172 52 152 0 0 0 28 116 69 88 116 83 111 102 116 119 97 114 101 0 65 100 111 98 101 32 70 105 114 101 119 111 114 107 115 32 67 83 51 152 214 70 3 0 0 0 72 73 68 65 84 72 137 99 124 241 254 247 127 134 1 0 226 2 44 68 169 99 162 177 59 40 6 163 14 164 20 140 58 144 82 48 234 64 74 193 168 3 41 5 163 14 164 20 140 58 144 82 48 234 64 74 193 160 119 32 11 227 175 119 3 98 241 171 87 196 169 3 0 78 179 7 223 243 172 62 238 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!PRBlueprintDebugLibrary methodsFor: 'accessing' stamp: 'tg 1/20/2008 12:39'!selectorsToInclude	^ #(gridCss)! !!PRBlueprintLibrary methodsFor: 'uploaded' stamp: 'lr 3/11/2008 10:05'!ieCss	^ '/* -----------------------------------------------------------------------   Blueprint CSS Framework 0.7.1   http://blueprintcss.googlecode.com   * Copyright (c) 2007-2008. See LICENSE for more info.   * See README for instructions on how to use Blueprint.   * For credits and origins, see AUTHORS.   * This is a compressed file. See the sources in the ''src'' directory.----------------------------------------------------------------------- *//* ie.css */body {text-align:center;}.container {text-align:left;}* html .column {overflow-x:hidden;}* html legend {margin:-18px -8px 16px 0;padding:0;}ol {margin-left:2em;}sup {vertical-align:text-top;}sub {vertical-align:text-bottom;}html>body p code {*white-space:normal;}hr {margin:-8px auto 11px;}'! !!PRBlueprintLibrary methodsFor: 'uploaded' stamp: 'lr 3/11/2008 10:04'!printCss	^ '/* -----------------------------------------------------------------------   Blueprint CSS Framework 0.7.1   http://blueprintcss.googlecode.com   * Copyright (c) 2007-2008. See LICENSE for more info.   * See README for instructions on how to use Blueprint.   * For credits and origins, see AUTHORS.   * This is a compressed file. See the sources in the ''src'' directory.----------------------------------------------------------------------- *//* print.css */body {line-height:1.5;font-family:"Helvetica Neue", Helvetica, Arial, sans-serif;color:#000;background:none;font-size:10pt;}.container {background:none;}hr {background:#ccc;color:#ccc;width:100%;height:2px;margin:2em 0;padding:0;border:none;}hr.space {background:#fff;color:#fff;}h1, h2, h3, h4, h5, h6 {font-family:"Helvetica Neue", Arial, "Lucida Grande", sans-serif;}code {font:.9em "Courier New", Monaco, Courier, monospace;}img {float:left;margin:1.5em 1.5em 1.5em 0;}a img {border:none;}p img.top {margin-top:0;}blockquote {margin:1.5em;padding:1em;font-style:italic;font-size:.9em;}.small {font-size:.9em;}.large {font-size:1.1em;}.quiet {color:#999;}.hide {display:none;}a:link, a:visited {background:transparent;font-weight:700;text-decoration:underline;}a:link:after, a:visited:after {content:" (" attr(href) ") ";font-size:90%;}'! !!PRBlueprintLibrary methodsFor: 'uploaded' stamp: 'lr 5/28/2008 12:28'!screenCss	^ '/* -----------------------------------------------------------------------   Blueprint CSS Framework 0.7.1   http://blueprintcss.googlecode.com   * Copyright (c) 2007-2008. See LICENSE for more info.   * See README for instructions on how to use Blueprint.   * For credits and origins, see AUTHORS.   * This is a compressed file. See the sources in the ''src'' directory.----------------------------------------------------------------------- *//* reset.css */html, body, div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, code, del, dfn, em, img, q, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td {margin:0;padding:0;border:0;font-weight:inherit;font-style:inherit;font-size:100%;font-family:inherit;vertical-align:baseline;}body {line-height:1.5;}table {border-collapse:separate;border-spacing:0;}caption, th, td {text-align:left;font-weight:normal;}table, td, th {vertical-align:middle;}blockquote:before, blockquote:after, q:before, q:after {content:"";}blockquote, q {quotes:"" "";}a img {border:none;}/* typography.css */body {font-size:75%;color:#222;background:#fff;font-family:"Helvetica Neue", Helvetica, Arial, sans-serif;}h1, h2, h3, h4, h5, h6 {font-weight:normal;color:#111;}h1 {font-size:3em;line-height:1;margin-bottom:0.5em;}h2 {font-size:2em;margin-bottom:0.75em;}h3 {font-size:1.5em;line-height:1;margin-bottom:1em;}h4 {font-size:1.2em;line-height:1.25;margin-bottom:1.25em;height:1.25em;}h5 {font-size:1em;font-weight:bold;margin-bottom:1.5em;}h6 {font-size:1em;font-weight:bold;}h1 img, h2 img, h3 img, h4 img, h5 img, h6 img {margin:0;}p {margin:0 0 1.5em;}p img {float:left;margin:1.5em 1.5em 1.5em 0;padding:0;}p img.right {float:right;margin:1.5em 0 1.5em 1.5em;}a:focus, a:hover {color:#000;}a {color:#009;text-decoration:underline;}blockquote {margin:1.5em;color:#666;font-style:italic;}strong {font-weight:bold;}em, dfn {font-style:italic;}dfn {font-weight:bold;}sup, sub {line-height:0;}abbr, acronym {border-bottom:1px dotted #666;}address {margin:0 0 1.5em;font-style:italic;}del {color:#666;}pre, code {margin:1.5em 0;white-space:pre;}pre, code, tt {font:1em ''andale mono'', ''lucida console'', monospace;line-height:1.5;}li ul, li ol {margin:0 1.5em;}ul, ol {margin:0 1.5em 1.5em 1.5em;}ul {list-style-type:disc;}ol {list-style-type:decimal;}dl {margin:0 0 1.5em 0;}dl dt {font-weight:bold;}dd {margin-left:1.5em;}table {margin-bottom:1.4em;width:100%;}th {font-weight:bold;background:#C3D9FF;}th, td {padding:4px 10px 4px 5px;}tr.even td {background:#E5ECF9;}tfoot {font-style:italic;}caption {background:#eee;}.small {font-size:.8em;margin-bottom:1.875em;line-height:1.875em;}.large {font-size:1.2em;line-height:2.5em;margin-bottom:1.25em;}.hide {display:none;}.quiet {color:#666;}.loud {color:#000;}.highlight {background:#ff0;}.added {background:#060;color:#fff;}.removed {background:#900;color:#fff;}.first {margin-left:0;padding-left:0;}.last {margin-right:0;padding-right:0;}.top {margin-top:0;padding-top:0;}.bottom {margin-bottom:0;padding-bottom:0;}/* grid.css */.container {width:950px;margin:0 auto;}.showgrid {background:url(src/grid.png);}body {margin:1.5em 0;}div.span-1, div.span-2, div.span-3, div.span-4, div.span-5, div.span-6, div.span-7, div.span-8, div.span-9, div.span-10, div.span-11, div.span-12, div.span-13, div.span-14, div.span-15, div.span-16, div.span-17, div.span-18, div.span-19, div.span-20, div.span-21, div.span-22, div.span-23, div.span-24 {float:left;margin-right:10px;}div.last {margin-right:0;}.span-1 {width:30px;}.span-2 {width:70px;}.span-3 {width:110px;}.span-4 {width:150px;}.span-5 {width:190px;}.span-6 {width:230px;}.span-7 {width:270px;}.span-8 {width:310px;}.span-9 {width:350px;}.span-10 {width:390px;}.span-11 {width:430px;}.span-12 {width:470px;}.span-13 {width:510px;}.span-14 {width:550px;}.span-15 {width:590px;}.span-16 {width:630px;}.span-17 {width:670px;}.span-18 {width:710px;}.span-19 {width:750px;}.span-20 {width:790px;}.span-21 {width:830px;}.span-22 {width:870px;}.span-23 {width:910px;}.span-24, div.span-24 {width:950px;margin:0;}.append-1 {padding-right:40px;}.append-2 {padding-right:80px;}.append-3 {padding-right:120px;}.append-4 {padding-right:160px;}.append-5 {padding-right:200px;}.append-6 {padding-right:240px;}.append-7 {padding-right:280px;}.append-8 {padding-right:320px;}.append-9 {padding-right:360px;}.append-10 {padding-right:400px;}.append-11 {padding-right:440px;}.append-12 {padding-right:480px;}.append-13 {padding-right:520px;}.append-14 {padding-right:560px;}.append-15 {padding-right:600px;}.append-16 {padding-right:640px;}.append-17 {padding-right:680px;}.append-18 {padding-right:720px;}.append-19 {padding-right:760px;}.append-20 {padding-right:800px;}.append-21 {padding-right:840px;}.append-22 {padding-right:880px;}.append-23 {padding-right:920px;}.prepend-1 {padding-left:40px;}.prepend-2 {padding-left:80px;}.prepend-3 {padding-left:120px;}.prepend-4 {padding-left:160px;}.prepend-5 {padding-left:200px;}.prepend-6 {padding-left:240px;}.prepend-7 {padding-left:280px;}.prepend-8 {padding-left:320px;}.prepend-9 {padding-left:360px;}.prepend-10 {padding-left:400px;}.prepend-11 {padding-left:440px;}.prepend-12 {padding-left:480px;}.prepend-13 {padding-left:520px;}.prepend-14 {padding-left:560px;}.prepend-15 {padding-left:600px;}.prepend-16 {padding-left:640px;}.prepend-17 {padding-left:680px;}.prepend-18 {padding-left:720px;}.prepend-19 {padding-left:760px;}.prepend-20 {padding-left:800px;}.prepend-21 {padding-left:840px;}.prepend-22 {padding-left:880px;}.prepend-23 {padding-left:920px;}div.border {padding-right:4px;margin-right:5px;border-right:1px solid #eee;}div.colborder {padding-right:24px;margin-right:25px;border-right:1px solid #eee;}.pull-1 {margin-left:-40px;}.pull-2 {margin-left:-80px;}.pull-3 {margin-left:-120px;}.pull-4 {margin-left:-160px;}.pull-5 {margin-left:-200px;}.pull-6 {margin-left:-240px;}.pull-7 {margin-left:-280px;}.pull-8 {margin-left:-320px;}.pull-9 {margin-left:-360px;}.pull-10 {margin-left:-400px;}.pull-11 {margin-left:-440px;}.pull-12 {margin-left:-480px;}.pull-13 {margin-left:-520px;}.pull-14 {margin-left:-560px;}.pull-15 {margin-left:-600px;}.pull-16 {margin-left:-640px;}.pull-17 {margin-left:-680px;}.pull-18 {margin-left:-720px;}.pull-19 {margin-left:-760px;}.pull-20 {margin-left:-800px;}.pull-21 {margin-left:-840px;}.pull-22 {margin-left:-880px;}.pull-23 {margin-left:-920px;}.pull-24 {margin-left:-960px;}.pull-1, .pull-2, .pull-3, .pull-4, .pull-5, .pull-6, .pull-7, .pull-8, .pull-9, .pull-10, .pull-11, .pull-12, .pull-13, .pull-14, .pull-15, .pull-16, .pull-17, .pull-18, .pull-19, .pull-20, .pull-21, .pull-22, .pull-23, .pull-24 {float:left;position:relative;}.push-1 {margin:0 -40px 1.5em 40px;}.push-2 {margin:0 -80px 1.5em 80px;}.push-3 {margin:0 -120px 1.5em 120px;}.push-4 {margin:0 -160px 1.5em 160px;}.push-5 {margin:0 -200px 1.5em 200px;}.push-6 {margin:0 -240px 1.5em 240px;}.push-7 {margin:0 -280px 1.5em 280px;}.push-8 {margin:0 -320px 1.5em 320px;}.push-9 {margin:0 -360px 1.5em 360px;}.push-10 {margin:0 -400px 1.5em 400px;}.push-11 {margin:0 -440px 1.5em 440px;}.push-12 {margin:0 -480px 1.5em 480px;}.push-13 {margin:0 -520px 1.5em 520px;}.push-14 {margin:0 -560px 1.5em 560px;}.push-15 {margin:0 -600px 1.5em 600px;}.push-16 {margin:0 -640px 1.5em 640px;}.push-17 {margin:0 -680px 1.5em 680px;}.push-18 {margin:0 -720px 1.5em 720px;}.push-19 {margin:0 -760px 1.5em 760px;}.push-20 {margin:0 -800px 1.5em 800px;}.push-21 {margin:0 -840px 1.5em 840px;}.push-22 {margin:0 -880px 1.5em 880px;}.push-23 {margin:0 -920px 1.5em 920px;}.push-24 {margin:0 -960px 1.5em 960px;}.push-1, .push-2, .push-3, .push-4, .push-5, .push-6, .push-7, .push-8, .push-9, .push-10, .push-11, .push-12, .push-13, .push-14, .push-15, .push-16, .push-17, .push-18, .push-19, .push-20, .push-21, .push-22, .push-23, .push-24 {float:right;position:relative;}.box {padding:1.5em;margin-bottom:1.5em;background:#E5ECF9;}hr {background:#ddd;color:#ddd;clear:both;float:none;width:100%;height:.1em;margin:0 0 1.45em;border:none;}hr.space {background:#fff;color:#fff;}.clearfix:after, .container:after {content:".";display:block;height:0;clear:both;visibility:hidden;}.clearfix, .container {display:inline-block;}* html .clearfix, * html .container {height:1%;}.clearfix, .container {display:block;}.clear {clear:both;}/* forms.css */label {font-weight:bold;}fieldset {padding:1.4em;margin:0 0 1.5em 0;border:1px solid #ccc;}legend {font-weight:bold;font-size:1.2em;}input.text, input.title, input.password, textarea, select {margin:0.5em 0;border:1px solid #bbb;}input.text:focus, input.title:focus, input.password:focus, textarea:focus, select:focus {border:1px solid #666;}input.text, input.password, input.title {width:300px;padding:5px;}input.title {font-size:1.5em;}textarea {width:390px;height:250px;padding:5px;}.error, .notice, .success {padding:.8em;margin-bottom:1em;border:2px solid #ddd;}.error {background:#FBE3E4;color:#8a1f11;border-color:#FBC2C4;}.notice {background:#FFF6BF;color:#514721;border-color:#FFD324;}.success {background:#E6EFC2;color:#264409;border-color:#C6D880;}.error a {color:#8a1f11;}.notice a {color:#514721;}.success a {color:#264409;}'! !!PRBlueprintLibrary methodsFor: 'processing' stamp: 'lr 5/28/2008 12:26'!updateRoot: aHtmlRoot	super updateRoot: aHtmlRoot.	aHtmlRoot stylesheet		addScreen;		addProjection;		url: (self urlOf: #screenCss).	aHtmlRoot stylesheet		addPrint;		url: (self urlOf: #printCss).	aHtmlRoot if ie do: [		aHtmlRoot stylesheet			addScreen;			addProjection;			url: (self urlOf: #ieCss) ]! !!PRJavaScriptSupport methodsFor: 'files' stamp: 'lr 3/17/2009 23:17'!pierJs	^ '(function(){	var load = function(event) {		if (document.forms.length > 0) {			var elements = document.forms[0].elements;			for (var i = 0; i < elements.length; i++) {				if (elements[i].parentNode.tagName == "TD") {					elements[i].focus();					break;				}			}		}	};	if (window.addEventListener)		window.addEventListener("load", load, false)	else		window.attachEvent("onload", load);})();'! !!PRJavaScriptSupport methodsFor: 'accessing' stamp: 'lr 10/1/2008 22:59'!selectorsToInclude	^ #(pierJs)! !!PRNarrowBlueprintDebugLibrary methodsFor: 'uploaded' stamp: 'tg 8/27/2008 08:49'!gridCss	^ '.container { background: url(grid.png); }'! !!PRNarrowBlueprintDebugLibrary methodsFor: 'uploaded' stamp: 'lr 6/15/2009 20:22'!gridPng	| cache |	cache := #(nil) beMutable.	(cache at: 1) isNil ifTrue: [		cache at: 1 put: #(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 30 0 0 0 18 2 3 0 0 0 49 156 134 74 0 0 0 9 80 76 84 69 255 255 255 243 245 247 230 230 236 122 197 101 242 0 0 0 20 73 68 65 84 8 153 99 8 5 1 6 32 24 108 140 85 16 176 0 0 176 102 33 128 242 86 90 33 0 0 0 0 73 69 78 68 174 66 96 130) asByteArray ].	^ cache at: 1! !!PRNarrowBlueprintDebugLibrary methodsFor: 'accessing' stamp: 'tg 8/27/2008 08:50'!selectorsToInclude	^ #(gridCss)! !!PRNarrowBlueprintLibrary methodsFor: 'uploaded' stamp: 'tg 8/27/2008 00:51'!ieCss	^ '/* -----------------------------------------------------------------------   Blueprint CSS Framework 0.7.1   http://blueprintcss.googlecode.com   * Copyright (c) 2007-2008. See LICENSE for more info.   * See README for instructions on how to use Blueprint.   * For credits and origins, see AUTHORS.   * This is a compressed file. See the sources in the ''src'' directory.----------------------------------------------------------------------- *//* ie.css */body {text-align:center;}.container {text-align:left;}* html .column {overflow-x:hidden;}* html legend {margin:-18px -8px 16px 0;padding:0;}ol {margin-left:2em;}sup {vertical-align:text-top;}sub {vertical-align:text-bottom;}html>body p code {*white-space:normal;}hr {margin:-8px auto 11px;}'! !!PRNarrowBlueprintLibrary methodsFor: 'uploaded' stamp: 'tg 9/6/2008 20:46'!patchCss	^'input.text, input.title, input.password, textarea, select {margin:0.5em 0;border:1px solid #bbb;}input.text:focus, input.title:focus, input.password:focus, textarea:focus, select:focus {border:1px solid #666;}input.text, input.password, input.title {width:300px;padding:5px;}'! !!PRNarrowBlueprintLibrary methodsFor: 'uploaded' stamp: 'tg 8/27/2008 00:50'!printCss	^ '/* -----------------------------------------------------------------------   Blueprint CSS Framework 0.7.1   http://blueprintcss.googlecode.com   * Copyright (c) 2007-2008. See LICENSE for more info.   * See README for instructions on how to use Blueprint.   * For credits and origins, see AUTHORS.   * This is a compressed file. See the sources in the ''src'' directory.----------------------------------------------------------------------- *//* print.css */body {line-height:1.5;font-family:"Helvetica Neue", Helvetica, Arial, sans-serif;color:#000;background:none;font-size:10pt;}.container {background:none;}hr {background:#ccc;color:#ccc;width:100%;height:2px;margin:2em 0;padding:0;border:none;}hr.space {background:#fff;color:#fff;}h1, h2, h3, h4, h5, h6 {font-family:"Helvetica Neue", Arial, "Lucida Grande", sans-serif;}code {font:.9em "Courier New", Monaco, Courier, monospace;}img {float:left;margin:1.5em 1.5em 1.5em 0;}a img {border:none;}p img.top {margin-top:0;}blockquote {margin:1.5em;padding:1em;font-style:italic;font-size:.9em;}.small {font-size:.9em;}.large {font-size:1.1em;}.quiet {color:#999;}.hide {display:none;}a:link, a:visited {background:transparent;font-weight:700;text-decoration:underline;}a:link:after, a:visited:after {content:" (" attr(href) ") ";font-size:90%;}'! !!PRNarrowBlueprintLibrary methodsFor: 'uploaded' stamp: 'tg 9/6/2008 20:36'!screenCss	^ '/*   BLUEPRINT CSS   * Filename:        compressed.css   * Version:         0.7.1 (2008-02-25) YYYY-MM-DD   * Website:         http://code.google.com/p/blueprintcss/      Generated by:    * Blueprint CSS Grid Generator (2008-09-06) [http://kematzy.com/blueprint-generator/]      == STRUCTURE: ========================   * Page width:            710 px   * Number of columns:     24   * Column width:          20 px   * Margin width:          10 px  ======================================   *//* reset.css */html, body, div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, code, del, dfn, em, img, q, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td {margin:0;padding:0;border:0;font-weight:inherit;font-style:inherit;font-size:100%;font-family:inherit;vertical-align:baseline;}body {line-height:1.5;}table {border-collapse:separate;border-spacing:0;}caption, th, td {text-align:left;font-weight:normal;}table, td, th {vertical-align:middle;}blockquote:before, blockquote:after, q:before, q:after {content:"";}blockquote, q {quotes:"" "";}a img {border:none;}/* typography.css */body {font-size:75%;color:#222;background:#fff;font-family:"Helvetica Neue", Helvetica, Arial, sans-serif;}h1, h2, h3, h4, h5, h6 {font-weight:normal;color:#111;}h1 {font-size:3em;line-height:1;margin-bottom:0.5em;}h2 {font-size:2em;margin-bottom:0.75em;}h3 {font-size:1.5em;line-height:1;margin-bottom:1em;}h4 {font-size:1.2em;line-height:1.25;margin-bottom:1.25em;height:1.25em;}h5 {font-size:1em;font-weight:bold;margin-bottom:1.5em;}h6 {font-size:1em;font-weight:bold;}h1 img, h2 img, h3 img, h4 img, h5 img, h6 img {margin:0;}p {margin:0 0 1.5em;}p img {float:left;margin:1.5em 1.5em 1.5em 0;padding:0;}p img.right {float:right;margin:1.5em 0 1.5em 1.5em;}a:focus, a:hover {color:#000;}a {color:#009;text-decoration:underline;}blockquote {margin:1.5em;color:#666;font-style:italic;}strong {font-weight:bold;}em, dfn {font-style:italic;}dfn {font-weight:bold;}sup, sub {line-height:0;}abbr, acronym {border-bottom:1px dotted #666;}address {margin:0 0 1.5em;font-style:italic;}del {color:#666;}pre, code {margin:1.5em 0;white-space:pre;}pre, code, tt {font:1em ''andale mono'', ''lucida console'', monospace;line-height:1.5;}li ul, li ol {margin:0 1.5em;}ul, ol {margin:0 1.5em 1.5em 1.5em;}ul {list-style-type:disc;}ol {list-style-type:decimal;}dl {margin:0 0 1.5em 0;}dl dt {font-weight:bold;}dd {margin-left:1.5em;}table {margin-bottom:1.4em;width:100%;}th {font-weight:bold;background:#C3D9FF;}th, td {padding:4px 10px 4px 5px;}tr.even td {background:#E5ECF9;}tfoot {font-style:italic;}caption {background:#eee;}.small {font-size:.8em;margin-bottom:1.875em;line-height:1.875em;}.large {font-size:1.2em;line-height:2.5em;margin-bottom:1.25em;}.hide {display:none;}.quiet {color:#666;}.loud {color:#000;}.highlight {background:#ff0;}.added {background:#060;color:#fff;}.removed {background:#900;color:#fff;}.first {margin-left:0;padding-left:0;}.last {margin-right:0;padding-right:0;}.top {margin-top:0;padding-top:0;}.bottom {margin-bottom:0;padding-bottom:0;}/* grid.css */.container {width:710px;margin:0 auto;}.showgrid {background:url(src/grid.png);}body {margin:1.5em 0;}div.span-1, div.span-2, div.span-3, div.span-4, div.span-5, div.span-6, div.span-7, div.span-8, div.span-9, div.span-10, div.span-11, div.span-12, div.span-13, div.span-14, div.span-15, div.span-16, div.span-17, div.span-18, div.span-19, div.span-20, div.span-21, div.span-22, div.span-23, div.span-24 {float:left;margin-right: 10px;}div.last {margin-right:0;}.span-1  { width: 20px;}.span-2  { width: 50px;}.span-3  { width: 80px;}.span-4  { width: 110px;}.span-5  { width: 140px;}.span-6  { width: 170px;}.span-7  { width: 200px;}.span-8  { width: 230px;}.span-9  { width: 260px;}.span-10 { width: 290px;}.span-11 { width: 320px;}.span-12 { width: 350px;}.span-13 { width: 380px;}.span-14 { width: 410px;}.span-15 { width: 440px;}.span-16 { width: 470px;}.span-17 { width: 500px;}.span-18 { width: 530px;}.span-19 { width: 560px;}.span-20 { width: 590px;}.span-21 { width: 620px;}.span-22 { width: 650px;}.span-23 { width: 680px;}.span-24, div.span-24 { width: 710px; margin: 0; }.append-1  { padding-right: 30px;}.append-2  { padding-right: 60px;}.append-3  { padding-right: 90px;}.append-4  { padding-right: 120px;}.append-5  { padding-right: 150px;}.append-6  { padding-right: 180px;}.append-7  { padding-right: 210px;}.append-8  { padding-right: 240px;}.append-9  { padding-right: 270px;}.append-10 { padding-right: 300px;}.append-11 { padding-right: 330px;}.append-12 { padding-right: 360px;}.append-13 { padding-right: 390px;}.append-14 { padding-right: 420px;}.append-15 { padding-right: 450px;}.append-16 { padding-right: 480px;}.append-17 { padding-right: 510px;}.append-18 { padding-right: 540px;}.append-19 { padding-right: 570px;}.append-20 { padding-right: 600px;}.append-21 { padding-right: 630px;}.append-22 { padding-right: 660px;}.append-23 { padding-right: 690px;}.prepend-1  { padding-left: 30px;}.prepend-2  { padding-left: 60px;}.prepend-3  { padding-left: 90px;}.prepend-4  { padding-left: 120px;}.prepend-5  { padding-left: 150px;}.prepend-6  { padding-left: 180px;}.prepend-7  { padding-left: 210px;}.prepend-8  { padding-left: 240px;}.prepend-9  { padding-left: 270px;}.prepend-10 { padding-left: 300px;}.prepend-11 { padding-left: 330px;}.prepend-12 { padding-left: 360px;}.prepend-13 { padding-left: 390px;}.prepend-14 { padding-left: 420px;}.prepend-15 { padding-left: 450px;}.prepend-16 { padding-left: 480px;}.prepend-17 { padding-left: 510px;}.prepend-18 { padding-left: 540px;}.prepend-19 { padding-left: 570px;}.prepend-20 { padding-left: 600px;}.prepend-21 { padding-left: 630px;}.prepend-22 { padding-left: 660px;}.prepend-23 { padding-left: 690px;}div.border{padding-right:4px;margin-right:5px;border-right:1px solid #eee;}div.colborder { padding-right:16px;margin-right:15px;border-right:1px solid #eee;}.pull-1 { margin-left: -30px;}.pull-2 { margin-left: -60px;}.pull-3 { margin-left: -90px;}.pull-4 { margin-left: -120px;}.pull-5 { margin-left: -150px;}.pull-6 { margin-left: -180px;}.pull-7 { margin-left: -210px;}.pull-8 { margin-left: -240px;}.pull-9 { margin-left: -270px;}.pull-10 { margin-left: -300px;}.pull-11 { margin-left: -330px;}.pull-12 { margin-left: -360px;}.pull-13 { margin-left: -390px;}.pull-14 { margin-left: -420px;}.pull-15 { margin-left: -450px;}.pull-16 { margin-left: -480px;}.pull-17 { margin-left: -510px;}.pull-18 { margin-left: -540px;}.pull-19 { margin-left: -570px;}.pull-20 { margin-left: -600px;}.pull-21 { margin-left: -630px;}.pull-22 { margin-left: -660px;}.pull-23 { margin-left: -690px;}.pull-24 { margin-left: -720px;}.pull-1, .pull-2, .pull-3, .pull-4, .pull-5, .pull-6, .pull-7, .pull-8, .pull-9, .pull-10, .pull-11, .pull-12, .pull-13, .pull-14, .pull-15, .pull-16, .pull-17, .pull-18, .pull-19, .pull-20, .pull-21, .pull-22, .pull-23, .pull-24 {float:left;position:relative;}.push-1 { margin: 0 -30px 1.5em 30px;}.push-2 { margin: 0 -60px 1.5em 60px;}.push-3 { margin: 0 -90px 1.5em 90px;}.push-4 { margin: 0 -120px 1.5em 120px;}.push-5 { margin: 0 -150px 1.5em 150px;}.push-6 { margin: 0 -180px 1.5em 180px;}.push-7 { margin: 0 -210px 1.5em 210px;}.push-8 { margin: 0 -240px 1.5em 240px;}.push-9 { margin: 0 -270px 1.5em 270px;}.push-10 { margin: 0 -300px 1.5em 300px;}.push-11 { margin: 0 -330px 1.5em 330px;}.push-12 { margin: 0 -360px 1.5em 360px;}.push-13 { margin: 0 -390px 1.5em 390px;}.push-14 { margin: 0 -420px 1.5em 420px;}.push-15 { margin: 0 -450px 1.5em 450px;}.push-16 { margin: 0 -480px 1.5em 480px;}.push-17 { margin: 0 -510px 1.5em 510px;}.push-18 { margin: 0 -540px 1.5em 540px;}.push-19 { margin: 0 -570px 1.5em 570px;}.push-20 { margin: 0 -600px 1.5em 600px;}.push-21 { margin: 0 -630px 1.5em 630px;}.push-22 { margin: 0 -660px 1.5em 660px;}.push-23 { margin: 0 -690px 1.5em 690px;}.push-24 { margin: 0 -720px 1.5em 720px;}.push-1, .push-2, .push-3, .push-4, .push-5, .push-6, .push-7, .push-8, .push-9, .push-10, .push-11, .push-12, .push-13, .push-14, .push-15, .push-16, .push-17, .push-18, .push-19, .push-20, .push-21, .push-22, .push-23, .push-24 {float:right;position:relative;}.box {padding:1.5em;margin-bottom:1.5em;background:#E5ECF9;}hr {background:#ddd;color:#ddd;clear:both;float:none;width:100%;height:.1em;margin:0 0 1.45em;border:none;}hr.space {background:#fff;color:#fff;}.clearfix:after, .container:after {content:".";display:block;height:0;clear:both;visibility:hidden;}.clearfix, .container {display:inline-block;}* html .clearfix, * html .container {height:1%;}.clearfix, .container {display:block;}.clear {clear:both;}/* forms.css */label {font-weight:bold;}fieldset {padding:1.4em;margin:0 0 1.5em 0;border:1px solid #ccc;}legend {font-weight:bold;font-size:1.2em;}input.text, input.title, textarea, select {margin:0.5em 0;border:1px solid #bbb;}input.text:focus, input.title:focus, textarea:focus, select:focus {border:1px solid #666;}input.text, input.title {width:300px;padding:5px;}input.title {font-size:1.5em;}textarea {width:390px;height:250px;padding:5px;}.error, .notice, .success {padding:.8em;margin-bottom:1em;border:2px solid #ddd;}.error {background:#FBE3E4;color:#8a1f11;border-color:#FBC2C4;}.notice {background:#FFF6BF;color:#514721;border-color:#FFD324;}.success {background:#E6EFC2;color:#264409;border-color:#C6D880;}.error a {color:#8a1f11;}.notice a {color:#514721;}.success a {color:#264409;}'! !!PRNarrowBlueprintLibrary methodsFor: 'processing' stamp: 'tg 9/6/2008 20:46'!updateRoot: aHtmlRoot	super updateRoot: aHtmlRoot.	aHtmlRoot stylesheet		addScreen;		addProjection;		url: (self urlOf: #screenCss).	aHtmlRoot stylesheet		addScreen;		addProjection;		url: (self urlOf: #patchCss).	aHtmlRoot stylesheet		addPrint;		url: (self urlOf: #printCss).	aHtmlRoot if ie do: [		aHtmlRoot stylesheet			addScreen;			addProjection;			url: (self urlOf: #ieCss) ]! !!WAAnchorTag methodsFor: '*pier-seaside-linking' stamp: 'lr 9/9/2009 19:26'!goto: aContext	"Initialize the receiver to properly activate aContext when being clicked. This includes a callback and a human-readable and bookmarkable url."	aContext isValid		ifFalse: [ self class: 'protected' ].	(self attributes includesKey: 'title') 		ifFalse: [ self title: aContext command label ].	(aContext command isView not and: [ aContext command class accessKey notNil ])		ifTrue: [ self attributes at: 'title' append: '(' , aContext command class accessKey displayString , ')' ].	self class: aContext structure cssClass.	self url: (aContext urlOn: canvas)! !!PRDiffAlgorithm methodsFor: '*pier-seaside-rendering' stamp: 'lr 9/28/2009 19:58'!renderOn: html	"Display a change list on the html canvas."	self patchsetDo: [ :operation :object :index |		operation = #+			ifTrue: [ html inserted: object ]			ifFalse: [				operation = #-					ifTrue: [ html deleted: object ]					ifFalse: [ html render: object ] ].		html break ]! !!PRViewCommand methodsFor: '*pier-seaside-converting' stamp: 'lr 3/9/2006 11:30'!asComponent	^ self viewComponent! !!PRViewCommand methodsFor: '*pier-seaside-accessing' stamp: 'cdlm 8/7/2007 01:16'!defaultViewComponentClass	^ self context structure viewComponentClass! !!PRViewCommand methodsFor: '*pier-seaside-protected' stamp: 'lr 12/19/2009 16:52'!initialRequest: aRequest	| viewClass |	super initialRequest: aRequest.	viewClass := PRPierFrame		classFromRequest: aRequest		name: 'view'		base: PRViewComponent.	(viewClass notNil and: [ viewClass isValidIn: self context ])		ifTrue: [ self viewComponentClass: viewClass ].	self viewComponent visiblePresentersDo: [ :each | each initialRequest: aRequest ]! !!PRViewCommand methodsFor: '*pier-seaside-testing' stamp: 'lr 7/13/2009 20:55'!isRestful	^ self viewComponent isRestful! !!PRViewCommand methodsFor: '*pier-seaside-accessing' stamp: 'lr 1/29/2008 09:05'!label	^ self viewComponent label! !!PRViewCommand methodsFor: '*pier-seaside-accessing' stamp: 'lr 4/8/2009 20:15'!rendererInstance	^ self viewComponent rendererInstance! !!PRViewCommand methodsFor: '*pier-seaside-accessing' stamp: 'lr 2/20/2007 15:07'!robots	^ self viewComponent robots! !!PRViewCommand methodsFor: '*pier-seaside-protected' stamp: 'lr 5/2/2009 11:28'!sanitizeSeasideCache	<sanitize>		self properties removeKey: #viewComponent ifAbsent: [ ]! !!PRViewCommand methodsFor: '*pier-seaside-protected' stamp: 'lr 5/28/2009 10:55'!updateUrl: anUrl	super updateUrl: anUrl.	self viewComponentClass = self defaultViewComponentClass		ifFalse: [ anUrl addParameter: 'view' value: self viewComponentClass name displayString ].	self properties		at: #viewComponent		ifPresent: [ :component | component updateUrl: anUrl ]! !!PRViewCommand methodsFor: '*pier-seaside-accessing' stamp: 'lr 3/9/2006 11:30'!viewComponent	^ self propertyAt: #viewComponent ifAbsentPut: [ self viewComponentClass on: self context ]! !!PRViewCommand methodsFor: '*pier-seaside-accessing' stamp: 'lr 3/9/2006 11:30'!viewComponent: aViewComponent	self propertyAt: #viewComponent put: aViewComponent! !!PRViewCommand methodsFor: '*pier-seaside-accessing' stamp: 'lr 1/19/2008 20:36'!viewComponentClass	^ self propertyAt: #viewComponentClass ifAbsentPut: [ self defaultViewComponentClass ]! !!PRViewCommand methodsFor: '*pier-seaside-accessing' stamp: 'lr 3/9/2006 11:30'!viewComponentClass: aClass	self propertyAt: #viewComponentClass put: aClass! !!PRValueLink methodsFor: '*pier-seaside' stamp: 'lr 4/28/2009 17:48'!redirectIn: aContext	<value: 'redirect' comment: 'Redirect to a different location, specified in the ''to'' parameter.'>		| link url |	" ignore the request if this is not the default view, e.g. an rss changes feed " 	(aContext command isView and: [ aContext command viewComponentClass = aContext command defaultViewComponentClass ])		ifFalse: [ ^ nil ].	link := PRLink fromString: ((self		parameterAt: 'to'		ifAbsent: [ ^ nil ])			ifNil: [ ^ nil ]).	link owner: aContext structure.	link isBroken ifTrue: [ ^ nil ].	url := link isInternal		ifTrue: [ (aContext structure: link target) url ]		ifFalse: [ 			link isExternal				ifTrue: [ link url ]				ifFalse: [ ^ nil ] ].	aContext session		returnResponse: (WAResponse redirectTo: url displayString).	^ nil! !!PRValueLink methodsFor: '*pier-seaside' stamp: 'lr 5/21/2009 09:49'!tocIn: aContext	<value: 'toc' comment: 'Display the table of contents of the current structure.'>	^ self lookupStructure: aContext structure do: [ :structure | [ :html |		PRTocRenderer new 			start: structure			in: html painter			on: html ] ]! !!PRLocationCommand methodsFor: '*pier-seaside-converting' stamp: 'lr 8/11/2007 21:57'!saveButton	^ super saveButton value: self class label! !!WACounter class methodsFor: '*pier-seaside' stamp: 'lr 5/26/2009 17:26'!descriptionCount	^ MANumberDescription new		parameterName: 'count';		accessor: #count;		label: 'Count';		beRequired;		default: 0;		beInteger;		yourself! !!PRRestfulSession methodsFor: 'accessing' stamp: 'lr 7/13/2009 21:30'!actionUrlForKey: aString	| url |	url := super actionUrlForKey: aString.	self hasSessionCookie		ifTrue: [ url parameters removeKey: self application handlerField ].	^ url! !!PRRestfulSession methodsFor: 'processing' stamp: 'lr 7/9/2009 16:25'!createComponent: aRequest	| component |	component := self rootComponent new.	self application deploymentMode		ifFalse: [ component := WAToolFrame on: component ].	^ component! !!PRRestfulSession methodsFor: 'testing' stamp: 'lr 7/9/2009 16:04'!hasSessionCookie	^ (self currentRequest cookieAt: self application handlerCookieName) = (self application ensureKeyForHandler: self) displayString! !!PRRestfulSession methodsFor: 'preferences' stamp: 'lr 7/9/2009 15:58'!renderContinuationClass	^ self application preferenceAt: #renderContinuationClass! !!PRRestfulSession methodsFor: 'responding' stamp: 'lr 7/9/2009 16:07'!returnResponse: aResponse	self hasSessionCookie		ifFalse: [ aResponse addCookie: self sessionCookie ].	^ super returnResponse: aResponse! !!PRRestfulSession methodsFor: 'preferences' stamp: 'lr 7/9/2009 15:54'!rootComponent	^ self application preferenceAt: #rootComponent! !!PRRestfulSession methodsFor: 'processing' stamp: 'lr 7/9/2009 16:25'!start: aRequest	root isNil		ifTrue: [ root := self createComponent: aRequest ].	root visiblePresentersDo: [ :each |		each initialRequest: aRequest ].	(self renderContinuationClass root: root)		run! !!PRRestfulSession methodsFor: 'preferences' stamp: 'lr 7/9/2009 14:53'!useSessionCookie	^ false! !!WASession methodsFor: '*pier-seaside' stamp: 'lr 7/9/2009 15:44'!hasSessionCookie	^ false! !!PRAddCommand methodsFor: '*pier-seaside-converting' stamp: 'lr 8/11/2007 21:57'!saveButton	^ super saveButton value: self class label! !!PRPierConfiguration methodsFor: 'accessing' stamp: 'lr 8/1/2007 20:19'!ancestors	^ Array with: WARenderLoopConfiguration new! !!PRPierConfiguration methodsFor: 'accessing-attributes' stamp: 'lr 2/24/2007 20:06'!attributeKernel	^ (WAListAttribute key: #kernel group: #pier)		options: PRKernel instances;		yourself! !!PRPierConfiguration methodsFor: 'accessing' stamp: 'lr 2/24/2007 20:07'!attributes	^ (self class selectors		select: [ :each | each ~= #attributes			and: [ each beginsWith: #attribute ] ])		collect: [ :each | self perform: each ]! !!PRPierConfiguration methodsFor: 'accessing-default' stamp: 'lr 7/12/2007 19:33'!rootComponent	^ PRPierFrame! !!PRPierConfiguration methodsFor: 'accessing-default' stamp: 'lr 7/9/2009 16:30'!sessionClass	^ PRRestfulSession! !!PRPierConfiguration methodsFor: 'accessing-default' stamp: 'lr 7/12/2007 19:32'!sessionExpirySeconds	^ 1800! !!PRContext methodsFor: '*pier-seaside-private' stamp: 'lr 5/26/2009 17:30'!buildComponent: aStructure for: aLink	^ (aStructure componentFor: aLink)		onChangeContext: self;		yourself! !!PRContext methodsFor: '*pier-seaside-private' stamp: 'lr 5/26/2009 17:33'!componentDictionary	^ self propertyAt: #components ifAbsentPut: [ IdentityDictionary new ]! !!PRContext methodsFor: '*pier-seaside-caching' stamp: 'lr 5/26/2009 17:34'!componentFor: aLink	"Return the cached component of aLink, if none is existing yet create a new one."	^ self componentDictionary at: aLink ifAbsentPut: [ self buildComponent: aLink target for: aLink ]! !!PRContext methodsFor: '*pier-seaside-accessing' stamp: 'lr 3/9/2006 11:30'!components	^ self componentDictionary values! !!PRContext methodsFor: '*pier-seaside-caching' stamp: 'lr 5/26/2009 17:37'!flushComponent: aStructure	"Flush all the components that are instantiated from aStructure."		self componentDictionary keys do: [ :each |		each target = aStructure 			ifTrue: [ self componentDictionary removeKey: each ifAbsent: [ ] ] ]! !!PRContext methodsFor: '*pier-seaside-private' stamp: 'lr 5/2/2009 11:24'!sanitizeSeasideCache	<sanitize>		self properties		removeKey: #components ifAbsent: [ ];		removeKey: #session ifAbsent: [ ]! !!PRContext methodsFor: '*pier-seaside-accessing' stamp: 'lr 3/9/2006 11:30'!session	"Answer the cached seaside session, this is a short-cut to avoid to unnecessary lookups."	^ self propertyAt: #session ifAbsentPut: [ WACurrentSession value ]! !!PRContext methodsFor: '*pier-seaside-navigation' stamp: 'lr 4/10/2007 21:47'!structure: aStructure view: aViewComponentClass	"Create a copy of the current context with the current structure replaced by ==aStructure== and the current view by ==aViewComponent==."	^ self structure: aStructure command: (aStructure viewCommandClass new		viewComponentClass: aViewComponentClass;		yourself)! !!PRContext methodsFor: '*pier-seaside-urls' stamp: 'lr 2/11/2008 17:26'!url	"Answer a REST URL to get into the receiving context."		| session |	^ (session := self session) baseUrl		takeServerParametersFromRequest: session currentRequest;		adaptToContext: self;		yourself! !!PRContext methodsFor: '*pier-seaside-urls' stamp: 'lr 7/13/2009 20:56'!urlOn: html	"Answer a Seaside URL to get into the receiving context."	| url |	^ html callbacks isNil		ifTrue: [ self url ]		ifFalse: [			url := html context actionUrl copy.			url purgeOtherFields; adaptToContext: self.			(self command isRestful and: [ html context session hasSessionCookie ])				ifTrue: [ url purgeSeasideFields ]							ifFalse: [					url						addParameter: '_n';						addParameter: (html callbacks							registerActionCallback: [ PRCurrentContext value: self ]) ].			url ]! !!PRContext methodsFor: '*pier-seaside-navigation' stamp: 'lr 4/10/2007 21:47'!view: aViewComponentClass	"Create a copy of the current context ==aViewComponent==."	^ self structure: self structure view: aViewComponentClass! !!PRContext methodsFor: '*pier-seaside-accessing' stamp: 'lr 3/9/2006 11:30'!views	"Answer a list of possible views, dispatching trough the command class."	^ PRViewComponent withAllConcreteClasses		select: [ :each | each isValidIn: self ]! !!PRChangeCommand methodsFor: '*pier-seaside' stamp: 'lr 11/6/2007 13:33'!applyButton	^ #apply -> 'Apply'! !!PRChangeCommand methodsFor: '*pier-seaside' stamp: 'lr 11/6/2007 13:33'!buttonSpecification	^ Array with: self saveButton with: self applyButton with: self cancelButton! !!PRChangeCommand methodsFor: '*pier-seaside' stamp: 'lr 4/9/2009 08:35'!doAnswer	super doAnswer.	self structure isComponent		ifTrue: [ self structure flush ]! !!PRSettingsCommand class methodsFor: 'accessing' stamp: 'lr 10/19/2007 11:41'!accessKey	^ $t! !!PRSettingsCommand class methodsFor: 'testing' stamp: 'lr 11/5/2007 21:44'!isAbstract	^ false! !!PRSettingsCommand class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!label	^ 'Settings'! !!PRSettingsCommand methodsFor: 'accessing' stamp: 'lr 5/22/2007 23:51'!description	^ self structure settingsDescription! !"Pier-Seaside"!!PUSecurity commentStamp: 'lr 12/20/2005 15:05' prior: 0!Every structure is owned by a specific user. The owner of an object comprises its user class. Permissions assigned to the user class only apply to that specific user. A structure is also assigned a group, which comprises its group class. Permissions assigned to the group class only apply to members of that group. Users who are not otherwise represented by the other two classes comprise a file's others class.The effective permissions that have applied to a specific user in relation to a file are determined in logical precedence. For example, the user who owns the file will have the effective permissions given to the user class regardless of those assigned to the group or others class.!!PUBrowseComponent class methodsFor: 'testing' stamp: 'lr 10/17/2006 07:15'!isAbstract	^ false! !!PUBrowseComponent class methodsFor: 'accessing' stamp: 'lr 10/17/2006 07:18'!label	^ 'Browse'! !!PUBrowseComponent methodsFor: 'configuration' stamp: 'lr 2/12/2007 19:07'!defaultPermissions	^ (Array streamContents: [ :stream |		PRCommand allSubclasses do: [ :each |			each isAbstract				ifFalse: [ stream nextPutAll: each permissions ] ] ])		asSortedCollection: [ :a :b | a label < b label ]! !!PUBrowseComponent methodsFor: 'initialization' stamp: 'lr 1/8/2010 22:23'!initialize	super initialize.	permissions := self defaultPermissions! !!PUBrowseComponent methodsFor: 'accessing' stamp: 'lr 10/17/2006 07:20'!permissions	^ permissions! !!PUBrowseComponent methodsFor: 'rendering' stamp: 'lr 9/7/2009 20:46'!renderContentOn: html	self renderPathOn: html.	self renderTableOn: html! !!PUBrowseComponent methodsFor: 'rendering' stamp: 'lr 1/8/2010 22:31'!renderPathOn: html	html div: [		self structure parents do: [ :each |			html text: '/ '.			html anchor				callback: [ self structure: each ];				title: each title;				with: each name.			html text: ' ' ] ].	html break! !!PUBrowseComponent methodsFor: 'rendering' stamp: 'lr 1/8/2010 22:32'!renderPermissions: aStructure permissions: aCollection on: html	| current short |	current := self context structure: aStructure.	self permissions do: [ :each |		short := (aCollection includes: each)			ifTrue: [ each label first asLowercase ]			ifFalse: [ $- ].		(each command isValidIn: current)			ifFalse: [ 				html span 					title: each label; 					with: short ]			ifTrue: [				html anchor					goto: (self context structure: aStructure command: each command new);					title: each label;					with: short ] ]! !!PUBrowseComponent methodsFor: 'rendering' stamp: 'lr 3/18/2008 21:49'!renderTableHeadOn: html	html tableRow: [		html tableHeading: 'name'.		html tableHeading: 'type'.		html tableHeading: 'owner mode'.		html tableHeading: 'group mode'.		html tableHeading: 'other mode'.		html tableHeading: 'owner'.		html tableHeading: 'group' ]! !!PUBrowseComponent methodsFor: 'rendering' stamp: 'lr 1/8/2010 22:44'!renderTableOn: html	html table: [		html tableHead: [			self renderTableHeadOn: html ].		html tableBody: [			self structure parent isNil				ifFalse: [ self renderTableRow: self structure parent named: '..' on: html ].			self renderTableRow: self structure named: '.' on: html.			self structure enumerator do: [ :each |				(each isValidCommand: each viewCommandClass in: (self context structure: structure))					ifTrue: [ self renderTableRow: each named: each name on: html ] ] ] ]! !!PUBrowseComponent methodsFor: 'rendering' stamp: 'lr 1/8/2010 22:24'!renderTableRow: aStructure named: aString on: html	| security |	security := aStructure securityDecoration.	html tableRow attributeAt: 'title' put: aStructure title; with: [		html tableData: [			html anchor				callback: [ self structure: aStructure ];				title: aStructure title;				with: aString ].		html tableData: aStructure class label.		html tableData: [			self				renderPermissions: aStructure				permissions: security ownerPermissions				on: html ].		html tableData: [			self				renderPermissions: aStructure				permissions:security groupPermissions				on: html ].		html tableData: [			self				renderPermissions: aStructure				permissions: security otherPermissions				on: html ].		html tableData: (security owner isNil			ifFalse: [ security owner name ]).		html tableData: (security group isNil			ifFalse: [ security group name ]) ]! !!PUBrowseComponent methodsFor: 'accessing' stamp: 'lr 1/8/2010 22:23'!structure	^ structure ifNil: [ structure := self context structure ]! !!PUBrowseComponent methodsFor: 'accessing' stamp: 'lr 1/8/2010 22:23'!structure: aStructure	structure := aStructure! !!PRContext class methodsFor: '*pier-security' stamp: 'lr 5/5/2009 16:58'!descriptionUser	^ MASingleOptionDescription new		accessor: (MASelectorAccessor read: #user write: #setUser:);		reference: PUUser description;		parameterName: 'user';		priority: 500;		label: 'User';		yourself! !!PRContext methodsFor: '*pier-security-accessing' stamp: 'lr 3/9/2006 11:30'!group	^ self user group! !!PRContext methodsFor: '*pier-security-testing' stamp: 'lr 3/9/2006 11:30'!isLoggedIn	^ self user notNil! !!PRContext methodsFor: '*pier-security-private' stamp: 'lr 4/30/2009 15:22'!rememberUserInCookie: aUser	| session cookie |	session := self session		ifNil: [ ^ nil ].	cookie := WACookie new key: 'pr_token'.	aUser isNil		ifTrue: [ cookie value: ''; expireIn: -356 days ]		ifFalse: [ cookie value: aUser token; expireIn: 7 days ].	session redirectWithCookie: cookie! !!PRContext methodsFor: '*pier-security-private' stamp: 'lr 4/30/2009 15:18'!retrieveUserFromCookie	| session cookie |	session := self session		ifNil: [ ^ nil ].	cookie := (session currentRequest		cookieAt: 'pr_token')			ifNil: [ ^ nil ].	^ self kernel users		detect: [ :each | each token = cookie value ]		ifNone: [ nil ]! !!PRContext methodsFor: '*pier-security-initialization' stamp: 'lr 4/28/2009 22:15'!setUser: aUser	self propertyAt: #user put: aUser.	self rememberUserInCookie: aUser! !!PRContext methodsFor: '*pier-security-accessing' stamp: 'lr 4/30/2009 15:18'!user	^ self propertyAt: #user ifAbsentPut: [ self retrieveUserFromCookie ]! !!PRContext methodsFor: '*pier-security-navigation' stamp: 'lr 3/9/2006 11:30'!user: anUser	"Create a copy of the current context with the current user replaced by anUser."	^ self copy		setUser: anUser;		yourself! !!HTTPSocket class methodsFor: '*pier-security' stamp: 'lr 5/28/2009 14:37'!httpHead: aString	| serverName serverAddr port sock bare page index connectToHost connectToPort |	Socket initializeNetwork.	bare := (aString asLowercase beginsWith: 'http://') 		ifTrue: [ aString copyFrom: 8 to: aString size ]		ifFalse: [ aString ].	bare := bare copyUpTo: $#.	serverName := bare copyUpTo: $/.	page := bare copyFrom: serverName size + 1 to: bare size.	(serverName includes: $:) 		ifTrue: [			index := serverName indexOf: $:.			port := (serverName copyFrom: index + 1 to: serverName size) asNumber.			serverName := serverName copyFrom: 1 to: index - 1 ]		ifFalse: [ port := self defaultPort ].	page size = 0 ifTrue: [ page := '/' ].	(self shouldUseProxy: serverName)		ifFalse: [ 			connectToHost := serverName.			connectToPort := port ]		ifTrue:  [			page := 'http://' , serverName , ':' , port printString , page.			connectToHost := self httpProxyServer.			connectToPort := self httpProxyPort ].	serverAddr := NetNameResolver addressForName: connectToHost timeout: 20.	serverAddr ifNil: [ ^ nil ].	sock := HTTPSocket new.	^ [	sock connectTo: serverAddr port: connectToPort.		(sock waitForConnectionFor: 30)			ifFalse: [ ^ nil ].		sock sendCommand: 'HEAD ' , page , ' HTTP/1.0' , String crlf , 			'Host: ' , serverName , ':' , port printString , String crlf.		sock getResponseUpTo:  String crlf , String crlf ignoring: String cr ]			ensure: [ sock destroy ]! !!PRKernelTest methodsFor: '*pier-security-testing' stamp: 'nfr 10/18/2007 11:51'!testGroupNamed	| adminGroup found |	self		assert: (self kernel groupNamed: 'admin' ifNone: [self fail]) isNil not		description: 'Should find admin group by its name'.	adminGroup := self kernel groupNamed: 'admin' ifNone: [].	self assert: (adminGroup isKindOf: PUGroup).	self assert: (adminGroup name = 'admin').	found := true.	self kernel groupNamed: 'a group that is not there'		ifNone: [found := false].	self deny: found description: 'Should not find a group that is not there'! !!PRKernelTest methodsFor: '*pier-security-testing' stamp: 'nfr 10/18/2007 11:52'!testUserNamed	| adminUser found |	self		assert: (self kernel userNamed: 'admin' ifNone: [self fail]) isNil not		description: 'Should find admin group by its name'.	adminUser := self kernel userNamed: 'admin' ifNone: [].	self assert: (adminUser isKindOf: PUUser).	self assert: (adminUser name = 'admin').	found := true.	self kernel userNamed: 'a user that is not there' ifNone: [found := false].	self deny: found description: 'Should not find a user that is not there'! !!PRForbiddenView methodsFor: '*pier-security-rendering' stamp: 'lr 9/4/2008 13:37'!renderOptionLoginOn: html	<option: 0>		| loginContext |	loginContext := self context		structure: self context structure		command: (PULogin new			answer: forbidden;			yourself).	loginContext isValid ifTrue: [		html listItem: [			html anchor				goto: loginContext;				with: 'Authenticate'.			html text: ' yourself to the site.' ] ]! !!PULinkChangesView class methodsFor: 'instance-creation' stamp: 'lr 5/28/2009 13:21'!on: aCollection	^ self new initializeOn: aCollection! !!PULinkChangesView methodsFor: 'actions' stamp: 'lr 5/31/2009 20:20'!apply: aChange	self inform: 'Not implemented, yet.'! !!PULinkChangesView methodsFor: 'accessing' stamp: 'lr 5/28/2009 13:24'!changes	^ changes! !!PULinkChangesView methodsFor: 'initialization' stamp: 'lr 5/28/2009 13:23'!initializeOn: aCollection	changes := aCollection! !!PULinkChangesView methodsFor: 'rendering' stamp: 'lr 5/31/2009 20:19'!renderButtonsOn: html	html submitButton		with: 'Refresh'.	html submitButton		callback: [ self answer ];		with: 'Close'! !!PULinkChangesView methodsFor: 'rendering' stamp: 'lr 5/28/2009 13:25'!renderContentOn: html	html form: [		self renderTableOn: html.		self renderButtonsOn: html ]! !!PULinkChangesView methodsFor: 'rendering' stamp: 'lr 5/31/2009 20:18'!renderTableHeadOn: html	html tableHeading: 'Owner'.	html tableHeading: 'Old'.	html tableHeading: 'New'.	html tableHeading: 'Status'.	html tableHeading! !!PULinkChangesView methodsFor: 'rendering' stamp: 'lr 5/28/2009 13:41'!renderTableOn: html	changes isEmpty		ifTrue: [ ^ html paragraph: 'No broken links detected.' ].	html table: [		html tableRow: [ self renderTableHeadOn: html ].		changes keysAndValuesDo: [ :key :value |			html tableRow				class: 'even' if: key even;				with: [ self renderTableRow: value on: html ] ] ]! !!PULinkChangesView methodsFor: 'rendering' stamp: 'lr 5/31/2009 20:20'!renderTableRow: aChange on: html	html tableData: [		html anchor			goto: (self context structure: aChange owner);			with: aChange owner absolutePath ].	html tableData: aChange sourceString.	html tableData: [		html textInput			value: aChange targetString;			style: 'background-color: ' , aChange status second;			callback: [ :value | aChange targetString: value ] ].	html tableData: aChange status first.	html tableData: [ 		html submitButton			disabled: aChange isEnabled not;			callback: [ self apply: aChange ];			with: 'Apply' ]! !!PRStructure class methodsFor: '*pier-security-descriptions' stamp: 'lr 3/26/2009 20:58'!descriptionGroup	^ MAToOneRelationDescription new		classes: (Array with: PUGroup);		parameterName: 'group';		accessor: #group;		label: 'Group';		priority: 210;		yourself! !!PRStructure class methodsFor: '*pier-security-descriptions' stamp: 'lr 3/26/2009 20:58'!descriptionOwner	^ MAToOneRelationDescription new		classes: (Array with: PUUser);		parameterName: 'owner';		accessor: #owner;		label: 'Owner';		priority: 200;		yourself! !!PRStructure methodsFor: '*pier-security-accessing' stamp: 'lr 3/9/2006 11:30'!group	"Answer the owning-group of the file."	^ self securityDecoration ifNotNilDo: [ :value | value group ]! !!PRStructure methodsFor: '*pier-security-accessing' stamp: 'lr 3/9/2006 11:30'!owner	"Answer the owning-user of the receiver."	^ self securityDecoration ifNotNilDo: [ :value | value owner ]! !!PRStructure methodsFor: '*pier-security-decorations' stamp: 'lr 3/9/2006 11:30'!securityDecoration	^ self		decorationOfClass: self securityDecorationClass		ifAbsent: [ self securityDecorationClass onStructureAdded: self ]! !!PRStructure methodsFor: '*pier-security-decorations' stamp: 'lr 3/9/2006 11:30'!securityDecorationClass	^ PUSecurity! !!PRVisitor methodsFor: '*pier-security-visiting-structure' stamp: 'lr 10/16/2007 22:28'!visitSecurity: anObject! !!PRCommandTest methodsFor: '*pier-security-accessing' stamp: 'lr 3/9/2006 11:30'!adminGroup	^ self kernel adminGroup! !!PRCommandTest methodsFor: '*pier-security-accessing' stamp: 'lr 3/9/2006 11:30'!adminUser	^ self kernel adminUser! !!PRCommandTest methodsFor: '*pier-security-accessing' stamp: 'mberth 8/21/2007 16:41'!bloggerGroup	^ self kernel groupNamed: 'blogger'		ifNone: [self kernel groups add: self bloggerGroupInstance]! !!PRCommandTest methodsFor: '*pier-security-private' stamp: 'lr 3/9/2006 11:30'!bloggerGroupInstance	^ PUGroup named: 'blogger'! !!PRCommandTest methodsFor: '*pier-security-accessing' stamp: 'mberth 8/21/2007 16:42'!bloggerUser	^ self kernel userNamed: 'james'		ifNone: [self kernel users add: self bloggerUserInstance]! !!PRCommandTest methodsFor: '*pier-security-private' stamp: 'lr 3/9/2006 11:30'!bloggerUserInstance	^ (PUUser named: 'james')		addGroup: self bloggerGroup;		password: 'bottom';		yourself! !!PUChangeGroupTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isAbstract	^ false! !!PUChangeGroupTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:30'!actualClass	^ PUChangeGroup! !!PUChangeGroupTest methodsFor: 'testing' stamp: 'lr 9/27/2007 10:08'!testGroup	self command		with: true; all: true;		group: self bloggerGroup.	self command execute.	self assert: self structure group = self bloggerGroup.	self assert: self child group = self bloggerGroup! !!PUChangeOtherTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isAbstract	^ false! !!PUChangeOtherTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:30'!actualClass	^ PUChangeOther! !!PUChangeOwnerTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isAbstract	^ false! !!PUChangeOwnerTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:30'!actualClass	^ PUChangeOwner! !!PUChangeOwnerTest methodsFor: 'testing' stamp: 'lr 9/27/2007 10:08'!testOwner	self command		with: true; all: true;		owner: self bloggerUser.	self command execute.	self assert: self structure owner = self bloggerUser.	self assert: self child owner = self bloggerUser! !!PUChangeSecurityTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:30'!actualClass	^ PUChangeSecurity! !!PUChangeSecurityTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!child	^ child ifNil: [ child := self childInstance ]! !!PUChangeSecurityTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:30'!childInstance	^ PRPage named: 'child'! !!PUChangeSecurityTest methodsFor: 'accessing' stamp: 'lr 9/11/2006 10:42'!permissions	^ Set new		addAll: PRAddCommand permissions;		addAll: PRRemoveCommand permissions;		yourself! !!PUChangeSecurityTest methodsFor: 'private' stamp: 'lr 9/27/2007 10:08'!structureInstance	^ super structureInstance		addChild: self child;		yourself! !!PUChangeSecurityTest methodsFor: 'testing-operations' stamp: 'lr 9/27/2007 10:07'!testOperationAdd	self command		with: true; all: true;		operator: #add; permissions: self permissions.	self command execute.	self assert: ((self command accessor read: self structure)		includesAllOf: self permissions).	self assert: ((self command accessor read: self child)		includesAllOf: self permissions)! !!PUChangeSecurityTest methodsFor: 'testing-operations' stamp: 'lr 9/27/2007 10:07'!testOperationRemove	self command		with: true; all: true;		operator: #remove; permissions: self permissions.	self command execute.	self deny: ((self command accessor read: self structure)		includesAnyOf: self permissions).	self deny: ((self command accessor read: self child)		includesAnyOf: self permissions)! !!PUChangeSecurityTest methodsFor: 'testing-operations' stamp: 'lr 6/22/2008 18:30'!testOperationSet	self command		with: true; all: true;		operator: #set; permissions: self permissions.	self command execute.	self assert: (self command accessor read: self structure) equalElements: self permissions.	self assert: (self command accessor read: self child) equalElements: self permissions! !!PUChangeSecurityTest methodsFor: 'testing-operations' stamp: 'lr 6/22/2008 18:30'!testOperationUnchanged	| structurePermission childPermissions |	structurePermission := (self command accessor read: self structure)		copy.	childPermissions := (self command accessor read: self child)		copy.	self command		with: true; all: true;		operator: nil; permissions: self permissions.	self command execute.	self assert: (self command accessor		read: self structure) equalElements: structurePermission.	self assert: (self command accessor		read: self child) equalElements: childPermissions! !!PULoginTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isAbstract	^ false! !!PULoginTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:30'!actualClass	^ PULogin! !!PULoginTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:30'!testIsLogged	self deny: self command isLogged! !!PULoginTest methodsFor: 'testing' stamp: 'lr 1/12/2007 15:37'!testLoginAdmin	self assert: self context user isNil.	self command		username: self adminUser name;		password: 'pier'.	self		shouldnt: [ self command execute ]		raise: PUInvalidLogin.	self assert: self command user = self adminUser.	self assert: self command answer user = self adminUser.	self assert: self command answer command class = PRViewCommand.	self assert: self context user isNil! !!PULoginTest methodsFor: 'testing' stamp: 'lr 1/12/2007 15:37'!testLoginBlogger	self assert: self context user isNil.	self command		username: self bloggerUser name;		password: 'bottom'.	self		shouldnt: [ self command execute ]		raise: PUInvalidLogin.	self assert: self command user = self bloggerUser.	self assert: self command answer user = self bloggerUser.	self assert: self command answer command class = PRViewCommand.	self assert: self context user isNil! !!PULoginTest methodsFor: 'testing' stamp: 'lr 1/12/2007 15:37'!testLoginInvalidPassword	self assert: self context user isNil.	self command username: self bloggerUser name.	self should: [ self command execute ] raise: PUInvalidLogin.	self assert: self context user isNil! !!PULoginTest methodsFor: 'testing' stamp: 'lr 1/12/2007 15:37'!testLoginInvalidUsername	self assert: self context user isNil.	self should: [ self command execute ] raise: PUInvalidLogin.	self assert: self context user isNil! !!PULogoutTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isAbstract	^ false! !!PULogoutTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!actualClass	^ PULogout! !!PULogoutTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!contextInstance	^ super contextInstance user: self bloggerUser! !!PULogoutTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:31'!testIsLogged	self deny: self command isLogged! !!PULogoutTest methodsFor: 'testing-testing' stamp: 'lr 3/9/2006 11:31'!testIsQuick	self assert: self command isQuick! !!PULogoutTest methodsFor: 'testing' stamp: 'lr 1/12/2007 15:36'!testingLogout	self assert: self context user = self bloggerUser.	self command execute.	self assert: self command answer user isNil.	self assert: self command answer command class = PRViewCommand.	self assert: self context user = self bloggerUser! !!PRCommand class methodsFor: '*pier-security' stamp: 'lr 9/11/2006 10:21'!permissions	"Answer a collection of permissions as defined by the receiver."	^ Array with: (PUPermission on: self)! !!PRCommand methodsFor: '*pier-security' stamp: 'lr 11/6/2007 08:22'!permission	"The permission required to make the receiver executable in the setup context. ==nil== if no permission is required."	| permissions |	permissions := self class permissions.	^ permissions isEmpty ifFalse: [ permissions anyOne ]! !!PUChangeGroup class methodsFor: 'accessing' stamp: 'lr 5/3/2006 16:58'!accessKey	^ $g! !!PUChangeGroup class methodsFor: 'accessing-description' stamp: 'lr 5/31/2009 20:02'!descriptionGroup	^ MASingleOptionDescription new		comment: 'Changes the group ownership to the selected group.';		options: [ self groupInstances ] asDynamicObject;		reference: PUGroup description;		undefined: '(unchanged)';		parameterName: 'group';		accessor: #group;		label: 'Group';		priority: 200;		beSorted;		yourself! !!PUChangeGroup class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isAbstract	^ false! !!PUChangeGroup class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!label	^ 'Change Group'! !!PUChangeGroup methodsFor: 'configuration' stamp: 'lr 10/6/2008 11:42'!accessor	^ #(securityDecoration groupPermissions) asAccessor! !!PUChangeGroup methodsFor: 'events' stamp: 'lr 3/9/2006 11:30'!doExecuteFor: aStructure	self group notNil		ifTrue: [ aStructure securityDecoration group: self group ].	super doExecuteFor: aStructure! !!PUChangeGroup methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!group	^ group ifNil: [ group := self structure group ]! !!PUChangeGroup methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!group: aGroup	group := aGroup! !!PUChangeOther class methodsFor: 'accessing' stamp: 'lr 5/3/2006 16:58'!accessKey	^ $o! !!PUChangeOther class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isAbstract	^ false! !!PUChangeOther class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!label	^ 'Change Other'! !!PUChangeOther methodsFor: 'configuration' stamp: 'lr 10/6/2008 11:42'!accessor	^ #(securityDecoration otherPermissions) asAccessor! !!PUChangeOwner class methodsFor: 'accessing-description' stamp: 'lr 5/31/2009 20:02'!descriptionOwner	^ MASingleOptionDescription new		comment: 'Changes the ownership to the selected user.';		options: [ self userInstances ] asDynamicObject;		reference: PUUser description;		undefined: '(unchanged)';		parameterName: 'group';		accessor: #owner;		label: 'Owner';		priority: 200;		beSorted;		yourself! !!PUChangeOwner class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isAbstract	^ false! !!PUChangeOwner class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!label	^ 'Change Owner'! !!PUChangeOwner methodsFor: 'accessing' stamp: 'lr 10/6/2008 11:42'!accessor	^ #(securityDecoration ownerPermissions) asAccessor! !!PUChangeOwner methodsFor: 'events' stamp: 'lr 3/9/2006 11:30'!doExecuteFor: aStructure	self owner notNil		ifTrue: [ aStructure securityDecoration owner: self owner ].	super doExecuteFor: aStructure! !!PUChangeOwner methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!owner	^ owner ifNil: [ owner := self structure owner ]! !!PUChangeOwner methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!owner: anUser	owner := anUser! !!PUChangeSecurity class methodsFor: 'accessing-defaults' stamp: 'lr 1/12/2007 16:18'!defaultAll	^ false! !!PUChangeSecurity class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:31'!defaultOperator	^ self defaultOperators first! !!PUChangeSecurity class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:31'!defaultOperators	^ #( set add remove )! !!PUChangeSecurity class methodsFor: 'accessing-defaults' stamp: 'lr 3/9/2006 11:31'!defaultWith	^ true! !!PUChangeSecurity class methodsFor: 'accessing-description' stamp: 'lr 5/31/2009 20:01'!descriptionAll	^ MABooleanDescription new		comment: 'Apply changes recursively to all children.';		parameterName: 'recursive';		default: self defaultAll;		label: 'Recursive';		accessor: #all;		priority: 110;		beRequired;		yourself! !!PUChangeSecurity class methodsFor: 'accessing-description' stamp: 'lr 5/31/2009 20:02'!descriptionOperator	^ MASingleOptionDescription new		comment: 'Defines if the permissions should remain unchanged, be set to the selected ones, or be added/removed from the current selection.';		reference: MASymbolDescription new;		options: self defaultOperators;		default: self defaultOperator;		parameterName: 'operator';		undefined: '(unchanged)';		accessor: #operator;		label: 'Operator';		priority: 300;		yourself! !!PUChangeSecurity class methodsFor: 'accessing-description' stamp: 'lr 5/31/2009 20:02'!descriptionPermissions	^ MAMultipleOptionDescription new		comment: 'Defines the set of permissions used together with the selected operation.';		options: [ self permissionInstances ] asDynamicObject;		reference: PUPermission description;		parameterName: 'permissions';		accessor: #permissions;		label: 'Permissions';		priority: 310;		beSorted;		yourself! !!PUChangeSecurity class methodsFor: 'accessing-description' stamp: 'lr 5/31/2009 20:02'!descriptionWith	^ MABooleanDescription new		comment: 'Apply changes to the current structure.';		parameterName: 'current';		default: self defaultWith;		accessor: #with;		label: 'Current';		priority: 100;		beRequired;		yourself! !!PUChangeSecurity class methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!groupInstances	^ PRCurrentContext value kernel groups! !!PUChangeSecurity class methodsFor: 'private' stamp: 'lr 11/5/2007 21:17'!permissionInstances	^ PRCommand withAllConcreteClasses gather: [ :each | each permissions ]! !!PUChangeSecurity class methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!userInstances	^ PRCurrentContext value kernel users! !!PUChangeSecurity methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!accessor	self subclassResponsibility! !!PUChangeSecurity methodsFor: 'accessing-scope' stamp: 'lr 3/9/2006 11:30'!all	^ all ifNil: [ all := self class defaultAll ]! !!PUChangeSecurity methodsFor: 'accessing-scope' stamp: 'lr 3/9/2006 11:30'!all: aBoolean	all := aBoolean! !!PUChangeSecurity methodsFor: 'events' stamp: 'lr 4/13/2009 11:48'!doExecute	| enumerator |	super doExecute.	enumerator := self structure enumerator.	self with ifTrue: [ enumerator with ].	self all ifTrue: [ enumerator all ].	enumerator do: [ :each |		(self all or: [ self structure = each ])			ifTrue: [ self doExecuteFor: each ] ]! !!PUChangeSecurity methodsFor: 'events' stamp: 'lr 2/12/2007 19:07'!doExecuteFor: aStructure	"Apply the changes to aStructure. Override this method to further modify aStructure. This method is automatically called by #doExecute for all the requested structure."	self accessor		write: (self operator = #set			ifTrue: [ self permissions copy ]			ifFalse: [				self operator = #add					ifTrue: [						(self accessor read: aStructure)							copyWithAll: self permissions ]					ifFalse: [						self operator = #remove							ifTrue: [								(self accessor read: aStructure)									copyWithoutAll: self permissions ]							ifFalse: [ ^ self ] ] ])		to: aStructure! !!PUChangeSecurity methodsFor: 'accessing-operation' stamp: 'lr 3/9/2006 11:30'!operator	^ operator! !!PUChangeSecurity methodsFor: 'accessing-operation' stamp: 'lr 3/9/2006 11:30'!operator: aSymbol	operator := aSymbol! !!PUChangeSecurity methodsFor: 'accessing-operation' stamp: 'lr 3/9/2006 11:30'!permissions	^ permissions ifNil: [ permissions := self accessor read: self structure ]! !!PUChangeSecurity methodsFor: 'accessing-operation' stamp: 'lr 3/9/2006 11:30'!permissions: aCollectionOfCommands	permissions := aCollectionOfCommands asSet! !!PUChangeSecurity methodsFor: 'accessing' stamp: 'lr 8/11/2007 21:58'!saveButton	^ super saveButton value: 'Apply'! !!PUChangeSecurity methodsFor: 'accessing-scope' stamp: 'lr 3/9/2006 11:30'!with	^ with ifNil: [ with := self class defaultWith ]! !!PUChangeSecurity methodsFor: 'accessing-scope' stamp: 'lr 3/9/2006 11:30'!with: aBoolean	with := aBoolean! !!PUChangeUser class methodsFor: 'accessing' stamp: 'lr 11/5/2007 21:15'!accessKey	^ $l! !!PUChangeUser class methodsFor: 'accessing' stamp: 'lr 11/5/2007 21:15'!permissions	^ #()! !!PUChangeUser methodsFor: 'events' stamp: 'lr 2/20/2009 00:33'!doValidate	"Change user commands do not require validation."! !!PUChangeUser methodsFor: 'testing' stamp: 'lr 2/20/2009 00:28'!isLogged	^ false! !!PULogin class methodsFor: 'accessing-description' stamp: 'lr 5/31/2009 20:03'!descriptionPassword	^ MAPasswordDescription new		parameterName: 'password';		accessor: #password;		label: 'Password';		priority: 200;		beRequired;		yourself! !!PULogin class methodsFor: 'accessing-description' stamp: 'lr 5/31/2009 20:03'!descriptionUsername	^ MAStringDescription new		parameterName: 'username';		accessor: #username;		label: 'Username';		priority: 100;		beRequired;		yourself! !!PULogin class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isAbstract	^ false! !!PULogin class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isValidIn: aContext	^ aContext isLoggedIn not! !!PULogin class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!label	^ 'Login'! !!PULogin methodsFor: 'events' stamp: 'lr 10/22/2007 22:16'!doAnswer	super doAnswer.	self answer: (self answer user: self user)! !!PULogin methodsFor: 'events' stamp: 'lr 2/3/2007 19:23'!doValidate	super doValidate.	self user: (self kernel users		detect: [ :each |			each name = self username				and: [ each validatePassword: self password ] ]		ifNone: [ self invalidLogin ])! !!PULogin methodsFor: 'private' stamp: 'lr 2/3/2007 19:25'!invalidLogin	PUInvalidLogin		description: self description		signal: 'Invalid username or password.'! !!PULogin methodsFor: 'configuration' stamp: 'lr 2/3/2007 19:25'!mementoClass	^ MACachedMemento! !!PULogin methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!password	^ password ifNil: [ password := String new ]! !!PULogin methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!password: aString	password := aString! !!PULogin methodsFor: 'configuration' stamp: 'lr 8/11/2007 21:58'!saveButton	^ super saveButton value: self class label! !!PULogin methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!user	^ user! !!PULogin methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!user: aUser	user := aUser! !!PULogin methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!username	^ username ifNil: [ username := String new ]! !!PULogin methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!username: aString	username := aString! !!PULogout class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isAbstract	^ false! !!PULogout class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isValidIn: aContext	^ aContext isLoggedIn! !!PULogout class methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!label	^ 'Logout'! !!PULogout methodsFor: 'events' stamp: 'lr 3/21/2006 18:08'!doAnswer	super doAnswer.	self answer: (self answer user: nil)! !!PULogout methodsFor: 'events' stamp: 'lr 4/28/2009 22:38'!doExecute	super doExecute.	self context user isNil 		ifFalse: [ self context user newToken ]! !!PULogout methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isQuick	^ true! !!PRKernel methodsFor: '*pier-security-defaults' stamp: 'lr 9/27/2006 11:45'!adminGroup	^ self propertyAt: #adminGroup ifAbsentPut: [ PUGroup named: 'admin' ]! !!PRKernel methodsFor: '*pier-security-defaults' stamp: 'lr 9/27/2006 11:45'!adminUser	^ self propertyAt: #adminUser ifAbsentPut: [		(PUUser named: 'admin')			addGroup: self adminGroup;			password: 'pier';			superuser: true;			yourself ]! !!PRKernel methodsFor: '*pier-security-accessing' stamp: 'lr 2/5/2009 21:34'!groupNamed: aString ifNone: aBlock	^ self groups 		detect: [ :each | each name = aString ]		ifNone: aBlock! !!PRKernel methodsFor: '*pier-security-accessing' stamp: 'lr 3/9/2006 11:30'!groups	^ self propertyAt: #groups ifAbsentPut: [ Set with: self adminGroup ]! !!PRKernel methodsFor: '*pier-security-accessing' stamp: 'lr 2/5/2009 21:58'!userNamed: aString ifNone: aBlock	^ self users		detect: [ :each | each name = aString ]		ifNone: aBlock! !!PRKernel methodsFor: '*pier-security-accessing' stamp: 'lr 3/9/2006 11:30'!users	^ self propertyAt: #users ifAbsentPut: [ Set with: self adminUser ]! !!PUSecurity class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isAbstract	^ false! !!PUSecurity class methodsFor: 'events' stamp: 'lr 4/5/2007 17:59'!onStructureAdded: aStructure	| decoration |	decoration := aStructure isRoot		ifTrue: [ aStructure securityDecorationClass new ]		ifFalse: [ aStructure parent securityDecoration copy ].	PRCurrentContext value ifNotNilDo: [ :context |		context user ifNotNilDo: [ :user |			decoration owner: user.			decoration group				ifNil: [ decoration group: user group ] ] ].	^ aStructure		addDecoration: decoration		ifPresent: [ :value | value ]! !!PUSecurity methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:31'!accept: aVisitor	aVisitor visitSecurity: self! !!PUSecurity methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!group	^ group! !!PUSecurity methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!group: aGroup	group := aGroup! !!PUSecurity methodsFor: 'accessing-permissions' stamp: 'lr 9/11/2006 10:28'!groupPermissions	^ groupPermissions ifNil: [ groupPermissions := self ownerPermissions copy ]! !!PUSecurity methodsFor: 'accessing-permissions' stamp: 'lr 9/11/2006 10:28'!groupPermissions: aSet	groupPermissions := aSet asSet! !!PUSecurity methodsFor: 'testing' stamp: 'lr 4/29/2009 23:29'!hasPermission: aPermission for: aUser	"Test if the user aUser has the permission aPermission. This is the central method to test for permissions in Pier."	(aUser notNil and: [ aUser isSuperuser ])		ifTrue: [ ^ true ].	(self owner = aUser and: [ self ownerPermissions includes: aPermission ])		ifTrue: [ ^ true ].	(self group notNil and: [ (self group includes: aUser) and: [ (self groupPermissions includes: aPermission) ] ])		ifTrue: [ ^ true ].	(self otherPermissions includes: aPermission)		ifTrue: [ ^ true ].	^ false! !!PUSecurity methodsFor: 'initialization' stamp: 'lr 9/11/2006 10:48'!initialize	super initialize.	self ownerPermissions; groupPermissions; otherPermissions! !!PUSecurity methodsFor: 'testing' stamp: 'lr 4/29/2009 23:30'!isAllowedCommand: aCommandClass in: aContext	"Answer if aCommandClass has any permissions in the current context."	^ aCommandClass permissions		anySatisfy: [ :permission | self hasPermission: permission for: aContext user ]! !!PUSecurity methodsFor: 'accessing-permissions' stamp: 'lr 9/11/2006 10:29'!otherPermissions	^ otherPermissions ifNil: [ otherPermissions := Set withAll: PRViewCommand permissions ]! !!PUSecurity methodsFor: 'accessing-permissions' stamp: 'lr 9/11/2006 10:29'!otherPermissions: aSet	otherPermissions := aSet asSet! !!PUSecurity methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!owner	^ owner! !!PUSecurity methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!owner: anUser	owner := anUser! !!PUSecurity methodsFor: 'accessing-permissions' stamp: 'lr 9/11/2006 10:29'!ownerPermissions	^ ownerPermissions ifNil: [ ownerPermissions := PUChangeSecurity permissionInstances asSet ]! !!PUSecurity methodsFor: 'accessing-permissions' stamp: 'lr 9/11/2006 10:30'!ownerPermissions: aSet	ownerPermissions := aSet asSet! !!PUSecurity methodsFor: 'copying' stamp: 'lr 9/11/2006 10:30'!postCopy	super postCopy.	self ownerPermissions: self ownerPermissions copy.	self groupPermissions: self groupPermissions copy.	self otherPermissions: self otherPermissions copy! !!PUSecurity methodsFor: 'configuration' stamp: 'lr 3/9/2006 11:31'!priority	^ -200! !!PUSecurity methodsFor: 'testing' stamp: 'lr 4/29/2009 23:30'!validateCommand: aCommand	"Validate the evaluation of aCommand on the owning structure. Throws an error if this violates ther current permissions."	(self hasPermission: aCommand permission for: aCommand context user)		ifFalse: [ MAConditionError description: self description signal: 'Insufficient permissions' ]! !!PUMemberTest methodsFor: 'running' stamp: 'lr 9/27/2006 11:47'!setUp	group1 := PUGroup named: 'group 1'.	group2 := PUGroup named: 'group 2'.	user1 := PUUser named: 'user 1'.	user2 := PUUser named: 'user 2'.	user3 := PUUser named: 'user 3'! !!PUMemberTest methodsFor: 'testing' stamp: 'lr 2/12/2007 19:07'!testEqualitiy	self assert: group1 = group1.	self assert: group2 = group2.	self assert: user1 = user1.	self assert: user2 = user2.	self assert: user3 = user3.	self deny: group1 = group2.	self deny: group2 = group1.	self deny: user1 = user2.	self deny: user2 = user3.	self deny: user3 = user1.	self deny: group1 = user1.	self deny: group2 = user1.	self deny: user1 = group1.	self deny: user2 = group1.	self deny: user3 = group1! !!PUMemberTest methodsFor: 'testing-groups' stamp: 'lr 6/22/2008 18:31'!testGroupUsers	group1 users: (Array with: user1 with: user2).	self assert: group1 users equalElements: (Set with: user1 with: user2).	self assert: user1 groups = (OrderedCollection with: group1).	self assert: user2 groups = (OrderedCollection with: group1).	self assert: user3 groups = (OrderedCollection new).	group1 users: (Array with: user2 with: user3).	self assert: group1 users equalElements: (Set with: user2 with: user3).	self assert: user1 groups = (OrderedCollection new).	self assert: user2 groups = (OrderedCollection with: group1).	self assert: user3 groups = (OrderedCollection with: group1)! !!PUMemberTest methodsFor: 'testing' stamp: 'lr 9/27/2006 11:49'!testName	self assert: group1 name = 'group 1'.	self assert: group2 name = 'group 2'.	self assert: user1 name = 'user 1'.	self assert: user2 name = 'user 2'.	self assert: user3 name = 'user 3'! !!PUMemberTest methodsFor: 'testing-user' stamp: 'lr 6/22/2008 18:31'!testUserAddGroups	user1 addGroup: group1; addGroup: group2.	self assert: user1 group = group1.	self assert: user1 groups = (OrderedCollection with: group1 with: group2).	self assert: group1 users equalElements: (Set with: user1).	self assert: group2 users equalElements: (Set with: user1)! !!PUMemberTest methodsFor: 'testing-user' stamp: 'lr 6/22/2008 18:31'!testUserGroups	user1 groups: (Array with: group1 with: group2).	self assert: user1 groups = (OrderedCollection with: group1 with: group2).	self assert: group1 users equalElements: (Set with: user1).	self assert: group2 users equalElements: (Set with: user1).	user1 groups: (Array with: group1).	self assert: user1 groups = (OrderedCollection with: group1).	self assert: group1 users equalElements: (Set with: user1).	self assert: group2 users equalElements: (Set new)! !!PUMemberTest methodsFor: 'testing-user' stamp: 'lr 9/11/2008 16:19'!testUserPassword	user1 password: 'foo'.	self deny: user1 password = 'foo'.	self assert: (user1 validatePassword: 'foo').		user1 password: user1 password.	self assert: (user1 validatePassword: 'foo')! !!PUMemberTest methodsFor: 'testing-user' stamp: 'lr 6/22/2008 18:31'!testUserRemoveGroups	user1 addGroup: group1; addGroup: group2; removeGroup: group2.	self assert: user1 groups = (OrderedCollection with: group1).	self assert: group1 users equalElements: (Set with: user1).	self assert: group2 users equalElements: (Set new)! !!PUMemberTest methodsFor: 'testing-user' stamp: 'lr 9/27/2006 11:53'!testUserSuperuser	self deny: user1 superuser.	self deny: user1 isSuperuser.	user1 superuser: true.	self assert: user1 superuser.	self assert: user1 isSuperuser! !!TestCase methodsFor: '*pier-security' stamp: 'lr 6/22/2008 18:28'!assert: aCollection1 equalElements: aCollection2	self assert: aCollection1 size = aCollection2 size.	aCollection1 do: [ :each | self assert: (aCollection2 includes: each) ]! !!PRValueLink methodsFor: '*pier-security' stamp: 'lr 4/1/2009 21:46'!groupIn: aContext	<value: 'group' comment: 'Display the group of the current structure.'>		^ self lookupStructure: aContext structure do: [ :structure |		self formatDescribed: structure group default: #name ]! !!PRValueLink methodsFor: '*pier-security' stamp: 'lr 4/1/2009 21:46'!ownerIn: aContext	<value: 'owner' comment: 'Display the owner of the current structure.'>	^ self lookupStructure: aContext structure do: [ :structure |		self formatDescribed: structure owner default: #name ]! !!PRValueLink methodsFor: '*pier-security' stamp: 'lr 4/1/2009 21:46'!userIn: aContext	<value: 'user' comment: 'Display the currently authenticated structure.'>	^ self formatDescribed: aContext user default: #name! !!PRWidget methodsFor: '*pier-security-testing' stamp: 'lr 9/27/2006 14:19'!isSuperuser	^ self context user notNil and: [ self context user isSuperuser ]! !!PUGroupsWidget class methodsFor: 'testing' stamp: 'lr 9/27/2006 10:30'!isAbstract	^ false! !!PUGroupsWidget class methodsFor: 'accessing' stamp: 'lr 9/3/2008 11:50'!label	^ 'Groups'! !!PUGroupsWidget methodsFor: 'accessing' stamp: 'lr 9/27/2006 10:52'!memberClass	^ PUGroup! !!PUGroupsWidget methodsFor: 'accessing' stamp: 'lr 9/27/2006 10:54'!members	^ self context kernel groups! !!PUGroupsWidget methodsFor: 'actions' stamp: 'lr 9/4/2009 17:42'!remove: aMember	aMember users isEmpty ifFalse: [ 		^ self show: (WAFormDialog new			addMessage: 'Remove all users before removing a group.';			yourself) ].	super remove: aMember! !!PUMemberWidget class methodsFor: 'accessing' stamp: 'lr 9/3/2008 11:46'!groupLabel	^ 'Pier System'! !!PUMemberWidget methodsFor: 'actions' stamp: 'lr 9/4/2009 17:40'!add: aString	aString isEmptyOrNil		ifTrue: [ ^ self ].	self members do: [ :each |		each name = aString ifTrue: [ 			self show: (WAFormDialog new				addMessage: 'A member with the name ' , aString printString , ' already exists.';				yourself) ] ].	self		edit: (self memberClass named: aString) title: 'Add'		do: [ :member | 			self members add: member.			self refresh	]! !!PUMemberWidget methodsFor: 'private' stamp: 'lr 4/23/2009 22:38'!buildReport	| component |	component := MAReport		rows: self members asArray		description: (self memberClass description			select: [ :each | each hasProperty: #report ]).	component addColumn: (MACommandColumn new		visible: self isSuperuser;		addCommandOn: self selector: #edit: text: 'edit';		addCommandOn: self selector: #remove: text: 'remove';		yourself).	^ component! !!PUMemberWidget methodsFor: 'accessing' stamp: 'lr 2/12/2007 19:07'!children	^ Array with: self report! !!PUMemberWidget methodsFor: 'actions' stamp: 'lr 9/4/2009 17:39'!edit: aMember	self edit: aMember title: 'Edit' do: [ :member | self refresh ]! !!PUMemberWidget methodsFor: 'actions' stamp: 'lr 9/4/2009 17:37'!edit: aMember title: aString do: aBlock	self isSuperuser 		ifFalse: [ ^ nil ].	self 		show: (aMember asComponent			addMessage: aString;			addValidatedForm;			yourself)		onAnswer: [ :answer | 			answer notNil				ifTrue: [ aBlock value: answer ] ]! !!PUMemberWidget methodsFor: 'accessing' stamp: 'lr 10/30/2006 19:30'!memberClass	self subclassResponsibility! !!PUMemberWidget methodsFor: 'accessing' stamp: 'lr 10/30/2006 19:29'!members	self subclassResponsibility! !!PUMemberWidget methodsFor: 'events' stamp: 'lr 9/26/2007 19:15'!onChangeContext: aContext	super onChangeContext: aContext.	self report columns last visible: self isSuperuser! !!PUMemberWidget methodsFor: 'actions' stamp: 'lr 9/27/2006 11:01'!refresh	self report rows: self members asArray! !!PUMemberWidget methodsFor: 'actions' stamp: 'lr 9/4/2009 17:45'!remove: aMember	self remove: aMember do: [ :answer | ]! !!PUMemberWidget methodsFor: 'actions' stamp: 'lr 9/4/2009 17:46'!remove: aMember do: aBlock	self isSuperuser 		ifFalse: [ ^ nil ].	self		show: (WAYesOrNoDialog new			addMessage: 'Are you sure to remove ' , aMember name printString , '?';			yourself)		onAnswer: [ :answer |			answer ifTrue: [				self members remove: aMember.				self refresh.				aBlock value: aMember ] ]! !!PUMemberWidget methodsFor: 'rendering' stamp: 'lr 9/27/2006 12:12'!renderAddOn: html	self isSuperuser		ifFalse: [ ^ self ].	html break.	html form: [		html textInput			callback: [ :value | self add: value ].		html submitButton			text: 'add' ]! !!PUMemberWidget methodsFor: 'rendering' stamp: 'lr 4/23/2007 07:43'!renderContentOn: html	self renderReportOn: html.	self renderAddOn: html! !!PUMemberWidget methodsFor: 'rendering' stamp: 'lr 9/27/2006 10:59'!renderReportOn: html	html render: self report! !!PUMemberWidget methodsFor: 'accessing' stamp: 'lr 9/27/2006 10:58'!report	^ report ifNil: [ report := self buildReport ]! !!PUUsersWidget class methodsFor: 'testing' stamp: 'lr 9/27/2006 10:30'!isAbstract	^ false! !!PUUsersWidget class methodsFor: 'accessing' stamp: 'lr 9/3/2008 11:50'!label	^ 'Users'! !!PUUsersWidget methodsFor: 'accessing' stamp: 'lr 9/27/2006 10:52'!memberClass	^ PUUser! !!PUUsersWidget methodsFor: 'accessing' stamp: 'lr 9/27/2006 10:54'!members	^ self context kernel users! !!PUUsersWidget methodsFor: 'actions' stamp: 'lr 9/4/2009 17:48'!remove: aMember	self context user = aMember ifTrue: [ 		^ self show: (WAFormDialog new			addMessage: 'You cannot remove yourself.';			yourself) ].	self remove: aMember do: [ :member | member groups: #() ]! !!PULinksWidget class methodsFor: 'testing' stamp: 'lr 4/6/2009 13:00'!isAbstract	^ false! !!PULinksWidget class methodsFor: 'accessing' stamp: 'lr 5/28/2009 11:33'!label	^ 'Links'! !!PULinksWidget methodsFor: 'private' stamp: 'lr 4/22/2009 17:16'!buildReport	| component |	component := super buildReport.	component addColumn: (MAColumn new		renderer: [ :value :html | self renderLink: value on: html ];		formatter: [ :value | value reference ];		accessor: #yourself;		label: 'Link';		yourself).	component addColumn: (MAColumn new		accessor: #(class label);		label: 'Kind';		filter: true;		yourself).	component addColumn: (MAColumn new		renderer: [ :value :html | self renderStructure: value owner on: html ];		formatter: [ :value | value absolutePath ];		accessor: #owner;		label: 'Owner';		filter: true;		yourself).	component addColumn: (MAColumn new		accessor: #isEmbedded;		label: 'Embedded';		filter: true;		yourself).	component addColumn: (MAColumn new		accessor: #isBroken;		label: 'Broken';		filter: true;		yourself).	^ component! !!PULinksWidget methodsFor: 'actions' stamp: 'lr 9/4/2009 17:33'!check	"Checks the currently displayed links."		| changes change |	changes := OrderedCollection new.	self report cache do: [ :link |		change := PULinkChange on: link.		change isValid			ifFalse: [ changes add: change repair ] ].	self 		show: (PULinkChangesView on: changes)		onAnswer: [ :answer | self refresh ]! !!PULinksWidget methodsFor: 'rendering' stamp: 'lr 5/28/2009 11:39'!renderButtonsOn: html	super renderButtonsOn: html.	html submitButton		callback: [ self check ];		with: 'Check'! !!PULinksWidget methodsFor: 'rendering' stamp: 'lr 4/22/2009 16:59'!renderLink: aLink on: html	| document |	(aLink isKindOf: PRValueLink)		ifTrue: [ document := PRText content: aLink text ]		ifFalse: [			document := aLink copy.			document setChildren: #(); parameters: #(); embedded: false.			document add: (PRText content: aLink reference).			document propertyAt: 'title' put: aLink text ].	html rendererInstance		continue: document		in: self report on: html! !!PULinksWidget methodsFor: 'accessing' stamp: 'lr 4/22/2009 17:02'!rows	| links |	links := OrderedCollection new: 1024.	(self context enumeratorFor: self context root) everything do: [ :structure |		structure outgoingReferences			continue: [ :link | false ];			do: [ :each | 				each owner isNil 					ifFalse: [ links addLast: each ] ] ].	^ links! !!PUReportWidget class methodsFor: 'accessing' stamp: 'lr 4/22/2009 17:05'!groupLabel	^ 'Pier System'! !!PUReportWidget methodsFor: 'private' stamp: 'lr 4/22/2009 17:04'!buildReport	^ (MAReport rows: self rows)		showFilter: true;		batchSize: 25;		yourself! !!PUReportWidget methodsFor: 'accessing' stamp: 'lr 4/22/2009 16:58'!children	^ Array with: self report! !!PUReportWidget methodsFor: 'actions' stamp: 'lr 4/22/2009 17:09'!export	self session returnResponse: (WAResponse		document: self report export		mimeType: 'application/excel'		fileName: self context structure name , '.xls')! !!PUReportWidget methodsFor: 'actions' stamp: 'lr 4/22/2009 17:01'!refresh	self report rows: self rows! !!PUReportWidget methodsFor: 'rendering' stamp: 'lr 5/28/2009 11:39'!renderActionsOn: html 	html form: [ self renderButtonsOn: html ]! !!PUReportWidget methodsFor: 'rendering' stamp: 'lr 5/28/2009 11:39'!renderButtonsOn: html	html submitButton		callback: [ self refresh ];		with: 'Refresh'.	html submitButton		callback: [ self export ];		with: 'Export'! !!PUReportWidget methodsFor: 'rendering' stamp: 'lr 4/22/2009 16:59'!renderContentOn: html	self renderReportOn: html.	self renderActionsOn: html! !!PUReportWidget methodsFor: 'rendering' stamp: 'lr 4/22/2009 16:59'!renderReportOn: html	html render: self report! !!PUReportWidget methodsFor: 'rendering' stamp: 'lr 4/22/2009 17:16'!renderStructure: aStructure on: html	html anchor		goto: (self context structure: aStructure);		with: aStructure absolutePath! !!PUReportWidget methodsFor: 'accessing' stamp: 'lr 4/22/2009 16:58'!report	^ report ifNil: [ report := self buildReport ]! !!PUReportWidget methodsFor: 'accessing' stamp: 'lr 4/22/2009 17:02'!rows	self subclassresponsibility! !!PUStructuresWidget class methodsFor: 'testing' stamp: 'lr 4/22/2009 17:05'!isAbstract	^ false! !!PUStructuresWidget class methodsFor: 'accessing' stamp: 'lr 4/22/2009 17:05'!label	^ 'Structures'! !!PUStructuresWidget methodsFor: 'private' stamp: 'lr 4/22/2009 17:17'!buildReport	| component |	component := super buildReport.	component addColumn: (MAColumn new		accessor: #title;		label: 'Title';		yourself).	component addColumn: (MAColumn new		renderer: [ :value :html | self renderStructure: value on: html ];		formatter: [ :value | value absolutePath ];		accessor: #yourself;		label: 'Location';		yourself).	component addColumn: (MAColumn new		accessor: #(class label);		label: 'Kind';		filter: true;		yourself).	component addColumn: (MAColumn new		accessor: #(owner name);		label: 'Owner';		filter: true;		yourself).	component addColumn: (MAColumn new		accessor: #(group name);		label: 'Group';		filter: true;		yourself).	^ component! !!PUStructuresWidget methodsFor: 'accessing' stamp: 'lr 4/24/2009 14:18'!query: aString	| tokens |	(query := aString) isNil 		ifTrue: [ ^ self report rowFilter: nil ].	tokens := aString findTokens: Character space.	tokens isEmpty		ifTrue: [ ^ self report rowFilter: nil ].	self report rowFilter: [ :row |		| string |		string := (row description children			collect: [ :description | description toString: (row readUsing: description) ])			reduce: [ :a :b | a , String cr , b ].		tokens allSatisfy: [ :token |			token first = $-				ifTrue: [ (string includesSubstring: token allButFirst caseSensitive: false) not ]				ifFalse: [ (string includesSubstring: token caseSensitive: false) ] ] ]! !!PUStructuresWidget methodsFor: 'rendering' stamp: 'lr 4/24/2009 13:49'!renderContentOn: html	self renderFilterOn: html.	super renderContentOn: html! !!PUStructuresWidget methodsFor: 'rendering' stamp: 'lr 4/24/2009 14:22'!renderFilterOn: html	html form class: 'magritte'; with: [		html table: [ 			html tableRow: [				html tableHeading					title: 'Separate different terms by spaces. To exclude terms prefix with a minus.';					with: 'Search Query:'.				html tableData: [					html textInput						value: query;						callback: [ :value | self query: value ].					html space; submitButton: 'Filter' ] ] ] ]! !!PUStructuresWidget methodsFor: 'accessing' stamp: 'lr 4/22/2009 17:06'!rows	^ (self context enumeratorFor: self context root) 		everything contents! !!PUSecurityWidget class methodsFor: 'accessing' stamp: 'lr 9/3/2008 11:46'!groupLabel	^ 'Pier System'! !!PUSecurityWidget class methodsFor: 'testing' stamp: 'lr 9/27/2006 12:16'!isAbstract	^ false! !!PUSecurityWidget class methodsFor: 'accessing' stamp: 'lr 9/3/2008 11:50'!label	^ 'Credentials'! !!PUSecurityWidget methodsFor: 'actions' stamp: 'lr 9/4/2009 17:50'!editUser	"Ugly, but it works for now."	| component |	component := (self context user description		select: [ :each | each hasProperty: #public ])			asComponentOn: self context user.	component		addValidatedForm;		addMessage: 'Edit User'.	(self context components		detect: [ :each | each isKindOf: PRContentsWidget ]		ifNone: [ ^ self ])			show: component! !!PUSecurityWidget methodsFor: 'rendering' stamp: 'tg 2/1/2009 15:02'!renderContentOn: html	| user |	user := self context user.	user isNil ifFalse: [		html span class: 'changePassword'; with: [html anchor callback: [ self editUser]; with: 'change password' ].	].! !!PUSystemWidget class methodsFor: 'accessing' stamp: 'lr 9/3/2008 11:46'!groupLabel	^ 'Pier System'! !!PUSystemWidget class methodsFor: 'testing' stamp: 'lr 9/27/2006 14:18'!isAbstract	^ false! !!PUSystemWidget class methodsFor: 'accessing' stamp: 'lr 9/27/2006 14:18'!label	^ 'System'! !!PUSystemWidget methodsFor: 'accessing' stamp: 'lr 2/3/2007 19:17'!persistency	^ self context kernel persistency! !!PUSystemWidget methodsFor: 'rendering' stamp: 'lr 2/12/2007 19:07'!renderActionsOn: html	html form: [		html submitButton			callback: [ Smalltalk garbageCollect ];			text: 'Garbage Collect'.		(self persistency respondsTo: #snapshot) ifTrue: [			html submitButton				callback: [ self persistency snapshot ];				text: 'Snapshot' ] ]! !!PUSystemWidget methodsFor: 'rendering' stamp: 'lr 4/23/2007 07:43'!renderContentOn: html	html preformatted: SeasidePlatformSupport vmStatisticsReportString.	self isSuperuser ifTrue: [ self renderActionsOn: html ]! !!PRAddCommand class methodsFor: '*pier-security-private' stamp: 'lr 4/29/2009 23:34'!descriptionTypeSecurity: aDescription	"Only list the structures with that the current user can actually add."	^ aDescription		options: [ self structureClassesSecurity ] asDynamicObject;		yourself! !!PRAddCommand class methodsFor: '*pier-security' stamp: 'lr 4/30/2009 00:04'!permissions	^ PRStructure withAllConcreteClasses		collect: [ :class | PUAddPermission on: self structure: class ]! !!PRAddCommand class methodsFor: '*pier-security-private' stamp: 'lr 4/30/2009 00:03'!structureClassesSecurity	| context |	context := PRCurrentContext value.	^ self structureClasses select: [ :class |		context structure securityDecoration			hasPermission: (PUAddPermission				on: self structure: class)			for: context user ]! !!PRAddCommand methodsFor: '*pier-security' stamp: 'lr 4/30/2009 00:03'!permission	^ PUAddPermission on: self class structure: self type! !!PRAddCommandTest methodsFor: '*pier-security-testing' stamp: 'lr 6/22/2008 18:29'!testGroup	| parentDecoration childDecoration |	parentDecoration := self context structure		securityDecoration.	parentDecoration		owner: self bloggerUser;		ownerPermissions: PUChangeSecurity permissionInstances;		group: self adminGroup;		groupPermissions: PRAddCommand permissions;		otherPermissions: #().	self context		setUser: self bloggerUser.	PRCurrentContext		use: self		during: [ self command execute ].	childDecoration := self command answer structure		securityDecoration.	self assert: childDecoration owner = self bloggerUser.	self assert: childDecoration ownerPermissions equalElements: PUChangeSecurity permissionInstances.	self assert: childDecoration group = self adminGroup.	self assert: childDecoration groupPermissions equalElements: PRAddCommand permissions.	self assert: childDecoration otherPermissions equalElements: #()! !!PRAddCommandTest methodsFor: '*pier-security-testing' stamp: 'lr 6/22/2008 18:29'!testOwner	| parentDecoration childDecoration |	parentDecoration := self context structure		securityDecoration.	parentDecoration		owner: self adminUser;		ownerPermissions: PRAddCommand permissions;		group: self bloggerGroup;		groupPermissions: PUChangeSecurity permissionInstances;		otherPermissions: #().	self context		setUser: self bloggerUser.	PRCurrentContext		use: self		during: [ self command execute ].	childDecoration := self command answer structure		securityDecoration.	self assert: childDecoration owner = self bloggerUser.	self assert: childDecoration ownerPermissions equalElements: PRAddCommand permissions.	self assert: childDecoration group = self bloggerGroup.	self assert: childDecoration groupPermissions equalElements: PUChangeSecurity permissionInstances.	self assert: childDecoration otherPermissions equalElements: #()! !!PRAddCommandTest methodsFor: '*pier-security-testing' stamp: 'lr 6/22/2008 18:30'!testWorld	| parentDecoration childDecoration |	parentDecoration := self context structure		securityDecoration.	parentDecoration		owner: self adminUser;		ownerPermissions: PUChangeSecurity permissionInstances;		group: self adminGroup;		groupPermissions: PUChangeSecurity permissionInstances;		otherPermissions: PRAddCommand permissions.	self context		setUser: nil.	PRCurrentContext		use: self		during: [ self command execute ].	childDecoration := self command answer structure		securityDecoration.	self assert: childDecoration owner = self adminUser.	self assert: childDecoration ownerPermissions equalElements: PUChangeSecurity permissionInstances.	self assert: childDecoration group = self adminGroup.	self assert: childDecoration groupPermissions equalElements: PUChangeSecurity permissionInstances.	self assert: childDecoration otherPermissions equalElements: PRAddCommand permissions! !!PULinkChange class methodsFor: 'instance creation' stamp: 'lr 5/28/2009 11:46'!on: aLink	^ self basicNew initializeOn: aLink! !!PULinkChange methodsFor: 'private' stamp: 'lr 5/28/2009 20:39'!httpHead: aString	"Answer an array with response code and effective URL, or nil."	| url socket |	url := Url absoluteFromText: aString.	(url isKindOf: HttpUrl)		ifFalse: [ ^ nil ].	[ socket := HTTPSocket		initHTTPSocket: url		wait: (HTTPSocket deadlineSecs: 1)		ifError: [ ^ Array with: 404 with: aString ] ]			on: NameLookupFailure			do: [ :err | ^ Array with: 404 with: aString ].	^ [ [ socket sendCommand: ('HEAD ' , ((HTTPSocket shouldUseProxy: url authority)		ifTrue: [ url printString ] ifFalse: [ url fullPath ]) ,  ' HTTP/1.0' , String crlf) ,			('Host: ' , url authority , String crlf) , 			(HTTPSocket userAgentString , String crlf) ,			(HTTPSocket classPool at: #HTTPProxyCredentials).		socket header: (socket getResponseUpTo: String crlf , String crlf) first.		Array with: socket responseCode asInteger with: (socket getHeader: 'location' default: aString) ]			on: Error do: [ :err | nil ] ]			ensure: [ socket destroy ]! !!PULinkChange methodsFor: 'initialization' stamp: 'lr 5/28/2009 17:57'!initializeOn: aLink	source := aLink.	target := aLink copy! !!PULinkChange methodsFor: 'testing' stamp: 'lr 5/31/2009 20:15'!isEnabled	^ self source ~= self target! !!PULinkChange methodsFor: 'testing' stamp: 'lr 5/28/2009 18:21'!isValid	^ self status first beginsWith: 'Valid'! !!PULinkChange methodsFor: 'accessing' stamp: 'lr 5/28/2009 13:29'!owner	^ source owner! !!PULinkChange methodsFor: 'action' stamp: 'lr 5/28/2009 20:49'!refresh	status := nil! !!PULinkChange methodsFor: 'action' stamp: 'lr 5/28/2009 20:38'!repair	self target isInternal		ifTrue: [ self repairInternal ].	self target isExternal		ifTrue: [ self repairExternal ]! !!PULinkChange methodsFor: 'action' stamp: 'lr 5/28/2009 20:49'!repairExternal	self status size < 3 ifTrue: [ ^ self ].	self target reference: self status third second.	self refresh! !!PULinkChange methodsFor: 'action' stamp: 'lr 5/28/2009 20:49'!repairInternal	| reference matcher |	reference := self target reference.	matcher := [ :structure |		| newTarget |		newTarget := structure lookupPath: reference.		newTarget isNil			ifFalse: [ self refresh. ^ self target target: newTarget; update ] ].	self owner parents reversed do: matcher.	self owner enumerator all do: matcher.	self owner root enumerator everything do: matcher.	(reference := self target reference copyAfterLast: $/) isEmpty 		ifTrue: [ ^ self ].	self owner enumerator everything do: matcher.	self owner root enumerator everything do: matcher! !!PULinkChange methodsFor: 'accessing' stamp: 'lr 5/28/2009 13:29'!source	^ source! !!PULinkChange methodsFor: 'accessing' stamp: 'lr 5/28/2009 20:47'!sourceString	^ self source reference! !!PULinkChange methodsFor: 'accessing' stamp: 'lr 5/28/2009 18:08'!status	"Answer an array with status message and status string."		^ status ifNil: [ status := self updateStatus ]! !!PULinkChange methodsFor: 'accessing' stamp: 'lr 5/28/2009 11:52'!target	^ target! !!PULinkChange methodsFor: 'accessing' stamp: 'lr 5/28/2009 20:47'!targetString	^ self target reference! !!PULinkChange methodsFor: 'accessing' stamp: 'lr 5/28/2009 20:49'!targetString: aString	self targetString = aString 		ifTrue: [ ^ self ].	self target reference: aString.	self refresh! !!PULinkChange methodsFor: 'private' stamp: 'lr 5/31/2009 20:13'!updateStatus	| response |	target isExternal ifTrue: [		response := self httpHead: target url.		(response isNil)			ifTrue: [ ^ Array with: 'Unknown' with: 'white' ].		(response first between: 300 and: 399)			ifTrue: [ ^ Array with: 'Redirect ' , response first asString with: 'yellow' with: response ].		(response first between: 200 and: 299)			ifTrue: [ ^ Array with: 'Valid ' , response first asString with: 'green' ].		 ^ Array with: 'Error ' , response first asString with: 'red' ].	^ target isBroken		ifTrue: [ Array with: 'Error' with: 'error' ]		ifFalse: [ Array with: 'Valid' with: 'green' ]! !!PUGroup class methodsFor: 'accessing-defaults' stamp: 'lr 9/27/2006 11:22'!defaultUsers	^ PRCurrentContext value kernel users! !!PUGroup class methodsFor: 'accessing-description' stamp: 'lr 4/23/2009 22:39'!descriptionUsers	^ MAMultipleOptionDescription new		options: [ self defaultUsers ] asDynamicObject;		componentClass: MAListCompositonComponent;		reference: (PUUser descriptionContainer				add: PUUser descriptionName;				yourself);		propertyAt: #report put: true;		accessor: #users;		label: 'Users';		priority: 200;		beDistinct;		yourself! !!PUGroup class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isAbstract	^ false! !!PUGroup methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!includes: anUser	^ self users includes: anUser! !!PUGroup methodsFor: 'initialization' stamp: 'lr 9/27/2006 12:02'!initialize	super initialize.	users := Set new! !!PUGroup methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!users	^ users! !!PUGroup methodsFor: 'accessing' stamp: 'lr 2/12/2007 19:07'!users: aCollection	(aCollection copyWithoutAll: self users) do: [ :user |		(user groups includes: self)			ifFalse: [ user groups add: self ] ].	(self users copyWithoutAll: aCollection) do: [ :user |		(user groups includes: self)			ifTrue: [ user groups remove: self ] ].	users := aCollection asSet! !!PUMember class methodsFor: 'accessing-description' stamp: 'lr 4/23/2009 22:38'!descriptionComment	^ MAMemoDescription new		group: 'Additional Information';		propertyAt: #public put: true;		accessor: #comment;		label: 'Comment';		priority: 990;		lineCount: 3;		yourself! !!PUMember class methodsFor: 'accessing-description' stamp: 'lr 4/23/2009 22:38'!descriptionName	^ MAStringDescription new		propertyAt: #public put: true;		propertyAt: #report put: true;		parameterName: 'name';		accessor: #name;		label: 'Name';		priority: 100;		beReadonly;		beRequired;		yourself! !!PUMember class methodsFor: 'instance-creation' stamp: 'lr 3/9/2006 11:31'!named: aString	^ self new		setName: aString;		yourself! !!PUMember methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:31'!= anObject	^ self class = anObject class		and: [ self name = anObject name ]! !!PUMember methodsFor: 'accessing' stamp: 'lr 4/23/2009 22:29'!comment	^ comment! !!PUMember methodsFor: 'accessing' stamp: 'lr 4/23/2009 22:29'!comment: aString	comment := aString! !!PUMember methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:31'!hash	^ self class hash bitXor: self name hash! !!PUMember methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!name	^ name! !!PUMember methodsFor: 'printing' stamp: 'lr 3/9/2006 11:31'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' name: '; print: self name! !!PUMember methodsFor: 'initialize-release' stamp: 'lr 3/9/2006 11:31'!setName: aString	name := aString! !!PUUser class methodsFor: 'accessing-defaults' stamp: 'lr 9/27/2006 10:47'!defaultGroups	^ PRCurrentContext value kernel groups! !!PUUser class methodsFor: 'accessing-description' stamp: 'lr 4/23/2009 22:39'!descriptionEmail	^ MAStringDescription new		group: 'Additional Information';		propertyAt: #public put: true;		propertyAt: #report put: true;		parameterName: 'email';		accessor: #email;		label: 'Email';		priority: 920;		yourself! !!PUUser class methodsFor: 'accessing-description' stamp: 'lr 4/23/2009 22:39'!descriptionFirstName	^ MAStringDescription new		group: 'Additional Information';		propertyAt: #public put: true;		propertyAt: #report put: true;		parameterName: 'first-name';		accessor: #firstName;		label: 'First Name';		priority: 900;		yourself! !!PUUser class methodsFor: 'accessing-description' stamp: 'lr 5/2/2009 11:44'!descriptionFullName	^ MAStringDescription new		parameterName: 'full-name';		accessor: #fullName;		beReadonly;		beHidden;		yourself! !!PUUser class methodsFor: 'accessing-description' stamp: 'lr 4/23/2009 22:39'!descriptionGroups	^ MAMultipleOptionDescription new		addCondition: (MACondition selector: #notEmpty)			labelled: 'A user has to belong to at least one group';		options: [ self defaultGroups ] asDynamicObject;		componentClass: MAListCompositonComponent;		reference: (PUGroup descriptionContainer			add: PUGroup descriptionName;			yourself);		propertyAt: #report put: true;		accessor: #groups;		label: 'Groups';		priority: 300;		beDistinct;		beOrdered;		yourself! !!PUUser class methodsFor: 'accessing-description' stamp: 'lr 4/23/2009 22:39'!descriptionLastName	^ MAStringDescription new		group: 'Additional Information';		propertyAt: #public put: true;		propertyAt: #report put: true;		parameterName: 'last-name';		accessor: #lastName;		label: 'Last Name';		priority: 910;		yourself! !!PUUser class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionPassword	^ MAPasswordDescription new		accessor: #password;		label: 'Password';		priority: 200;		propertyAt: #public			put: true;		beRequired;		yourself! !!PUUser class methodsFor: 'accessing-description' stamp: 'lr 4/23/2009 22:39'!descriptionSuperuser	^ MABooleanDescription new		comment: 'Superusers have unrestricted rights, they can also edit users and groups.';		propertyAt: #report put: true;		accessor: #superuser;		label: 'Superuser';		priority: 400;		yourself! !!PUUser class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isAbstract	^ false! !!PUUser methodsFor: 'utilties' stamp: 'lr 9/27/2006 11:54'!addGroup: aGroup	(self groups includes: aGroup)		ifFalse: [ self groups add: aGroup ].	aGroup users add: self! !!PUUser methodsFor: 'accessing' stamp: 'lr 4/23/2009 22:35'!email	^ email! !!PUUser methodsFor: 'accessing' stamp: 'lr 4/23/2009 22:35'!email: aString	email := aString! !!PUUser methodsFor: 'accessing' stamp: 'lr 4/23/2009 22:35'!firstName	^ firstName! !!PUUser methodsFor: 'accessing' stamp: 'lr 4/23/2009 22:35'!firstName: aString	firstName := aString! !!PUUser methodsFor: 'accessing-readonly' stamp: 'lr 5/2/2009 11:41'!fullName	"Answer a human readable name of the user."		| full |	full := String new.	self firstName notNil		ifTrue: [ full := full , self firstName , ' ' ].	self lastName notNil		ifTrue: [ full := full , self lastName ].	^ full isEmpty		ifTrue: [ self name ]		ifFalse: [ full ]! !!PUUser methodsFor: 'accessing-readonly' stamp: 'lr 3/9/2006 11:31'!group	^ self groups first! !!PUUser methodsFor: 'accessing-readonly' stamp: 'lr 3/9/2006 11:31'!groups	^ groups! !!PUUser methodsFor: 'accessing-readonly' stamp: 'lr 9/27/2006 12:03'!groups: aCollection	self groups do: [ :each | each users remove: self ifAbsent: [ ] ].	aCollection do: [ :each | each users add: self ].	groups := aCollection asOrderedCollection! !!PUUser methodsFor: 'initialization' stamp: 'lr 3/9/2006 11:31'!initialize	super initialize.	groups := OrderedCollection new.	superuser := false! !!PUUser methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!isSuperuser	^ self superuser! !!PUUser methodsFor: 'accessing' stamp: 'lr 4/23/2009 22:35'!lastName	^ lastName! !!PUUser methodsFor: 'accessing' stamp: 'lr 4/23/2009 22:35'!lastName: aString	lastName := aString! !!PUUser methodsFor: 'tokens' stamp: 'lr 4/30/2009 15:41'!newToken	"Creates a new token for cookie authentication."	^ token := (WAExternalID new: 64) printString! !!PUUser methodsFor: 'accessing' stamp: 'lr 9/11/2008 16:17'!password	^ password isNil ifFalse: [ String new: 8 withAll: $* ]! !!PUUser methodsFor: 'accessing' stamp: 'lr 9/11/2008 16:18'!password: aString	(aString isNil or: [ aString isEmpty or: [ self password = aString ] ])		ifTrue: [ ^ self ].	password := PRCompatibility hashPassword: aString! !!PUUser methodsFor: 'utilties' stamp: 'lr 3/9/2006 11:31'!removeGroup: aGroup	self groups remove: aGroup.	aGroup users remove: self! !!PUUser methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!superuser	^ superuser! !!PUUser methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:31'!superuser: aBoolean	superuser := aBoolean! !!PUUser methodsFor: 'accessing-readonly' stamp: 'lr 4/30/2009 15:36'!token	"Answer a token used for cookie authentication."	^ token ifNil: [ self newToken ]! !!PUUser methodsFor: 'validating' stamp: 'lr 9/11/2008 16:20'!validatePassword: aString	^ aString isNil not and: [ aString isEmpty not and: [ (PRCompatibility hashPassword: aString) = password ] ]! !!PUAddPermission class methodsFor: 'instance creation' stamp: 'lr 4/30/2009 00:01'!on: aCommand structure: aClass	^ (super on: aCommand) setStructure: aClass! !!PUAddPermission methodsFor: 'comparing' stamp: 'lr 9/11/2006 10:17'!= anObject	^ super = anObject		and: [ self structure = anObject structure ]! !!PUAddPermission methodsFor: 'comparing' stamp: 'lr 9/11/2006 10:17'!hash	^ super hash bitXor: self structure hash! !!PUAddPermission methodsFor: 'accessing' stamp: 'lr 9/11/2006 10:16'!label	^ super label , ' ' , self structure label! !!PUAddPermission methodsFor: 'initialization' stamp: 'lr 9/11/2006 10:15'!setStructure: aClass	structure := aClass! !!PUAddPermission methodsFor: 'accessing' stamp: 'lr 9/11/2006 10:16'!structure	^ structure! !!PUPermission class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionLabel	^ MAStringDescription new		accessor: #label;		yourself! !!PUPermission class methodsFor: 'testing' stamp: 'lr 9/11/2006 10:10'!isAbstract	^ false! !!PUPermission class methodsFor: 'instance-creation' stamp: 'lr 9/11/2006 10:15'!on: aClass	^ self new		setCommand: aClass;		yourself! !!PUPermission methodsFor: 'comparing' stamp: 'lr 9/11/2006 10:10'!= aCommand	^ self species = aCommand species		and: [ self command = aCommand command ]! !!PUPermission methodsFor: 'accessing' stamp: 'lr 9/11/2006 10:09'!command	"Answer the command class this permission applies to."	^ command! !!PUPermission methodsFor: 'comparing' stamp: 'lr 9/11/2006 10:24'!hash	^ self command hash! !!PUPermission methodsFor: 'accessing' stamp: 'lr 9/11/2006 10:13'!label	"Answer the label this command class is refered to in the user interface."	^ self command label! !!PUPermission methodsFor: 'printing' stamp: 'lr 9/11/2006 10:10'!printOn: aStream	aStream nextPutAll: self label! !!PUPermission methodsFor: 'initialization' stamp: 'lr 9/11/2006 09:56'!setCommand: aClass	command := aClass! !!PUPermission methodsFor: 'testing' stamp: 'lr 9/11/2006 10:59'!validCommand: aCommand	^ self command = aCommand species! !"Pier-Security"!!PBRssRenderer methodsFor: 'visiting-document' stamp: 'lr 1/29/2007 23:31'!visitAnchor: anObject! !!PBRssRenderer methodsFor: 'visiting' stamp: 'lr 12/18/2008 07:47'!visitLightBoxLink: aLink! !!PBRssRenderer methodsFor: 'visiting-document' stamp: 'lr 2/5/2007 21:58'!visitParagraph: anObject	html paragraph: [ self visitAll: anObject children ]! !!PBRssRenderer methodsFor: 'visiting-document' stamp: 'lr 5/21/2009 09:53'!visitValueLink: anObject	"Ignore value links to avoid strange side-effects."! !!PBBlogHtmlView class methodsFor: 'testing' stamp: 'lr 1/15/2007 21:05'!isAbstract	^ false! !!PBBlogHtmlView class methodsFor: 'testing' stamp: 'lr 1/19/2007 19:13'!isValidIn: aContext	^ (super isValidIn: aContext) and: [ aContext structure isBlog ]! !!PBBlogHtmlView class methodsFor: 'accessing' stamp: 'lr 9/4/2008 13:47'!label	^ super label , ' (Blog)'! !!PBBlogHtmlView methodsFor: 'accessing-dynamic' stamp: 'lr 2/5/2007 19:27'!batcher	^ batcher ifNil: [ batcher := WABatchedList new items: self posts; batchSize: 5 ]! !!PBBlogHtmlView methodsFor: 'accessing-dynamic' stamp: 'lr 7/10/2009 08:33'!children	^ (Array with: self batcher) , (self batcher batch gather: [ :each | each componentsIn: self context ])! !!PBBlogHtmlView methodsFor: 'accessing' stamp: 'lr 1/14/2008 10:17'!posts	"Answer a default collection of posts."		^ posts ifNil: [ posts := super posts reversed ]! !!PBBlogHtmlView methodsFor: 'accessing' stamp: 'lr 11/6/2007 18:52'!posts: aCollection	"Display aCollection of posts in the receiver, presumeably this is a subset of the currently available posts."		posts := aCollection asSortedCollection: [ :a :b | a publication > b publication ].	batcher := nil! !!PBBlogHtmlView methodsFor: 'rendering' stamp: 'lr 2/5/2007 19:30'!renderBatcherOn: html	(self batcher isOnFirstPage and: [ self batcher isOnLastPage ])		ifFalse: [ html div class: 'batcher'; with: self batcher ]! !!PBBlogHtmlView methodsFor: 'rendering' stamp: 'lr 2/5/2007 20:05'!renderContentOn: html	super renderContentOn: html.	self renderPosts: self batcher batch on: html.	self renderBatcherOn: html.	self renderRssOn: html! !!PBHtmlView class methodsFor: 'testing' stamp: 'lr 2/5/2007 19:55'!isAbstract	^ true! !!PBHtmlView methodsFor: 'accessing' stamp: 'lr 2/5/2007 19:35'!blog	^ blog ifNil: [ blog := self find: PBBlog ]! !!PBHtmlView methodsFor: 'actions' stamp: 'lr 2/18/2009 16:54'!filter: aString	| newContext component |	newContext := self context structure: self blog.	component := newContext command viewComponent.	component posts: (component posts		select: [ :each | each tags includes: aString ]).	self context: newContext! !!PBHtmlView methodsFor: 'accessing' stamp: 'lr 1/14/2008 10:15'!posts	"Answer the currently displayed blog posts."		^ self blog allPostsIn: self context! !!PBHtmlView methodsFor: 'rendering-meta' stamp: 'lr 3/9/2007 22:05'!renderAuthor: anEntry on: html	anEntry author ifNil: [ ^ self ].	html span		class: 'author';		with: 'by ' , anEntry author.	html text: ' '! !!PBHtmlView methodsFor: 'rendering-meta' stamp: 'lr 9/27/2007 10:28'!renderComment: anEntry on: html	| comments |	self context structure isBlog ifFalse: [ ^ self ].	comments := anEntry allCommentsIn: self context.	html anchor		class: 'comment';		goto: (self context			structure: (self context structure isBlog				ifTrue: [ anEntry ]				ifFalse: [ anEntry parent ]));		with: (comments isEmpty ifTrue: [ '' ] ifFalse: [ comments size printString ]) ,			' comment' , (comments size > 1 ifTrue: [ 's' ] ifFalse: [ '' ]).	html text: ' '! !!PBHtmlView methodsFor: 'rendering' stamp: 'lr 5/25/2009 11:37'!renderHeading: aPost on: html 	html heading level: 1; with: [		html anchor			name: aPost uuid.		html anchor			goto: (self context structure: aPost);			with: [ html html: aPost title ] ]! !!PBHtmlView methodsFor: 'rendering-meta' stamp: 'lr 1/19/2008 21:09'!renderLink: anEntry on: html	html anchor		class: 'link';		url: (anEntry isPost			ifTrue: [ (self context structure: anEntry) url ]			ifFalse: [				(self context					structure: (anEntry parents reverse						detect: [ :each | each isPost ]))					url fragment: anEntry uuid ]);		with: 'link'.	html text: ' '! !!PBHtmlView methodsFor: 'rendering' stamp: 'lr 3/9/2007 22:06'!renderMeta: anEntry on: html	html div class: 'meta'; with: [		html text: 'Posted '.		self renderAuthor: anEntry on: html.		self renderPublication: anEntry on: html.		self renderTags: anEntry on: html.		self renderComment: anEntry on: html.		self renderLink: anEntry on: html ]! !!PBHtmlView methodsFor: 'rendering' stamp: 'lr 7/23/2008 21:48'!renderPost: aPost on: html 	html div class: 'post'; with: [ 		self renderHeading: aPost on: html.		self render: aPost on: html.		self renderMeta: aPost on: html ]! !!PBHtmlView methodsFor: 'rendering' stamp: 'lr 11/10/2008 13:32'!renderPosts: aCollection on: html	html div class: 'posts'; with: [		aCollection do: [ :each |			self renderPost: each on: html ] ]! !!PBHtmlView methodsFor: 'rendering-meta' stamp: 'lr 3/19/2007 20:12'!renderPublication: anEntry on: html	anEntry publication ifNil: [ ^ self ].	html span		class: 'publication';		with: 'at ' , anEntry publication date printString ,			', ' , anEntry publication time printMinutes.	html text: ' '! !!PBHtmlView methodsFor: 'rendering' stamp: 'damiencassou 11/18/2008 08:36'!renderRssOn: html	"If you modify this method, please also modify PBPostTicker>>#renderRssOn:"	html div class: 'subscribe'; with: [		html anchor			url: (self context				structure: self blog				view: PBEntriesRssView)					url;			with: 'Entries (RSS)'.		html span class: 'rssComments'; with: [			html text: ' and '.				html anchor					url: (self context						structure: self blog						view: PBCommentsRssView)							url;					with: 'Comments (RSS)' ]]! !!PBHtmlView methodsFor: 'rendering-meta' stamp: 'lr 11/6/2007 18:55'!renderTags: anEntry on: html	anEntry isPost ifFalse: [ ^ self ].	anEntry tags isEmpty ifTrue: [ ^ self ].	html span class: 'tags'; with: [		html text: 'with tags '.		anEntry tags			do: [ :each |				html anchor					callback: [ self filter: each ];					with: each ]			separatedBy: [ html text: ', ' ] ].	html text: ' '! !!PBHtmlView methodsFor: 'updating' stamp: 'lr 2/6/2007 18:07'!updateRoot: aHtmlRoot	super updateRoot: aHtmlRoot.	aHtmlRoot rss		title: self blog feedTitle;		url: (self context			structure: self blog			view: PBEntriesRssView)				url! !!PBPostHtmlView class methodsFor: 'testing' stamp: 'lr 1/29/2007 13:37'!isAbstract	^ false! !!PBPostHtmlView class methodsFor: 'testing' stamp: 'lr 1/29/2007 13:37'!isValidIn: aContext	^ (super isValidIn: aContext) and: [ aContext structure isPost ]! !!PBPostHtmlView class methodsFor: 'accessing' stamp: 'lr 9/4/2008 13:47'!label	^ super label , ' (Post)'! !!PBPostHtmlView methodsFor: 'private' stamp: 'lr 2/12/2007 19:07'!buildCommand	^ (self context		structure: self comment		command: self comment editCommandClass new)			command! !!PBPostHtmlView methodsFor: 'private' stamp: 'lr 2/20/2007 15:15'!buildComment	^ PBComment new		title: self context structure title;		yourself! !!PBPostHtmlView methodsFor: 'private' stamp: 'lr 2/9/2007 01:23'!buildComponent	^ (self buildDescription asComponentOn: self command)		onAnswer: [ :result | self execute: result ];		addValidatedForm;		yourself! !!PBPostHtmlView methodsFor: 'private' stamp: 'lr 5/22/2007 22:48'!buildDescription	^ self command description select: [ :each |		each propertyAt: #public ifAbsent: [ false ] ]! !!PBPostHtmlView methodsFor: 'accessing' stamp: 'lr 1/29/2007 13:57'!children	^ Array with: self component! !!PBPostHtmlView methodsFor: 'accessing' stamp: 'lr 1/29/2007 14:56'!command	^ command ifNil: [ command := self buildCommand ]! !!PBPostHtmlView methodsFor: 'accessing' stamp: 'lr 1/29/2007 14:57'!comment	^ comment ifNil: [ comment := self buildComment ]! !!PBPostHtmlView methodsFor: 'accessing' stamp: 'lr 1/29/2007 15:11'!comments	^ self context structure allCommentsIn: self context! !!PBPostHtmlView methodsFor: 'accessing' stamp: 'lr 1/19/2008 20:47'!component	^ component ifNil: [ component := self buildComponent ]! !!PBPostHtmlView methodsFor: 'private' stamp: 'lr 4/5/2007 17:59'!execute: anEditCommand	| addCommand |	comment := component := command := nil.	anEditCommand ifNil: [ ^ self ].	addCommand := PRAddCommand new.	self context command: addCommand.	addCommand		name: (addCommand			uniqueName: 'comment'			in: self context structure);		type: PBComment;		beUnchecked;		execute.	self context		structure: addCommand answer structure		command: anEditCommand.	anEditCommand		beUnchecked;		execute! !!PBPostHtmlView methodsFor: 'testing' stamp: 'lr 2/12/2007 19:07'!isCommentEnabled	^ self post publication notNil and: [ self post publication + self blog commentTimeout >= TimeStamp now ]! !!PBPostHtmlView methodsFor: 'accessing' stamp: 'lr 2/6/2007 19:29'!post	^ post ifNil: [ post := self find: PBPost ]! !!PBPostHtmlView methodsFor: 'rendering' stamp: 'lr 1/19/2008 20:55'!renderAuthor: anEntry on: html	(anEntry isPost or: [ anEntry website isEmptyOrNil ])		ifTrue: [ ^ super renderAuthor: anEntry on: html ].	html span class: 'author'; with: [		html text: 'by '.		html anchor			url: anEntry website;			with: (anEntry author				ifNil: [ anEntry website ]) ].	html text: ' '! !!PBPostHtmlView methodsFor: 'rendering' stamp: 'lr 9/19/2008 09:39'!renderComments: aCollection on: html	aCollection isEmpty		ifFalse: [ html heading level: 2; with: 'Comments' ].	aCollection do: [ :each |		html div class: 'comment'; with: [			html anchor name: each uuid.			self render: each on: html.			self renderMeta: each on: html ] ]! !!PBPostHtmlView methodsFor: 'rendering' stamp: 'tg 9/15/2008 23:56'!renderContentOn: html	self render: self post on: html.	self renderMeta: self post on: html.	html div class: 'comments'; with: [		self renderComments: self comments on: html.		self isCommentEnabled			ifTrue: [ self renderLeaveCommentOn: html ] ].	self renderRssOn: html! !!PBPostHtmlView methodsFor: 'rendering' stamp: 'lr 1/19/2008 20:47'!renderLeaveCommentOn: html	html div class: 'leavecomment'; with: [		html heading level: 2; with: 'Leave your comment'.		html render: self component ]! !!PBBlog class methodsFor: 'private' stamp: 'lr 1/26/2007 00:48'!buildLanguages	^ Dictionary new		at: 'af' put: 'Afrikaans';		at: 'sq' put: 'Albanian';		at: 'eu' put: 'Basque';		at: 'be' put: 'Belarusian';		at: 'bg' put: 'Bulgarian';		at: 'ca' put: 'Catalan';		at: 'zh-cn' put: 'Chinese (Simplified)';		at: 'zh-tw' put: 'Chinese (Traditional)';		at: 'hr' put: 'Croatian';		at: 'cs' put: 'Czech';		at: 'da' put: 'Danish';		at: 'nl' put: 'Dutch';		at: 'nl-be' put: 'Dutch (Belgium)';		at: 'nl-nl' put: 'Dutch (Netherlands)';		at: 'en' put: 'English';		at: 'en-au' put: 'English (Australia)';		at: 'en-bz' put: 'English (Belize)';		at: 'en-ca' put: 'English (Canada)';		at: 'en-ie' put: 'English (Ireland)';		at: 'en-jm' put: 'English (Jamaica)';		at: 'en-nz' put: 'English (New Zealand)';		at: 'en-ph' put: 'English (Phillipines)';		at: 'en-za' put: 'English (South Africa)';		at: 'en-tt' put: 'English (Trinidad)';		at: 'en-gb' put: 'English (United Kingdom)';		at: 'en-us' put: 'English (United States)';		at: 'en-zw' put: 'English (Zimbabwe)';		at: 'et' put: 'Estonian';		at: 'fo' put: 'Faeroese';		at: 'fi' put: 'Finnish';		at: 'fr' put: 'French';		at: 'fr-be' put: 'French (Belgium)';		at: 'fr-ca' put: 'French (Canada)';		at: 'fr-fr' put: 'French (France)';		at: 'fr-lu' put: 'French (Luxembourg)';		at: 'fr-mc' put: 'French (Monaco)';		at: 'fr-ch' put: 'French (Switzerland)';		at: 'gl' put: 'Galician';		at: 'gd' put: 'Gaelic';		at: 'de' put: 'German';		at: 'de-at' put: 'German (Austria)';		at: 'de-de' put: 'German (Germany)';		at: 'de-li' put: 'German (Liechtenstein)';		at: 'de-lu' put: 'German (Luxembourg)';		at: 'de-ch' put: 'German (Switzerland)';		at: 'el' put: 'Greek';		at: 'haw' put: 'Hawaiian';		at: 'hu' put: 'Hungarian';		at: 'is' put: 'Icelandic';		at: 'in' put: 'Indonesian';		at: 'ga' put: 'Irish';		at: 'it' put: 'Italian';		at: 'it-it' put: 'Italian (Italy)';		at: 'it-ch' put: 'Italian (Switzerland)';		at: 'ja' put: 'Japanese';		at: 'ko' put: 'Korean';		at: 'mk' put: 'Macedonian';		at: 'no' put: 'Norwegian';		at: 'pl' put: 'Polish';		at: 'pt' put: 'Portuguese';		at: 'pt-br' put: 'Portuguese (Brazil)';		at: 'pt-pt' put: 'Portuguese (Portugal)';		at: 'ro' put: 'Romanian';		at: 'ro-mo' put: 'Romanian (Moldova)';		at: 'ro-ro' put: 'Romanian (Romania)';		at: 'ru' put: 'Russian';		at: 'ru-mo' put: 'Russian (Moldova)';		at: 'ru-ru' put: 'Russian (Russia)';		at: 'sr' put: 'Serbian';		at: 'sk' put: 'Slovak';		at: 'sl' put: 'Slovenian';		at: 'es' put: 'Spanish';		at: 'es-ar' put: 'Spanish (Argentina)';		at: 'es-bo' put: 'Spanish (Bolivia)';		at: 'es-cl' put: 'Spanish (Chile)';		at: 'es-co' put: 'Spanish (Colombia)';		at: 'es-cr' put: 'Spanish (Costa Rica)';		at: 'es-do' put: 'Spanish (Dominican Republic)';		at: 'es-ec' put: 'Spanish (Ecuador)';		at: 'es-sv' put: 'Spanish (El Salvador)';		at: 'es-gt' put: 'Spanish (Guatemala)';		at: 'es-hn' put: 'Spanish (Honduras)';		at: 'es-mx' put: 'Spanish (Mexico)';		at: 'es-ni' put: 'Spanish (Nicaragua)';		at: 'es-pa' put: 'Spanish (Panama)';		at: 'es-py' put: 'Spanish (Paraguay)';		at: 'es-pe' put: 'Spanish (Peru)';		at: 'es-pr' put: 'Spanish (Puerto Rico)';		at: 'es-es' put: 'Spanish (Spain)';		at: 'es-uy' put: 'Spanish (Uruguay)';		at: 'es-ve' put: 'Spanish (Venezuela)';		at: 'sv' put: 'Swedish';		at: 'sv-fi' put: 'Swedish (Finland)';		at: 'sv-se' put: 'Swedish (Sweden)';		at: 'tr' put: 'Turkish';		at: 'uk' put: 'Ukranian';		yourself! !!PBBlog class methodsFor: 'testing' stamp: 'lr 1/15/2007 22:02'!canBeParentOf: aClass	^ aClass includesBehavior: PBPost! !!PBBlog class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionCommentTimeout	^ MADurationDescription new		accessor: #commentTimeout;		label: 'Comment Timeout';		priority: 370;		comment: 'How long should it be possible to post comments.';		beRequired;		beEditable;		yourself! !!PBBlog class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionCopyright	^ MAStringDescription new		accessor: #copyright;		label: 'Copyright';		priority: 350;		comment: 'Copyright notice for content in the channel.';		beEditable;		yourself! !!PBBlog class methodsFor: 'accessing-description' stamp: 'lr 10/18/2007 17:34'!descriptionDocument	^ super descriptionDocument		label: 'Description';		yourself! !!PBBlog class methodsFor: 'accessing-description' stamp: 'lr 9/16/2008 16:41'!descriptionFeedForward	^ MAStringDescription new		accessor: #feedForward;		label: 'Feed Forward';		priority: 315;		comment: 'The url to forward the feed to. This is useful when used together with services such as FeedBurner or Google AdSense. The original feed can be reached by concatenating the original URL with ''&noforward.''';		beEditable;		yourself! !!PBBlog class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionFeedTitle	^ MAStringDescription new		accessor: #feedTitle;		label: 'Feed Title';		priority: 310;		comment: 'The title of the channel.';		beEditable;		yourself! !!PBBlog class methodsFor: 'accessing-description' stamp: 'lr 2/5/2009 21:17'!descriptionItemCount	^ MANumberDescription new		comment: 'The number of items to appear in the feed.';		accessor: #itemCount;		label: 'Item Count';		priority: 370;		beRequired;		beEditable;		bePositive;		beInteger;		yourself! !!PBBlog class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionLanguage	^ MASingleOptionDescription new		accessor: #language;		label: 'Language';		priority: 360;		comment: 'The language the channel is written in.';		reference: (MAStringDescription new				stringWriter: self;				yourself);		options: self languages keys;		default: 'en';		beRequired;		beEditable;		beSorted;		yourself! !!PBBlog class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionManagingEditor	^ MAStringDescription new		accessor: #managingEditor;		label: 'Managing Editor';		priority: 330;		comment: 'Email address for person responsible for editorial content.';		beEditable;		yourself! !!PBBlog class methodsFor: 'accessing-description' stamp: 'lr 4/10/2008 14:17'!descriptionWebMaster	^ MAStringDescription new		accessor: #webMaster;		label: 'Web Master';		priority: 340;		comment: 'Email address for person responsible for technical issues relating to channel.';		beEditable;		yourself! !!PBBlog class methodsFor: 'testing' stamp: 'lr 1/15/2007 22:02'!isAbstract	^ false! !!PBBlog class methodsFor: 'accessing' stamp: 'lr 1/8/2010 22:04'!label	^ 'Blog'! !!PBBlog class methodsFor: 'accessing-resources' stamp: 'lr 1/26/2007 00:48'!languages	^ Languages ifNil: [ Languages := self buildLanguages ]! !!PBBlog class methodsFor: 'private' stamp: 'lr 1/26/2007 00:47'!write: anObject description: aDescription	^ self languages at: anObject ifAbsent: [ anObject ]! !!PBBlog methodsFor: 'visiting' stamp: 'lr 1/15/2007 20:05'!accept: aVisitor	aVisitor visitBlog: self! !!PBBlog methodsFor: 'accessing-dynamic' stamp: 'lr 9/24/2007 19:18'!allCommentsIn: aContext	"Answer all the comments in choronological order."	^ ((aContext enumeratorFor: self) all		select: [ :each |			each isComment				and: [ each publication notNil				and: [ each publication <= TimeStamp now ] ] ])		sort: [ :a :b | a publication < b publication ];		yourself! !!PBBlog methodsFor: 'accessing-dynamic' stamp: 'lr 9/24/2007 19:18'!allPostsIn: aContext	"Answer all the published posts in choronological order."	^ ((aContext enumeratorFor: self)		select: [ :each |			each isPost				and: [ each publication notNil				and: [ each publication <= TimeStamp now ] ] ])		sort: [ :a :b | a publication < b publication ];		yourself! !!PBBlog methodsFor: 'accessing' stamp: 'lr 2/20/2007 15:23'!commentTimeout	^ commentTimeout ifNil: [ commentTimeout := 14 days ]! !!PBBlog methodsFor: 'accessing' stamp: 'lr 2/6/2007 19:45'!commentTimeout: aDuration	commentTimeout := aDuration! !!PBBlog methodsFor: 'accessing' stamp: 'lr 1/19/2007 19:18'!copyright	^ copyright! !!PBBlog methodsFor: 'accessing' stamp: 'lr 1/19/2007 19:18'!copyright: aString	copyright := aString! !!PBBlog methodsFor: 'accessing-commands' stamp: 'lr 4/6/2010 16:58'!defaultChildName	| date code |	date := Date today.	code := #( year 4 $- monthIndex 2 $- dayOfMonth 2 ) readStream.	^ String streamContents: [ :stream |		[ code atEnd ] whileFalse: [			stream nextPutAll: ((date perform: code next)				printPaddedWith: $0 to: code next).			code atEnd				ifFalse: [ stream nextPut: code next ] ] ]! !!PBBlog methodsFor: 'accessing' stamp: 'tg 9/16/2008 16:02'!feedForward	^ feedForward! !!PBBlog methodsFor: 'accessing' stamp: 'tg 9/16/2008 16:02'!feedForward: aString	feedForward := aString! !!PBBlog methodsFor: 'accessing' stamp: 'lr 2/1/2007 19:45'!feedTitle	^ feedTitle! !!PBBlog methodsFor: 'accessing' stamp: 'lr 2/1/2007 19:41'!feedTitle: aString	feedTitle := aString! !!PBBlog methodsFor: 'testing' stamp: 'lr 1/15/2007 21:06'!isBlog	^ true! !!PBBlog methodsFor: '*pier-blog-seaside' stamp: 'lr 1/29/2007 13:50'!isValidView: aComponentClass in: aContext	^ super viewComponentClass ~= aComponentClass! !!PBBlog methodsFor: 'accessing' stamp: 'lr 2/1/2007 19:40'!itemCount	^ itemCount ifNil: [ itemCount := 10 ]! !!PBBlog methodsFor: 'accessing' stamp: 'lr 2/1/2007 19:41'!itemCount: anInteger	itemCount := anInteger! !!PBBlog methodsFor: 'accessing' stamp: 'lr 1/26/2007 00:33'!language	^ language! !!PBBlog methodsFor: 'accessing' stamp: 'lr 1/26/2007 00:54'!language: aString	language := aString! !!PBBlog methodsFor: 'accessing' stamp: 'lr 1/18/2007 00:16'!managingEditor	^ managingEditor! !!PBBlog methodsFor: 'accessing' stamp: 'lr 1/18/2007 00:17'!managingEditor: anEditor	managingEditor := anEditor! !!PBBlog methodsFor: '*pier-blog-seaside' stamp: 'lr 2/5/2007 19:38'!viewComponentClass	^ PBBlogHtmlView! !!PBBlog methodsFor: 'accessing' stamp: 'lr 1/18/2007 00:17'!webMaster	^ webMaster! !!PBBlog methodsFor: 'accessing' stamp: 'lr 1/18/2007 00:17'!webMaster: aString	webMaster := aString! !!PBComment class methodsFor: 'testing' stamp: 'lr 1/15/2007 20:04'!canBeChildOf: aClass	^ aClass includesBehavior: PBPost! !!PBComment class methodsFor: 'testing' stamp: 'lr 1/15/2007 20:04'!canBeParentOf: aClass	^ false! !!PBComment class methodsFor: 'accessing-descriptions' stamp: 'lr 1/19/2008 20:53'!descriptionAuthor	^ super descriptionAuthor		propertyAt: #public put: true;		yourself! !!PBComment class methodsFor: 'accessing-descriptions' stamp: 'lr 2/5/2009 21:12'!descriptionConfirmation	^ MABooleanDescription new		addCondition: (MACondition selector: #yourself)			labelled: 'Please, confirm submission by clicking the checkbox';		checkboxLabel: 'Confirm submission by clicking the checkbox';		propertyAt: #public put: true;		accessor: #confirmation;		label: 'Confirmation';		priority: 600;		beEditable;		yourself! !!PBComment class methodsFor: 'accessing-descriptions' stamp: 'lr 10/18/2007 17:34'!descriptionDocument	^ super descriptionDocument		propertyAt: #public put: true;		beRequired;		yourself! !!PBComment class methodsFor: 'accessing-descriptions' stamp: 'lr 2/5/2009 21:12'!descriptionWebsite	^ MAStringDescription new		addCondition: (MACondition selector: #matches: argument: '#*.##*')			labelled: 'Please make sure to enter a valid URL';		comment: 'The URL to the blog or personal website of the author';		propertyAt: #public put: true;		accessor: #website;		label: 'Website';		priority: 340;		beEditable;		yourself! !!PBComment class methodsFor: 'accessing' stamp: 'lr 1/8/2010 22:05'!label	^ 'Blog Comment'! !!PBComment methodsFor: 'visiting' stamp: 'lr 1/15/2007 16:08'!accept: aVisitor	aVisitor visitComment: self! !!PBComment methodsFor: 'private' stamp: 'lr 5/22/2007 22:47'!confirmation	^ false! !!PBComment methodsFor: 'private' stamp: 'lr 5/22/2007 22:47'!confirmation: aBoolean! !!PBComment methodsFor: 'initialization' stamp: 'lr 2/6/2007 20:14'!initialize	super initialize.	self publication: TimeStamp now! !!PBComment methodsFor: 'testing' stamp: 'lr 1/14/2007 13:23'!isComment	^ true! !!PBComment methodsFor: 'accessing' stamp: 'lr 1/19/2008 20:44'!website	^ website! !!PBComment methodsFor: 'accessing' stamp: 'lr 1/19/2008 21:07'!website: aString	website := (aString isEmptyOrNil or: [ aString includesSubString: '://' ])		ifFalse: [ website := 'http://' , aString ]		ifTrue: [ aString ]! !!PBEntry class methodsFor: 'accessing-descriptions' stamp: 'lr 4/10/2008 14:17'!descriptionAuthor	^ MAStringDescription new		accessor: #author;		comment: 'The author of the entry.';		label: 'Author';		priority: 300;		beRequired;		beEditable;		yourself! !!PBEntry class methodsFor: 'accessing-descriptions' stamp: 'lr 4/10/2008 14:17'!descriptionPublication	^ MATimeStampDescription new		accessor: #publication;		comment: 'The publication date of the entry.';		label: 'Publication';		priority: 310;		beEditable;		yourself! !!PBEntry class methodsFor: 'testing' stamp: 'lr 1/14/2007 12:36'!isAbstract	^ self name = #PBEntry! !!PBEntry methodsFor: 'visiting' stamp: 'pmm 1/26/2007 23:34'!accept: aVisitor	aVisitor visitEntry: self! !!PBEntry methodsFor: 'accessing-dynamic' stamp: 'lr 9/24/2007 19:19'!allCommentsIn: aContext	"Answer all the published comments in choronological order."	^ ((aContext enumeratorFor: self) all		select: [ :each |			each isComment				and: [ each publication notNil				and: [ each publication <= TimeStamp now ] ] ])		sort: [ :a :b | a publication < b publication ];		yourself! !!PBEntry methodsFor: 'accessing' stamp: 'lr 2/18/2009 16:23'!author	^ author ifNil: [ author := self findAuthor ]! !!PBEntry methodsFor: 'accessing' stamp: 'lr 1/14/2007 12:36'!author: aString	author := aString! !!PBEntry methodsFor: 'private' stamp: 'lr 5/2/2009 11:43'!findAuthor	| context user |	context := PRCurrentContext value		ifNil: [ ^ nil ].	user := (context		propertyAt: #user		ifAbsent: [ ^ nil ])			ifNil: [ ^ nil ].	^ user fullName! !!PBEntry methodsFor: 'copying' stamp: 'lr 8/17/2007 08:03'!postCopy	super postCopy.	uuid := nil! !!PBEntry methodsFor: 'accessing' stamp: 'lr 1/19/2007 18:40'!publication	^ publication! !!PBEntry methodsFor: 'accessing' stamp: 'lr 1/19/2007 18:40'!publication: aTimeStamp	publication := aTimeStamp! !!PBEntry methodsFor: 'accessing' stamp: 'lr 2/6/2007 20:20'!uuid	^ uuid ifNil: [ uuid := SmallInteger maxVal atRandom asString ]! !!PBEntry methodsFor: 'accessing' stamp: 'lr 2/6/2007 20:12'!uuid: anObject	uuid := anObject! !!PBPost class methodsFor: 'testing' stamp: 'lr 1/15/2007 22:02'!canBeChildOf: aClass	^ aClass includesBehavior: PBBlog! !!PBPost class methodsFor: 'accessing-descriptions' stamp: 'lr 2/5/2009 21:11'!descriptionEnclosure	^ PRStructureDescription new		addCondition: (MACondition selector: #isFile)			labelled: 'Enclosure must be a file';		comment: 'A media object that is attached to the item.';		accessor: #enclosure;		label: 'Enclosure';		priority: 350;		beEditable;		yourself! !!PBPost class methodsFor: 'accessing-descriptions' stamp: 'lr 4/10/2008 14:17'!descriptionSourceTitle	^ MAStringDescription new		accessor: #sourceTitle;		comment: 'The title of the RSS channel the item came from.';		label: 'Source Title';		priority: 330;		beEditable;		yourself! !!PBPost class methodsFor: 'accessing-descriptions' stamp: 'lr 4/10/2008 14:17'!descriptionSourceUrl	^ MAStringDescription new		accessor: #sourceUrl;		comment: 'The URL of the RSS channel the item came from.';		label: 'Source URL';		priority: 340;		beEditable;		yourself! !!PBPost class methodsFor: 'accessing-descriptions' stamp: 'lr 10/3/2008 23:36'!descriptionTags	^ super descriptionTags 		priority: 110;		beEditable; 		yourself! !!PBPost class methodsFor: 'accessing' stamp: 'lr 1/8/2010 22:05'!label	^ 'Blog Post'! !!PBPost methodsFor: 'visiting' stamp: 'lr 1/15/2007 16:08'!accept: aVisitor	aVisitor visitPost: self! !!PBPost methodsFor: 'accessing' stamp: 'lr 1/27/2007 18:30'!enclosure	^ enclosure! !!PBPost methodsFor: 'accessing' stamp: 'lr 2/12/2007 19:07'!enclosure: aFile	enclosure := aFile! !!PBPost methodsFor: 'testing' stamp: 'lr 1/14/2007 13:44'!isPost	^ true! !!PBPost methodsFor: '*pier-blog-seaside' stamp: 'lr 1/29/2007 13:50'!isValidView: aComponentClass in: aContext	^ super viewComponentClass ~= aComponentClass! !!PBPost methodsFor: 'accessing' stamp: 'lr 2/18/2009 16:28'!sourceTitle	^ sourceTitle! !!PBPost methodsFor: 'accessing' stamp: 'lr 2/12/2007 19:07'!sourceTitle: aString	sourceTitle := aString! !!PBPost methodsFor: 'accessing' stamp: 'lr 2/18/2009 16:28'!sourceUrl	^ sourceUrl! !!PBPost methodsFor: 'accessing' stamp: 'lr 2/12/2007 19:07'!sourceUrl: aString	sourceUrl := aString! !!PBPost methodsFor: '*pier-blog-seaside' stamp: 'lr 2/5/2007 19:38'!viewComponentClass	^ PBPostHtmlView! !!PBPostArchive class methodsFor: 'testing' stamp: 'lr 11/6/2007 17:54'!isAbstract	^ false! !!PBPostArchive class methodsFor: 'accessing' stamp: 'lr 9/3/2008 11:36'!label	^ 'Archive'! !!PBPostArchive methodsFor: 'accessing' stamp: 'lr 11/6/2007 19:08'!archive	^ archive ifNil: [ archive := self buildArchive ]! !!PBPostArchive methodsFor: 'private' stamp: 'lr 11/6/2007 19:15'!buildArchive	| monthMap monthSorted |	monthMap := Dictionary new.	self posts do: [ :each |		(monthMap at: each publication asMonth ifAbsentPut: [ OrderedCollection new ])			add: each ].	monthSorted := SortedCollection 		sortBlock: [ :a :b | a key > b key ].	monthMap associationsDo: [ :assoc | monthSorted add: assoc ].	self maxItems notNil		ifTrue: [ monthSorted := monthSorted first: (monthMap size min: self maxItems) ].	^ monthSorted! !!PBPostArchive methodsFor: 'actions' stamp: 'lr 11/6/2007 19:08'!refresh	super refresh.	archive := nil! !!PBPostArchive methodsFor: 'rendering' stamp: 'lr 11/6/2007 19:15'!renderBlogOn: html	self archive isEmpty ifTrue: [ ^ self ].	html unorderedList: [		self archive do: [ :assoc |			html listItem: [				self 					renderFilter: assoc value					with: assoc key name , ' ' , assoc key year asString					on: html ] ] ]! !!PBPostFilter class methodsFor: 'accessing-descriptions' stamp: 'lr 4/4/2009 18:23'!descriptionMaxItems	^ MANumberDescription new		comment: 'The maximum number of items to show.';		parameterName: 'max-items';		accessor: #maxItems;		label: 'Max Items';		priority: 200;		default: 10;		bePositive;		beInteger;		yourself! !!PBPostFilter class methodsFor: 'accessing-descriptions' stamp: 'lr 4/4/2009 18:23'!descriptionShowCount	^ MABooleanDescription new		parameterName: 'show-count';		accessor: #showCount;		label: 'Show Count';		default: true;		priority: 210;		yourself! !!PBPostFilter class methodsFor: 'accessing' stamp: 'lr 9/3/2008 11:46'!groupLabel	^ 'Pier Blog'! !!PBPostFilter methodsFor: 'accessing' stamp: 'lr 11/6/2007 18:16'!blog	"Answer the currently browsed blog or nil."		^ blog ifNil: [ blog := self findBlog ]! !!PBPostFilter methodsFor: 'actions' stamp: 'lr 11/6/2007 18:56'!filter: aCollection	| newContext |	newContext := self context structure: self blog.	newContext command viewComponent posts: aCollection.	self context: newContext! !!PBPostFilter methodsFor: 'private' stamp: 'lr 5/2/2009 10:04'!findBlog	^ self context structure findAncestor: [ :each | each isBlog ]! !!PBPostFilter methodsFor: 'private' stamp: 'lr 5/2/2009 10:04'!findPost	^ self context structure findAncestor: [ :each | each isPost ]! !!PBPostFilter methodsFor: 'accessing-settings' stamp: 'lr 11/6/2007 18:25'!maxItems	^ self read: #descriptionMaxItems! !!PBPostFilter methodsFor: 'events' stamp: 'lr 11/6/2007 19:01'!onChangeContext: aContext	super onChangeContext: aContext.	self blog = self findBlog		ifFalse: [ self refresh ]! !!PBPostFilter methodsFor: 'accessing' stamp: 'lr 11/6/2007 18:12'!posts	"Answer the currently displayed blog posts."		^ self blog allPostsIn: self context! !!PBPostFilter methodsFor: 'actions' stamp: 'lr 11/6/2007 19:02'!refresh	blog := nil! !!PBPostFilter methodsFor: 'rendering' stamp: 'lr 11/6/2007 18:14'!renderBlogOn: html	self subclassResponsibility! !!PBPostFilter methodsFor: 'rendering' stamp: 'lr 11/6/2007 18:45'!renderContentOn: html	self blog isNil		ifTrue: [ html text: '(no blog found)' ]		ifFalse: [ self renderBlogOn: html ]! !!PBPostFilter methodsFor: 'rendering' stamp: 'lr 11/6/2007 18:58'!renderFilter: aCollection with: aRenderBlock on: html	html anchor		callback: [ self filter: aCollection ];		with: aRenderBlock.	self showCount		ifTrue: [ html text: ' ('; render: aCollection size; text: ')' ]! !!PBPostFilter methodsFor: 'accessing-settings' stamp: 'lr 11/6/2007 18:26'!showCount	^ self read: #descriptionShowCount! !!PBPostRelated class methodsFor: 'testing' stamp: 'lr 12/9/2008 16:25'!isAbstract	^ false! !!PBPostRelated class methodsFor: 'accessing' stamp: 'lr 12/9/2008 16:25'!label	^ 'Related'! !!PBPostRelated methodsFor: 'private' stamp: 'lr 12/9/2008 16:32'!findRelated	| other |	self post isNil		ifTrue: [ ^ #() ].	other := ((self posts copyWithout: self post)		collect: [ :each | each -> (each tags count: [ :tag | self post tags includes: tag ]) ])		reject: [ :each | each value = 0 ].	other sort: [ :a :b | a value > b value ].	self maxItems notNil		ifTrue: [ other := other first: (other size min: self maxItems) ].	^ other collect: [ :e | e key ]! !!PBPostRelated methodsFor: 'events' stamp: 'lr 12/9/2008 16:20'!onChangeContext: aContext	super onChangeContext: aContext.	self post = self findPost		ifFalse: [ self refresh ]! !!PBPostRelated methodsFor: 'accessing' stamp: 'lr 12/9/2008 16:19'!post	^ post ifNil: [ post := self findPost ]! !!PBPostRelated methodsFor: 'actions' stamp: 'lr 12/9/2008 16:19'!refresh	super refresh.	post := related := nil! !!PBPostRelated methodsFor: 'accessing' stamp: 'lr 2/18/2009 15:39'!related	^ related ifNil: [ related := self findRelated ]! !!PBPostRelated methodsFor: 'rendering' stamp: 'lr 5/25/2009 11:38'!renderBlogOn: html	self related isEmpty		ifTrue: [ ^ self ].	html unorderedList: [		self related do: [ :each |			html listItem: [				html anchor					goto: (self context structure: each);					with: [ html html: each menu ] ] ] ]! !!PBPostTags class methodsFor: 'testing' stamp: 'lr 11/6/2007 17:55'!isAbstract	^ false! !!PBPostTags class methodsFor: 'accessing' stamp: 'lr 9/3/2008 11:36'!label	^ 'Tags'! !!PBPostTags methodsFor: 'private' stamp: 'lr 11/6/2007 18:53'!findTags	| tagsMap tagsByCount |	tagsMap := Dictionary new.	self posts do: [ :post |		post tags do: [ :tag |			(tagsMap at: tag ifAbsentPut: [ OrderedCollection new ])				add: post ] ].	tagsByCount := SortedCollection		sortBlock: [ :a :b | a value size < b value size ].	tagsMap associationsDo: [ :assoc | tagsByCount add: assoc ].	self maxItems notNil		ifTrue: [ tagsByCount := tagsByCount last: (tagsByCount size min: self maxItems) ].	^ tagsByCount asSortedCollection: [ :a :b | a key < b key ]! !!PBPostTags methodsFor: 'actions' stamp: 'lr 11/6/2007 19:00'!refresh	super refresh.	tags := nil! !!PBPostTags methodsFor: 'rendering' stamp: 'lr 11/6/2007 18:35'!renderBlogOn: html	self tags isEmpty ifTrue: [ ^ self ].	html unorderedList: [		self tags do: [ :assoc |			html listItem: [				self 					renderFilter: assoc value					with: assoc key					on: html ] ] ]! !!PBPostTags methodsFor: 'accessing' stamp: 'lr 11/6/2007 18:10'!tags	^ tags ifNil: [ tags := self findTags ]! !!PBPostTicker class methodsFor: 'accessing-description' stamp: 'lr 2/5/2009 21:18'!descriptionBlog	^ PRStructureDescription new		addCondition: (MACondition selector: #isBlog)			labelled: 'Select a blog as source';		accessor: #blog;		label: 'Source';		priority: 100;		yourself! !!PBPostTicker class methodsFor: 'accessing-description' stamp: 'lr 4/4/2009 18:22'!descriptionNumberOfCharacters	^ MANumberDescription new		comment: 'The maximum number of characters to display of a post.';		parameterName: 'number-of-characters';		accessor: #numberOfCharacters;		label: 'Number of Characters';		priority: 110;		default: 200;		bePositive;		beInteger;		yourself! !!PBPostTicker class methodsFor: 'accessing-description' stamp: 'lr 4/4/2009 18:22'!descriptionNumberOfPosts	^ MANumberDescription new		comment: 'The maximum number of posts to appear.';		parameterName: 'number-of-posts';		accessor: #numberOfPosts;		label: 'Number of Posts';		priority: 120;		default: 3;		bePositive;		beInteger;		yourself! !!PBPostTicker class methodsFor: 'accessing' stamp: 'lr 9/3/2008 11:46'!groupLabel	^ 'Pier Blog'! !!PBPostTicker class methodsFor: 'testing' stamp: 'lr 2/7/2007 14:32'!isAbstract	^ false! !!PBPostTicker class methodsFor: 'accessing' stamp: 'lr 9/3/2008 11:36'!label	^ 'Ticker'! !!PBPostTicker methodsFor: 'accessing-dynamic' stamp: 'tg 11/8/2007 16:32'!blog	^ self read: #descriptionBlog! !!PBPostTicker methodsFor: 'accessing' stamp: 'lr 4/18/2007 15:02'!numberOfCharacters	^ self read: #descriptionNumberOfCharacters! !!PBPostTicker methodsFor: 'accessing' stamp: 'lr 4/18/2007 15:02'!numberOfPosts	^ self read: #descriptionNumberOfPosts! !!PBPostTicker methodsFor: 'accessing-dynamic' stamp: 'lr 2/18/2009 15:43'!posts	| items |	items := self blog allPostsIn: self context.	self numberOfPosts isNil		ifFalse: [ items := items last: (self numberOfPosts min: items size) ].	^ items reversed! !!PBPostTicker methodsFor: 'rendering-parts' stamp: 'dc 11/7/2008 17:04'!renderAuthorForPost: aPost on: html	aPost author ifNil: [^ self].	html space.	html span		class: 'author';		with: 'by ', aPost author.! !!PBPostTicker methodsFor: 'rendering' stamp: 'damiencassou 11/13/2008 15:36'!renderContentOn: html	self blog isNil		ifTrue: [ ^ html div: '(no blog specified)' ].	self posts isEmpty		ifTrue: [ ^ html div: '(no posts available)' ].	html unorderedList class: 'postticker'; with: [		self posts do: [ :each |			html listItem: [				self renderPost: each on: html ] ] ].	self renderRssOn: html.! !!PBPostTicker methodsFor: 'rendering-parts' stamp: 'lr 11/10/2008 13:29'!renderDateForPost: aPost on: html	html span class: 'date'; with: aPost publication date! !!PBPostTicker methodsFor: 'rendering' stamp: 'lr 5/25/2009 15:04'!renderPost: aPost on: html	html anchor		goto: (self context structure: aPost);		with: [ html html: aPost title ].	html div class: 'timestamp'; with: [		self renderDateForPost: aPost on: html.		self renderTimeForPost: aPost on: html.		self renderAuthorForPost: aPost on: html ].	html div		class: 'summary';		with: [ html html: (self summaryOf: aPost) ]! !!PBPostTicker methodsFor: 'rendering' stamp: 'damiencassou 11/13/2008 15:51'!renderRssOn: html	"Copy-pasted from PBHtmlView. I tried to refactor but it was not that easy."	html div class: 'subscribe'; with: [		html anchor			url: (self context				structure: self blog				view: PBEntriesRssView)					url;			with: 'Entries (RSS)'.		html span class: 'rssComments'; with: [			html text: ' and '.				html anchor					url: (self context						structure: self blog						view: PBCommentsRssView)							url;					with: 'Comments (RSS)' ]]! !!PBPostTicker methodsFor: 'rendering-parts' stamp: 'lr 11/10/2008 13:29'!renderTimeForPost: aPost on: html	html span class: 'time'; with: aPost publication time! !!PBPostTicker methodsFor: 'private' stamp: 'lr 9/13/2007 10:15'!summaryOf: aPost	| input output |	input := aPost plainText readStream.	output := WriteStream on: String new.	[ input atEnd ] whileFalse: [		output nextPutAll: (input upTo: $<).		input upTo: $> ].	self numberOfCharacters ifNotNil: [		output position: (output size min: self numberOfCharacters).		output atEnd			ifFalse: [ output nextPutAll: '...' ] ].	^ output contents! !!PBPostTicker methodsFor: 'as yet unclassified' stamp: 'lr 6/27/2009 11:10'!updateRoot: aHtmlRoot	super updateRoot: aHtmlRoot.	self blog isNil ifTrue: [ ^ self ].	aHtmlRoot rss		title: self blog feedTitle;		url: (self context			structure: self blog			view: PBEntriesRssView)				url! !!PBRssLinkWidget class methodsFor: 'accessing' stamp: 'lr 2/5/2009 21:15'!descriptionBlog	^ PRStructureDescription new		addCondition: (MACondition selector: #isBlog)			labelled: 'Select a blog as source';		accessor: #blog;		label: 'Source';		priority: 100;		yourself! !!PBRssLinkWidget class methodsFor: 'accessing' stamp: 'lr 9/3/2008 11:46'!groupLabel	^ 'Pier Blog'! !!PBRssLinkWidget class methodsFor: 'testing' stamp: 'tg 11/8/2007 16:33'!isAbstract	^false! !!PBRssLinkWidget class methodsFor: 'accessing' stamp: 'lr 9/3/2008 11:36'!label	^ 'Links'! !!PBRssLinkWidget methodsFor: 'accessing' stamp: 'tg 11/8/2007 16:33'!blog	^ self read: #descriptionBlog! !!PBRssLinkWidget methodsFor: 'rendering' stamp: 'lr 5/25/2009 11:38'!renderContentOn: html	self blog isNil 		ifTrue: [ ^ html div: '(no blog specified)' ].	html anchor 		url: (self context			structure: self blog			view: PBEntriesRssView)				url;		with: [ html span class: 'rsslink'; with: 'RSS' ]! !!PRStructure methodsFor: '*pier-blog-model-testing' stamp: 'lr 1/15/2007 21:06'!isBlog	^ false! !!PRStructure methodsFor: '*pier-blog-model-testing' stamp: 'lr 1/14/2007 13:23'!isComment	^ false! !!PRStructure methodsFor: '*pier-blog-model-testing' stamp: 'lr 1/14/2007 13:44'!isPost	^ false! !!PBBlogRssView class methodsFor: 'testing' stamp: 'lr 10/2/2008 16:04'!isValidIn: aContext	^ (super isValidIn: aContext) and: [ aContext structure isBlog ]! !!PBBlogRssView class methodsFor: 'instance-creation' stamp: 'lr 10/2/2008 16:05'!new	"This is an ugly hack to make already bookmarked blogs work properly."	^ self name = #PBRssView		ifTrue: [ PBEntriesRssView new ]		ifFalse: [ super new ]! !!PBBlogRssView methodsFor: 'accessing' stamp: 'lr 10/2/2008 15:33'!blog	^ blog ifNil: [ blog := self find: PBBlog ]! !!PBBlogRssView methodsFor: 'accessing-dynamic' stamp: 'lr 10/2/2008 15:34'!link	^ (self context structure: self blog) url! !!PBBlogRssView methodsFor: 'rendering' stamp: 'lr 4/13/2009 16:51'!renderDescription: aDocument on: rss	rss description: [		rss html: '<!![CDATA['.		PBRssRenderer new			start: aDocument in: self 			on: (WARenderCanvas				context: rss context				callbacks: nil).		rss html: ']]>' ]! !!PBBlogRssView methodsFor: 'rendering' stamp: 'lr 10/2/2008 15:34'!renderRssOn: rss	"Generate some standard information that should be present in all the feeds."	rss title: self title; link: self link.	self renderDescription: self blog document on: rss.	rss generator: 'Pier Blog'.	rss language: self blog language.	self blog tags do: [ :each | rss category: each ].	self blog copyright		ifNotNil: [ rss copyright: self blog copyright ].	self blog managingEditor		ifNotNil: [ rss managingEditor: self blog managingEditor ].	self blog webMaster		ifNotNil: [ rss webMaster: self blog webMaster ]! !!PBBlogRssView methodsFor: 'accessing-dynamic' stamp: 'lr 10/2/2008 15:34'!title	^ self blog feedTitle ifNil: [ self blog title ]! !!PBCommentsRssView class methodsFor: 'testing' stamp: 'lr 2/5/2007 19:56'!isAbstract	^ false! !!PBCommentsRssView class methodsFor: 'accessing' stamp: 'lr 2/6/2007 20:00'!label	^ 'Comments (RSS)'! !!PBCommentsRssView methodsFor: 'accessing' stamp: 'lr 1/26/2008 12:55'!comments	^ comments ifNil: [ comments := self findComments ]! !!PBCommentsRssView methodsFor: 'private' stamp: 'lr 1/26/2008 12:55'!findComments	| items |	items := self blog allCommentsIn: self context.	items := items last: (self blog itemCount min: items size).	^ items reversed! !!PBCommentsRssView methodsFor: 'rendering' stamp: 'pmm 2/23/2007 09:00'!renderComment: aComment on: rss	| post |	post := aComment parents reverse		detect: [ :each | each isPost ].	rss title: 'Comment on ' , post title.	rss link: ((self context structure: post)		url fragment: aComment uuid).	aComment author		ifNotNil: [ rss creator: aComment author ].	rss publicationDate: (RRRfc822DateTime		newDateAndTime: aComment publication).	rss guid		beNoPermaLink;		with: aComment uuid.	self renderDescription: aComment document on: rss! !!PBCommentsRssView methodsFor: 'rendering' stamp: 'lr 2/5/2007 21:44'!renderRssOn: rss	super renderRssOn: rss.	self comments isEmpty ifTrue: [ ^ self ].	rss lastBuildDate: (RRRfc822DateTime		newDateAndTime: self comments last publication).	self comments do: [ :each |		rss item: [ self renderComment: each on: rss ] ]! !!PBCommentsRssView methodsFor: 'accessing-dynamic' stamp: 'lr 2/5/2007 21:46'!title	^ 'Comments for ' , super title! !!PBEntriesRssView class methodsFor: 'testing' stamp: 'lr 2/5/2007 19:55'!isAbstract	^ false! !!PBEntriesRssView class methodsFor: 'accessing' stamp: 'lr 2/6/2007 20:00'!label	^ 'Entries (RSS)'! !!PBEntriesRssView methodsFor: 'private' stamp: 'lr 1/26/2008 12:56'!findPosts	| items |	items := self blog allPostsIn: self context.	items := items last: (self blog itemCount min: items size).	^ items reversed! !!PBEntriesRssView methodsFor: 'accessing' stamp: 'lr 2/5/2007 21:42'!posts	^ posts ifNil: [ posts := self findPosts ]! !!PBEntriesRssView methodsFor: 'rendering' stamp: 'lr 3/26/2009 21:49'!renderPost: aPost on: rss	rss title: aPost title.	rss link: (self context structure: aPost) url.	rss comments: (self context structure: aPost) url.	rss commentRss: (self context		structure: self blog		view: PBCommentsRssView) url.	rss publicationDate: (RRRfc822DateTime		newDateAndTime: aPost publication).	aPost tags		do: [ :each | rss category: each ].	self renderDescription: aPost document on: rss.	aPost author		ifNotNil: [ rss creator: aPost author ].	rss guid		beNoPermaLink;		with: aPost uuid.	aPost enclosure ifNotNilDo: [ :value |		rss enclosure			url: (value file urlFor: rss context);			length: value file filesize;			type: value file mimetype ].	aPost sourceUrl ifNotNil: [		rss source			url: aPost sourceUrl;			with: aPost sourceTitle ]! !!PBEntriesRssView methodsFor: 'rendering' stamp: 'lr 2/5/2007 21:42'!renderRssOn: rss	super renderRssOn: rss.	self posts isEmpty ifTrue: [ ^ self ].	rss lastBuildDate: (RRRfc822DateTime		newDateAndTime: self posts last publication).	self posts do: [ :each |		rss item: [ self renderPost: each on: rss ] ]! !!PBEntriesRssView methodsFor: 'rendering' stamp: 'lr 10/3/2008 23:30'!renderWithContext: aContext	(self shouldForward: aContext)		ifFalse: [ super renderWithContext: aContext ]		ifTrue: [			self returnResponse: (WAResponse new				redirectTo: self blog feedForward;				yourself) ]! !!PBEntriesRssView methodsFor: 'private' stamp: 'lr 10/3/2008 23:33'!shouldForward: aContext	(self blog feedForward isNil or: [ self blog feedForward isEmpty ])		ifTrue: [ ^ false ].	(aContext session currentRequest fields includesKey: 'noforward')		ifTrue: [ ^ false ].	(aContext session currentRequest userAgent notNil and: [ aContext session currentRequest userAgent includesSubString: 'FeedBurner' ])		ifTrue: [ ^ false ].	^ true! !!PBChangesRssView class methodsFor: 'testing' stamp: 'lr 9/28/2009 10:04'!isAbstract	^ false! !!PBChangesRssView class methodsFor: 'accessing' stamp: 'lr 10/2/2008 16:30'!label	^ 'Changes (RSS)'! !!PBChangesRssView methodsFor: 'testing' stamp: 'lr 10/2/2008 16:35'!isVisible: aContext	^ aContext command isEdit and: [ super isVisible: aContext ]! !!PBChangesRssView methodsFor: 'rendering-parts' stamp: 'lr 9/28/2009 09:20'!renderData: aContext on: html	aContext command description do: [ :each |		each isDocumentDescription ifTrue: [			PBRssRenderer new				start: (aContext 	command readUsing: each)				in: self on: html ] ]! !!PBChangesRssView methodsFor: 'accessing' stamp: 'lr 9/16/2009 12:52'!titleFor: aContext	^ aContext structure title! !!PBDiffRssView class methodsFor: 'testing' stamp: 'lr 9/28/2009 10:04'!isAbstract	^ false! !!PBDiffRssView class methodsFor: 'accessing' stamp: 'lr 9/27/2009 19:20'!label	^ 'Diff (RSS)'! !!PBDiffRssView methodsFor: 'testing' stamp: 'lr 9/27/2009 20:13'!isFiltered	^ false! !!PBDiffRssView methodsFor: 'testing' stamp: 'lr 9/28/2009 08:59'!isVisible: aContext	^ aContext command isEdit and: [ super isVisible: aContext ]! !!PBDiffRssView methodsFor: 'rendering-parts' stamp: 'lr 9/28/2009 18:07'!renderData: aContext on: html	| previous |	previous := self 		previousContextOf: aContext		matching: [ :each | each structure == aContext structure ].	aContext command description do: [ :each |		each isDocumentDescription ifTrue: [			| source target |			source := previous isNil				ifFalse: [ each toString: (previous command readUsing: each) ].			target := each toString: (aContext command readUsing: each).			html render: (PRWordDiffAlgorithm from: source to: target) ] ]! !!PBDiffRssView methodsFor: 'accessing' stamp: 'lr 9/28/2009 08:59'!titleFor: aContext	^ aContext structure title! !!PBHistoryRssView class methodsFor: 'testing' stamp: 'lr 9/28/2009 10:03'!isAbstract	^ true! !!PBHistoryRssView class methodsFor: 'accessing' stamp: 'lr 9/28/2009 09:19'!label	^ 'Log (RSS)'! !!PBHistoryRssView methodsFor: 'private' stamp: 'lr 9/27/2009 20:17'!buildItems	| result |	result := OrderedCollection new.	self context kernel persistency reverseDo: [ :each |		(self isVisible: each) ifTrue: [			(self isFiltered not				or: [ result isEmpty 				or: [ result last structure ~= each structure 				or: [ result last command class ~= each command class ] ] ]) ifTrue: [					result addLast: each.					result size < self maxSize						ifFalse: [ ^ result ] ] ] ].	^ result! !!PBHistoryRssView methodsFor: 'testing' stamp: 'lr 9/27/2009 20:13'!isFiltered	^ true! !!PBHistoryRssView methodsFor: 'testing' stamp: 'lr 10/2/2008 16:35'!isVisible: aContext	^ (aContext structure parents includes: self context structure) and: [ aContext isValidCommand: aContext structure viewCommandClass ]! !!PBHistoryRssView methodsFor: 'accessing' stamp: 'lr 9/27/2009 19:41'!items	^ items ifNil: [ items := self buildItems ]! !!PBHistoryRssView methodsFor: 'accessing' stamp: 'lr 10/6/2008 16:32'!maxSize	^ 25! !!PBHistoryRssView methodsFor: 'rendering-parts' stamp: 'lr 10/2/2008 16:52'!renderBasic: aContext on: rss	rss title: (self titleFor: aContext).	rss link: (self urlFor: aContext).	rss publicationDate: (RRRfc822DateTime		newDateAndTime: aContext command timestamp).	rss guid 		beNoPermaLink;		with: ((self urlFor: aContext)			fragment: aContext command timestamp 				asSeconds asString;			yourself)! !!PBHistoryRssView methodsFor: 'rendering-parts' stamp: 'lr 4/13/2009 16:52'!renderBody: aContext on: rss	rss description: [		rss html: '<!![CDATA['.		self 			renderData: aContext			on: (WARenderCanvas				context: rss context				callbacks: nil).		rss html: ']]>' ]! !!PBHistoryRssView methodsFor: 'rendering-parts' stamp: 'lr 10/6/2008 16:16'!renderData: aContext on: html	| data | 	html definitionList: [		aContext command description do: [ :each |			html definitionTerm: each label.			html definitionData: [				data := aContext 	command readUsing: each.				each isDocumentDescription					ifFalse: [ html render: (each toString: data) ]					ifTrue: [						PBRssRenderer new							start: data in: self 							on: html ] ] ] ]! !!PBHistoryRssView methodsFor: 'rendering' stamp: 'lr 10/2/2008 16:00'!renderItem: aContext on: rss	rss item: [		self renderBasic: aContext on: rss.		self renderUser: aContext on: rss.		self renderTags: aContext on: rss.		self renderBody: aContext on: rss ]! !!PBHistoryRssView methodsFor: 'rendering' stamp: 'lr 10/6/2008 16:12'!renderRssOn: rss	rss title: self title; description: self label; link: self url.	self items do: [ :each | self renderItem: each on: rss ]! !!PBHistoryRssView methodsFor: 'rendering-parts' stamp: 'lr 10/2/2008 16:00'!renderTags: aContext on: rss	aContext structure tags		do: [ :each | rss category: each ].	rss category: aContext structure cssClass.	rss category: aContext command cssClass! !!PBHistoryRssView methodsFor: 'rendering-parts' stamp: 'lr 10/2/2008 16:00'!renderUser: aContext on: rss	| user |	user := aContext propertyAt: #user ifAbsent: [ ^ self ].	user isNil ifFalse: [ ^ rss creator: user name ]! !!PBHistoryRssView methodsFor: 'accessing' stamp: 'lr 10/2/2008 16:34'!title	^ self titleFor: self context! !!PBHistoryRssView methodsFor: 'accessing' stamp: 'lr 10/2/2008 16:38'!titleFor: aContext	^ (aContext command label copyUpTo: $() trimBlanks , ': ' , aContext structure title! !!PBHistoryRssView methodsFor: 'accessing' stamp: 'lr 10/2/2008 16:44'!url	^ self urlFor: self context! !!PBHistoryRssView methodsFor: 'accessing' stamp: 'lr 10/2/2008 16:48'!urlFor: aContext	^ (aContext view: aContext structure viewComponentClass) url! !!PBLogRssView class methodsFor: 'testing' stamp: 'lr 9/28/2009 10:04'!isAbstract	^ false! !!PBLogRssView class methodsFor: 'accessing' stamp: 'lr 9/28/2009 10:04'!label	^ 'Log (RSS)'! !!PBRssView methodsFor: 'private' stamp: 'lr 9/28/2009 09:08'!previousContextOf: aContext matching: aBlock	| current previous |	current := self items		indexOf: aContext		ifAbsent: [ ^ nil ].	current + 1 to: self items size do: [ :index |		previous := self items at: index.		(aBlock value: previous)			ifTrue: [ ^ previous ] ].	^ nil! !!PBRssView methodsFor: 'rendering' stamp: 'lr 10/2/2008 15:40'!renderRssOn: rss	self subclassResponsibility! !!PBRssView methodsFor: 'processing' stamp: 'lr 4/13/2009 16:51'!renderWithContext: aContext	| response document root |	response := WAResponse new.	response contentType: RRRssRoot defaultContentType.	root := RRRssRoot new.	document := WAHtmlStreamDocument new.	document stream: response stream.	document open: root.	[ self renderRssOn: (RRRssRenderCanvas		context: (aContext document: document)		callbacks: nil) ]			on: Error 			do: [ :err | response := WAResponse internalError: err ].	document close: root.	self returnResponse: response! !!PBRssView methodsFor: 'processing' stamp: 'lr 9/16/2008 16:35'!returnResponse: aResponse	self session expire; returnResponse: aResponse doNotCache! !!PRVisitor methodsFor: '*pier-blog-model' stamp: 'lr 1/15/2007 21:51'!visitBlog: anObject	self visitCase: anObject! !!PRVisitor methodsFor: '*pier-blog-model' stamp: 'lr 1/15/2007 21:11'!visitComment: anObject	self visitEntry: anObject! !!PRVisitor methodsFor: '*pier-blog-model' stamp: 'lr 1/15/2007 21:51'!visitEntry: anObject	self visitCase: anObject! !!PRVisitor methodsFor: '*pier-blog-model' stamp: 'lr 1/15/2007 16:08'!visitPost: anObject	self visitEntry: anObject! !"Pier-Blog"!!PRDelayedPersistency commentStamp: 'lr 2/1/2009 17:03' prior: 0!A snapshot based persistency mechanism.!!PRImagePersistency commentStamp: 'lr 2/1/2009 17:08' prior: 0!A persistency strategy regularly saving the complete image. Do not use this strategy while developing, as this might corrupt the changes file.!!PRSegmentPersistency commentStamp: 'lr 2/1/2009 17:05' prior: 0!A persistency strategy regularly saving an image segment of the kernel. This requires the OS process plugin to work.!!PRDelayedPersistency class methodsFor: 'descriptions' stamp: 'lr 1/29/2009 21:32'!descriptionDuration	^ MADurationDescription new		comment: 'The minimum interval between two snapshots.';		accessor: #duration;		label: 'Duration';		default: 1 hour;		priority: 100;		beRequired;		yourself! !!PRDelayedPersistency class methodsFor: 'descriptions' stamp: 'lr 1/29/2009 21:18'!descriptionMessage	^ MAStringDescription new		accessor: #message;		label: 'Message';		group: 'Status';		priority: 200;		beReadonly;		yourself! !!PRDelayedPersistency class methodsFor: 'testing' stamp: 'lr 1/29/2009 21:15'!isAbstract	^ self name = #PRDelayedPersistency! !!PRDelayedPersistency methodsFor: 'accessing' stamp: 'lr 1/29/2009 21:16'!duration	^ duration! !!PRDelayedPersistency methodsFor: 'accessing' stamp: 'lr 1/29/2009 21:16'!duration: aDuration	"The minimum interval between two snapshots."	duration := aDuration! !!PRDelayedPersistency methodsFor: 'actions' stamp: 'lr 2/20/2009 00:29'!execute: aCommand	self mutex critical: [		self apply: aCommand.		aCommand isLogged ifTrue: [			self add: aCommand context.			self log: aCommand context.			self start ] ]! !!PRDelayedPersistency methodsFor: 'testing' stamp: 'lr 1/29/2009 21:26'!isScheduled	^ process notNil and: [ process isTerminated not ]! !!PRDelayedPersistency methodsFor: 'private' stamp: 'lr 1/29/2009 21:21'!log: aContext	| stream |	stream := FileDirectory default		fileNamed: 'transactions.txt'.	[ self log: aContext on: stream setToEnd ]		ensure: [ stream close ]! !!PRDelayedPersistency methodsFor: 'private' stamp: 'lr 1/29/2009 21:21'!log: aContext on: aStream	aStream nextPutAll: ' == '; nextPutAll: aContext command class label; nextPutAll: ' == '; cr.	aStream nextPutAll: ' -- context -- '; cr.	aContext description do: [ :each |		aStream			nextPutAll: each label; nextPutAll: ': ';			nextPutAll: (each toString: (aContext				readUsing: each)); cr ].	aStream nextPutAll: ' -- command -- '; cr.	aContext command description do: [ :each |		aStream			nextPutAll: each label; nextPutAll: ': ';			nextPutAll: (each toString: (aContext command				readUsing: each)); cr ].	aStream cr; cr! !!PRDelayedPersistency methodsFor: 'accessing' stamp: 'lr 2/1/2009 16:52'!message	^ message! !!PRDelayedPersistency methodsFor: 'accessing' stamp: 'lr 2/1/2009 16:52'!message: aString	message := aString! !!PRDelayedPersistency methodsFor: 'private' stamp: 'lr 1/29/2009 22:01'!process	(Delay forDuration: self duration)		wait.	Processor activeProcess		priority: Processor highestPriority.	process := nil.	self snapshot! !!PRDelayedPersistency methodsFor: 'actions' stamp: 'lr 2/6/2009 22:33'!sanitize	super sanitize.	self stop! !!PRDelayedPersistency methodsFor: 'initialization' stamp: 'lr 1/29/2009 21:20'!setKernel: aKernel	super setKernel: aKernel.	self stop! !!PRDelayedPersistency methodsFor: 'actions' stamp: 'lr 1/29/2009 21:31'!snapshot	"Take a snapshot and perform cleanup tasks."	self subclassResponsibility! !!PRDelayedPersistency methodsFor: 'actions' stamp: 'lr 1/29/2009 21:30'!start	"Schedule the receiver to take a snapshot after the configured duration."	self isScheduled		ifTrue: [ ^ self ].	process := [ self process ]		newProcess.	process 		priority: Processor userBackgroundPriority;		name: 'pier'.	process resume! !!PRDelayedPersistency methodsFor: 'actions' stamp: 'lr 2/20/2009 00:31'!stop	"Stop the configured snapshot."	self isScheduled		ifTrue: [ process terminate ].	process := nil! !!PRImagePersistency class methodsFor: 'accessing-descriptions' stamp: 'lr 1/23/2009 14:02'!descriptionMaxImages	^ MANumberDescription new		comment: 'The maximum number of backup copies to keep';		accessor: #maxImages;		label: 'Backup Images';		priority: 110;		beRequired;		default: 3;		beInteger;		yourself! !!PRImagePersistency class methodsFor: 'accessing-descriptions' stamp: 'lr 1/23/2009 14:03'!descriptionNamePrefix	^ MAStringDescription new		comment: 'Defines the prefix for image-names.';		default: 'pier_backup_';		accessor: #namePrefix;		label: 'Backup Prefix';		priority: 120;		beRequired;		yourself! !!PRImagePersistency methodsFor: 'private' stamp: 'lr 1/29/2009 21:31'!cleanupBackupImages	| images |	maxImages isNil ifTrue: [ ^ self ].	images := FileDirectory default fileNames select: [ :each | 		(each endsWith: FileDirectory imageSuffix) 			and: [ each beginsWith: namePrefix ] ].	images size <= maxImages ifTrue: [ ^ self ].	images := (images asSortedCollection allButLast: maxImages)		collect: [ :each | each copyUpToLast: $. ].	images do: [ :each |		FileDirectory default 			deleteFileNamed: (each , '.' , FileDirectory imageSuffix)			ifAbsent: [ ].		FileDirectory default 			deleteFileNamed: (each , '.' , FileDirectory changeSuffix)			ifAbsent: [ ] ]! !!PRImagePersistency methodsFor: 'accessing' stamp: 'lr 6/22/2008 17:54'!maxImages	^ maxImages! !!PRImagePersistency methodsFor: 'accessing' stamp: 'lr 1/29/2009 21:27'!maxImages: anInteger	"The maximum number of backup copies to keep."	maxImages := anInteger! !!PRImagePersistency methodsFor: 'accessing' stamp: 'lr 6/22/2008 18:06'!namePrefix	^ namePrefix! !!PRImagePersistency methodsFor: 'accessing' stamp: 'lr 1/29/2009 21:27'!namePrefix: aString	"Defines the prefix for backup copies."	namePrefix := aString! !!PRImagePersistency methodsFor: 'private' stamp: 'lr 4/20/2009 22:46'!saveImageAndBackupAs: aString	| directory image imageName changeName |	directory := FileDirectory default.	image := SmalltalkImage current.	image closeSourceFiles.	imageName := aString , '.' , FileDirectory imageSuffix.	changeName := aString , '.' , FileDirectory changeSuffix.	((directory fileExists: imageName) not and: [ (directory fileExists: changeName) not ]) ifTrue: [		directory			copyFileWithoutOverwriteConfirmationNamed: image imageName 			toFileNamed: (directory fullPathFor: imageName).		directory			copyFileWithoutOverwriteConfirmationNamed: image changesName 			toFileNamed: (directory fullPathFor: changeName).			Smalltalk setMacFileInfoOn: (directory fullPathFor: changeName) ].	image openSourceFiles; saveImageSegments; snapshot: true andQuit: false! !!PRImagePersistency methodsFor: 'actions' stamp: 'lr 4/20/2009 22:47'!snapshot	| filename |	filename := namePrefix , DateAndTime now asSortableString.	[ self saveImageAndBackupAs: filename ]		valueUnpreemptively.	self message: 'Last snapshot ' , filename printString , ' at ' , TimeStamp now asString.	self cleanupBackupImages! !!PRSegmentPersistency class methodsFor: 'accessing-descriptions' stamp: 'lr 2/5/2009 16:35'!descriptionNamePrefix	^ MAStringDescription new		comment: 'Defines the prefix for snapshot files.';		label: 'Snapshot Prefix';		accessor: #namePrefix;		default: 'snapshot_';		priority: 120;		beRequired;		yourself! !!PRSegmentPersistency class methodsFor: 'testing' stamp: 'lr 1/30/2009 16:55'!isAbstract	^ true! !!PRSegmentPersistency methodsFor: 'private' stamp: 'lr 4/6/2009 23:58'!cleanup	"Execute all the registered cleanup code. Do not execute this code within an image you intend to continue using. This is a non-reversible operation and pretty much destroys your complete environment."	(Pragma allNamed: #cleanup from: self class to: PRSegmentPersistency)		do: [ :pragma | self perform: pragma selector ].	Smalltalk garbageCollect! !!PRSegmentPersistency methodsFor: 'cleanup' stamp: 'lr 1/30/2009 08:04'!cleanupKom	"Stop all the server adaptors, they just get into our way."	<cleanup>		WAKom withAllSubclassesDo: [ :each | each shutDown ]! !!PRSegmentPersistency methodsFor: 'cleanup' stamp: 'lr 1/30/2009 08:03'!cleanupMagritte	"Clear the magritte cache that shares common description objects with the kernel."	<cleanup>		MADescriptionBuilder initialize! !!PRSegmentPersistency methodsFor: 'cleanup' stamp: 'lr 1/30/2009 08:21'!cleanupMonticello	"Clear monticello caches, they might reference some of our blocks in obscure ways."	<cleanup>		MCMethodDefinition shutDown.	MCFileBasedRepository flushAllCaches! !!PRSegmentPersistency methodsFor: 'cleanup' stamp: 'lr 1/30/2009 08:04'!cleanupPier	"Clear all registered kernels. We don't want references to our model from outside."	<cleanup>		PRKernel instVarNamed: 'Instances' put: nil! !!PRSegmentPersistency methodsFor: 'cleanup' stamp: 'lr 1/30/2009 08:13'!cleanupProcesses	"Get rid of pocesses that potentialy still hang somewhere and reference our model. Take care not to kill any of the vital processes."	<cleanup>	| protected |	protected := IdentitySet new.	protected		add: Project uiProcess;		add: Processor activeProcess;		add: Sensor eventTicklerProcess;		add: Processor backgroundProcess;		add: Sensor interruptWatcherProcess;		add: Smalltalk lowSpaceWatcherProcess;		add: WeakArray runningFinalizationProcess.	Process allInstances do: [ :each |		(each isTerminated or: [ Processor highestPriority = each priority or: [ protected includes: each ] ])			ifFalse: [ each terminate ] ]	.	! !!PRSegmentPersistency methodsFor: 'cleanup' stamp: 'lr 1/30/2009 08:10'!cleanupSeaside	"Clear all the entry points that reference other entry points, state and continuations by overriding them with a blank version. Do not try to call #clearAllHandlers because this spawns a new process. Also dump the default dispatcher just to be sure."	<cleanup>	WAEntryPoint allSubInstances		do: [ :entry | entry copyFrom: entry class basicNew ].	WADispatcher instVarNamed: 'default' put: nil! !!PRSegmentPersistency methodsFor: 'cleanup' stamp: 'lr 1/30/2009 08:18'!cleanupWorld	"Close all windows, just in case we have some workspaces or pier browsers open that reference our model."	<cleanup>	World submorphs do: [ :morph | morph delete ].	World releaseCachedState! !!PRSegmentPersistency methodsFor: 'accessing' stamp: 'lr 2/5/2009 16:35'!directory	^ (FileDirectory default directoryNamed: 'snapshots') assureExistence! !!PRSegmentPersistency methodsFor: 'accessing' stamp: 'lr 2/5/2009 16:30'!namePrefix	^ namePrefix! !!PRSegmentPersistency methodsFor: 'accessing' stamp: 'lr 2/5/2009 16:30'!namePrefix: aString	namePrefix := aString! !!PRSegmentPersistency methodsFor: 'private' stamp: 'lr 1/30/2009 08:34'!serialize: aString	| stream pointers |	stream := self directory forceNewFileNamed: aString.	pointers := [ [ ImageSegment new writeKernel: self kernel on: stream ]		ensure: [ stream close ] ] on: Exception do: [ :error | nil ].	(pointers isNil or: [ pointers anySatisfy: [ :each | (each isLiteral or: [ each isVariableBinding ]) not ] ]) 		ifTrue: [ self directory deleteFileNamed: aString ifAbsent: [ ] ]! !!PRSegmentPersistency methodsFor: 'actions' stamp: 'lr 2/5/2009 16:33'!snapshot	| os filename |	(os := Smalltalk classNamed: #OSProcess) isNil		ifTrue: [ ^ self message: 'OSProcess not installed.' ].	os thisOSProcess pid		ifTrue: [ ^ self message: 'OSProcess does not support this platform.' ].	filename := self namePrefix , DateAndTime now asSortableString , '.obj'.	os thisOSProcess forkHeadlessSqueakAndDo: [		[ self cleanup; serialize: filename ]			ensure: [ Smalltalk quitPrimitive ] ].	self message: 'Last snapshot ' , filename printString , ' at ' , TimeStamp now asString! !!PRHistoryPersistency methodsFor: '*pier-squeak-persistency' stamp: 'lr 2/6/2009 22:31'!sanitize	super sanitize.	history := OrderedCollection new! !!PRPersistency methodsFor: '*pier-squeak-persistency' stamp: 'lr 2/6/2009 22:33'!desanitize	"Sanitizes the receiver to be serializeable."		mutex := self defaultMutex! !!PRPersistency methodsFor: '*pier-squeak-persistency' stamp: 'lr 2/6/2009 22:32'!sanitize	"Sanitizes the receiver to be serializeable."		mutex := nil! !!PRKernel methodsFor: '*pier-squeak-persistency' stamp: 'kph 11/10/2009 23:25'!exportOn: stream	| reference persistencyBackup |		self root enumerator with all do: [ :structure |		Smalltalk at: #PRComponent ifPresent: [ :class |			(structure isKindOf: class) ifTrue: [				structure settings keys do: [ :desc |					desc conditions: (desc conditions						reject: [ :cond | cond key isBlock ]) ] ] ] ].		reference := ReferenceStream on: stream binary.	persistencyBackup := persistency.	persistency := (persistencyBackup class new			copyFrom: persistencyBackup;			sanitize).				[ [ reference nextPut: self; close ] 		ensure: [ persistency := persistencyBackup ] ]			on: Error			do: [ :err | ^ self inform: 'Unable to export: ' , err messageText printString , '.' ].! !!DateAndTime methodsFor: '*pier-squeak-persistency' stamp: 'lr 9/23/2008 08:13'!asSortableString	"A small interpreter to get a date exactly the way required."	| code |	code := #( year 4 $- monthIndex 2 $- dayOfMonth 2 $_ hour 2 $- minute 2 $- second 2 ) readStream.	^ String streamContents: [ :stream |		[ code atEnd ] whileFalse: [			stream nextPutAll: ((self perform: code next)				printPaddedWith: $0 to: code next).			code next				ifNotNilDo: [ :separator | stream nextPut: separator ] ] ]! !!PRExportImportWidget class methodsFor: 'accessing' stamp: 'lr 2/5/2009 22:52'!groupLabel	^ 'Pier System'! !!PRExportImportWidget class methodsFor: 'as yet unclassified' stamp: 'lr 2/5/2009 22:44'!isAbstract	^ false! !!PRExportImportWidget class methodsFor: 'accessing' stamp: 'lr 2/5/2009 22:44'!label	^ 'Export/Import'! !!PRExportImportWidget methodsFor: 'actions' stamp: 'kph 11/10/2009 23:27'!export: aKernel	| stream |	stream := RWBinaryOrTextStream on: ByteArray new.		 aKernel exportOn: stream.		self session returnResponse: (WAResponse		document: stream contents		mimeType: 'application/binary'		fileName: aKernel name , '.obj')! !!PRExportImportWidget methodsFor: 'actions' stamp: 'lr 2/6/2009 23:02'!import: aCollection into: aKernel	| stream reference kernel |	stream := RWBinaryOrTextStream with: aCollection asByteArray.	reference := ReferenceStream on: stream binary reset.	[ kernel := reference next ]		on: Error		do: [ :err | ^ self inform: 'Unable to import: ' , err messageText printString , '.' ].	(kernel isKindOf: PRKernel)		ifFalse: [ ^ self inform: 'Invalid file format.' ].	replace		ifTrue: [ 			aKernel becomeForward: kernel.			aKernel persistency desanitize ]		ifFalse: [			kernel root name: (PRAddCommand new				uniqueName: kernel root name				in: aKernel root).			aKernel root addChild: kernel root ].	self sanitizeImport: kernel root.	self context: (self context structure: kernel root)! !!PRExportImportWidget methodsFor: 'initialization' stamp: 'lr 2/6/2009 22:39'!initialize	super initialize.	replace := false! !!PRExportImportWidget methodsFor: 'rendering' stamp: 'lr 2/5/2009 23:11'!renderContentOn: html	self renderExportOn: html.	self renderImportOn: html! !!PRExportImportWidget methodsFor: 'rendering' stamp: 'lr 2/6/2009 23:07'!renderExportOn: html	html heading level: 2; with: 'Export'.	html paragraph: 'Exporting a snapshot of the kernel does not include the history or any external files. If you plan to move the site to a new location make sure to copy the complete directory structure below ' , MAExternalFileModel baseDirectory pathName printString , ' separately. Depending on the size of your site it might take a while to generate and download the snapshot.'.	html form: [		html paragraph: [			html submitButton				callback: [ self export: self context kernel ];				with: 'Export' ] ]! !!PRExportImportWidget methodsFor: 'rendering' stamp: 'lr 2/6/2009 23:14'!renderImportOn: html	html heading level: 2; with: 'Import'.	html paragraph: 'Importing a snapshot either replaces the existing kernel or just adds all included pages to the current kernel. In either case, make sure to merge the external files into ' , MAExternalFileModel baseDirectory pathName printString , ' and to check security properties.'.	html form multipart; with: [		html paragraph: [			html radioGroup: [ :group |				html label: [					html radioButton						group: group;						selected: replace not;						callback: [ replace := false ].					html text: 'Import Pages' ].				html break.				html label: [ 					html radioButton						group: group;						selected: replace;						callback: [ replace := true ].					html text: 'Replace Kernel' ] ] ].		html paragraph: [			html fileUpload				callback: [ :file | self import: file contents into: self context kernel ] ].		html paragraph: [			html submitButton: 'Import' ] ]! !!PRExportImportWidget methodsFor: 'private' stamp: 'lr 2/6/2009 08:20'!sanitizeExport: aStructure	"Some older versions of Pier have block contexts in their conditions, get rid of these."		aStructure enumerator with all do: [ :structure |		Smalltalk at: #PRComponent ifPresent: [ :class |			(structure isKindOf: class) ifTrue: [				structure settings keys do: [ :desc |					desc conditions: (desc conditions						reject: [ :cond | cond key isBlock ]) ] ] ] ]! !!PRExportImportWidget methodsFor: 'private' stamp: 'lr 4/1/2009 21:56'!sanitizeImport: aStructure	"After importing drop all the security settings as these users might not exist in the new kernel. Also refresh all the links so that they are properly printed when editing these pages."		aStructure enumerator with all do: [ :structure |		replace ifFalse: [			Smalltalk at: #PUSecurity ifPresent: [ :class |				structure 					removeDecoration: class					ifAbsent: [ ] ] ].		structure outgoingReferences do: [ :link |			(link isInternal and: [ link isBroken not ])				ifTrue: [ link update ] ] ]! !!PRImagePersistencyTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRImagePersistencyTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRImagePersistency! !!ImageSegment methodsFor: '*Pier-Squeak-Persistency' stamp: 'lr 3/26/2009 23:36'!writeKernel: aKernel on: aStream	"Serialize aKernel on aStream so that it can be loaded into another image later. Answer a list of outpointers, these are objects that are referenced from somewhere else."	| previousMarker |	self		copyFromRoots: (Array with: aKernel)		sizeHint: 1024 *1024		areUnique: true.	state = #activeCopy		ifFalse: [ self error: 'The image segment has an invalid state.' ].	previousMarker := endMarker.	endMarker := nil.	aStream fileOutClass: nil andObject: self.	endMarker := previousMarker.	^ outPointers copy! !"Pier-Squeak-Persistency"!Installer ss	project: 'MetacelloRepository';	install: 'ConfigurationOfSeaside28';	install: 'ConfigurationOfSeaside28Examples';	install: 'ConfigurationOfMagritte';	install: 'ConfigurationOfPier-DaleHenrichs.18'.(Smalltalk at: #ConfigurationOfSeaside28) load.(Smalltalk at: #ConfigurationOfSeaside28Examples) load.(Smalltalk at: #ConfigurationOfMagritte) load.(Smalltalk at: #ConfigurationOfPier) load.!WAKomEncoded startOn: 8080.!WAKomEncoded stop.!WAKomEncoded startOn: 8080.!WAKomEncoded stop.!----QUIT----{21 July 2010 . 6:14:09 pm} Squeak4.1.image priorSource: 404!----STARTUP----{22 July 2010 . 8:52:54 pm} as C:\Squeak\4.1\Squeak4.1-Seaside2.8\Squeak4.1.image!WAKomEncoded stop.!WAKomEncoded startOn: 8080.!----SNAPSHOT----{22 July 2010 . 8:58:36 pm} Seaside2.8.image priorSource: 3847188!----QUIT----{22 July 2010 . 8:58:41 pm} Seaside2.8.image priorSource: 3847414!----STARTUP----{22 July 2010 . 8:59 pm} as C:\Squeak\4.1\Squeak4.1-Seaside2.8\Seaside2.8.image!Smalltalk cleanUp: true!----QUIT----{22 July 2010 . 8:59:21 pm} Seaside2.8.image priorSource: 3847498!