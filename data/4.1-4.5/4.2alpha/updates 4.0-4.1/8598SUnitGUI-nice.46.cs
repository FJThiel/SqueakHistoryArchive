"Change Set:		8598SUnitGUI-nice.46SUnitGUI-nice.46:Cosmetic: move or remove a few temps inside closures"!!TestRunner methodsFor: 'history saving' stamp: 'nice 12/27/2009 03:12'!showProgress	| testCaseClasses d string |	testCaseClasses := (self suiteAll tests collect: [:testCase | testCase class]) asSet.		"At the end of the algorithm, d will contains all the diff between what was saved and the current result"	d := Dictionary new.	d at: #passed put: OrderedCollection new.	d at: #failures put: OrderedCollection new.	d at: #errors put: OrderedCollection new.	testCaseClasses do: [ :cls | | t |		(cls class methodDict includesKey: #lastStoredRun)			ifTrue: [t := cls lastStoredRun.					(t at: #passed) do: [:s | 												(result isErrorFor: cls selector: s)												ifTrue: [(d at: #errors) add: {cls . s}].											(result isFailureFor: cls selector: s)												ifTrue: [(d at: #failures) add: {cls . s}]  ].																(t at: #failures) do: [:s | (result isPassedFor: cls selector: s)												ifTrue: [(d at: #passed) add: {cls . s}].											(result isErrorFor: cls selector: s)												ifTrue: [(d at: #errors) add: {cls . s}]].																(t at: #errors) do: [:s | 	(result isPassedFor: cls selector: s)												ifTrue: [(d at: #passed) add: {cls . s}].											(result isFailureFor: cls selector: s)												ifTrue: [(d at: #failures) add: {cls . s}]]]].						string := String streamContents: [:str|		str nextPutAll: '----------------'; cr.		str nextPutAll: 'Diff between current result and saved result'; cr.		str nextPutAll: 'New passed: '.		(d at: #passed) do: [:s| str nextPutAll: s printString, ' '].		str cr.		str nextPutAll: 'New failures: '.		(d at: #failures) do: [:s| str nextPutAll: s printString, ' '].		str cr.				str nextPutAll: 'New errors: '.		(d at: #errors) do: [:s| str nextPutAll: s printString, ' '].		str cr].		Workspace new contents: string; openLabel: 'SUnit Progress' string.	! !!TestRunner methodsFor: 'accessing-classes' stamp: 'nice 12/27/2009 03:12'!classList	| offset |	classes isEmpty ifTrue: [ ^ classes ].	offset := classes first allSuperclasses size.	^ classes collect: [ :each | | ident |		ident := String 			new: 2 * (0 max: each allSuperclasses size - offset) 			withAll: $ .		each isAbstract			ifFalse: [ ident , each name ]			ifTrue: [ 				ident asText , each name asText 					addAttribute: TextEmphasis italic;					yourself ] ].! !!TestRunner methodsFor: 'actions' stamp: 'nice 12/27/2009 03:12'!excludeClassesNotUnderTestFrom: methods 		classesSelected do: 		[ :class | 		(class class includesSelector: #classNamesNotUnderTest) ifTrue: 			[ class classNamesNotUnderTest do: 				[ :className | | theClass | 				theClass := Smalltalk classNamed: className.				theClass ifNotNil:[				theClass methods do: 					[ :each | 					methods 						remove: each methodReference						ifAbsent: [  ] ].				theClass class methods do: 					[ :each | 					methods 						remove: each methodReference						ifAbsent: [  ] ]] ] ] ]! !