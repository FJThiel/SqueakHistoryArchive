"Change Set:		8494Morphic-kb.271Morphic-kb.271: - added keyboard handling to UserDialogBoxMorphMorphic-ar.269:Some tweaks for UserDialogBoxMorph:- Default title for confirmation is now 'Please confirm:'.- Title gradient is consistent with SystemWindow- Title and buttons now use less agressive MC-ish blue toneMorphic-kb.270: - added keyboard handling to UserDialogBoxMorph"!AlignmentMorph subclass: #UserDialogBoxMorph	instanceVariableNames: 'titleMorph labelMorph buttonRow value selectedButton cancelButton'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Windows'!!UserDialogBoxMorph class methodsFor: 'utilities' stamp: 'kb 12/16/2009 18:37'!confirm: aString orCancel: cancelBlock at: aPointOrNil		^(self new		title: 'Please confirm:';		label: aString;		addSelectedButton: '       Yes       ' translated value: true;		addButton: '        No        ' translated  value: false;		addCancelButton: '     Cancel     ' translated  value: nil;		runModalIn: ActiveWorld forHand: ActiveHand at: aPointOrNil)			ifNil: [ cancelBlock value ]! !!UserDialogBoxMorph methodsFor: 'events' stamp: 'kb 12/16/2009 16:38'!handlesKeyboard: evt	^true! !!UserDialogBoxMorph methodsFor: 'initialization' stamp: 'ar 12/16/2009 02:15'!buttonColor	^Color r: 0.658 g: 0.678 b: 0.78! !!UserDialogBoxMorph methodsFor: 'constructing' stamp: 'kb 12/16/2009 16:59'!addCancelButton: buttonLabel value: buttonValue		self 		addButton: buttonLabel 		value: buttonValue 		selected: false 		performActionOnEscape: true! !!UserDialogBoxMorph methodsFor: 'initialization' stamp: 'ar 12/16/2009 02:15'!titleGradient	| cc gradient |	cc :=  self buttonColor.	gradient := GradientFillStyle ramp: {		0.0 -> Color white. 		0.33 ->(cc mixed: 0.5 with: Color white). 		1.0 -> cc.	}.	gradient origin: 0@0.	gradient direction: 0 @ (TextStyle defaultFont height + 10).	^gradient! !!UserDialogBoxMorph methodsFor: 'events' stamp: 'kb 12/16/2009 17:28'!deselectSelectedButton	selectedButton ifNil: [ ^self ].	selectedButton color: self buttonColor twiceLighter.	selectedButton := nil! !!UserDialogBoxMorph methodsFor: 'constructing' stamp: 'kb 12/16/2009 16:59'!addSelectedCancelButton: buttonLabel value: buttonValue		self 		addButton: buttonLabel 		value: buttonValue 		selected: true 		performActionOnEscape: true! !!UserDialogBoxMorph methodsFor: 'initialization' stamp: 'ar 12/16/2009 02:11'!initialize	| titleRow titleFill cc |	super initialize.	self color: Color white.	self listDirection: #topToBottom; wrapCentering: #center;		hResizing: #shrinkWrap; vResizing: #shrinkWrap.	self layoutInset: 0@0; cellInset: 5@5.	self borderStyle: BorderStyle thinGray.	self useRoundedCorners;			addDropShadow;			shadowColor: (TranslucentColor r: 0.0 g: 0.0 b: 0.0 alpha: 0.666);			shadowOffset: 1 @ 1.	cc := Color gray: 0.8.	titleRow := AlignmentMorph newRow.	titleRow hResizing: #spaceFill; vResizing: #shrinkWrap.	titleRow layoutInset: 2@5.	titleRow color: cc.	titleFill := GradientFillStyle ramp: {0.0 -> Color white. 1 ->cc}.	titleFill radial: false; origin: titleRow topLeft; direction: 0 @ TextStyle defaultFont height.	titleRow fillStyle: titleFill.	titleRow fillStyle: self titleGradient.	titleMorph := StringMorph new.	titleMorph emphasis: 1.	titleRow addMorph: titleMorph.	labelMorph := TextMorph new.	labelMorph margins: 5@5.	labelMorph lock.	buttonRow := AlignmentMorph newRow vResizing: #shrinkWrap.	buttonRow hResizing: #shrinkWrap; layoutInset: 5@5; cellInset: 5@5.	buttonRow color: Color transparent.	self addMorphBack: titleRow.	self addMorphBack: labelMorph.	self addMorphBack: buttonRow.	self addDropShadow.! !!UserDialogBoxMorph methodsFor: 'constructing' stamp: 'kb 12/16/2009 17:07'!addButton: buttonLabel value: buttonValue selected: isSelected performActionOnEscape: performActionOnEscape	"Adds a button with the given label and value.	The value is returned if the user presses the button."	| button |	button := PluggableButtonMorphPlus new.	button label: buttonLabel.	button action:[self closeDialog: buttonValue].	button color: self buttonColor twiceLighter.	isSelected ifTrue: [ self selectButton: button ].	performActionOnEscape ifTrue: [ self performActionOnEscapeOf: button ]. 	buttonRow addMorphBack: button.! !!UserDialogBoxMorph class methodsFor: 'utilities' stamp: 'kb 12/16/2009 17:14'!confirm: aString title: titleString at: aPointOrNil	"UserDialogBoxMorph confirm: 'Make your choice carefully' withCRs title: 'Do you like chocolate?'"	^self new		title: titleString;		label: aString;		addSelectedButton: '       Yes       ' translated value: true;		addCancelButton: '        No        ' translated  value: false;		runModalIn: ActiveWorld forHand: ActiveHand at: aPointOrNil! !!UserDialogBoxMorph methodsFor: 'constructing' stamp: 'kb 12/16/2009 16:58'!addSelectedButton: buttonLabel value: buttonValue		self 		addButton: buttonLabel 		value: buttonValue 		selected: true 		performActionOnEscape: false! !!UserDialogBoxMorph methodsFor: 'events' stamp: 'kb 12/16/2009 17:24'!keyStroke: evt	| evtCharacter |	evtCharacter := evt keyCharacter.	evtCharacter = Character escape ifTrue: [		^cancelButton ifNotNil: [ cancelButton performAction ] ].	evtCharacter = Character cr ifTrue: [		^selectedButton ifNotNil: [ selectedButton performAction ] ].	(evtCharacter = Character arrowLeft or: [ 		evt shiftPressed and: [ evtCharacter = Character tab ] ]) ifTrue: [ 			^self selectPreviousButton ].	(evtCharacter = Character arrowRight or: [ 		evtCharacter = Character tab ]) ifTrue: [ 			^self selectNextButton ].! !!UserDialogBoxMorph methodsFor: 'constructing' stamp: 'kb 12/16/2009 16:59'!performActionOnEscapeOf: aButton	cancelButton := aButton! !!UserDialogBoxMorph methodsFor: 'events' stamp: 'kb 12/16/2009 17:34'!selectButton: aButton	self deselectSelectedButton.	aButton color: Color orange muchLighter.	selectedButton := aButton! !!UserDialogBoxMorph methodsFor: 'constructing' stamp: 'kb 12/16/2009 16:58'!addButton: buttonLabel value: buttonValue		self 		addButton: buttonLabel 		value: buttonValue 		selected: false 		performActionOnEscape: false! !!UserDialogBoxMorph class methodsFor: 'utilities' stamp: 'ar 12/16/2009 02:06'!confirm: aString	"UserDialogBoxMorph confirm: 'Do you like chocolate?'"	^self confirm: aString title: 'Please confirm:'! !!UserDialogBoxMorph class methodsFor: 'utilities' stamp: 'kb 12/16/2009 18:39'!inform: aString title: titleString at: aPointOrNil	"UserDialogBoxMorph inform: 'Squeak is great!!' title: 'Will you look at this:'"		^self new		title: titleString;		label: aString;		addSelectedCancelButton: '       OK       ' translated value: nil;		runModalIn: ActiveWorld forHand: ActiveHand at: aPointOrNil! !!UserDialogBoxMorph methodsFor: 'events' stamp: 'kb 12/16/2009 17:33'!selectPreviousButton	| buttons index |	buttons := self buttons.	index := (buttons indexOf: selectedButton) - 1.	index = 0 ifTrue: [ index := buttons size ].	self selectButton: (buttons at: index)! !!UserDialogBoxMorph methodsFor: 'events' stamp: 'kb 12/16/2009 17:29'!buttons	^buttonRow submorphs select: [ :each | 		each isKindOf: PluggableButtonMorphPlus ].! !!UserDialogBoxMorph methodsFor: 'events' stamp: 'kb 12/16/2009 17:29'!selectNextButton	| buttons |	buttons := self buttons.	self selectButton: (buttons at: (buttons indexOf: selectedButton) \\ buttons size + 1)! !UserDialogBoxMorph removeSelector: #updateFill!