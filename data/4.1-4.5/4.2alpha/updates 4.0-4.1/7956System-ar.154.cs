"Change Set:		7956System-ar.154System-ar.154:Move class Clipboard from System-Support to ST80."!Object subclass: #Clipboard	instanceVariableNames: 'contents recent interpreter'	classVariableNames: 'Default'	poolDictionaries: ''	category: 'System-Support'!!Clipboard class methodsFor: 'class initialization' stamp: 'yo 12/29/2003 01:03'!startUp	self clearInterpreters.! !!Clipboard methodsFor: 'accessing' stamp: 'yo 8/11/2003 19:12'!clipboardText: text 	| string |	string := text asString.	self noteRecentClipping: text asText.	contents := text asText.	string := self interpreter toSystemClipboard: string.	self primitiveClipboardText: string.! !!Clipboard methodsFor: 'primitives' stamp: 'ar 1/15/2001 18:30'!primitiveClipboardText: aString	"Set the current clipboard text to the given string."	<primitive: 141>	"don't fail if the primitive is not implemented"! !!Clipboard methodsFor: 'accessing' stamp: 'edc 5/8/2007 17:04'!clipboardText	"Return the text currently in the clipboard. If the system clipboard is empty, or if it differs from the Smalltalk clipboard text, use the Smalltalk clipboard. This is done since (a) the Mac clipboard gives up on very large chunks of text and (b) since not all platforms support the notion of a clipboard."	| string decodedString |	string := self primitiveClipboardText withSqueakLineEndings.	(string isEmpty			or: [string = contents asString])		ifTrue: [^ contents].	decodedString := self interpreter fromSystemClipboard: string.	^ decodedString = contents asString 		ifTrue: [contents]		ifFalse: [decodedString asText].! !!Clipboard methodsFor: 'accessing' stamp: 'ar 8/6/2009 18:47'!chooseRecentClipping  "Clipboard chooseRecentClipping"	"Choose by menu from among the recent clippings"	recent ifNil: [^ nil].	^ UIManager default		chooseFrom: (recent collect: [:txt | ((txt asString contractTo: 50)									copyReplaceAll: Character cr asString with: '\')									copyReplaceAll: Character tab asString with: '|'])		values: recent! !!Clipboard class methodsFor: 'accessing' stamp: 'ar 1/15/2001 18:33'!default	^Default ifNil:[Default := self new].! !!Clipboard methodsFor: 'primitives' stamp: 'ar 1/15/2001 18:28'!primitiveClipboardText	"Get the current clipboard text. Return the empty string if the primitive fails."	<primitive: 141>	^ ''! !!Clipboard methodsFor: 'accessing' stamp: 'yo 8/11/2003 18:23'!interpreter	interpreter ifNil: [self setInterpreter].	^ interpreter.! !!Clipboard class methodsFor: 'accessing' stamp: 'ar 1/15/2001 18:35'!clipboardText: aText 	^self default clipboardText: aText! !!Clipboard methodsFor: 'accessing' stamp: 'mir 7/20/2004 15:44'!setInterpreter	interpreter := LanguageEnvironment defaultClipboardInterpreter.	interpreter ifNil: [		"Should never be reached, but just in case."		interpreter := NoConversionClipboardInterpreter new].! !!Clipboard class methodsFor: 'accessing' stamp: 'ar 1/15/2001 18:35'!clipboardText "Clipboard clipboardText"	^self default clipboardText.! !!Clipboard class methodsFor: 'class initialization' stamp: 'yo 8/11/2003 22:43'!clearInterpreters	self allInstances do: [:each | each clearInterpreter].! !!Clipboard methodsFor: 'private' stamp: 'ar 1/15/2001 18:34'!noteRecentClipping: text	"Keep most recent clippings in a queue for pasteRecent (paste... command)"	text isEmpty ifTrue: [^ self].	text size > 50000 ifTrue: [^ self].	(recent includes: text) ifTrue: [^ self].	recent addFirst: text.	[recent size > 5] whileTrue: [recent removeLast].! !!Clipboard methodsFor: 'accessing' stamp: 'yo 8/11/2003 19:07'!clearInterpreter	interpreter := nil.! !!Clipboard class methodsFor: 'accessing' stamp: 'ar 1/15/2001 18:45'!chooseRecentClipping  "Clipboard chooseRecentClipping"	"Choose by menu from among the recent clippings"	^self default chooseRecentClipping! !!Clipboard class methodsFor: 'accessing' stamp: 'ar 1/15/2001 18:48'!default: aClipboard	"So that clients can switch between different default clipboards"	Default := aClipboard.! !!Clipboard methodsFor: 'initialize' stamp: 'ar 1/15/2001 18:34'!initialize	contents := '' asText.	recent := OrderedCollection new.! !