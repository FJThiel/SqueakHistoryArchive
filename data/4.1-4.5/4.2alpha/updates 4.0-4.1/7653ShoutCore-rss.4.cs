"Change Set:		7653ShoutCore-rss.4ShoutCore-rss.4:Removing cruft left over from colorPrint browser option and colorWhenPrettyPrinting preference.ShoutCore-bf.3:make method pattern bold in subdued color scheme, as is traditional for Smalltalk browsers"!!SHTextStylerST80 class methodsFor: 'preferences' stamp: 'rss 8/23/2009 11:01'!initializePreferences		(Preferences preferenceAt: #syntaxHighlightingAsYouType) ifNil:[		Preferences			disable: #browseWithPrettyPrint.		Preferences 			addPreference: #syntaxHighlightingAsYouType			 categories: #( browsing)			default: true 			balloonHelp: 'Enable, or disable, Shout - Syntax Highlighting As You Type. When enabled, code in Browsers and Workspaces is styled to reveal its syntactic structure. When the code is changed (by typing some characters, for example), the styling is changed so that it remains in sync with the modified code'].	(Preferences preferenceAt: #syntaxHighlightingAsYouTypeAnsiAssignment) ifNil:[		Preferences 			addPreference: #syntaxHighlightingAsYouTypeAnsiAssignment			 categories: #( browsing)			default: false 			balloonHelp: 'If true, and syntaxHighlightingAsYouType is enabled,  all left arrow assignments ( _ ) will be converted to the ANSI format ( := ) when a method is selected in a Browser. Whilst editing a method, this setting has no effect - both the left arrow and the ansi format may be used'.		(Preferences preferenceAt: #syntaxHighlightingAsYouTypeAnsiAssignment)			changeInformee: self			changeSelector: #ansiAssignmentPreferenceChanged].			(Preferences preferenceAt: #syntaxHighlightingAsYouTypeLeftArrowAssignment) ifNil:[		Preferences 			addPreference: #syntaxHighlightingAsYouTypeLeftArrowAssignment		 	categories: #( browsing)			default: false 			balloonHelp: 'If true, and syntaxHighlightingAsYouType is enabled,  all ANSI format assignments ( := ) will be converted to left arrows ( _ ) when a method is selected in a Browser. Whilst editing a method, this setting has no effect - both the left arrow and the ansi format may be used'.		(Preferences preferenceAt: #syntaxHighlightingAsYouTypeLeftArrowAssignment)			changeInformee: self 			changeSelector: #leftArrowAssignmentPreferenceChanged ].							! !!SHTextStylerST80 class methodsFor: 'style table' stamp: 'bf 8/22/2009 18:29'!subduedStyleTable	"color can be a valid argument to Color class>>colorFrom: , or nil to	use the editor text color.	Multiple emphases can be specified using an array e.g. #(bold italic).	If emphasis is not specified, #normal will be used.	if pixel height is not specified , then the editor font size will be used.	"								^#(	"(symbol	color		[emphasisSymbolOrArray		[textStyleName [pixelHeight]]])"			(default 								black 		)	(invalid 								red 			)	(excessCode 								red 			)	(comment 								(cyan muchDarker) 		)	(unfinishedComment 					(red muchDarker) 	italic)	(#'$'									(red muchDarker) 	)	(character								(red muchDarker) 	)	(integer									(red muchDarker) 	)	(number								(red muchDarker) 	)		(#-										(red muchDarker) 	)	(symbol									(blue muchDarker)			)		(stringSymbol							(blue muchDarker)			)		(literalArray							(blue muchDarker)			)	(string									(magenta muchDarker)	normal			)	(unfinishedString						red			normal			)	(assignment								nil			bold			)	(ansiAssignment 						nil			bold)	(literal									nil			italic)	(keyword								(blue muchDarker)			)	(binary 								(blue muchDarker)			)		(unary									(blue muchDarker)			)	(incompleteKeyword						(gray muchDarker)			underlined)	(incompleteBinary 						(gray muchDarker)			underlined)		(incompleteUnary						(gray muchDarker)			underlined)	(undefinedKeyword						red			)	(undefinedBinary 						red			)		(undefinedUnary						red			)														(patternKeyword 						nil			bold)	(patternBinary 							nil			bold)	(patternUnary							nil			bold)		(#self 									(red muchDarker)	)	(#super									(red muchDarker)	) 	(#true 									(red muchDarker)	)	(#false 									(red muchDarker)	)	(#nil 									(red muchDarker)	)	(#thisContext 							(red muchDarker)	)	(#return								(red muchDarker)	)	(patternArg 							(blue muchDarker)			)		(methodArg 								(blue muchDarker)			)	(blockPatternArg 						(blue muchDarker)			)	(blockArg 								(blue muchDarker)			)	(argument 								(blue muchDarker)			)	(blockArgColon							black		) 	(leftParenthesis							black		) 	(rightParenthesis						black		) 	(leftParenthesis1						(green muchDarker)		) 	(rightParenthesis1						(green muchDarker)		) 	(leftParenthesis2						(magenta muchDarker)		) 	(rightParenthesis2						(magenta muchDarker)		) 	(leftParenthesis3						(red muchDarker)		) 	(rightParenthesis3						(red muchDarker)		) 	(leftParenthesis4						(green darker)		) 	(rightParenthesis4						(green darker)		) 	(leftParenthesis5						(orange darker)		) 	(rightParenthesis5						(orange darker)		) 	(leftParenthesis6						(magenta darker)		) 	(rightParenthesis6						(magenta darker)		) 	(leftParenthesis7						blue		) 	(rightParenthesis7						blue		) 	(blockStart 								black		) 	(blockEnd 								black		) 	(blockStart1								(green muchDarker)			) 	(blockEnd1								(green muchDarker)			) 	(blockStart2								(magenta muchDarker)		) 	(blockEnd2								(magenta muchDarker)		) 	(blockStart3								(red muchDarker)		) 	(blockEnd3								(red muchDarker)		) 	(blockStart4								(green darker)		) 	(blockEnd4								(green darker)		) 	(blockStart5								(orange darker)		) 	(blockEnd5								(orange darker)		) 	(blockStart6								(magenta darker)		) 	(blockEnd6								(magenta darker)		) 	(blockStart7								blue		) 	(blockEnd7								blue		) 																																																			(arrayStart								black		) 	(arrayEnd								black		) 	(arrayStart1							black		) 	(arrayEnd1								black		) 	(leftBrace 								black		) 	(rightBrace 								black		) 	(cascadeSeparator 						black		) 	(statementSeparator 						black		) 	(externalCallType 						black		) 	(externalCallTypePointerIndicator 		black		) 	(primitiveOrExternalCallStart 			black		) 	(primitiveOrExternalCallEnd				black		)	(methodTempBar							gray		) 	(blockTempBar 							gray		)	(blockArgsBar							gray		)	(primitive								(green muchDarker)		bold)	(externalFunctionCallingConvention		(green muchDarker)		bold) 	(module									(green muchDarker)		bold)	(blockTempVar 							gray		)	(blockPatternTempVar					gray		)	(instVar 								black		)	(workspaceVar							black		bold)	(undefinedIdentifier						red			)	(incompleteIdentifier					(gray darker) 	(italic underlined))	(tempVar								(gray darker)	)	(patternTempVar						(gray darker)	)	(poolConstant							(gray muchDarker)	)	(classVar								(gray muchDarker)	)	(globalVar								black		) )! !