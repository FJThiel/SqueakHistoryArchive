"Change Set:		7971KernelTests-nice.103KernelTests-nice.103:remove uncessary sends of #valuesbecause (aDictionary values do:) is same as (aDictionary do:)except when aDictionary is modified in the do loop.KernelTests-nice.101:Add some tests for xor:Especially when providing a block argument (which should not be)KernelTests-nice.102:hem... the test should have failed...Provide a better test"!!InstructionClientTest methodsFor: 'tests' stamp: 'nice 10/19/2009 20:43'!testInstructions	"just interpret all of methods of Object"	| client scanner |	client := InstructionClient new.		Object methodDict do: [:method |			scanner := (InstructionStream on: method).			[scanner pc <= method endPC] whileTrue: [					self shouldnt: [scanner interpretNextInstructionFor: client] raise: Error.			].	].! !!TrueTest methodsFor: 'testing' stamp: 'nice 10/14/2009 23:07'!testXor	self assert: (true xor: true) = false.	self assert: (true xor: false) = true.		self		should: [(true xor: [true])			ifTrue: ["This should never be true, do not signal an Error and let the test fail"]			ifFalse: [self error: 'OK, this should be false, raise an Error']]		raise: Error		description: 'a Block argument is not allowed. If it were, answer would be false'.! !!InstructionPrinterTest methodsFor: 'tests' stamp: 'nice 10/19/2009 20:43'!testInstructions	"just print all of methods of Object and see if no error accours"	| printer |	printer  := InstructionPrinter.	Object methodDict do: [:method |					self shouldnt: [ 						String streamContents: [:stream | 							(printer on: method) printInstructionsOn: stream]] raise: Error.			].! !!InstVarRefLocatorTest methodsFor: 'tests' stamp: 'nice 10/19/2009 20:42'!testInstructions	| scanner end printer |	Object methodDict do: [:method |		scanner := InstructionStream on: method.		printer := InstVarRefLocator new.		end := scanner method endPC.		[scanner pc <= end] whileTrue: [			self shouldnt: [printer interpretNextInstructionUsing: scanner] raise: Error.		].	].! !!FalseTest methodsFor: 'tests' stamp: 'nice 10/14/2009 23:07'!testXor	self assert: (false xor: true) = true.	self assert: (false xor: false) = false.	self		should: [(false xor: [false])			ifTrue: ["This should never be true, do not signal an Error and let the test fail"]			ifFalse: [self error: 'OK, this should be false, raise an Error']]		raise: Error		description: 'a Block argument is not allowed. If it were, answer would be false'.! !