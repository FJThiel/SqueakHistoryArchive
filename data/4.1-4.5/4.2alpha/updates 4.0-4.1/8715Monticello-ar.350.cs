"Change Set:		8715Monticello-ar.350Monticello-ar.350:Making traits unloadable: Slight change to Monticello class creation to function correctly in the absence of traits.Monticello-nice.349:Remove an assigment to a block argument"!!MCClassDefinition methodsFor: 'installing' stamp: 'ar 1/1/2010 16:25'!createClass	| superClass class composition |	superClass := Smalltalk at: superclassName.	class := (ClassBuilder new)			name: name 			inEnvironment: superClass environment 			subclassOf: superClass			type: type 			instanceVariableNames: self instanceVariablesString 			classVariableNames: self classVariablesString 			poolDictionaries: self sharedPoolsString			category: category.	"The following is written to support traits unloading"	composition := Compiler evaluate: (self traitComposition ifNil:['{}']).	(composition isEmpty and:[class traitComposition isEmpty]) ifFalse:[		class setTraitComposition: composition asTraitComposition.	].	composition := Compiler evaluate: (self classTraitComposition ifNil:['{}']).	(composition isEmpty and:[class class traitComposition isEmpty]) ifFalse:[		class class setTraitComposition: composition asTraitComposition.	].	^class! !!MCMczReader methodsFor: 'as yet unclassified' stamp: 'nice 12/28/2009 16:07'!associate: tokens	| result |	result := Dictionary new.	tokens pairsDo: [:key :value | 					result at: key put: (value isString						ifTrue: [value]						ifFalse: [value collect: [:ea | self associate: ea]])].	^ result! !