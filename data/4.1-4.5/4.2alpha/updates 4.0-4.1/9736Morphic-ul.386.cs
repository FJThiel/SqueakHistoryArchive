"Change Set:		9736Morphic-ul.386Morphic-ul.386:- don't use SequenceableCollection >> #reverseMorphic-cmm.384:- Factored #addMenuItem: out of Morph>>#addItem: so clients can add alternatives to MenuItemMorph's to menus.- Third-party applications are now allowed to handle the drop of a TransferMorph directly on to the desktop.  By specifying a #transferMorphConverter for the World to answer the Morph to be dropped, transferMorphs can be be accepted directly onto the desktop.  This is crucial for integration of Squeak's browsers into alternative IDE's like Maui.Morphic-nice.385:Let add: answer the added object argument."!Morph subclass: #TransferMorph	instanceVariableNames: 'transferType passenger draggedMorph source dropNotifyRecipient resultRecipient copy'	classVariableNames: 'CopyPlusIcon'	poolDictionaries: ''	category: 'Morphic-Support'!!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'cmm 3/11/2010 22:07'!transferMorphConverter: aMessageSend 	self		setProperty: #transferMorphConverter		toValue: aMessageSend! !!TransferMorph methodsFor: 'dropping/grabbing' stamp: 'cmm 3/11/2010 22:10'!morphToDropInPasteUp: aPasteUpMorph	^ aPasteUpMorph morphToDropForTransferMorph: self! !!Morph methodsFor: 'dropping/grabbing' stamp: 'cmm 3/11/2010 21:40'!morphToDropInPasteUp: aPasteUp	^ self! !!MorphicAlarmQueue methodsFor: 'adding' stamp: 'nice 3/20/2010 08:01'!add: aMorphicAlarm	(sequenceNumber := sequenceNumber + 1) == 16r3FFFFFFF ifTrue: [		"Sequence number overflow... reassign sequence numbers starting at 0."		| alarmList |		alarmList := self asArray sort: [:msg1 :msg2 |			 msg1 sequenceNumber < msg2 sequenceNumber		].		alarmList withIndexDo: [:msg :ind | msg sequenceNumber: ind-1].		"The #bitAnd: for the unlikely event that we have > 16r3FFFFFF messages in the queue."		sequenceNumber := alarmList last sequenceNumber + 1 bitAnd: 16r3FFFFFFF.	].	aMorphicAlarm sequenceNumber: sequenceNumber.	super add: aMorphicAlarm.		"If we doubt our sanity..."	false ifTrue: [		self isValidHeap ifFalse: [self error: 'not a valid heap!!!!!!'].	].	^aMorphicAlarm! !!MenuMorph methodsFor: 'construction' stamp: 'cmm 3/9/2010 09:40'!addMenuItem: aMenuItemMorph	self addMorphBack: aMenuItemMorph! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'cmm 3/11/2010 22:50'!resetTransferMorphConverter	^ self transferMorphConverter: #yourself! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'cmm 3/11/2010 22:43'!transferMorphConverter	^self		valueOfProperty: #transferMorphConverter		ifAbsent: [ #yourself ]! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'cmm 3/11/2010 21:40'!morphToDropFrom: aMorph 	"Given a morph being carried by the hand, which the hand is about to drop, answer the actual morph to be deposited.  Normally this would be just the morph itself, but several unusual cases arise, which this method is designed to service."	| aNail representee handy posBlock |	handy := self primaryHand.	posBlock := 			[:z | | tempPos | 			tempPos := handy position 						- ((handy targetOffset - aMorph formerPosition) 								* (z extent / aMorph extent)) rounded.			self pointFromWorld: tempPos].	self alwaysShowThumbnail 		ifTrue: 			[aNail := aMorph 						representativeNoTallerThan: self maxHeightToAvoidThumbnailing						norWiderThan: self maximumThumbnailWidth						thumbnailHeight: self heightForThumbnails.			aNail == aMorph 				ifFalse: 					[aMorph formerPosition: aMorph position.					aNail position: (posBlock value: aNail)].			^aNail].	((aMorph isKindOf: MorphThumbnail) 		and: [(representee := aMorph morphRepresented) owner isNil]) 			ifTrue: 				[representee position: (posBlock value: representee).				^representee].	self showingListView 		ifTrue: 			[^aMorph 				listViewLineForFieldList: (self valueOfProperty: #fieldListSelectors)].	(aMorph hasProperty: #newPermanentScript) 		ifTrue: [^aMorph asEmptyPermanentScriptor].	((aMorph isPhraseTileMorph) or: [aMorph isSyntaxMorph]) 		ifFalse: [^aMorph morphToDropInPasteUp: self].	aMorph userScriptSelector isEmptyOrNil 		ifTrue: 			["non-user"			self automaticPhraseExpansion ifFalse: [^aMorph]].	^aMorph morphToDropInPasteUp: self! !!TransferMorph methodsFor: 'submorphs-add/remove' stamp: 'cmm 8/3/2004 11:05'!delete	"See also >>justDroppedInto:event:."	self changed: #deleted.	self breakDependents.	super delete! !!TransferMorph methodsFor: 'dropping/grabbing' stamp: 'cmm 3/11/2010 22:49'!wantsToBeDroppedInto: aMorph	^ aMorph isWorldMorph		ifTrue: [ aMorph hasTransferMorphConverter ]		ifFalse: [ super wantsToBeDroppedInto: aMorph ]! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'cmm 3/11/2010 22:42'!hasTransferMorphConverter	^ self transferMorphConverter ~= #yourself! !!PasteUpMorph methodsFor: 'dropping/grabbing' stamp: 'cmm 3/11/2010 22:41'!morphToDropForTransferMorph: aTransferMorph 	"aTransferMorph has been dragged directly onto the desktop.  TransferMorphs, by nature, are about transferring a 'logical object' from another source. Answer the Morph that should actually be dropped on to the desktop."	^ self		perform: self transferMorphConverter		with: aTransferMorph! !!TransferMorph methodsFor: 'initialization' stamp: 'cmm 8/3/2004 11:05'!initialize	"initialize the state of the receiver"	super initialize.	self layoutPolicy: TableLayout new.	self listDirection: #leftToRight;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		layoutInset: 3;		wrapCentering: #center;		cellPositioning: #leftCenter.	copy := false.	self on: #keyStroke send: #keyStroke: to: self! !!MenuMorph methodsFor: 'accessing' stamp: 'ul 3/21/2010 17:48'!lastItem		submorphs reverseDo: [ :each |		(each isKindOf: MenuItemMorph) ifTrue: [ ^each ] ].	^submorphs last! !!TransferMorph methodsFor: 'dropping/grabbing' stamp: 'cmm 3/11/2010 22:59'!justDroppedInto: targetMorph event: anEvent 	"If only world wants this TransferMorph, treat it as unaccepted (see also >>delete)."	super		justDroppedInto: targetMorph		event: anEvent.	self animationForMoveSuccess: true.	self delete! !!MenuMorph methodsFor: 'construction' stamp: 'cmm 3/9/2010 09:40'!addItem: aBlock	| item |	item := MenuItemMorph new.	aBlock value: item.	self addMenuItem: item! !