"Change Set:		7813KernelTests-nice.96KernelTests-nice.96:Tests for nan comparison from http://bugs.squeak.org/view.php?id=6719KernelTests-nice.93:Add some tests for #printShowingDecimalPlaces:This is essentially http://bugs.squeak.org/view.php?id=5640(and its duplicates)KernelTests-nice.94:Test for http://bugs.squeak.org/view.php?id=6695Float storeStringBase: does not store the radixSince Integer and Fraction do store the radix, no reason to differ...KernelTests-ar.95:Add tests for ensuring that delays raise errors when they are scheduled multiple times."!!FloatTest methodsFor: 'printing' stamp: 'nice 9/25/2007 01:22'!testStoreBase16	"This bug was reported in mantis http://bugs.squeak.org/view.php?id=6695"	self		assert: (20.0 storeStringBase: 16) = '16r14.0'		description: 'the radix prefix should not be omitted'! !!FloatTest methodsFor: 'NaN behavior' stamp: 'nice 10/11/2007 00:09'!testNaNCompare	"IEEE 754 states that NaN cannot be ordered.	As a consequence, every arithmetic comparison involving a NaN SHOULD return false.	Except the is different test (~=).	This test does verify this rule"		| compareSelectors theNaN anotherNaN comparand brokenMethods warningMessage |	compareSelectors := #(#< #<= #> #>= #=).	theNaN := Float nan.	anotherNaN := Float infinity - Float infinity.	comparand := {1. 2.3. Float infinity. 2/3. 1.25s2. 2 raisedTo: 50}.	comparand := comparand , (comparand collect: [:e | e negated]).	comparand := comparand , {theNaN. anotherNaN}."do a first pass to collect all broken methods"	brokenMethods := Set new.	comparand do: [:comp |		compareSelectors do: [:op |			(theNaN perform: op with: comp) ifTrue: [brokenMethods add: (theNaN class lookupSelector: op)].			(comp perform: op with: theNaN) ifTrue: [brokenMethods add: (comp class lookupSelector: op)]].		(theNaN ~= comp) ifFalse: [brokenMethods add: (theNaN class lookupSelector: #~=)].		(comp ~= theNaN) ifFalse: [brokenMethods add: (comp class lookupSelector: #~=)]].	"build a warning message to tell about all broken methods at once"	warningMessage := String streamContents: [:s |			s nextPutAll: 'According to IEEE 754 comparing with a NaN should always return false, except ~= that should return true.'; cr.			s nextPutAll: 'All these methods failed to do so. They are either broken or call a broken one'.			brokenMethods do: [:e | s cr; print: e methodClass; nextPutAll: '>>'; print: e selector]].		"Redo the tests so as to eventually open a debugger on one of the failures"	brokenMethods := Set new.	comparand do: [:comp2 |		compareSelectors do: [:op2 |			self deny: (theNaN perform: op2 with: comp2) description: warningMessage.			self deny: (comp2 perform: op2 with: theNaN) description: warningMessage].		self assert: (theNaN ~= comp2) description: warningMessage.		self assert: (comp2 ~= theNaN) description: warningMessage].! !!NumberTest methodsFor: 'tests' stamp: 'nice 3/24/2008 16:50'!testPrintShowingDecimalPlaces2	"This tests problems related to Float>>rounded and Float>>roundTo::	- Float>>#rounded is inexact	- Float>>#roundTo: might overflow"	"5000000000000001.0 asTrueFraction = 5000000000000001.	5000000000000001 highBit = 53.	This number is represented exactly asFloat, it should print exactly"	self assert: (5000000000000001.0 printShowingDecimalPlaces: 0) = '5000000000000001'.		"50000000000001.25 asTrueFraction = (200000000000005/4).	200000000000005 highBit = 48, 4 isPowerOfTwo,	So this number is also represented exactly as Float, it should print exactly.	Beware: (50000000000001.25 / 0.01) rounded exhibit the same problem as above."	self assert: (50000000000001.25 printShowingDecimalPlaces: 2) = '50000000000001.25'.		"This number is close to maximum float value"	self shouldnt: [1.0e306 printShowingDecimalPlaces: 3] raise: Error.! !!DelayTest methodsFor: 'testing-limits' stamp: 'ar 9/21/2009 22:14'!testMultiProcessWaitOnSameDelay	"Ensure that waiting on the same delay from multiple processes raises an error"	| delay p1 p2 wasRun |	delay := Delay forSeconds: 1.	wasRun := false.	p1 := [delay wait] forkAt: Processor activePriority+1.	p2 := [		self should:[delay wait] raise: Error.		wasRun := true.	] forkAt: Processor activePriority+1.	p1 terminate.	p2 terminate.	self assert: wasRun.! !!NumberTest methodsFor: 'tests' stamp: 'nice 4/24/2008 00:58'!testPrintShowingDecimalPlaces3	"This problem were reported at http://bugs.squeak.org/view.php?id=7028	unfortunate inversion of left / right padding"	self assert: (1.009 printShowingDecimalPlaces: 3) = '1.009'.	self assert: (35.900 printShowingDecimalPlaces: 3) = '35.900'.	self assert: (-0.097 printShowingDecimalPlaces: 3) = '-0.097'.! !!DelayTest methodsFor: 'testing-limits' stamp: 'ar 9/21/2009 22:12'!testMultiSchedule	"Ensure that scheduling the same delay twice raises an error"	| delay |	delay := Delay forSeconds: 1.	delay schedule.	self should:[delay schedule] raise: Error.! !