"Change Set:		8973CollectionsTests-ul.141CollectionsTests-ul.141:- bugfixCollectionsTests-ul.139:- some tests for WeakRegistryCollectionsTests-ul.140:- two more tests for WeakRegistry"!ClassTestCase subclass: #WeakRegistryTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CollectionsTests-Weak'!!WeakRegistryTest methodsFor: 'as yet unclassified' stamp: 'ul 2/5/2010 01:39'!testRemovingDoesntLeak	| w finalized block hash object executor |	w := WeakRegistry new: 1.	finalized := false.	block := [ :v | finalized := v ].	object := Object new.	executor := ObjectFinalizer new		receiver: block		selector: #value:		argument: true;		yourself.	hash := object hash.	w add: hash.	w add: object executor: executor.	object := nil. "let it go"	w remove: hash.	Smalltalk garbageCollect. "finalize it"	self assert: w isEmpty.	self assert: finalized! !!WeakRegistryTest methodsFor: 'as yet unclassified' stamp: 'ul 2/5/2010 04:32'!testRemovingByAHighPriorityProcessDoesntLeak	| w finalized block hash object executor semaphore |	w := WeakRegistry new: 1.	finalized := false.	block := [ :v | finalized := v ].	object := Object new.	executor := ObjectFinalizer new		receiver: block		selector: #value:		argument: true;		yourself.	hash := object hash.	w add: hash.	w add: object executor: executor.	semaphore := Semaphore new.	[ 		object := nil. "let it go"		w remove: hash.		semaphore signal ] 			forkAt: WeakArray runningFinalizationProcess priority + 1.	semaphore wait.	Smalltalk garbageCollect. "finalize it"	self assert: w isEmpty.	self assert: finalized! !!WeakRegistryTest methodsFor: 'as yet unclassified' stamp: 'ul 2/4/2010 00:43'!testGrowingByAHighPriorityProcessDoesntLeak	| w finalized block object executor semaphore |	w := WeakRegistry new: 1.	finalized := false.	block := [ :v | finalized := v ].	object := Object new.	executor := ObjectFinalizer new		receiver: block		selector: #value:		argument: true;		yourself.	w add: object executor: executor.	semaphore := Semaphore new.	[ 		object := nil. "let it go"		w addAll: (1 to: 1000). "force growing"		semaphore signal ] 			forkAt: WeakArray runningFinalizationProcess priority + 1.	semaphore wait.	Smalltalk garbageCollect. "finalize it"	self assert: w size = 1000.	self assert: finalized! !!WeakRegistryTest methodsFor: 'as yet unclassified' stamp: 'ul 2/4/2010 00:43'!testFinalization	| w finalized block object |	w := WeakRegistry new: 1.	finalized := false.	block := [ :v | finalized := v ].	object := ObjectFinalizer new "an object that responds to #finalize"		receiver: block		selector: #value:		argument: true;		yourself.	w add: object.	object := nil. "let it go"	Smalltalk garbageCollect. "finalize it"	self assert: w isEmpty.	self assert: finalized! !!WeakRegistryTest methodsFor: 'as yet unclassified' stamp: 'ul 2/4/2010 00:43'!testGrowingDoesntLeak	| w finalized block object executor |	w := WeakRegistry new: 1.	finalized := false.	block := [ :v | finalized := v ].	object := Object new.	executor := ObjectFinalizer new		receiver: block		selector: #value:		argument: true;		yourself.	w add: object executor: executor.	object := nil. "let it go"	w addAll: (1 to: 1000). "force growing"	Smalltalk garbageCollect. "finalize it"	self assert: w size = 1000.	self assert: finalized! !