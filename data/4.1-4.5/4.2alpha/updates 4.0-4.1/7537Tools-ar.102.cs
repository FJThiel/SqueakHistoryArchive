"Change Set:		7537Tools-ar.102Tools-ar.102:Push optional buttons and annotation pane down to CodeHolder. This avoids ugly appearance of users of (StringHolder new contents: '') openLabel: 'Title'.Tools-ar.96:Closure fallout: With closures, all object enumeration must have a definitive end marker since enumeration will almost always create new contexts from block activations.Tools-ar.97:A *serious* round of toolbuildering the tools. This removes a load of methods for constructing the interfaces and replaces them by ToolBuilder specs and interface construction. Does not only help to reduce the dependencies between tools and particular ui frameworks but also helps to make tools available for MVC that previously werent (like Lexicon etc). Some fixups in other packages still coming up...Tools-ar.98:Put two methods back that were still in use and cause no harm.Tools-ar.99:ToolBuilder refactoring. Better structured construction of the various pieces. Also puts back DnD support in the browser and removes another bunch of Morphic idiosynchracies that were introduced for DnD support.Tools-ar.100:Annotation panes are back. As an experiment, they are now at the bottom and also show the one-line preview of the class comment when a class is selected.Tools-ar.101:Fix coloring of inheritance button. Remove extra switches in hierarchy browser."!MessageSet subclass: #MessageNames	instanceVariableNames: 'searchString selectorList selectorListIndex searchPane'	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-Browser'!!FileContentsBrowser methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 11:28'!buildInfoViewWith: builder	| textSpec |	textSpec := builder pluggableTextSpec new.	textSpec 		model: self;		getText: #infoViewContents.	^textSpec! !!Debugger methodsFor: 'toolbuilder' stamp: 'ar 8/7/2009 23:01'!buildNotifierWith: builder label: label message: messageString	| windowSpec listSpec textSpec panelSpec buttonSpec |	windowSpec := builder pluggableWindowSpec new.	windowSpec model: self.	windowSpec extent: 450 @ 156. "nice and wide to show plenty of the error msg"	windowSpec label: label.	windowSpec children: OrderedCollection new.	panelSpec := builder pluggablePanelSpec new.	panelSpec children: OrderedCollection new.	self preDebugButtonQuads do:[:spec|		buttonSpec := builder pluggableButtonSpec new.		buttonSpec model: self.		buttonSpec label: spec first.		buttonSpec action: spec second.		buttonSpec help: spec fourth.		panelSpec children add: buttonSpec.	].	panelSpec layout: #horizontal. "buttons"	panelSpec frame: (0@0 corner: 1@0.2).	windowSpec children add: panelSpec.	Preferences eToyFriendly | messageString notNil ifFalse:[		listSpec := builder pluggableListSpec new.		listSpec 			model: self;			list: #contextStackList; 			getIndex: #contextStackIndex; 			setIndex: #debugAt:; 			frame: (0@0.2 corner: 1@1).		windowSpec children add: listSpec.	] ifTrue:[		textSpec := builder pluggableTextSpec new.		textSpec 			model: self;			getText: #preDebugMessageString; 			setText: nil; 			selection: nil; 			menu: #debugProceedMenu:;			frame: (0@0.2corner: 1@1).		windowSpec children add: textSpec.	].	^windowSpec! !!Browser methodsFor: 'initialize-release' stamp: 'ar 8/8/2009 17:05'!openMessageCatEditString: aString        "Create a pluggable version of the views for a Browser that just shows one message category."	"Example: 		Preferences browseThemes.	" 	| builder max |	builder := ToolBuilder default.	max := self wantsOptionalButtons ifTrue:[0.32] ifFalse:[0.4].	^self buildWindowWith: builder specs: {		(0@0 corner: 1.0@0.08) -> [self buildMessageListCatSingletonWith: builder].		(0.0@0.08 corner: 1.0@max) -> [self buildMessageListWith: builder].		(0@max corner: 1@1) -> [self buildCodePaneWith: builder].	}.! !!Browser methodsFor: 'drag and drop' stamp: 'ar 8/8/2009 10:16'!dropOnSystemCategories: aClass at: index	| category |	(aClass isBehavior) ifFalse:[^self inform: 'Can only drop classes'].	category := self systemCategoryList at: index.	self selectedEnvironment organization classify: aClass instanceSide name  under: category.	^true! !!ChangedMessageSet class methodsFor: 'as yet unclassified' stamp: 'ar 8/7/2009 21:42'!openMessageList: messageList name: labelString autoSelect: autoSelectString changeSet: aChangeSet	| messageSet |	messageSet := self messageList: messageList.	messageSet changeSet: aChangeSet.	messageSet autoSelectString: autoSelectString.	ToolBuilder open: messageSet label: labelString.! !!Inspector class methodsFor: 'instance creation' stamp: 'ar 8/7/2009 23:43'!openOn: anObject withEvalPane: withEval withLabel: label        ^ToolBuilder open: (self inspect: anObject) label: label! !!MessageNames methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 11:40'!buildSelectorListWith: builder	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 		model: self;		list: #selectorList; 		getIndex: #selectorListIndex; 		setIndex: #selectorListIndex:; 		menu: #selectorListMenu:; 		keyPress: #selectorListKey:from:.	^listSpec! !!Debugger methodsFor: 'initialize' stamp: 'ar 8/7/2009 22:53'!openFullNoSuspendLabel: aString	"Create and schedule a full debugger with the given label. Do not terminate the current active process."	| oldContextStackIndex |	oldContextStackIndex := contextStackIndex.	self expandStack. "Sets contextStackIndex to zero."	ToolBuilder open: self label: aString.	self toggleContextStackIndex: oldContextStackIndex.! !!TheWorldMenu methodsFor: '*Tools' stamp: 'ar 8/7/2009 22:21'!openSelectorBrowser	ToolBuilder open: SelectorBrowser new! !!Browser methodsFor: 'drag and drop' stamp: 'ar 8/8/2009 10:06'!wantsMessageCategoriesDrop: anObject	"Only accept drops of compiled methods on system categories"	^anObject isKindOf: CompiledMethod! !!ProcessBrowser class methodsFor: 'instance creation' stamp: 'ar 8/7/2009 22:23'!open	"ProcessBrowser open"	"Create and schedule a ProcessBrowser."	Smalltalk garbageCollect.	^ToolBuilder open: self new! !!Browser methodsFor: 'drag and drop' stamp: 'ar 8/8/2009 09:56'!dropOnMessageCategories: method at: index	| dstClass category |	(method isKindOf: CompiledMethod) 		ifFalse:[^self inform: 'Can only drop methods'].	dstClass := self selectedClassOrMetaClass.	(dstClass == method methodClass) ifTrue:[		category := self messageCategoryList at: index.		dstClass organization classify: method selector  under: category.		^true].	^self inform: 'Cannot move methods between unrelated classes'! !!Inspector methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 11:51'!buildCodePaneWith: builder	| textSpec |	textSpec := builder pluggableTextSpec new.	textSpec 		model: self;		getText: #trash; 		setText: #trash:; 		selection: #contentsSelection; 		menu: #codePaneMenu:shifted:.	^textSpec! !!MessageSet class methodsFor: 'instance creation' stamp: 'ar 8/7/2009 21:42'!open: aMessageSet name: aString 	"Create a standard system view for the messageSet, aMessageSet, whose label is aString."	^ToolBuilder open: aMessageSet label: aString! !!MessageNames class methodsFor: 'instance creation' stamp: 'ar 8/7/2009 22:10'!openMessageNames	"Open a new instance of the receiver in the active world"	^ToolBuilder open: self new label: 'Message Names' 	"MessageNames openMessageNames"! !!Browser methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 10:49'!buildSystemCategoryListWith: builder	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 		model: self;		list: #systemCategoryList; 		getIndex: #systemCategoryListIndex; 		setIndex: #systemCategoryListIndex:; 		menu: #systemCategoryMenu:; 		keyPress: #systemCatListKey:from:.	Preferences browseWithDragNDrop ifTrue:[		listSpec			dropAccept: #wantsSystemCategoriesDrop:;			dropItem: #dropOnSystemCategories:at:].	^listSpec! !!Browser methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 10:29'!buildMessageListCatSingletonWith: builder	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 		model: self;		list: #messageCatListSingleton; 		getIndex: #indexIsOne; 		setIndex: #indexIsOne:; 		menu: #messageCategoryMenu:.	^listSpec! !!PackagePaneBrowser methodsFor: 'initialize-release' stamp: 'ar 8/8/2009 17:10'!buildPackageListWith: builder	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 		model: self;		list: #packageList; 		getIndex: #packageListIndex; 		setIndex: #packageListIndex:; 		menu: #packageMenu:; 		keyPress: #packageListKey:from:.	^listSpec! !!Browser methodsFor: 'annotation' stamp: 'ar 8/8/2009 17:04'!annotation	"Provide a line of content for an annotation pane, representing information about the method associated with the selected class and selector in the receiver."	|  aSelector aClass |	(aClass := self selectedClassOrMetaClass) == nil ifTrue: [^ ''].	self editSelection == #editComment ifTrue:		[^ self annotationForSelector: #Comment ofClass: aClass].	self editSelection == #editClass ifTrue:		[^ self annotationForSelector: #Definition ofClass: aClass].	(aSelector := self selectedMessageName) ifNil: [^ ''].	^ self annotationForSelector: aSelector ofClass: aClass! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'ar 8/7/2009 22:23'!openChangeSetBrowser	"Open a ChangeSet browser on the current change set"	ToolBuilder open: (ChangeSetBrowser new myChangeSet: myChangeSet)! !!Browser methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 10:56'!buildSystemCatListSingletonWith: builder	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 		model: self;		list: #systemCategorySingleton; 		getIndex: #indexIsOne; 		setIndex: #indexIsOne:; 		menu: #systemCategoryMenu:; 		keyPress: #systemCatSingletonKey:from:.	^listSpec! !!MessageNames methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 17:07'!buildWith: builder	"ToolBuilder open: MessageNames new"	| windowSpec max buttonSpec result |	max := self wantsOptionalButtons ifTrue:[0.42] ifFalse:[0.5].	windowSpec := self buildWindowWith: builder specs: {		(0.15@0 corner: 0.5@0.08) -> [self buildSearchPaneWith: builder].		(0@0.08 corner: 0.5@max) -> [self buildSelectorListWith: builder].		(0.5@0.0 corner: 1.0@max) -> [self buildMessageListWith: builder].		(0@max corner: 1@1) -> [self buildCodePaneWith: builder].	}.	buttonSpec := builder pluggableActionButtonSpec new.	buttonSpec 		model: self;		label: 'Search';		action: [self doSearchFrom: searchPane];		frame: (0.0@0 corner: 0.15@0.08).	windowSpec children add: buttonSpec.	result := builder build: windowSpec.	searchPane := builder widgetAt: #search.	^result! !!StringHolder methodsFor: '*Tools-traits' stamp: 'ar 8/7/2009 23:26'!browseFullProtocol	"Open up a protocol-category browser on the value of the receiver's current selection.    If in mvc, an old-style protocol browser is opened instead.  Someone who still uses mvc might wish to make the protocol-category-browser work there too, thanks."	| aClass |	(Smalltalk isMorphic and: [Smalltalk includesKey: #Lexicon]) ifFalse: [^ self spawnFullProtocol].	((aClass := self selectedClassOrMetaClass) notNil and: [aClass isTrait not]) ifTrue:		[(Smalltalk at: #Lexicon) new openOnClass: aClass showingSelector: self selectedMessageName]! !!SelectorBrowser class methodsFor: 'instance creation' stamp: 'ar 8/7/2009 22:20'!prototypicalToolWindow	"Answer an example of myself seen in a tool window, for the benefit of parts-launching tools"	| aWindow |	aWindow := ToolBuilder build: self new.	aWindow setLabel: 'Selector Browser'.	aWindow applyModelExtent.	^ aWindow! !!PackagePaneBrowser class methodsFor: 'instance creation' stamp: 'ar 8/7/2009 21:04'!prototypicalToolWindow	"Answer an example of myself seen in a tool window, for the benefit of parts-launching tools"	| aWindow |	aWindow := self new openEditString: nil.	^ ToolBuilder build: aWindow! !!InstanceBrowser methodsFor: 'initialization' stamp: 'ar 8/7/2009 23:26'!openOnObject: anObject showingSelector: aSelector	"Create and open a SystemWindow to house the receiver, showing the categories pane."	objectViewed := anObject.	self openOnClass: anObject class showingSelector: aSelector! !!Browser methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 10:40'!addClassAndSwitchesTo: windowSpec at: frame with: builder	| listSpec panelSpec |	listSpec := self buildClassListWith: builder.	listSpec frame: (frame origin corner: frame right @ (frame bottom - 0.1)).	windowSpec children add: listSpec.	panelSpec := self buildSwitchesWith: builder.	panelSpec frame: (frame left@(frame bottom - 0.1) corner: frame corner).	windowSpec children addLast: panelSpec.! !!ChangeList methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 17:06'!buildWith: builder multiSelect: multiSelect 	"Open a morphic view for the messageSet, whose label is labelString. 	The listView may be either single or multiple selection type"	| windowSpec max |	max := self wantsOptionalButtons ifTrue:[0.33] ifFalse:[0.4].	windowSpec := self buildWindowWith: builder specs: {		(0@0 corner: 1@max) -> [self buildChangeListWith: builder multiSelect: multiSelect].		(0@max corner: 1@1) -> [self buildCodePaneWith: builder].	}.	^builder build: windowSpec! !!Inspector methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 11:47'!buildFieldListWith: builder	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 		model: self;		list: #fieldList; 		getIndex: #selectionIndex; 		setIndex: #toggleIndex:; 		menu: #fieldListMenu:; 		keyPress: #inspectorKey:from:.	^listSpec! !!Browser class methodsFor: 'instance creation' stamp: 'ar 8/7/2009 21:03'!prototypicalToolWindow	"Answer an example of myself seen in a tool window, for the benefit of parts-launching tools"	| aWindow |	aWindow := self new openEditString: nil.	^ ToolBuilder build: aWindow! !!MessageSet class methodsFor: 'instance creation' stamp: 'ar 8/7/2009 21:43'!openMessageList: messageList name: labelString autoSelect: autoSelectString	"Open a system view for a MessageSet on messageList. 	 1/24/96 sw: the there-are-no msg now supplied by my sender"	| messageSet |	messageSet := self messageList: messageList.	messageSet autoSelectString: autoSelectString.	^ToolBuilder open: messageSet label: labelString! !!ChangeSorter class methodsFor: 'browse' stamp: 'ar 8/7/2009 22:19'!prototypicalToolWindow	"Answer a window representing a prototypical instance of the receiver"	^ToolBuilder build: self new! !!MessageNames class methodsFor: 'instance creation' stamp: 'ar 8/7/2009 22:09'!methodBrowserSearchingFor: searchString	"Answer an method-browser window whose search-string is initially as indicated"	| aWindow |	aWindow := self new searchString: searchString.	^ToolBuilder default build: aWindow! !!FileContentsBrowser methodsFor: 'creation' stamp: 'ar 8/7/2009 21:24'!createViews	"Create a pluggable version of all the views for a Browser, including views and controllers."	contentsSymbol := self defaultDiffsSymbol.  "#showDiffs or #prettyDiffs"	^self buildWith: ToolBuilder default! !!Browser methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 10:53'!buildClassListWith: builder	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 		model: self;		list: #classList; 		getIndex: #classListIndex; 		setIndex: #classListIndex:; 		menu: #classListMenu:; 		keyPress: #classListKey:from:.	Preferences browseWithDragNDrop 		ifTrue:[listSpec dragItem: #dragFromClassList:].	^listSpec! !!Browser methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 17:05'!buildWith: builder	"Create the ui for the browser"	| windowSpec max |	max := self wantsOptionalButtons ifTrue:[0.42] ifFalse:[0.5].	windowSpec := self buildWindowWith: builder specs: {		(0@0 corner: 0.25@max) -> [self buildSystemCategoryListWith: builder].		(0.25@0 corner: 0.5@(max-0.1)) -> [self buildClassListWith: builder].		(0.25@(max-0.1) corner: 0.5@max) -> [self buildSwitchesWith: builder].		(0.5@0 corner: 0.75@max) -> [self buildMessageCategoryListWith: builder].		(0.75@0 corner: 1@max) -> [self buildMessageListWith: builder].		(0@max corner: 1@1) -> [self buildCodePaneWith: builder].	}.	^builder build: windowSpec! !!Lexicon methodsFor: 'initialization' stamp: 'ar 8/7/2009 23:24'!openOnClass: aTargetClass showingSelector: aSelector	currentVocabulary ifNil: [currentVocabulary := Vocabulary fullVocabulary].	targetClass := aTargetClass.	self initialLimitClass.		self reformulateCategoryList.	ToolBuilder open: self.	self adjustWindowTitle.! !!Browser class methodsFor: 'instance creation' stamp: 'ar 8/7/2009 20:03'!openBrowserView: aBrowserView label: aString 	"Schedule aBrowserView, labelling the view aString."(aBrowserView isKindOf: ToolBuilderSpec) ifTrue:[	ToolBuilder open: aBrowserView label: aString.] ifFalse:[	aBrowserView isMorph		ifTrue:  [(aBrowserView setLabel: aString) openInWorld]		ifFalse: [aBrowserView label: aString.				aBrowserView minimumSize: 300 @ 200.				aBrowserView subViews do: [:each | each controller].				aBrowserView controller open].].	^ aBrowserView model! !!Lexicon methodsFor: 'initialization' stamp: 'ar 8/8/2009 11:44'!buildCategoryListWith: builder	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 		model: self;		list: #categoryList; 		getIndex: #categoryListIndex; 		setIndex: #categoryListIndex:; 		menu: #categoryMenu:; 		keyPress: #categoryListKey:from:.	^listSpec! !!CodeHolder methodsFor: 'annotation' stamp: 'ar 8/8/2009 17:20'!annotation	"Provide a line of content for an annotation pane, representing information about the method associated with the selected class and selector in the receiver."	|  aSelector aClass |	((aSelector := self selectedMessageName) == nil or: [(aClass := self selectedClassOrMetaClass) == nil]) ifTrue: [^ ''].	^ self annotationForSelector: aSelector ofClass: aClass! !!MessageSet methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 17:08'!buildWith: builder	| windowSpec max |	self wantsOptionalButtons ifTrue:[max := 0.3] ifFalse:[max := 0.3].	windowSpec := self buildWindowWith: builder specs: {		(0@0 corner: 1@max) -> [self buildMessageListWith: builder].		(0@max corner: 1@1) -> [self buildCodePaneWith: builder].	}.	^builder build: windowSpec! !!Browser methodsFor: 'initialize-release' stamp: 'ar 8/8/2009 17:37'!openSystemCatEditString: aString	"Create a pluggable version of all the views for a Browser, including views and controllers.  The top list view is of the currently selected system class category--a single item list."	"Example:		Browser new browseAllClasses.	"	| builder max |	builder := ToolBuilder default.	max := self wantsOptionalButtons ifTrue:[0.32] ifFalse:[0.4].	^self buildWindowWith: builder specs: {		(0@0 corner: 1.0@0.08) -> [self buildSystemCatListSingletonWith: builder].		(0.0@0.08 corner: 0.333@(max-0.1)) -> [self buildClassListWith: builder].		(0.0@(max-0.1) corner: 0.333@max) -> [self buildSwitchesWith: builder].		(0.333@0.08 corner: 0.666@max) -> [self buildMessageCategoryListWith: builder].		(0.666@0.08 corner: 1@max) -> [self buildMessageListWith: builder].		(0@max corner: 1@1) -> [self buildCodePaneWith: builder].	}! !!SelectorBrowser methodsFor: 'as yet unclassified' stamp: 'ar 8/7/2009 22:24'!open	"Create a Browser that lets you type part of a selector, shows a list of selectors,	shows the classes of the one you chose, and spwns a full browser on it.		SelectorBrowser new open	"	^ToolBuilder open: self! !!ChangeList methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 11:03'!buildChangeListWith: builder multiSelect: multiSelect	| listSpec |	multiSelect ifTrue:[		listSpec := builder pluggableMultiSelectionListSpec new.		listSpec getSelectionList: #listSelectionAt:.		listSpec setSelectionList: #listSelectionAt:put:.	] ifFalse:[		listSpec := builder pluggableListSpec new.	].	listSpec 		model: self;		list: #list; 		getIndex: #listIndex; 		setIndex: #toggleListIndex:; 		menu: (self showsVersions ifTrue: [#versionsMenu:] ifFalse: [#changeListMenu:]); 		keyPress: #changeListKey:from:.	^listSpec! !!Browser methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 10:40'!buildSwitchesWith: builder	"Build the instance/comment/class switch"	| panelSpec buttonSpec |	panelSpec := builder pluggablePanelSpec new.	panelSpec children: OrderedCollection new.	buttonSpec := builder pluggableButtonSpec new.	buttonSpec 			model: self;			label: 'instance'; 			state: #instanceMessagesIndicated; 			action: #indicateInstanceMessages;			frame: (0@0 corner: 0.4@1).	panelSpec children addLast: buttonSpec.	buttonSpec := builder pluggableButtonSpec new.	buttonSpec 			model: self;			label: '?'; 			state: #classCommentIndicated; 			action: #plusButtonHit;			frame: (0.4@0 corner: 0.6@1).	panelSpec children addLast: buttonSpec.	buttonSpec := builder pluggableButtonSpec new.	buttonSpec 			model: self;			label: 'class'; 			state: #classMessagesIndicated; 			action: #indicateClassMessages;			frame: (0.6@0 corner: 1@1).	panelSpec children addLast: buttonSpec.	^panelSpec! !!StandardToolSet class methodsFor: 'menu' stamp: 'ar 8/7/2009 22:21'!openDualChangeSorter	ToolBuilder open: DualChangeSorter new! !!Debugger methodsFor: 'initialize' stamp: 'ar 8/7/2009 23:08'!optionalButtonPairs	"Actually, return triples.  Only the custom debugger-specific buttons are shown"	^ self customButtonSpecs! !!Debugger methodsFor: 'notifier menu' stamp: 'ar 8/7/2009 22:55'!debug	"Open a full DebuggerView."	| topView |	topView := self topView.	topView model: nil.  "so close won't release me."	self breakDependents.	ToolBuilder default close: topView.	^ self openFullNoSuspendLabel: topView label! !!StandardToolSet class methodsFor: 'menu' stamp: 'ar 8/7/2009 22:21'!openChangeSorter	ToolBuilder open: ChangeSorter new! !!PackagePaneBrowser methodsFor: 'initialize-release' stamp: 'ar 8/8/2009 17:13'!openEditString: aString        "Create a pluggable version of all the views for a Browser, including views and controllers."	"Example: 		PackagePaneBrowser fullOnClass: Browser.	"	| builder max |	builder := ToolBuilder default.	max := self wantsOptionalButtons ifTrue:[0.42] ifFalse:[0.5].	^self buildWindowWith: builder specs: {		(0@0 corner: 0.15@max) -> [self buildPackageListWith: builder].		(0.15@0 corner: 0.35@max) -> [self buildSystemCategoryListWith: builder].		(0.35@0 corner: 0.6@(max-0.1)) -> [self buildClassListWith: builder].		(0.35@(max-0.1) corner: 0.6@max) -> [self buildSwitchesWith: builder].		(0.6@0 corner: 0.75@max) -> [self buildMessageCategoryListWith: builder].		(0.75@0 corner: 1@max) -> [self buildMessageListWith: builder].		(0@max corner: 1@1) -> [self buildCodePaneWith: builder].	}! !!Workspace class methodsFor: 'instance creation' stamp: 'ar 8/7/2009 22:29'!prototypicalToolWindow	"Answer an example of myself seen in a tool window, for the benefit of parts-launching tools"	| aWorkspace |	aWorkspace := ToolBuilder build: self new.	^ aWorkspace! !!Browser methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 10:37'!buildClassListSingletonWith: builder	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 		model: self;		list: #classListSingleton; 		getIndex: #indexIsOne; 		setIndex: #indexIsOne:; 		menu: #classListMenu:; 		keyPress: #classListKey:from:.	^listSpec! !!Inspector methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 11:50'!buildWith: builder	"Inspector openOn: SystemOrganization"	| windowSpec |	windowSpec := self buildWindowWith: builder specs: {		(0@0 corner: 0.3@0.7)  -> [self buildFieldListWith: builder].		(0.3@0.0corner: 1@0.7) -> [self buildValuePaneWith: builder].		(0.0@0.7corner: 1@1) -> [self buildCodePaneWith: builder].	}.	^builder build: windowSpec! !!Browser methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 10:52'!buildMessageListWith: builder	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 		model: self;		list: #messageList; 		getIndex: #messageListIndex; 		setIndex: #messageListIndex:; 		menu: #messageListMenu:shifted:; 		keyPress: #messageListKey:from:.	Preferences browseWithDragNDrop 		ifTrue:[listSpec dragItem: #dragFromMessageList:].	^listSpec! !!MessageNames methodsFor: 'search' stamp: 'ar 8/7/2009 22:11'!searchString: aString	"Set the current searchString"	self searchString: aString notifying: nil! !!MessageNames methodsFor: 'search' stamp: 'ar 8/7/2009 22:11'!searchString: aString notifying: aController	"Take what the user typed and find all selectors containing it"	searchString := aString asString copyWithout: $ .	self containingWindow ifNotNil:[:w| w setLabel: 'Message names containing "', searchString asLowercase, '"'].	selectorList := nil.	self changed: #selectorList.	self changed: #messageList.	^ true! !!ChangeSorter methodsFor: 'creation' stamp: 'ar 8/7/2009 22:23'!open	"ChangeSorterPluggable new open"	^ToolBuilder open: self! !!Browser methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 10:51'!buildMessageCategoryListWith: builder	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 		model: self;		list: #messageCategoryList; 		getIndex: #messageCategoryListIndex; 		setIndex: #messageCategoryListIndex:; 		menu: #messageCategoryMenu:; 		keyPress: #arrowKey:from:.	Preferences browseWithDragNDrop ifTrue:[		listSpec			dropAccept: #wantsMessageCategoriesDrop:;			dropItem: #dropOnMessageCategories:at:].	^listSpec! !!TheWorldMenu methodsFor: '*Tools' stamp: 'ar 8/7/2009 22:21'!openChangeSorter2	ToolBuilder open: DualChangeSorter new! !!Debugger methodsFor: 'initialize' stamp: 'ar 8/7/2009 23:04'!openNotifierContents: msgString label: label	"Create and schedule a notifier view with the given label and message. A notifier view shows just the message or the first several lines of the stack, with a menu that allows the user to open a full debugger if so desired."	"NOTE: When this method returns, a new process has been scheduled to run the windows, and thus this notifier, but the previous active porcess has not been suspended.  The sender will do this."	| msg builder spec |	Sensor flushKeyboard.	savedCursor := Sensor currentCursor.	Sensor currentCursor: Cursor normal.	(label beginsWith: 'Space is low')		ifTrue: [msg := self lowSpaceChoices, (msgString ifNil: [''])]		ifFalse: [msg := msgString].	isolationHead ifNotNil:		["We have already revoked the isolation layer -- now jump to the parent project."		msg := self isolationRecoveryAdvice, msgString.		failedProject := Project current.		isolationHead parent enterForEmergencyRecovery].	builder := ToolBuilder default.	spec := self buildNotifierWith: builder label: label message: msg.	self expandStack.	builder open: spec.	errorWasInUIProcess := Project spawnNewProcessIfThisIsUI: interruptedProcess.! !!Debugger methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 17:18'!wantsAnnotationPane	"Annotations don't look good in debugger. Suppress 'em."	^false! !!Browser methodsFor: 'drag and drop' stamp: 'ar 8/8/2009 10:12'!dragFromMessageList: index	"Drag a method from the browser"	^self selectedClassOrMetaClass compiledMethodAt: (self messageList at: index) ifAbsent:[nil]! !!FileContentsBrowser methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 11:20'!buildSystemCategoryListWith: builder	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 			model: self;			list: #systemCategoryList; 			getIndex: #systemCategoryListIndex; 			setIndex: #systemCategoryListIndex:; 			menu: #packageListMenu:; 			keyPress: #packageListKey:from:.	^listSpec! !!Browser methodsFor: 'initialize-release' stamp: 'ar 8/8/2009 16:57'!openEditString: aString        "Create a pluggable version of all the views for a Browser, including views and controllers."	"Example: 		Browser fullOnClass: Browser.	"	| builder max |	builder := ToolBuilder default.	max := self wantsOptionalButtons ifTrue:[0.42] ifFalse:[0.5].	^self buildWindowWith: builder specs: {		(0@0 corner: 0.25@max) -> [self buildSystemCategoryListWith: builder].		(0.25@0 corner: 0.5@(max-0.1)) -> [self buildClassListWith: builder].		(0.25@(max-0.1) corner: 0.5@max) -> [self buildSwitchesWith: builder].		(0.5@0 corner: 0.75@max) -> [self buildMessageCategoryListWith: builder].		(0.75@0 corner: 1@max) -> [self buildMessageListWith: builder].		"(0@max corner: 1@0.5) -> [self buildOptionalButtonsWith: builder]."		(0@max corner: 1@1) -> [self buildCodePaneWith: builder].	}! !!StandardToolSet class methodsFor: 'menu' stamp: 'ar 8/7/2009 22:21'!openSelectorBrowser	ToolBuilder open: SelectorBrowser new! !!Inspector methodsFor: 'menu commands' stamp: 'ar 8/7/2009 23:27'!browseFullProtocol	"Open up a protocol-category browser on the value of the receiver's current selection.  If in mvc, an old-style protocol browser is opened instead."	| objectToRepresent |	Smalltalk isMorphic ifFalse: [^ self spawnProtocol].	objectToRepresent := self selectionIndex == 0 ifTrue: [object] ifFalse: [self selection].	InstanceBrowser new openOnObject: objectToRepresent showingSelector: nil! !!Lexicon methodsFor: 'initialization' stamp: 'ar 8/8/2009 00:30'!openOnClass: aTargetClass inWorld: ignored showingSelector: aSelector	^self openOnClass: aTargetClass showingSelector: aSelector! !!DualChangeSorter class methodsFor: 'opening' stamp: 'ar 8/7/2009 22:20'!prototypicalToolWindow	"Answer an example of myself seen in a tool window, for the benefit of parts-launching tools" 	^ ToolBuilder build: self new! !!FileContentsBrowser methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 11:19'!buildSystemCatListSingletonWith: builder	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 			model: self;			list: #systemCategorySingleton; 			getIndex: #indexIsOne; 			setIndex: #indexIsOne:; 			menu: #packageListMenu:; 			keyPress: #packageListKey:from:.	^listSpec! !!CodeHolder methodsFor: 'controls' stamp: 'ar 8/8/2009 17:44'!decorateButtons	"Change screen feedback for any buttons in the UI of the receiver that may wish it.  Initially, it is only the Inheritance button that is decorated, but one can imagine others."	self changed: #inheritanceButtonColor.! !!Workspace methodsFor: 'accessing' stamp: 'ar 8/8/2009 17:17'!wantsOptionalButtons	"We have no optional buttons (yet)"	^false! !!CodeHolder methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 23:46'!buildCodePaneWith: builder	| textSpec top buttonSpec annoSpec |	self wantsOptionalButtons ifTrue:[		top := builder pluggablePanelSpec new.		top children: OrderedCollection new.		buttonSpec := self buildOptionalButtonsWith: builder.		buttonSpec frame: (0@0 corner: 1@0.12).		top children add: buttonSpec.	].	textSpec := super buildCodePaneWith: builder.	self wantsAnnotationPane ifTrue:[		top ifNil:[			top := builder pluggablePanelSpec new.			top children: OrderedCollection new.		].		annoSpec := builder pluggableInputFieldSpec new.		annoSpec model: self; getText: #annotation. 		annoSpec frame: (0@0.88 corner: 1@1).		top children add: annoSpec.	].	top ifNotNil:[		textSpec frame: (0 @ (buttonSpec ifNil:[0] ifNotNil:[0.12])			corner: 1 @ (annoSpec ifNil:[1] ifNotNil:[0.88])).		top children add: textSpec.	].	^top ifNil:[textSpec]! !!Workspace methodsFor: 'accessing' stamp: 'ar 8/8/2009 17:17'!wantsAnnotationPane	"We have nothing to annotate"	^false! !!ChangeList class methodsFor: 'instance creation' stamp: 'ar 8/7/2009 22:17'!open: aChangeList name: aString multiSelect: multiSelect	"Create a standard system view for the messageSet, whose label is aString.	The listView may be either single or multiple selection type"	^ToolBuilder default open: aChangeList label: aString! !!InstanceBrowser methodsFor: 'initialization' stamp: 'ar 8/8/2009 00:31'!openOnObject: anObject inWorld: ignored showingSelector: aSelector	"Create and open a SystemWindow to house the receiver, showing the categories pane."	^self openOnObject: anObject showingSelector: aSelector! !!TheWorldMenu methodsFor: '*Tools' stamp: 'ar 8/7/2009 22:21'!openChangeSorter1	ToolBuilder open: ChangeSorter new! !!MessageNames methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 11:42'!buildSearchPaneWith: builder	| textSpec |	textSpec := builder pluggableInputFieldSpec new.	textSpec 		model: self;		name: #search;		getText: #searchString; 		setText: #searchString:notifying:.	^textSpec! !!Utilities class methodsFor: '*Tools' stamp: 'ar 8/7/2009 22:12'!recentSubmissionsWindow	"Answer a SystemWindow holding recent submissions"	| recentMessages messageSet |	recentMessages := RecentSubmissions copy reversed.	messageSet := RecentMessageSet messageList: recentMessages.	messageSet autoSelectString: nil.	^ ToolBuilder build: messageSet	"Utilities recentSubmissionsWindow openInHand"! !!Debugger methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 17:06'!buildFullWith: builder	| windowSpec listSpec textSpec extent |	windowSpec := builder pluggableWindowSpec new.	windowSpec model: self.	windowSpec label: 'Debugger'.	Display height < 800 "a small screen" 		ifTrue:[extent := RealEstateAgent standardWindowExtent]		ifFalse:[extent := 600@700].	windowSpec extent: extent.	windowSpec children: OrderedCollection new.	listSpec := builder pluggableListSpec new.	listSpec 		model: self;		list: #contextStackList; 		getIndex: #contextStackIndex; 		setIndex: #toggleContextStackIndex:; 		menu: #contextStackMenu:shifted:; 		keyPress: #contextStackKey:from:;		frame: (0@0 corner: 1@0.22).	windowSpec children add: listSpec.	textSpec := self buildCodePaneWith: builder.	textSpec frame: (0@0.22corner: 1@0.8).	windowSpec children add: textSpec.	listSpec := builder pluggableListSpec new.	listSpec 		model: self receiverInspector;		list: #fieldList; 		getIndex: #selectionIndex; 		setIndex: #toggleIndex:; 		menu: #fieldListMenu:; 		keyPress: #inspectorKey:from:;		frame: (0@0.8 corner: 0.2@1).	windowSpec children add: listSpec.	textSpec := builder pluggableTextSpec new.	textSpec 		model: self receiverInspector;		getText: #contents; 		setText: #accept:; 		selection: #contentsSelection; 		menu: #codePaneMenu:shifted:;		frame: (0.2@0.8 corner: 0.5@1).	windowSpec children add: textSpec.	listSpec := builder pluggableListSpec new.	listSpec 		model: self contextVariablesInspector;		list: #fieldList; 		getIndex: #selectionIndex; 		setIndex: #toggleIndex:; 		menu: #fieldListMenu:; 		keyPress: #inspectorKey:from:;		frame: (0.5@0.8 corner: 0.7@1).	windowSpec children add: listSpec.	textSpec := builder pluggableTextSpec new.	textSpec 		model: self contextVariablesInspector;		getText: #contents; 		setText: #accept:; 		selection: #contentsSelection; 		menu: #codePaneMenu:shifted:;		frame: (0.7@0.8 corner: 1@1).	windowSpec children add: textSpec.	^builder build: windowSpec! !!Browser methodsFor: 'drag and drop' stamp: 'ar 8/8/2009 10:06'!wantsSystemCategoriesDrop: anObject	"Only accept drops of behaviors on system categories"	^anObject isBehavior! !!Inspector methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 11:47'!buildValuePaneWith: builder	| textSpec |	textSpec := builder pluggableTextSpec new.	textSpec 		model: self;		getText: #contents; 		setText: #accept:; 		selection: #contentsSelection; 		menu: #codePaneMenu:shifted:.	^textSpec! !!Lexicon methodsFor: 'initialization' stamp: 'ar 8/8/2009 17:07'!buildWith: builder	"Create the ui for the browser"	| windowSpec max |	max := self wantsOptionalButtons ifTrue:[0.32] ifFalse:[0.4].	windowSpec := self buildWindowWith: builder specs: {		(0@0 corner: 0.5@max) -> [self buildCategoryListWith: builder].		(0.5@0 corner: 1@max) -> [self buildMessageListWith: builder].		(0@max corner: 1@1) -> [self buildCodePaneWith: builder].	}.	^builder build: windowSpec! !!PointerFinder class methodsFor: 'utilities' stamp: 'ar 8/6/2009 23:26'!pointersTo: anObject except: objectsToExclude	"Find all occurrences in the system of pointers to the argument anObject. 	Remove objects in the exclusion list from the results."		| results anObj lastObj |	Smalltalk garbageCollect.	"big collection shouldn't grow, so it's contents array is always the same"	results := OrderedCollection new: 1000.	"allObjectsDo: is expanded inline to keep spurious	 method and block contexts out of the results"	anObj := self someObject.	lastObj := Object new.	[lastObj == anObj] whileFalse: [		anObj isInMemory ifTrue: [			(anObj pointsTo: anObject) ifTrue: [				"exclude the results collector and contexts in call chain"				((anObj ~~ results collector) and:				 [(anObj ~~ objectsToExclude) and:				 [(anObj ~~ thisContext) and:				 [(anObj ~~ thisContext sender) and:				 [anObj ~~ thisContext sender sender]]]])					 ifTrue: [ results add: anObj ].			]].		anObj := anObj nextObject.	].	objectsToExclude do: [ :obj | results removeAllSuchThat: [ :el | el == obj]].	^ results asArray! !!FileContentsBrowser methodsFor: 'toolbuilder' stamp: 'ar 8/8/2009 11:34'!buildWith: builder	"Create a pluggable version of all the views for a Browser, including views and controllers."	| windowSpec |	self packages size = 1 ifTrue:[		self systemCategoryListIndex: 1.		windowSpec := self buildWindowWith: builder specs: {			(0@0 corner: 1.0@0.06) -> [self buildSystemCatListSingletonWith: builder].			(0@0.06 corner: 0.34@0.24) -> [self buildClassListWith: builder].			(0@0.24 corner: 0.34@0.34) -> [self buildSwitchesWith: builder].			(0.34@0.06 corner: 0.67@0.34) -> [self buildMessageCategoryListWith: builder].			(0.67@0.06 corner: 1.0@0.34) -> [self buildMessageListWith: builder].			(0.0@0.34 corner: 1.0@0.9) -> [self buildCodePaneWith: builder].			(0.0@0.9 corner: 1.0@1.0) -> [self buildInfoViewWith: builder].		}	] ifFalse:[		windowSpec := self buildWindowWith: builder specs: {			(0@0 corner: 0.25@0.4) -> [self buildSystemCategoryListWith: builder].			(0.25@0 corner: 0.5@0.3) -> [self buildClassListWith: builder].			(0.25@0.3 corner: 0.5@0.4) -> [self buildSwitchesWith: builder].			(0.5@0 corner: 0.75@0.4) -> [self buildMessageCategoryListWith: builder].			(0.75@0 corner: 1.0@0.4) -> [self buildMessageListWith: builder].			(0.0@0.4 corner: 1.0@0.9) -> [self buildCodePaneWith: builder].			(0.0@0.9 corner: 1.0@1.0) -> [self buildInfoViewWith: builder].		}	].	^ windowSpec! !!Browser methodsFor: 'initialize-release' stamp: 'ar 8/8/2009 17:05'!openOnClassWithEditString: aString	"Create a pluggable version of all the views for a Browser, including views and controllers."	"Example:		Browser newOnClass: Browser.	"	| builder max |	builder := ToolBuilder default.	max := self wantsOptionalButtons ifTrue:[0.32] ifFalse:[0.4].	^self buildWindowWith: builder specs: {		(0.0@0.0 corner: 0.5@0.08) -> [self buildClassListSingletonWith: builder].		(0.5@0.0 corner: 1.0@0.08) -> [self buildSwitchesWith: builder].		(0.0@0.08 corner: 0.5@max) -> [self buildMessageCategoryListWith: builder].		(0.5@0.08 corner: 1@max) -> [self buildMessageListWith: builder].		(0@max corner: 1@1) -> [self buildCodePaneWith: builder].	}! !!DualChangeSorter methodsFor: 'initialization' stamp: 'ar 8/7/2009 22:23'!open	^ToolBuilder open: self! !!Browser methodsFor: 'class comment pane' stamp: 'ar 8/8/2009 17:21'!annotationForClassDefinitionFor: aClass	"Provide a line of content for an annotation pane, given that the receiver is pointing at the class definition of the given class."	^self classCommentText! !!Browser methodsFor: 'drag and drop' stamp: 'ar 8/8/2009 10:12'!dragFromClassList: index	"Drag a class from the browser"	| name envt |	(name := self classList at: index) ifNil: [^ nil].	(envt := self selectedEnvironment) ifNil: [^ nil].	^ envt at: name ifAbsent:[nil]! !!ComponentLayout methodsFor: '*Tools' stamp: 'ar 8/7/2009 23:42'!inspectModelInMorphic	| insp |	insp := InspectorBrowser openOn: self model.	self world addMorph: insp; startStepping: insp! !!TheWorldMenu methodsFor: '*Tools' stamp: 'ar 8/7/2009 23:42'!inspectWorldModel	| insp |	insp := InspectorBrowser openOn: myWorld model.	myWorld addMorph: insp; startStepping: insp! !!Debugger methodsFor: 'context stack menu' stamp: 'ar 8/7/2009 23:01'!abandon: aTopView 	"abandon the notifier represented by aTopView"	ToolBuilder default close: aTopView! !Browser removeSelector: #addLowerPanesTo:at:with:!Debugger removeSelector: #buildMessageBrowser!ChangeSorter removeSelector: #openAsMorphIn:rect:!Browser removeSelector: #buildMorphicSwitches!Browser removeSelector: #openAsMorphMsgCatEditing:!Browser removeSelector: #browseSelectionInPlace!CodeHolder removeSelector: #inheritanceButton!Browser removeSelector: #buildMorphicCommentPane!DualChangeSorter removeSelector: #openAsMorph!Browser removeSelector: #browserWindowActivated!Workspace removeSelector: #embeddedInMorphicWindowLabeled:!ChangeList removeSelector: #optionalButtonRow!Lexicon removeSelector: #searchToggleButton!Browser removeSelector: #openAsMorphClassEditing:!Browser removeSelector: #dragAnimationFor:transferMorph:!Browser removeSelector: #buildMorphicMessageList!Inspector class removeSelector: #verticalDividerProportion!Browser removeSelector: #buildMessageBrowserEditString:!SelectorBrowser removeSelector: #morphicWindow!CodeHolder removeSelector: #addOptionalButtonsTo:at:plus:!Lexicon removeSelector: #customButtonRow!ChangeSetBrowser removeSelector: #openAsMorphIn:rect:!Browser removeSelector: #highlightSystemCategoryList:with:!Debugger removeSelector: #buttonRowForPreDebugWindow:!Debugger removeSelector: #optionalButtonRow!Browser removeSelector: #wantsDroppedMorph:event:inMorph:!Browser removeSelector: #buildInstanceClassSwitchView!Inspector class removeSelector: #openOn:withEvalPane:withLabel:valueViewClass:!Browser removeSelector: #buildOptionalButtonsView!ChangeList removeSelector: #optionalButtonsView!Browser removeSelector: #dstMessageCategoryDstListMorph:!ChangeSorter removeSelector: #openView:offsetBy:!Browser removeSelector: #openAsMorphEditing:!Debugger removeSelector: #buildMVCNotifierButtonView!Browser removeSelector: #buildMorphicSystemCatList!FileContentsBrowser removeSelector: #openAsMorph!Browser removeSelector: #acceptDroppingMorph:event:inMorph:!ChangeSorter removeSelector: #morphicWindow!MessageSet class removeSelector: #openAsMorph:name:!Debugger removeSelector: #optionalButtonHeight!Lexicon removeSelector: #mostGenericButton!Browser removeSelector: #buildMessageBrowser!Browser removeSelector: #dragPassengerFor:inMorph:!CodeHolder removeSelector: #optionalButtonRow!MessageNames removeSelector: #inMorphicWindowWithInitialSearchString:!Browser removeSelector: #buildClassBrowser!Browser removeSelector: #acceptMethod:messageCategory:class:atListMorph:internal:copy:!Debugger removeSelector: #optionalAnnotationHeight!MessageNames removeSelector: #inMorphicWindowLabeled:!FileContentsBrowser removeSelector: #addLowerPanesTo:at:with:!Debugger removeSelector: #buildMVCOptionalButtonsButtonsView!InstanceBrowser removeSelector: #desiredWindowLabelHeightIn:!Browser removeSelector: #addAListPane:to:at:plus:!Browser removeSelector: #highlightMessageCategoryList:with:!Browser removeSelector: #changeMessageCategoryForMethod:dstMessageCategory:srcMessageCategory:insideClassOrMeta:internal:copySemantic:!MessageSet removeSelector: #openAsMorphNamed:inWorld:!Browser removeSelector: #openMessageEditString:!Lexicon removeSelector: #homeCategoryButton!ChangeList class removeSelector: #openAsMorph:name:multiSelect:!ChangeList removeSelector: #openAsMorphName:multiSelect:!Browser removeSelector: #acceptMethod:dstMessageCategory:srcMessageCategory:dstClass:dstClassOrMeta:srcClassOrMeta:internal:copySemantic:!Inspector class removeSelector: #horizontalDividerProportion!Browser removeSelector: #buildMorphicMessageCatList!Inspector class removeSelector: #openAsMorphOn:withEvalPane:withLabel:valueViewClass:!StringHolder removeSelector: #buildMessageBrowser!Browser class removeSelector: #openMessageBrowserForClass:selector:editString:!CodeHolder removeSelector: #decorateForInheritance!Debugger removeSelector: #buildMorphicNotifierLabelled:message:!PackagePaneBrowser removeSelector: #openAsMorphEditing:!DualChangeSorter removeSelector: #morphicWindow!Browser removeSelector: #message:compileInClass:fromClass:dstMessageCategory:srcMessageCategory:internal:copySemantic:!Browser removeSelector: #openAsMorphSysCatEditing:!Browser removeSelector: #changeCategoryForClass:srcSystemCategory:atListMorph:internal:copy:!SelectorBrowser removeSelector: #openAsMorph!Utilities class removeSelector: #addSampleWindowsTo:!Browser removeSelector: #dragTransferTypeForMorph:!MessageSet removeSelector: #buildMorphicMessageList!Inspector class removeSelector: #openAsMorphOn:withLabel:!Browser removeSelector: #dstCategoryDstListMorph:!MessageSet removeSelector: #inMorphicWindowLabeled:!Browser removeSelector: #dstClassDstListMorph:!Debugger removeSelector: #openFullMorphicLabel:!Browser removeSelector: #openAsMorphMessageEditing:!Browser removeSelector: #addClassAndSwitchesTo:at:plus:!Inspector class removeSelector: #openAsMorphOn:!Browser removeSelector: #buildInstanceSwitchView!Browser removeSelector: #buildMorphicClassList!CodeHolder removeSelector: #addLowerPanesTo:at:with:!Lexicon removeSelector: #windowWithLabel:!Browser removeSelector: #addMorphicSwitchesTo:at:!ChangeSorter removeSelector: #openAsMorph!Debugger removeSelector: #buildMVCDebuggerViewLabel:minSize:!MessageSet class removeSelector: #openAsMorph:name:inWorld:!Debugger removeSelector: #customButtonRow!Lexicon removeSelector: #addOptionalButtonsTo:at:plus:!Browser removeSelector: #buildClassSwitchView!Browser removeSelector: #overwriteDialogHierarchyChange:higher:sourceClassName:destinationClassName:methodSelector:!Browser removeSelector: #buildCommentSwitchView!Debugger removeSelector: #buildMVCNotifierViewLabel:message:minSize:!InstanceBrowser removeSelector: #windowWithLabel:!Lexicon removeSelector: #openWithSearchPaneOn:inWorld:!CodeHolder removeSelector: #buttonWithSelector:!Browser removeSelector: #highlightClassList:with:!Debugger removeSelector: #addOptionalButtonsTo:at:plus:!