"Change Set:		7883Compiler-jcg.87Compiler-jcg.87:Revert to lazy-initialization of method properties, which is used by the externally-maintained Prolog package (which loads cleanly into 3.10.2, but not trunk).Part 2 of 2... need to load -jcg.85 first (this is taken care of by the Monticello Configuration update-jcg.32.mcm)"!!Parser methodsFor: 'pragmas' stamp: 'jcg 9/30/2009 00:20'!addPragma: aPragma	properties := self properties copyWith: aPragma! !!Parser methodsFor: 'expression types' stamp: 'jcg 9/30/2009 00:20'!method: doit context: ctxt encoder: encoderToUse	" pattern [ | temporaries ] block => MethodNode."	| sap blk prim temps messageComment methodNode |	encoder := encoderToUse.	sap := self pattern: doit inContext: ctxt.	"sap={selector, arguments, precedence}"	self properties selector: (sap at: 1).	encoder selector: (sap at: 1).	(sap at: 2) do: [:argNode | argNode beMethodArg].	doit ifFalse: [self pragmaSequence].	temps := self temporaries.	messageComment := currentComment.	currentComment := nil.	doit ifFalse: [self pragmaSequence].	prim := self pragmaPrimitives.	self statements: #() innerBlock: doit.	blk := parseNode.	doit ifTrue: [blk returnLast]		ifFalse: [blk returnSelfIfNoOther: encoder].	hereType == #doIt ifFalse: [^self expected: 'Nothing more'].	self interactive ifTrue: [self removeUnusedTemps].	methodNode := self newMethodNode comment: messageComment.	^methodNode		selector: (sap at: 1)		arguments: (sap at: 2)		precedence: (sap at: 3)		temporaries: temps		block: blk		encoder: encoder		primitive: prim		properties: properties! !!MethodNode methodsFor: 'initialize-release' stamp: 'jcg 9/30/2009 00:55'!selector: selOrFalse arguments: args precedence: p temporaries: temps block: blk encoder: anEncoder primitive: prim 		self 		selector: selOrFalse		arguments: args		precedence: p		temporaries: temps		block: blk encoder:		anEncoder 		primitive: prim 		properties: AdditionalMethodState new.! !!Parser methodsFor: 'pragmas' stamp: 'jcg 9/30/2009 00:20'!pragmaPrimitives	| primitives |	self properties isEmpty ifTrue:		[^0].	primitives := properties pragmas select:					[:pragma|					self class primitivePragmaSelectors includes: pragma keyword].	primitives isEmpty ifTrue:		[^0].	primitives size > 1 ifTrue:		[^self notify: 'Ambigous primitives'].	^self perform: primitives first keyword withArguments: primitives first arguments! !