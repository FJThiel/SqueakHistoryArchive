"Change Set:		7445KernelTests-mha.81KernelTests-mha.81:fixed FloatTest >> #testNaN5This test would not accept an IEEE-754 compliant NaN converted to a string. It now accepts both quiet and signalled NaNs.KernelTests-nice.73:Test for http://bugs.squeak.org/view.php?id=7114SmallInteger minVal highBitOfMagnitude.KernelTests-nice.74:Test for http://bugs.squeak.org/view.php?id=6874(2 raisedTo: 31) negated bitAnd: (2 raisedTo: 31) negated - 1.KernelTests-nice.75:Additional tests for LargeInteger printStringThis is to ensure http://bugs.squeak.org/view.php?id=6887 is OK KernelTests-nice.76:Test for http://bugs.squeak.org/view.php?id=7169self assert: (SqNumberParser parse: '0.50s2') = (1/2).KernelTests-nice.77:Test forhttp://bugs.squeak.org/view.php?id=6779ScaledDecimal readFrom: '5.3'.would not answer a ScaledDecimal KernelTests-nice.78:Add a non regression test against number parsing speed up bug introduced by early implementation of:http://bugs.squeak.org/view.php?id=6976KernelTests-nice.79:Test forhttp://bugs.squeak.org/view.php?id=4378ScaledDecimal storeString incorrectly use printOn: and loose exactness KernelTests-nice.80:Test forhttp://bugs.squeak.org/view.php?id=6983Float nan isLiteral. It should not. "!!IntegerTest methodsFor: 'tests - printing' stamp: 'nice 2/15/2008 22:23'!testNumberOfDigits		2 to: 32 do: [:b |		1 to: 1000//b do: [:n |			| bRaisedToN |			bRaisedToN := b raisedTo: n.			self assert: (bRaisedToN - 1 numberOfDigitsInBase: b) = n.			self assert: (bRaisedToN numberOfDigitsInBase: b) = (n+1).			self assert: (bRaisedToN + 1 numberOfDigitsInBase: b) = (n+1).						self assert: (bRaisedToN negated + 1 numberOfDigitsInBase: b) = n.			self assert: (bRaisedToN negated numberOfDigitsInBase: b) = (n+1).			self assert: (bRaisedToN negated - 1 numberOfDigitsInBase: b) = (n+1).]].! !!FloatTest methodsFor: 'NaN behavior' stamp: 'nice 3/14/2008 23:42'!testNaNisLiteral	self deny: Float nan isLiteral description: 'there is no literal representation of NaN'! !!IntegerTest methodsFor: 'tests - bitLogic' stamp: 'nice 1/26/2008 02:22'!testTwoComplementBitLogicWithCarry	"This is non regression test for http://bugs.squeak.org/view.php?id=6874"		"By property of two complement, following operation is:	...111110000 this is -16	...111101111 this is -16-1	...111100000 this is -32, the result of bitAnd: on two complement		This test used to fail with n=31 39 47.... because of bug 6874"		self assert: ((2 to: 80) allSatisfy: [:n | ((2 raisedTo: n) negated bitAnd: (2 raisedTo: n) negated - 1) = (2 raisedTo: n + 1) negated]).! !!ScaledDecimalTest methodsFor: 'tests' stamp: 'nice 11/22/2007 22:42'!testReadFrom	"This is related to http://bugs.squeak.org/view.php?id=6779"		self should: [(ScaledDecimal readFrom: '5.3') isKindOf: ScaledDecimal]		description: 'Reading a ScaledDecimal should answer a ScaledDecimal'.	self should: [((ScaledDecimal readFrom: '5.3') asScaledDecimal: 1) = (53/10 asScaledDecimal: 1)]		description: 'ScaledDecimal readFrom: should not use Float intermediate because it would introduce round off errors'.! !!SqNumberParserTest methodsFor: 'tests - Float' stamp: 'nice 8/31/2008 03:32'!testFloatGradualUnderflow	"Gradual underflow are tricky.	This is a non regression test for http://bugs.squeak.org/view.php?id=6976"	| float trueFraction str |		"as a preamble, use a base 16 representation to avoid round off error and check that number parsing is correct"	float := SqNumberParser parse: '16r2.D2593D58B4FC4e-256'.	trueFraction := 16r2D2593D58B4FC4 / (16 raisedTo: 256+13).	self assert: float asTrueFraction = trueFraction.	self assert: float = trueFraction asFloat.	"now print in base 10"	str := (String new: 32) writeStream.	float absPrintExactlyOn: str base: 10.		"verify if SqNumberParser can read it back"	self assert: (SqNumberParser parse: str contents) = float. ! !!SqNumberParserTest methodsFor: 'tests - ScaledDecimal' stamp: 'nice 8/29/2008 22:03'!testScaledDecimalWithTrailingZeroes	"This is a non regression tests for http://bugs.squeak.org/view.php?id=7169"		self assert: (SqNumberParser parse: '0.50s2') = (1/2).	self assert: (SqNumberParser parse: '0.500s3') = (1/2).	self assert: (SqNumberParser parse: '0.050s3') = (1/20).! !!IntegerTest methodsFor: 'tests - bitLogic' stamp: 'nice 7/8/2008 02:44'!testHighBitOfMagnitude	| suite |	suite := (0 to: 1024) asArray , #(16rFDFD 16rFFFF 16r1000 16r1000000 16r1000001 16r70000000 16r7AFAFAFA ) , {SmallInteger maxVal . SmallInteger maxVal+1}.	suite := suite , (suite collect: [:e | e raisedTo: 20]).		suite do: [:anInteger |		| highBit shifted |		highBit := 0.		shifted := 1.		[shifted > anInteger] whileFalse: [highBit := highBit+1. shifted := shifted bitShift: 1].		self assert: anInteger highBitOfMagnitude = highBit.		self assert: anInteger negated highBitOfMagnitude = highBit].! !!ScaledDecimalTest methodsFor: 'tests' stamp: 'nice 12/3/2007 20:35'!testIsLiteral	"This test is related to http://bugs.squeak.org/view.php?id=6796"		self assert: 1.00s2 isLiteral description: 'every literal obviously isLiteral'.		"Note that (1 / 3.00s2) is not a well behaved literal,	because it does not re-evaluate to self...	Every literal should be evaluated as self (see isSelfEvaluating).	There is currently no way to print it as a literal.	So i propose it shall not answer true."	self deny: (1/3.00s2) isLiteral description: 'this number cannot represent itself as a literal'.! !!NumberParsingTest methodsFor: 'tests - ScaledDecimal' stamp: 'nice 8/29/2008 22:04'!testScaledDecimalWithTrailingZeroes	"This is a non regression tests for http://bugs.squeak.org/view.php?id=7169"		self assert: (Number readFrom: '0.50s2') = (1/2).	self assert: (Number readFrom: '0.500s3') = (1/2).	self assert: (Number readFrom: '0.050s3') = (1/20).! !!LargePositiveIntegerTest methodsFor: 'tests' stamp: 'nice 7/22/2008 00:23'!testDenormalizedPrintString	"Check that an un-normalized instance behaves reasonably."	| i i0 |	i := LargePositiveInteger new: 4.	i basicAt: 2 put: 255.	self assert: i size == 4.	self assert: i printString = '65280'.	"256*255"	self assert: i normalize == 65280.		i0 := LargePositiveInteger new: 0.	self assert: i0 size == 0.	self assert: i0 printString = '0'.	self assert: i0 normalize == 0.! !!FloatTest methodsFor: 'IEEE 754' stamp: 'mha 7/30/2009 16:15'!testNaN5	| nanstr |		"check the NaN string representation conforms to IEEE 754"	nanstr := Float nan asIEEE32BitWord printPaddedWith: $0 to: 32 base: 2.	self		assert: (#($0 $1) includes: (nanstr at: 1));		assert: (nanstr copyFrom: 2 to: 9) = '11111111';		assert: (#($0 $1) includes: (nanstr at: 10)); "accept both quiet and signalled NaNs"		assert: ((nanstr copyFrom: 11 to: 32) reject: [ :c | #($0 $1) includes: c ]) isEmpty.		"check a correct quiet NaN is created from a string"	self assert: (Float fromIEEE32Bit:		(Integer readFrom: '01111111110000000000000000000000' readStream base: 2)) isNaN! !!LargeNegativeIntegerTest methodsFor: 'tests' stamp: 'nice 7/22/2008 00:25'!testDenormalizedPrintString	"Check that an un-normalized instance behaves reasonably."	| i i0 |	i := LargeNegativeInteger new: 4.	i basicAt: 2 put: 255.	self assert: i size == 4.	self assert: i printString = '-65280'.	"-256*255"	self assert: i normalize == -65280.		i0 := LargeNegativeInteger new: 0.	self assert: i0 size == 0.	self assert: i0 printString = '-0'.	self assert: i0 normalize == 0.! !!ScaledDecimalTest methodsFor: 'tests' stamp: 'nice 12/3/2007 21:43'!testStoreOn	"this is http://bugs.squeak.org/view.php?id=4378"		"Both results should be 1.	ScaledDecimal representations are exact	(though only scale digits or fractional part are printed)"	self assert:    		(Compiler evaluate: (0.5s1 squared storeString)) * 4		= (0.5s1 squared * 4).				"However, exact literals should store literaly	If not, they would break Decompiler."		"BUG: i cannot write the test like this:	self assert:    		0.5s2 squared storeString = '0.25s2'	BECAUSE compiler would consider 0.5s2 as = 0.5s1 and would reuse same slot..."		self assert:    		0.25s2 storeString = '0.25s2'! !!IntegerTest methodsFor: 'tests - printing' stamp: 'nice 2/15/2008 22:31'!testPrintStringBase		2 to: 32 do: [:b |		1 to: 1000//b do: [:n |			| bRaisedToN |			bRaisedToN := b raisedTo: n.			self assert: (bRaisedToN - 1 printStringBase: b) = (String new: n withAll: (Character digitValue: b-1)).			self assert: (bRaisedToN printStringBase: b) = ('1' , (String new: n withAll: $0)).						self assert: (bRaisedToN negated + 1 printStringBase: b) = ('-' , (String new: n withAll: (Character digitValue: b-1))).			self assert: (bRaisedToN negated printStringBase: b) = ('-1' , (String new: n withAll: $0))]].! !