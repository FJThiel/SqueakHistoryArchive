"Change Set:		9314System-dtl.249System-dtl.249:Eliminate explicit references to MVC and Morphic classes in Preferences class>>setWindowTitleFontTo:Remove explicit MVC dependencies from SystemDictionary>>discardMVC.System-jcg.248:Make ObjectFinalizer a subclass of MessageSend."!MessageSend subclass: #ObjectFinalizer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'System-Finalization'!!Preferences class methodsFor: 'fonts' stamp: 'dtl 2/10/2010 22:52'!setWindowTitleFontTo: aFont	"Set the window-title font to be as indicated"	Parameters at: #windowTitleFont put: aFont.	(Smalltalk hasClassNamed: #StandardSystemView)		ifTrue: [(Smalltalk at: #StandardSystemView) setLabelStyle].	(Smalltalk hasClassNamed: #Flaps)		ifTrue: [(Smalltalk at: #Flaps) replaceToolsFlap]! !!ObjectFinalizer methodsFor: 'finalization' stamp: 'jcg 1/15/2010 01:37'!finalize	"Finalize the resource associated with the receiver. This message should only be sent during the finalization process. There is NO garantuee that the resource associated with the receiver hasn't been free'd before so take care that you don't run into trouble - this all may happen with interrupt priority."	[self value] on: Error do:[:ex| ex return].! !!SystemDictionary methodsFor: 'shrinking' stamp: 'dtl 2/11/2010 23:32'!discardMVC	"After suitable checks, strip out much of MVC from the system"	"Smalltalk discardMVC"	| keepers |	self flag: #bob. "zapping projects"	self isMorphic		ifFalse: [^self inform: 'You must be in a Morphic project to discard MVC.'].	"Check that there are no MVC Projects"	(Project allProjects allSatisfy: [:proj | proj isMorphic])		ifFalse: [(self confirm: 'Would you like a chance to remove yourMVC projects in an orderly manner?')				ifTrue: [^ self].			(self confirm: 'If you wish, I can remove all MVC projects,make this project be the top project, and placeall orphaned sub-projects of MVC parents here.Would you like be to do thisand proceed to discard all MVC classes?')				ifTrue: [self zapMVCprojects]				ifFalse: [^ self]].	self reclaimDependents.	"Remove old Paragraph classes and View classes."	self at: #Paragraph ifPresent: [:paraClass |		(ChangeSet superclassOrder: paraClass withAllSubclasses asArray)			reverseDo: [:c | c removeFromSystem]].	self at: #View ifPresent: [:viewClass |		(ChangeSet superclassOrder: viewClass withAllSubclasses asArray)			reverseDo: [:c | c removeFromSystem]].	"Get rid of ParagraphEditor's ScrollController dependence"	self at: #ParagraphEditor ifPresent: [:paragraphEditor |		#(#markerDelta #viewDelta #scrollAmount #scrollBar #computeMarkerRegion )			do: [:sel | paragraphEditor removeSelector: sel].		paragraphEditor compile: 'updateMarker'.		"Reshape to MouseMenuController"		Compiler evaluate: (paragraphEditor definition copyReplaceAll: 'ScrollController' with: 'MouseMenuController')].	"Get rid of all Controller classes not needed by ParagraphEditor and ScreenController"	self at: #ScreenController ifPresent: [:screenController |		keepers := TextMorphEditor withAllSuperclasses copyWith: screenController].	self at: #Controller ifPresent: [:controller |		(ChangeSet superclassOrder: controller withAllSubclasses asArray)			reverseDo: [:c | (keepers includes: c)					ifFalse: [c removeFromSystem]]].	SystemOrganization removeCategoriesMatching: 'ST80-Paths'.	SystemOrganization removeCategoriesMatching: 'ST80-Symbols'.	SystemOrganization removeCategoriesMatching: 'ST80-Pluggable Views'.	self removeClassNamed: 'FormButtonCache'.	self removeClassNamed: 'WindowingTransformation'.	self removeClassNamed: 'ControlManager'.	self removeClassNamed: 'DisplayTextView'.	ScheduledControllers := nil.	Undeclared removeUnreferencedKeys.	SystemOrganization removeEmptyCategories.	Symbol rehash! !!ObjectFinalizer methodsFor: 'initialize' stamp: 'jcg 1/15/2010 01:36'!receiver: anObject selector: aSymbol argument: aParameter	"Not really necessary now that we're a subclass of MessageSend, but we keep it around because existing code might expect it."	self 		receiver: anObject;		selector: aSymbol;		arguments: (Array with: aParameter).! !