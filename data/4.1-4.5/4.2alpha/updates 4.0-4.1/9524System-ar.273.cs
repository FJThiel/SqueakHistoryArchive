"Change Set:		9524System-ar.273System-ar.273:Add cleanUp:except: to provide a list of exclusions from the cleanup actions, e.g.,	'Aggressively clean up but preserve projects and change sets'	Smalltalk cleanUp: true except: {Project. ChangeSet}.System-ar.269:Cleanup for AppRegistry, ChangeSet, DataStream, EventManager, ExternalDropHandler, FileServices, NaturalLanguageTranslator, NaturalLanguageFormTranslator, Project, ProjectHistory, SpaceTally, SystemDictionary, Smalltalk, SystemOrganizer, Utilities. Phew.System-ar.270:Make AppRegistry class>>cleanUp call removeObsolete instead of reimplementing it.System-ar.271:Changes the order in which cleanup is run from 'subclass before superclass' to 'superclass before subclass'. The intention is to avoid having a generic superclass cleanup (HashedCollection rehashAll) undo a more specific cleanup (MethodDictionary compactAllInstances).System-dtl.272:Reduce use of #isMorphic by implementing #currentVocabulary, #handleFatalDrawingError:, #resetDisplay, and #setAsBackground:"!!SystemDictionary methodsFor: 'housekeeping' stamp: 'ar 2/28/2010 02:28'!cleanUp: aggressive	"Clean up. When aggressive is true, this will destroy projects, change sets, etc."	"Smalltalk cleanUp: false"	"Smalltalk cleanUp: true"	^self cleanUp: aggressive except: #()! !!AppRegistry class methodsFor: 'class initialization' stamp: 'ar 2/27/2010 11:38'!cleanUp	"AppRegistry cleanUp"	self removeObsolete.! !!ProjectHistory class methodsFor: 'class initialization' stamp: 'ar 2/26/2010 23:05'!cleanUp	"Re-initialize current history"	self currentHistory initialize! !!EventManager class methodsFor: 'class initialization' stamp: 'ar 2/26/2010 23:01'!cleanUp: aggressive	"Dump all ActionMaps but only when we're aggressively cleaning"	aggressive ifTrue:[ActionMaps := nil].! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'ar 2/27/2010 00:02'!cleanUp	"Smalltalk cleanUp"	"Gently clean up"	^self cleanUp: false! !!ChangeSet class methodsFor: 'current changeset' stamp: 'ar 2/26/2010 23:01'!cleanUp: aggressive	"Only delete change sets when being aggressive"	aggressive ifTrue:[		ChangeSet  removeChangeSetsNamedSuchThat:			[:cs| cs name ~= ChangeSet current name].		ChangeSet current clear.		ChangeSet current name: 'Unnamed1'.	].! !!Project class methodsFor: 'class initialization' stamp: 'ar 2/26/2010 23:01'!cleanUp: agressive	"Remove all projects but only when cleaning aggressively"	agressive ifTrue:[self removeAllButCurrent].! !!NaturalLanguageTranslator class methodsFor: 'class initialization' stamp: 'ar 2/26/2010 23:03'!cleanUp	"Flush caches"	CachedTranslations := nil.	AllKnownPhrases := nil.! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'ar 2/28/2010 02:19'!cleanUp: aggressive except: exclusions	"Clean up. When aggressive is true, this will destroy projects, change sets, etc.	Leave out any classes specifically listed in exclusions."	"Smalltalk cleanUp: true except: {Project. ChangeSet}"	| classes |	aggressive ifTrue:[		"Give the user a chance to bail"		(self confirm: 'Aggressive cleanup will destroy projects, change sets and more.Are you sure you want to proceed?') ifFalse:[^self].	].	"Find all classes implementing #cleanUp or cleanUp:"	classes := Smalltalk allClasses select:[:aClass| 		(aClass class includesSelector: #cleanUp) 			or:[aClass class includesSelector: #cleanUp:]	].	"Leave out the classes in the exclusion set"	classes := classes reject:[:aClass| exclusions includes: aClass].	"Arrange classes in superclass order, superclasses before subclasses.	This will ensure that specific cleanup (like MethodDictionary compaction)	will run after generic superclass cleanup (HashedCollection rehashing).	Otherwise generic superclass cleanup might undo specific one (in this	case rehashing will undo a good bit of MD compaction)."	classes := ChangeSet superclassOrder: classes.	"Run the cleanup code"	classes 		do:[:aClass| aClass cleanUp: aggressive]		displayingProgress:[:aClass| 'Cleaning up in ', aClass name].! !!SystemOrganizer class methodsFor: 'class initialization' stamp: 'ar 2/26/2010 23:01'!cleanUp: agressive	"Remove empty categories when cleaning aggressively"	agressive ifTrue:[SystemOrganization removeEmptyCategories].! !!Project methodsFor: 'utilities' stamp: 'dtl 2/27/2010 09:52'!setAsBackground: aForm	"Set  aForm as a background image."	self subclassResponsibility! !!SystemDictionary class methodsFor: 'initialization' stamp: 'ar 2/26/2010 23:06'!cleanUp	"Flush caches"	Smalltalk flushClassNameCache.	Smalltalk cleanUpUndoCommands.	Undeclared removeUnreferencedKeys.	Smalltalk forgetDoIts.! !!Project methodsFor: 'utilities' stamp: 'dtl 2/27/2010 10:54'!handleFatalDrawingError: errMsg	"Handle a fatal drawing error."	self error: errMsg "overridden in MorphicProject"! !!Project methodsFor: 'displaying' stamp: 'dtl 2/27/2010 10:33'!resetDisplay 	"Bring the display to a usable state after handling primitiveError."	self subclassResponsibility! !!Utilities class methodsFor: 'class initialization' stamp: 'ar 2/26/2010 23:01'!cleanUp: agressive	"Nuke the scraps book when cleaning aggressively"	agressive ifTrue:[ScrapsBook := nil].! !!DataStream class methodsFor: 'class initialization' stamp: 'ar 2/26/2010 23:02'!cleanUp	"Re-initialize DataStream to avoid hanging onto obsolete classes"	self initialize! !!NaturalLanguageFormTranslator class methodsFor: 'class initialization' stamp: 'ar 2/26/2010 23:03'!cleanUp	"Flush caches"	CachedTranslations := nil! !!SpaceTally methodsFor: 'fileOut' stamp: 'ar 2/26/2010 18:02'!printSpaceAnalysis		"SpaceTally new printSpaceAnalysis"	^ self printSpaceAnalysis: 1 on: 'STspace.text'! !!ExternalDropHandler class methodsFor: 'class initialization' stamp: 'ar 2/26/2010 23:02'!cleanUp	"Reset and reinstall the drop handlers"	self resetRegisteredHandlers.	self registerStandardExternalDropHandlers.! !!Project methodsFor: 'protocols' stamp: 'dtl 2/27/2010 10:18'!currentVocabulary	"Answer the currently-prevailing default vocabulary."	self subclassResponsibility! !!FileServices class methodsFor: 'class initialization' stamp: 'ar 2/26/2010 23:02'!cleanUp	"Remove obsolete services"	self removeObsolete! !