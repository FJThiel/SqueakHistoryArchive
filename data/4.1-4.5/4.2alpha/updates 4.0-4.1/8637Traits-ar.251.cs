"Change Set:		8637Traits-ar.251Traits-ar.251:Preparations for NanoTraits: Vector traits creation through ClassDescription. Some utility methods to make interactions between Nano and Berne traits easier."!!Trait class methodsFor: 'instance creation' stamp: 'ar 12/27/2009 14:12'!newTraitNamed: aSymbol uses: aTraitCompositionOrCollection category: aString	"Creates a new trait."	| env |	env := self environment.	^self		named: aSymbol		uses: aTraitCompositionOrCollection		category: aString		env: env! !!TraitDescription methodsFor: 'printing' stamp: 'ar 12/27/2009 19:14'!printHierarchy	"For hierarchy view in the browser; print the users of a trait"	^String streamContents:[:s| self printUsersOf: self on: s level: 0].! !!SequenceableCollection methodsFor: '*Traits' stamp: 'ar 12/27/2009 14:20'!asTraitComposition	"For convenience the composition {T1. T2 ...} is the same as T1 + T2 + ..."	^self isEmpty		ifFalse: [			self size = 1				ifTrue: [self first asTraitComposition]				ifFalse: [					self copyWithoutFirst 						inject: self first						into: [:left :right | left + right]]]		ifTrue: [ClassDescription newTraitComposition]! !!TraitComposition methodsFor: 'accessing' stamp: 'ar 12/20/2009 13:51'!removeTraitUser: aClass	self traits do:[:each| each removeUser: aClass].! !!Trait class methodsFor: 'instance creation' stamp: 'ar 12/27/2009 14:12'!named: aSymbol uses: aTraitCompositionOrCollection category: aString	"Dispatch through ClassDescription for alternative implementations"	^ClassDescription newTraitNamed: aSymbol uses: aTraitCompositionOrCollection category: aString! !!TraitComposition methodsFor: 'converting' stamp: 'ar 12/20/2009 14:09'!asArray	^self transformations asArray! !!TraitBehavior methodsFor: 'traits' stamp: 'ar 12/27/2009 15:24'!hasTraitComposition	^traitComposition notNil and:[traitComposition isEmpty not]! !!Behavior methodsFor: '*Traits' stamp: 'ar 12/27/2009 14:34'!allTraits	"Answer all the traits that are used by myself without their transformations"	^self traitComposition isEmpty 		ifTrue:[#()]		ifFalse:[self traitComposition allTraits].! !!TraitDescription methodsFor: 'printing' stamp: 'ar 12/27/2009 19:16'!printUsersOf: aClass on: aStream level: indent	aStream crtab: indent.	aStream nextPutAll: aClass name.	aClass isTrait ifTrue:[		aClass users do:[:each| self printUsersOf: each on: aStream level: indent+1].	].! !!Trait class methodsFor: 'class initialization' stamp: 'ar 12/27/2009 14:39'!initialize	"Trait initialize"	"If no current trait implementation is installed yet, install myself."	ClassDescription traitImpl 		ifNil:[ClassDescription traitImpl: self].! !!Trait class methodsFor: 'accessing' stamp: 'ar 12/27/2009 14:32'!allTraitsDo: aBlock	"Evaluate aBlock with all the instance and class traits present in the system"	Trait allInstances , ClassTrait allInstances do: [:trait | aBlock value: trait].! !!Trait class methodsFor: 'accessing' stamp: 'ar 12/27/2009 14:13'!newTraitComposition	"Creates a new TraitComposition"	^TraitComposition new! !Trait initialize!