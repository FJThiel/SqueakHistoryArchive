"Change Set:		9782Tools-cmm.217Tools-cmm.217:Fix for FileList, when the file-pattern is not specified by the user, show all files.Tools-nice.213:1) Avoid sending at: to a DirectoryEntry, it is deprecated2) replace SortedCollection with #sort:Tools-laza.214:Fix ContextVariablesInspector, so that selecting 'stack top' works again in the DebuggerTools-laza.215:Order instance and temp variables alphabeticallyTools-laza.216:reverting last change"!!FileList methodsFor: 'volume list and pattern' stamp: 'jmb 3/18/2010 11:18'!pattern: textOrStringOrNil	textOrStringOrNil		ifNil: [pattern := '*']		ifNotNil: [pattern := textOrStringOrNil asString].	pattern isEmpty ifTrue: [pattern := '*'].	self updateFileList.	^ true! !!ContextVariablesInspector methodsFor: 'selecting' stamp: 'laza 3/22/2010 11:01'!contentsIsString	"Hacked so contents empty when deselected and = long printString when item 3"	^ (selectionIndex = 3) | (selectionIndex = 0)! !!FileList2 methodsFor: 'volume list and pattern' stamp: 'nice 3/21/2010 21:20'!listForPatterns: anArray	"Make the list be those file names which match the patterns."	| sizePad newList |	directory ifNil: [^#()].	(fileSelectionBlock isKindOf: MessageSend) ifTrue: [		fileSelectionBlock arguments: {directory entries}.		newList := fileSelectionBlock value.		fileSelectionBlock arguments: #().	] ifFalse: [		newList := Set new.		anArray do: [ :pat |			newList addAll: (directory entries select: [:entry | fileSelectionBlock value: entry value: pat]) ].	].	newList := newList asArray sort: self sortBlock.	sizePad := (newList inject: 0 into: [:mx :entry | mx max: entry fileSize])					asStringWithCommas size.	^newList collect: [ :e | self fileNameFormattedFrom: e sizePad: sizePad ]! !!PluggableFileList methodsFor: 'file list menu' stamp: 'nice 3/21/2010 21:27'!listForPattern: pat	"Make the list be those file names which match the pattern."	| entries sizePad newList allFiles |	entries := directory entries select: fileFilterBlock.	sizePad := (entries inject: 0 into: [:mx :entry | mx max: entry fileSize])					asStringWithCommas size - 1.	newList := OrderedCollection new: entries size.	allFiles := pat = '*'.	entries do:		[:entry | "<dirflag><name><creationTime><modificationTime><fileSize>"		(allFiles or: [entry isDirectory or: [pat match: entry name]]) ifTrue:			[newList add: entry]].	newList := newList asArray sort: self sortBlock.	newList := newList collect: [ :e | self fileNameFormattedFrom: e sizePad: sizePad ].	volList size = 1 ifTrue:		["Include known servers along with other desktop volumes" 		^newList ,			(ServerDirectory serverNames collect: [:n | '^' , n , self folderString])].	newFiles := OrderedCollection new.	^ newList! !!FileList methodsFor: 'volume list and pattern' stamp: 'nice 3/21/2010 21:32'!listForPattern: pat	"Make the list be those file names which match the pattern."	| sizePad newList |	newList := (self entriesMatching: pat) asArray sort: self sortBlock.	sizePad := (newList inject: 0 into: [:mx :entry | mx max: (entry at: 5)])					asStringWithCommas size - 1.	newList := newList collect: [ :e | self fileNameFormattedFrom: e sizePad: sizePad ].	volList size = 1 ifTrue:		["Include known servers along with other desktop volumes" 		^ newList ,		(ServerDirectory serverNames collect: [:n | '^' , n , self folderString])].	^ newList! !!FileList methodsFor: 'private' stamp: 'nice 3/21/2010 21:19'!listForPatterns: anArray	"Make the list be those file names which match the pattern."	| sizePad newList |	newList := Set new.	anArray do: [ :pat | newList addAll: (self entriesMatching: pat) ].	newList := newList asArray sort: self sortBlock.	sizePad := (newList inject: 0 into: [:mx :entry | mx max: entry fileSize])					asStringWithCommas size.	newList := newList collect: [ :e | self fileNameFormattedFrom: e sizePad: sizePad ].	volList size = 1 ifTrue:		["Include known servers along with other desktop volumes" 		^ newList  ,			(ServerDirectory serverNames collect: [:n | '^' , n , self folderString])].	^ newList! !!FileList2 methodsFor: 'volume list and pattern' stamp: 'nice 3/21/2010 21:33'!listForPattern: pat	"Make the list be those file names which match the pattern."	| sizePad newList entries |	directory ifNil: [^#()].	entries := (Preferences eToyLoginEnabled		and: [Utilities authorNamePerSe notNil])		ifTrue: [directory matchingEntries: {'submittedBy: ' , Utilities authorName.} ]		ifFalse: [directory entries].	(fileSelectionBlock isKindOf: MessageSend) ifTrue: [		fileSelectionBlock arguments: {entries}.		newList := fileSelectionBlock value.		fileSelectionBlock arguments: #().	] ifFalse: [		newList := entries select: [:entry | fileSelectionBlock value: entry value: pat].	].	newList := newList asArray sort: self sortBlock.	sizePad := (newList inject: 0 into: [:mx :entry | mx max: entry fileSize])					asStringWithCommas size - 1.	^newList collect: [ :e | self fileNameFormattedFrom: e sizePad: sizePad ]! !