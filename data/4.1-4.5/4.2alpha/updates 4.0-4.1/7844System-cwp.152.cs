"Change Set:		7844System-cwp.152System-cwp.152:AppRegistry now allows classes to decide how they will be displayed in menus rather than always using the class name.System-cbc.146:Fixed MessageTally>>spyEvery:on: to work with BlockClosure and BlockContext (by removing hard reference to BlockClosure).System-ar.147:Merging System-ul.146:- fix: http://bugs.squeak.org/view.php?id=7394 (System-cbc.146 also contains this fix)- fix: when MessageTally >> #spyEvery:on: is interrupted with alt + ., the Timer variable becomes nil, so the #ensure: block in will raise a DNU when the original process is resumed.System-nice.148:Multilingual code said 'Thu shalt not use Symbol allInstances anymore'.http://bugs.squeak.org/view.php?id=6584System-ar.149:Merge System-nice.148 and System-ar.148.System-ar.150:Remove obsolete WiW references.System-dtl.151:Implement #addDeferredUIMessage: in abstract Project. Reference Mantis 1578. This supports a fix to ProcessBrowser to correctly reinitialize following image restart in MVC or Morphic."!!Project methodsFor: 'displaying' stamp: 'ar 9/18/2009 20:20'!restore	"Redraw the entire Project"	^self subclassResponsibility! !!Project class methodsFor: 'squeaklet on server' stamp: 'ar 9/18/2009 20:11'!openBlankProjectNamed: projName	| proj projViewer |	proj := MorphicProject openViewOn: nil.	proj changeSet name: projName.	proj world addMorph: (		TextMorph new 			beAllFont: ((TextStyle default fontOfSize: 26) emphasized: 1);			color: Color red;			contents: 'Welcome to a new project - ',projName	).	proj setParent: self current.	projViewer := (CurrentProject findProjectView: projName) ifNil: [^proj].	(projViewer owner isSystemWindow) ifTrue: [			projViewer owner model: proj].	^ projViewer project: proj! !!SystemDictionary methodsFor: 'shrinking' stamp: 'nice 9/16/2009 21:46'!writeImageSegmentsFrom: segmentDictionary withKernel: kernel	"segmentDictionary is associates segmentName -> {classNames. methodNames},	and kernel is another set of classNames determined to be essential.	Add a partition, 'Secondary' with everything not in partitions and not in the kernel.	Then write segments based on this partitioning of classes."	| metas secondary dups segDict overlaps classes n symbolHolder |	"First, put all classes that are in no other partition, and not in kernel into a new partition called 'Secondary'.  Also remove any classes in kernel from putative partitions."	secondary := Smalltalk classNames asIdentitySet.	segmentDictionary keysDo:		[:segName |		secondary removeAllFoundIn: (segmentDictionary at: segName) first.		(segmentDictionary at: segName) first removeAllFoundIn: kernel].	secondary removeAllFoundIn: kernel.	secondary removeAllFoundIn: #(PseudoContext TranslatedMethod Utilities Preferences OutOfScopeNotification FakeClassPool  BlockCannotReturn FormSetFont ExternalSemaphoreTable NetNameResolver ScreenController InterpreterPlugin Command WeakSet).	FileDirectory allSubclassesDo: [:c | secondary remove: c name ifAbsent: []].	segmentDictionary at: 'Secondary' put: {secondary. {}}.	"Now build segDict giving className -> segName, and report any duplicates."	dups := Dictionary new.	segDict := IdentityDictionary new: 3000.	segmentDictionary keysDo:		[:segName | (segmentDictionary at: segName) first do:			[:className |			(segDict includesKey: className) ifTrue:				[(dups includesKey: className) ifFalse: [dups at: className put: Array new].				dups at: className put: (dups at: className) , {segName}].			segDict at: className put: segName]].	dups size > 0 ifTrue: [dups inspect.  ^ self error: 'Duplicate entries'].	"Then for every class in every partition, make sure that neither it	nor any of its superclasses are in any other partition.  If they are,	enter them in a dictionary of overlaps.	If the dictionary is not empty, then stop and report it."	overlaps := Dictionary new.	segmentDictionary keysDo:		[:segName |  		classes := (segmentDictionary at: segName) first asArray collect: [:k | Smalltalk at: k].		classes do:			[:c | (c isKindOf: Class) ifTrue:				[c withAllSuperclasses do:					[:sc | n := segDict at: sc name ifAbsent: [segName].					n ~= segName ifTrue:						[n = 'Secondary'							ifTrue: [(segmentDictionary at: 'Secondary') first										remove: sc name ifAbsent: []]							ifFalse: [overlaps at: c name put: 										(c withAllSuperclasses collect: [:cc | segDict associationAt: cc name ifAbsent: [cc name -> 'Kernel']])]]]]]].	overlaps size > 0 ifTrue: [overlaps inspect.  ^ self error: 'Superclasses in separate segments'].	"If there are no overlaps, then proceed to write the partitioned classes."	symbolHolder := Symbol allSymbols.	"Hold onto Symbols with strong pointers, 		so they will be in outPointers"	segmentDictionary keysDo:		[:segName |  Utilities informUser: segName during:			[classes := (segmentDictionary at: segName) first asArray collect: [:k | Smalltalk at: k].			metas := classes select: [:c | c isKindOf: Class] thenCollect: [:c | c class].			(ImageSegment new copyFromRoots: classes , metas sizeHint: 0) extract; 					writeToFile: segName]].	symbolHolder.  "Keep compiler for getting uppity."! !!Project methodsFor: 'menu messages' stamp: 'ar 9/18/2009 20:17'!makeThumbnail	"Make a thumbnail image of this project from the Display."	viewSize ifNil: [viewSize := Display extent // 8].	thumbnail := Form extent: viewSize depth: Display depth.	(WarpBlt current toForm: thumbnail)			sourceForm: Display;			cellSize: 2;  "installs a colormap"			combinationRule: Form over;			copyQuad: (Display boundingBox) innerCorners			toRect: (0@0 extent: viewSize).	InternalThreadNavigationMorph cacheThumbnailFor: self.	^thumbnail! !!CodeLoader class methodsFor: 'utilities' stamp: 'nice 9/16/2009 21:44'!exportCodeSegment: exportName classes: aClassList keepSource: keepSources	"Code for writing out a specific category of classes as an external image segment.  Perhaps this should be a method."	| is oldMethods newMethods classList symbolHolder fileName |	keepSources		ifTrue: [			self confirm: 'We are going to abandon sources.Quit without saving after this has run.' orCancel: [^self]].	classList := aClassList asArray.	"Strong pointers to symbols"	symbolHolder := Symbol allSymbols.	oldMethods := OrderedCollection new: classList size * 150.	newMethods := OrderedCollection new: classList size * 150.	keepSources		ifTrue: [			classList do: [:cl |				cl selectors do:					[:selector | | m oldCodeString methodNode |					m := cl compiledMethodAt: selector.					m fileIndex > 0 ifTrue:						[oldCodeString := cl sourceCodeAt: selector.						methodNode := cl compilerClass new											parse: oldCodeString in: cl notifying: nil.						oldMethods addLast: m.						newMethods addLast: (m copyWithTempsFromMethodNode: methodNode)]]]].	oldMethods asArray elementsExchangeIdentityWith: newMethods asArray.	oldMethods := newMethods := nil.	Smalltalk garbageCollect.	is := ImageSegment new copyFromRootsForExport: classList.	"Classes and MetaClasses"	fileName := FileDirectory fileName: exportName extension: ImageSegment fileExtension.	is writeForExport: fileName.	self compressFileNamed: fileName! !!AppRegistry class methodsFor: 'as yet unclassified' stamp: 'cwp 9/28/2009 09:20'!askForDefault	self registeredClasses isEmpty ifTrue:		[self inform: 'There are no ', self appName, ' applications registered.'.		^ default := nil].	self registeredClasses size = 1 ifTrue:		[^ default := self registeredClasses anyOne].	default :=  UIManager default 		chooseFrom: (self registeredClasses collect: [:ea | ea nameForViewer])		values: self registeredClasses		title: 'Which ', self appName, ' would you prefer?'.	default ifNil: [default := self registeredClasses first].	^default.! !!Project methodsFor: 'displaying' stamp: 'ar 9/18/2009 20:24'!invalidate	"Invalidate the entire project so that a redraw will be forced later."	^self subclassResponsibility! !!SystemDictionary methodsFor: 'shrinking' stamp: 'ar 9/19/2009 20:20'!majorShrink	"Undertake a major shrinkage of the image.	This method throws out lots of the system that is not needed	for, eg, operation in a hand-held PC. majorShrink produces a	999k image in Squeak 2.8	Smalltalk majorShrink; abandonSources; lastRemoval"	| oldDicts newDicts |	self isMorphic		ifTrue: [^ self error: 'You can only run majorShrink in MVC'].	Project current isTopProject		ifFalse: [^ self error: 'You can only run majorShrink in the top project'].	(self confirm: 'All sub-projects will be deleted from this image.You should already have made a backup copy,or you must save with a different name after shrinking.Shall we proceed to discard most of the content in this image?')		ifFalse: [^ self inform: 'No changes have been made.'].	"Remove all projects but the current one. - saves 522k"	ProjectView		allInstancesDo: [:pv | pv controller closeAndUnscheduleNoTerminate].	Project current setParent: Project current.	self		at: #Wonderland		ifPresent: [:cls | cls removeActorPrototypesFromSystem].	Player freeUnreferencedSubclasses.	MorphicModel removeUninstantiatedModels.	Utilities classPool at: #ScrapsBook put: nil.	Utilities zapUpdateDownloader.	ProjectHistory currentHistory initialize.	Project rebuildAllProjects.	"Smalltalk discardVMConstruction."	"755k"	self discardSoundSynthesis.	"544k"	self discardOddsAndEnds.	"227k"	self discardNetworking.	"234k"	"Smalltalk discard3D."	"407k"	self discardFFI.	"33k"	self discardMorphic.	"1372k"	Symbol rehash.	"40k"	"Above by itself saves about 4,238k"	"Remove references to a few classes to be deleted, so that they	won't leave obsolete versions around."	ChangeSet class compile: 'defaultName		^ ''Changes'' ' classified: 'initialization'.	ScreenController removeSelector: #openChangeManager.	ScreenController removeSelector: #exitProject.	ScreenController removeSelector: #openProject.	ScreenController removeSelector: #viewImageImports.	"Now delete various other classes.."	SystemOrganization removeSystemCategory: 'Graphics-Files'.	SystemOrganization removeSystemCategory: 'System-Object Storage'.	self removeClassNamed: #ProjectController.	self removeClassNamed: #ProjectView.	"Smalltalk removeClassNamed: #Project."	self removeClassNamed: #Component1.	self removeClassNamed: #FormSetFont.	self removeClassNamed: #FontSet.	self removeClassNamed: #InstructionPrinter.	self removeClassNamed: #ChangeSorter.	self removeClassNamed: #DualChangeSorter.	self removeClassNamed: #EmphasizedMenu.	self removeClassNamed: #MessageTally.	StringHolder class removeSelector: #originalWorkspaceContents.	CompiledMethod removeSelector: #symbolic.	RemoteString removeSelector: #makeNewTextAttVersion.	Utilities class removeSelector: #absorbUpdatesFromServer.	self removeClassNamed: #PenPointRecorder.	self removeClassNamed: #Path.	self removeClassNamed: #Base64MimeConverter.	"Smalltalk removeClassNamed: #EToySystem. Dont bother - its	very small and used for timestamps etc"	self removeClassNamed: #RWBinaryOrTextStream.	self removeClassNamed: #AttributedTextStream.	self removeClassNamed: #WordNet.	self removeClassNamed: #SelectorBrowser.	TextStyle		allSubInstancesDo: [:ts | ts				newFontArray: (ts fontArray						copyFrom: 1						to: (2 min: ts fontArray size))].	#(ListParagraph PopUpMenu StandardSystemView) do:[:className|		Smalltalk at: className ifPresent:[:aClass| aClass initialize].	].	ChangeSet noChanges.	ChangeSet classPool		at: #AllChangeSets		put: (OrderedCollection with: ChangeSet current).	SystemDictionary removeSelector: #majorShrink.	[self removeAllUnSentMessages > 0]		whileTrue: [Smalltalk unusedClasses				do: [:c | (Smalltalk at: c) removeFromSystem]].	SystemOrganization removeEmptyCategories.	self		allClassesDo: [:c | c zapOrganization].	self garbageCollect.	'Rehashing method dictionaries . . .'		displayProgressAt: Sensor cursorPoint		from: 0		to: MethodDictionary instanceCount		during: [:bar | 			oldDicts := MethodDictionary allInstances.			newDicts := Array new: oldDicts size.			oldDicts				withIndexDo: [:d :index | 					bar value: index.					newDicts at: index put: d rehashWithoutBecome].			oldDicts elementsExchangeIdentityWith: newDicts].	oldDicts := newDicts := nil.	Project rebuildAllProjects.	ChangeSet current initialize.	"seems to take more than one try to gc all the weak refs in	SymbolTable "	3		timesRepeat: [self garbageCollect.			Symbol compactSymbolTable]! !!MessageTally methodsFor: 'initialize-release' stamp: 'ul 9/12/2009 03:13'!spyEvery: millisecs on: aBlock 	"Create a spy and spy on the given block at the specified rate."	"Spy only on the active process (in which aBlock is run)"	| myDelay startTime time0 observedProcess |	aBlock isBlock		ifFalse: [self error: 'spy needs a block here'].	self class: aBlock receiver class method: aBlock method.		"set up the probe"	observedProcess _ Processor activeProcess.	myDelay := Delay forMilliseconds: millisecs.	time0 := Time millisecondClockValue.	gcStats := SmalltalkImage current getVMParameters.	Timer := [		[true] whileTrue: [			startTime := Time millisecondClockValue.			myDelay wait.			self tally: Processor preemptedProcess suspendedContext				in: (ShowProcesses ifTrue: [					observedProcess == Processor preemptedProcess ifTrue: [observedProcess] ifFalse: [nil]])				"tally can be > 1 if ran a long primitive"				by: (Time millisecondClockValue - startTime) // millisecs].		nil] newProcess.	Timer priority: Processor timingPriority-1.		"activate the probe and evaluate the block"	Timer resume.	^ aBlock ensure: [		"Collect gc statistics"		SmalltalkImage current getVMParameters keysAndValuesDo: [ :idx :gcVal | 			gcStats at: idx put: (gcVal - (gcStats at: idx))].		"cancel the probe and return the value"		Timer ifNotNil: [ Timer terminate ].		time := Time millisecondClockValue - time0]! !!Project methodsFor: 'release' stamp: 'ar 9/18/2009 20:19'!subProjects	"Answer a list of all the subprojects  of the receiver."	^self subclassResponsibility! !!ProjectLoading class methodsFor: 'loading' stamp: 'ar 9/18/2009 21:35'!openName: aFileName stream: preStream fromDirectory: aDirectoryOrNilwithProjectView: existingView	"Reconstitute a Morph from the selected file, presumed to berepresent a Morph saved via the SmartRefStream mechanism, and open itin an appropriate Morphic world."   	| morphOrList proj trusted localDir projStream archive mgrprojectsToBeDeleted baseChangeSet enterRestricted substituteFontnumberOfFontSubstitutes exceptions |	(preStream isNil or: [preStream size = 0]) ifTrue: [		ProgressNotification  signal: '9999 about to enterproject'.		"the hard part is over"		^self inform:'It looks like a problem occurred whilegetting this project. It may be temporary,so you may want to try again,' translated	].	ProgressNotification signal: '2:fileSizeDetermined',preStream size printString.	preStream isZipArchive		ifTrue:[	archive := ZipArchive new readFrom: preStream.				projStream := selfprojectStreamFromArchive: archive]		ifFalse:[projStream := preStream].	trusted := SecurityManager default positionToSecureContentsOf:projStream.	trusted ifFalse:		[enterRestricted := (preStream isTypeHTTP or:[aFileName isNil])			ifTrue: [Preferences securityChecksEnabled]			ifFalse: [Preferences standaloneSecurityChecksEnabled].		enterRestricted			ifTrue: [SecurityManager default enterRestrictedMode				ifFalse:					[preStream close.					^ self]]].	localDir := Project squeakletDirectory.	aFileName ifNotNil: [		(aDirectoryOrNil isNil or: [aDirectoryOrNil pathName~= localDir pathName]) ifTrue: [			localDir deleteFileNamed: aFileName.			(localDir fileNamed: aFileName) binary				nextPutAll: preStream contents;				close.		].	].	morphOrList := projStream asUnZippedStream.	preStream sleep.		"if ftp, let the connection close"	ProgressNotification  signal: '3:unzipped'.	ResourceCollector current: ResourceCollector new.	baseChangeSet := ChangeSet current.	self useTempChangeSet.		"named zzTemp"	"The actual reading happens here"	substituteFont := Preferences standardEToysFont copy.	numberOfFontSubstitutes := 0.	exceptions := Set new.	[[morphOrList := morphOrList fileInObjectAndCodeForProject]		on: FontSubstitutionDuringLoading do: [ :ex |				exceptions add: ex.				numberOfFontSubstitutes :=numberOfFontSubstitutes + 1.				ex resume: substituteFont ]]			ensure: [ ChangeSet  newChanges: baseChangeSet].	mgr := ResourceManager new initializeFrom: ResourceCollector current.	mgr fixJISX0208Resource.	mgr registerUnloadedResources.	archive ifNotNil:[mgr preLoadFromArchive: archive cacheName:aFileName].	(preStream respondsTo: #close) ifTrue:[preStream close].	ResourceCollector current: nil.	ProgressNotification  signal: '4:filedIn'.	ProgressNotification  signal: '9999 about to enter project'.		"the hard part is over"	(morphOrList isKindOf: ImageSegment) ifTrue: [		proj := morphOrList arrayOfRoots			detect: [:mm | mm isKindOf: Project]			ifNone: [^self inform: 'No project found inthis file'].		proj projectParameters at: #substitutedFont put: (			numberOfFontSubstitutes > 0				ifTrue: [substituteFont]				ifFalse: [#none]).		proj projectParameters at: #MultiSymbolInWrongPlace put: false.			"Yoshiki did not put MultiSymbols intooutPointers in older images!!"		morphOrList arrayOfRoots do: [:obj |			obj fixUponLoad: proj seg: morphOrList "imageSegment"].		(proj projectParameters at: #MultiSymbolInWrongPlace) ifTrue: [			morphOrList arrayOfRoots do: [:obj | (objisKindOf: Set) ifTrue: [obj rehash]]].		proj resourceManager: mgr.		"proj versionFrom: preStream."		proj lastDirectory: aDirectoryOrNil.		proj setParent: Project current.		projectsToBeDeleted := OrderedCollection new.		existingView ifNil: [			ChangeSet allChangeSets add: proj changeSet.			Project current openProject: proj.				"Note: in MVC we get no further than the above"		] ifNotNil: [			(existingView project isKindOf: DiskProxy) ifFalse: [				existingView project changeSet name: ChangeSet defaultName.				projectsToBeDeleted add: existingView project.			].			(existingView owner isSystemWindow) ifTrue: [				existingView owner model: proj			].			existingView project: proj.		].		ChangeSet allChangeSets add: proj changeSet.		Project current projectParameters			at: #deleteWhenEnteringNewProject			ifPresent: [ :ignored |				projectsToBeDeleted add: Project current.				Project current removeParameter:#deleteWhenEnteringNewProject.			].		projectsToBeDeleted isEmpty ifFalse: [			proj projectParameters				at: #projectsToBeDeleted				put: projectsToBeDeleted.		].		^ ProjectEntryNotification signal: proj	].	(morphOrList isKindOf: SqueakPage) ifTrue: [		morphOrList := morphOrList contentsMorph	].	(morphOrList isKindOf: PasteUpMorph) ifFalse:		[^ self inform: 'This is not a PasteUpMorph orexported Project.' translated].	(MorphicProject openViewOn: morphOrList) enter! !!Project methodsFor: 'scheduling' stamp: 'dtl 9/20/2009 18:53'!addDeferredUIMessage: valuableObject 	"Arrange for valuableObject to be evaluated at a time when the user interface	is in a coherent state."	self subclassResponsibility! !!Project methodsFor: 'initialization' stamp: 'ar 9/18/2009 21:43'!openProject: aProject	"Create a new for a new project in the context of the receiver"	^self subclassResponsibility! !!Project methodsFor: 'file in/out' stamp: 'ar 9/18/2009 20:07'!armsLengthCommand: aCommand withDescription: aString	| pvm tempProject foolingForm tempCanvas bbox crossHatchColor stride |	"Set things up so that this aCommand is sent to self as a messageafter jumping to the parentProject.  For things that can't be executedwhile in this project, such as saveAs, loadFromServer, storeOnServer.  SeeProjectViewMorph step."	self isMorphic ifTrue: [		world borderWidth: 0.	"get rid of the silly default border"		tempProject := MorphicProject new.		foolingForm := world imageForm.		"make them think they never left"		tempCanvas := foolingForm getCanvas.		bbox := foolingForm boundingBox.		crossHatchColor := Color yellow alpha: 0.3.		stride := 20.		10 to: bbox width by: stride do: [ :x |			tempCanvas fillRectangle: (x@0 extent: 1@bbox height) fillStyle: crossHatchColor.		].		10 to: bbox height by: stride do: [ :y |			tempCanvas fillRectangle: (0@y extent: bbox width@1) fillStyle: crossHatchColor.		].		tempProject world color: (InfiniteForm with: foolingForm).		tempProject projectParameters 			at: #armsLengthCmd 			put: (				DoCommandOnceMorph new					addText: aString;					actionBlock: [						self doArmsLengthCommand: aCommand.					] fixTemps			).		tempProject projectParameters 			at: #deleteWhenEnteringNewProject 			put: true.		tempProject enter.	] ifFalse: [		parentProject ifNil: [^ self inform: 'The top project can''t do that'].		pvm := parentProject findProjectView: self.		pvm armsLengthCommand: {self. aCommand}.		self exit.	].! !!Project methodsFor: 'initialization' stamp: 'ar 9/18/2009 20:36'!initialize	"Initialize the project, seting the CurrentProject as my parentProject and initializing my project preferences from those of the CurrentProject"	Project addingProject: self.	changeSet := ChangeSet new.	transcript := TranscriptStream new.	displayDepth := Display depth.	parentProject := CurrentProject.	isolatedHead := false.	self initializeProjectPreferences! !!Project methodsFor: 'displaying' stamp: 'ar 9/18/2009 20:20'!imageFormOfSize: extentPoint depth: d	| newDisplay |	newDisplay := DisplayScreen extent: extentPoint depth: d.	Display replacedBy: newDisplay do:[self restore].	^newDisplay! !!Project methodsFor: 'displaying' stamp: 'ar 9/18/2009 20:27'!displaySizeChanged	"Inform the current project that its display size has changed"! !Project class removeSelector: #newMorphicOn:!Project removeSelector: #createViewIfAppropriate!Project class removeSelector: #new!Project removeSelector: #setProjectHolder:!Project removeSelector: #enterAsActiveSubprojectWithin:!Project class removeSelector: #newMorphic!