"Change Set:		9703Kernel-cmm.426Kernel-cmm.426:Added remaining significant timezones for West / US.Kernel-nice.425:Use Character>>digitValue..Now that it is fast enough, there is no point in replicating the algorithm."!Object subclass: #NumberParser	instanceVariableNames: 'sourceStream base neg integerPart fractionPart exponent scale nDigits lastNonZero requestor failBlock'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Numbers'!!TimeZone class methodsFor: 'accessing' stamp: 'cmm 3/6/2010 17:13'!timeZones	^{		self offset:  0 hours name: 'Universal Time' abbreviation: 'UTC'.		self offset:  0 hours name: 'Greenwich Mean Time' abbreviation: 'GMT'.		self offset:  1 hours name: 'British Summer Time' abbreviation: 'BST'.		self offset:  2 hours name: 'South African Standard Time' abbreviation: 'SAST'.		self offset: -8 hours name: 'Pacific Standard Time' abbreviation: 'PST'.		self offset: -7 hours name: 'Pacific Daylight Time' abbreviation: 'PDT'.		self offset: -7 hours name: 'Mountain Standard Time' abbreviation: 'MST'.		self offset: -6 hours name: 'Mountain Daylight Time' abbreviation: 'MDT'.		self offset: -6 hours name: 'Central Standard Time' abbreviation: 'CST'.		self offset: -5 hours name: 'Central Daylight Time' abbreviation: 'CDT'.		self offset: -5 hours name: 'Eastern Standard Time' abbreviation: 'EST'.		self offset: -4 hours name: 'Eastern Daylight Time' abbreviation: 'EDT'.	}! !!NumberParser methodsFor: 'parsing-large int' stamp: 'nice 3/15/2010 00:14'!nextElementaryLargeIntegerBase: aRadix	"Form an unsigned integer with incoming digits from sourceStream.	Return this integer, or zero if no digits found.	Stop reading if end of digits or if a LargeInteger is formed.	Count the number of digits and the position of lastNonZero digit and store them in instVar."	| value digit char |	value := 0.	nDigits := 0.	lastNonZero := 0.	[value isLarge or: [(char := sourceStream next) == nil		or: [digit := char digitValue.			(0 > digit or: [digit >= aRadix])				and: [sourceStream skip: -1.					true]]]]		whileFalse: [			nDigits := nDigits + 1.			0 = digit				ifFalse: [lastNonZero := nDigits].			value := value * aRadix + digit].	^value! !NumberParser class removeSelector: #initializeDigitValues!NumberParser class removeSelector: #initialize!NumberParser initialize!