"Change Set:		9717ToolBuilder-Morphic-cmm.53ToolBuilder-Morphic-cmm.53:Integrated new ListChooser from Michael Davies.ToolBuilder-Morphic-MAD.52:adds support for keyboard preview for lists"!Object subclass: #ListChooser	instanceVariableNames: 'window fullList selectedItems searchText searchMorph title listMorph index realIndex buttonBar builder addAllowed result'	classVariableNames: ''	poolDictionaries: ''	category: 'ToolBuilder-Morphic'!!ListChooser class methodsFor: 'instance creation' stamp: 'cmm 3/15/2010 17:19'!chooseIndexFrom: aList title: aString	^ self		chooseIndexFrom: aList 		title: (aString isEmptyOrNil ifTrue: [ self defaultTitle ] ifFalse: [ aString ])		addAllowed: false! !!ListChooser class methodsFor: 'examples' stamp: 'MAD 3/14/2010 15:29'!testItem	^ self 		chooseItemFrom: (Smalltalk classNames , Smalltalk traitNames) asOrderedCollection		title: 'Pick a class'! !!ListChooser methodsFor: 'drawing' stamp: 'MAD 3/13/2010 18:56'!moveWindowNear: aPoint	| trialRect delta |	trialRect := Rectangle center: aPoint extent: window fullBounds extent.	delta := trialRect amountToTranslateWithin: World bounds.	window position: trialRect origin + delta.! !!ListChooser class methodsFor: 'instance creation' stamp: 'MAD 3/13/2010 18:56'!defaultTitle	^ 'Please choose:'! !!ListChooser class methodsFor: 'examples' stamp: 'MAD 3/14/2010 15:33'!testSet	^ self 		chooseItemFrom: #(a list of values as a Set) asSet		title: 'Pick from Set'! !!ListChooser methodsFor: 'initialize-release' stamp: 'MAD 3/14/2010 15:29'!chooseIndexFrom: labelList title: aString	| choice |	choice := self chooseItemFrom: labelList title: aString addAllowed: false.	^ fullList indexOf: choice ifAbsent: 0! !!ListChooser methodsFor: 'building' stamp: 'MAD 3/13/2010 21:14'!buildListMorphWith: builder	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 		model: self;		list: #list; 		getIndex: #selectedIndex; 		setIndex: #selectedIndex:; 		doubleClick: #accept;		"handleBasicKeys: false;"		keystrokePreview: #keyStrokeFromList:;		"doubleClickSelector: #accept;"		autoDeselect: false.	^ listSpec! !!ListChooser class methodsFor: 'instance creation' stamp: 'MAD 3/14/2010 15:24'!chooseItemFrom: aList	^ self 		chooseItemFrom: aList 		title: self defaultTitle! !!ListChooser class methodsFor: 'examples' stamp: 'MAD 3/15/2010 16:08'!testLongTitle	^ self 		chooseItemFrom: #(this is a list of values that aren/t the point here)		title: 'Pick from some values from this list'! !!ListChooser methodsFor: 'building' stamp: 'MAD 3/13/2010 19:03'!buildWindowWith: builder specs: specs	| windowSpec |	windowSpec := self buildWindowWith: builder.	specs do: [ :assoc |		| rect action widgetSpec |		rect := assoc key.		action := assoc value.		widgetSpec := action value.		widgetSpec ifNotNil:[			widgetSpec frame: rect.			windowSpec children add: widgetSpec ] ].	^ windowSpec! !!ListChooser methodsFor: 'event handling' stamp: 'MAD 3/13/2010 21:46'!cancel	"Cancel the dialog and move on"	index := 0.	builder ifNotNil: [ builder close: window ]! !!ListChooser methodsFor: 'building' stamp: 'MAD 3/14/2010 15:57'!buildSearchMorphWith: builder	| fieldSpec |	fieldSpec := builder pluggableInputFieldSpec new.	fieldSpec 		model: self;		getText: #searchText;		setText: #acceptText:;		menu: nil.		"hideScrollBarsIndefinitely;"		"acceptOnCR: true;"		"setBalloonText: 'Type a string to filter down the listed items'."		"onKeyStrokeSend: #keyStroke: to: self."	^ fieldSpec! !!ListChooser methodsFor: 'building' stamp: 'MAD 3/13/2010 19:02'!buildWindowWith: builder	| windowSpec |	windowSpec := builder pluggableWindowSpec new.	windowSpec model: self.	windowSpec label: #title.	windowSpec children: OrderedCollection new.	^windowSpec! !!ListChooser class methodsFor: 'instance creation' stamp: 'cmm 3/15/2010 17:18'!chooseIndexFrom: aList title: aString addAllowed: aBoolean	^ self new		chooseIndexFrom: aList 		title: (aString isEmptyOrNil ifTrue: [ self defaultTitle ] ifFalse: [ aString ])		addAllowed: aBoolean! !!ListChooser methodsFor: 'accessing' stamp: 'MAD 3/13/2010 18:56'!searchText: aString	searchText := aString! !!ListChooser methodsFor: 'accessing' stamp: 'MAD 3/13/2010 18:56'!title: aString	title := aString.! !!ListChooser methodsFor: 'initialize-release' stamp: 'cmm 3/15/2010 17:18'!chooseIndexFrom: labelList title: aString addAllowed: aBoolean	| choice |	choice := self chooseItemFrom: labelList title: aString addAllowed: false.	addAllowed := aBoolean.	^ fullList indexOf: choice ifAbsent: 0! !!ListChooser methodsFor: 'accessing' stamp: 'MAD 3/13/2010 18:56'!realIndex	^ realIndex ifNil: [ 0 ]! !!ListChooser methodsFor: 'accessing' stamp: 'MAD 3/13/2010 18:56'!list	^ selectedItems! !!MorphicToolBuilder methodsFor: 'pluggable widgets' stamp: 'MAD 3/15/2010 11:48'!buildPluggableList: aSpec	| widget listClass getIndex setIndex |	aSpec getSelected ifNil:[		listClass := self listClass.		getIndex := aSpec getIndex.		setIndex := aSpec setIndex.	] ifNotNil:[		listClass := self listByItemClass.		getIndex := aSpec getSelected.		setIndex := aSpec setSelected.	].	widget := listClass on: aSpec model				list: aSpec list				selected: getIndex				changeSelected: setIndex				menu: aSpec menu				keystroke: aSpec keyPress.	self register: widget id: aSpec name.	widget getListElementSelector: aSpec listItem.	widget getListSizeSelector: aSpec listSize.	widget doubleClickSelector: aSpec doubleClick.	widget dragItemSelector: aSpec dragItem.	widget dropItemSelector: aSpec dropItem.	widget wantsDropSelector: aSpec dropAccept.	widget autoDeselect: aSpec autoDeselect.	widget keystrokePreviewSelector: aSpec keystrokePreview.	self buildHelpFor: widget spec: aSpec. 	self setFrame: aSpec frame in: widget.	parent ifNotNil:[self add: widget to: parent].	panes ifNotNil:[		aSpec list ifNotNil:[panes add: aSpec list].	].	^widget! !!ListChooser methodsFor: 'event handling' stamp: 'MAD 3/14/2010 15:58'!accept	"if the user submits with no valid entry, make them start over"	self canAccept ifFalse: [ 			searchMorph selectAll.		^ self ].		"find the selected item in the original list, and return it"	result := selectedItems at: index.	builder ifNotNil: [ :bldr |		builder := nil.		bldr close: window ]! !!ListChooser class methodsFor: 'instance creation' stamp: 'MAD 3/14/2010 15:25'!chooseItemFrom: aList title: aString addAllowed: aBoolean	^ self new		chooseItemFrom: aList 		title: (aString isEmptyOrNil ifTrue: [ self defaultTitle ] ifFalse: [ aString ])		addAllowed: aBoolean! !!ListChooser methodsFor: 'initialize-release' stamp: 'MAD 3/14/2010 15:34'!chooseItemFrom: labelList title: aString addAllowed: aBoolean	fullList := labelList asOrderedCollection. "coerce everything into an OC"	builder := ToolBuilder default.	self list: fullList.	self title: aString.	addAllowed := aBoolean.	window := ToolBuilder default open: self.	window center: Sensor cursorPoint.	window setConstrainedPosition: (Sensor cursorPoint - (window fullBounds extent // 2)) hangOut: false.	builder runModal: window.	^ result! !!ListChooser methodsFor: 'testing' stamp: 'MAD 3/14/2010 15:05'!canAdd	^ addAllowed and: [ self canAccept not ]! !!MorphicUIManager methodsFor: 'ui requests' stamp: 'cmm 3/15/2010 18:32'!chooseFrom: aList lines: linesArray title: aString 	"Choose an item from the given list. Answer the index of the selected item."	^ aList size > 30		ifTrue:			[ "Don't put more than 30 items in a menu.  Use ListChooser insted"			ListChooser				chooseFrom: aList				title: aString ]		ifFalse:			[ MenuMorph				chooseFrom: aList				lines: linesArray				title: aString ]! !!ListChooser methodsFor: 'drawing' stamp: 'MAD 3/14/2010 14:55'!cancelColor	^ ColorTheme current cancelColor! !!ListChooser methodsFor: 'accessing' stamp: 'MAD 3/13/2010 18:56'!title	^ title ifNil: [ title := 'Please choose' ]! !!ListChooser methodsFor: 'accessing' stamp: 'MAD 3/13/2010 18:56'!searchText	^ searchText ifNil: [ searchText := '' ]! !!ListChooser methodsFor: 'accessing' stamp: 'MAD 3/13/2010 18:56'!selectedIndex: anInt	index := (anInt min: selectedItems size).	self changed: #selectedIndex.	self changed: #canAccept.! !!ListChooser methodsFor: 'building' stamp: 'MAD 3/15/2010 15:56'!buildWith: aBuilder	| windowSpec |	builder := aBuilder.	windowSpec := self buildWindowWith: builder specs: {		(0@0 corner: 1@0.05) -> [self buildSearchMorphWith: builder].		(0@0.05 corner: 1@0.9) -> [self buildListMorphWith: builder].		(0@0.9 corner: 1@1) -> [self buildButtonBarWith: builder].	}.	windowSpec closeAction: #closed.	windowSpec extent: self initialExtent.	window := builder build: windowSpec.			searchMorph := window submorphs detect: 		[ :each | each isKindOf: PluggableTextMorph ].	searchMorph		hideScrollBarsIndefinitely;		acceptOnCR: true;		setBalloonText: 'Type a string to filter down the listed items';		onKeyStrokeSend: #keyStroke: to: self;		hasUnacceptedEdits: true "force acceptOnCR to work even with no text entered".	listMorph := window submorphs detect: 		[ :each | each isKindOf: PluggableListMorph ].	^ window! !!ListChooser class methodsFor: 'examples' stamp: 'MAD 3/14/2010 15:31'!testItemAdd	^ self 		chooseItemFrom: (Smalltalk classNames , Smalltalk traitNames) asOrderedCollection		title: 'Pick or Add:'		addAllowed: true! !!ListChooser methodsFor: 'event handling' stamp: 'MAD 3/13/2010 18:56'!keyStrokeFromList: event	"we don't want the list to be picking up events"	window world primaryHand keyboardFocus: searchMorph.	searchMorph keyStroke: event.	"let the list know we've dealt with it"	^ true! !!MorphicUIManager methodsFor: 'ui requests' stamp: 'cmm 3/15/2010 18:32'!chooseFrom: labelList values: valueList lines: linesArray title: aString 	"Choose an item from the given list. Answer the selected item."	| index |	^ labelList size > 30		ifTrue:			[ "No point in displaying more than 30 items in a menu.  Use ListChooser insted"			index := ListChooser				chooseFrom: labelList				title: aString.			index = 0 ifFalse: [ valueList at: index ] ]		ifFalse:			[ MenuMorph				chooseFrom: labelList				values: valueList				lines: linesArray				title: aString ]! !!ListChooser methodsFor: 'event handling' stamp: 'MAD 3/14/2010 16:05'!keyStroke: event	| newText key |	"handle updates to the search box interactively"	key := event keyString.	(key = '<up>') ifTrue: [ 		self move: -1. 		^ self ].	(key = '<down>') ifTrue: [ 		self move: 1.		^ self ].	(key = '<Cmd-s>') ifTrue: [ self accept. ^ self ].	(key = '<cr>') ifTrue: [ self accept. ^ self ].	(key = '<escape>') ifTrue: [ self cancel. ^ self ].	(key = '<Cmd-l>') ifTrue: [ self cancel. ^ self ].		(key = '<Cmd-a>') ifTrue: [ self add. ^ self ].	"pull out what's been typed, and update the list as required"	newText := searchMorph textMorph asText asString.	(newText = searchText) ifFalse: [ 		searchText := newText.		self updateFilter ].! !!ListChooser methodsFor: 'building' stamp: 'MAD 3/14/2010 14:54'!buildButtonBarWith: builder	| panel button |	panel := builder pluggablePanelSpec new		model: self;		layout: #proportional;		children: OrderedCollection new.	button := builder pluggableButtonSpec new.	button		model: self; 		label: 'Accept (s)';		action: #accept;		enabled: #canAccept;		color: #acceptColor;		frame: (0.0 @ 0.0 corner: 0.34@1).	panel children add: button.	button := builder pluggableButtonSpec new.	button		model: self; 		label: 'Add (a)';		action: #add;		enabled: #canAdd;		frame: (0.36 @ 0.0 corner: 0.63@1).	panel children add: button.	button := builder pluggableButtonSpec new.	button		model: self; 		label: 'Cancel (l)';		action: #cancel;		color: #cancelColor;		frame: (0.65 @ 0.0 corner: 1@1).	panel children add: button.		^ panel! !!ListChooser class methodsFor: 'instance creation' stamp: 'MAD 3/14/2010 15:25'!chooseItemFrom: aList title: aString	^ self		chooseItemFrom: aList 		title: aString		addAllowed: false! !!ListChooser methodsFor: 'accessing' stamp: 'MAD 3/13/2010 18:56'!selectedIndex	^ index ifNil: [ index := 1 ]! !!ListChooser methodsFor: 'event handling' stamp: 'MAD 3/13/2010 18:56'!acceptText: someText	"the text morph wants to tell us about its contents but I don't care, I'm only interested in the list"	self accept! !!ListChooser methodsFor: 'event handling' stamp: 'MAD 3/13/2010 18:56'!updateFilter	selectedItems := 		searchText isEmptyOrNil 			ifTrue: [ fullList ]			ifFalse: [ fullList select: [ :each | each includesSubstring: searchText caseSensitive: false  ] ].	self changed: #list.	self selectedIndex: 1.	self changed: #selectedIndex.! !!ListChooser methodsFor: 'testing' stamp: 'MAD 3/13/2010 18:56'!canAccept	^ self selectedIndex > 0! !!ListChooser class methodsFor: 'examples' stamp: 'MAD 3/14/2010 15:27'!testIndex	^ self 		chooseIndexFrom: (Smalltalk classNames , Smalltalk traitNames) asOrderedCollection		title: 'Pick a class'! !!ListChooser class methodsFor: 'ChooserTool compatibility' stamp: 'MAD 3/14/2010 15:11'!chooseFrom: aList	^ self 		chooseFrom: aList 		title: self defaultTitle! !!ListChooser methodsFor: 'event handling' stamp: 'MAD 3/13/2010 18:56'!handlesKeyboard: evt	^ true! !!ListChooser methodsFor: 'accessing' stamp: 'MAD 3/13/2010 18:56'!list: aList title: aString	self list: aList.	self title: aString! !!ListChooser methodsFor: 'accessing' stamp: 'MAD 3/13/2010 18:56'!list: items	fullList := items.	selectedItems := items.	self changed: #itemList.! !!ListChooser class methodsFor: 'examples' stamp: 'MAD 3/14/2010 15:37'!testDictionary	^ self 		chooseItemFrom: (Dictionary newFrom: {#a->1. 2->#b.})		title: 'Pick from Dictionary' "gives values, not keys"! !!ListChooser methodsFor: 'building' stamp: 'MAD 3/15/2010 16:07'!initialExtent	| listFont titleFont buttonFont listWidth titleWidth buttonWidth |	listFont := Preferences standardListFont.	titleFont := Preferences windowTitleFont.	buttonFont := Preferences standardButtonFont.	listWidth := 20 * (listFont widthOf: $m).	titleWidth := titleFont widthOfString: self title, '__________'. "add some space for titlebar icons"	buttonWidth := buttonFont widthOfString: '_Accept_(s)___Add (a)___Cancel_(l)_'.	^ (listWidth max: (titleWidth max: buttonWidth))@(30 * (listFont height))! !!ListChooser class methodsFor: 'ChooserTool compatibility' stamp: 'MAD 3/14/2010 15:31'!chooseFrom: aList title: aString	^ self		chooseIndexFrom: aList 		title: aString		addAllowed: false! !!ListChooser methodsFor: 'event handling' stamp: 'MAD 3/13/2010 21:46'!closed	"Cancel the dialog and move on"	builder ifNotNil: [ index := 0 ]! !!ListChooser methodsFor: 'event handling' stamp: 'MAD 3/14/2010 15:59'!move: offset	| newindex |	"The up arrow key moves the cursor, and it seems impossible to restore.	So, for consistency, on either arrow, select everything, so a new letter-press starts over. yuk."	searchMorph selectAll.			newindex := self selectedIndex + offset.	newindex > selectedItems size ifTrue: [ ^ nil ].	newindex < 1 ifTrue: [ ^ nil ].	self selectedIndex: newindex.! !!ListChooser class methodsFor: 'instance creation' stamp: 'MAD 3/14/2010 15:26'!chooseIndexFrom: aList	^ self 		chooseIndexFrom: aList 		title: self defaultTitle! !!ListChooser methodsFor: 'event handling' stamp: 'MAD 3/14/2010 15:58'!add	"if the user submits with no valid entry, make them start over"	self canAdd ifFalse: [ 			searchMorph selectAll.		^ self ].		"find the string to return"	result := searchMorph getText.	builder ifNotNil: [ :bldr |		builder := nil.		bldr close: window ]! !!ListChooser methodsFor: 'drawing' stamp: 'MAD 3/14/2010 16:18'!acceptColor	^ self canAccept 		ifTrue: [ ColorTheme current okColor ]		ifFalse: [ Color lightGray "ColorTheme current disabledColor <- you don't have this!!" ]! !Smalltalk removeClassNamed: #ChooserTool!ChooserTool removeSelector: #canAccept!ChooserTool removeSelector: #closed!ChooserTool classSide removeSelector: #chooseFrom:title:!ChooserTool removeSelector: #label!ChooserTool removeSelector: #chooseFrom:title:!ChooserTool removeSelector: #cancel!ChooserTool removeSelector: #buildWindowWith:specs:!ChooserTool removeSelector: #itemList!ChooserTool removeSelector: #buildWindowWith:!ChooserTool removeSelector: #itemListIndex!ChooserTool removeSelector: #accept!ChooserTool removeSelector: #buildButtonsWith:!ChooserTool removeSelector: #itemList:!ChooserTool removeSelector: #itemListIndex:!ChooserTool removeSelector: #label:!ChooserTool removeSelector: #buildWith:!ChooserTool removeSelector: #labelString!ChooserTool removeSelector: #buildChooserListWith:!ChooserTool classSide removeSelector: #open!