"Change Set:		9292Collections-dtl.301Collections-dtl.301:Change TranscriptStream>>closeAllViews to use #changed: #update: rather than traverse dependents. Removes MVC/Morphic dependency.Change TranscriptStream>>countOpenTranscripts to select on #isTextView rather than testing #isKindOf: on MVC and Morphic view.Collections-nice.296:Change String>>initialize to force an initialization.An initialization is required because current definition of CSNonSeparators class var does not handle WideString correctly.Example: (String with: 375 asCharacter) withBlanksTrimmed should not be empty...Collections-nice.297:Optimized Array inject:into: implementationCollections-nice.298:indentationIfBlank: did not handle lines with or without line ending character the same{(String with: Character tab with: Character space) indentationIfBlank: [:x | nil].(String with: Character tab with: Character space with: Character cr) indentationIfBlank: [:x | nil].}did return #(1 nil), now return #(nil nil)Collections-nice.299:Add fix from Grease: (2 to: 1) anyOne should fail because empty.Collections-dtl.300:Move #asParagraph methods to package *ST80-Support."!!ArrayedCollection methodsFor: 'enumerating' stamp: 'nice 2/8/2010 09:19'!inject: anObject into: aBlock	"Optimized for speed. See super."		| result |	result := anObject.	1 to: self size do: [:i | result := aBlock value: result value: (self at: i)].	^result! !!TranscriptStream methodsFor: 'initialization' stamp: 'dtl 2/10/2010 17:15'!closeAllViews	"Transcript closeAllViews"	self changed: #close! !!Interval methodsFor: 'accessing' stamp: 'nice 2/9/2010 20:43'!anyOne	"This message will fail for an empty Interval, super would not."	^self at: 1! !!String methodsFor: 'paragraph support' stamp: 'nice 2/8/2010 11:27'!indentationIfBlank: aBlock	"Answer the number of leading tabs in the receiver.  If there are	 no visible characters, pass the number of tabs to aBlock and return its value."	| leadingTabs nonTab nonTabIndex nonSepIndex lineEndIndex |	nonTab := (CharacterSet with: Character tab) complement.	nonTabIndex := self indexOfAnyOf: nonTab startingAt: 1.	nonTabIndex = 0 ifTrue: [		"Only made of tabs or empty"		^aBlock value: self size].	leadingTabs := nonTabIndex - 1.	nonSepIndex := self indexOfAnyOf: CSNonSeparators startingAt: 1.	nonSepIndex = 0 ifTrue: [		"Only made of separators"		^aBlock value: leadingTabs].	lineEndIndex := self indexOfAnyOf: CSLineEnders startingAt: 1.	(lineEndIndex between: 1 and: nonSepIndex) ifTrue: [		"Only made of separators up to a line end"		^aBlock value: leadingTabs].	^leadingTabs! !!String class methodsFor: 'initialization' stamp: 'nice 2/8/2010 10:20'!initialize   "self initialize"	| order |	AsciiOrder := (0 to: 255) as: ByteArray.	CaseInsensitiveOrder := AsciiOrder copy.	($a to: $z) do:		[:c | CaseInsensitiveOrder at: c asciiValue + 1				put: (CaseInsensitiveOrder at: c asUppercase asciiValue +1)].	"Case-sensitive compare sorts space, digits, letters, all the rest..."	CaseSensitiveOrder := ByteArray new: 256 withAll: 255.	order := -1.	' 0123456789' do:  "0..10"		[:c | CaseSensitiveOrder at: c asciiValue + 1 put: (order := order+1)].	($a to: $z) do:     "11-64"		[:c | CaseSensitiveOrder at: c asUppercase asciiValue + 1 put: (order := order+1).		CaseSensitiveOrder at: c asciiValue + 1 put: (order := order+1)].	1 to: CaseSensitiveOrder size do:		[:i | (CaseSensitiveOrder at: i) = 255 ifTrue:			[CaseSensitiveOrder at: i put: (order := order+1)]].	order = 255 ifFalse: [self error: 'order problem'].	"a table for translating to lower case"	LowercasingTable := String withAll: (Character allByteCharacters collect: [:c | c asLowercase]).	"a table for translating to upper case"	UppercasingTable := String withAll: (Character allByteCharacters collect: [:c | c asUppercase]).	"a table for testing tokenish (for fast numArgs)"	Tokenish := String withAll: (Character allByteCharacters collect:									[:c | c tokenish ifTrue: [c] ifFalse: [$~]]).	"CR and LF--characters that terminate a line"	CSLineEnders := CharacterSet crlf. 	"separators and non-separators"	CSSeparators := CharacterSet separators.	CSNonSeparators := CSSeparators complement.! !!TranscriptStream methodsFor: 'private' stamp: 'dtl 2/10/2010 17:32'!countOpenTranscripts	"Transcript countOpenTranscripts"	^ (self dependents select: [:e | e isTextView]) size! !Text removeSelector: #asParagraph!String removeSelector: #asParagraph!String initialize!