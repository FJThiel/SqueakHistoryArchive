"Change Set:		9286Morphic-dtl.337Morphic-dtl.337:Move FileList from Morphic-FileList to Tools-FileListMove FileList2  from Morphic-FileList to Tools-FileListMove FileLPluggableFileListst2  from Morphic-FileList to Tools-FileListMove StandardFileMenuResult  from Morphic-FileList to Tools-MenusRemove package category from Morphic-FileListMorphic-dtl.323:Change PluggableFileList>>open to dispatch through Project to MVC and Morphic methods.Replace #openLabel: and #openAsMorphLable:inWorld: with#morphicOpenLable:in: and mvcOpenLabel:in: called through Project current.Note: A better solution is to implement proper ToolBuilder support for PluggableFileList.Morphic-dtl.324:Move PluggableFileListView from package Morphic-FileList to ST80-ViewsMove ModalSystemWindowView from package Morphic-FileList to ST80-Views Morphic-dtl.325:Move StandardFileMenu from Morphic-FileList to Tools-Menus. StandardFileMenu is not Morphic specific.Morphic-cmm.326:- Fixed browse function from a code-pane when Preferences>>#alternativeBrowseIt is enabled.- Look-tweak for 3.11; changed BalloonMorph>>#defaultBorderWidth to 0 from 1.  0 is appropriate for balloons because they are transient and wispy, not a solid object deserving a border.Morphic-nice.327:make TextEditor a bit more LF friendlyclean up dead code in inOutdent:delta:Note: currently, shift+cmd+L will outdent even if line with min outdent is zero. This was the old behaviour, but we can change it by uncommenting the '^false'Morphic-nice.328:deprecate #lineIndexForCharacter: in favour of #lineIndexOfCharacterIndex: The two selectors did already coexist.The later is preferred because both understood by st80 (Paragraph) and more descriptive.Morphic-nice.329:Let outdent work when selection starts on a wrapped line.Do not let indent insert a tab in the middle of a line when selection starts on a wrapped line.Morphic-nice.330:Let indent/outdent work in case of LFMorphic-kb.331: - fix: Pressing shift-escape in a TextEditor throws a must be boolean error. Fix this by ensuring that TextEditor >> offerMenuFromEsc: always returns trueMorphic-dtl.332:Remove explicit MVC and Morphic dependencies from SyntaxError. SyntaxError is a model in Debugger (not an exception class).Morphic-dtl.333:Remove explicit MVC and Morphic dependencies from MailComposition.Change method categories for SyntaxError from *Morphic-Models to *Morphic-Support.Morphic-dtl.334:Change TheWorldMenu to use Project current rather than an MVC ScreenController.Morphic-dtl.335:Remove VMC/Morphic dependencies from Form, FileList2, and ImportsUpdate FileList2>>openInWindow.Add MorphicProject>>formViewClassAdd MorphicProject>>openImage:name:saveResource:Better #notify: message in MorphicProject>>formEdit:Morphic-dtl.336:Handle #saveContents update from Workspace in PluggableTextMorph. Removes MVC/Morphic dependency in Workspace.Add PluggableTextMorph>>isTextView to support TranscriptStream>>countOpenTranscripts without #isKindOf: tests on MVC and Morphic views."!!TextEditor methodsFor: 'menu commands' stamp: 'kb 2/9/2010 10:09'!offerMenuFromEsc: characterStream 	"The escape key was hit while the receiver has the keyboard focus; take action"	ActiveEvent shiftPressed ifFalse: [		self raiseContextMenu: characterStream ].	^true! !!TextEditor methodsFor: 'explain' stamp: 'nice 2/8/2010 10:58'!explainChar: string	"Does string start with a special character?"	| char |	char := string at: 1.	char = $. ifTrue: [^'"Period marks the end of a Smalltalk statement.  A period in the middle of a number means a decimal point.  (The number is an instance of class Float)."'].	char = $' ifTrue: [^'"The characters between two single quotes are made into an instance of class String"'].	char = $" ifTrue: [^'"Double quotes enclose a comment.  Smalltalk ignores everything between double quotes."'].	char = $# ifTrue: [^'"The characters following a hash mark are made into an instance of class Symbol.  If parenthesis follow a hash mark, an instance of class Array is made.  It contains literal constants."'].	(char = $( or: [char = $)]) ifTrue: [^'"Expressions enclosed in parenthesis are evaluated first"'].	(char = $[ or: [char = $]]) ifTrue: [^'"The code inside square brackets is an unevaluated block of code.  It becomes an instance of BlockContext and is usually passed as an argument."'].	(char = ${ or: [char = $}]) ifTrue: [^ '"A sequence of expressions separated by periods, when enclosed in curly braces, are evaluated to yield the elements of a new Array"'].	(char = $< or: [char = $>]) ifTrue: [^'"<primitive: xx> means that this method is usually preformed directly by the virtual machine.  If this method is primitive, its Smalltalk code is executed only when the primitive fails."'].	char = $^ ifTrue: [^'"Uparrow means return from this method.  The value returned is the expression following the ^"'].	char = $| ifTrue: [^'"Vertical bars enclose the names of the temporary variables used in this method.  In a block, the vertical bar separates the argument names from the rest of the code."'].	char = $_ ifTrue: [^'"Left arrow means assignment.  The value of the expression after the left arrow is stored into the variable before it."'].	char = $; ifTrue: [^'"Semicolon means cascading.  The message after the semicolon is sent to the same object which received the message before the semicolon."'].	char = $: ifTrue: [^'"A colon at the end of a keyword means that an argument is expected to follow.  Methods which take more than one argument have selectors with more than one keyword.  (One keyword, ending with a colon, appears before each argument).', '\\' withCRs, 'A colon before a variable name just inside a block means that the block takes an agrument.  (When the block is evaluated, the argument will be assigned to the variable whose name appears after the colon)."'].	char = $$ ifTrue: [^'"The single character following a dollar sign is made into an instance of class Character"'].	char = $- ifTrue: [^'"A minus sign in front of a number means a negative number."'].	char = $e ifTrue: [^'"An e in the middle of a number means that the exponent follows."'].	char = $r ifTrue: [^'"An r in the middle of a bunch of digits is an instance of Integer expressed in a certain radix.  The digits before the r denote the base and the digits after it express a number in that base."'].	char = Character space ifTrue: [^'"the space Character"'].	char = Character tab ifTrue: [^'"the tab Character"'].	char = Character cr ifTrue: [^'"the carriage return Character"'].	char = Character lf ifTrue: [^'"the line feed Character"'].	^nil! !!TextEditor methodsFor: 'nonediting/nontyping keys' stamp: 'nice 2/8/2010 10:05'!cursorEnd: characterStream 	"Private - Move cursor end of current line."	| string |	self closeTypeIn: characterStream.	string := paragraph text string.	self		moveCursor:			[:position | Preferences wordStyleCursorMovement				ifTrue:[| targetLine |					targetLine := paragraph lines at:(paragraph lineIndexOfCharacterIndex: position).					targetLine = paragraph lastLine						ifTrue:[targetLine last + 1]						ifFalse:[targetLine last]]				ifFalse:[					string						indexOfAnyOf: CharacterSet crlf						startingAt: position						ifAbsent:[string size + 1]]]		forward: true		specialBlock:[:dummy | string size + 1].	^true! !!PluggableTextMorph methodsFor: 'testing' stamp: 'dtl 2/10/2010 17:28'!isTextView	"True if the reciever is a view on a text model, such as a view on a TranscriptStream"	^true! !!TextEditor methodsFor: 'nonediting/nontyping keys' stamp: 'nice 2/8/2010 10:08'!cursorHome: characterStream 	"Private - Move cursor from position in current line to beginning of	current line. If control key is pressed put cursor at beginning of text"	| string |	string := paragraph text string.	self		moveCursor: [ :position | Preferences wordStyleCursorMovement				ifTrue:[					(paragraph lines at:(paragraph lineIndexOfCharacterIndex: position)) first]				ifFalse:[					(string						lastIndexOfAnyOf: CharacterSet crlf						startingAt: position - 1						ifAbsent:[0]) + 1]]		forward: false		specialBlock: [:dummy | 1].	^true! !!BalloonMorph methodsFor: 'initialization' stamp: 'cmm 2/7/2010 15:41'!defaultBorderWidth	"0 is appropriate for balloons because they are transient and wispy, not a solid object deserving a border."	^ 0! !!TextEditor methodsFor: 'menu messages' stamp: 'cmm 2/5/2010 13:56'!browseClassFromIt	"Launch a hierarchy browser for the class indicated by the current selection.  If multiple classes matching the selection exist, let the user choose among them."	| aClass |	self lineSelectAndEmptyCheck: [^ self].	aClass := Utilities classFromPattern: (self selection string copyWithout: Character cr) withCaption: 'choose a class to browse...'.	aClass ifNil: [^ morph flash].	SystemNavigation default spawnHierarchyForClass: aClass selector: nil! !!TextEditor methodsFor: 'typing/selecting keys' stamp: 'nice 2/8/2010 10:57'!tabCount	^ self class autoIndent		ifTrue:			[ | tabCount s i char |			s := paragraph string.			i := self stopIndex.			tabCount := 0.			[(i := i-1) > 0 and: [(char := s at: i) ~= Character cr and: [char ~= Character lf]]]				whileTrue:  "Count tabs and brackets (but not a leading bracket)"				[(char = Character tab and: [i < s size and: [(s at: i+1) ~= $[ ]]) ifTrue: [tabCount := tabCount + 1].				char = $[ ifTrue: [tabCount := tabCount + 1].				char = $] ifTrue: [tabCount := tabCount - 1]].			tabCount ]		ifFalse: [ 0 ]! !!MailComposition methodsFor: '*Morphic-Support' stamp: 'dtl 2/9/2010 22:34'!morphicOpen	"open an interface for sending a mail message with the given initial 	text "	| textMorph buttonsList sendButton attachmentButton |	morphicWindow := SystemWindow labelled: 'Mister Postman'.	morphicWindow model: self.	textEditor := textMorph := PluggableTextMorph						on: self						text: #messageText						accept: #messageText:						readSelection: nil						menu: #menuGet:shifted:.	morphicWindow addMorph: textMorph frame: (0 @ 0.1 corner: 1 @ 1).	buttonsList := AlignmentMorph newRow.	sendButton := PluggableButtonMorph				on: self				getState: nil				action: #submit.	sendButton		hResizing: #spaceFill;		vResizing: #spaceFill;		label: 'send message';		setBalloonText: 'Accept any unaccepted edits and add this to the queue of messages to be sent';		onColor: Color white offColor: Color white.	buttonsList addMorphBack: sendButton.		attachmentButton := PluggableButtonMorph				on: self				getState: nil				action: #addAttachment.	attachmentButton		hResizing: #spaceFill;		vResizing: #spaceFill;		label: 'add attachment';		setBalloonText: 'Send a file with the message';		onColor: Color white offColor: Color white.	buttonsList addMorphBack: attachmentButton.		morphicWindow addMorph: buttonsList frame: (0 @ 0 extent: 1 @ 0.1).	morphicWindow openInWorld! !!TextEditor methodsFor: 'menu messages' stamp: 'nice 2/8/2010 10:48'!selectedSymbol	"Return the currently selected symbol, or nil if none.  Spaces, tabs and returns are ignored"	| aString |	self hasCaret ifTrue: [^ nil].	aString := self selection string copyWithoutAll: CharacterSet separators.	aString size = 0 ifTrue: [^ nil].	Symbol hasInterned: aString  ifTrue: [:sym | ^ sym].	^ nil! !!PluggableTextMorph methodsFor: 'updating' stamp: 'dtl 2/10/2010 16:59'!update: aSymbol 	aSymbol ifNil: [^self].	aSymbol == #flash ifTrue: [^self flash].	aSymbol == getTextSelector 		ifTrue: 			[self setText: self getText.			^self setSelection: self getSelection].	aSymbol == getSelectionSelector 		ifTrue: [^self setSelection: self getSelection].	(aSymbol == #autoSelect and: [getSelectionSelector notNil]) 		ifTrue: 			[self handleEdit: 					[(textMorph editor)						abandonChangeText; "no replacement!!"						setSearch: model autoSelectString;						againOrSame: true]].	aSymbol == #clearUserEdits ifTrue: [^self hasUnacceptedEdits: false].	aSymbol == #wantToChange 		ifTrue: 			[self canDiscardEdits ifFalse: [^self promptForCancel].			^self].	aSymbol == #appendEntry 		ifTrue: 			[self handleEdit: [self appendEntry].			^self refreshWorld].	aSymbol == #clearText 		ifTrue: 			[self handleEdit: [self changeText: Text new].			^self refreshWorld].	aSymbol == #bs 		ifTrue: 			[self handleEdit: [self bsText].			^self refreshWorld].	aSymbol == #codeChangedElsewhere 		ifTrue: 			[self hasEditingConflicts: true.			^self changed].	aSymbol == #saveContents		ifTrue:			[^self saveContentsInFile]! !!TextEditor methodsFor: 'new selection' stamp: 'nice 2/8/2010 10:07'!encompassLine: anInterval	"Return an interval that encompasses the entire line"	| string left right |	string := paragraph text string.	left := (string lastIndexOfAnyOf: CharacterSet crlf startingAt: anInterval first - 1 ifAbsent:[0]) + 1.	right := (string indexOfAnyOf: CharacterSet crlf startingAt: anInterval last + 1 ifAbsent: [string size + 1]) - 1.	^left to: right! !!NewParagraph methodsFor: 'selection' stamp: 'nice 2/8/2010 14:24'!selectionRectsFrom: characterBlock1 to: characterBlock2 	"Return an array of rectangles representing the area between the two character blocks given as arguments."	| line1 line2 rects cb1 cb2 w |	characterBlock1 <= characterBlock2		ifTrue: [cb1 := characterBlock1.  cb2 := characterBlock2]		ifFalse: [cb2 := characterBlock1.  cb1 := characterBlock2].	cb1 = cb2 ifTrue:		[w := self caretWidth.		^ Array with: (cb1 topLeft - (w@0) corner: cb1 bottomLeft + ((w+1)@0))].	line1 := self lineIndexOfCharacterIndex: cb1 stringIndex.	line2 := self lineIndexOfCharacterIndex: cb2 stringIndex.	line1 = line2 ifTrue:		[^ Array with: (cb1 topLeft corner: cb2 bottomRight)].	rects := OrderedCollection new.	rects addLast: (cb1 topLeft corner: (lines at: line1) bottomRight).	line1+1 to: line2-1 do: [ :i |		| line |		line := lines at: i.		(line left = rects last left and: [ line right = rects last right ])			ifTrue: [ "new line has same margins as old one -- merge them, so that the caller gets as few rectangles as possible"					| lastRect |					lastRect := rects removeLast.					rects add: (lastRect bottom: line bottom) ]			ifFalse: [ "differing margins; cannot merge"					rects add: line rectangle ] ].	rects addLast: ((lines at: line2) topLeft corner: cb2 bottomLeft).	^ rects! !!MorphicProject methodsFor: 'editors' stamp: 'dtl 2/10/2010 14:20'!formEdit: aForm	"Start up an instance of the form editor on a form." 	self inform: 'A Morphic editor has not been implemented. Enter an MVC project to edit this form or use #bitEdit'! !!SyntaxError class methodsFor: '*Morphic-Support' stamp: 'dtl 2/8/2010 23:01'!morphicOpen: aSyntaxError	"Answer a view whose model is an instance of me."	self buildMorphicViewOn: aSyntaxError.	Project spawnNewProcessIfThisIsUI: Processor activeProcess.	^ Processor activeProcess suspend! !!NewParagraph methodsFor: 'selection' stamp: 'nice 2/8/2010 14:24'!characterBlockForIndex: index 	"Answer a CharacterBlock for the character in text at index."	| line |	line := lines at: (self lineIndexOfCharacterIndex: index).	^ ((text string isWideString) ifTrue: [		MultiCharacterBlockScanner new text: text textStyle: textStyle	] ifFalse: [		CharacterBlockScanner new text: text textStyle: textStyle	])		characterBlockAtPoint: nil index: ((index max: line first) min: text size+1)		in: line! !!MorphicProject methodsFor: 'editors' stamp: 'dtl 2/10/2010 13:18'!formViewClass	"Answer a class suitable for a view on a form or collection of forms"	^ GraphicalDictionaryMenu! !!TheWorldMenu methodsFor: 'construction' stamp: 'dtl 2/10/2010 10:40'!appearanceMenu	"Build the appearance menu for the world."	^self fillIn: (self menu: 'appearance...') from: {		{'preferences...' . { self . #openPreferencesBrowser} . 'Opens a "Preferences Browser" which allows you to alter many settings' } .		{'choose theme...' . { Preferences . #offerThemesMenu} . 'Presents you with a menu of themes; each item''s balloon-help will tell you about the theme.  If you choose a theme, many different preferences that come along with that theme are set at the same time; you can subsequently change any settings by using a Preferences Panel'} .		nil .		{'system fonts...' . { self . #standardFontDo} . 'Choose the standard fonts to use for code, lists, menus, window titles, etc.'}.		{'text highlight color...' . { Preferences . #chooseTextHighlightColor} . 'Choose which color should be used for text highlighting in Morphic.'}.		{'insertion point color...' . { Preferences . #chooseInsertionPointColor} . 'Choose which color to use for the text insertion point in Morphic.'}.		{'keyboard focus color' . { Preferences . #chooseKeyboardFocusColor} . 'Choose which color to use for highlighting which pane has the keyboard focus'}.		nil.		{#menuColorString . { Preferences . #toggleMenuColorPolicy} . 'Governs whether menu colors should be derived from the desktop color.'}.		{#roundedCornersString . { Preferences . #toggleRoundedCorners} . 'Governs whether morphic windows and menus should have rounded corners.'}.		nil.		{'full screen on' . { Project current . #fullScreenOn} . 'puts you in full-screen mode, if not already there.'}.		{'full screen off' . { Project current . #fullScreenOff} . 'if in full-screen mode, takes you out of it.'}.		nil.		{'set display depth...' . {self. #setDisplayDepth} . 'choose how many bits per pixel.'}.		{'set desktop color...' . {self. #changeBackgroundColor} . 'choose a uniform color to use as desktop background.'}.		{'set gradient color...' . {self. #setGradientColor} . 'choose second color to use as gradient for desktop background.'}.		{'use texture background' . { #myWorld . #setStandardTexture} . 'apply a graph-paper-like texture background to the desktop.'}.		nil.		{'clear turtle trails from desktop' . { #myWorld . #clearTurtleTrails} . 'remove any pigment laid down on the desktop by objects moving with their pens down.'}.		{'pen-trail arrowhead size...' . { Preferences. #setArrowheads} . 'choose the shape to be used in arrowheads on pen trails.'}.	}! !!NewParagraph methodsFor: 'private' stamp: 'nice 2/8/2010 14:26'!lineIndexForCharacter: characterIndex	"Deprecated"		^self lineIndexOfCharacterIndex: characterIndex ! !!TextEditor methodsFor: 'editing keys' stamp: 'nice 2/8/2010 10:03'!changeLfToCr: characterStream 	"Replace all LFs by CRs.	Triggered by Cmd-U -- useful when getting code from FTP sites	jmv- Modified to als change crlf by cr"		| fixed |	sensor keyboard.		"flush the triggering cmd-key character"		fixed := self selection string withSqueakLineEndings. 	self replaceSelectionWith: (Text fromString: fixed).	^ true! !!TextEditor methodsFor: 'editing keys' stamp: 'nice 2/9/2010 09:31'!inOutdent: characterStream delta: delta	"Add/remove a tab at the front of every line occupied by the selection. Flushes typeahead.  Derived from work by Larry Tesler back in December 1985.  Now triggered by Cmd-L and Cmd-R.  2/29/96 sw"	| realStart realStop lines startLine stopLine start stop adjustStart indentation numLines oldString newString newSize |	sensor keyboard.  "Flush typeahead"	"Operate on entire lines, but remember the real selection for re-highlighting later"	realStart := self startIndex.	realStop := self stopIndex - 1.	"Special case a caret on a line of its own, including weird case at end of paragraph"	(realStart > realStop and:				[realStart < 2 or: [(paragraph string at: realStart - 1) == Character cr or: [(paragraph string at: realStart - 1) == Character lf]]])		ifTrue:			[delta < 0				ifTrue:					[morph flash]				ifFalse:					[self replaceSelectionWith: Character tab asSymbol asText.					self selectAt: realStart + 1].			^true].	lines := paragraph lines.	startLine := paragraph lineIndexOfCharacterIndex: realStart.	"start on a real line, not a wrapped line"	[startLine = 1 or: [CharacterSet crlf includes: (paragraph string at: (lines at: startLine-1) last)]] whileFalse: [startLine := startLine - 1].	stopLine := paragraph lineIndexOfCharacterIndex: (realStart max: realStop).	start := (lines at: startLine) first.	stop := (lines at: stopLine) last.		"Pin the start of highlighting unless the selection starts a line"	adjustStart := realStart > start.	"Find the indentation of the least-indented non-blank line; never outdent more"	indentation := (startLine to: stopLine) inject: 1000 into:		[:m :l |		m min: (paragraph indentationOfLineIndex: l ifBlank: [:tabs | 1000])].	indentation + delta <= 0 ifTrue: ["^false"].	numLines := stopLine + 1 - startLine.	oldString := paragraph string copyFrom: start to: stop.	newString := oldString species new: oldString size + ((numLines * delta) max: 0).	"Do the actual work"	newSize := 0.	delta > 0		ifTrue: [| tabs |			tabs := oldString species new: delta withAll: Character tab.			oldString lineIndicesDo: [:startL :endWithoutDelimiters :endL |				startL < endWithoutDelimiters ifTrue: [newString replaceFrom: 1 + newSize to: (newSize := newSize + delta) with: tabs startingAt: 1].				newString replaceFrom: 1 + newSize to: (newSize := 1 + newSize + endL - startL) with: oldString startingAt: startL]]		ifFalse: [| tab |			tab := Character tab.			oldString lineIndicesDo: [:startL :endWithoutDelimiters :endL |				| i |				i := 0.				[i + delta < 0 and: [ i + startL <= endWithoutDelimiters and: [(oldString at: i + startL) == tab]]] whileTrue: [i := i + 1].				newString replaceFrom: 1 + newSize to: (newSize := 1 + newSize + endL - (i + startL)) with: oldString startingAt: i + startL]].	newSize < newString size ifTrue: [newString := newString copyFrom: 1 to: newSize].	"Adjust the range that will be highlighted later"	adjustStart ifTrue: [realStart := (realStart + delta) max: start].	realStop := realStop + newSize - oldString size.	"Replace selection"	self selectInvisiblyFrom: start to: stop.	self replaceSelectionWith: newString asText.	self selectFrom: realStart to: realStop. 	"highlight only the original range"	^ true! !!PluggableFileList methodsFor: '*Morphic-FileList' stamp: 'dtl 2/2/2010 21:12'!morphicOpenLabel: aString in: aWorld	"Open a view of an instance of me."	"PluggableFileList new morphicOpenLabel: 'foo' in: World"	| windowMorph volListMorph templateMorph fileListMorph leftButtonMorph middleButtonMorph rightButtonMorph |		self directory: directory.	windowMorph := (SystemWindow labelled: aString) model: self.	volListMorph := PluggableListMorph on: self		list: #volumeList		selected: #volumeListIndex		changeSelected: #volumeListIndex:		menu: #volumeMenu:.	volListMorph autoDeselect: false.	windowMorph addMorph: volListMorph frame: (0@0 corner: 0.4@0.5625).	templateMorph := PluggableTextMorph on: self		text: #pattern		accept: #pattern:.	templateMorph askBeforeDiscardingEdits: false.	windowMorph addMorph: templateMorph frame: (0@0.5625 corner: 0.4@0.75).	fileListMorph := PluggableListMorph on: self		list: #fileList		selected: #fileListIndex		changeSelected: #fileListIndex:		menu: #fileListMenu:.	windowMorph addMorph: fileListMorph frame: (0.4@0 corner: 1.0@0.75).	leftButtonMorph := PluggableButtonMorph 		on: self		getState: #leftButtonState		action: #leftButtonPressed.	leftButtonMorph		hResizing: #spaceFill;		vResizing: #spaceFill;		label: 'Cancel';		onColor: Color red offColor: Color red;		feedbackColor: Color orange;		borderWidth: 3.	middleButtonMorph := PluggableButtonMorph		on: self		getState: nil		action: nil.	middleButtonMorph		hResizing: #spaceFill;		vResizing: #spaceFill;		label: prompt;		onColor: Color lightYellow offColor: Color lightYellow;		feedbackColor: Color lightYellow;		borderWidth: 1.	rightButtonMorph := PluggableButtonMorph		on: self		getState: #rightButtonState		action: #rightButtonPressed.	rightButtonMorph		hResizing: #spaceFill;		vResizing: #spaceFill;		label: 'Accept';		onColor: Color green offColor: Color lightYellow;		feedbackColor: Color black;		borderWidth: (self canAccept ifTrue: [3] ifFalse: [1]).	"self canAccept ifFalse: [rightButtonMorph controller: NoController new]."	windowMorph		addMorph: leftButtonMorph frame: (0@0.75 corner: 0.25@1.0);		addMorph: middleButtonMorph frame: (0.25@0.75 corner: 0.75@1.0);		addMorph: rightButtonMorph frame: (0.75@0.75 corner: 1.0@1.0).	self changed: #getSelectionSel.    windowMorph openInWorld: aWorld.    [windowMorph model notNil]       whileTrue: [aWorld doOneCycle].    ^self result! !!NewParagraph methodsFor: 'private' stamp: 'nice 2/8/2010 14:26'!lineIndexOfCharacterIndex: index	"Answer the index of the line in which to select the character at index."	^ (self fastFindFirstLineSuchThat: [:line | line first > index]) - 1 max: 1! !!SyntaxError class methodsFor: '*Morphic-Support' stamp: 'sd 11/20/2005 21:28'!buildMorphicViewOn: aSyntaxError	"Answer an Morphic view on the given SyntaxError."	| window |	window := (SystemWindow labelled: 'Syntax Error') model: aSyntaxError.	window addMorph: (PluggableListMorph on: aSyntaxError list: #list			selected: #listIndex changeSelected: nil menu: #listMenu:)		frame: (0@0 corner: 1@0.15).	window addMorph: (PluggableTextMorph on: aSyntaxError text: #contents			accept: #contents:notifying: readSelection: #contentsSelection			menu: #codePaneMenu:shifted:)		frame: (0@0.15 corner: 1@1).	^ window openInWorldExtent: 380@220! !!MorphicProject methodsFor: 'editors' stamp: 'dtl 2/10/2010 15:26'!openImage: aForm name: fullName saveResource: aBoolean	"Open a view on an image. If aBoolean is true, save the image as a project resource."	aBoolean ifTrue:		[self resourceManager 			addResource: aForm 			url: (FileDirectory urlForFileNamed: fullName) asString].	(World drawingClass withForm: aForm) openInWorld! !!NewParagraph methodsFor: 'composition' stamp: 'nice 2/8/2010 14:24'!recomposeFrom: start to: stop delta: delta	"Recompose this paragraph.  The altered portion is between start and stop.	Recomposition may continue to the end of the text, due to a ripple effect.	Delta is the amount by which the current text is longer than it was	when its current lines were composed."	| startLine newLines |	"Have to recompose line above in case a word-break was affected."	startLine := (self lineIndexOfCharacterIndex: start) - 1 max: 1.	[startLine > 1 and: [(lines at: startLine-1) top = (lines at: startLine) top]]		whileTrue: [startLine := startLine - 1].  "Find leftmost of line pieces"	newLines := OrderedCollection new: lines size + 1.	1 to: startLine-1 do: [:i | newLines addLast: (lines at: i)].	text string isOctetString ifTrue: [		^ self composeLinesFrom: (lines at: startLine) first to: stop delta: delta			into: newLines priorLines: lines			atY: (lines at: startLine) top.	].	self multiComposeLinesFrom: (lines at: startLine) first to: stop delta: delta		into: newLines priorLines: lines		atY: (lines at: startLine) top.! !StandardFileMenu class removeSelector: #newFileFrom:!FileList removeSelector: #readContentsBrief:!FileList2 removeSelector: #setSelectedDirectoryTo:!FileList class removeSelector: #windowColorSpecification!FileList removeSelector: #initialize!StandardFileMenu removeSelector: #pattern:!StandardFileMenu class removeSelector: #oldFileStreamFrom:!PluggableFileListView removeSelector: #update:!FileList removeSelector: #deleteDirectory!FileList removeSelector: #buildContentPaneWith:!FileList removeSelector: #itemsForNoFile!FileList removeSelector: #serviceSortByDate!PluggableFileListView removeSelector: #label:!PluggableFileList removeSelector: #resultBlock:!PluggableFileList class removeSelector: #okToOpen:without:!StandardFileMenuResult removeSelector: #printOn:!StandardFileMenu removeSelector: #menuSelectionsArray:!StandardFileMenu removeSelector: #pathPartsString:!FileList2 class removeSelector: #morphicViewFileSelector!FileList2 removeSelector: #limitedSuperSwikiPublishDirectoryList!FileList2 removeSelector: #morphicDirectoryTreePane!FileList2 removeSelector: #servicesForFolderSelector!FileList removeSelector: #volumeMenu:!FileList removeSelector: #addPath:!StandardFileMenu class removeSelector: #newFileMenu:!FileList class removeSelector: #openEditorOn:editString:!StandardFileMenu removeSelector: #getTypedFileName:!FileList removeSelector: #readContentsEUCJP!FileList removeSelector: #serviceAddNewFile!FileList2 removeSelector: #optionalButtonSpecs:!FileList class removeSelector: #itemsForFile:!StandardFileMenu removeSelector: #newFileFrom:!FileList2 removeSelector: #directory:!FileList removeSelector: #sortBySize!FileList removeSelector: #myServicesForFile:suffix:!FileList removeSelector: #readContentsEUCKR!PluggableFileList removeSelector: #result!FileList class removeSelector: #removeObsolete!StandardFileMenuResult removeSelector: #directory:!FileList removeSelector: #readOnlyStream!PluggableFileList class removeSelector: #allFilesAndFoldersFileFilter!ModalSystemWindowView removeSelector: #displayLabelBoxes!FileList2 removeSelector: #morphicFileContentsPane!FileList2 removeSelector: #cancelHit!FileList class removeSelector: #registeredFileReaderClasses!FileList removeSelector: #serviceViewContentsInWorkspace!FileList removeSelector: #getHex!FileList removeSelector: #deleteFile!FileList removeSelector: #defaultContents!FileList removeSelector: #optionalButtonSpecs!PluggableFileList class removeSelector: #getFilePathNameWithExistenceCheck!PluggableFileList removeSelector: #fileVolumeIndex!FileList2 removeSelector: #removeLinefeeds!StandardFileMenu class removeSelector: #newFileMenu:withPattern:!ModalSystemWindowView removeSelector: #update:!FileList2 removeSelector: #addNewDirectory!StandardFileMenuResult removeSelector: #name!Smalltalk removeClassNamed: #StandardFileMenu!FileList2 class removeSelector: #textRow:!FileList removeSelector: #volumeListIndex:!FileList2 class removeSelector: #blueButtonText:textColor:color:inWindow:balloonText:selector:recipient:!FileList removeSelector: #serviceAllFileOptions!StandardFileMenu removeSelector: #newFileFrom:withPatternList:!FileList2 class removeSelector: #projectOnlySelectionBlock!FileList2 class removeSelector: #blueButtonText:textColor:inWindow:!StandardFileMenu removeSelector: #menuLabelsString:!PluggableFileList class removeSelector: #oldFileMenu:!PluggableFileList removeSelector: #canAccept!PluggableFileList class removeSelector: #existingFileValidateBlock!FileList2 removeSelector: #initialDirectoryList!FileList2 class removeSelector: #modalLoopOn:!FileList2 removeSelector: #blueButtonForService:textColor:inWindow:!FileList removeSelector: #modelWakeUp!FileList2 class removeSelector: #morphicViewProjectLoader2InWorld:!StandardFileMenu removeSelector: #patternList:!FileList removeSelector: #subDirectoriesOf:!FileList2 removeSelector: #listForPattern:!FileList removeSelector: #setDirectoryTo:!Smalltalk removeClassNamed: #FileList!StandardFileMenu class removeSelector: #oldFileMenu:withPattern:!FileList removeSelector: #fullName!FileList removeSelector: #itemsForFile:!FileList2 removeSelector: #changeDirectoryTo:!FileList removeSelector: #spawn:!FileList removeSelector: #directory:!FileList removeSelector: #registeredFileReaderClasses!ModalSystemWindowView removeSelector: #initialize!FileList removeSelector: #pattern!StandardFileMenu class removeSelector: #oldFile!PluggableFileList removeSelector: #openLabel:!ModalSystemWindowView removeSelector: #borderWidth:!PluggableFileListView removeSelector: #acceptButtonView:!FileList2 removeSelector: #dirSelectionBlock:!PluggableFileList removeSelector: #beAccepted!FileList removeSelector: #suffixOfSelectedFile!FileList2 removeSelector: #okHit!PluggableFileList class removeSelector: #getFilePathNameDialogWithExistenceCheck!StandardFileMenuResult class removeSelector: #directory:name:!FileList removeSelector: #readContentsUTF8!StandardFileMenu removeSelector: #computeLabelParagraph!PluggableFileList removeSelector: #listForPattern:!FileList removeSelector: #directoryNameOf:!FileList removeSelector: #serviceGet!FileList removeSelector: #servicesFromSelectorSpecs:!FileList2 class removeSelector: #morphicViewProjectSaverFor:!FileList2 removeSelector: #serviceOpenProjectFromFile!FileList2 removeSelector: #getSelectedFile!FileList removeSelector: #addNewDirectory!PluggableFileList class removeSelector: #fileNameSelectedAcceptBlock!PluggableFileListView removeSelector: #updateAcceptButton!FileList2 removeSelector: #postOpen!FileList2 class removeSelector: #enableTypeButtons:info:forDir:!FileList2 removeSelector: #morphicDirectoryTreePaneFiltered:!FileList2 class removeSelector: #update:in:fileTypeRow:morphUp:!PluggableFileList removeSelector: #startUpWithCaption:!FileList2 class removeSelector: #morphicViewFileSelectorForSuffixes:!FileList removeSelector: #fileName!FileList class removeSelector: #registerFileReader:!FileList removeSelector: #serviceAddNewDirectory!FileList removeSelector: #pathAndPattern:!FileList removeSelector: #volumeList!FileList2 class removeSelector: #prototypicalToolWindow!FileList removeSelector: #sortingByDate!FileList2 removeSelector: #limitedSuperSwikiDirectoryList!FileList removeSelector: #listForPattern:!TextEditor removeSelector: #indent:fromStream:toStream:!FileList2 class removeSelector: #endingSpecs!FileList removeSelector: #fileListMenu:!FileList class removeSelector: #registerInFlapsRegistry!FileList2 class removeSelector: #modalFileSelectorForSuffixes:directory:!Smalltalk removeClassNamed: #PluggableFileList!FileList removeSelector: #selectedPath!StandardFileMenuResult removeSelector: #directory:name:!PluggableFileList removeSelector: #fileSelectedMenu:!StandardFileMenu removeSelector: #directoryNamesString:!PluggableFileList class removeSelector: #getFile!PluggableFileList removeSelector: #fileFilterBlock:!FileList2 class removeSelector: #morphicViewFolderSelector!FileList removeSelector: #sortByName!FileList2 removeSelector: #okayAndCancelServices!StandardFileMenuResult removeSelector: #isDirectory!FileList2 class removeSelector: #morphicViewProjectLoader!PluggableFileList removeSelector: #fileString:!FileList removeSelector: #get!FileList2 class removeSelector: #blueButtonText:textColor:inWindow:balloonText:selector:recipient:!FileList removeSelector: #putUpdate:!PluggableFileList class removeSelector: #open!FileList class removeSelector: #itemsForDirectory:!FileList removeSelector: #serviceSortBySize!FileList removeSelector: #getButtonRow!StandardFileMenu class removeSelector: #newFile!ModalSystemWindowView removeSelector: #display!FileList2 removeSelector: #universalButtonServices!FileList2 removeSelector: #morphicPatternPane!FileList removeSelector: #serviceCopyName!FileList2 removeSelector: #directory!PluggableFileList removeSelector: #startUpWithCaption:at:!PluggableFileList class removeSelector: #okToOverwrite:!FileList removeSelector: #updateFileList!FileList2 class removeSelector: #openMorphicViewInWorld!FileList removeSelector: #optionalButtonHeight!FileList removeSelector: #dirAndFileName!FileList2 removeSelector: #openProjectFromFile!FileList removeSelector: #itemsForAnyFile!FileList2 class removeSelector: #projectOnlySelectionMethod:!FileList class removeSelector: #prototypicalToolWindow!FileList removeSelector: #buildEditorWith:!FileList removeSelector: #removeServer!StandardFileMenu class removeSelector: #oldFileFrom:!FileList removeSelector: #entriesMatching:!StandardFileMenu class removeSelector: #newFileStreamFrom:!FileList removeSelector: #serviceDeleteFile!StandardFileMenu class removeSelector: #oldFileFrom:withPattern:!FileList2 removeSelector: #updateDirectory!FileList2 class removeSelector: #modalFileSelector!FileList class removeSelector: #open!FileList removeSelector: #hasMoreDirectories:!PluggableFileList removeSelector: #open!PluggableFileList removeSelector: #prompt:!FileList removeSelector: #itemsForDirectory:!StandardFileMenu removeSelector: #newFileFrom:withPattern:!FileList removeSelector: #fileSelectedMenu:!FileList removeSelector: #contents!FileList2 class removeSelector: #modalFolderSelectorForProjectLoad!FileList removeSelector: #recentDirs!FileList removeSelector: #volumeListIndex!StandardFileMenuResult removeSelector: #directory!FileList removeSelector: #sortBlock!FileList2 removeSelector: #currentDirectorySelected!StandardFileMenu class removeSelector: #oldFileMenu:!FileList2 class removeSelector: #modalFolderSelector:!FileList removeSelector: #resort:!FileList removeSelector: #buildWith:!FileList2 class removeSelector: #morphicViewNoFile!StandardFileMenu removeSelector: #oldFileFrom:!FileList removeSelector: #folderString!FileList2 class removeSelector: #morphicViewProjectLoader2InWorld:reallyLoad:dirFilterType:!FileList removeSelector: #universalButtonServices!FileList removeSelector: #fullFileListMenu:shifted:!StandardFileMenu removeSelector: #oldFileFrom:withPattern:!FileList removeSelector: #buildButtonPaneWith:!FileList2 class removeSelector: #morphicViewProjectLoader2InWorld:reallyLoad:!FileList2 class removeSelector: #hideSqueakletDirectoryBlock!FileList class removeSelector: #suffixOf:!FileList2 removeSelector: #okHitForProjectLoader!FileList class removeSelector: #newOn:!FileList2 class removeSelector: #morphicViewFileSelectorForSuffixes:directory:!FileList2 removeSelector: #getSelectedDirectory!StandardFileMenu removeSelector: #fileNamesString:!FileList removeSelector: #pathAndPattern!FileList removeSelector: #buildPatternInputWith:!FileList removeSelector: #directory!PluggableFileList removeSelector: #openAsMorphLabel:inWorld:!FileList removeSelector: #renameFile!FileList removeSelector: #readContentsAsEncoding:!StandardFileMenuResult removeSelector: #isCommand!PluggableFileList class removeSelector: #sfmResultBlock!PluggableFileList removeSelector: #rightButtonPressed!FileList removeSelector: #release!PluggableFileList removeSelector: #fileListIndex!FileList removeSelector: #veryDeepFixupWith:!FileList class removeSelector: #isReaderNamedRegistered:!FileList removeSelector: #serviceGetEncodedText!FileList2 class removeSelector: #morphicViewFolderSelector:!Smalltalk removeClassNamed: #PluggableFileListView!PluggableFileList class removeSelector: #pathNameResultBlock!FileList2 removeSelector: #serviceCancel!PluggableFileList class removeSelector: #getFolderDialog!FileList removeSelector: #viewContentsInWorkspace!StandardFileMenu class removeSelector: #oldFileStream!FileList removeSelector: #isFileSelected!FileList removeSelector: #serviceGetHex!FileList removeSelector: #executeService:!Smalltalk removeClassNamed: #StandardFileMenuResult!FileList2 class removeSelector: #selectionBlockForSuffixes:!FileList removeSelector: #fileListIndex!ModalSystemWindowView removeSelector: #doModalDialog!FileList removeSelector: #sortingBySize!FileList removeSelector: #put:!PluggableFileList removeSelector: #leftButtonState!FileList removeSelector: #buildFileListWith:!FileList removeSelector: #getSelectedPath!FileList removeSelector: #serviceSortByName!PluggableFileList removeSelector: #addNew:byEvaluating:!FileList2 class removeSelector: #modalFileSelectorForSuffixes:!FileList removeSelector: #readContentsCNGB!PluggableFileList removeSelector: #leftButtonPressed!FileList removeSelector: #sortByDate!PluggableFileList class removeSelector: #getFilePathNameDialog!PluggableFileList class removeSelector: #newFileMenu:!FileList2 removeSelector: #listForPatterns:!FileList removeSelector: #selectEncoding!FileList class removeSelector: #new!StandardFileMenu removeSelector: #advance:containingDirectoriesFrom:!StandardFileMenu removeSelector: #startUpWithCaption:at:!FileList removeSelector: #rootDirectoryList!PluggableFileList class removeSelector: #getFolder!FileList2 removeSelector: #importImage!FileList removeSelector: #addNewFile!FileList2 removeSelector: #labelString!StandardFileMenu class removeSelector: #oldFileMenu:withPatternList:!FileList removeSelector: #serviceCompressFile!FileList removeSelector: #defaultEncoderFor:!FileList2 class removeSelector: #blueButtonText:textColor:color:inWindow:!FileList2 removeSelector: #saveLocalOnlyHit!FileList removeSelector: #modelSleep!FileList removeSelector: #addNew:byEvaluating:!PluggableFileList removeSelector: #validateBlock:!PluggableFileList class removeSelector: #alwaysValidateBlock!ModalSystemWindowView removeSelector: #defaultControllerClass!FileList2 removeSelector: #servicesForProjectLoader!PluggableFileList removeSelector: #rightButtonState!ModalSystemWindowView removeSelector: #displayBorder!FileList removeSelector: #pattern:!FileList2 removeSelector: #directoryChangeBlock:!PluggableFileList class removeSelector: #alwaysAcceptBlock!FileList removeSelector: #fileNameFromFormattedItem:!FileList2 class removeSelector: #modalFolderSelector!Smalltalk removeClassNamed: #FileList2!FileList2 removeSelector: #dropDestinationDirectory:event:!PluggableFileList class removeSelector: #allFoldersFileFilter!PluggableFileList class removeSelector: #getFilePathName!FileList removeSelector: #readContentsHex:!FileList2 removeSelector: #openImageInWindow!FileList removeSelector: #updateButtonRow!PluggableFileList removeSelector: #defaultBackgroundColor!FileList2 class removeSelector: #addFullPanesTo:from:!FileList2 removeSelector: #publishingServers!FileList2 removeSelector: #initialize!PluggableFileList class removeSelector: #fileNameResultBlock!FileList2 removeSelector: #serviceOkay!FileList removeSelector: #fileListIndex:!PluggableFileList removeSelector: #canAcceptBlock:!FileList removeSelector: #readServerBrief!FileList2 removeSelector: #deleteDirectory!FileList removeSelector: #listForPatterns:!FileList class removeSelector: #allRegisteredServices!Smalltalk removeClassNamed: #ModalSystemWindowView!FileList class removeSelector: #unload!FileList removeSelector: #serviceBroadcastUpdate!FileList removeSelector: #setFileStream:!FileList2 removeSelector: #isDirectoryList:!FileList2 removeSelector: #directoryNamesFor:!FileList removeSelector: #buildDirectoryTreeWith:!FileList removeSelector: #copyName!FileList class removeSelector: #initialize!FileList removeSelector: #offerAllFileOptions!StandardFileMenu class removeSelector: #newFileStream!FileList removeSelector: #perform:orSendTo:!ModalSystemWindowView removeSelector: #backgroundColor!PluggableFileList removeSelector: #initialize!StandardFileMenu class removeSelector: #newFileMenu:withPatternList:!FileList removeSelector: #serviceRenameFile!FileList removeSelector: #update:!PluggableFileList class removeSelector: #checkExistingFileValidateBlock!FileList removeSelector: #getEncodedText!FileList2 removeSelector: #modalView:!FileList2 removeSelector: #morphicFileListPane!FileList removeSelector: #noFileSelectedMenu:!FileList removeSelector: #fileContentsMenu:shifted:!FileList removeSelector: #labelString!FileList2 class removeSelector: #modalFolderSelectorForProject:!PluggableFileList removeSelector: #validate!PluggableFileList removeSelector: #fileString!FileList2 removeSelector: #fileSelectionBlock:!StandardFileMenu removeSelector: #confirmExistingFiles:!FileList2 class removeSelector: #morphicViewImageViewer!FileList2 class removeSelector: #morphicViewGeneralLoaderInWorld:!StandardFileMenuResult removeSelector: #name:!StandardFileMenu removeSelector: #menuLinesArray:!FileList removeSelector: #readContentsShiftJIS!FileList removeSelector: #dynamicButtonServices!FileList removeSelector: #askServerInfo!FileList2 removeSelector: #optionalButtonSpecs!FileList removeSelector: #fileNameFormattedFrom:sizePad:!StandardFileMenu removeSelector: #makeFileMenuFor:!FileList removeSelector: #buildCodePaneWith:!PluggableFileList class removeSelector: #directoryResultBlock!FileList removeSelector: #sortingByName!FileList2 removeSelector: #optionalButtonRow!FileList class removeSelector: #unregisterFileReader:!FileList removeSelector: #compressFile!FileList2 removeSelector: #specsForImageViewer!StandardFileMenu removeSelector: #oldFileFrom:withPatternList:!FileList class removeSelector: #openFileDirectly!FileList class removeSelector: #detectService:ifNone:!PluggableFileList class removeSelector: #putFile!FileList removeSelector: #fileList!FileList removeSelector: #buttonSelectorsToSuppress!FileList initialize!