"Change Set:		8730Kernel-nice.365Kernel-nice.365:move #basicType to EToysremove some #or:or: #and:and: sendschange categorizer duplicate strategyKernel-ar.364:Add Behavior>>allTraits as another backstop for traits unloading."!!Metaclass methodsFor: 'fileIn/Out' stamp: 'nice 1/1/2010 22:05'!nonTrivial 	"Answer whether the receiver has any methods or instance variables."	^ self instVarNames size > 0 or: [self methodDict size > 0 or: [self hasTraitComposition]]! !!BlockContext methodsFor: 'evaluating' stamp: 'nice 1/1/2010 22:04'!valueSupplyingAnswers: aListOfPairs	"evaluate the block using a list of questions / answers that might be called upon to	automatically respond to Object>>confirm: or FillInTheBlank requests"	^ [self value] 		on: ProvideAnswerNotification		do: 			[:notify | | answer caption |						caption := notify messageText withSeparatorsCompacted. "to remove new lines"			answer := aListOfPairs				detect: 					[:each | caption = each first						or: [(caption includesSubstring: each first caseSensitive: false)						or: [each first match: caption]]]					ifNone: [nil].			answer				ifNotNil: [notify resume: answer second]				ifNil: 					[ | outerAnswer |					outerAnswer := ProvideAnswerNotification signal: notify messageText.					outerAnswer 						ifNil: [notify resume] 						ifNotNil: [notify resume: outerAnswer]]]! !!Categorizer methodsFor: 'accessing' stamp: 'nice 12/28/2009 16:49'!changeFromCategorySpecs: categorySpecs 	"Tokens is an array of categorySpecs as scanned from a browser 'reorganize' pane, or built up by some other process, such as a scan of an environment."	| newCategories newStops temp cc currentStop oldElements newElements |	oldElements := elementArray asSet.	newCategories := Array new: categorySpecs size.	newStops := Array new: categorySpecs size.	currentStop := 0.	newElements := WriteStream on: (Array new: 16).	1 to: categorySpecs size do: 		[:i | | catSpec selectors |		catSpec := categorySpecs at: i.		newCategories at: i put: catSpec first asSymbol.		selectors := catSpec allButFirst collect: [:each | each isSymbol							ifTrue: [each]							ifFalse: [each printString asSymbol]].		selectors asSortedCollection do:			[:elem |			(oldElements remove: elem ifAbsent: [nil]) notNil ifTrue:				[newElements nextPut: elem.				currentStop := currentStop+1]].		newStops at: i put: currentStop].	"Ignore extra elements but don't lose any existing elements!!"	oldElements := oldElements collect:		[:elem | Array with: (self categoryOfElement: elem) with: elem].	newElements := newElements contents.	categoryArray := newCategories.	(cc := categoryArray asSet) size = categoryArray size ifFalse: ["has duplicate element"		temp := categoryArray asOrderedCollection.		temp removeAll: categoryArray asSet asOrderedCollection.		temp do: [:dup | | ii dup2 num | 			ii := categoryArray indexOf: dup.			num := 2..			[dup2 := (dup,' #', num printString) asSymbol.  cc includes: dup2] whileTrue: [num := num + 1].			cc add: dup2.			categoryArray at: ii put: dup2]].	categoryStops := newStops.	elementArray := newElements.	oldElements do: [:pair | self classify: pair last under: pair first].! !!Timespan methodsFor: 'ansi protocol' stamp: 'nice 1/1/2010 21:49'!= comparand	^ self class = comparand class 		and: [ self start = comparand start		and: [ self duration = comparand duration ] ].! !!BlockClosure methodsFor: 'evaluating' stamp: 'nice 1/1/2010 22:04'!valueSupplyingAnswers: aListOfPairs	"evaluate the block using a list of questions / answers that might be called upon to	automatically respond to Object>>confirm: or FillInTheBlank requests"	^ [self value] 		on: ProvideAnswerNotification		do: 			[:notify | | answer caption |						caption := notify messageText withSeparatorsCompacted. "to remove new lines"			answer := aListOfPairs				detect: 					[:each | caption = each first						or: [(caption includesSubstring: each first caseSensitive: false)						or: [each first match: caption]]]					ifNone: [nil].			answer				ifNotNil: [notify resume: answer second]				ifNil: 					[ | outerAnswer |					outerAnswer := ProvideAnswerNotification signal: notify messageText.					outerAnswer 						ifNil: [notify resume] 						ifNotNil: [notify resume: outerAnswer]]]! !!Behavior methodsFor: 'traits' stamp: 'ar 1/3/2010 13:10'!allTraits	"Backstop. When traits are unloaded there are no traits hiding here."	^#()! !StringHolder removeSelector: #openSyntaxView!Number removeSelector: #basicType!Object removeSelector: #newTileMorphRepresentative!Object removeSelector: #basicType!Boolean removeSelector: #basicType!