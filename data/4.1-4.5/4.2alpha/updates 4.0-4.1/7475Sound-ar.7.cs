"Change Set:		7475Sound-ar.7Sound-ar.7:UIManagerization. Replaces all the trivial references to PopUpMenu, SelectionMenu, CustomMenu, and FillInTheBlank."!!PianoRollScoreMorph methodsFor: 'editing' stamp: 'ar 8/6/2009 19:01'!insertTransposed	| delta transposedNotes |	(delta := UIManager default 		chooseFrom: ((12 to: -12 by: -1) collect: [:i | i printString])		values: ((12 to: -12 by: -1) collect: [:i | i printString])		title: 'offset...') ifNil: [^self].	transposedNotes := NotePasteBuffer 				collect: [:note | note copy midiKey: note midiKey + delta].	selection isNil ifTrue: [^self].	score insertEvents: transposedNotes at: self selection.	scorePlayer updateDuration.	self rebuildFromScore! !!SimpleMIDIPort class methodsFor: 'utilities' stamp: 'ar 8/6/2009 20:25'!outputPortNumFromUser	"Prompt the user for a MIDI output port. Answer a port number, or nil if the user does not select a port or if MIDI is not supported on this platform."	"SimpleMIDIPort outputPortNumFromUser"	| portCount dir portList |	portCount := self primPortCount.	portCount = 0 ifTrue: [^ nil].	portList := OrderedCollection new.	0 to: portCount - 1 do:[:i |		dir := self primPortDirectionalityOf: i.		(dir = 2) | (dir = 3) ifTrue:[portList add: i]].	^UIManager default		chooseFrom: (portList collect:[:i| self portDescription: i])		values: portList		title: 'MIDI port for output:' translated.! !!AbstractSound class methodsFor: 'sound library-file in/out' stamp: 'ar 8/6/2009 18:42'!storeFiledInSound: snd named: sndName	"Store the given sound in the sound library. Use the given name if it isn't in use, otherwise ask the user what to do."	| choice i |	(Sounds includesKey: sndName) ifFalse: [  "no name clash"		Sounds at: sndName put: snd.		^ self].	(Sounds at: sndName) == UnloadedSnd ifTrue: [		"re-loading a sound that was unloaded to save space"		Sounds at: sndName put: snd.		^ self].	"the given sound name is already used"	choice := UIManager default 		chooseFrom: #('replace the existing sound' 'rename the new sound' 'skip it')		values: #('replace the existing sound' 'rename the new sound' 'skip it')		title: '"', sndName, '" has the same name as an existing sound'.	(choice beginsWith: 'replace') ifTrue: [		Sounds at: sndName put: snd.		^ self].	(choice beginsWith: 'rename') ifTrue: [		i := 2.		[Sounds includesKey: (sndName, ' v', i printString)] whileTrue: [i := i + 1].		Sounds at: (sndName, ' v', i printString) put: snd].! !!GraphMorph methodsFor: '*sound' stamp: 'ar 8/6/2009 20:40'!readDataFromFile	| fileName |	fileName := UIManager default		request: 'File name?' translated		initialAnswer: ''.	fileName isEmpty ifTrue: [^ self].	(StandardFileStream isAFileNamed: fileName) ifFalse: [		^ self inform: 'Sorry, I cannot find that file' translated].	self data: (SampledSound fromAIFFfileNamed: fileName) samples.! !!SimpleMIDIPort class methodsFor: 'utilities' stamp: 'ar 8/6/2009 20:24'!inputPortNumFromUser	"Prompt the user for a MIDI input port. Answer a port number, or nil if the user does not select a port or if MIDI is not supported on this platform."	"SimpleMIDIPort inputPortNumFromUser"	| portCount dir portList |	portCount _ self primPortCount.	portCount = 0 ifTrue: [^ nil].	portList := OrderedCollection new.	0 to: portCount - 1 do:[:i |		dir := self primPortDirectionalityOf: i.		(dir = 1) | (dir = 3) ifTrue:[portList add: i]].	^UIManager default		chooseFrom: (portList collect:[:i| self portDescription: i])		values: portList		title: 'MIDI port for input:' translated! !!ScorePlayerMorph methodsFor: 'menu' stamp: 'ar 8/6/2009 20:44'!saveAsWAV	"Create a stereo WAV audio file with the result of performing my score."	| fileName |	fileName := UIManager default request: 'New file name?' translated.	fileName isEmpty ifTrue: [^ self].	(fileName asLowercase endsWith: '.wav') ifFalse: [		fileName := fileName, '.wav'].	scorePlayer storeWAVOnFileNamed: fileName.! !!ScorePlayerMorph methodsFor: 'menu' stamp: 'ar 8/6/2009 20:44'!saveAsSunAudio	"Create a stereo Sun audio file with the result of performing my score."	| fileName |	fileName := UIManager default request: 'New file name?' translated.	fileName isEmpty ifTrue: [^ self].	(fileName asLowercase endsWith: '.au') ifFalse: [		fileName := fileName, '.au'].	scorePlayer storeSunAudioOnFileNamed: fileName.! !!ScorePlayerMorph methodsFor: 'menu' stamp: 'ar 8/6/2009 20:43'!saveAsAIFF	"Create a stereo AIFF audio file with the result of performing my score."	| fileName |	fileName := UIManager default request: 'New file name?' translated.	fileName isEmpty ifTrue: [^ self].	(fileName asLowercase endsWith: '.aif') ifFalse: [		fileName := fileName, '.aif'].	scorePlayer storeAIFFOnFileNamed: fileName.! !MidiInputMorph removeSelector: #makeControls!MidiInputMorph removeSelector: #defaultBorderWidth!MidiInputMorph removeSelector: #updateInstrumentsFromLibraryExcept:!MidiInputMorph removeSelector: #closeMIDIPort!MidiInputMorph removeSelector: #setMIDIPort!MidiInputMorph removeSelector: #instrumentChoicesForChannel:!MidiInputMorph removeSelector: #channelNumAndMuteButtonFor:!MidiInputMorph removeSelector: #panAndVolControlsFor:!Smalltalk removeClassNamed: #MidiInputMorph!MidiInputMorph removeSelector: #makeRow!MidiInputMorph removeSelector: #addChannel!MidiInputMorph removeSelector: #toggleOnOff!MidiInputMorph removeSelector: #initialize!MidiInputMorph removeSelector: #invokeMenu!MidiInputMorph removeSelector: #atChannel:from:selectInstrument:!MidiInputMorph removeSelector: #defaultColor!MidiInputMorph removeSelector: #disableReverb:!MidiInputMorph removeSelector: #addChannelControlsFor:!