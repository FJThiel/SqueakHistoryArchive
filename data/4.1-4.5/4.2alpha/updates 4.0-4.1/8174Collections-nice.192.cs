"Change Set:		8174Collections-nice.192Collections-nice.192:Some changes for handling cr/lf/crlf line delimiters in String"!!String methodsFor: 'accessing' stamp: 'nice 11/16/2009 13:23'!lineCount	"Answer the number of lines represented by the receiver, where every line delimiter CR, LF or CRLF pair adds one line."	| lineCount |	lineCount := 0.	self lineIndicesDo: [:start :endWithoutDelimiters :end |		lineCount := lineCount + 1].	^lineCount! !!String methodsFor: 'accessing' stamp: 'nice 11/16/2009 13:13'!lineIndicesDo: aBlock	"execute aBlock with 3 arguments for each line:	- start index of line	- end index of line without line delimiter	- end index of line including line delimiter(s) CR, LF or CRLF"		| start end endWithoutDelimiters |	start := 1.	[ start <= self size ] whileTrue: [		end := self indexOfAnyOf: CSLineEnders startingAt: start ifAbsent: [ self size + 1 ].		endWithoutDelimiters := end - 1.		(end < self size				and: [(self at: end + 1) = Character lf				and: [(self at: end)	= Character cr]])			ifTrue: [end := end + 1].		aBlock value: start value: endWithoutDelimiters value: end.		start := end + 1]! !!String methodsFor: 'paragraph support' stamp: 'nice 11/16/2009 13:06'!indentationIfBlank: aBlock	"Answer the number of leading tabs in the receiver.  If there are	 no visible characters, pass the number of tabs to aBlock and return its value."	| reader leadingTabs lastSeparator tab ch |	tab := Character tab.	reader := ReadStream on: self.	leadingTabs := 0.	[reader atEnd not and: [(ch := reader next) = tab]]		whileTrue: [leadingTabs := leadingTabs + 1].	lastSeparator := leadingTabs.	[reader atEnd not and: [ch isSeparator and: [(CSLineEnders includes: ch) not]]]		whileTrue: [lastSeparator := lastSeparator + 1. ch := reader next].	(lastSeparator >= self size or: [CSLineEnders includes: ch])		ifTrue: [^aBlock value: leadingTabs].	^ leadingTabs! !!String methodsFor: 'accessing' stamp: 'nice 11/16/2009 12:26'!linesDo: aBlock	"Execute aBlock with each line in this string. The terminating line delimiters CR, LF or CRLF pairs are not included in what is passed to aBlock"	self lineIndicesDo: [:start :endWithoutDelimiters :end |		aBlock value: (self copyFrom: start to: endWithoutDelimiters)]! !!SequenceableCollection methodsFor: 'accessing' stamp: 'nice 11/16/2009 10:31'!lastIndexOfAnyOf: aCollection startingAt: lastIndex ifAbsent: exceptionBlock	"Answer the index of the last occurence of anElement within the  	receiver. If the receiver does not contain anElement, answer the	result of evaluating the argument, exceptionBlock."	lastIndex to: 1 by: -1 do:		[:index |		(aCollection includes: (self at: index)) ifTrue: [^ index]].	^ exceptionBlock value! !!String methodsFor: 'accessing' stamp: 'nice 11/16/2009 13:23'!lineNumber: anIndex	"Answer a string containing the characters in the given line number."	| lineCount |	lineCount := 0.	self lineIndicesDo: [:start :endWithoutDelimiters :end |		(lineCount := lineCount + 1) = anIndex ifTrue: [^self copyFrom: start to: endWithoutDelimiters]].	^nil! !!String methodsFor: 'accessing' stamp: 'nice 11/16/2009 12:32'!lineCorrespondingToIndex: anIndex	"Answer a string containing the line at the given character position."	self lineIndicesDo: [:start :endWithoutDelimiters :end |		anIndex <= end ifTrue: [^self copyFrom: start to: endWithoutDelimiters]].	^''! !