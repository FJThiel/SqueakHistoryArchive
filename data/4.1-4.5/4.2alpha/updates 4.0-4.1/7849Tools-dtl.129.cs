"Change Set:		7849Tools-dtl.129Tools-dtl.129:Reinitialize each instance of ProcessBrowser on image restart if its autoUpdateProcess is running. Fix implemented for both MVC and Morphic. Reference Mantis 1578.Tools-ar.126:Face Lift: Minor Botox injections to lift the height of various button rows.Tools-ar.127:Merge Tools-tfel.126, Tools-ar.126.Tools-dtl.128:Make DeferredActionStandardSystemController an empty stub, retained for the time being to provide backward compatibility for external packages. Implementation has been moved to Controller. Reference Mantis 1578."!Model subclass: #ProcessBrowser	instanceVariableNames: 'selectedProcess selectedContext methodText processList processListIndex stackList stackListIndex sourceMap selectedClass selectedSelector searchString autoUpdateProcess lastUpdate startedCPUWatcher'	classVariableNames: 'Browsers SuspendedProcesses WellKnownProcesses'	poolDictionaries: ''	category: 'Tools-Process Browser'!StandardSystemController subclass: #DeferredActionStandardSystemController	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-Process Browser'!!ProcessBrowser class methodsFor: 'CPU utilization' stamp: 'dtl 9/23/2009 20:36'!tallyCPUUsageFor: seconds every: msec	"Compute CPU usage using a msec millisecond sample for the given number of seconds,	then dump the usage statistics on the Transcript. The UI is free to continue, meanwhile"	"ProcessBrowser tallyCPUUsageFor: 10 every: 100"	| promise |	promise := Processor tallyCPUUsageFor: seconds every: msec.	[ | tally |		tally := promise value.		Smalltalk isMorphic			ifTrue: [ Project current addDeferredUIMessage: [ self dumpTallyOnTranscript: tally ] ]			ifFalse: [ [ Transcript open ] forkAt: Processor userSchedulingPriority.					[ (Delay forSeconds: 1) wait.					self dumpTallyOnTranscript: tally ] forkAt: Processor userSchedulingPriority.]	] fork.! !!ProcessBrowser class methodsFor: 'system startup' stamp: 'dtl 9/23/2009 20:34'!startUp	Browsers		do: [:ea | | paused | ea isAutoUpdatingPaused				ifTrue: [ea initialize; startAutoUpdate]]! !!ProcessBrowser methodsFor: 'views' stamp: 'dtl 12/17/2005 11:23'!openAsMVC	"Create a pluggable version of me, answer a window"	| window processListView stackListView methodTextView |	window := StandardSystemView new model: self controller: StandardSystemController new.	window borderWidth: 1.	processListView := PluggableListView				on: self				list: #processNameList				selected: #processListIndex				changeSelected: #processListIndex:				menu: #processListMenu:				keystroke: #processListKey:from:.	processListView		window: (0 @ 0 extent: 300 @ 200).	window addSubView: processListView.	stackListView := PluggableListView				on: self				list: #stackNameList				selected: #stackListIndex				changeSelected: #stackListIndex:				menu: #stackListMenu:				keystroke: #stackListKey:from:.	stackListView		window: (300 @ 0 extent: 300 @ 200).	window addSubView: stackListView toRightOf: processListView.	methodTextView := PluggableTextView				on: self				text: #selectedMethod				accept: nil				readSelection: nil				menu: nil.	methodTextView askBeforeDiscardingEdits: false.	methodTextView		window: (0 @ 200 corner: 600 @ 400).	window addSubView: methodTextView below: processListView.	window setUpdatablePanesFrom: #(#processNameList #stackNameList ).	window label: 'Process Browser'.	window minimumSize: 300 @ 200.	window subViews		do: [:each | each controller].	window controller open.	startedCPUWatcher ifTrue: [ self setUpdateCallbackAfter: 7 ].	^ window! !!ProcessBrowser methodsFor: 'updating' stamp: 'dtl 9/23/2009 20:36'!startAutoUpdate	self isAutoUpdatingPaused		ifTrue: [^ autoUpdateProcess resume].	self isAutoUpdating		ifFalse: [autoUpdateProcess := [[self hasView]						whileTrue: [(Delay forSeconds: 2) wait.							Project current addDeferredUIMessage: [self updateProcessList]].					autoUpdateProcess := nil] fork].	self updateProcessList! !!Browser methodsFor: 'toolbuilder' stamp: 'ar 9/16/2009 23:30'!addClassAndSwitchesTo: windowSpec at: frame with: builder	| listSpec panelSpec |	listSpec := self buildClassListWith: builder.	listSpec frame: (frame origin corner: frame right @ (frame bottom - 0.08)).	windowSpec children add: listSpec.	panelSpec := self buildSwitchesWith: builder.	panelSpec frame: (frame left@(frame bottom - 0.08) corner: frame corner).	windowSpec children addLast: panelSpec.! !!ProcessBrowser methodsFor: 'views' stamp: 'dtl 12/17/2005 11:21'!openAsMorph	"Create a pluggable version of me, answer a window"	| window aTextMorph |	window := (SystemWindow labelled: 'later')				model: self.	window		addMorph: ((PluggableListMorph				on: self				list: #processNameList				selected: #processListIndex				changeSelected: #processListIndex:				menu: #processListMenu:				keystroke: #processListKey:from:)				enableDragNDrop: false)		frame: (0 @ 0 extent: 0.5 @ 0.5).	window		addMorph: ((PluggableListMorph				on: self				list: #stackNameList				selected: #stackListIndex				changeSelected: #stackListIndex:				menu: #stackListMenu:				keystroke: #stackListKey:from:)				enableDragNDrop: false)		frame: (0.5 @ 0.0 extent: 0.5 @ 0.5).	aTextMorph := PluggableTextMorph				on: self				text: #selectedMethod				accept: nil				readSelection: nil				menu: nil.	aTextMorph askBeforeDiscardingEdits: false.	window		addMorph: aTextMorph		frame: (0 @ 0.5 corner: 1 @ 1).	window setUpdatablePanesFrom: #(#processNameList #stackNameList ).	(window setLabel: 'Process Browser') openInWorld.	startedCPUWatcher ifTrue: [ self setUpdateCallbackAfter: 7 ].	^ window! !!Browser methodsFor: 'toolbuilder' stamp: 'ar 9/16/2009 23:29'!buildWith: builder	"Create the ui for the browser"	| windowSpec max |	max := self wantsOptionalButtons ifTrue:[0.42] ifFalse:[0.5].	windowSpec := self buildWindowWith: builder specs: {		(0@0 corner: 0.25@max) -> [self buildSystemCategoryListWith: builder].		(0.25@0 corner: 0.5@(max-0.08)) -> [self buildClassListWith: builder].		(0.25@(max-0.08) corner: 0.5@max) -> [self buildSwitchesWith: builder].		(0.5@0 corner: 0.75@max) -> [self buildMessageCategoryListWith: builder].		(0.75@0 corner: 1@max) -> [self buildMessageListWith: builder].		(0@max corner: 1@1) -> [self buildCodePaneWith: builder].	}.	^builder build: windowSpec! !!Debugger methodsFor: 'context stack (message list)' stamp: 'tfel 9/15/2009 23:07'!selectedMessageName	"Answer the message selector of the currently selected context.	 If the method is unbound we can still usefully answer its old selector."	| selector |	selector := self selectedContext selector.	^(selector ~~ self selectedContext method selector	    and: [selector beginsWith: 'DoIt'])		ifTrue: [self selectedContext method selector]		ifFalse: [selector]! !!ProcessBrowser methodsFor: 'updating' stamp: 'dtl 9/23/2009 20:36'!setUpdateCallbackAfter: seconds 	| d |	d := Delay forSeconds: seconds.	[d wait.	d := nil.	Project current addDeferredUIMessage: [self updateProcessList]] fork! !!Browser methodsFor: 'toolbuilder' stamp: 'ar 9/16/2009 23:27'!buildSwitchesWith: builder	"Build the instance/comment/class switch"	| panelSpec buttonSpec |	panelSpec := builder pluggablePanelSpec new.	panelSpec children: OrderedCollection new.	buttonSpec := builder pluggableButtonSpec new.	buttonSpec 			model: self;			label: 'instance'; 			state: #instanceMessagesIndicated; 			action: #indicateInstanceMessages;			frame: (0@0 corner: 0.39@1).	panelSpec children addLast: buttonSpec.	buttonSpec := builder pluggableButtonSpec new.	buttonSpec 			model: self;			label: '?'; 			state: #classCommentIndicated; 			action: #plusButtonHit;			frame: (0.41@0 corner: 0.59@1).	panelSpec children addLast: buttonSpec.	buttonSpec := builder pluggableButtonSpec new.	buttonSpec 			model: self;			label: 'class'; 			state: #classMessagesIndicated; 			action: #indicateClassMessages;			frame: (0.61@0 corner: 1@1).	panelSpec children addLast: buttonSpec.	^panelSpec! !!Browser methodsFor: 'initialize-release' stamp: 'ar 9/16/2009 23:29'!openEditString: aString        "Create a pluggable version of all the views for a Browser, including views and controllers."	"Example: 		Browser fullOnClass: Browser.	"	| builder max |	builder := ToolBuilder default.	max := self wantsOptionalButtons ifTrue:[0.42] ifFalse:[0.5].	^self buildWindowWith: builder specs: {		(0@0 corner: 0.25@max) -> [self buildSystemCategoryListWith: builder].		(0.25@0 corner: 0.5@(max-0.08)) -> [self buildClassListWith: builder].		(0.25@(max-0.08) corner: 0.5@max) -> [self buildSwitchesWith: builder].		(0.5@0 corner: 0.75@max) -> [self buildMessageCategoryListWith: builder].		(0.75@0 corner: 1@max) -> [self buildMessageListWith: builder].		"(0@max corner: 1@0.5) -> [self buildOptionalButtonsWith: builder]."		(0@max corner: 1@1) -> [self buildCodePaneWith: builder].	}! !!CodeHolder methodsFor: 'toolbuilder' stamp: 'ar 9/16/2009 23:24'!buildCodePaneWith: builder	| textSpec top buttonSpec annoSpec |	self wantsOptionalButtons ifTrue:[		top := builder pluggablePanelSpec new.		top children: OrderedCollection new.		buttonSpec := self buildOptionalButtonsWith: builder.		buttonSpec frame: (0@0 corner: 1@0.11).		top children add: buttonSpec.	].	textSpec := builder pluggableCodePaneSpec new.	textSpec 		model: self;		getText: #contents; 		setText: #contents:notifying:; 		selection: #contentsSelection; 		menu: #codePaneMenu:shifted:.	self wantsAnnotationPane ifTrue:[		top ifNil:[			top := builder pluggablePanelSpec new.			top children: OrderedCollection new.		].		annoSpec := builder pluggableInputFieldSpec new.		annoSpec model: self; getText: #annotation. 		annoSpec frame: (0@0.88 corner: 1@1).		top children add: annoSpec.	].	top ifNotNil:[		textSpec frame: (0 @ (buttonSpec ifNil:[0] ifNotNil:[0.12])			corner: 1 @ (annoSpec ifNil:[1] ifNotNil:[0.88])).		top children add: textSpec.	].	^top ifNil:[textSpec]! !!ProcessBrowser class methodsFor: 'system startup' stamp: 'nk 6/18/2003 07:32'!shutDown	Browsers do: [ :ea | ea isAutoUpdating ifTrue: [ ea pauseAutoUpdate ]]! !!ProcessBrowser methodsFor: 'initialize-release' stamp: 'dtl 12/17/2005 11:15'!initialize	methodText := ''.	stackListIndex := 0.	searchString := ''.	lastUpdate := 0.	startedCPUWatcher := Preferences cpuWatcherEnabled and: [ self startCPUWatcher ].	self updateProcessList; processListIndex: 1.	Browsers add: self! !DeferredActionStandardSystemController removeSelector: #controlActivity!DeferredActionStandardSystemController removeSelector: #addDeferredUIMessage:!DeferredActionStandardSystemController removeSelector: #initialize!