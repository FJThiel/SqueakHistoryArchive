"Change Set:		8737Monticello-nice.352Monticello-nice.352:remove some #or:or: #and:and: sendsMonticello-ar.351:Remove an unnecessary Squeakmap dependency."!!MCWorkingCopy methodsFor: 'operations' stamp: 'nice 1/1/2010 21:51'!merge: targetVersion	| ancestorInfo merger ancestorSnapshot packageSnapshot |	targetVersion dependencies do: [:ea | ea resolve merge].	ancestorInfo := targetVersion info commonAncestorWith: ancestry.		ancestorInfo = targetVersion info ifTrue: [^ MCNoChangesException signal].		packageSnapshot := package snapshot.	ancestorSnapshot := ancestorInfo							ifNotNil: [(self findSnapshotWithVersionInfo: ancestorInfo)]							ifNil: [self notifyNoCommonAncestorWith: targetVersion.  MCSnapshot empty].		(ancestry ancestors size = 1		and: [ancestry ancestors first = ancestorInfo		and: [(packageSnapshot patchRelativeToBase: ancestorSnapshot) isEmpty]])				ifTrue: [^ targetVersion load].		merger := MCThreeWayMerger 				base: packageSnapshot				target: targetVersion snapshot				ancestor: ancestorSnapshot.	((MCMergeResolutionRequest new merger: merger)		signal: 'Merging ', targetVersion info name) = true ifTrue:			[merger loadWithNameLike: targetVersion info name.			ancestry addAncestor: targetVersion info].	self changed! !!MCSnapshotBrowser methodsFor: 'accessing' stamp: 'nice 1/1/2010 21:51'!methodsForSelectedClassCategory	| visibleClasses |	visibleClasses := self visibleClasses.	^ items select: [:ea | (visibleClasses includes: ea className) 									and: [ea isMethodDefinition									and: [ea classIsMeta = self switchIsClass]]].! !!MCMethodDefinition class methodsFor: 'as yet unclassified' stamp: 'nice 1/1/2010 22:10'!forMethodReference: aMethodReference	| definition |	definition := self cachedDefinitions at: aMethodReference compiledMethod ifAbsent: [].	(definition isNil		or: [definition selector ~= aMethodReference methodSymbol		or: [definition className ~= aMethodReference classSymbol		or: [definition classIsMeta ~= aMethodReference classIsMeta		or: [definition category ~= aMethodReference category]]]])			ifTrue: [definition := self 						className: aMethodReference classSymbol						classIsMeta: aMethodReference classIsMeta						selector: aMethodReference methodSymbol						category: aMethodReference category						timeStamp: aMethodReference timeStamp						source: aMethodReference source.					self cachedDefinitions at: aMethodReference compiledMethod put: definition].	^ definition	! !!MCSMCacheRepository methodsFor: 'initialize-release' stamp: 'ar 1/3/2010 14:22'!initialize	super initialize.	Smalltalk at: #SMSqueakMap ifPresent:[:aClass|		smCache := aClass default cache.	].! !!MCSnapshotBrowser methodsFor: 'accessing' stamp: 'nice 1/1/2010 21:51'!methodsForSelectedClass	^ items select: [:ea | (ea className = classSelection) 									and: [ea isMethodDefinition									and: [ea classIsMeta = self switchIsClass]]].! !!MCMergeRecord methodsFor: 'as yet unclassified' stamp: 'nice 1/1/2010 21:52'!imageIsClean	| ancestors |	ancestors := version workingCopy ancestors.	^ ancestors size = 1		and: [ancestors first = self ancestorInfo		and: [self imagePatch isEmpty]]! !