"Change Set:		8414Services-Base-nice.38Services-Base-nice.38:Merge some of Pharo changes:- no fixTemps- no underscore assignments- ifNotNilDo: -> ifNotNil:Services-Base-ul.37:- deprecated SequenceableCollection >> #startWith:- replaced sends of #startWith: with #beginsWith:"!!BrowserRequestor methodsFor: 'requests' stamp: 'alain.plantec 2/6/2009 15:18'!getNewVariableName	^ UIManager default request: 'Enter the new variable name' translated initialAnswer: 'foo'! !!SequenceableCollection methodsFor: '*services-base' stamp: 'ul 12/7/2009 04:43'!startsWith: start	| comp |	self deprecated: 'Use #beginsWith:'.	self size < start size ifTrue: [^ false].	comp := true.	(self first: start size) with: start		do: [:ea :ea2 | ea = ea2 ifFalse: [comp := false]].	^ comp! !!ServiceProvider methodsFor: 'persistence' stamp: 'rr 3/10/2006 15:04'!savePreferencesFor: aService 	| strm |	"pref := ServicePreferences preferenceAt: aService shortcutPreference.	strm := WriteStream with: ''.	strm nextPutAll: aService id;		 nextPutAll: 'shortcut';		 cr;		 tab;		 nextPutAll: '^ ';		 nextPutAll: {pref name. pref preferenceValue. 1000} storeString.	self class compileSilently: strm contents classified: 'saved preferences'."	aService isCategory		ifTrue: [aService externalPreferences				doWithIndex: [:e :i | 					strm := WriteStream with: aService id asString.					strm nextPutAll: e id asString;						 cr;						 tab;						 nextPutAll: '^ ';						 nextPutAll: {aService childrenPreferences. e id. i} storeString.					e provider class compileSilently: strm contents classified: 'saved preferences']]! !!ServiceShortcuts class methodsFor: 'as yet unclassified' stamp: 'ul 12/7/2009 04:40'!changeShortcut: shortcut to: aString	aString isBlock ifTrue: [^self map at: shortcut put: aString].	(aString beginsWith: '[') ifTrue: [^self map at: shortcut put: aString].	aString isEmpty ifTrue: [self map removeKey: shortcut ifAbsent: []]				ifFalse: [self map at: shortcut put: aString]! !!ServiceCategory methodsFor: 'preferences' stamp: 'marcus.denker 11/10/2008 10:04'!replaceChildren	ServiceRegistry ifInteractiveDo: [services		do: [:s | s provider				ifNotNil: [:p | p class removeSelector: (self id , s id) asSymbol]]].	services := self newChildren.	services		do: [:e | 			(ServicePreferences preferenceAt: e shortcutPreference)				ifNotNil: [:p | p categoryList: {'-- keyboard shortcuts --'. self id asString}].			ServiceRegistry				ifInteractiveDo: [self provider savePreferencesFor: self]]! !!PasteUpMorph methodsFor: '*services-base' stamp: 'adrian_lienhard 7/21/2009 19:14'!worldMenu	^ TheWorldMenu new adaptToWorld: self! !!ServiceAction methodsFor: 'accessing' stamp: 'stephane.ducasse 4/13/2009 21:10'!text	^label isBlock ifTrue: [label  value: requestor] ifFalse: [label]! !!ServiceShortcuts class methodsFor: 'as yet unclassified' stamp: 'rr 3/11/2006 19:05'!setPreferences	| mm |	mm := self map copy.	(0 to: 9)		do: [:i | #('ctrl-' 'cmd-' 'ctrl-cmd-' )				do: [:str | 					| short | 					short := (str , i asString) asSymbol.					self insertPrefShortcut: short]].	#(#up #down #left #right )		do: [:s | 			self insertPrefShortcut: ('ctrl-cmd-' , s) asSymbol.].	mm		keysAndValuesDo: [:k :v | ServicePreferences setPreference: k toValue: v].	((Array new: 3) at: 1 put: ((Array new: 3) at: 1 put: #inlineServicesInMenu;			 at: 2 put: true;			 at: 3 put: 'Inline the services the squeak menus';			 yourself);		 at: 2 put: ((Array new: 3) at: 1 put: #useOnlyServicesInMenu;			 at: 2 put: false;			 at: 3 put: 'Use only services and not regular menu items';			 yourself);		 at: 3 put: ((Array new: 3) at: 1 put: #useServicesInBrowserButtonBar;			 at: 2 put: true;			 at: 3 put: 'Use a service-based button bar';			 yourself);		 yourself)		do: [:tr | ServicePreferences				addPreference: tr first				categories: #('-- settings --' )				default: tr second				balloonHelp: tr third]! !!ServiceGui class methodsFor: 'hooks' stamp: 'rr 3/10/2006 16:42'!browserButtonRow: aBrowser inlinedIn: row 	| bar |	self buttonBarServices 		ifTrue: [bar := (self new for: aBrowser id: #browserButtonBar) buildButtonBar.			row addMorphBack: bar].	^ row! !!ServiceShortcuts class methodsFor: 'as yet unclassified' stamp: 'ul 12/7/2009 04:40'!shortcut: str event: event 	| s |	Transcript cr.	s := self map				at: str , event keyCharacter asString				ifAbsent: [^ self].	(s beginsWith: '[') ifTrue: [^ (Compiler evaluateUnloggedForSelf:  s) value].	s serviceOrNil		ifNotNilDo: [:sv | sv execute.	event wasHandled: true]! !!ServiceGui methodsFor: 'servicecategory' stamp: 'rr 3/13/2006 23:16'!menuItemForCategory: aServiceCategory 	"Returns a menuItem triggering self"	| submenu |	submenu := self subMenuFor: aServiceCategory.	self menu add: (aServiceCategory menuLabelNumbered: self n) subMenu: submenu! !!ServiceGui methodsFor: 'initialization' stamp: 'rr 3/8/2006 10:00'!for: caller id: id 	service := id service.	caller ifNotNil: [service requestor: caller requestor]! !!ServiceAction methodsFor: 'preferences' stamp: 'rr 3/10/2006 16:10'!updateEnable	enabled := ServicePreferences				valueOfPreference: self id				ifAbsent: [true]! !!ServicePreferences class methodsFor: 'replaying' stamp: 'rr 3/12/2006 15:10'!replayPreferences: preferences 	| s v |	s := SortedCollection new				sortBlock: [:a :b | a last < b last].	s addAll: preferences;		 reSort.	s		do: [:e | 			v := self valueOfPreference: e first ifAbsent: ''.			self setPreference: e first toValue: (v					ifEmpty: ['']					ifNotEmpty: [v , ' '])					, e second]! !!ServiceAction methodsFor: 'accessing' stamp: 'stephane.ducasse 4/13/2009 21:09'!action: aBlock	action := aBlock! !!PreferenceBrowser class methodsFor: '*services-base' stamp: 'rr 7/10/2006 15:27'!openForServices	"PreferenceBrowser openForServices"	| browser |	browser := self new.	browser initializeForServices.	(ServiceBrowserMorph withModel: browser)		openInWorld.	^browser.	! !!BasicRequestor methodsFor: 'generic requests' stamp: 'PeterHugossonMiller 9/3/2009 00:12'!newCaption	caption := 'Enter text'.	answer := String new writeStream.! !!ServiceRegistry class methodsFor: 'as yet unclassified' stamp: 'rr 3/12/2006 15:19'!rebuild	| old |	old := Current.	[Current := self new.	Current build]		on: Error		do: [:err | (self confirm: 'An error occured during build. 								Debug it?')				ifTrue: [err signal].				Current := old]! !!ServiceGui class methodsFor: 'registering button bars' stamp: 'rr 3/10/2006 16:49'!initialize	bars := OrderedCollection new.	(TheWorldMenu respondsTo: #registerOpenCommand:)		ifTrue: [TheWorldMenu unregisterOpenCommand: 'Services Browser'.			TheWorldMenu registerOpenCommand: {'Services Browser'. {PreferenceBrowser. #openForServices}}]! !!ServiceAction methodsFor: 'accessing' stamp: 'stephane.ducasse 4/13/2009 21:10'!condition: aBlock	condition := aBlock! !!ServiceGui methodsFor: 'initialization' stamp: 'alain.plantec 5/28/2009 10:21'!initialize	super initialize.	menu := OrderedCollection new.	bar := AlignmentMorph newRow.	n := OrderedCollection with: 0! !!ServiceGui methodsFor: 'servicecategory' stamp: 'stephane.ducasse 4/13/2009 21:10'!buttonForCategory: aService 	"see getstate for availability?"	| aButton |	aButton := PluggableButtonMorph 				on: [:button | aService requestor: button requestor. 								self class openMenuFor: aService] 				getState: nil				action: #value:.	aButton arguments: (Array with: aButton).	self styleButton: aButton.	aButton		label: aService buttonLabel.	^aButton! !!ServiceShortcuts class methodsFor: 'as yet unclassified' stamp: 'marcus.denker 11/10/2008 10:04'!arrowShortcut: str event: event 	| key s |	key := event keyCharacter caseOf: {				[Character arrowDown] -> ['down'].				[Character arrowUp] -> ['up'].				[Character arrowLeft] -> ['left'].				[Character arrowRight] -> ['right']}.	s := self map				at: str , key				ifAbsent: [^ self].	s serviceOrNil		ifNotNil: [:sv | sv execute.	event wasHandled: true]! !!ServiceGui methodsFor: 'servicecategory' stamp: 'rr 3/10/2006 15:35'!menuFor: aServiceCategory 	| submenu |	submenu := self subMenuFor: aServiceCategory.	^ submenu		addTitle: (aServiceCategory menuLabel)! !ServiceGui initialize!