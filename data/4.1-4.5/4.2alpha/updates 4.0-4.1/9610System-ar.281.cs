"Change Set:		9610System-ar.281System-ar.281:Clean up after Smalltalk/SystemDictionary transition.System-ar.278:Update handling of class rename and removal in the new Smalltalk/SystemDictionary scheme.System-ar.279:Factor out some duplicate code.System-ar.280:Avoid dictionary protocol in Smalltalk."!!SystemDictionary methodsFor: 'objects from disk' stamp: 'ar 3/5/2010 21:25'!objectForDataStream: refStrm	| dp |	"I am about to be written on an object file.  Write a reference to Smalltalk instead."	dp := DiskProxy global: #Smalltalk selector: #globals			args: #().	refStrm replace: self with: dp.	^ dp! !!SmalltalkImage methodsFor: 'dictionary access' stamp: 'ar 3/5/2010 21:19'!associationOrUndeclaredAt: aKey	"DO NOT DEPRECATE - used by binary storage"	^globals associationOrUndeclaredAt: aKey! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'ar 3/5/2010 18:09'!allTraitsDo: aBlock	"Evaluate the argument, aBlock, for each trait in the system."	(self traitNames collect: [:name | self at: name]) do: aBlock! !!SmalltalkImage methodsFor: 'dictionary access' stamp: 'ar 3/5/2010 21:17'!removeKey: key ifAbsent: aBlock	"Obsoleted."	self deprecated: 'Use Smalltalk globals'.	^globals removeKey: key ifAbsent: aBlock! !!SmalltalkImage methodsFor: 'dictionary access' stamp: 'ar 3/5/2010 21:17'!do: aBlock	"Obsoleted."	self deprecated: 'Use Smalltalk globals'.	^globals do: aBlock! !!SystemDictionary methodsFor: 'printing' stamp: 'ar 3/5/2010 21:25'!printOn: aStream	self == Smalltalk globals		ifTrue: [aStream nextPutAll: 'Smalltalk globals'.			aStream nextPutAll:' "a SystemDictionary with lots of globals"']		ifFalse: [super printOn: aStream]! !!SystemOrganizer methodsFor: 'fileIn/Out' stamp: 'ar 3/5/2010 20:42'!fileOutCategory: category on: aFileStream initializing: aBool	"Store on the file associated with aFileStream, all the traits and classes associated 	with the category and any requested shared pools in the right order."	| first poolSet tempClass classes traits |	traits := self orderedTraitsIn: category.	classes := self superclassOrder: category.	poolSet := Set new.	classes do:  [:class | class sharedPools do: [:eachPool | poolSet add: eachPool]].	poolSet size > 0 ifTrue: [		tempClass := Class new.		tempClass shouldFileOutPools ifTrue: [			poolSet := poolSet select: [:aPool |				tempClass shouldFileOutPool: (Smalltalk globals keyAtIdentityValue: aPool)].			poolSet do: [:aPool | tempClass fileOutPool: aPool onFileStream: aFileStream]]].	first := true.	traits, classes do: [:each | 		first			ifTrue: [first := false]			ifFalse: [aFileStream cr; nextPut: Character newPage; cr].		each			fileOutOn: aFileStream			moveSource: false			toFile: 0			initializing: false].	aBool ifTrue: [classes do: [:cls | cls fileOutInitializerOn: aFileStream]].! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'ar 3/5/2010 20:15'!renameClass: aClass from: oldName to: newName	"Rename the class, aClass, to have the title newName."	| oldref category |	category := SystemOrganization categoryOfElement: oldName.	self organization classify: newName under: category.	self organization removeElement: oldName.	oldref := self associationAt: oldName.	self removeKey: oldName.	oldref key: newName.	self add: oldref.  "Old association preserves old refs"	Smalltalk renamedClass: aClass from: oldName to: newName.	self flushClassNameCache.	SystemChangeNotifier uniqueInstance classRenamed: aClass from: oldName to: newName inCategory: category! !!SmalltalkImage methodsFor: 'dictionary access' stamp: 'ar 3/5/2010 21:17'!includes: element	"Obsoleted."	self deprecated: 'Use Smalltalk globals'.	^globals includes: element! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'ar 3/5/2010 20:16'!renameClass: aClass from: oldName 	"Rename the class, aClass, to have the title newName."	^self renameClass: aClass from: oldName to: aClass name! !!SystemDictionary methodsFor: 'accessing' stamp: 'nice 10/20/2009 23:58'!poolUsers	"Answer a dictionary of pool name -> classes that refer to it.	Also includes any globally know dictionaries (such as	Smalltalk, Undeclared etc) which although not strictly	accurate is potentially useful information"	"Smalltalk poolUsers"	| poolUsers |	poolUsers := Dictionary new.	self keys		do: [:k | "yes, using isKindOf: is tacky but for reflective code like			this it is very useful. If you really object you can:-			a) go boil your head.			b) provide a better answer.			your choice."			| pool refs |			(((pool := self at: k) isKindOf: Dictionary)					or: [pool isKindOf: SharedPool class])				ifTrue: [refs := self systemNavigation allClasses								select: [:c | c sharedPools identityIncludes: pool]								thenCollect: [:c | c name].					refs						add: (self systemNavigation								allCallsOn: (self associationAt: k)).					poolUsers at: k put: refs]].	^ poolUsers! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'al 1/12/2006 23:56'!classOrTraitNamed: aString 	"aString is either a class or trait name or a class or trait name followed by ' class' or 'classTrait' respectively.	Answer the class or metaclass it names."	| meta baseName baseClass |	(aString endsWith: ' class')		ifTrue: [meta := true.				baseName := aString copyFrom: 1 to: aString size - 6]		ifFalse: [			(aString endsWith: ' classTrait')				ifTrue: [					meta := true.					baseName := aString copyFrom: 1 to: aString size - 11]				ifFalse: [					meta := false.					baseName := aString]].	baseClass := Smalltalk at: baseName asSymbol ifAbsent: [^ nil].	meta		ifTrue: [^ baseClass classSide]		ifFalse: [^ baseClass]! !!SmalltalkImage methodsFor: 'dictionary access' stamp: 'ar 3/5/2010 21:18'!associationAt: aKey	"DO NOT DEPRECATE - used by ImageSegments"	^globals associationAt: aKey! !!SystemDictionary methodsFor: 'classes and traits' stamp: ''!hasClassNamed: aString	"Answer whether there is a class of the given name, but don't intern aString if it's not alrady interned.  4/29/96 sw"	Symbol hasInterned: aString ifTrue: 		[:aSymbol | ^ (self at: aSymbol ifAbsent: [nil]) isKindOf: Class].	^ false! !!SmalltalkImage methodsFor: 'accessing' stamp: 'ar 3/5/2010 20:34'!bindingOf: varName	"Answer the binding of some variable resolved in the scope of the receiver"	^globals bindingOf: varName! !!SmalltalkImage methodsFor: 'classes and traits' stamp: 'ar 3/5/2010 20:02'!renameClass: aClass as: newName 	"Rename the class, aClass, to have the title newName."	^globals renameClass: aClass as: newName! !!SmalltalkImage methodsFor: 'accessing' stamp: 'ar 3/5/2010 21:21'!at: aKey put: anObject 	"Set the global at key to be anObject.  If key is not found, create a	new entry for key and set is value to anObject. Answer anObject."	^globals at: aKey put: anObject! !!SmalltalkImage methodsFor: 'dictionary access' stamp: 'ar 3/5/2010 21:19'!associationDeclareAt: aKey	"DO NOT DEPRECATE - used by ImageSegments"	^globals associationDeclareAt: aKey! !!SmalltalkImage methodsFor: 'dictionary access' stamp: 'ar 3/5/2010 21:17'!removeKey: key	"Obsoleted."	self deprecated: 'Use Smalltalk globals'.	^globals removeKey: key! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'sw 9/5/97 18:30'!removeClassNamed: aName	"Invoked from fileouts:  if there is currently a class in the system named aName, then remove it.  If anything untoward happens, report it in the Transcript.  "	| oldClass |	(oldClass := self at: aName asSymbol ifAbsent: [nil]) == nil		ifTrue:			[Transcript cr; show: 'Removal of class named ', aName, ' ignored because ', aName, ' does not exist.'.			^ self].	oldClass removeFromSystem! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'sd 4/17/2003 21:18'!allClassesDo: aBlock	"Evaluate the argument, aBlock, for each class in the system."	(self classNames collect: [:name | self at: name]) do: aBlock! !!SmalltalkImage methodsFor: 'classes and traits' stamp: 'ar 3/5/2010 20:00'!renamedClass: aClass from: oldName to: newName	"Inform Smalltalk that aClass has been renamed"	(Array with: StartUpList with: ShutDownList) do:[:list | | index |  		index := list indexOf: oldName ifAbsent: [0].		index > 0 ifTrue: [list at: index put: newName].	].! !!SmalltalkImage methodsFor: 'accessing' stamp: 'ar 3/5/2010 21:20'!at: key ifAbsent: aBlock	"Answer the global associated with the key or, if key isn't found,	answer the result of evaluating aBlock."	^globals at: key ifAbsent: aBlock! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'ar 12/20/2009 14:21'!traitNames	"Answer a SortedCollection of all traits (not including class-traits) names."	| names |	names := OrderedCollection new.	self do: 		[:cl | (cl isInMemory			and: [(cl isTrait)			and: [(cl name beginsWith: 'AnObsolete') not]])				ifTrue: [names add: cl name]].	^ names! !!SmalltalkImage methodsFor: 'accessing' stamp: 'ar 3/5/2010 21:39'!globals	"Answer the global SystemDictionary"	^globals! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'al 1/12/2006 23:57'!classNamed: className 	^self classOrTraitNamed: className.! !!SmalltalkImage methodsFor: 'dictionary access' stamp: 'ar 3/5/2010 21:18'!size	"Obsoleted."	self deprecated: 'Use Smalltalk globals'.	^globals size! !!SmalltalkImage methodsFor: 'accessing' stamp: 'ar 3/5/2010 21:40'!organization	"Return the organizer for the receiver"	^globals organization! !!SARInstaller class methodsFor: 'change set utilities' stamp: 'ar 3/5/2010 20:33'!basicNewChangeSet: newName	Smalltalk at: #ChangesOrganizer ifPresent: [ :cs | ^cs basicNewChangeSet: newName ].	(self changeSetNamed: newName) ifNotNil: [ self inform: 'Sorry that name is already used'. ^nil ].	^ChangeSet basicNewNamed: newName.! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'sd 4/17/2003 21:15'!allClasses  	"Return all the class defines in the Smalltalk SystemDictionary"	"Smalltalk allClasses"	^ self classNames collect: [:name | self at: name]! !!PseudoClass methodsFor: 'testing' stamp: 'ar 3/5/2010 20:40'!nameExists	^Smalltalk globals includesKey: self name asSymbol! !!SmalltalkImage methodsFor: 'dictionary access' stamp: 'ar 3/5/2010 21:17'!keyAtIdentityValue: anObject ifAbsent: aBlock	"Obsoleted."	self deprecated: 'Use Smalltalk globals'.	^globals keyAtIdentityValue: anObject ifAbsent: aBlock! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'di 2/16/2000 10:28'!flushClassNameCache	"Smalltalk flushClassNameCache"	"Forse recomputation of the cached list of class names."	cachedClassNames := nil! !!SARInstaller class methodsFor: 'change set utilities' stamp: 'ar 3/5/2010 20:33'!changeSetNamed: newName	Smalltalk at: #ChangesOrganizer ifPresent: [ :cs | ^cs changeSetNamed: newName ].	^ChangeSet allInstances detect: [ :cs | cs name = newName ] ifNone: [ nil ].! !!ChangeRecord methodsFor: 'access' stamp: 'ar 3/5/2010 20:40'!methodClass 	| methodClass |	type == #method ifFalse: [^ nil].	(Smalltalk globals includesKey: class asSymbol) ifFalse: [^ nil].	methodClass := Smalltalk at: class asSymbol.	meta ifTrue: [^ methodClass class]		ifFalse: [^ methodClass]! !!SmalltalkImage methodsFor: 'dictionary access' stamp: 'ar 3/5/2010 21:22'!scopeFor: varName from: lower envtAndPathIfFound: envtAndPathBlock	"Obsoleted."	self deprecated: 'Use Smalltalk globals'.	(globals includesKey: varName)		ifTrue: [^ envtAndPathBlock value: self value: String new]		ifFalse: [^ nil]! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'ar 3/5/2010 19:58'!forgetClass: aClass logged: aBool 	"Delete the class, aClass, from the system.	Note that this doesn't do everything required to dispose of a class - to do that use Class>>removeFromSystem."	aBool ifTrue: [SystemChangeNotifier uniqueInstance classRemoved: aClass fromCategory: aClass category].	self organization removeElement: aClass name.	Smalltalk removeFromStartUpList: aClass.	Smalltalk removeFromShutDownList: aClass.	self removeKey: aClass name ifAbsent: [].	self flushClassNameCache.! !!SmalltalkImage methodsFor: 'classes and traits' stamp: 'ar 3/5/2010 20:10'!renameClass: aClass from: oldName	"Rename the class, aClass, to have the title newName."	^globals renameClass: aClass from: oldName! !!SmalltalkImage methodsFor: 'dictionary access' stamp: 'ar 3/5/2010 21:17'!keys	"Obsoleted."	self deprecated: 'Use Smalltalk globals'.	^globals keys! !!SmalltalkImage methodsFor: 'dictionary access' stamp: 'ar 3/5/2010 21:21'!includesKey: key	"Answer whether the receiver has a key equal to the argument, key."	^globals includesKey: key! !!SmalltalkImage methodsFor: 'dictionary access' stamp: 'ar 3/5/2010 21:17'!associationAt: key ifAbsent: aBlock	"Obsoleted."	self deprecated: 'Use Smalltalk globals'.	^globals associationAt: key ifAbsent: aBlock! !!ImageSegment methodsFor: 'fileIn/Out' stamp: 'ar 3/5/2010 20:43'!prepareToBeSaved	"Prepare objects in outPointers to be written on the disk.  They must be able to match up with existing objects in their new system.  outPointers is already a copy.	Classes are already converted to a DiskProxy.  	Associations in outPointers:1) in Smalltalk.2) in a classPool.3) in a shared pool.4) A pool dict pointed at directly"| left myClasses outIndexes |myClasses := Set new.arrayOfRoots do: [:aRoot | aRoot class class == Metaclass ifTrue: [myClasses add: aRoot]].outIndexes := IdentityDictionary new.outPointers withIndexDo: [:anOut :ind | | key | 	anOut isVariableBinding ifTrue: [		(myClasses includes: anOut value)			ifFalse: [outIndexes at: anOut put: ind]			ifTrue: [(Smalltalk globals associationAt: anOut key ifAbsent: [3]) == anOut 				ifTrue: [outPointers at: ind put: 					(DiskProxy global: #Smalltalk selector: #associationDeclareAt: 						args: (Array with: anOut key))]				ifFalse: [outIndexes at: anOut put: ind]				]].	(anOut isKindOf: Dictionary) ifTrue: ["Pools pointed at directly"		(key := Smalltalk globals keyAtIdentityValue: anOut ifAbsent: [nil]) ifNotNil: [			outPointers at: ind put: 				(DiskProxy global: key selector: #yourself args: #())]].	anOut isMorph ifTrue: [outPointers at: ind put: 		(StringMorph contents: anOut printString, ' that was not counted')]	].left := outIndexes keys asSet.left size > 0 ifTrue: ["Globals"	(left copy) do: [:assoc |	"stay stable while delete items"		(Smalltalk globals associationAt: assoc key ifAbsent: [3]) == assoc ifTrue: [			outPointers at: (outIndexes at: assoc) put: 				(DiskProxy global: #Smalltalk selector: #associationAt: 					args: (Array with: assoc key)).			left remove: assoc]]].left size > 0 ifTrue: ["Class variables"	Smalltalk allClassesDo: [:cls | cls classPool size > 0 ifTrue: [		(left copy) do: [:assoc |	"stay stable while delete items"			(cls classPool associationAt: assoc key ifAbsent: [3]) == assoc ifTrue: [				outPointers at: (outIndexes at: assoc) put: 					(DiskProxy new global: cls name						preSelector: #classPool						selector: #associationAt: 						args: (Array with: assoc key)).				left remove: assoc]]]]].left size > 0 ifTrue: ["Pool variables"	Smalltalk globals associationsDo: [:poolAssoc | | pool |		poolAssoc value class == Dictionary ifTrue: ["a pool"			pool := poolAssoc value.			(left copy) do: [:assoc |	"stay stable while delete items"				(pool associationAt: assoc key ifAbsent: [3]) == assoc ifTrue: [					outPointers at: (outIndexes at: assoc) put: 						(DiskProxy global: poolAssoc key selector: #associationAt: 							args: (Array with: assoc key)).					left remove: assoc]]]]].left size > 0 ifTrue: [	"If points to class in arrayOfRoots, must deal with it separately"	"OK to have obsolete associations that just get moved to the new system"	self inform: 'extra associations'.	left inspect].! !!SmalltalkImage methodsFor: 'classes and traits' stamp: 'ar 3/5/2010 20:36'!classNamed: className 	"Answer the global with the given name."	^globals classNamed: className! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'al 1/13/2006 00:15'!allClassesAndTraitsDo: aBlock	^self allClassesAndTraits do: aBlock! !!SmalltalkImage methodsFor: 'accessing' stamp: 'ar 3/5/2010 21:40'!globals: aSystemDictionary	"Sets the system-wide globals"	globals ifNotNil:[self error: 'Cannot overwrite existing globals'].	globals := aSystemDictionary! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'sw 10/28/96'!renameClassNamed: oldName as: newName	"Invoked from fileouts:  if there is currently a class in the system named oldName, then rename it to newName.  If anything untoward happens, report it in the Transcript.  "	| oldClass |	(oldClass := self at: oldName asSymbol ifAbsent: [nil]) == nil		ifTrue:			[Transcript cr; show: 'Class-rename for ', oldName, ' ignored because ', oldName, ' does not exist.'.			^ self].	oldClass rename: newName! !!SmalltalkImage methodsFor: 'accessing' stamp: 'ar 3/5/2010 21:21'!environment	"For conversion from Smalltalk to SystemDictionary"	^globals! !!SmalltalkImage methodsFor: 'accessing' stamp: 'ar 3/5/2010 21:19'!at: aKey	"Answer the global associated with the key."	^globals at: aKey! !!SmalltalkImage class methodsFor: 'class initialization' stamp: 'ar 3/5/2010 21:46'!initialize	"SmalltalkImage initialize""XXX: Just to clean up after the transition"	Smalltalk removeEmptyMessageCategories.	self initializeStartUpList.	self initializeShutDownList.! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'al 1/12/2006 23:59'!allClassesAndTraits	"Return all the classes and traits defined in the Smalltalk SystemDictionary"	^ self classNames , self traitNames collect: [:each | self at: each]! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'ar 3/5/2010 20:17'!renameClass: aClass as: newName 	"Rename the class, aClass, to have the title newName."	^self renameClass: aClass from: aClass name to: newName! !!SmalltalkImage methodsFor: 'classes and traits' stamp: 'ar 3/5/2010 19:58'!forgetClass: aClass logged: aBool 	"Delete the class, aClass, from the system."	^globals forgetClass: aClass logged: aBool! !!SmalltalkImage methodsFor: 'accessing' stamp: 'ar 3/5/2010 21:20'!at: key ifPresent: aBlock	"Lookup the given key in the globals. If it is present, answer the value of evaluating the given block with the value associated with the key. Otherwise, answer nil."	^globals at: key ifPresent: aBlock! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'al 1/13/2006 00:51'!classNames	"Answer a SortedCollection of all class names."	| names |	cachedClassNames == nil ifTrue:		[names := OrderedCollection new: self size.		self do: 			[:cl | (cl isInMemory				and: [(cl isKindOf: Class)					and: [(cl name beginsWith: 'AnObsolete') not]])				ifTrue: [names add: cl name]].		cachedClassNames := names asSortedCollection].	^ cachedClassNames! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'al 2/23/2006 21:39'!allTraits	"Return all traits defined in the Smalltalk SystemDictionary"	^ self traitNames collect: [:each | self at: each]! !SystemDictionary removeSelector: #cleanUp:!SystemDictionary removeSelector: #internalizeChangeLog!SystemDictionary removeSelector: #add:toList:after:!SystemDictionary removeSelector: #discardFFI!SystemDictionary removeSelector: #primVmPath!SystemDictionary removeSelector: #discardOddsAndEnds!SystemDictionary removeSelector: #currentChangeSetString!SystemDictionary removeSelector: #removeFromShutDownList:!SystemDictionary removeSelector: #unregisterExternalObject:!SmalltalkImage removeSelector: #discardMIDI!SystemDictionary removeSelector: #discardMorphic!SystemDictionary removeSelector: #version!SystemDictionary removeSelector: #writeImageSegmentsFrom:withKernel:!SystemDictionary removeSelector: #registerExternalObject:!SystemDictionary removeSelector: #useUpMemoryWithContexts!SystemDictionary removeSelector: #garbageCollect!SystemDictionary removeSelector: #verifyMorphicAvailability!SystemDictionary removeSelector: #removeAllLineFeedsQuietly!SmalltalkImage removeSelector: #removeAllLineFeedsQuietlyCalling:!SmalltalkImage removeSelector: #testFormatter!SystemDictionary removeSelector: #specialSelectors!SystemDictionary removeSelector: #discardSoundSynthesis!SystemDictionary removeSelector: #primitiveGarbageCollect!SystemDictionary removeSelector: #abandonTempNames!SystemDictionary removeSelector: #forceTenure!SmalltalkImage removeSelector: #reconstructChanges!SmalltalkImage removeSelector: #discardNetworking!SmalltalkImage class removeSelector: #convertFromSystemDictionary!SystemDictionary removeSelector: #currentProjectDo:!SystemDictionary removeSelector: #logError:inContext:to:!SmalltalkImage removeSelector: #unusedClassesAndMethodsWithout:!SystemDictionary removeSelector: #exitToDebugger!SystemDictionary removeSelector: #specialSelectorAt:!SystemDictionary removeSelector: #cleanUp!SystemDictionary removeSelector: #bytesLeftString!SystemDictionary removeSelector: #removeFromStartUpList:!SmalltalkImage removeSelector: #removeNormalCruft!SystemDictionary removeSelector: #okayToProceedEvenIfSpaceIsLow!SystemDictionary removeSelector: #addToShutDownList:after:!SystemDictionary removeSelector: #shutDown!SystemDictionary removeSelector: #garbageCollectMost!SystemDictionary removeSelector: #hasMorphic!SmalltalkImage removeSelector: #internalizeSources!SmalltalkImage removeSelector: #testFormatter2!SystemDictionary removeSelector: #discardSUnit!SystemDictionary removeSelector: #discardFlash!SystemDictionary removeSelector: #discardTrueType!SystemDictionary removeSelector: #lastRemoval!SystemDictionary removeSelector: #bytesLeft:!SystemDictionary removeSelector: #rootTable!SystemDictionary removeSelector: #externalObjects!SystemDictionary removeSelector: #majorShrink!SystemDictionary removeSelector: #setMacFileInfoOn:!SystemDictionary removeSelector: #wordSize!SmalltalkImage removeSelector: #doesNotUnderstand:!SmalltalkImage removeSelector: #removeAllLineFeeds!SystemDictionary removeSelector: #unusedClasses!SystemDictionary removeSelector: #m17nVersion!SystemDictionary removeSelector: #makeExternalRelease!SystemDictionary removeSelector: #send:toClassesNamedIn:with:!SystemDictionary removeSelector: #isMorphic!SystemDictionary removeSelector: #condenseSources!SystemDictionary removeSelector: #processShutDownList:!SmalltalkImage removeSelector: #internalizeChangeLog!SystemDictionary removeSelector: #zapAllOtherProjects!SystemDictionary removeSelector: #cleanUp:except:!SmalltalkImage removeSelector: #discardFFI!SystemDictionary removeSelector: #lowSpaceThreshold!SystemDictionary removeSelector: #condenseChanges!SystemDictionary removeSelector: #nihongoVersion!SmalltalkImage removeSelector: #discardOddsAndEnds!SystemDictionary removeSelector: #reclaimDependents!SystemDictionary removeSelector: #removeSelector:!SystemDictionary removeSelector: #setGCBiasToGrowGCLimit:!SystemDictionary removeSelector: #reportClassAndMethodRemovalsFor:!SystemDictionary removeSelector: #cleanOutUndeclared!SystemDictionary removeSelector: #installLowSpaceWatcher!SmalltalkImage removeSelector: #discardMorphic!SystemDictionary removeSelector: #snapshotPrimitive!SystemDictionary removeSelector: #primLowSpaceSemaphore:!SmalltalkImage removeSelector: #writeImageSegmentsFrom:withKernel:!SmalltalkImage removeSelector: #removeAllLineFeedsQuietly!SystemDictionary removeSelector: #signalLowSpace!SystemDictionary removeSelector: #compressSources!SmalltalkImage removeSelector: #discardSoundSynthesis!SystemDictionary removeSelector: #computeImageSegmentation!SystemDictionary removeSelector: #recover:!SystemDictionary class removeSelector: #initialize!SmalltalkImage removeSelector: #reconstructChanges2!SystemDictionary removeSelector: #removeEmptyMessageCategories!SystemDictionary removeSelector: #recreateSpecialObjectsArray!SystemDictionary removeSelector: #isRoot:!SystemDictionary removeSelector: #forceChangesToDisk!SystemDictionary removeSelector: #externalizeSources!SystemDictionary removeSelector: #isYoung:!SystemDictionary removeSelector: #memoryHogs!SystemDictionary removeSelector: #snapshotEmbeddedPrimitive!SystemDictionary removeSelector: #addToStartUpList:!SmalltalkImage removeSelector: #scanFor:!SystemDictionary removeSelector: #lowSpaceWatcherProcess!SystemDictionary removeSelector: #specialObjectsArray!SystemDictionary removeSelector: #shutDownSound!SystemDictionary removeSelector: #writeRecentCharacters:toFileNamed:!SystemDictionary removeSelector: #reformatChangesToUTF8!SystemDictionary removeSelector: #addToShutDownList:!SmalltalkImage removeSelector: #discardSUnit!SystemDictionary removeSelector: #discardSpeech!SystemDictionary removeSelector: #discardDiscards!SystemDictionary removeSelector: #quitPrimitive!SystemDictionary removeSelector: #hasSpecialSelector:ifTrueSetByte:!SystemDictionary removeSelector: #processStartUpList:!SystemDictionary removeSelector: #unloadAllKnownPackages!SmalltalkImage removeSelector: #discardFlash!SystemDictionary removeSelector: #makeInternalRelease!SmalltalkImage removeSelector: #discardTrueType!SmalltalkImage removeSelector: #lastRemoval!SystemDictionary removeSelector: #useUpMemoryWithArrays!SystemDictionary removeSelector: #discardMVC!SmalltalkImage removeSelector: #at:ifPresentAndInMemory:!SmalltalkImage removeSelector: #majorShrink!SystemDictionary removeSelector: #abandonSources!SystemDictionary removeSelector: #inspectGlobals!SystemDictionary removeSelector: #useUpMemory!SystemDictionary removeSelector: #specialSelectorSize!SystemDictionary removeSelector: #setGCParameters!SystemDictionary removeSelector: #createStackOverflow!SystemDictionary class removeSelector: #cleanUp!SystemDictionary removeSelector: #lowSpaceWatcher!SystemDictionary removeSelector: #specialNargsAt:!SystemDictionary removeSelector: #verifyChanges!SystemDictionary removeSelector: #discardMIDI!SmalltalkImage removeSelector: #makeExternalRelease!SystemDictionary removeSelector: #removeAllLineFeedsQuietlyCalling:!SystemDictionary removeSelector: #testFormatter!SystemDictionary removeSelector: #reconstructChanges!SystemDictionary removeSelector: #discardNetworking!SystemDictionary removeSelector: #copyright!SystemDictionary removeSelector: #cleanUpUndoCommands!SystemDictionary removeSelector: #primImageName!SystemDictionary removeSelector: #setGCBiasToGrow:!SystemDictionary removeSelector: #unusedClassesAndMethodsWithout:!SystemDictionary removeSelector: #unbindExternalPrimitives!SystemDictionary removeSelector: #addToStartUpList:after:!SystemDictionary removeSelector: #zapMVCprojects!SmalltalkImage removeSelector: #reportClassAndMethodRemovalsFor:!SystemDictionary removeSelector: #writeRecentToFile!SystemDictionary removeSelector: #removeNormalCruft!SystemDictionary removeSelector: #compactClassesArray!SystemDictionary removeSelector: #internalizeSources!SystemDictionary removeSelector: #testFormatter2!SystemDictionary removeSelector: #forgetDoIts!SystemDictionary removeSelector: #removeAllUnSentMessages!SmalltalkImage removeSelector: #computeImageSegmentation!SmalltalkImage removeSelector: #recover:!SystemDictionary removeSelector: #handleUserInterrupt!SystemDictionary removeSelector: #clearExternalObjects!SmalltalkImage removeSelector: #externalizeSources!SystemDictionary removeSelector: #primBytesLeft!SystemDictionary removeSelector: #rootTableAt:!SystemDictionary removeSelector: #primImageName:!SystemDictionary removeSelector: #primSignalAtBytesLeft:!SystemDictionary removeSelector: #removeAllLineFeeds!SmalltalkImage removeSelector: #reformatChangesToUTF8!SystemDictionary removeSelector: #useUpMemoryWithTinyObjects!SystemDictionary removeSelector: #presumedSentMessages!SystemDictionary removeSelector: #bytesLeft!SmalltalkImage removeSelector: #discardSpeech!SmalltalkImage removeSelector: #hasBindingThatBeginsWith:!SmalltalkImage removeSelector: #discardDiscards!SmalltalkImage removeSelector: #makeInternalRelease!SmalltalkImage removeSelector: #discardMVC!SystemDictionary removeSelector: #setGCSemaphore:!SmalltalkImage initialize!SystemDictionary initialize!