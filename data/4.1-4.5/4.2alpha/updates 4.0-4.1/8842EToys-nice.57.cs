"Change Set:		8842EToys-nice.57EToys-nice.57:Let a temporary assignment go outside a blockEToys-nice.53:use withAllSubclasses rather than class allSubInstancesEToys-ar.54:Move lastKeystroke back into Morphic.EToys-ar.55:Move belongsToUniClass back to Kernel package.EToys-ul.56:- code critics"!!KedamaSequenceExecutionStub methodsFor: 'primitives' stamp: 'ul 1/11/2010 07:43'!primGetHeadingAt: i headingArray: headingArray	| heading |	<primitive: 'getScalarHeading' module:'KedamaPlugin'>	"^ KedamaPlugin doPrimitive: #getScalarHeading."	heading := headingArray at: i.	^KedamaMorph radiansToDegrees: heading.! !!AllPlayersTool methodsFor: 'initialization' stamp: 'ul 1/11/2010 07:16'!initializeToStandAlone	"Initialize the receiver"	super initializeToStandAlone.	self layoutPolicy: TableLayout new;		listDirection: #topToBottom;		hResizing: #spaceFill;		extent: 1@1;		vResizing: #spaceFill;		rubberBandCells: true.	self initializeFor: self currentWorld presenter! !!EToyVocabulary class methodsFor: 'accessing' stamp: 'nice 1/5/2010 14:09'!morphClassesDeclaringViewerAdditions	"Answer a list of actual morph classes that either implement #additionsToViewerCategories,	or that have methods that match #additionToViewerCategory* ."	^(Morph withAllSubclasses select: [ :ea | ea hasAdditionsToViewerCategories ])! !!Player class methodsFor: 'housekeeping' stamp: 'nice 1/5/2010 14:12'!playersWithUnnecessarySubclasses	"Return a list of all players whose scripts dictionaries contain entries with nil selectors"	"Player playersWithUnnecessarySubclasses size"	^ self withAllSubclasses select:		[:p | p class isSystemDefined not and: [p scripts size == 0 and: [p instVarNames size == 0]]] ! !!EToyProjectHistoryMorph methodsFor: 'as yet unclassified' stamp: 'ul 1/11/2010 07:26'!jumpToProject	| selection |	selection := (Project current buildJumpToMenu: MenuMorph new) startUp.	self closeMyFlapIfAny.	Project current jumpToSelection: selection! !!ScriptEditorMorph methodsFor: 'buttons' stamp: 'ul 1/11/2010 07:20'!buttonRowForEditor	"Answer a row of buttons that comprise the header at the top of the Scriptor"	| aRow aString buttonFont aStatusMorph aButton aColumn aTile |	buttonFont := Preferences standardButtonFont.	aRow := AlignmentMorph newRow color: Color transparent; layoutInset: 0.	aRow hResizing: #shrinkWrap.	aRow vResizing: #shrinkWrap.	self hasParameter ifFalse:		[aRow addMorphFront:			(SimpleButtonMorph new				label: '!!' font: Preferences standardEToysFont;				target: self;				color: Color yellow;				borderWidth: 0;				actWhen: #whilePressed;				actionSelector: #tryMe;				balloonTextSelector: #tryMe).		aRow addTransparentSpacerOfSize: 6@10].	self addDismissButtonTo: aRow.	aRow addTransparentSpacerOfSize: 6@1.	aColumn := AlignmentMorph newColumn beTransparent.	aColumn addTransparentSpacerOfSize: 0@4.	aButton := UpdatingThreePhaseButtonMorph checkBox.	aButton		target: self;		actionSelector: #toggleWhetherShowingTiles;		getSelector: #showingMethodPane.	aButton setBalloonText: 'toggle between showing tiles and showing textual code' translated.	aColumn addMorphBack: aButton.	aRow addMorphBack: aColumn.	aRow addTransparentSpacerOfSize: 6@10.	aString := playerScripted externalName.	aRow addMorphBack:		(aButton := SimpleButtonMorph new useSquareCorners label: aString font: buttonFont; target: self; setNameTo: 'title').	aButton actWhen: #buttonDown; actionSelector: #offerScriptorMenu.	aButton		on: #mouseEnter send: #menuButtonMouseEnter: to: aButton;		on: #mouseLeave send: #menuButtonMouseLeave: to: aButton.	aButton borderColor: (Color fromRgbTriplet: #(0.065 0.258 1.0)).	aButton color: ScriptingSystem uniformTileInteriorColor.	aButton balloonTextSelector: #offerScriptorMenu.	aRow addTransparentSpacerOfSize: 4@1.	aButton := (Preferences universalTiles ifTrue: [SyntaxUpdatingStringMorph] 					ifFalse: [UpdatingStringMorph]) new.	aButton useStringFormat;		target:  self;		getSelector: #scriptTitle;		setNameTo: 'script name';		font: ScriptingSystem fontForNameEditingInScriptor;		putSelector: #setScriptNameTo:;		setProperty: #okToTextEdit toValue: true;		step.	aRow addMorphBack: aButton.	aButton setBalloonText: 'Click here to edit the name of the script.' translated.	aRow addTransparentSpacerOfSize: 6@0.	self hasParameter		ifTrue:			[aTile := TypeListTile new choices: Vocabulary typeChoices dataType: nil.			aTile addArrows.			aTile setLiteral: #Number.	"(aButton := SimpleButtonMorph new useSquareCorners label: 'parameter' translated font: buttonFont; target: self; setNameTo: 'parameter').			aButton actWhen: #buttonDown; actionSelector: #handUserParameterTile."			aRow addMorphBack: aTile.			aTile borderColor: Color red.			aTile color: ScriptingSystem uniformTileInteriorColor.			aTile setBalloonText: 'Drag from here to get a parameter tile' translated]		ifFalse:			[aRow addMorphBack: (aStatusMorph := self scriptInstantiation statusControlMorph)].	aRow addTransparentSpacerOfSize: 6@1.	aRow addMorphBack:		(IconicButton new borderWidth: 0;			labelGraphic: (ScriptingSystem formAtKey: 'AddTest'); color: Color transparent; 			actWhen: #buttonDown;			target: self;			actionSelector: #addYesNoToHand;			shedSelvedge;			balloonTextSelector: #addYesNoToHand).	aRow addTransparentSpacerOfSize: 12@10.	self addDestroyButtonTo: aRow.	(playerScripted existingScriptInstantiationForSelector: scriptName)		ifNotNil:			[:inst | inst updateStatusMorph: aStatusMorph].	^ aRow! !!ServerDirectory class methodsFor: '*eToys-school support' stamp: 'nice 1/18/2010 19:15'!parseEToyUserListFrom: urlString	| url userString userList |	urlString ifNil:[^nil].	url := urlString asUrl.	userString := ["Note: We need to prevent going through the plugin API 	when retrieving a local (file) URL, since the plugin API	(correctly) rejects file:// downloads."		Cursor wait showWhile:[			(url hasRemoteContents) ifTrue:[				"Go through the browser (if present)"				(HTTPClient httpGet: url asString) contents.			] ifFalse:[				"Go grab it directly"				url retrieveContents contents.			].		].	] on: Error do:[nil].	userString ifNil:[^nil].	"Get rid of any line ending problems"	userString := userString copyReplaceAll: String crlf with: String cr.	userString := userString copyReplaceAll: String lf with: String cr.	userList := (userString findTokens: Character cr) collect:[:each| each withBlanksTrimmed].	userList := userList reject:[:any| any isEmpty].	(userList first = '##user list##') ifFalse:[^nil].	userList := userList copyFrom: 2 to: userList size.	^userList! !Object removeSelector: #belongsToUniClass!PasteUpMorph removeSelector: #lastKeystroke!PasteUpMorph removeSelector: #lastKeystroke:!