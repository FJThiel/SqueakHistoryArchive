"Change Set:		8600Services-Base-nice.40Services-Base-nice.40:Cosmetic: move or remove a few temps inside closures"!!ServiceProvider methodsFor: 'persistence' stamp: 'nice 12/27/2009 03:11'!savePreferencesFor: aService 		"pref := ServicePreferences preferenceAt: aService shortcutPreference.	strm := WriteStream with: ''.	strm nextPutAll: aService id;		 nextPutAll: 'shortcut';		 cr;		 tab;		 nextPutAll: '^ ';		 nextPutAll: {pref name. pref preferenceValue. 1000} storeString.	self class compileSilently: strm contents classified: 'saved preferences'."	aService isCategory		ifTrue: [aService externalPreferences				doWithIndex: [:e :i | | strm | 					strm := WriteStream with: aService id asString.					strm nextPutAll: e id asString;						 cr;						 tab;						 nextPutAll: '^ ';						 nextPutAll: {aService childrenPreferences. e id. i} storeString.					e provider class compileSilently: strm contents classified: 'saved preferences']]! !!ServiceGui class methodsFor: 'registering button bars' stamp: 'nice 12/27/2009 03:12'!updateBar: cat		self bars 		select: [:assoc | (assoc key id = cat id) & assoc value notNil] 		thenDo: [:assoc | | newBar | 			cat requestor: assoc key requestor.			newBar := self new buttonBarFor: cat.			assoc value removeAllMorphs.			newBar submorphsDo: [:m | assoc value addMorphBack: m]]! !!ServiceGui class methodsFor: 'registering button bars' stamp: 'nice 12/27/2009 03:12'!updateBars		self bars do: [:assoc | | oldCat cat newBar bar | 		(bar := assoc value) ifNotNil: [			oldCat := assoc key.			cat := oldCat id service.			cat requestor: oldCat requestor.			newBar := self new buttonBarFor: cat.			bar removeAllMorphs.			newBar submorphsDo: [:m | bar addMorphBack: m]].		]! !!ServicePreferences class methodsFor: 'replaying' stamp: 'nice 12/27/2009 03:11'!replayPreferences: preferences 	| s |	s := SortedCollection new				sortBlock: [:a :b | a last < b last].	s addAll: preferences;		 reSort.	s		do: [:e | | v | 			v := self valueOfPreference: e first ifAbsent: ''.			self setPreference: e first toValue: (v					ifEmpty: ['']					ifNotEmpty: [v , ' '])					, e second]! !!ServiceRegistry class methodsFor: 'as yet unclassified' stamp: 'nice 12/26/2009 21:23'!methodChanged: event	self ifInteractiveDo: [	| cls | 	cls := event itemClass. 	((event changeKind = #removed) not & (cls inheritsFrom: ServiceProvider) and: [cls new services includes: event itemSelector])		ifTrue: [[self current addService: (cls new performAndSetId: event itemSelector)					provider: cls]			on: Error do: [self inform: 'Service format seems to be incorrect']]]! !!ServiceRegistry methodsFor: 'building' stamp: 'nice 12/26/2009 21:22'!build	"ServicePreferences wipe."	self		beNotInteractiveDuring: [			| pr |			ServiceProvider registeredProviders				do: [:p | p registeredServices						do: [:each | self addService: each provider: p class]].			pr := ServiceProvider registeredProviders						gather: [:p | p savedPreferences].			ServicePreferences replayPreferences: pr.			].	ServiceGui updateBars.	ServiceShortcuts setPreferences! !