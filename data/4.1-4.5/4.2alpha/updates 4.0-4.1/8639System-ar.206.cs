"Change Set:		8639System-ar.206System-ar.206:Preparations for NanoTraits: Make sure traits are treated like superclasses when filing out class categories; Smalltalk>>traitNames uses #isTrait instead of isKindOf: Trait and SystemNavigation>>allBehaviorsDo: delegates to ClassDescription to vector through the current traits implementation."!!SystemNavigation methodsFor: 'query' stamp: 'ar 12/27/2009 14:33'!allBehaviorsDo: aBlock 	"Evaluate the argument, aBlock, for each kind of Behavior in the system 	(that is, Object and its subclasses and Traits).	ar 7/15/1999: The code below will not enumerate any obsolete or anonymous	behaviors for which the following should be executed:		Smalltalk allObjectsDo:[:obj| obj isBehavior ifTrue:[aBlock value: obj]].	but what follows is way faster than enumerating all objects."	aBlock value: ProtoObject.	ProtoObject allSubclassesDoGently: aBlock.		"don't bring in ImageSegments"	"Classes outside the ProtoObject hierarchy"	Class subclassesDo: [:aClass |		(aClass == ProtoObject class			or: [aClass isInMemory not			or: [aClass isMeta not]]) ifFalse:			["Enumerate the non-meta class and its subclasses"			aBlock value: aClass soleInstance.			aClass soleInstance allSubclassesDoGently: aBlock]].		ClassDescription allTraitsDo:[:trait | aBlock value: trait].! !!SystemDictionary methodsFor: 'class and trait names' stamp: 'ar 12/20/2009 14:21'!traitNames	"Answer a SortedCollection of all traits (not including class-traits) names."	| names |	names := OrderedCollection new.	self do: 		[:cl | (cl isInMemory			and: [(cl isTrait)			and: [(cl name beginsWith: 'AnObsolete') not]])				ifTrue: [names add: cl name]].	^ names! !!ChangeSet class methodsFor: 'fileIn/Out' stamp: 'ar 12/20/2009 13:04'!doWeFileOut: aClass given: aSet cache: cache	| aClassAllSuperclasses aClassSoleInstanceAllSuperclasses |	aClassAllSuperclasses := cache at: aClass ifAbsentPut:[		aClass allSuperclasses asArray, aClass allTraits.	].	(aSet includesAnyOf: aClassAllSuperclasses) ifTrue: [^false].	aClass isMeta ifFalse: [^true].	(aSet includes: aClass soleInstance) ifTrue: [^false].	aClassSoleInstanceAllSuperclasses := cache at: aClass soleInstance		ifAbsentPut: [aClass soleInstance allSuperclasses asArray, aClass soleInstance allTraits].	(aSet includesAnyOf: aClassSoleInstanceAllSuperclasses) ifTrue: [^false].	^true! !