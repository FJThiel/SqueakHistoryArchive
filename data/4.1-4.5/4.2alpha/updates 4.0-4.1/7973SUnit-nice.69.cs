"Change Set:		7973SUnit-nice.69SUnit-nice.69:remove uncessary sends of #valuesbecause (aDictionary values do:) is same as (aDictionary do:)except when aDictionary is modified in the do loop."!!TestCase class methodsFor: 'coverage' stamp: 'nice 10/19/2009 20:57'!coverageForClass: cls until: aRootClass	"returns the test coverage of all the methods included inherited ones but stopping at aRootClass included"		| definedMethods testedMethods untestedMethods |	definedMethods := cls allSelectorsAboveUntil: aRootClass.	definedMethods size = 0		ifTrue: [^ {0. Set new}].	testedMethods := 		self methodDictionary inject: Set new into: 							[:sums :cm | sums union: cm messages].	testedMethods := testedMethods reject: [:sel | (definedMethods includes: sel) not].	untestedMethods := definedMethods select: [:selector | (testedMethods includes: selector) not].	^ { (testedMethods size * 100 / definedMethods size) asFloat . untestedMethods}! !!TestCase class methodsFor: 'coverage' stamp: 'nice 10/19/2009 20:57'!localCoverageForClass: cls		| definedMethods testedMethods untestedMethods |	definedMethods := cls selectors.	"It happens for IdentityBag / IdentityBagTest"	definedMethods size = 0		ifTrue: [^ {0. Set new}].	testedMethods := 		self methodDictionary inject: Set new into: 							[:sums :cm | sums union: cm messages].						"testedMethods contains all the methods send in test methods, which probably contains methods that have nothign to do with collection"	testedMethods := testedMethods reject: [:sel | (definedMethods includes: sel) not].	untestedMethods := definedMethods select: [:selector | (testedMethods includes: selector) not].	^ { (testedMethods size * 100 / definedMethods size) asFloat . untestedMethods}! !