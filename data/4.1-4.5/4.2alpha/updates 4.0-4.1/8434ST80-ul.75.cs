"Change Set:		8434ST80-ul.75ST80-ul.75:- replace sends of #ifNotNilDo: to #ifNotNil:, #ifNil:ifNotNilDo: to #ifNil:ifNotNil:, #ifNotNilDo:ifNil: to #ifNotNil:ifNil:"!!PopUpMenu methodsFor: 'basic control sequence' stamp: 'ul 12/12/2009 14:07'!startUpWithCaption: captionOrNil icon: aForm at: location allowKeyboard: aBoolean	"Display the menu, with caption if supplied. Wait for the mouse button to go down, then track the selection as long as the button is pressed. When the button is released,	Answer the index of the current selection, or zero if the mouse is not released over  any menu item. Location specifies the desired topLeft of the menu body rectangle. The final argument indicates whether the menu should seize the keyboard focus in order to allow the user to navigate it via the keyboard."	| maxHeight |	(ProvideAnswerNotification signal: captionOrNil) ifNotNil:		[:answer | ^ selection := answer ifTrue: [1] ifFalse: [2]].		 	maxHeight := Display height*3//4.	self frameHeight > maxHeight ifTrue:		[^ self			startUpSegmented: maxHeight			withCaption: captionOrNil			at: location			allowKeyboard: aBoolean].	Smalltalk isMorphic		ifTrue:[			selection := Cursor normal showWhile:				[| menuMorph | 				menuMorph := MVCMenuMorph from: self title: nil.				(captionOrNil notNil or:[aForm notNil])					ifTrue:[menuMorph addTitle: captionOrNil icon: aForm].				MenuIcons decorateMenu: menuMorph.				menuMorph					invokeAt: location 					in: ActiveWorld					allowKeyboard: aBoolean].			^ selection].	frame ifNil: [self computeForm].	Cursor normal showWhile:		[self			displayAt: location			withCaption: captionOrNil			during: [self controlActivity]].	^ selection! !!MVCProject methodsFor: 'display' stamp: 'ul 12/12/2009 14:09'!viewLocFor: exitedProject 	"Look for a view of the exitedProject, and return its center"	(world controllerWhoseModelSatisfies: [:p | p == exitedProject])		ifNotNil: [:ctlr | ^ctlr view windowBox center].	^Sensor cursorPoint	"default result"! !!MVCProject methodsFor: 'scheduling' stamp: 'ul 12/12/2009 14:09'!addDeferredUIMessage: valuableObject 	"Arrange for valuableObject to be evaluated at a time when the user interface	is in a coherent state."	ScheduledControllers activeController		ifNotNil: [:controller | controller addDeferredUIMessage: valuableObject]! !