"Change Set:		9685Collections-nice.336Collections-nice.336:1) Cache Character DigitValues to gain some speed.Warning: continue parsing lowercase digits, though it was not consensual.Note: class var initialization testing will be removed in nxt release. It's only an upgrade guard.2) Avoid using size == 0Benchmark:['0123456789' do: [:e | e digitValue]] benchAFTER '233969.8060387922 per second.' '236418.5162967407 per second.'BEFORE  '188964.4071185763 per second.' '197284.9430113977 per second.'['0123456789ABCDEF' do: [:e | e digitValue]] benchAFTER '155123.375324935 per second.' '152030.1939612078 per second.'BEFORE '120782.4435112977 per second.' '119901.4197160568 per second.'['0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ' do: [:e | e digitValue]] benchAFTER '73469.7060587882 per second.' '73144.3711257749 per second.'BEFORE '55508.49830033993 per second.' '55637.2725454909 per second.'['0123456789abcdefghijklmnopqrstuvwxyz' do: [:e | e digitValue]] benchAFTER '71603.8792241552 per second.' '72621.875624875 per second.'BEFORE '21194.16116776645 per second.' '21273.34533093381 per second.'Collections-HenrikSperreJohansen.335:Faster String>>convertFromWithConverter: from Pharo.Useful in f.ex. asVMPathName.Test: [|converter|	converter := UTF8TextConverter new.	1 to: 50000 do: [:ix | 'abcæøåaskjdhfasiugbvsipruvnasipvunasivunapivunasieun' convertToWithConverter: converter]] timeToRun"!Magnitude subclass: #Character	instanceVariableNames: 'value'	classVariableNames: 'CharacterTable ClassificationTable DigitValues LetterBits LowercaseBit UppercaseBit'	poolDictionaries: ''	category: 'Collections-Strings'!!String methodsFor: 'converting' stamp: 'HenrikSperreJohansen 3/12/2010 15:21'!convertToWithConverter: converter 	converter		ifNil: [^ self].	^ String		new: self size		streamContents: [:writeStream | 			converter 				nextPutAll: self toStream: writeStream;				emitSequenceToResetStateIfNeededOn: writeStream]! !!Character class methodsFor: 'class initialization' stamp: 'nice 3/14/2010 22:36'!initialize	"Create the table of unique Characters, and DigitsValues."	"Character initializeClassificationTable"		CharacterTable ifNil: [		"Initialize only once to ensure that byte characters are unique"		CharacterTable := Array new: 256.		1 to: 256 do: [:i | CharacterTable at: i put: (self basicNew setValue: i - 1)]].	self initializeDigitValues! !!String methodsFor: 'converting' stamp: 'nice 3/12/2010 23:18'!asLegalSelector	| toUse |	toUse := self select: [:char | char isAlphaNumeric].	(toUse size = 0 or: [toUse first isLetter not])		ifTrue: [toUse := 'v', toUse].	^ toUse withFirstCharacterDownshifted! !!Character methodsFor: 'accessing' stamp: 'nice 3/14/2010 22:47'!digitValue	"Answer 0-9 if the receiver is $0-$9, 10-35 if it is $A-$Z, and < 0 	otherwise. This is used to parse literal numbers of radix 2-36."	| code |	(code := self charCode) > 16rFF ifTrue: [^(EncodedCharSet charsetAt: self leadingChar) digitValueOf: self].	DigitValues ifNil: [self class initializeDigitValues].	^DigitValues at: 1 + code! !!Character class methodsFor: 'class initialization' stamp: 'nice 3/14/2010 22:36'!initializeDigitValues	"Initialize the well known digit value of ascii characters.	Note that the DigitValues table is 1-based while ascii values are 0-based, thus the offset +1."		DigitValues := Array new: 256 withAll: -1.	"the digits"	0 to: 9 do: [:i | DigitValues at: 48 + i + 1 put: i].	"the uppercase letters"	10 to: 35 do: [:i | DigitValues at: 55 + i + 1 put: i].	"the lowercase letters"	10 to: 35 do: [:i | DigitValues at: 87 + i + 1 put: i].! !Character initialize!