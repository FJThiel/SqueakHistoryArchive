"Change Set:		7782Monticello-ar.323Monticello-ar.323:A small improvement to MC loading. New rules are:- Pass 1: Load class changes first- Pass 2: Compile new / changed methods- Pass 3: Install new / changed methods- Pass 4: Remove old methodsThis should provide a bit more stability to the loading process.Monticello-cwp.322:Merge UI fixes into trunk."!Object subclass: #MethodAddition	instanceVariableNames: 'text category changeStamp requestor logSource myClass methodAndNode selector compiledMethod priorMethodOrNil'	classVariableNames: ''	poolDictionaries: ''	category: 'Monticello-Loading'!!MCPackageLoader methodsFor: 'private' stamp: 'ar 9/29/2009 21:25'!basicLoad	errorDefinitions := OrderedCollection new.	[["Pass 1: Load everything but the methods,  which are collected in methodAdditions."	additions do: [:ea | 		[ea isMethodDefinition 			ifTrue:[methodAdditions add: ea asMethodAddition]			ifFalse:[ea load]]on: Error do: [errorDefinitions add: ea].	] displayingProgress: 'Reshaping classes...'.	"Pass 2: We compile new / changed methods"	methodAdditions do:[:ea| ea createCompiledMethod] displayingProgress: 'Compiling...'.	"Pass 3: Install the new / changed methods	(this is a separate pass to allow compiler changes to be loaded)"	methodAdditions do:[:ea| ea installMethod] displayingProgress: 'Installing...'.	"Pass 4: Remove the obsolete methods"	removals do:[:ea| ea unload] displayingProgress: 'Cleaning up ...'.	"Try again any delayed definitions"	self shouldWarnAboutErrors ifTrue: [self warnAboutErrors].	errorDefinitions do: [:ea | ea load] displayingProgress: 'Reloading...'.	"Finally, notify observers for the method additions"	methodAdditions do: [:each | each notifyObservers].	additions do: [:ea | ea postloadOver: (self obsoletionFor: ea)] displayingProgress: 'Initializing...'	] on: InMidstOfFileinNotification do: [:n | n resume: true]	] ensure: [self flushChangesFile]! !!MCWorkingCopyBrowser methodsFor: 'actions' stamp: 'cwp 8/30/2009 23:00'!addRequiredPackage	| chosen |	workingCopy ifNotNilDo:		[:wc |		chosen := self pickWorkingCopySatisfying: 			[:ea | ea ~= wc and: [(wc requiredPackages includes: ea package) not]].		chosen ifNotNil:			[wc requirePackage: chosen package.			self workingCopyListChanged]]! !!MCMethodDefinition methodsFor: 'accessing' stamp: 'ar 9/28/2009 20:52'!asMethodAddition	^MethodAddition new		compile: source		classified: category		withStamp: timeStamp		notifying: (SyntaxError new category: category)		logSource: true		inClass: self actualClass.! !!MCWorkingCopyBrowser methodsFor: 'actions' stamp: 'cwp 8/30/2009 22:17'!saveVersion	| repo |	self canSave ifFalse: [^self].	repo := self repository.	workingCopy newVersion ifNotNilDo:		[:v |		(MCVersionInspector new version: v) show.		Cursor wait showWhile: [repo storeVersion: v].		MCCacheRepository default cacheAllFileNamesDuring: 			[repo cacheAllFileNamesDuring: 				[v allAvailableDependenciesDo:					[:dep |					(repo includesVersionNamed: dep info name)						ifFalse: [repo storeVersion: dep]]]]]! !