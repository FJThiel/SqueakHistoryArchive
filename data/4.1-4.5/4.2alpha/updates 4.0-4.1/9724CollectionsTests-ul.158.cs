"Change Set:		9724CollectionsTests-ul.158CollectionsTests-ul.158:- don't use SequenceableCollection >> #reverseCollectionsTests-ul.157:- added a test for HashedCollection class >> #goodPrimesForIdentityBasedHashedCollections"!!OrderedCollectionTest methodsFor: 'testing-public methods' stamp: 'ul 3/21/2010 17:46'!testAddAfterIndex	"self run: #testAddAfterIndex"	| l |	l := #(1 2 3 4) asOrderedCollection.	l add: 77 afterIndex: 0.	self assert: (l =  #(77 1 2 3 4) asOrderedCollection).	l add: 88 afterIndex: 2.	self assert: (l =  #(77 1 88 2 3 4) asOrderedCollection). 	l add: 99 afterIndex: l size.	self assert: (l =  #(77 1 88 2 3 4 99) asOrderedCollection). 	self should:[l add: 666 afterIndex: -1] raise: Error.	self should:[l add: 666 afterIndex: l size+1] raise: Error.		"Now make room by removing first two and last two elements,	and see if the illegal bounds test still fails"	(l first: 2) , (l last: 2) reversed do: [:e | l remove: e].	self should: [l add: 666 afterIndex: -1] raise: Error.	self should: [l add: 666 afterIndex: l size+1] raise: Error.! !!HashedCollectionTest methodsFor: 'test - class - sizing' stamp: 'ul 3/19/2010 14:20'!testPrimes: primes	self assert: primes isSorted.	primes do: [ :each | self assert: each isPrime ].	self assert: (		primes select: [ :p |			| result |			result := false.			p > 2069 ifTrue: [			1 to: 8 do: [ :k |				1 to: 32 do: [ :a |					(p gcd: (256 raisedTo: k) + a) = 1 ifFalse: [						result := true ].					(p gcd: (256 raisedTo: k) - a) = 1 ifFalse: [						result := true ] ] ] ].			result ]) isEmpty.! !!HashedCollectionTest methodsFor: 'test - class - sizing' stamp: 'ul 3/19/2010 14:22'!testGoodPrimesForIdentityBasedHashedCollections 	self testPrimes: HashedCollection goodPrimesForIdentityBasedHashedCollections! !!OrderedCollectionTest methodsFor: 'testing-public methods' stamp: 'ul 3/21/2010 17:46'!testAddBeforeIndex	"self run: #testAddBeforeIndex"	| l |	l := #(1 2 3 4) asOrderedCollection.	l add: 77 beforeIndex: 1.	self assert: (l =  #(77 1 2 3 4) asOrderedCollection).	l add: 88 beforeIndex: 3.	self assert: (l =  #(77 1 88 2 3 4) asOrderedCollection). 	l add: 99 beforeIndex: l size+1.	self assert: (l =  #(77 1 88 2 3 4 99) asOrderedCollection). 	self should:[l add: 666 beforeIndex: 0] raise: Error.	self should:[l add: 666 beforeIndex: l size+2] raise: Error.		"Now make room by removing first two and last two elements,	and see if the illegal bounds test still fails"	(l first: 2) , (l last: 2) reversed do: [:e | l remove: e].	self should:[l add: 666 beforeIndex: 0] raise: Error.	self should:[l add: 666 beforeIndex: l size+2] raise: Error.! !!HashedCollectionTest methodsFor: 'test - class - sizing' stamp: 'ul 3/19/2010 14:20'!testGoodPrimes	self testPrimes: HashedCollection goodPrimes! !