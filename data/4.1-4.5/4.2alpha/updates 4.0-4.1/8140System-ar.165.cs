"Change Set:		8140System-ar.165System-ar.165:Remove support for isolation layers.System-dtl.162:Move three methods from MorphicProject back to Project, undoing prior change. These are required for creating and entering an MVC project from Morphic.System-dtl.163:Continue factoring Project into MVCProject and MorphicProject. Add method category 'enter' for methods associated with entering one project from another, including MVC-Morphic transition. Project>>enter: revert:saveForRevert: is significantly modified. Changes are in packages System, Morphic, and ST-80.System-dtl.164:Factor Project>>saveState into MVCProject and MorphicProject.Flag Project>>enterForEmergencyRecovery for later removal, per discussion:http://lists.squeakfoundation.org/pipermail/squeak-dev/2009-November/140762.html"!Model subclass: #Project	instanceVariableNames: 'world changeSet transcript parentProject previousProject displayDepth viewSize thumbnail nextProject guards projectParameters version urlList environment lastDirectory lastSavedAtSeconds projectPreferenceFlagDictionary resourceManager'	classVariableNames: 'AllProjects CurrentProject GoalFreePercent GoalNotMoreThan UIProcess'	poolDictionaries: ''	category: 'System-Support'!!Project methodsFor: 'enter' stamp: 'dtl 11/7/2009 21:01'!pauseEventRecorder	"Suspend any event recorder, and return it if found"	^ nil! !!Project methodsFor: 'displaying' stamp: 'dtl 11/6/2009 21:58'!viewLocFor: exitedProject 	"Look for a view of the exitedProject, and return its center"	self subclassResponsibility! !!ChangeSet class methodsFor: 'current changeset' stamp: 'ar 11/12/2009 01:08'!newChanges: aChangeSet 	"Set the system ChangeSet to be the argument, aChangeSet.  Tell the current project that aChangeSet is now its change set.  When called from Project enter:, the setChangeSet: call is redundant but harmless; when called from code that changes the current-change-set from within a project, it's vital"	SystemChangeNotifier uniqueInstance noMoreNotificationsFor: current.	current := aChangeSet.	SystemChangeNotifier uniqueInstance notify: aChangeSet ofAllSystemChangesUsing: #event:.	Smalltalk currentProjectDo:[:proj |		proj setChangeSet: aChangeSet]! !!Project methodsFor: 'enter' stamp: 'dtl 11/7/2009 20:15'!setWorldForEmergencyRecovery	"Prepare world for enter with an absolute minimum of mechanism.	An unrecoverable error has been detected in an isolated project."	self subclassResponsibility! !!Project methodsFor: 'flaps support' stamp: 'di 11/18/2001 14:34'!flapsSuppressed: aBoolean	"Make the setting of the flag that governs whether global flaps are suppressed in the project be as indicated and add or remove the actual flaps"	self projectPreferenceFlagDictionary at: #showSharedFlaps put: aBoolean not.	self == Project current  "Typical case"		ifTrue:			[Preferences setPreference: #showSharedFlaps toValue: aBoolean not]		ifFalse:   "Anomalous case where this project is not the current one."			[aBoolean				ifTrue:							[Flaps globalFlapTabsIfAny do:						[:aFlapTab | Flaps removeFlapTab: aFlapTab keepInList: true]]				ifFalse:					[Smalltalk isMorphic  ifTrue:						[self currentWorld addGlobalFlaps]]].	Project current assureNavigatorPresenceMatchesPreference! !!Project methodsFor: 'enter' stamp: 'dtl 11/7/2009 21:09'!isIncompletelyLoaded	"Answer true if project is incomplete and should be loaded from server "	^ false! !!Project methodsFor: 'enter' stamp: 'dtl 11/7/2009 20:22'!setWorldForEnterFrom: old recorder: recorderOrNil	"Prepare world for enter."	self subclassResponsibility! !!Project methodsFor: 'enter' stamp: 'dtl 11/7/2009 20:54'!pauseSoundPlayers	"Pause sound players, subject to preference settings"	self subclassResponsibility! !!Project methodsFor: 'enter' stamp: 'dtl 11/7/2009 20:46'!triggerClosingScripts	"If any scripts must be run on closing, run them now"! !!Project methodsFor: 'flaps support' stamp: 'sw 4/24/2001 11:02'!showSharedFlaps	"Answer whether shared flaps are shown or suppressed in this project"	| result |	result := Preferences showSharedFlaps.	^ self == Project current		ifTrue:			[result]		ifFalse:			[self projectPreferenceAt: #showSharedFlaps ifAbsent: [result]]! !!Project methodsFor: 'enter' stamp: 'dtl 11/9/2009 21:33'!saveState	"Save the current state in me prior to leaving this project"	self subclassResponsibility! !!Project methodsFor: 'file in/out' stamp: 'dtl 11/2/2009 23:40'!armsLengthCommand: aCommand withDescription: aString	"Set things up so that this aCommand is sent to self as a messageafter jumping to the parentProject.  For things that can't be executedwhile in this project, such as saveAs, loadFromServer, storeOnServer.  SeeProjectViewMorph step."	self subclassResponsibility! !!Project methodsFor: 'initialization' stamp: 'ar 11/12/2009 01:11'!setChangeSet: aChangeSet	changeSet := aChangeSet! !!Project methodsFor: 'enter' stamp: 'dtl 11/7/2009 20:33'!scheduleProcessForEnter: showZoom	"Complete the enter: by launching a new process"	self subclassResponsibility! !!Project methodsFor: 'initialization' stamp: 'ar 11/12/2009 01:11'!initialize	"Initialize the project, seting the CurrentProject as my parentProject and initializing my project preferences from those of the CurrentProject"	Project addingProject: self.	changeSet := ChangeSet new.	transcript := TranscriptStream new.	displayDepth := Display depth.	parentProject := CurrentProject.	self initializeProjectPreferences! !!Project methodsFor: 'flaps support' stamp: 'sw 4/24/2001 11:03'!flapsSuppressed	"Answer whether flaps are suppressed in this project"	^ self showSharedFlaps not! !!Project methodsFor: 'enter' stamp: 'ar 11/12/2009 01:06'!enter: returningFlag revert: revertFlag saveForRevert: saveForRevert	"Install my ChangeSet, Transcript, and scheduled views as current globals. If returningFlag is true, we will return to the project from whence the current project was entered; don't change its previousProject link in this case.	If saveForRevert is true, save the ImageSegment of the project being left.	If revertFlag is true, make stubs for the world of the project being left.	If revertWithoutAsking is true in the project being left, then always revert."	| showZoom recorderOrNil old forceRevert response seg |	self isIncompletelyLoaded ifTrue:		[^self loadFromServer: true	"try to get a fresh copy"].	self isCurrentProject ifTrue: [^ self].	"Check the guards"	guards ifNotNil:		[guards := guards reject: [:obj | obj isNil].		guards do: [:obj | obj okayToEnterProject ifFalse: [^ self]]].	CurrentProject world triggerEvent: #aboutToLeaveWorld.	forceRevert := false.	CurrentProject rawParameters 		ifNil: [revertFlag ifTrue: [^ self inform: 'nothing to revert to' translated]]		ifNotNil: [saveForRevert ifFalse: [				forceRevert := CurrentProject projectParameters 								at: #revertWithoutAsking ifAbsent: [false]]].	forceRevert not & revertFlag ifTrue: [		response := (UIManager default chooseFrom: {			'Revert to saved version' translated.			'Cancel' translated.		} title: 'Are you sure you want to destroy this Project\ and revert to an older version?\\(From the parent project, click on this project''s thumbnail.)' translated withCRs) = 1.		response ifFalse: [^ self]].	revertFlag | forceRevert 		ifTrue: [seg := CurrentProject projectParameters at: #revertToMe ifAbsent: [					^ self inform: 'nothing to revert to' translated]]		ifFalse: [			CurrentProject finalExitActions.			CurrentProject makeThumbnail.			returningFlag == #specialReturn				ifTrue:					[ProjectHistory forget: CurrentProject.		"this guy is irrelevant"					Project forget: CurrentProject]				ifFalse:					[ProjectHistory remember: CurrentProject]].	(revertFlag | saveForRevert | forceRevert) ifFalse:		[(Preferences valueOfFlag: #projectsSentToDisk) ifTrue:			[self storeToMakeRoom]].	CurrentProject abortResourceLoading.	CurrentProject triggerClosingScripts.	CurrentProject saveProjectPreferences.	"Update the display depth and make a thumbnail of the current project"	CurrentProject displayDepth: Display depth.	old := CurrentProject.		"for later"	"Show the project transition.	Note: The project zoom is run in the context of the old project,		so that eventual errors can be handled accordingly"	displayDepth == nil ifTrue: [displayDepth := Display depth].	self installNewDisplay: Display extent depth: displayDepth.	(showZoom := self showZoom) ifTrue: [		self displayZoom: CurrentProject parent ~~ self].	CurrentProject pauseSoundPlayers.	returningFlag == #specialReturn ifTrue: [		old removeChangeSetIfPossible.	"keep this stuff from accumulating"		nextProject := nil	] ifFalse: [		returningFlag			ifTrue: [nextProject := CurrentProject]			ifFalse: [previousProject := CurrentProject].	].	CurrentProject saveState.	CurrentProject := self.	self installProjectPreferences.	ChangeSet  newChanges: changeSet.	TranscriptStream newTranscript: transcript.	Sensor flushKeyboard.	recorderOrNil := old pauseEventRecorder.	ProjectHistory remember: CurrentProject.	self setWorldForEnterFrom: old recorder: recorderOrNil.	saveForRevert ifTrue: [		Smalltalk garbageCollect.	"let go of pointers"		old storeSegment.		"result :=" old world isInMemory 			ifTrue: ['Can''t seem to write the project.']			ifFalse: [old projectParameters at: #revertToMe put: 					old world xxxSegment clone].				'Project written.'].			"original is for coming back in and continuing."	revertFlag | forceRevert ifTrue: [		seg clone revert].	"non-cloned one is for reverting again later"	self removeParameter: #exportState.	"Complete the enter: by launching a new process"	self scheduleProcessForEnter: showZoom! !!Project methodsFor: 'enter' stamp: 'dtl 11/6/2009 21:43'!finalExitActions! !!Project methodsFor: 'menu messages' stamp: 'dtl 11/6/2009 21:35'!assureNavigatorPresenceMatchesPreference	"Make sure that the current project conforms to the presence/absence of the navigator"! !Project removeSelector: #isIsolated!Project removeSelector: #invoke!Project removeSelector: #invokeFrom:!Project removeSelector: #finalEnterActions!Project removeSelector: #beIsolated!Project removeSelector: #navigatorFlapVisible!Project removeSelector: #convertToCurrentVersion:refStream:!Project removeSelector: #layersToTop!Project removeSelector: #revoke!ChangeSet removeSelector: #compileAll:from:!Project removeSelector: #isolationSet!Project removeSelector: #compileAll:from:!Project removeSelector: #propagateChanges!Project removeSelector: #compileAllIsolated:from:!Project removeSelector: #enterForEmergencyRecovery!Project removeSelector: #isolationHead!