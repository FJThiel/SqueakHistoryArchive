"Change Set:		9401System-ul.258System-ul.258:- integrate MessageTally fixes from Cuis (by Juan Vuletich)System-dtl.254:Remove explicit MVC/Morphic dependencies from Preferences class>>setListFontTo:Implement Project>>textWindows to remove MVC/Morphic dependencies from  Utilities class> storeTextWindowContentsToFileNamed:Fix bug in #storeTextWindowContentsToFileNamed: in which text windows with duplicate window titles were not saved.Remove explicit MVC references from SystemDictionary>>majorShrink.Remove explicit MVC reference from SystemDictionary>>discardOddsAndEnds.System-dtl.255:Update SystemDictionary>>discardMVC to perform complete MVC removal. MVC may be reinstalled by loading packages ST80 and ToolBuilder-MVC.System-ar.256:Update unloadAllKnownPackages to  include MVC removal.System-mtf.257:Added SmalltalkImage >> windowSystemName to determine what windowing system Squeak is using (X11, Qwartz, etc). OpenGL needs this"!!SmalltalkImage methodsFor: 'system attribute' stamp: 'mtf 2/18/2010 13:16'!windowSystemName				"Return the name of the window system currently being used for display."	"SmalltalkImage current windowSystemName"	^self getSystemAttribute: 1005! !!SystemDictionary methodsFor: 'shrinking' stamp: 'dtl 2/14/2010 21:41'!discardOddsAndEnds	"This method throws out lots of classes that are not frequently	used."	"Smalltalk discardOddsAndEnds"	self organization removeSystemCategory: 'System-Serial Port'.	self organization removeSystemCategory: 'ST80-Symbols'.	self organization removeSystemCategory: 'Tools-File Contents Browser'.	self organization removeSystemCategory: 'System-Compression'.	self organization removeSystemCategory: 'Tools-Explorer'.	self organization removeSystemCategory: 'System-Digital Signatures'.	Form removeSelector: #edit.	self		at: #FormView		ifPresent: [:c | c compile: 'defaultControllerClass  ^ NoController' classified: 'controller access'].	self removeClassNamed: #FormEditorView.	self removeClassNamed: #FormEditor.	self organization removeSystemCategory: 'ST80-Paths'.	"bit editor (remove Form editor first):"	Form removeSelector: #bitEdit.	Form removeSelector: #bitEditAt:scale:.	StrikeFont removeSelector: #edit:.	self removeClassNamed: #FormButtonCache.	self removeClassNamed: #FormMenuController.	self removeClassNamed: #FormMenuView.	self removeClassNamed: #BitEditor.	"inspector for Dictionaries of Forms"	Dictionary removeSelector: #inspectFormsWithLabel:.	SystemDictionary removeSelector: #viewImageImports.	self		at: #ScreenController		ifPresent: [:c | c removeSelector: #viewImageImport].	self removeClassNamed: #FormHolderView.	self removeClassNamed: #FormInspectView.	"experimental updating object viewer:"	Object removeSelector: #evaluate:wheneverChangeIn:.	self removeClassNamed: #ObjectViewer.	self removeClassNamed: #ObjectTracer.	"miscellaneous classes:"	self removeClassNamed: #Array2D.	self removeClassNamed: #DriveACar.	self removeClassNamed: #EventRecorder.	self removeClassNamed: #FindTheLight.	self removeClassNamed: #PluggableTest.	self removeClassNamed: #SystemMonitor.	self removeClassNamed: #ProtocolBrowser.	self removeClassNamed: #ObjectExplorerWrapper.	self removeClassNamed: #HierarchyBrowser.	self removeClassNamed: #LinkedMessageSet.	self removeClassNamed: #ObjectExplorer.	self removeClassNamed: #PackageBrowser.	self removeClassNamed: #AbstractHierarchicalList.	self removeClassNamed: #ChangeList.	self removeClassNamed: #VersionsBrowser.	self removeClassNamed: #ChangeRecord.	self removeClassNamed: #SelectorBrowser.	self removeClassNamed: #HtmlFileStream.	self removeClassNamed: #CrLfFileStream.	self removeClassNamed: #FXGrafPort.	self removeClassNamed: #FXBlt.	self		at: #SampledSound		ifPresent: [:c | c initialize].	#(#Helvetica #Palatino #Courier #ComicBold #ComicPlain )		do: [:k | TextConstants				removeKey: k				ifAbsent: []].	Preferences		setButtonFontTo: (StrikeFont familyName: #NewYork size: 12).	Preferences		setFlapsFontTo: (StrikeFont familyName: #NewYork size: 12).	#(#GZipConstants #ZipConstants #KlattResonatorIndices )		do: [:k | self				removeKey: k				ifAbsent: []]! !!Project methodsFor: 'utilities' stamp: 'dtl 2/14/2010 20:44'!textWindows	"Answer a dictionary of all system windows for text display keyed by window title.	Generate new window titles as required to ensure unique keys in the dictionary."	self subclassResponsibility! !!MessageTally methodsFor: 'initialize-release' stamp: 'ul 2/22/2010 16:46'!spyEvery: millisecs onProcess: aProcess forMilliseconds: msecDuration 	"Create a spy and spy on the given process at the specified rate."	| myDelay time0 endTime observedProcess sem |	(aProcess isKindOf: Process)		ifFalse: [self error: 'spy needs a Process here'].	self class: aProcess suspendedContext receiver class method: aProcess suspendedContext method.	"set up the probe"	observedProcess := aProcess.	myDelay := Delay forMilliseconds: millisecs.	time0 := Time millisecondClockValue.	endTime := time0 + msecDuration.	sem := Semaphore new.	gcStats := SmalltalkImage current getVMParameters.	Timer ifNotNil: [ self error: 'it seems a tally is already running' ].	Timer := [			[				| startTime |				startTime := Time millisecondClockValue.				myDelay wait.				self					tally: Processor preemptedProcess suspendedContext					in: (observedProcess == Processor preemptedProcess 						ifTrue: [ observedProcess ]						ifFalse: [ nil ])					"tally can be > 1 if ran a long primitive"					by: (Time millisecondClockValue - startTime) // millisecs.				startTime < endTime			] whileTrue.			sem signal.		] newProcess.	Timer priority: Processor timingPriority-1.		"activate the probe and evaluate the block"	Timer resume.	"activate the probe and wait for it to finish"	sem wait.	"Collect gc statistics"	SmalltalkImage current getVMParameters keysAndValuesDo: [ :idx :gcVal | 		gcStats at: idx put: (gcVal - gcStats at: idx)].	time := Time millisecondClockValue - time0! !!MessageTally class methodsFor: 'spying' stamp: 'ul 2/22/2010 16:52'!tallySendsTo: receiver inBlock: aBlock showTree: treeOption	"	MessageTally tallySends: [3.14159 printString]	"	"This method uses the simulator to count the number of calls on each method	invoked in evaluating aBlock. If receiver is not nil, then only sends	to that receiver are tallied.	Results are presented as leaves, sorted by frequency,	preceded, optionally, by the whole tree."	| prev tallies startTime totalTime |	startTime := Time millisecondClockValue.	tallies := MessageTally new class: aBlock receiver class method: aBlock method.	tallies reportOtherProcesses: true.	"Do NOT filter nodes with nil process"	prev := aBlock.	thisContext sender		runSimulated: aBlock		contextAtEachStep: [ :current |			current == prev ifFalse: [ "call or return"				prev sender == nil ifFalse: [ "call only"					(receiver == nil or: [ current receiver == receiver ])						ifTrue: [ tallies tally: current by: 1 ] ].				prev := current ] ].	totalTime := Time millisecondClockValue - startTime // 1000.0 roundTo: 0.01.	(StringHolder new contents:		(String streamContents:			[:s |			s nextPutAll: 'This simulation took ' , totalTime printString							, ' seconds.'; cr.			treeOption				ifTrue: [ tallies fullPrintExactOn: s ]				ifFalse: [ tallies leavesPrintExactOn: s ].			tallies close ]))		openLabel: 'Spy Results'! !!MessageTally methodsFor: 'initialize-release' stamp: 'ul 2/22/2010 16:43'!spyAllEvery: millisecs on: aBlock	"Create a spy and spy on the given block at the specified rate."	"Spy all the system processes"	| myDelay time0 |	aBlock isBlock		ifFalse: [ self error: 'spy needs a block here' ].	self class: aBlock receiver class method: aBlock method.		"set up the probe"	myDelay := Delay forMilliseconds: millisecs.	time0 := Time millisecondClockValue.	gcStats := SmalltalkImage current getVMParameters.	Timer ifNotNil: [ self error: 'it seems a tally is already running' ].	Timer := [		[true] whileTrue: [			| observedProcess startTime |			startTime := Time millisecondClockValue.			myDelay wait.			observedProcess := Processor preemptedProcess.			self				tally: observedProcess suspendedContext				in: observedProcess				"tally can be > 1 if ran a long primitive"				by: (Time millisecondClockValue - startTime) // millisecs].		nil] newProcess.	Timer priority: Processor timingPriority-1.		"activate the probe and evaluate the block"	Timer resume.	^ aBlock ensure: [		"cancel the probe and return the value"		"Could have already been terminated. See #terminateTimerProcess"		Timer ifNotNil: [			Timer terminate.			Timer := nil ].		"Collect gc statistics"		SmalltalkImage current getVMParameters keysAndValuesDo: [ :idx :gcVal | 			gcStats at: idx put: (gcVal - (gcStats at: idx))].		time := Time millisecondClockValue - time0]! !!SystemDictionary methodsFor: 'shrinking' stamp: 'dtl 2/14/2010 21:35'!majorShrink	"Undertake a major shrinkage of the image.	This method throws out lots of the system that is not needed	for, eg, operation in a hand-held PC. majorShrink produces a	999k image in Squeak 2.8	Smalltalk majorShrink; abandonSources; lastRemoval"	| oldDicts newDicts |	self isMorphic		ifTrue: [^ self error: 'You can only run majorShrink in MVC'].	Project current isTopProject		ifFalse: [^ self error: 'You can only run majorShrink in the top project'].	(self confirm: 'All sub-projects will be deleted from this image.You should already have made a backup copy,or you must save with a different name after shrinking.Shall we proceed to discard most of the content in this image?')		ifFalse: [^ self inform: 'No changes have been made.'].	"Remove all projects but the current one. - saves 522k"	Smalltalk at: #ProjectView ifPresent: [:pvClass |		pvClass allInstancesDo: [:pv | pv controller closeAndUnscheduleNoTerminate]].	Project current setParent: Project current.	Smalltalk at: #Wonderland ifPresent: [:cls |		cls removeActorPrototypesFromSystem].	Smalltalk at: #Player ifPresent:[:aClass| aClass freeUnreferencedSubclasses].	MorphicModel removeUninstantiatedModels.	Utilities classPool at: #ScrapsBook put: nil.	Utilities zapUpdateDownloader.	ProjectHistory currentHistory initialize.	Project rebuildAllProjects.	"Smalltalk discardVMConstruction."	"755k"	self discardSoundSynthesis.	"544k"	self discardOddsAndEnds.	"227k"	self discardNetworking.	"234k"	"Smalltalk discard3D."	"407k"	self discardFFI.	"33k"	self discardMorphic.	"1372k"	Symbol rehash.	"40k"	"Above by itself saves about 4,238k"	"Remove references to a few classes to be deleted, so that they	won't leave obsolete versions around."	ChangeSet class compile: 'defaultName		^ ''Changes'' ' classified: 'initialization'.	Smalltalk at: #ScreenController ifPresent: [:sc |		sc removeSelector: #openChangeManager.		sc removeSelector: #exitProject.		sc removeSelector: #openProject.		sc removeSelector: #viewImageImports].	"Now delete various other classes.."	SystemOrganization removeSystemCategory: 'Graphics-Files'.	SystemOrganization removeSystemCategory: 'System-Object Storage'.	self removeClassNamed: #ProjectController.	self removeClassNamed: #ProjectView.	"Smalltalk removeClassNamed: #Project."	self removeClassNamed: #Component1.	self removeClassNamed: #FormSetFont.	self removeClassNamed: #FontSet.	self removeClassNamed: #InstructionPrinter.	self removeClassNamed: #ChangeSorter.	self removeClassNamed: #DualChangeSorter.	self removeClassNamed: #EmphasizedMenu.	self removeClassNamed: #MessageTally.	StringHolder class removeSelector: #originalWorkspaceContents.	CompiledMethod removeSelector: #symbolic.	RemoteString removeSelector: #makeNewTextAttVersion.	Utilities class removeSelector: #absorbUpdatesFromServer.	self removeClassNamed: #PenPointRecorder.	self removeClassNamed: #Path.	self removeClassNamed: #Base64MimeConverter.	"Smalltalk removeClassNamed: #EToySystem. Dont bother - its	very small and used for timestamps etc"	self removeClassNamed: #RWBinaryOrTextStream.	self removeClassNamed: #AttributedTextStream.	self removeClassNamed: #WordNet.	self removeClassNamed: #SelectorBrowser.	TextStyle		allSubInstancesDo: [:ts | ts				newFontArray: (ts fontArray						copyFrom: 1						to: (2 min: ts fontArray size))].	#(ListParagraph PopUpMenu StandardSystemView) do:[:className|		Smalltalk at: className ifPresent:[:aClass| aClass initialize].	].	ChangeSet noChanges.	ChangeSet classPool		at: #AllChangeSets		put: (OrderedCollection with: ChangeSet current).	SystemDictionary removeSelector: #majorShrink.	[self removeAllUnSentMessages > 0]		whileTrue: [Smalltalk unusedClasses				do: [:c | (Smalltalk at: c) removeFromSystem]].	SystemOrganization removeEmptyCategories.	self		allClassesDo: [:c | c zapOrganization].	self garbageCollect.	'Rehashing method dictionaries . . .'		displayProgressAt: Sensor cursorPoint		from: 0		to: MethodDictionary instanceCount		during: [:bar | 			oldDicts := MethodDictionary allInstances.			newDicts := Array new: oldDicts size.			oldDicts				withIndexDo: [:d :index | 					bar value: index.					newDicts at: index put: d rehashWithoutBecome].			oldDicts elementsExchangeIdentityWith: newDicts].	oldDicts := newDicts := nil.	Project rebuildAllProjects.	ChangeSet current initialize.	"seems to take more than one try to gc all the weak refs in	SymbolTable "	3		timesRepeat: [self garbageCollect.			Symbol compactSymbolTable]! !!MessageTally methodsFor: 'initialize-release' stamp: 'ul 2/22/2010 16:44'!spyEvery: millisecs on: aBlock	"Create a spy and spy on the given block at the specified rate."	"Spy only on the active process (in which aBlock is run)"	| myDelay time0 observedProcess |	aBlock isBlock		ifFalse: [ self error: 'spy needs a block here' ].	self class: aBlock receiver class method: aBlock method.		"set up the probe"	observedProcess := Processor activeProcess.	myDelay := Delay forMilliseconds: millisecs.	time0 := Time millisecondClockValue.	gcStats := SmalltalkImage current getVMParameters.	Timer ifNotNil: [ self error: 'it seems a tally is already running' ].	Timer := [		[ true ] whileTrue: [			| startTime |			startTime := Time millisecondClockValue.			myDelay wait.			self				tally: Processor preemptedProcess suspendedContext				in: (observedProcess == Processor preemptedProcess ifTrue: [observedProcess] ifFalse: [nil])				"tally can be > 1 if ran a long primitive"				by: (Time millisecondClockValue - startTime) // millisecs].		nil] newProcess.	Timer priority: Processor timingPriority-1.		"activate the probe and evaluate the block"	Timer resume.	^ aBlock ensure: [		"cancel the probe and return the value"		"Could have already been terminated. See #terminateTimerProcess"		Timer ifNotNil: [			Timer terminate.			Timer := nil ].		"Collect gc statistics"		SmalltalkImage current getVMParameters keysAndValuesDo: [ :idx :gcVal | 			gcStats at: idx put: (gcVal - (gcStats at: idx))].		time := Time millisecondClockValue - time0]! !!MessageTally class methodsFor: 'spying' stamp: 'ul 2/22/2010 16:50'!spyOnProcess: aProcess forMilliseconds: msecDuration 	"	Spy on aProcess for a certain amount of time	| p1 p2 |  	p1 := [100000 timesRepeat: [3.14159 printString. Processor yield]] newProcess.  	p2 := [100000 timesRepeat: [3.14159 printString. Processor yield]] newProcess.	p1 resume.	p2 resume.  	(Delay forMilliseconds: 100) wait.  	MessageTally spyOnProcess: p1 forMilliseconds: 1000	"		^self 		spyOnProcess: aProcess		forMilliseconds: msecDuration		reportOtherProcesses: ShowProcesses! !!MessageTally class methodsFor: 'spying' stamp: 'ul 2/22/2010 16:47'!spyAllOn: aBlock	"Spy on all the processes in the system		[1000 timesRepeat: [3.14159 printString. Processor yield]] fork.	[1000 timesRepeat: [20 factorial. Processor yield]] fork.	[1000 timesRepeat: [20 factorial. Processor yield]] fork.	MessageTally spyAllOn: [ (Delay forMilliseconds: 100) wait]		"	| node result |	node := self new.	node reportOtherProcesses: true. "Irrelevant in this case. All processes will be reported on their own."	result := node spyAllEvery: self defaultPollPeriod on: aBlock.	self showReport: node.	^ result! !!Utilities class methodsFor: 'miscellaneous' stamp: 'dtl 2/14/2010 20:59'!storeTextWindowContentsToFileNamed: aName	"Utilities storeTextWindowContentsToFileNamed: 'TextWindows'"	| aDict aRefStream |	aDict := Project current textWindows..	aDict size = 0 ifTrue: [^ self inform: 'no windows found to export.'].	aRefStream := ReferenceStream fileNamed: aName.	aRefStream nextPut: aDict.	aRefStream close.	self inform: 'Done!!  ', aDict size printString, ' window(s) exported.'! !!Preferences class methodsFor: 'fonts' stamp: 'dtl 2/12/2010 22:21'!setListFontTo: aFont	"Set the list font as indicated"	Parameters at: #standardListFont put: aFont.	Smalltalk at: #ListParagraph ifPresent: [:lp | lp initialize].	Smalltalk at: #Flaps ifPresent: [:flaps | flaps replaceToolsFlap]! !!MessageTally class methodsFor: 'spying' stamp: 'ul 2/22/2010 16:48'!spyOn: aBlock toFileNamed: fileName 	"Spy on the evaluation of aBlock. Write the data collected on a file	named fileName."	| value node |	node := self new.	value := node spyEvery: self defaultPollPeriod on: aBlock.	FileStream newFileNamed: fileName do: [ :file |		node report: file ].	^value! !!SystemDictionary methodsFor: 'shrinking' stamp: 'ar 2/15/2010 21:34'!unloadAllKnownPackages	"Unload all packages we know how to unload and reload"	"Prepare unloading"	Smalltalk zapMVCprojects.	Flaps disableGlobalFlaps: false.	StandardScriptingSystem removeUnreferencedPlayers.	Project removeAllButCurrent.	#('Morphic-UserObjects' 'EToy-UserObjects' 'Morphic-Imported' )		do: [:each | SystemOrganization removeSystemCategory: each].	Smalltalk at: #ServiceRegistry ifPresent:[:aClass|		SystemChangeNotifier uniqueInstance			noMoreNotificationsFor: aClass.	].	World removeAllMorphs.	"Go unloading"	#(	'ReleaseBuilder' 'ScriptLoader'		'311Deprecated' '39Deprecated'		'Universes' 'SMLoader' 'SMBase' 'Installer-Core'		'VersionNumberTests' 'VersionNumber'		'Services-Base' 'PreferenceBrowser' 'Nebraska'		'ToolBuilder-MVC' 'ST80'		'CollectionsTests' 'GraphicsTests' 'KernelTests'  'MorphicTests' 		'MultilingualTests' 'NetworkTests' 'ToolsTests' 'TraitsTests'		'SystemChangeNotification-Tests' 'FlexibleVocabularies' 		'EToys' 'Protocols' 'XML-Parser' 'Tests' 'SUnitGUI'	) do:[:pkgName| (MCPackage named: pkgName) unload].	"Traits use custom unload"	Smalltalk at: #Trait ifPresent:[:aClass| aClass unloadTraits].	"Post-unload cleanup"	PackageOrganizer instVarNamed: 'default' put: nil.	SystemOrganization removeSystemCategory: 'UserObjects'.	Presenter defaultPresenterClass: nil.	World dumpPresenter.	ScheduledControllers := nil.	Preferences removePreference: #allowEtoyUserCustomEvents.	SystemOrganization removeEmptyCategories.	ChangeSet removeChangeSetsNamedSuchThat:[:cs | (cs == ChangeSet current) not].	Undeclared removeUnreferencedKeys.	StandardScriptingSystem initialize.	MCFileBasedRepository flushAllCaches.	MCDefinition clearInstances.	Behavior flushObsoleteSubclasses.	ChangeSet current clear.	ChangeSet current name: 'Unnamed1'.	Smalltalk flushClassNameCache.	Smalltalk at: #Browser ifPresent:[:br| br initialize].	DebuggerMethodMap voidMapCache.	DataStream initialize.	Smalltalk forgetDoIts.	AppRegistry removeObsolete.	FileServices removeObsolete.	Preferences removeObsolete.	TheWorldMenu removeObsolete.	Smalltalk garbageCollect.	Symbol compactSymbolTable.	TheWorldMainDockingBar updateInstances.! !!MessageTally class methodsFor: 'spying' stamp: 'ul 2/22/2010 16:47'!showReport: node	"Open a string holder with the reports from the given node"	(StringHolder new contents: 		(String streamContents: [:s | node report: s ]))			openLabel: 'Spy Results'! !!SystemDictionary methodsFor: 'shrinking' stamp: 'dtl 2/15/2010 22:32'!discardMVC	"After suitable checks, remove all of MVC from the system. Removal will destroy current	MVC projects. MVC may be reinstalled by loading packages ST80 and ToolBuilder-MVC."	"Smalltalk discardMVC"	self isMorphic		ifFalse: [^self inform: 'You must be in a Morphic project to discard MVC.'].	"Check that there are no MVC Projects"	(Project allProjects allSatisfy: [:proj | proj isMorphic])		ifFalse: [(self confirm: 'Would you like a chance to remove yourMVC projects in an orderly manner?')				ifTrue: [^ self].			(self confirm: 'If you wish, I can remove all MVC projects,make this project be the top project, and placeall orphaned sub-projects of MVC parents here.Would you like be to do thisand proceed to discard all MVC classes?')				ifTrue: [self zapMVCprojects]				ifFalse: [^ self]].	(MCPackage named: 'ToolBuilder-MVC') unload.	(MCPackage named: 'ST80') unload.	ScheduledControllers := nil.	Smalltalk garbageCollect.	Undeclared removeUnreferencedKeys.	SystemOrganization removeEmptyCategories.	Symbol rehash! !!MessageTally class methodsFor: 'spying' stamp: 'ul 2/22/2010 16:50'!spyOnProcess: aProcess forMilliseconds: msecDuration reportOtherProcesses: aBoolean	"	Spy on aProcess for a certain amount of time	| p1 p2 |  	p1 := [100000 timesRepeat: [3.14159 printString. Processor yield]] newProcess.  	p2 := [100000 timesRepeat: [3.14159 printString. Processor yield]] newProcess.	p1 resume.	p2 resume.  	(Delay forMilliseconds: 100) wait.  	MessageTally spyOnProcess: p1 forMilliseconds: 1000 reportOtherProcesses: true	"	| node |	node := self new.	node reportOtherProcesses: aBoolean.	node		spyEvery: self defaultPollPeriod		onProcess: aProcess		forMilliseconds: msecDuration.	self showReport: node.! !!MessageTally class methodsFor: 'spying' stamp: 'ul 2/22/2010 16:48'!spyOn: aBlock reportOtherProcesses: aBoolean	"	Spy on aBlock, in the current process. Can include or not statistics on other processes in the report.	[1000 timesRepeat: [		100 timesRepeat: [120 factorial].		(Delay forMilliseconds: 10) wait		]] forkAt: 45 named: '45'.	MessageTally spyOn: [10000 timesRepeat: [1.23 printString]] reportOtherProcesses: true	"	| node result |	node := self new.	node reportOtherProcesses: aBoolean.	result := node spyEvery: self defaultPollPeriod on: aBlock.	self showReport: node.	^ result! !!MessageTally methodsFor: 'initialize-release' stamp: 'ul 2/22/2010 16:46'!close	self deprecated: 'Use MessageTally >> #terminateTimerProcess'.	Timer ifNotNil: [ Timer terminate ].	Timer := nil.	class := method := tally := receivers := nil! !!MessageTally class methodsFor: 'spying' stamp: 'ul 2/22/2010 16:50'!spyOnProcess: aProcess forMilliseconds: msecDuration toFileNamed: fileName 	"Spy on the evaluation of aProcess. Write the data collected on a file  	named fileName. Will overwrite fileName"	| node |	node := self new.	node		spyEvery: self defaultPollPeriod		onProcess: aProcess		forMilliseconds: msecDuration.	FileStream fileNamed: fileName do: [ :file |		node report: file ]! !!MessageTally class methodsFor: 'as yet unclassified' stamp: 'ul 2/22/2010 16:47'!terminateTimerProcess	Timer ifNotNil: [		Timer terminate.		Timer := nil ].! !Utilities class removeSelector: #openScratchWorkspaceLabeled:contents:!