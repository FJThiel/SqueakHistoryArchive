"Change Set:		9295Nebraska-nice.26Nebraska-nice.26:get rid of now useless fixTemps"!!CanvasEncoder methodsFor: 'drawing' stamp: 'nice 1/11/2010 20:53'!purgeCache	| spaceUsed spaceBefore s | 	spaceBefore := spaceUsed := self purgeCacheInner.	spaceBefore > 8000000 ifTrue: [		Smalltalk garbageCollect.		spaceUsed := self purgeCacheInner.	].	false ifTrue: [		s := (spaceBefore // 1024) printString,'  ',(spaceUsed // 1024) printString,'  ',			Time now printString,'     '.		WorldState addDeferredUIMessage: [s displayAt: 0@0.].	].	^spaceUsed! !!EToyIncomingMessage class methodsFor: 'handlers' stamp: 'nice 1/11/2010 20:54'!handleNewFridgeMorphFrom: dataStream sentBy: senderName ipAddress: ipAddressString	| newObject |	newObject := self newObjectFromStream: dataStream.	newObject		setProperty: #fridgeSender toValue: senderName;		setProperty: #fridgeIPAddress toValue: ipAddressString;		setProperty: #fridgeDate toValue: Time dateAndTimeNow.	WorldState addDeferredUIMessage: [EToyFridgeMorph newItem: newObject].	! !!EToyIncomingMessage class methodsFor: 'handlers' stamp: 'nice 1/11/2010 20:55'!handleNewMorphFrom: dataStream sentBy: senderName ipAddress: ipAddressString	| newObject thumbForm targetWorld |	newObject := self newObjectFromStream: dataStream.	EToyCommunicatorMorph playArrivalSound.	targetWorld := self currentWorld.	(EToyMorphsWelcomeMorph morphsWelcomeInWorld: targetWorld) ifTrue: [		newObject position: (			newObject 				valueOfProperty: #positionInOriginatingWorld 				ifAbsent: [(targetWorld randomBoundsFor: newObject) topLeft]		).		WorldState addDeferredUIMessage: [			newObject openInWorld: targetWorld.		].		^self	].	thumbForm := newObject imageForm scaledToSize: 50@50.	EToyListenerMorph addToGlobalIncomingQueue: {		thumbForm. newObject. senderName. ipAddressString	}.	WorldState addDeferredUIMessage: [		EToyListenerMorph ensureListenerInCurrentWorld	].! !!EToySenderMorph methodsFor: 'as yet unclassified' stamp: 'nice 1/11/2010 20:55'!startNebraskaClient		[		[ | newMorph |			newMorph := NetworkTerminalMorph connectTo: self ipAddress.			WorldState addDeferredUIMessage: [newMorph openInStyle: #scaled].		]			on: Error			do: [ :ex |				WorldState addDeferredUIMessage: [					self inform: 'No connection to: '. self ipAddress,' (',ex printString,')'				]			].	] fork! !