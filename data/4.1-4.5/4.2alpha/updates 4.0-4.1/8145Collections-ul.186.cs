"Change Set:		8145Collections-ul.186Collections-ul.186:- removed Character >> #asIRCLowercase and String >> #asIRCLowercase, because they belong to the Network-IRC package- moved all #hasContentsInExplorer and #explorerContents to Morphic-Explorer- updated Collection's #ifEmpty:, #ifEmpty:ifNotEmpty:, #ifEmpty:ifNotEmptyDo:, #ifNotEmpty:ifEmpty:, #ifNotEmptyDo:ifEmpty: to enable the compiler to optimize the #ifTrue:ifFalse: sends- same for Text >> #alignmentAt:ifAbsent: - added SequenceableCollection >> #replace: which is an in-place version of #collect: (the implementation of Dictionary >> #explorerContents in Morphic-Explorer uses it)- changed Set >> #atRandom: to use #= instead of #== for integer comparison"!!SequenceableCollection methodsFor: 'enumerating' stamp: 'ul 11/11/2009 19:38'!replace: aBlock 	"Evaluate aBlock with each of the receiver's elements as the argument.  	Collect the resulting values into self."	1 to: self size do: [ :index |		self at: index put: (aBlock value: (self at: index)) ]! !!Collection methodsFor: 'testing' stamp: 'ul 11/11/2009 16:22'!ifEmpty: emptyBlock ifNotEmpty: notEmptyBlock	"Evaluate emptyBlock if I'm empty, notEmptyBlock otherwise"	" If the notEmptyBlock has an argument, eval with the receiver as its argument"	self isEmpty ifTrue: [ ^emptyBlock value ].	^notEmptyBlock valueWithPossibleArgument: self! !!Collection methodsFor: 'testing' stamp: 'ul 11/11/2009 16:24'!ifEmpty: emptyBlock ifNotEmptyDo: notEmptyBlock	"Evaluate emptyBlock if I'm empty, notEmptyBlock otherwise"	"Evaluate the notEmptyBlock with the receiver as its argument"	self isEmpty ifTrue: [ ^emptyBlock value ].	^notEmptyBlock value: self! !!Collection methodsFor: 'testing' stamp: 'ul 11/11/2009 16:25'!ifNotEmpty: notEmptyBlock ifEmpty: emptyBlock	"Evaluate emptyBlock if I'm empty, notEmptyBlock otherwise	 If the notEmptyBlock has an argument, eval with the receiver as its argument"	self isEmpty ifFalse: [ ^notEmptyBlock valueWithPossibleArgument: self ].	^emptyBlock value! !!Collection methodsFor: 'testing' stamp: 'ul 11/11/2009 16:25'!ifNotEmptyDo: notEmptyBlock ifEmpty: emptyBlock	"Evaluate emptyBlock if I'm empty, notEmptyBlock otherwise	Evaluate the notEmptyBlock with the receiver as its argument"	self isEmpty ifFalse: [ ^notEmptyBlock value: self ].	^emptyBlock value! !!Collection methodsFor: 'testing' stamp: 'ul 11/11/2009 16:21'!ifEmpty: aBlock	"Evaluate the block if I'm empty"	^self isEmpty ifTrue: [ aBlock value ]! !!Set methodsFor: 'accessing' stamp: 'ul 11/11/2009 20:03'!atRandom: aGenerator	"Answer a random element of the receiver. Uses aGenerator which    should be kept by the user in a variable and used every time. Use    this instead of #atRandom for better uniformity of random numbers because 	only you use the generator. Causes an error if self has no elements."	| rand |	self emptyCheck.	rand := aGenerator nextInt: self size.	self doWithIndex:[:each :ind |		ind = rand ifTrue:[^each]].	^ self errorEmptyCollection! !!Text methodsFor: 'emphasis' stamp: 'ul 11/11/2009 16:28'!alignmentAt: characterIndex ifAbsent: aBlock	| attributes emph |	self size = 0 ifTrue: [^aBlock value].	emph := nil.	attributes := runs at: characterIndex.	attributes do:[:att | (att isKindOf: TextAlignment) ifTrue:[emph := att]].	emph ifNil: [ ^aBlock value ].	^emph alignment! !Dictionary removeSelector: #hasContentsInExplorer!SequenceableCollection removeSelector: #explorerContents!Dictionary removeSelector: #explorerContents!Character removeSelector: #asIRCLowercase!Set removeSelector: #hasContentsInExplorer!OrderedCollection removeSelector: #hasContentsInExplorer!String removeSelector: #asIRCLowercase!Set removeSelector: #explorerContents!String removeSelector: #hasContentsInExplorer!