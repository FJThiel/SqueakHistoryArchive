"Change Set:		8520Kernel-ar.334Kernel-ar.334:CompiledMethodTrailer phase 3."!!CompiledMethod methodsFor: 'source code management' stamp: 'Igor.Stasenko 12/20/2009 19:20'!getSourceFor: selector in: class	"Retrieve or reconstruct the source code for this method."	| trailer source |	trailer := self trailer.	trailer tempNames ifNotNil: [:namesString | 		"Magic sources -- decompile with temp names"		^ ((class decompilerClass new withTempNames: namesString)				decompile: selector in: class method: self)			decompileString].		trailer hasSourcePointer ifFalse: [		"No source pointer -- decompile without temp names"		^ (class decompilerClass new decompile: selector in: class method: self)			decompileString].	"Situation normal;  read the sourceCode from the file"	source := [self getSourceFromFile]				on: Error		"An error can happen here if, for example, the changes file has been truncated by an aborted download.  The present solution is to ignore the error and fall back on the decompiler.  A more thorough solution should probably trigger a systematic invalidation of all source pointers past the end of the changes file.  Consider that, as time goes on, the changes file will eventually grow large enough to cover the lost code, and then instead of falling into this error case, random source code will get returned."				do: [ :ex | ex return: nil].			^source		ifNotNil: [			| sourceSelector |			"I think this is something to do with the traits system.  It would be ncie if someone			 documented this.  It looks like an egregious hack to me. eem 9/5/2009 09:04"			(class isAliasSelector: selector)				ifFalse: [ source ]				ifTrue: [ "Only alias selectors need this replacement"					 sourceSelector := Parser parserClass new parseSelector: source.					 sourceSelector = selector						ifTrue: [ source ]						ifFalse: [ self replace: sourceSelector with: selector in: source ] ] ]		ifNil: [			"Something really wrong -- decompile blind (no temps)"			 (class decompilerClass new decompile: selector in: class method: self)				decompileString]! !!CompiledMethod methodsFor: 'accessing' stamp: 'Igor.Stasenko 12/20/2009 19:04'!endPC	"Answer the index of the last bytecode."	^ self trailer endPC! !!CompiledMethod methodsFor: 'source code management' stamp: 'Igor.Stasenko 12/20/2009 19:12'!sourcePointer	"Answer the integer which can be used to find the source file and position for this method.	The actual interpretation of this number is up to the SourceFileArray stored in the global variable SourceFiles."	^ self trailer sourcePointer! !!CompiledMethod methodsFor: 'source code management' stamp: 'Igor.Stasenko 12/20/2009 19:21'!holdsTempNames	"Are tempNames stored in trailer bytes"	^ self trailer hasTempNames! !!CompiledMethod methodsFor: 'source code management' stamp: 'Igor.Stasenko 12/20/2009 19:31'!setMySourcePointer: srcPointer	self deprecated: 'Use #setSourcePointer: '.		^ self setSourcePointer: srcPointer! !!CompiledMethod methodsFor: 'accessing' stamp: 'Igor.Stasenko 12/20/2009 19:02'!trailer	"Answer the receiver's trailer"	^ CompiledMethodTrailer new method: self! !!CompiledMethod methodsFor: 'source code management' stamp: 'Igor.Stasenko 12/20/2009 19:02'!setSourcePointer: srcPointer	"We can't change the trailer of existing method, since	it could have completely different format. Therefore we need to	generate a copy with new trailer, containing an scrPointer, and then	#become it"	| trailer copy |	trailer := CompiledMethodTrailer new sourcePointer: srcPointer.	copy := self copyWithTrailerBytes: trailer.	self becomeForward: copy.	^ copy! !!CompiledMethod methodsFor: 'file in/out' stamp: 'Igor.Stasenko 12/20/2009 19:09'!zapSourcePointer	"clobber the source pointer since it will be wrong"	| copy |	copy := self copyWithTrailerBytes: CompiledMethodTrailer empty.	self becomeForward: copy.	^ copy! !!CompiledMethod methodsFor: 'source code management' stamp: 'Igor.Stasenko 12/20/2009 19:26'!tempNamesString	"Answer the schematicTempNames string, or nil if receiver has no temps names encoded in trailer"	^ self trailer tempNames! !CompiledMethod removeSelector: #qDecompressFrom:!CompiledMethod removeSelector: #qCompress:!