"Change Set:		7705CollectionsTests-ar.93CollectionsTests-ar.93:Fix concurrent commit with Josh.CollectionsTests-ar.92:Tests covering the changes in RWBinaryOrTextStream and Character.CollectionsTests-jcg.92:Additional tests for Base64MimeConverterTest:- test that it works on ByteArrays too- test convenience method #base64Encoded- test that mimeEncode: doesn't first reset input stream."!TestCase subclass: #RWBinaryOrTextStreamTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CollectionsTests-Streams'!!RWBinaryOrTextStreamTest methodsFor: 'tests' stamp: 'ar 9/1/2009 00:46'!testUpToEnd		| stream |	stream := RWBinaryOrTextStream on: String new.	stream nextPutAll: 'world'; reset.	self assert: stream upToEnd = 'world'.	self assert: stream atEnd.	self assert: stream upToEnd = ''.	self assert: stream atEnd.		stream reset.	stream upTo: $r.	self assert: stream upToEnd = 'ld'.	self assert: stream atEnd.		stream := RWBinaryOrTextStream on: String new.	stream binary.	stream nextPutAll: 'world'; reset.	self assert: stream upToEnd = 'world' asByteArray.	self assert: stream atEnd.	self assert: stream upToEnd = ByteArray new.	self assert: stream atEnd.		stream reset.	stream upTo: $r asciiValue.	self assert: stream upToEnd = 'ld' asByteArray.	self assert: stream atEnd! !!Base64MimeConverterTest methodsFor: 'tests' stamp: 'jcg 9/1/2009 00:38'!testOnByteArray	self assert: ('Hi There!!' base64Encoded = 'Hi There!!' asByteArray base64Encoded)! !!RWBinaryOrTextStreamTest methodsFor: 'tests' stamp: 'ar 9/1/2009 00:43'!testNextPutAll		| stream |	stream := RWBinaryOrTextStream on: String new.	stream nextPutAll: 'hello'.	self assert: stream contents = 'hello'.	stream := RWBinaryOrTextStream on: String new.	stream nextPutAll: 'hello' asArray.	self assert: stream contents = 'hello'.	stream := RWBinaryOrTextStream on: String new.	stream nextPutAll: 'hello' asByteArray.	self assert: stream contents = 'hello'! !!Base64MimeConverterTest methodsFor: 'tests' stamp: 'jcg 9/1/2009 00:18'!testMimeEncodeDecode	| encoded |	encoded := Base64MimeConverter mimeEncode: message.	self assert: (encoded contents = 'SGkgVGhlcmUh').     self assert: ((Base64MimeConverter mimeDecodeToChars: encoded) contents = message contents).	"Encoding should proceed from the current stream position."	message reset.	message skip: 2.	encoded := Base64MimeConverter mimeEncode: message.	self assert: (encoded contents = 'IFRoZXJlIQ==').! !!RWBinaryOrTextStreamTest methodsFor: 'tests' stamp: 'ar 9/1/2009 00:45'!testUpTo	| stream |	stream := RWBinaryOrTextStream on: String new.	stream nextPutAll: 'world'; reset.	self assert: (stream upTo: $r) = 'wo'.	self assert: stream next = $l.		stream := RWBinaryOrTextStream on: String new.	stream nextPutAll: 'hello'; reset.	self assert: (stream upTo: $x) = 'hello'.	self assert: stream atEnd.		stream := RWBinaryOrTextStream on: String new.	stream binary.	stream nextPutAll: 'world'; reset.	self assert: (stream upTo: $r asciiValue) = 'wo' asByteArray.	self assert: stream next = $l asciiValue.		stream := RWBinaryOrTextStream on: String new.	stream binary.	stream nextPutAll: 'hello'; reset.	self assert: (stream upTo: $x asciiValue) = 'hello' asByteArray.	self assert: stream atEnd.! !!Base64MimeConverterTest methodsFor: 'tests' stamp: 'jcg 9/1/2009 00:23'!testBase64Encoded	| encoded |	encoded := (Base64MimeConverter mimeEncode: message) contents.	self assert: encoded = 'Hi There!!' base64Encoded.	! !!CharacterTest methodsFor: 'tests - creation' stamp: 'ar 9/1/2009 00:41'!testCodePoint	self assert: (Character codePoint: $A asciiValue) = $A.	self shouldnt:[Character codePoint: 500] raise: Error.	self assert: (Character codePoint: 500) asciiValue = 500.! !!Base64MimeConverterTest methodsFor: 'initialize-release' stamp: 'jcg 9/1/2009 00:21'!setUp	message := 'Hi There!!' readStream.! !