"Change Set:		8080GraphicsTests-nice.17GraphicsTests-nice.17:A test for Rectangle storeOn:GraphicsTests-dtl.15:Add six new tests to BitBltTest provided by Juan Vuletich, reference Mantis 7407. These tests will fail until the necessary fixes have been applied to BitBltPlugin in the VM.Two existing tests in BitBltTest (#testAlphaCompositingSimulated and #testAlphaCompositing2Simulated) should be moved to the VMMaker package as per Juan's recommendation, but are left here until the VMaker changes have been made (follow-up required).GraphicsTests-nice.16:Some basic tests of the color wheel using #h:s:v:(By the way, I wonder how other Smalltalk model hue, isn't it a fraction of revolution between 0 and 1 ?)"!!BitBltTest methodsFor: 'bugs' stamp: 'jmv 10/26/2009 09:22'!testAllAlphasRgbMul	"self run: #testAllAlphasRgbMul"	| sourceForm destForm blt correctAlphas |     correctAlphas := 0.     0  to: 255 do: [:sourceAlpha |         sourceForm := Form extent: 1 @ 1 depth: 32.         sourceForm bits at: 1 put: sourceAlpha << 24 + (33 << 16) + (25 << 8) + 27.         0 to: 255 do: [:destAlpha |             destForm := Form extent: 1 @ 1 depth: 32.             destForm bits at: 1 put: destAlpha << 24 + (255 << 16) + (255 << 8) + 255.              blt := BitBlt new.              blt sourceForm: sourceForm.              blt sourceOrigin: 0 @ 0.              blt setDestForm: destForm.              blt destOrigin: 0 @ 0.              blt combinationRule: 37.	"rgbMul"              blt copyBits.              correctAlphas := correctAlphas                + (((blt destForm bits at: 1) digitAt: 4) = ((destAlpha+1) * (sourceAlpha+1)- 1 // 256)                         ifTrue: [1]                         ifFalse: [0])      ]].     self assert: 65536 equals: correctAlphas! !!BitBltTest methodsFor: 'bugs' stamp: 'jmv 10/26/2009 09:21'!testAllAlphasRgbAdd	"self run: #testAllAlphasRgbAdd"	| sourceForm destForm blt correctAlphas |     correctAlphas := 0.     0  to: 255 do: [:sourceAlpha |         sourceForm := Form extent: 1 @ 1 depth: 32.         sourceForm bits at: 1 put: sourceAlpha << 24 + (33 << 16) + (25 << 8) + 27.         0 to: 255 do: [:destAlpha |             destForm := Form extent: 1 @ 1 depth: 32.             destForm bits at: 1 put: destAlpha << 24 + (255 << 16) + (255 << 8) + 255.              blt := BitBlt new.              blt sourceForm: sourceForm.              blt sourceOrigin: 0 @ 0.              blt setDestForm: destForm.              blt destOrigin: 0 @ 0.              blt combinationRule: 20.	"rgbAdd"              blt copyBits.              correctAlphas := correctAlphas                + (((blt destForm bits at: 1) digitAt: 4) = (destAlpha + sourceAlpha min: 255)                         ifTrue: [1]                         ifFalse: [0])      ]].     self assert: 65536 equals: correctAlphas! !!BitBltTest methodsFor: 'bugs' stamp: 'jmv 10/26/2009 09:21'!testAllAlphasRgbSub	"self run: #testAllAlphasRgbSub"	| sourceForm destForm blt correctAlphas |     correctAlphas := 0.     0  to: 255 do: [:sourceAlpha |         sourceForm := Form extent: 1 @ 1 depth: 32.         sourceForm bits at: 1 put: sourceAlpha << 24 + (33 << 16) + (25 << 8) + 27.         0 to: 255 do: [:destAlpha |             destForm := Form extent: 1 @ 1 depth: 32.             destForm bits at: 1 put: destAlpha << 24 + (255 << 16) + (255 << 8) + 255.              blt := BitBlt new.              blt sourceForm: sourceForm.              blt sourceOrigin: 0 @ 0.              blt setDestForm: destForm.              blt destOrigin: 0 @ 0.              blt combinationRule: 21.	"rgbSub"              blt copyBits.              correctAlphas := correctAlphas                + (((blt destForm bits at: 1) digitAt: 4) = (destAlpha - sourceAlpha) abs                         ifTrue: [1]                         ifFalse: [0])      ]].     self assert: 65536 equals: correctAlphas! !!ColorTest methodsFor: 'testing' stamp: 'nice 10/30/2009 21:09'!testHSV	"Test the color wheel modulo 360"		self assert: (Color h: 0 s: 1 v: 1) = Color red.	self assert: (Color h: 60 s: 1 v: 1) = Color yellow.	self assert: (Color h: 120 s: 1 v: 1) = Color green.	self assert: (Color h: 180 s: 1 v: 1) = Color cyan.	self assert: (Color h: 240 s: 1 v: 1) = Color blue.	self assert: (Color h: 300 s: 1 v: 1) = Color magenta.	self assert: (Color h: 0+360 s: 1 v: 1) = Color red.	self assert: (Color h: 120+720 s: 1 v: 1) = Color green.	self assert: (Color h: 180-360 s: 1 v: 1) = Color cyan.	self assert: (Color h: 240-720 s: 1 v: 1) = Color blue.! !!BitBltTest methodsFor: 'bugs' stamp: 'jmv 10/26/2009 09:22'!testAllAlphasRgbMinInvert	"self run: #testAllAlphasRgbMinInvert"	| sourceForm destForm blt correctAlphas |     correctAlphas := 0.     0  to: 255 do: [:sourceAlpha |         sourceForm := Form extent: 1 @ 1 depth: 32.         sourceForm bits at: 1 put: sourceAlpha << 24 + (33 << 16) + (25 << 8) + 27.         0 to: 255 do: [:destAlpha |             destForm := Form extent: 1 @ 1 depth: 32.             destForm bits at: 1 put: destAlpha << 24 + (255 << 16) + (255 << 8) + 255.              blt := BitBlt new.              blt sourceForm: sourceForm.              blt sourceOrigin: 0 @ 0.              blt setDestForm: destForm.              blt destOrigin: 0 @ 0.              blt combinationRule: 29.	"rgbMinInvert"              blt copyBits.              correctAlphas := correctAlphas                + (((blt destForm bits at: 1) digitAt: 4) = (destAlpha min: 255-sourceAlpha)                         ifTrue: [1]                         ifFalse: [0])      ]].     self assert: 65536 equals: correctAlphas! !!BitBltTest methodsFor: 'bugs' stamp: 'jmv 10/26/2009 09:21'!testAllAlphasRgbMax	"self run: #testAllAlphasRgbMax"	| sourceForm destForm blt correctAlphas |     correctAlphas := 0.     0  to: 255 do: [:sourceAlpha |         sourceForm := Form extent: 1 @ 1 depth: 32.         sourceForm bits at: 1 put: sourceAlpha << 24 + (33 << 16) + (25 << 8) + 27.         0 to: 255 do: [:destAlpha |             destForm := Form extent: 1 @ 1 depth: 32.             destForm bits at: 1 put: destAlpha << 24 + (255 << 16) + (255 << 8) + 255.              blt := BitBlt new.              blt sourceForm: sourceForm.              blt sourceOrigin: 0 @ 0.              blt setDestForm: destForm.              blt destOrigin: 0 @ 0.              blt combinationRule: 27.	"rgbMax"              blt copyBits.              correctAlphas := correctAlphas                + (((blt destForm bits at: 1) digitAt: 4) = (destAlpha max: sourceAlpha)                         ifTrue: [1]                         ifFalse: [0])      ]].     self assert: 65536 equals: correctAlphas! !!BitBltTest methodsFor: 'bugs' stamp: 'jmv 10/26/2009 09:22'!testAllAlphasRgbMin	"self run: #testAllAlphasRgbMin"	| sourceForm destForm blt correctAlphas |     correctAlphas := 0.     0  to: 255 do: [:sourceAlpha |         sourceForm := Form extent: 1 @ 1 depth: 32.         sourceForm bits at: 1 put: sourceAlpha << 24 + (33 << 16) + (25 << 8) + 27.         0 to: 255 do: [:destAlpha |             destForm := Form extent: 1 @ 1 depth: 32.             destForm bits at: 1 put: destAlpha << 24 + (255 << 16) + (255 << 8) + 255.              blt := BitBlt new.              blt sourceForm: sourceForm.              blt sourceOrigin: 0 @ 0.              blt setDestForm: destForm.              blt destOrigin: 0 @ 0.              blt combinationRule: 28.	"rgbMin"              blt copyBits.              correctAlphas := correctAlphas                + (((blt destForm bits at: 1) digitAt: 4) = (destAlpha min: sourceAlpha)                         ifTrue: [1]                         ifFalse: [0])      ]].     self assert: 65536 equals: correctAlphas! !!RectangleTest methodsFor: 'tests' stamp: 'nice 11/1/2009 21:31'!testStoreOn	| assoc assoc2 |	assoc := (0@0 extent: 1@1) -> 0.	self shouldnt: [assoc2 := Compiler evaluate: assoc storeString] raise: Error.	self assert: assoc key = assoc2 key.	self assert: assoc value = assoc2 value.! !