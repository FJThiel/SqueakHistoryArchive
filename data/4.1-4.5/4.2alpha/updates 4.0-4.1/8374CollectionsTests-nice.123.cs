"Change Set:		8374CollectionsTests-nice.123CollectionsTests-nice.123:Test for ReadStream on:from:to: and upToAll: with partial matchCollectionsTests-nice.122:Some basic tests for nextLine upToAnyOf: upToAnyOf:do:"!!ReadStreamTest methodsFor: 'tests - accessing' stamp: 'nice 12/7/2009 09:51'!testNextLine	| lines text stream |	lines := #('line 1' ' and line 2' '' 'fourth').	text := lines first , String cr , lines second , String crlf , lines third , String lf , lines fourth.	stream := text readStream.	lines do: [:e |		self assert: stream nextLine = e].	self assert: stream nextLine = nil! !!ReadStreamTest methodsFor: 'tests - accessing' stamp: 'nice 12/7/2009 19:48'!testUpToAll2	| string stream array |	string := 'aababcabcd'.	stream := self streamOn: string.	self assert: (stream upToAll: 'a') = ''.	self assert: (stream upToEnd) = 'ababcabcd'.	stream := self streamOn: string.	self assert: (stream upToAll: 'ab') = 'a'.	self assert: (stream upToEnd) = 'abcabcd'.	stream := self streamOn: string.	self assert: (stream upToAll: 'abc') = 'aab'.	self assert: (stream upToEnd) = 'abcd'.	stream := self streamOn: string.	self assert: (stream upToAll: 'abcd') = 'aababc'.	self assert: (stream upToEnd) = ''.	stream := self streamOn: string.	self assert: (stream upToAll: 'abe') = 'aababcabcd'.	self assert: (stream upToEnd) = ''.		array := #(1 1 2 1 2 3 nil 1 2 3 4).	stream := self streamOn: array.	self assert: (stream upToAll: #(1)) = #().	self assert: (stream upToEnd) = #(1 2 1 2 3 nil 1 2 3 4).	stream := self streamOn: array.	self assert: (stream upToAll: #(1 2)) = #(1).	self assert: (stream upToEnd) = #(1 2 3 nil 1 2 3 4).	stream := self streamOn: array.	self assert: (stream upToAll: #(1 2 3)) = #(1 1 2).	self assert: (stream upToEnd) = #(nil 1 2 3 4).	stream := self streamOn: array.	self assert: (stream upToAll: #(1 2 3 4)) = #(1 1 2 1 2 3 nil).	self assert: (stream upToEnd) = #().	stream := self streamOn: array.	self assert: (stream upToAll: #(1 2 5)) = array.	self assert: (stream upToEnd) = #().! !!ReadStreamTest methodsFor: 'tests - accessing' stamp: 'nice 12/7/2009 10:03'!testUpToAnyOfDo	| stream found |	found := false.	stream := 'abcde' readStream.	self assert: (stream upToAnyOf: String crlf do: [:char | found := true]) = 'abcde'.	self assert: stream atEnd.	self deny: found.		found := Object new.	stream := 'abcde' readStream.	self assert: (stream upToAnyOf: 'dc' do: [:char | found := char]) = 'ab'.	self assert: found = $c.	self assert: stream upToEnd = 'de'.		found := false.	stream := #( 1 2 nil true false 10 ) readStream.	self assert: (stream upToAnyOf: #(100 1000) do: [:anObject | found := true]) = #( 1 2 nil true false 10 ).	self deny: found.	self assert: stream atEnd.		found := Object new.	stream := #( 1 2 nil true false 10 ) readStream.	self assert: (stream upToAnyOf: #( true false ) do: [:anObject | found := anObject]) = #( 1 2 nil ).	self assert: found = true.	self assert: stream upToEnd = #( false 10 ).! !!ReadStreamTest methodsFor: 'tests - accessing' stamp: 'nice 12/9/2009 13:05'!testUpTo3	| stream string |	string := 'XYZabcdUVW'.	stream := ReadStream on: string from: (string indexOf: $a) to: (string indexOf: $d).	self assert: stream upToEnd = 'abcd'.	self assert: stream atEnd.	stream := ReadStream on: string from: (string indexOf: $a) to: (string indexOf: $d).	self assert: (stream upTo: $c) = 'ab'.	self assert: stream next = $d.	stream := ReadStream on: string from: (string indexOf: $a) to: (string indexOf: $d).	self assert: (stream upTo: $e) = 'abcd'.	self assert: stream atEnd.! !!ReadStreamTest methodsFor: 'tests - accessing' stamp: 'nice 12/7/2009 09:57'!testUpToAnyOf	| stream |	stream := 'abcde' readStream.	self assert: (stream upToAnyOf: String crlf) = 'abcde'.	self assert: stream atEnd.		stream := 'abcde' readStream.	self assert: (stream upToAnyOf: 'dc') = 'ab'.	self assert: stream upToEnd = 'de'.		stream := #( 1 2 nil true false 10 ) readStream.	self assert: (stream upToAnyOf: #(100 1000)) = #( 1 2 nil true false 10 ).	self assert: stream atEnd.		stream := #( 1 2 nil true false 10 ) readStream.	self assert: (stream upToAnyOf: #( true false )) = #( 1 2 nil ).	self assert: stream upToEnd = #( false 10 ).! !