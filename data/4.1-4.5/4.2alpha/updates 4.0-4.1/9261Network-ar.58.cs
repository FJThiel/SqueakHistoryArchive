"Change Set:		9261Network-ar.58Network-ar.58:SMTPClient fix: HELO must be sent even when not authenticating.Network-nice.56:Push a few temp declarations inside blocks.Push a few temp assignments outside blocks.Network-dtl.57:Move #fullScreenOn and #fullScreenOff implementation from ScreenController to ProjectChange MailComposition to dispatch through Project current for open in MVC/Morphic."!!ServerDirectory methodsFor: 'up/download' stamp: 'nice 2/8/2010 09:39'!getFileNamed: fileNameOnServer	"Just FTP a file from a server.  Return contents.	(Later -- Use a proxy server if one has been registered.)"	| result |	client := self openFTPClient.	result := [client getFileNamed: fileNameOnServer]		ensure: [self quit].	^result! !!MailComposition methodsFor: 'initialize-release' stamp: 'dtl 2/9/2010 22:35'!open	"open an interface"	^ Project current		dispatchTo: self		addPrefixAndSend: #Open		withArguments: {}! !!SMTPClient methodsFor: 'private protocol' stamp: 'ar 2/10/2010 15:32'!login	"Send HELO first"	self initiateSession.	self user ifNil: [^self].	self sendCommand: 'AUTH LOGIN ' , (self encodeString: self user).	[self checkResponse]		on: TelnetProtocolError		do: [ :ex | ex isCommandUnrecognized ifTrue: [^ self] ifFalse: [ex pass]].	self sendCommand: (self encodeString: self password).	self checkResponse! !!ServerDirectory class methodsFor: 'server prefs' stamp: 'nice 2/8/2010 09:42'!storeCurrentServersIn: aDirectory	self servers do: [:each |		| file |		file := aDirectory fileNamed: (ServerDirectory nameForServer: each).		each storeServerEntryOn: file.		file close].	self localProjectDirectories do: [:each |		| file |		file := aDirectory fileNamed: each localName.		each storeServerEntryOn: file.		file close].! !!ServerDirectory methodsFor: 'up/download' stamp: 'nice 2/8/2010 09:39'!getFileList	"Return a stream with a list of files in the current server directory.  (Later -- Use a proxy server if one has been registered.)"	| listing |	client := self openFTPClient.	listing := [client getFileList]		ensure: [self quit].	^ReadStream on: listing! !!ServerDirectory methodsFor: 'up/download' stamp: 'nice 2/8/2010 09:39'!getDirectory	"Return a stream with a listing of the current server directory.  (Later -- Use a proxy server if one has been registered.)"	| listing |	client := self openFTPClient.	listing := [client getDirectory]		ensure: [self quit].	^ReadStream on: listing! !!ServerDirectory methodsFor: 'up/download' stamp: 'nice 2/8/2010 09:40'!putFile: fileStream named: fileNameOnServer retry: aBool	"ar 11/24/1998 Do the usual putFile:named: operation but retry if some error occurs and aBool is set. Added due to having severe transmission problems on shell.webpage.com."	| resp |	self isTypeFile ifTrue: [		^ (FileDirectory on: urlObject pathForDirectory)			putFile: fileStream named: fileNameOnServer].	[resp := [self putFile: fileStream named: fileNameOnServer] 		ifError:[:err :rcvr| '5xx ',err]. "Report as error"	aBool and:[((resp isString) and: [resp size > 0]) and:[resp first ~= $2]]] whileTrue:[		(self confirm:('Error storing ',fileNameOnServer,' on the server.\(',resp,',)\Retry operation?') withCRs) ifFalse:[^resp].	].	^resp! !!ServerDirectory methodsFor: 'dis/connect' stamp: 'nice 2/8/2010 09:40'!openFTPClient	| loginSuccessful |	client		ifNotNil: [client isConnected			ifTrue: [^client]			ifFalse: [client := nil]].	client := FTPClient openOnHostNamed: server.	loginSuccessful := false.	[loginSuccessful]		whileFalse: [			[loginSuccessful := true.			client loginUser: self user password: self password]				on: LoginFailedException				do: [:ex | 					| what |					passwordHolder := nil.					what := UIManager default 						chooseFrom: #('enter password' 'give up') 						title: 'Would you like to try another password?'.					what = 1 ifFalse: [self error: 'Login failed.'. ^nil].					loginSuccessful := false]].	client changeDirectoryTo: directory.	^client! !MailComposition removeSelector: #openInMorphic!