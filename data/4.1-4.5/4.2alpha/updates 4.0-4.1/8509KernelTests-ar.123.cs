"Change Set:		8509KernelTests-ar.123KernelTests-ar.123:CompiledMethodTrailer phase 1: Main classesKernelTests-ul.121:- updated tests for #ifNil: #ifNotNil: and friendsKernelTests-ul.122:- updated tests for #ifNil: #ifNotNil: and friends"!TestCase subclass: #CompledMethodTrailerTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'KernelTests-Methods'!!CompledMethodTrailerTest methodsFor: 'as yet unclassified' stamp: 'Igor.Stasenko 12/13/2009 21:17'!testEncodingNoTrailer	| trailer |		trailer := CompiledMethodTrailer new.		"by default it should be a no-trailer"		self assert: (trailer kind == #NoTrailer ).	self assert: (trailer size = 1).		trailer := trailer testEncoding.		self assert: (trailer kind == #NoTrailer ).	self assert: (trailer size = 1).	"the last bytecode index must be at 0"	self assert: (trailer endPC = 0).! !!ProtoObjectTest methodsFor: 'tests - testing' stamp: 'ul 12/18/2009 15:48'!testIfNotNilIfNil	| object returnValue block |	object := ProtoObject new.	returnValue := Object new.	self should: [ object ifNotNil: [ self halt ] ifNil: [ self error ]  ] raise: Halt.	self should: [ object ifNotNil: [ :o | self halt ] ifNil: [ self error ] ] raise: Halt.	self assert: (object ifNotNil: [ :o | o == object ] ifNil: [ false ]).	self assert: (object ifNotNil: [ returnValue ] ifNil: [ false ]) == returnValue.	self assert: (object ifNotNil: [ :o | returnValue ] ifNil: [ false ]) == returnValue.	"Now the same without inlining."	block := [ self halt ].	self should: [ object ifNotNil: block ifNil: [ self error ]  ] raise: Halt.	block := [ :o | self halt ].	self should: [ object ifNotNil: block ifNil: [ self error ] ] raise: Halt.	block := [ :o | o == object ].	self assert: (object ifNotNil: block ifNil: [ false ]).	block := [ returnValue ].	self assert: (object ifNotNil: block ifNil: [ false ]) == returnValue.	block := [ :o | returnValue ].	self assert: (object ifNotNil: block ifNil: [ false ]) == returnValue! !!ProtoObjectTest methodsFor: 'tests - testing' stamp: 'sd 6/5/2005 09:05'!testFlag		self shouldnt: [ProtoObject new flag: #hallo] raise: Error.! !!ObjectTest methodsFor: 'tests - testing' stamp: 'ul 12/18/2009 17:43'!testNotNil	self assert: Object new notNil! !!UndefinedObjectTest methodsFor: 'tests - testing' stamp: 'ul 12/18/2009 17:46'!testIfNilIfNotNil	| object block |	object := Object new.	self should: [ nil ifNil: [self halt] ifNotNil: [ self error] ] raise: Halt.	self should: [ nil ifNil: [ self halt ] ifNotNil: [ :o | self error ] ] raise: Halt.	self assert: (nil ifNil: [ object ] ifNotNil: [ 1 ]) == object.	self assert: (nil ifNil: [ object ] ifNotNil: [ :o | 1 ]) == object.	"Now the same without inlining."	block := [ self halt ].	self should: [ nil ifNil: block ifNotNil: [ self error ] ] raise: Halt.	self should: [ nil ifNil: block ifNotNil: [ :o | self error ] ] raise: Halt.	block := [ object ].	self assert: (nil ifNil: block ifNotNil: [ 1 ]) == object.	self assert: (nil ifNil: block ifNotNil: [ :o | 1 ]) == object! !!ObjectTest methodsFor: 'tests - testing' stamp: 'sd 6/5/2005 09:05'!testHaltIf	self should: [self haltIf: true] raise: Halt.	self shouldnt: [self haltIf: false] raise: Halt.	self should: [self haltIf: [true]] raise: Halt.	self shouldnt: [self haltIf: [false]] raise: Halt.	self should: [self haltIf: #testHaltIf.] raise: Halt.	self shouldnt: [self haltIf: #teadfasdfltIf.] raise: Halt.	self should: [self a] raise: Halt.	self shouldnt: [self a1] raise: Halt.	self should: [self haltIf: [:o | o class = self class]] raise: Halt.	self shouldnt: [self haltIf: [:o | o class ~= self class]] raise: Halt.! !!UndefinedObjectTest methodsFor: 'tests - testing' stamp: 'ul 12/18/2009 17:43'!testNotNil	self deny: nil notNil! !!CompledMethodTrailerTest methodsFor: 'as yet unclassified' stamp: 'Igor.Stasenko 12/13/2009 21:15'!testEncodingVarLengthSourcePointer	| trailer newTrailer |		trailer := CompiledMethodTrailer new.		trailer sourcePointer: 1.	newTrailer := trailer testEncoding.		self assert: (newTrailer sourcePointer = 1).		trailer sourcePointer: 16r100000000000000.	newTrailer := trailer testEncoding.	self assert: (newTrailer sourcePointer = 16r100000000000000).	"the last bytecode index must be at 0"	self assert: (newTrailer endPC = 0).! !!CompledMethodTrailerTest methodsFor: 'as yet unclassified' stamp: 'Igor.Stasenko 12/13/2009 21:49'!testSourceBySelectorEncoding	| trailer |		trailer := CompiledMethodTrailer new.		trailer setSourceBySelector.		self assert: (trailer kind == #SourceBySelector ).	self assert: (trailer size = 1).		trailer := trailer testEncoding.		self assert: (trailer kind == #SourceBySelector ).	self assert: (trailer size = 1).	"the last bytecode index must be at 0"	self assert: (trailer endPC = 0).! !!ProtoObjectTest methodsFor: 'tests - testing' stamp: 'ul 12/18/2009 15:49'!testIfNilIfNotNil	| object returnValue block |	object := ProtoObject new.	returnValue := Object new.	self should: [ object ifNil: [ self error ] ifNotNil: [ self halt ] ] raise: Halt.	self should: [ object ifNil: [ self error ] ifNotNil: [ :o | self halt ] ] raise: Halt.	self assert: (object ifNil: [ false ] ifNotNil: [ :o | o == object ]).	self assert: (object ifNil: [ nil ] ifNotNil: [ returnValue ]) == returnValue.	self assert: (object ifNil: [ nil ] ifNotNil: [ :o | returnValue ]) == returnValue.	"Now the same without inlining."	block := [ self halt ].	self should: [ object ifNil: [ self error ] ifNotNil: block ] raise: Halt.	block := [ :o | self halt ].	self should: [ object ifNil: [ self error ] ifNotNil: block ] raise: Halt.	block := [ :o | o == object ].	self assert: (object ifNil: [ false ] ifNotNil: block).	block := [ returnValue ].	self assert: (object ifNil: [ nil ] ifNotNil: block) = returnValue.	block := [ :o | returnValue ].	self assert: (object ifNil: [ nil ] ifNotNil: block) = returnValue! !!CompledMethodTrailerTest methodsFor: 'as yet unclassified' stamp: 'Igor.Stasenko 12/13/2009 21:15'!testSourceByIdentifierEncoding	| trailer id |		trailer := CompiledMethodTrailer new.		id := UUID new asString.	trailer sourceIdentifier: id.		self assert: (trailer kind == #SourceByStringIdentifier ).		trailer := trailer testEncoding.		self assert: (trailer kind == #SourceByStringIdentifier ).	self assert: (trailer sourceIdentifier = id).	"the last bytecode index must be at 0"	self assert: (trailer endPC = 0).! !!CompledMethodTrailerTest methodsFor: 'as yet unclassified' stamp: 'Igor.Stasenko 12/13/2009 21:13'!testEmbeddingTempNames	| trailer newTrailer code |		trailer := CompiledMethodTrailer new.		code := 'foo'.	trailer tempNames: code.	newTrailer := trailer testEncoding.		self assert: (trailer kind == #TempsNamesQCompress ).	self assert: (newTrailer tempNames = code).	"the last bytecode index must be at 0"	self assert: (newTrailer endPC = 0).		code := 'testEmbeddingSourceCode	| trailer newTrailer code |		trailer := CompiledMethodTrailer new.		trailer sourceCode: code.	newTrailer := trailer testEncoding.		self assert: (newTrailer sourceCode = code).'.	trailer tempNames: code.	self assert: (trailer kind == #TempsNamesZip ).	newTrailer := trailer testEncoding.		self assert: (newTrailer tempNames = code).	"the last bytecode index must be at 0"	self assert: (newTrailer endPC = 0).! !!UndefinedObjectTest methodsFor: 'tests - testing' stamp: 'ul 12/18/2009 17:42'!testIsNil	self assert: nil isNil! !!MethodPropertiesTest methodsFor: 'testing' stamp: 'bs 12/18/2009 13:36'!testAtPutRepeatedly	self assert: (method properties at: #zork put: 'hello') = 'hello'.	self assert: (method properties at: #zork put: 'hello') = 'hello'.	self assert: (method properties at: #zork) = 'hello'.! !!CompledMethodTrailerTest methodsFor: 'as yet unclassified' stamp: 'Igor.Stasenko 12/13/2009 21:14'!testEncodingSourcePointer	| trailer |		trailer := CompiledMethodTrailer new.		CompiledMethod allInstancesDo: [:method | | ptr |		trailer method: method.		self assert: ( (ptr := method sourcePointer) == trailer sourcePointer).		"the last bytecode index must be at 0"		ptr ~= 0 ifTrue: [			self assert: (method endPC = trailer endPC) ].	 ].! !!UndefinedObjectTest methodsFor: 'tests - testing' stamp: 'ul 12/18/2009 15:47'!testIfNil	| object block |	object := Object new.	self should: [ nil ifNil: [ self halt ] ] raise: Halt.	self assert: (nil ifNil: [ object ]) == object.	"Now the same without inlining."		block := [ self halt ].	self should: [ nil ifNil: block ] raise: Halt.	block := [ object ].	self assert: (nil ifNil: block) == object.	! !!ProtoObjectTest methodsFor: 'tests - testing' stamp: 'ul 12/18/2009 15:48'!testIsNil	self deny: ProtoObject new isNil! !!CompledMethodTrailerTest methodsFor: 'as yet unclassified' stamp: 'Igor.Stasenko 12/13/2009 21:13'!testEmbeddingSourceCode	| trailer newTrailer code |		trailer := CompiledMethodTrailer new.		code := 'foo'.	trailer sourceCode: code.	newTrailer := trailer testEncoding.		self assert: (trailer kind == #EmbeddedSourceQCompress ).	self assert: (newTrailer sourceCode = code).	"the last bytecode index must be at 0"	self assert: (newTrailer endPC = 0).	code := 'testEmbeddingSourceCode	| trailer newTrailer code |		trailer := CompiledMethodTrailer new.		trailer sourceCode: code.	newTrailer := trailer testEncoding.		self assert: (newTrailer sourceCode = code).'.	trailer sourceCode: code.	self assert: (trailer kind == #EmbeddedSourceZip ).	newTrailer := trailer testEncoding.		self assert: (newTrailer sourceCode = code).	"the last bytecode index must be at 0"	self assert: (newTrailer endPC = 0).! !!UndefinedObjectTest methodsFor: 'tests - testing' stamp: 'ul 12/18/2009 17:46'!testIfNotNil	| block |	self shouldnt: [ nil ifNotNil: [ self halt ] ] raise: Halt.	self shouldnt: [ nil ifNotNil: [ :object | self halt ] ] raise: Halt.	self assert: (nil ifNotNil: [ 1 ]) == nil.	self assert: (nil ifNotNil: [ :o | 1 ]) == nil.	"Now the same without inlining."		block := [ self halt ].	self shouldnt: [ nil ifNotNil: block ] raise: Halt.	block := [ :object | self halt ].	self shouldnt: [ nil ifNotNil: block ] raise: Halt.	block := [ 1 ].	self assert: (nil ifNotNil: block) == nil.	block := [ :o | 1 ].	self assert: (nil ifNotNil: block) == nil.		! !!ProtoObjectTest methodsFor: 'tests - testing' stamp: 'ul 12/18/2009 15:40'!testIfNil		| object block |	object := ProtoObject new.	self shouldnt: [ object ifNil: [ self halt ]] raise: Halt.	self assert: (object ifNil: [ nil ]) == object.	"Now the same without inlining."	block := [ self halt ].	self shouldnt: [ object ifNil: block ] raise: Halt.	block := [ nil ].	self assert: (object ifNil: block) == object.	! !!UndefinedObjectTest methodsFor: 'tests - testing' stamp: 'ul 12/18/2009 17:42'!testIfNotNilIfNil	| object block |	object := Object new.	self should: [ nil ifNotNil: [ self error ] ifNil: [ self halt ] ] raise: Halt.	self should: [ nil ifNotNil: [ :o | self error] ifNil: [ self halt ] ] raise: Halt.	self assert: (nil ifNotNil: [ 1 ] ifNil: [ object ]) == object.	self assert: (nil ifNotNil: [ :o | 1 ] ifNil: [ object ]) == object.	"Now the same without inlining."	block := [ self error ].	self should: [ nil ifNotNil: block ifNil: [ self halt ] ] raise: Halt.	block := [ :o | self error].	self should: [ nil ifNotNil: block ifNil: [ self halt ] ] raise: Halt.	block := [ 1 ].	self assert: (nil ifNotNil: block ifNil: [ object ]) == object.	block := [ :o | 1 ].	self assert: (nil ifNotNil: block ifNil: [ object ]) == object! !!ProtoObjectTest methodsFor: 'tests - testing' stamp: 'ul 12/18/2009 15:48'!testIfNotNil	| object returnValue block |	object := ProtoObject new.	returnValue := Object new.	self should: [ object ifNotNil: [ self halt ] ] raise: Halt.	self should: [ object ifNotNil: [ :o | self halt ] ] raise: Halt.	self assert: (object ifNotNil: [ :o | o == object ]).	self assert: (object ifNotNil: [ returnValue ]) == returnValue.	self assert: (object ifNotNil: [ :o | returnValue ]) == returnValue.		"Now the same without inlining."	block := [ self halt ].	self should: [ object ifNotNil: block ] raise: Halt.	block := [ :o | self halt ].	self should: [ object ifNotNil: block ] raise: Halt.	block := [ :o | o == object ].	self assert: (object ifNotNil: block).	block := [ returnValue ].	self assert: (object ifNotNil: block) = returnValue.	block := [ :o | returnValue ].	self assert: (object ifNotNil: block) = returnValue! !