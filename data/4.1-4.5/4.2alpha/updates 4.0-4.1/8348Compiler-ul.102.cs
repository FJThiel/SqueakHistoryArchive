"Change Set:		8348Compiler-ul.102Compiler-ul.102:- lifted a missing change from Pharo for ByteArray literals- ScannerTest >> #testLiteralSymbols and a test in DecompilerTestFailuresCollector pass nowCompiler-nice.100:Let token be ':=' when := is used for assignment.This used to make some Decompiler tests fail...http://code.google.com/p/pharo/issues/detail?id=740Compiler-ul.101:- fix: #[ is not a valid literal anymore, so Scanner isLiteralSymbol: #'[' should return false (instead of syntax error). This also fixes broken tests: ScannerTest >> #testLiteralSymbols and a test in DecompilerTestFailuresCollector"!!Scanner class methodsFor: 'testing' stamp: 'nice 10/10/2008 20:08'!isLiteralSymbol: aSymbol 	"Test whether a symbol can be stored as # followed by its characters.  	Symbols created internally with asSymbol may not have this property, 	e.g. '3' asSymbol."	| i ascii type next last |	i := aSymbol size.	i = 0 ifTrue: [^ false].	"TypeTable should have been origined at 0 rather than 1 ..."	ascii := (aSymbol at: 1) asciiValue.	type := TypeTable at: ascii ifAbsent: [^false].	type == #xLetter ifTrue: [		next := last := nil.		[i > 1]				whileTrue: 					[ascii := (aSymbol at: i) asciiValue.					type := TypeTable at: ascii ifAbsent: [^false].					(type == #xLetter or: [type == #xDigit or: [type == #xColon							and: [								next == nil									ifTrue: [last := #xColon. true] 									ifFalse: [last == #xColon and: [next ~~ #xDigit and: [next ~~ #xColon]]]]]])						ifFalse: [^ false].					next := type.					i := i - 1].			^ true].		type == #xBinary ifTrue: [^i = 1]. "Here we could extend to		^(2 to: i) allSatisfy: [:j |			ascii := (aSymbol at: j) asciiValue.			(TypeTable at: ascii ifAbsent: []) == #xBinary]"	type == #verticalBar ifTrue: [^i = 1].	^false! !!Scanner methodsFor: 'multi-character scans' stamp: 'nice 4/14/2009 19:34'!xColon	"Allow := for assignment"		aheadChar = $= ifTrue:		[self step.		tokenType := #leftArrow.		self step.		^ token := #':='].	"Otherwise, just do what normal scan of colon would do"	tokenType := #colon.	^ token := self step asSymbol! !