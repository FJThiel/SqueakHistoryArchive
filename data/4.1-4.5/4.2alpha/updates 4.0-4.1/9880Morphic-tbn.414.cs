"Change Set:		9880Morphic-tbn.414Morphic-tbn.414:fix from http://lists.gforge.inria.fr/pipermail/pharo-project/2010-April/024655.htmlMorphic-cmm.400:Added help... back to the world menu.  If we want to clean up the World menu, we should do something that allows both it _and_ the docking-bar menu to be constructed from one unified place, so that changing that place affects both menus the same.Morphic-cmm.401:Reverted my experimental search bar and clock because they aren't properly integrated into the Docking bar.  Not sure what is needed to do that.Morphic-klub.402:- added a search bar and a clock to the docking barMorphic-ar.403:Merging Morphic-klub.402:- added a search bar and a clock to the docking bar- (ar) label the search entry for noobs- (ar) first round of smart search for typing in globals or messages and fire browsers on thoseMorphic-ar.404:MessageNames to the rescue!Morphic-ar.405:Fix smartSearch in the search bar. When having an exact hit on a class name it would browse the metaclass instead of the class itself.Morphic-ul.406:Merged klub.405:

- fix the missing keyboard shortcut for the search bar. Ctrl+<n> activates the search bar where n is an integer between 0 and 9 if there is no menu assigned to that number. The intended usage is Ctrl-0, but some keyboard layouts don't have a key for 0 without modifier keys.Morphic-cmm.407:The Searchbar now employs a more subdued 'Echo back' (http://c2.com/ppr/checks.html#4) rather than beeping at the user.Morphic-ar.408:Restore methods in PopUpMenu that went AWOL in some prior update.Morphic-cmm.409:Changed hot-key for search-bar activation to Control+7 instead of Control+7, 8, or 9.  Control+9 was already taken for a very useful, legacy function (surround with parenthesis).  This is also consistent with the other hot-keys on the DockingBar since the search-bar is the 7th item over, not the 9th.  There are a limited number of shortcut keys still available on the keyboard, so no function deserves three separate hot-keys.Morphic-kb.410: - SearchBarMorph >> smartSearch: retains keyboard focus if no match was found.Morphic-laza.413:make postscript execute"!TextMorph subclass: #SearchBarMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Menus-DockingBar'!!Morph methodsFor: 'meta-actions' stamp: 'tbn 4/7/2010 15:38'!showActions	"Put up a message list browser of all the code that this morph  	would run for mouseUp, mouseDown, mouseMove, mouseEnter,  	mouseLeave, and  	mouseLinger. tk 9/13/97"	| list cls selector adder |	list := SortedCollection new.	adder := [:mrClass :mrSel | list				add: (MethodReference new setStandardClass: mrClass methodSymbol: mrSel)].	"the eventHandler"	self eventHandler		ifNotNil: [list := self eventHandler methodRefList.			(self eventHandler handlesMouseDown: nil)				ifFalse: [adder value: HandMorph value: #grabMorph:]].	"If not those, then non-default raw events"	#(#keyStroke: #mouseDown: #mouseEnter: #mouseLeave: #mouseMove: #mouseUp: #doButtonAction )		do: [:sel | 			cls := self class whichClassIncludesSelector: sel.			cls				ifNotNil: ["want more than default behavior"					cls == Morph						ifFalse: [adder value: cls value: sel]]].	"The mechanism on a Button"	(self respondsTo: #actionSelector)		ifTrue: ["A button"			selector := self actionSelector.			cls := self target class whichClassIncludesSelector: selector.			cls				ifNotNil: ["want more than default behavior"					cls == Morph						ifFalse: [adder value: cls value: selector]]].	MessageSet openMessageList: list name: 'Actionsof ' , self printString autoSelect: nil! !!PopUpMenu methodsFor: '*Morphic-Menus' stamp: 'dtl 1/30/2010 16:13'!morphicStartUpLeftFlush	"Build and invoke this menu with no initial selection.  By Jerry Archibald, 4/01.	If in MVC, align menus items with the left margin.	Answer the selection associated with the menu item chosen by the user or nil if none is chosen.  	The mechanism for getting left-flush appearance in mvc leaves a tiny possibility for misadventure: if the user, in mvc, puts up the jump-to-project menu, then hits cmd period while it is up, then puts up a second jump-to-project menu before dismissing or proceeding through the debugger, it's possible for mvc popup-menus thereafter to appear left-aligned rather than centered; this very unlikely condition can be cleared by evaluating 'PopUpMenu alignment: 2'"	^self startUp! !!DockingBarMorph methodsFor: 'events-processing' stamp: 'cmm 4/4/2010 19:31'!handleListenEvent: anEvent	" I am registered as a keyboardListener of the ActiveHand, 	watching for ctrl-<n> keystrokes, and upon them if I have 	an nth menu item, I'll activate myself and select it. "		(anEvent controlKeyPressed and: [ 		anEvent keyValue 			between: 48 " $0 asciiValue " 			and: 55 " $7 asciiValue " ]) ifTrue: [ 		| index itemToSelect |		index := anEvent keyValue - 48.		itemToSelect := (submorphs select: [ :each | 			each isKindOf: DockingBarItemMorph ]) 				at: index 				ifAbsent: [ 					^self searchBarMorph ifNotNil: [ :searchBar |						searchBar activate: anEvent ] ].		self activate: anEvent.		self 			selectItem: itemToSelect			event: anEvent ]! !!DockingBarMorph methodsFor: 'events-processing' stamp: 'klub 3/30/2010 00:19'!searchBarMorph	^self submorphs detect: [ :each | each class = SearchBarMorph ] ifNone: [ nil ]! !!SearchBarMorph methodsFor: 'initialize' stamp: 'kb 4/5/2010 16:08'!initialize	super initialize.	text := Text new.	backgroundColor := TranslucentColor gray alpha: 0.3.	self width: 200.	self crAction: (MessageSend receiver: self selector: #smartSearch:).	self setBalloonText: 'Searches for globals and methods'.! !!SearchBarMorph methodsFor: 'initialize' stamp: 'klub 3/28/2010 17:30'!fillStyle	^backgroundColor! !!TheWorldMainDockingBar methodsFor: 'right side' stamp: 'klub 3/28/2010 17:35'!clockOn: aDockingBar 	aDockingBar 		addMorphBack: (			ClockMorph new				showSeconds: false;				yourself);		addDefaultSpace! !!TheWorldMenu methodsFor: 'construction' stamp: 'mha 2/3/2009 16:43'!addUtilities: menu	Preferences simpleMenus ifFalse: [		self			fillIn: menu			from: {				{ 'open...'. { self. #openWindow } }.				{ 'windows...'. { self. #windowsDo } }.				{ 'changes...'. { self. #changesDo } }			} ].	self		fillIn: menu		from: {			{ 'help...'. { self. #helpDo }. 'puts up a menu of useful items for updating the system, determining what version you are running, and much else' }.			{ 'appearance...'. { self. #appearanceDo }. 'put up a menu offering many controls over appearance.' }		}.	Preferences simpleMenus ifFalse: [		self			fillIn: menu			from: {				{ 'do...'. { Utilities. #offerCommonRequests }. 'put up an editible list of convenient expressions, and evaluate the one selected.' }			} ]! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'klub 3/28/2010 14:14'!helpMenuOn: aDockingBar	aDockingBar addItem: [ :it |		it	contents: 'Help' translated;			addSubMenu: [ :menu |  'Todo'.				menu addItem:[:item|					item						contents: 'Online Resources' translated;						help: 'Online resources for Squeak' translated;						target: self;						icon: MenuIcons smallHelpIcon;						selector: #showSqueakResources ].				menu addItem:[:item|					item						contents: 'Keyboard Shortcuts' translated;						help: 'Keyboard bindings used in Squeak' translated;						target: Utilities;						selector: #openCommandKeyHelp ].				menu addItem:[:item|					item						contents: 'Font Size Summary' translated;						help: 'Font size summary from the old Squeak 3.10.2 help menu.' translated;						target: TextStyle;						selector: #fontSizeSummary ].				menu addItem:[:item|					item						contents: 'Useful Expressions' translated;						help: 'Useful expressions from the old Squeak 3.10.2 help menu.' translated;						target: Utilities;						selector: #openStandardWorkspace ].			]].! !!SearchBarMorph methodsFor: 'search' stamp: 'kb 4/5/2010 16:07'!smartSearch: evt	"Take the user input and perform an appropriate search"	| input newContents |	input := self contents asString ifEmpty:[^self].	(Smalltalk bindingOf: input) ifNotNil:[:assoc| | global |		"It's a global or a class"		global := assoc value.		^ToolSet browse: (global isBehavior ifTrue:[global] ifFalse:[global class]) selector: nil.	].	(SystemNavigation new allImplementorsOf: input asSymbol) ifNotEmpty:[:list|		^SystemNavigation new			browseMessageList: list			name: 'Implementors of ' , input	].	input first isUppercase ifTrue:[		(Utilities classFromPattern: input withCaption: '') ifNotNil:[:aClass|			^ToolSet browse: aClass selector: nil.		].	] ifFalse:[		^ToolSet default browseMessageNames: input	].	newContents := input, ' -- not found.'.	self 		newContents: newContents; 		selectFrom: input size+1 to: newContents size.	evt hand newKeyboardFocus: self! !!TextMorph methodsFor: 'event handling' stamp: 'kb 4/5/2010 16:14'!keyStroke: evt	"Handle a keystroke event."		self resetBlinkCursor. "don't blink during type-in"	evt keyValue = 13 ifTrue: [ "CR - check for special action"		self crAction ifNotNil: [ :action |			"Note: Code below assumes that this was some			input field reacting on CR. Break the keyboard			focus so that the receiver can be safely deleted."			evt hand newKeyboardFocus: nil.			^action valueWithEnoughArguments: { evt } ] ].	self handleInteraction: [ editor readKeyboard ] fromEvent: evt.	"self updateFromParagraph."	super keyStroke: evt  "sends to keyStroke event handler, if any"! !!SearchBarMorph methodsFor: 'search' stamp: 'klub 3/30/2010 00:19'!activate: event	event hand newKeyboardFocus: self.	self selectAll! !!TheWorldMainDockingBar methodsFor: 'right side' stamp: 'ar 3/28/2010 15:01'!searchBarOn: aDockingBar	aDockingBar 		addMorphBack: (StringMorph new contents: 'Search: ');		addMorphBack: SearchBarMorph new;		addDefaultSpace! !!PopUpMenu methodsFor: '*Morphic-Menus' stamp: 'dtl 1/30/2010 15:54'!morphicStartUpWithCaption: captionOrNil icon: aForm at: location allowKeyboard: aBoolean	"Display the menu, with caption if supplied. Wait for the mouse button to go down, then track the selection as long as the button is pressed. When the button is released,	Answer the index of the current selection, or zero if the mouse is not released over  any menu item. Location specifies the desired topLeft of the menu body rectangle. The final argument indicates whether the menu should seize the keyboard focus in order to allow the user to navigate it via the keyboard."	selection := Cursor normal				showWhile: [| menuMorph |					menuMorph := MVCMenuMorph from: self title: nil.					(captionOrNil notNil							or: [aForm notNil])						ifTrue: [menuMorph addTitle: captionOrNil icon: aForm].					MenuIcons decorateMenu: menuMorph.					menuMorph						invokeAt: location						in: ActiveWorld						allowKeyboard: aBoolean].	^ selection! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'klub 3/28/2010 17:34'!menusOn: aDockingBar 	self 		squeakMenuOn: aDockingBar;		projectsMenuOn: aDockingBar;		toolsMenuOn: aDockingBar;		extrasMenuOn: aDockingBar;		windowsMenuOn: aDockingBar;		helpMenuOn: aDockingBar.	aDockingBar addSpacer.	self		searchBarOn: aDockingBar;		clockOn: aDockingBar! !