"Change Set:		7322Tools-ar.93Tools-ar.93:Closure compiler, main part."!!CompiledMethod methodsFor: '*Tools-Inspector' stamp: 'eem 5/15/2008 13:14'!explorerContents	"(CompiledMethod compiledMethodAt: #explorerContents) explore"		^Array streamContents:		[:s| | tokens |		tokens := Scanner new scanTokens: (self headerDescription readStream skipTo: $"; upTo: $").		s nextPut: (ObjectExplorerWrapper						with: ((0 to: tokens size by: 2) collect:								[:i| i = 0 ifTrue: [self header] ifFalse: [{tokens at: i - 1. tokens at: i}]])						name: 'header'						model: self).		(1 to: self numLiterals) do:			[:key|			s nextPut: (ObjectExplorerWrapper							with: (self literalAt: key)							name: ('literal', key printString contractTo: 32)							model: self)].		self isQuick			ifTrue: [s nextPut: (ObjectExplorerWrapper									with: self symbolic									name: #symbolic									model: self)]			ifFalse:				[self symbolicLinesDo:					[:pc :line|					pc <= 1						ifTrue:							[s nextPut: (ObjectExplorerWrapper											with: line											name: 'pragma'											model: self)]						ifFalse:							[s nextPut: (ObjectExplorerWrapper											with: line											name: pc printString											model: self)]]].				"should be self numLiterals + 1 * Smalltalk wordSize + 1"		self endPC + 1			to: self basicSize			do: [:key|				s nextPut: (ObjectExplorerWrapper								with: (self basicAt: key)								name: key printString								model: self)]]! !!Debugger methodsFor: 'context stack (message list)' stamp: 'eem 9/5/2008 13:57'!selectedMessageName	"Answer the message selector of the currently selected context.	 If the method is unbound we can still usefully answer its old selector."	| selector |	selector := self selectedContext methodSelector.	^(selector ~~ self selectedContext method selector	    and: [selector beginsWith: 'DoIt'])		ifTrue: [self selectedContext method selector]		ifFalse: [selector]! !!ObjectExplorer methodsFor: 'user interface' stamp: 'eem 5/7/2008 11:17'!openExplorerFor: anObject"ObjectExplorer new openExplorerFor: Smalltalk"	| win |	win := (self explorerFor: anObject) openInWorld.	Cursor wait showWhile:		[win submorphs do:			[:sm|			(sm respondsTo: #expandRoots) ifTrue:				[sm expandRoots]]].	^self! !