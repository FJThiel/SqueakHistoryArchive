"Change Set:		8681Traits-ar.263Traits-ar.263:Prepare to push traitComposition into TraitOrganizer so that we don't need to duplicate it in three places (Class, Metaclass, TraitDescription).Traits-ar.262:Complete the transition, removing the original NanoTrait classes."!ClassOrganizer subclass: #TraitOrganizer	instanceVariableNames: 'traitComposition'	classVariableNames: ''	poolDictionaries: ''	category: 'Traits-Kernel'!!ClassOrganizer methodsFor: '*Traits-Kernel' stamp: 'ar 12/30/2009 02:46'!traitComposition	"Answer the receiver's trait composition"	^#()! !!ClassOrganizer methodsFor: '*Traits-Kernel' stamp: 'ar 12/30/2009 02:46'!isTraitOrganizer	"Answer true if this is a TraitOrganizer"	^false! !!TraitOrganizer methodsFor: 'accessing' stamp: 'ar 12/30/2009 02:47'!traitComposition	"Answer the receiver's trait composition"	^traitComposition ifNil:[traitComposition := TraitComposition new]! !!ClassDescription methodsFor: '*Traits-NanoKernel' stamp: 'ar 12/30/2009 02:48'!traitComposition	"Answer my trait composition"	^self organization traitComposition! !!TraitOrganizer methodsFor: 'testing' stamp: 'ar 12/30/2009 02:48'!isTraitOrganizer	"Answer true if this is a TraitOrganizer"	^true! !!TraitDescription methodsFor: 'accessing' stamp: 'ar 12/30/2009 02:50'!traitComposition: aTraitComposition	super traitComposition: aTraitComposition.	traitComposition := aTraitComposition.! !!ClassTrait methodsFor: 'testing' stamp: 'ar 12/30/2009 02:43'!isObsolete	^baseTrait == nil or:[baseTrait isObsolete]! !!TraitOrganizer methodsFor: 'accessing' stamp: 'ar 12/30/2009 02:48'!traitComposition: aTraitComposition	"Install the receiver's trait composition"	traitComposition := aTraitComposition.! !!ClassDescription methodsFor: '*Traits-NanoKernel' stamp: 'ar 12/30/2009 02:50'!traitComposition: aTraitComposition	"Install my trait composition"	aTraitComposition isEmpty ifTrue:[		self organization isTraitOrganizer 			ifTrue:[self organization: (ClassOrganizer newFrom: self organization)].	] ifFalse:[		self organization isTraitOrganizer 			ifFalse:[self organization: (TraitOrganizer newFrom: self organization)].		self organization traitComposition: aTraitComposition.	].! !NanoTraitComposition removeSelector: #removeUser:!NanoTraitDescription removeSelector: #traitsDo:!NanoTraitTransformation removeSelector: #updateTraits!NanoTraitDescription classSide removeSelector: #conflict!NanoTraitTransformation removeSelector: #trait!NanoTraitDescription removeSelector: #installTraitsFrom:!NanoTrait removeSelector: #removeFromSystem!Trait class removeSelector: #updateTraits:!NanoTraitDescription removeSelector: #isTraitTransformation!NanoTraitExclusion removeSelector: #includesSelector:!NanoTraitTransformation removeSelector: #copyTraitExpression!NanoTraitExclusion removeSelector: #-!NanoTraitMethodState removeSelector: #originalTraitOrClass!NanoTraitComposition removeSelector: #-!NanoTraitComposition removeSelector: #removeFromComposition:!NanoTraitTransformation removeSelector: #traitsDo:!NanoClassTrait removeSelector: #bindingOf:!NanoTraitAlias removeSelector: #printOn:!NanoTraitComposition removeSelector: #includesTrait:!NanoTraitDescription removeSelector: #copy!NanoTraitDescription removeSelector: #isClassTrait!NanoTraitComposition removeSelector: #addUser:!NanoTraitDescription classSide removeSelector: #conflict:with:with:with:!Smalltalk removeClassNamed: #NanoTraitExclusion!NanoClassTrait removeSelector: #baseTrait!NanoTraitDescription classSide removeSelector: #conflict:with:!NanoTrait removeSelector: #asClassDefinition!NanoTraitExclusion removeSelector: #initialize!NanoTraitTransformation removeSelector: #isTraitTransformation!Smalltalk removeClassNamed: #NanoTraitBehavior!NanoClassTrait removeSelector: #instanceSide!NanoTrait removeSelector: #rename:!NanoTraitExclusion classSide removeSelector: #with:exclusions:!NanoTraitDescription removeSelector: #@!NanoTraitDescription removeSelector: #fileOutAsHtml:!NanoTraitAlias removeSelector: #aliases!NanoTraitDescription classSide removeSelector: #conflict:with:with:with:with:with:with:with:!NanoTrait removeSelector: #isObsolete!NanoTraitDescription removeSelector: #notifyOfRecategorizedSelector:from:to:!NanoTraitDescription removeSelector: #removeUser:!Smalltalk removeClassNamed: #NanoTrait!NanoTraitTransformation removeSelector: #allTraits!NanoTrait removeSelector: #fileOutOn:moveSource:toFile:!NanoTraitDescription removeSelector: #traitComposition!NanoTrait removeSelector: #bindingOf:!NanoTraitTransformation removeSelector: #subject:!NanoTraitComposition removeSelector: #removeTraitUser:!NanoClassTrait removeSelector: #isClassTrait!NanoClassTrait classSide removeSelector: #new!NanoClassTrait removeSelector: #new!NanoTraitAlias removeSelector: #@!Smalltalk removeClassNamed: #NanoTraitTransformation!NanoTraitComposition removeSelector: #+!NanoTraitComposition removeSelector: #isLocalAliasSelector:!NanoTraitDescription removeSelector: #-!NanoClassTrait removeSelector: #soleInstance!NanoTrait removeSelector: #environment:!NanoTraitDescription removeSelector: #addSelectorSilently:withMethod:!NanoClassTrait removeSelector: #classSide!NanoTraitDescription removeSelector: #addUser:!NanoTraitComposition removeSelector: #selectorsAndMethodsDo:!NanoTrait removeSelector: #classTrait!NanoTrait removeSelector: #category!NanoTraitTransformation removeSelector: #@!NanoTrait removeSelector: #baseTrait!NanoClassTrait removeSelector: #name!NanoTraitAlias removeSelector: #includesSelector:!NanoTraitAlias removeSelector: #initialize!NanoTraitComposition removeSelector: #asTraitComposition!Smalltalk removeClassNamed: #NanoTraitComposition!NanoTraitAlias removeSelector: #-!NanoTraitComposition removeSelector: #isAliasSelector:!NanoTraitAlias removeSelector: #initializeFrom:!NanoTraitTransformation removeSelector: #-!NanoTraitDescription removeSelector: #includesTrait:!NanoTrait removeSelector: #classDefinitions!NanoTraitExclusion removeSelector: #selectorsAndMethodsDo:!NanoTrait classSide removeSelector: #named:uses:category:env:!NanoTrait removeSelector: #removeFromSystem:!Smalltalk removeClassNamed: #NanoTraitDescription!NanoTraitDescription removeSelector: #allClassVarNames!NanoTraitDescription removeSelector: #fileOut!NanoClassTrait removeSelector: #asMCDefinition!NanoTrait classSide removeSelector: #install!NanoTraitComposition removeSelector: #traits!NanoTraitTransformation removeSelector: #updateSelector:withTraitMethod:from:!NanoTraitComposition removeSelector: #addTraitUser:!NanoTraitDescription removeSelector: #isTrait!NanoTraitDescription removeSelector: #removeTraitUser:!NanoTraitTransformation removeSelector: #initialize!Smalltalk removeClassNamed: #NanoTraitCompositionException!NanoClassTrait removeSelector: #definitionST80!NanoClassTrait removeSelector: #theNonMetaClass!NanoTraitMethodState removeSelector: #methodHome!NanoTrait classSide removeSelector: #newTraitComposition!Trait class removeSelector: #install!NanoTraitDescription removeSelector: #+!NanoTraitAlias removeSelector: #aliases:!NanoTrait removeSelector: #hasClassTrait!NanoTraitExclusion removeSelector: #exclusions:!NanoTraitTransformation removeSelector: #includesTrait:!NanoTrait removeSelector: #category:!NanoTrait removeSelector: #name!NanoTraitDescription removeSelector: #classPool!NanoTraitDescription removeSelector: #printUsersOf:on:level:!NanoTrait removeSelector: #name:!NanoTraitDescription removeSelector: #traitComposition:!NanoTraitTransformation removeSelector: #removeTraitUser:!NanoTraitComposition removeSelector: #copyTraitExpression!NanoTrait removeSelector: #obsolete!NanoClassTrait removeSelector: #theMetaClass!Smalltalk removeClassNamed: #NanoTraitAlias!NanoTraitDescription removeSelector: #isBaseTrait!NanoTraitAlias removeSelector: #isLocalAliasSelector:!NanoTraitDescription classSide removeSelector: #conflict:!NanoTraitAlias classSide removeSelector: #assertValidAliasDefinition:!NanoTraitDescription removeSelector: #asTraitComposition!NanoTraitComposition removeSelector: #traitsDo:!NanoTraitMethodState removeSelector: #originalTraitMethod!NanoTrait removeSelector: #setName:andRegisterInCategory:environment:!NanoTraitDescription classSide removeSelector: #conflict:with:with:with:with:!NanoClassTrait removeSelector: #uses:!NanoTrait removeSelector: #definitionST80!NanoTraitDescription removeSelector: #users:!NanoTrait classSide removeSelector: #allTraitsDo:!Smalltalk removeClassNamed: #NanoClassTrait!NanoTraitExclusion removeSelector: #copyTraitExpression!NanoTraitDescription classSide removeSelector: #conflict:with:with:with:with:with:with:!NanoTraitDescription classSide removeSelector: #conflict:with:with:with:with:with:!NanoTrait classSide removeSelector: #initialize!NanoTraitDescription removeSelector: #addTraitUser:!NanoTrait classSide removeSelector: #newTraitNamed:uses:category:!NanoTraitTransformation removeSelector: #+!NanoTraitExclusion removeSelector: #printOn:!NanoTraitTransformation removeSelector: #isLocalAliasSelector:!NanoClassTrait removeSelector: #isMeta!NanoClassTrait removeSelector: #definition!NanoTraitComposition removeSelector: #printOn:!NanoTraitAlias removeSelector: #isAliasSelector:!NanoTraitDescription removeSelector: #users!NanoTraitDescription removeSelector: #printHierarchy!NanoTraitTransformation removeSelector: #asTraitTransform!NanoTraitComposition removeSelector: #allTraits!NanoTraitAlias removeSelector: #selectorsAndMethodsDo:!NanoTraitDescription classSide removeSelector: #conflict:with:with:!NanoTraitComposition removeSelector: #isTraitTransformation!NanoTraitDescription removeSelector: #trait!NanoTraitTransformation removeSelector: #selectorsAndMethodsDo:!NanoTrait classSide removeSelector: #named:uses:category:!NanoTraitTransformation removeSelector: #asTraitComposition!NanoClassTrait removeSelector: #updateTraitsFrom:!Trait class removeSelector: #initialize!NanoTraitDescription removeSelector: #copyTraitExpression!NanoTraitComposition removeSelector: #traitCompositionString!NanoTraitTransformation removeSelector: #isAliasSelector:!Smalltalk removeClassNamed: #NanoTraitMethodState!NanoTrait classSide removeSelector: #updateTraits:!NanoTraitExclusion removeSelector: #exclusions!NanoTrait removeSelector: #isValidTraitName:!NanoTrait removeSelector: #definition!NanoTraitMethodState removeSelector: #originalTraitMethod:!NanoTraitAlias classSide removeSelector: #with:aliases:!NanoTrait classSide removeSelector: #newTemplateIn:!NanoTraitTransformation removeSelector: #addTraitUser:!NanoTraitExclusion removeSelector: #@!NanoTrait removeSelector: #environment!NanoTraitComposition removeSelector: #@!NanoTrait removeSelector: #isBaseTrait!NanoTraitDescription removeSelector: #sharedPools!NanoTraitAlias removeSelector: #copyTraitExpression!NanoTrait removeSelector: #asTraitComposition!NanoTrait initialize!Trait initialize!