"Change Set:		9325Collections-ar.307Collections-ar.307:Merge class Generator from http://source.lukas-renggli.ch/continuations/Generator-ar.5.mczCollections-ar.304:Fix an age-old bug in Association>>hash which causes extreme slowdowns in compiling Unicode methods. Association>>hash does not need to hash the value; it's slow and useless.Collections-cmm.305:- Added Array class>>#empty and String class>>#empty to provide applications with canonicalized instances of these oft-used objects; since they are embedded as literals in the CompiledMethod.Collections-nice.306:Patch the ugly RunArray scanFrom: which did expect reading an invalid integer would answer 0.Note: i find it ugly for other reasons..."!Stream subclass: #Generator	instanceVariableNames: 'block next continue home'	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-Streams'!!Generator methodsFor: 'accessing' stamp: 'lr 4/26/2009 11:50'!contents	"Answer the contents of this generator. Do not call this method on infinite generators."	| stream |	stream := (Array new: 10) writeStream.	[ self atEnd ]		whileFalse: [ stream nextPut: self next ].	^ stream contents! !!Generator methodsFor: 'testing' stamp: 'ar 2/10/2010 21:00'!atEnd	"Answer whether the receiver can access any more objects."	^ continue isNil! !!Generator methodsFor: 'private' stamp: 'ar 2/10/2010 20:46'!fork	| result |	home := thisContext.	block reentrant value: self.	thisContext swapSender: continue.	result := next.	continue := next := home := nil.	^ result! !!Array class methodsFor: 'instance creation' stamp: 'cmm 2/11/2010 21:12'!empty	"A canonicalized empty Array instance."	^ #()! !!Generator methodsFor: 'accessing' stamp: 'ar 2/10/2010 20:45'!next	"Generate and answer the next object in the receiver."	^ self atEnd ifFalse: [		home swapSender: thisContext sender.		continue := thisContext swapSender: continue	]! !!Generator methodsFor: 'public' stamp: 'ar 2/10/2010 21:04'!reset	"Reset the generator, i.e., start it over"	continue ifNotNil:[continue unwindTo: home].	next := nil.	continue := thisContext.	[ self fork ] value! !!Generator methodsFor: 'accessing' stamp: 'lr 2/10/2010 09:16'!peek	"Answer the upcoming object of the receiver."	^ next! !!RunArray class methodsFor: 'instance creation' stamp: 'nice 2/13/2010 03:13'!scanFrom: strm	"Read the style section of a fileOut or sources file.  nextChunk has already been done.  We need to return a RunArray of TextAttributes of various kinds.  These are written by the implementors of writeScanOn:"	| rr vv aa this |	(strm peekFor: $( ) ifFalse: [^ nil].	rr := OrderedCollection new.	[strm skipSeparators.	 strm peekFor: $)] whileFalse: 		[rr add: (Number readFrom: strm)].	vv := OrderedCollection new.	"Value array"	aa := OrderedCollection new.	"Attributes list"	[(this := strm next) == nil] whileFalse: [		this == $, ifTrue: [vv add: aa asArray.  aa := OrderedCollection new].		this == $a ifTrue: [aa add: 			(TextAlignment new alignment: (Integer readFrom: strm ifFail: [0]))].		this == $f ifTrue: [aa add: 			(TextFontChange new fontNumber: (Integer readFrom: strm ifFail: [0]))].		this == $F ifTrue: [aa add: (TextFontReference toFont: 			(StrikeFont familyName: (strm upTo: $#) size: (Integer readFrom: strm ifFail: [0])))].		this == $b ifTrue: [aa add: (TextEmphasis bold)].		this == $i ifTrue: [aa add: (TextEmphasis italic)].		this == $u ifTrue: [aa add: (TextEmphasis underlined)].		this == $= ifTrue: [aa add: (TextEmphasis struckOut)].		this == $n ifTrue: [aa add: (TextEmphasis normal)].		this == $- ifTrue: [aa add: (TextKern kern: -1)].		this == $+ ifTrue: [aa add: (TextKern kern: 1)].		this == $c ifTrue: [aa add: (TextColor scanFrom: strm)]. "color"		this == $L ifTrue: [aa add: (TextLink scanFrom: strm)].	"L not look like 1"		this == $R ifTrue: [aa add: (TextURL scanFrom: strm)].				"R capitalized so it can follow a number"		this == $q ifTrue: [aa add: (TextSqkPageLink scanFrom: strm)].		this == $p ifTrue: [aa add: (TextSqkProjectLink scanFrom: strm)].		this == $P ifTrue: [aa add: (TextPrintIt scanFrom: strm)].		this == $d ifTrue: [aa add: (TextDoIt scanFrom: strm)].		"space, cr do nothing"		].	aa size > 0 ifTrue: [vv add: aa asArray].	^ self runs: rr asArray values: vv asArray"RunArray scanFrom: (ReadStream on: '(14 50 312)f1,f1b,f1LInteger +;i')"! !!Generator methodsFor: 'printing' stamp: 'lr 1/8/2009 16:21'!printOn: aStream	aStream nextPutAll: self class name; nextPutAll: ' on: '; print: block! !!Generator class methodsFor: 'instance-creation' stamp: 'lr 1/8/2009 15:54'!on: aBlock	^ self basicNew initializeOn: aBlock! !!Generator methodsFor: 'accessing' stamp: 'ar 2/10/2010 20:54'!close	"Close the receiving generator and unwind its ensure-blocks."	continue ifNotNil:[continue unwindTo: home].	continue := block := next := nil! !!Generator methodsFor: 'public' stamp: 'ar 2/10/2010 21:01'!value: anObject 	"Allows passing generators as arguments to methods expecting blocks.	A synonym for #yield: / #nextPut:."	^ self nextPut: anObject! !!Generator methodsFor: 'public' stamp: 'ar 2/10/2010 20:52'!yield: anObject 	"Yield the next value to the consumer of the generator.	A synonym for #nextPut:"	^ self nextPut: anObject! !!Generator methodsFor: 'accessing' stamp: 'lr 2/10/2010 09:16'!nextPut: anObject	"Add anObject into the generator. A synonym to #yield: and value:."	| previous |	previous := next.	next := anObject.	continue := thisContext swapSender: continue.	^ previous! !!Association methodsFor: 'comparing' stamp: 'ar 2/11/2010 23:50'!hash	"Hash is reimplemented because = is implemented.	The super implementation is used to avoid hashing the value	which can be extremely expensive."	^super hash! !!Generator methodsFor: 'initialization' stamp: 'lr 1/8/2009 16:18'!initializeOn: aBlock	block := aBlock.	self reset! !!String class methodsFor: 'instance creation' stamp: 'cmm 2/11/2010 21:11'!empty	"A canonicalized empty String instance."	^ ''! !!Generator methodsFor: 'accessing' stamp: 'lr 2/10/2010 09:16'!size	"A generator does not know its size."	^ self shouldNotImplement! !String removeSelector: #asDefaultDecodedString!