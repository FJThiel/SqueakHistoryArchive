"Change Set:		7512PreferenceBrowser-ar.35PreferenceBrowser-ar.35:Provide a compatibility method for creating preferences for clients which might use the older interface using view registries directly.PreferenceBrowser-ar.33:Moves PreferenceView/PreferenceViewRegistry into PreferenceBrowser since they are no longer central to the preference mechanism but rather a part of how the particular preference browser organizes access to preferences.PreferenceBrowser-ar.34:Include a halo type in view registry for halo themes."!Object subclass: #PreferenceView	instanceVariableNames: 'preference'	classVariableNames: ''	poolDictionaries: ''	category: 'PreferenceBrowser'!Object subclass: #PreferenceViewRegistry	instanceVariableNames: 'registeredClasses viewOrder'	classVariableNames: ''	poolDictionaries: ''	category: 'PreferenceBrowser'!!Preference methodsFor: '*PreferenceBrowser' stamp: 'hpt 9/26/2004 15:42'!viewClassForPanel: aPreferencePanel	^self viewRegistry viewClassFor: aPreferencePanel! !!PreferenceViewRegistry methodsFor: 'view registry' stamp: 'hpt 9/26/2004 15:26'!unregister: aProviderClass	self registeredClasses remove: aProviderClass ifAbsent: []! !!PreferenceView methodsFor: 'user interface' stamp: 'hpt 9/26/2004 16:14'!tearOffButton	"Hand the user a button the can control this"	| aButton |	aButton := self representativeButtonWithColor: self preference defaultBackgroundColor inPanel: nil.	aButton borderWidth: 1; borderColor:  Color black; useRoundedCorners.	aButton openInHand! !!PreferenceView methodsFor: 'accessing' stamp: 'hpt 9/24/2004 22:25'!preference	^preference! !!Preference methodsFor: '*PreferenceBrowser' stamp: 'hpt 9/26/2004 16:58'!representativeButtonWithColor: aColor inPanel: aPanel	| view |	view := self viewForPanel: aPanel.	^view ifNotNil: [view representativeButtonWithColor: aColor inPanel: aPanel]! !!PreferenceViewRegistry class methodsFor: 'accessing' stamp: 'ar 8/9/2009 16:02'!forType: typeName	"Answer the preference registry for the given type name"	^typeName caseOf:{		[#Boolean]	->	[self ofBooleanPreferences].		[#Color]	->	[self ofColorPreferences].		[#Font]		->	[self ofFontPreferences].		[#Number]	->	[self ofNumericPreferences].		[#String]	->	[self ofTextPreferences].		[#Halo]		->	[self ofHaloThemePreferences].		[#WindowColor]	-> [self registryOf: #windowColorPreferences]	} otherwise:[nil]! !!PreferenceViewRegistry methodsFor: 'initialize-release' stamp: 'hpt 9/26/2004 16:22'!initialize	viewOrder := 1.! !!Preference methodsFor: '*PreferenceBrowser' stamp: 'hpt 9/26/2004 16:58'!viewForPanel: aPreferencePanel	| viewClass |	viewClass := self viewClassForPanel: aPreferencePanel.	^viewClass ifNotNil: [viewClass preference: self]! !!PreferenceView class methodsFor: 'instance creation' stamp: 'hpt 9/24/2004 22:25'!preference: aPreference	^self new		initializeWithPreference: aPreference;		yourself! !!Preferences class methodsFor: '*PreferenceBrowser' stamp: 'ar 8/9/2009 16:12'!addPreference: aName categories: categoryList default: aValue balloonHelp: helpString projectLocal: localBoolean changeInformee: informeeSymbol changeSelector: aChangeSelector viewRegistry: aViewRegistry	"For compatibility with the old set of protocols"	^self addPreference: aName categories: categoryList default: aValue balloonHelp: helpString projectLocal: localBoolean changeInformee: informeeSymbol changeSelector: aChangeSelector type: (PreferenceViewRegistry typeOfRegistry: aViewRegistry).! !!PreferenceViewRegistry class methodsFor: 'instance creation' stamp: 'hpt 9/26/2004 16:24'!ofFontPreferences	^(self registryOf: #fontPreferences)		viewOrder: 4;		yourself.! !!PreferenceView methodsFor: 'user interface' stamp: 'hpt 9/24/2004 22:56'!representativeButtonWithColor: aColor inPanel: aPreferencesPanel	self subclassResponsibility ! !!PreferenceViewRegistry class methodsFor: 'instance creation' stamp: 'hpt 9/26/2004 15:28'!registries	^registries ifNil: [registries := Dictionary new]! !!PreferenceViewRegistry methodsFor: 'view order' stamp: 'hpt 9/26/2004 16:22'!viewOrder: aNumber	viewOrder := aNumber! !!PreferenceViewRegistry methodsFor: 'view order' stamp: 'hpt 9/26/2004 16:22'!viewOrder	"answer the order in which the registered views should appear relative to the other views"	^viewOrder! !!PreferenceViewRegistry class methodsFor: 'instance creation' stamp: 'hpt 9/26/2004 16:23'!ofBooleanPreferences	^(self registryOf: #booleanPreferences)		viewOrder: 1; 		yourself.! !!PreferenceViewRegistry class methodsFor: 'instance creation' stamp: 'hpt 9/26/2004 16:23'!ofTextPreferences	^(self registryOf: #textPreferences)		viewOrder: 3;		yourself.! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'ar 8/9/2009 15:20'!preferencesInCategory: aCategory	^(preferences preferenceObjectsInCategory: aCategory) asSortedCollection:		[:pref1 :pref2 | 				pref1 viewRegistry viewOrder  <pref2 viewRegistry viewOrder  or:						[pref1 viewRegistry viewOrder  =pref2 viewRegistry viewOrder 							 &(pref1 name  <pref2 name)]]! !!PreferenceViewRegistry class methodsFor: 'instance creation' stamp: 'hpt 12/9/2004 22:16'!ofNumericPreferences	^(self registryOf: #numericPreferences)		viewOrder: 3;		yourself.! !!PreferenceViewRegistry methodsFor: 'view registry' stamp: 'hpt 9/26/2004 15:26'!registeredClasses	^registeredClasses ifNil: [registeredClasses := OrderedCollection new]! !!PreferenceViewRegistry class methodsFor: 'instance creation' stamp: 'hpt 9/26/2004 15:33'!registryOf: aSymbol	^self registries at: aSymbol ifAbsentPut: [self new]! !!PreferenceViewRegistry class methodsFor: 'accessing' stamp: 'ar 8/9/2009 16:02'!typeOfRegistry: aRegistry	"Answer the type name for a particular view registry"	^aRegistry caseOf:{		[self ofBooleanPreferences]	-> [#Boolean].		[self ofColorPreferences]		-> [#Color].		[self ofFontPreferences]		-> [#Font].		[self ofNumericPreferences]	-> [#Number].		[self ofTextPreferences]		-> [#String].		[self ofHaloThemePreferences]	-> [#Halo].		[self registryOf: #windowColorPreferences]	-> [#WindowColor].	} otherwise:[nil]! !!Preference methodsFor: '*PreferenceBrowser' stamp: 'ar 8/9/2009 15:21'!viewRegistry	^PreferenceViewRegistry forType: self type! !!PreferenceViewRegistry class methodsFor: 'instance creation' stamp: 'hpt 9/26/2004 16:23'!ofHaloThemePreferences	^(self registryOf: #haloThemePreferences)		viewOrder: 2;		yourself.! !!PreferenceViewRegistry methodsFor: 'view registry' stamp: 'hpt 9/26/2004 15:26'!register: aProviderClass	(self registeredClasses includes: aProviderClass) 		ifFalse: [self registeredClasses add: aProviderClass].! !!PreferenceViewRegistry class methodsFor: 'instance creation' stamp: 'hpt 9/26/2004 16:24'!ofColorPreferences	^(self registryOf: #colorPreferences)		viewOrder: 5;		yourself.! !!PreferenceViewRegistry methodsFor: 'view registry' stamp: 'hpt 9/26/2004 15:26'!viewClassFor: aPreferencePanel	^self registeredClasses 		detect: [:aViewClass| aViewClass handlesPanel: aPreferencePanel]		ifNone: [].! !!PreferenceView methodsFor: 'initialization' stamp: 'hpt 9/24/2004 22:25'!initializeWithPreference: aPreference	preference := aPreference! !!PreferenceView class methodsFor: 'view registry' stamp: 'hpt 9/26/2004 16:09'!handlesPanel: aPreferencePanel	self subclassResponsibility ! !