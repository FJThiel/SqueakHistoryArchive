"Change Set:		8273Compiler-nice.99Compiler-nice.99:rename scanLitByte -> scanLitByteVec as suggested by Eliot"!!Scanner methodsFor: 'expression types' stamp: 'PeterHugossonMiller 9/3/2009 11:10'!scanLitByteVec	| stream |	stream := (ByteArray new: 16) writeStream.	[ tokenType = #rightBracket or: [ tokenType = #doIt ] ] whileFalse: [		tokenType = #word			ifTrue: [ self scanLitWord ].		(token isInteger and: [ token between: 0 and: 255 ])			ifFalse: [ ^ self offEnd: '8-bit integer or right bracket expected' ].		stream nextPut: token.		self scanToken ].	token := stream contents! !!Scanner methodsFor: 'multi-character scans' stamp: 'nice 11/27/2009 23:13'!xLitQuote	"Symbols and vectors: #(1 (4 5) 2 3) #ifTrue:ifFalse: #'abc'."	| start |	start := mark.	self step. "litQuote"	self scanToken.	tokenType = #leftParenthesis		ifTrue: [self scanToken; scanLitVec.			mark := start + 1.			tokenType == #doIt				ifTrue: [self offEnd: 'Unmatched parenthesis']]		ifFalse: [tokenType = #leftBracket				ifTrue: [self scanToken; scanLitByteVec.					mark := start + 1.					tokenType == #doIt						ifTrue: [self offEnd: 'Unmatched bracket']]				ifFalse: [(#(#word #keyword #colon ) includes: tokenType)						ifTrue: [self scanLitWord]						ifFalse: [tokenType == #literal								ifTrue: [token isSymbol										ifTrue: ["##word"											token := token											"May want to move toward ANSI											here "]]								ifFalse: [tokenType == #string										ifTrue: [token := token asSymbol]]]]].	mark := start.	tokenType := #literal	"#(Pen)	#Pen	#'Pen'	##Pen	###Pen	"! !Scanner removeSelector: #scanLitByte!