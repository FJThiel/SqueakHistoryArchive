"Change Set:		7799Compiler-tfel.84Compiler-tfel.84:MethodContext>>who is deprecated, and here we only need the methodClass anyway, so replace thatCompiler-nice.82:Part of fix for http://bugs.squeak.org/view.php?id=6797Use #literalEqual: for testing equality of two literals.Compiler-nice.83:Add the test for bug http://bugs.squeak.org/view.php?id=6797self deny: (0.5s1 scale = 0.50s2 scale)."!TestCase subclass: #CompilerTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Compiler-Tests'!!LiteralDictionary methodsFor: 'testing' stamp: 'nice 8/28/2008 19:26'!literalEquality: x and: y	"Check if two literals should be considered equal and reduced to a single literal.	Delegate this task to the literal themselves, they are aware of their peculiarities and know how to behave."		^ x literalEqual: y! !!CompilerTest methodsFor: 'literals' stamp: 'nice 12/3/2007 22:20'!testScaledDecimalLiterals	"Equal ScaledDecimal with different scales should use different slots	This is related to http://bugs.squeak.org/view.php?id=6797"		"This correctly works when evaluated separately"	self deny: (Compiler evaluate: '0.5s1') scale = (Compiler evaluate: '0.5s2') scale.		"But not when evaluated together if literal reduction is too agressive"	self deny: (Compiler evaluate: '0.5s1 scale =  0.5s2 scale').! !!Decompiler methodsFor: 'public access' stamp: 'tfel 9/15/2009 23:39'!decompileBlock: aBlock 	"Decompile aBlock, returning the result as a BlockNode.  	Show temp names from source if available."	"Decompiler new decompileBlock: [3 + 4]"	| startpc end homeClass blockNode methodNode home source |	(home := aBlock home) ifNil: [^ nil].	method := home method.	(homeClass := home methodClass) == #unknown ifTrue: [^ nil].	constructor := self constructorForMethod: aBlock method.	method fileIndex ~~ 0 ifTrue: "got any source code?"		[source := [method getSourceFromFile]						on: Error						do: [:ex | ^ nil].		 methodNode := [homeClass compilerClass new								parse: source								in: homeClass								notifying: nil]							on: (Smalltalk classNamed: 'SyntaxErrorNotification')							do: [:ex | ^ nil].		 self withTempNames: methodNode schematicTempNamesString].	self initSymbols: homeClass.	startpc := aBlock startpc.	end := aBlock isClosure				ifTrue: [(method at: startpc - 2) * 256					  + (method at: startpc - 1) + startpc - 1]				ifFalse:					[(method at: startpc - 2) \\ 16 - 4 * 256					+ (method at: startpc - 1) + startpc - 1].	stack := OrderedCollection new: method frameSize.	caseExits := OrderedCollection new.	statements := OrderedCollection new: 20.	super		method: method		pc: (aBlock isClosure ifTrue: [startpc - 4] ifFalse: [startpc - 5]).	aBlock isClosure ifTrue:		[numLocalTemps := #decompileBlock: "Get pushClosureCopy... to hack fake temps for copied values"].	blockNode := self blockTo: end.	stack isEmpty ifFalse: [self error: 'stack not empty'].	^blockNode statements first! !LiteralDictionary removeSelector: #arrayEquality:and:!