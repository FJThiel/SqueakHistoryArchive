"Change Set:		8432Graphics-ul.92Graphics-ul.92:- replace sends of #ifNotNilDo: to #ifNotNil:, #ifNil:ifNotNilDo: to #ifNil:ifNotNil:, #ifNotNilDo:ifNil: to #ifNotNil:ifNil:Graphics-ar.91:Add double-dispatched point transformation for easier extensibility and compatibility with existing transforms."!!TextStyle class methodsFor: 'user interface' stamp: 'ul 12/12/2009 14:12'!fontMenuForStyle: styleName target: target selector: selector highlight: currentFont 	"Offer a font menu for the given style. If one is selected, pass 	that font to target with a  	call to selector. The fonts will be displayed in that font."	| aMenu displayFont |	aMenu := MenuMorph entitled: styleName.	(TextStyle named: styleName)		ifNotNil: [:s | s isTTCStyle				ifTrue: [aMenu						add: 'New Size'						target: self						selector: #chooseTTCFontSize:						argument: {styleName. target. selector}]].	(self pointSizesFor: styleName)		do: [:pointSize | 			| font subMenu | 			font := (self named: styleName)						fontOfPointSize: pointSize.			subMenu := self						emphasisMenuForFont: font						target: target						selector: selector						highlight: (currentFont								ifNotNil: [:cf | (cf familyName = styleName											and: [cf pointSize = font pointSize])										ifTrue: [currentFont emphasis]]).			subMenu				ifNil: [aMenu						add: pointSize asString , ' Point'						target: target						selector: selector						argument: font]				ifNotNil: [aMenu add: pointSize asString , ' Point' subMenu: subMenu].			displayFont := font.			(font isSymbolFont or:[(font hasDistinctGlyphsForAll: pointSize asString , ' Point') not])				ifTrue:[					"don't use a symbol font to display its own name!!!!"					displayFont := self default fontOfPointSize: pointSize].			aMenu lastItem font: displayFont.			currentFont				ifNotNil: [:cf | (cf familyName = styleName							and: [cf pointSize = font pointSize])						ifTrue: [aMenu lastItem color: Color blue darker]]].	^ aMenu! !!MorphicTransform methodsFor: 'transformations' stamp: 'ar 12/10/2009 00:18'!transformPoint: aPoint	"Point transform double dispatch"	^self transform: aPoint! !!DisplayTransform methodsFor: 'transforming points' stamp: 'ar 12/10/2009 00:18'!transformPoint: aPoint	"Point transform double dispatch"	^self localPointToGlobal: aPoint! !!Point methodsFor: 'transforming' stamp: 'ar 12/10/2009 00:18'!transformedBy: aTransform	"Point transform double dispatch"	^aTransform transformPoint: self! !!TextStyle class methodsFor: 'mime file in/out' stamp: 'ul 12/12/2009 14:05'!replaceFontsIn: oldFontArray with: newStyle	"	TextStyle replaceFontsIn: (TextStyle looseFontsFromFamily: #Accuny) with: (TextStyle named: #Accuny)	"	"Try to find corresponding fonts in newStyle and substitute them for the fonts in oldFontArray"	newStyle fontArray do: [ :newFont | newFont releaseCachedState ].	oldFontArray do: [ :oldFont | | newFont |		oldFont reset.		newFont := (newStyle fontOfPointSize: oldFont pointSize) emphasis: oldFont emphasis.		oldFont becomeForward: newFont ].	StringMorph allSubInstancesDo: [ :s | s layoutChanged ].	TextMorph allSubInstancesDo: [ :s | s layoutChanged ].	SystemWindow allInstancesDo: [ :w | [ w update: #relabel ] on: Error do: [ :ex | ] ].	World ifNotNil: [ :w | w changed ].! !