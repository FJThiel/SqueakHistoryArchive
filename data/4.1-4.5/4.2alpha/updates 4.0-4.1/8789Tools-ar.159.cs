"Change Set:		8789Tools-ar.159Tools-ar.159:Make Etoys unloadable: Remove support for isolatedCodePane and installTilesAsSelection since both require Etoys to be present."!!ChangeSorter methodsFor: 'message list' stamp: 'ar 1/3/2010 18:54'!shiftedMessageMenu: aMenu	"Arm the menu so that it holds items appropriate to the message-list while the shift key is down.  Answer the menu."	^ aMenu addList: #(		-		('toggle diffing (D)'					toggleDiffing)		('implementors of sent messages'		browseAllMessages)		('change category...'				changeCategory)			-		('sample instance'					makeSampleInstance)		('inspect instances'					inspectInstances)		('inspect subinstances'				inspectSubInstances)		-		('change sets with this method'		findMethodInChangeSets)		('revert to previous version'			revertToPreviousVersion)		('revert & remove from changes'	revertAndForget)		-		('more...'							unshiftedYellowButtonActivity))! !!CodeHolder methodsFor: 'diffs' stamp: 'ar 1/3/2010 16:12'!installTextualCodingPane	"Install text into the code pane"	| aWindow codePane aPane boundsToUse |	(aWindow := self containingWindow) ifNil: [self error: 'where''s that window?'].	codePane := aWindow findDeepSubmorphThat:   		[:m | ((m isKindOf: PluggableTextMorph) and: [m getTextSelector == #contents])]			ifAbsent: [self error: 'no code pane'].	aPane := self buildMorphicCodePaneWith: nil.	boundsToUse := (codePane bounds origin- (1@1)) corner: (codePane owner bounds corner " (1@1").	aWindow replacePane: codePane with: aPane.	aPane vResizing: #spaceFill; hResizing: #spaceFill; borderWidth: 0.	aPane bounds: boundsToUse.	aPane owner clipSubmorphs: false.	self contentsChanged! !!MethodHolder methodsFor: 'menu' stamp: 'ar 1/3/2010 18:54'!doItReceiver	"If there is an instance associated with me, answer it, for true mapping of self.  If not, then do what other code-bearing tools do, viz. give access to the class vars."	^ self selectedClass ifNil: [FakeClassPool new]! !!Browser methodsFor: 'message functions' stamp: 'ar 1/3/2010 16:25'!messageListMenu: aMenu shifted: shifted 	"Answer the message-list menu"	(self menuHook: aMenu named: #messageListMenu shifted: shifted) ifTrue:[^aMenu].	shifted ifTrue: [^ self shiftedMessageListMenu: aMenu].	aMenu addList: #(			('what to show...'			offerWhatToShowMenu)			('toggle break on entry'		toggleBreakOnEntry)			-			('browse full (b)' 			browseMethodFull)			('browse hierarchy (h)'			classHierarchy)			('browse method (O)'			openSingleMessageBrowser)			('browse protocol (p)'			browseFullProtocol)			-			('fileOut'				fileOutMessage)			('printOut'				printOutMessage)			-			('senders of... (n)'			browseSendersOfMessages)			('implementors of... (m)'		browseMessages)			('inheritance (i)'			methodHierarchy)			('versions (v)'				browseVersions)			-			('inst var refs...'			browseInstVarRefs)			('inst var defs...'			browseInstVarDefs)			('class var refs...'			browseClassVarRefs)			('class variables'			browseClassVariables)			('class refs (N)'			browseClassRefs)			-			('remove method (x)'			removeMessage)			-			('more...'				shiftedYellowButtonActivity)).	^ aMenu! !!Browser methodsFor: 'message functions' stamp: 'ar 1/3/2010 18:53'!shiftedMessageListMenu: aMenu	"Fill aMenu with the items appropriate when the shift key is held down"	Smalltalk isMorphic ifTrue: [aMenu addStayUpItem].	aMenu addList: #(		('toggle diffing (D)'						toggleDiffing)		('implementors of sent messages'			browseAllMessages)		-		('local senders of...'						browseLocalSendersOfMessages)		('local implementors of...'				browseLocalImplementors)		-		('spawn sub-protocol'					spawnProtocol)		('spawn full protocol'					spawnFullProtocol)		-		('sample instance'						makeSampleInstance)		('inspect instances'						inspectInstances)		('inspect subinstances'					inspectSubInstances)).	self addExtraShiftedItemsTo: aMenu.	aMenu addList: #(		-		('change category...'					changeCategory)).	self canShowMultipleMessageCategories ifTrue: [aMenu addList:		 #(('show category (C)'						showHomeCategory))].	aMenu addList: #(		-		('change sets with this method'			findMethodInChangeSets)		('revert to previous version'				revertToPreviousVersion)		('remove from current change set'		removeFromCurrentChanges)		('revert & remove from changes'		revertAndForget)		('add to current change set'				adoptMessageInCurrentChangeset)		('copy up or copy down...'				copyUpOrCopyDown)		-		('more...' 								unshiftedYellowButtonActivity)).	^ aMenu! !!CodeHolder class methodsFor: 'controls' stamp: 'ar 1/4/2010 00:27'!defaultContentsSymbolQuints	"Default list of quintuplets representing information on the alternative views available in the code pane		first element:	the contentsSymbol used		second element:	the selector to call when this item is chosen.		third element:	the selector to call to obtain the wording of the menu item.		fourth element:	the wording to represent this view		fifth element:	balloon help	A hypen indicates a need for a seperator line in a menu of such choices"	^ {		{#source			. #togglePlainSource 			. #showingPlainSourceString 			. 'source'			. 'the textual source code as written' translated} .		{#documentation			. #toggleShowDocumentation			. #showingDocumentationString			. 'documentation'			. 'the first comment in the method' translated} .		#- .		{#prettyPrint			. #togglePrettyPrint			. #prettyPrintString			. 'prettyPrint'			. 'the method source presented in a standard text format' translated} .		#- .		{#showDiffs			. #toggleRegularDiffing			. #showingRegularDiffsString			. 'showDiffs'			. 'the textual source diffed from its prior version' translated} .		#- .		{#decompile			. #toggleDecompile			. #showingDecompileString			. 'decompile'			. 'source code decompiled from byteCodes' translated} .		{#byteCodes			. #toggleShowingByteCodes			. #showingByteCodesString			. 'byteCodes'				. 'the bytecodes that comprise the compiled method' translated} .	}! !StringHolder removeSelector: #makeIsolatedCodePane!MethodHolder class removeSelector: #isolatedCodePaneForClass:selector:!MethodHolder class removeSelector: #makeIsolatedCodePaneForClass:selector:!ComponentLayout removeSelector: #inspectModelInMorphic!