"Change Set:		9710System-cmm.294System-cmm.294:- Integrated new ListChooser from Michael Davies.- More improved guads of authorInitialsPerSe.System-MAD.293:Add #disabledColor to the ColorTheme (to match okColor and cancelColor)System-ul.293:- added compatibility method #keysAndValuesDo: to SmalltalkImage. (used by Lint)- DataStream's TypeMap changed to a  WeakIdentityKeyDictionary, because it has all variable word classes as keys, which may be unloaded from the system (for example MCMockClassG is unloaded during the tests). If that happens, the class' hash will change making the Dictionary invalid.- don't add obsolete classes to TypeMap during DataStream >> #initialize"!!SmalltalkImage methodsFor: 'dictionary access' stamp: 'ul 3/15/2010 06:19'!keysAndValuesDo: aBlock	"Obsoleted."	self deprecated: 'Use Smalltalk globals'.	^globals keysAndValuesDo: aBlock! !!Utilities class methodsFor: 'identification' stamp: 'cmm 3/9/2010 15:19'!changeStampPerSe	"Answer a string to be pasted into source code to mark who changed it and when."	^String streamContents:		[ : stream | 		self authorInitialsPerSe isEmptyOrNil			ifTrue: [ 'Â·' ]			ifFalse: [ self authorInitialsPerSe ].		stream			 space ;			 nextPutAll: Date today mmddyyyy ;			 space.		(String streamContents:			[ : s | 			Time now				print24: true				on: s ])			copyFrom: 1			to: 5 ]! !!ChangeSet methodsFor: 'fileIn/Out' stamp: 'cmm 3/9/2010 10:17'!checkForAnyAlienAuthorship	"Check to see if there are any versions of any methods in the receiver that have author initials other than that of the current author, and open a browser on all found"	| aList initials |	(initials := Utilities authorInitials) isEmptyOrNil ifTrue: [ ^self inform: 'No author initials set in this image' ].	(aList := self methodsWithAnyInitialsOtherThan: initials) size > 0		ifTrue:			[ self systemNavigation				browseMessageList: aList				name: 'methods in "' , self name , '" with any authoring stamps not starting with "' , initials , '"' ]		ifFalse: [ ^self inform: 'All versions of all methods in "' , self name , '"have authoring stamps which start with "' , initials , '"' ]! !!ColorTheme methodsFor: 'theme' stamp: 'MAD 3/14/2010 14:58'!disabledColor	^ Color lightGray! !!DataStream class methodsFor: 'as yet unclassified' stamp: 'ul 3/15/2010 06:17'!initialize	"TypeMap maps Smalltalk classes to type ID numbers which identify the data stream primitive formats.  nextPut: writes these IDs to the data stream.  NOTE: Changing these type ID numbers will invalidate all extant data stream files.  Adding new ones is OK.  	Classes named here have special formats in the file.  If such a class has a subclass, it will use type 9 and write correctly.  It will just be slow.  (Later write the class name in the special format, then subclasses can use the type also.)	 See nextPut:, next, typeIDFor:, & ReferenceStream>>isAReferenceType:"	"DataStream initialize"	| refTypes t |	refTypes := OrderedCollection new.	t := TypeMap := WeakIdentityKeyDictionary new. "It has to be weak, because some classes may go away, leaving obsolete versions in this dictionary which may make it corrupt."	t at: UndefinedObject put: 1.   refTypes add: 0.	t at: True put: 2.   refTypes add: 0.	t at: False put: 3.   refTypes add: 0.	t at: SmallInteger put: 4.	 refTypes add: 0.	t at: ByteString put: 5.   refTypes add: 1.	t at: ByteSymbol put: 6.   refTypes add: 1.	t at: ByteArray put: 7.   refTypes add: 1.	t at: Array put: 8.   refTypes add: 1.	"(type ID 9 is for arbitrary instances of any class, cf. typeIDFor:)"		refTypes add: 1.	"(type ID 10 is for references, cf. ReferenceStream>>tryToPutReference:)"		refTypes add: 0.	t at: Bitmap put: 11.   refTypes add: 1.	t at: Metaclass put: 12.   refTypes add: 0.	"Type ID 13 is used for HyperSqueak User classes that must be reconstructed."		refTypes add: 1.	t at: Float put: 14.  refTypes add: 1.	t at: Rectangle put: 15.  refTypes add: 1.	"Allow compact Rects."	"type ID 16 is an instance with short header.  See beginInstance:size:"		refTypes add: 1.self flag: #ByteArray.	t at: ByteString put: 17.   refTypes add: 1.	"new String format, 1 or 4 bytes of length"	t at: WordArray put: 18.  refTypes add: 1.	"bitmap-like"	t at: WordArrayForSegment put: 19.  refTypes add: 1.		"bitmap-like"	t at: SoundBuffer put: 20.  refTypes add: 1.	"And all other word arrays, both 		16-bit and 32-bit.  See methods in ArrayedCollection.  Overridden in SoundBuffer."	t at: CompiledMethod put: 21.  refTypes add: 1.	"special creation method"	"t at:  put: 22.  refTypes add: 0."	ReferenceStream refTypes: refTypes.		"save it"	"For all classes that are like WordArrays, store them the way ColorArray is stored.  As bits, and able to change endianness."	Smalltalk do: [:cls |		(cls isInMemory and: [			cls isBehavior and: [			cls isObsolete not and: [			cls isPointers not and: [			cls isVariable and: [			cls isWords and: [			(t includesKey: cls) not ] ] ] ] ] ]) 				ifTrue: [ t at: cls put: 20 ] ]! !!ChangeSet methodsFor: 'fileIn/Out' stamp: 'cmm 3/9/2010 10:16'!checkForAlienAuthorship	"Check to see if there are any methods in the receiver that have author initials other than that of the current author, and open a browser on all found"	| aList initials |	(initials := Utilities authorInitials) isEmptyOrNil ifTrue: [ ^self inform: 'No author initials set in this image' ].	(aList := self methodsWithInitialsOtherThan: initials) size > 0		ifTrue:			[ self systemNavigation				browseMessageList: aList				name: 'methods in "' , self name , '" whose authoring stamps do not start with "' , initials , '"' ]		ifFalse: [ ^self inform: 'All methods in "' , self name , '"have authoring stamps which start with "' , initials , '"' ]! !DataStream initialize!