"Change Set:		9797Collections-nice.348Collections-nice.348:1) Fix a few _ assignments2) implement #errorCantGoBack http://bugs.squeak.org/view.php?id=7483Collections-ar.347:Merging Collections-ul.345:- implement #backChunk with #back instead of #oldBack"!Set subclass: #PluggableSet	instanceVariableNames: 'hashBlock equalBlock'	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-Unordered'!!RFC2047MimeConverter methodsFor: 'conversion' stamp: 'bf 11/27/1998 17:04'!mimeDecode	"Do conversion reading from mimeStream writing to dataStream. See String>>decodeMimeHeader"	| c |	[mimeStream atEnd] whileFalse: [		c := mimeStream next.		c = $=			ifTrue: [c := Character value: mimeStream next digitValue * 16				+ mimeStream next digitValue]			ifFalse: [c = $_ ifTrue: [c := $ ]].		dataStream nextPut: c].	^ dataStream! !!PositionableStream methodsFor: 'fileIn/Out' stamp: 'ul 3/22/2010 08:16'!backChunk	"Answer the contents of the receiver back to the previous terminator character.  Doubled terminators indicate an embedded terminator character."	| output character |	output := WriteStream on: (String new: 1000).	self back. "oldBack compatibility"	[ (character := self back) == nil ] whileFalse: [		character == $!! ifTrue: [			self back == $!! ifFalse: [ 				self skip: 2. "oldBack compatibility"				^output contents reversed ] ].		output nextPut: character].	self skip: 1. "oldBack compatibility"	^output contents reversed! !!IntegerArray methodsFor: 'accessing' stamp: 'dtl 3/8/2009 15:09'!atAllPut: anInteger	| word |	anInteger < 0		ifTrue:[anInteger < -16r80000000 ifTrue: [self error: anInteger asString , ' out of range'].				"word := 16r100000000 + anInteger"				word := (anInteger + 1) negated bitInvert32]		ifFalse:[anInteger > 16r7FFFFFFF ifTrue: [self error: anInteger asString , ' out of range'].				word := anInteger].	self primFill: word.! !!PositionableStream methodsFor: 'accessing' stamp: 'wiz 5/10/2008 20:19'!errorCantGoBack	self error: ' CantGoBack '! !!IntegerArray methodsFor: 'accessing' stamp: 'dtl 3/8/2009 11:52'!at: index put: anInteger	| word |	<primitive: 166>	anInteger < 0		ifTrue:[anInteger < -16r80000000 ifTrue: [self error: anInteger asString , ' out of range'].				"word := 16r100000000 + anInteger"				word := (anInteger + 1) negated bitInvert32]		ifFalse:[anInteger > 16r7FFFFFFF ifTrue: [self error: anInteger asString , ' out of range'].				word := anInteger].	self  basicAt: index put: word.	^anInteger! !