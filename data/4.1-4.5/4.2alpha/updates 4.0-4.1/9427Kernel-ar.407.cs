"Change Set:		9427Kernel-ar.407Kernel-ar.407:Merging Kernel-ar.404 and Kernel-ul.406"!!BlockClosure methodsFor: 'evaluating' stamp: 'ul 2/21/2010 17:29'!cull: firstArg cull: secondArg	"Activate the receiver, with two or less arguments."		numArgs >= 2 ifTrue: [ ^self value: firstArg value: secondArg ].		numArgs = 1 ifTrue: [ ^self value: firstArg ].	^self value! !!Integer class methodsFor: 'instance creation' stamp: 'nice 2/22/2010 23:12'!readFrom: aStringOrStream ifFail: aBlock	"Answer an instance of one of the concrete subclasses if Integer. 	Initial plus or minus sign accepted.	Imbedded radix specifiers not allowed;  use Number class readFrom: for that.	Execute aBlock if there are no digits."	^(ExtendedNumberParser on: aStringOrStream) nextIntegerBase: 10 ifFail: aBlock! !!BlockClosure methodsFor: 'evaluating' stamp: 'ul 2/21/2010 17:29'!cull: firstArg cull: secondArg cull: thirdArg cull: fourthArg	"Activate the receiver, with four or less arguments."		numArgs >= 3 ifTrue: [		numArgs >= 4 ifTrue: [			^self value: firstArg value: secondArg value: thirdArg value: fourthArg ].		^self value: firstArg value: secondArg value: thirdArg ].	numArgs = 2 ifTrue: [ ^self value: firstArg value: secondArg ].		numArgs = 1 ifTrue: [ ^self value: firstArg ].	^self value! !!BlockClosure methodsFor: 'evaluating' stamp: 'ul 2/21/2010 17:29'!cull: firstArg cull: secondArg cull: thirdArg	"Activate the receiver, with three or less arguments."		numArgs >= 2 ifTrue: [ 		numArgs >= 3 ifTrue: [ ^self value: firstArg value: secondArg value: thirdArg ].		^self value: firstArg value: secondArg ].	numArgs = 1 ifTrue: [ ^self value: firstArg ].	^self value! !!Number class methodsFor: 'instance creation' stamp: 'nice 2/22/2010 21:43'!readFrom: stringOrStream 	"Answer a number as described on aStream.  The number may	be any accepted Smalltalk literal Number format.	It can include a leading radix specification, as in 16rFADE.	It can as well be NaN, Infinity or -Infinity for conveniency.	If stringOrStream does not start with a valid number description, fail."		^(ExtendedNumberParser on: stringOrStream) nextNumber! !!Number class methodsFor: 'instance creation' stamp: 'nice 2/22/2010 22:40'!readFrom: stringOrStream ifFail: aBlock	"Answer a number as described on aStream.  The number may	be any accepted Smalltalk literal Number format.	It can include a leading radix specification, as in 16rFADE.	It can as well be NaN, Infinity or -Infinity for conveniency.	If input does not represent a valid number, then execute fail block	and leave the stream positioned before offending character"		^(ExtendedNumberParser on: stringOrStream) failBlock: aBlock; nextNumber! !!Integer class methodsFor: 'instance creation' stamp: 'nice 2/22/2010 23:12'!readFrom: aStringOrStream base: base 	"Answer an instance of one of the concrete subclasses if Integer. 	Initial plus or minus sign accepted, and bases > 10 use letters A-Z.	Imbedded radix specifiers not allowed;  use Number class readFrom: for that.	Raise an Error if there are no digits."	^(ExtendedNumberParser on: aStringOrStream) nextIntegerBase: base! !!BlockClosure methodsFor: 'evaluating' stamp: 'ul 2/21/2010 17:06'!cull: firstArg	"Activate the receiver, with one or zero arguments."		numArgs >= 1 ifTrue: [ ^self value: firstArg ].	^self value! !Number class removeSelector: #readExactlyFrom:!