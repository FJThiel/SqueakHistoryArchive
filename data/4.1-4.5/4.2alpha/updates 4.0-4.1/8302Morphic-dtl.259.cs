"Change Set:		8302Morphic-dtl.259Morphic-dtl.259:Better progress display handling and rudimentary MVC implementations for  Project>>loadFromServer:  Project>>storeOnServerWithProgressInfo:  Project>>storeOnServerWithProgressInfoOn:Morphic-ar.256:Some help menu options:- Online resources- Keyboard shortcutsMorphic-ar.257:More complete menus. Should be close to using it without the world menu now.Morphic-dtl.258:Remove all remaining explicit MVC and Morphic dependencies (hopefully) from class Project."!!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'ar 11/28/2009 11:13'!startMessageTally	(self confirm: 'MessageTally will start now,and stop when the cursor goesto the top of the screen') ifTrue:		[MessageTally spyOn:			[[Sensor peekMousePt y > 0] whileTrue: [World doOneCycle]]]! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'ar 11/28/2009 11:01'!toolsMenuOn: aDockingBar 	aDockingBar addItem: [ :item |		item			contents: 'Tools' translated;			addSubMenu: [ :menu | 				self					browserMenuItemOn: menu;					workspaceMenuItemOn: menu;					transcriptMenuItemOn: menu;					testRunnerMenuItemOn: menu.				menu addLine.				self 					monticelloBrowserMenuItemOn: menu;					monticelloConfigurationsMenuItemOn: menu;					simpleChangeSorterMenuItemOn: menu;					dualChangeSorterMenuItemOn: menu.				menu addLine.				self					processBrowserMenuItemOn: menu;					preferenceBrowserMenuItemOn: menu;					fileListMenuItemOn: menu.			] ]! !!MorphicProject methodsFor: 'file in/out' stamp: 'dtl 11/29/2009 13:12'!storeSegmentNoFile	"For testing.  Make an ImageSegment.  Keep the outPointers in memory.  Also useful if you want to enumerate the objects in the segment afterwards (allObjectsDo:)"	| is str |	(World == world) ifTrue: [^ self].		" inform: 'Can''t send the current world out'."	world isInMemory ifFalse: [^ self].  "already done"	world ifNil: [^ self].  world presenter ifNil: [^ self].	"Do this on project enter"	World flapTabs do: [:ft | ft referent adaptToWorld: World].		"Hack to keep the Menu flap from pointing at my project"	"Preferences setPreference: #useGlobalFlaps toValue: false."	"Utilities globalFlapTabsIfAny do:		[:aFlapTab | Utilities removeFlapTab: aFlapTab keepInList: false].	Utilities clobberFlapTabList.	"	"project world deleteAllFlapArtifacts."	"self currentWorld deleteAllFlapArtifacts.	"	Utilities emptyScrapsBook.	World checkCurrentHandForObjectToPaste2.	is := ImageSegment new copyFromRootsLocalFileFor: 			(Array with: world presenter with: world)	"world, and all Players"		sizeHint: 0.	is segment size < 800 ifTrue: ["debugging" 		Transcript show: self name, ' did not get enough objects'; cr.  ^ Beeper beep].	false ifTrue: [		str := String streamContents: [:strm |			strm nextPutAll: 'Only a tiny part of the project got into the segment'.			strm nextPutAll: '\These are pointed to from the outside:' withCRs.			is outPointers do: [:out |				(out class == Presenter) | (out class == ScriptEditorMorph) ifTrue: [					strm cr. out printOn: strm.					self systemNavigation						browseAllObjectReferencesTo: out						except: (Array with: is outPointers)						ifNone: [:obj | ]].				(is arrayOfRoots includes: out class) ifTrue: [strm cr. out printOn: strm.					self systemNavigation						browseAllObjectReferencesTo: out						except: (Array with: is outPointers)						ifNone: [:obj | ]]]].		self inform: str.		^ is inspect].	is extract.	"is instVarAt: 2 put: is segment clone."		"different memory"! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'ar 11/28/2009 11:07'!vmStatistics	"Open a string view on a report of vm statistics"	(StringHolder new contents: SmalltalkImage current  vmStatisticsReportString)		openLabel: 'VM Statistics'! !!MorphicProject methodsFor: 'file in/out' stamp: 'dtl 11/29/2009 13:14'!storeSegment	"Store my project out on the disk as an ImageSegment.  Keep the outPointers in memory.  Name it <project name>.seg.  *** Caller must be holding (Project alInstances) to keep subprojects from going out. ***"	| is sizeHint |	(World == world) ifTrue: [^ false]. 		"self inform: 'Can''t send the current world out'."	world isInMemory ifFalse: [^ false].  "already done"	world ifNil: [^ false].  world presenter ifNil: [^ false].	Utilities emptyScrapsBook.	World checkCurrentHandForObjectToPaste.	world releaseSqueakPages.	sizeHint := self projectParameters at: #segmentSize ifAbsent: [0].	is := ImageSegment new copyFromRootsLocalFileFor: 				(Array with: world presenter with: world)	"world, and all Players"			 sizeHint: sizeHint.	is state = #tooBig ifTrue: [^ false].	is segment size < 2000 ifTrue: ["debugging" 		Transcript show: self name, ' only ', is segment size printString, 			'bytes in Segment.'; cr].	self projectParameters at: #segmentSize put: is segment size.	is extract; writeToFile: self name.	^ true! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'ar 11/28/2009 11:11'!extrasMenuOn: aDockingBar 	aDockingBar addItem: [ :it|		it 	contents: 'Extras' translated;			addSubMenu: [:menu|				menu addItem:[:item|					item						contents: 'Recover Changes' translated;						help: 'Recover changes after a crash' translated;						icon: MenuIcons smallHelpIcon;						target: ChangeList;						selector: #browseRecentLog].				menu addLine.				menu addItem:[:item|					item						contents: 'Set Author Initials' translated;						help: 'Sets the author initials' translated;						target: Utilities;						selector: #setAuthorInitials].				menu addItem:[:item|					item						contents: 'Restore Display (r)' translated;						help: 'Redraws the entire display' translated;						target: World;						selector: #restoreMorphicDisplay].				menu addItem:[:item|					item						contents: 'Rebuild Menus' translated;						help: 'Rebuilds the menu bar' translated;						target: TheWorldMainDockingBar;						selector: #updateInstances].				menu addLine.				menu addItem:[:item|					item						contents: 'Start Profiler' translated;						help: 'Starts the profiler' translated;						target: self;						selector: #startMessageTally].				menu addItem:[:item|					item						contents: 'Collect Garbage' translated;						help: 'Run the garbage collector and report space usage' translated;						target: Utilities;						selector: #garbageCollectAndReport].				menu addItem:[:item|					item						contents: 'VM statistics' translated;						help: 'Virtual Machine information' translated;						target: self;						selector: #vmStatistics].			] ]! !!MorphicProject methodsFor: 'utilities' stamp: 'dtl 11/30/2009 22:27'!do: aBlock withProgressInfoOn: aMorphOrNil label: aString	"Evaluate aBlock with a labeled progress bar"	ComplexProgressIndicator new 		targetMorph: aMorphOrNil;		historyCategory: aString;		withProgressDo: aBlock! !!MorphicProject methodsFor: 'language' stamp: 'dtl 11/29/2009 13:04'!chooseNaturalLanguage	"Put up a menu allowing the user to choose the natural language for the project"	| aMenu availableLanguages |	aMenu := MenuMorph new defaultTarget: self.	aMenu addTitle: 'choose language' translated.	aMenu lastItem setBalloonText: 'This controls the human language in which tiles should be viewed.  It is potentially extensible to be a true localization mechanism, but initially it only works in the classic tile scripting system.  Each project has its own private language choice' translated.	Preferences noviceMode		ifFalse:[aMenu addStayUpItem].	availableLanguages := NaturalLanguageTranslator availableLanguageLocaleIDs										asSortedCollection:[:x :y | x displayName < y displayName].	availableLanguages do:		[:localeID |			aMenu addUpdating: #stringForLanguageNameIs: target: Locale selector:  #switchAndInstallFontToID: argumentList: {localeID}].	aMenu popUpInWorld"Project current chooseNaturalLanguage"! !!MorphicProject methodsFor: 'project parameters' stamp: 'dtl 11/28/2009 18:38'!currentStack	"Answer the current stack of the current project.  Called basically as a bail-out when we can't find the stack in the owner chain of a morph, probably because it is on a background that is not currently installed.  This method will always return a stack that is in the world, or nil if no stack is found in the world.  Of course it would be nice to have multiple stacks concurrently open in the same world, but at the moment that is problematical."	| aStack curStack |	curStack := self projectParameterAt: #CurrentStack.	curStack ifNotNil: [curStack isInWorld ifTrue: [^ curStack]].	(aStack := world findA: StackMorph) ifNotNil:		[self currentStack: aStack].	^ aStack! !!TheWorldMainDockingBar methodsFor: 'submenu - tools' stamp: 'ar 11/28/2009 10:42'!dualChangeSorterMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Dual Change Sorter' translated;			help: 'Open a Dual Change Sorter' translated;			icon: (self colorIcon: ChangeSorter basicNew defaultBackgroundColor);			target: DualChangeSorter;			selector: #open ]! !!TheWorldMainDockingBar methodsFor: 'submenu - tools' stamp: 'ar 11/28/2009 10:40'!processBrowserMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Process Browser' translated;			help: 'Open a Process Browser' translated;			icon: (self colorIcon: ProcessBrowser basicNew defaultBackgroundColor);			target: ProcessBrowser;			selector: #open ]! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'ar 11/28/2009 09:36'!showSqueakResources	^(StringHolder new contents:'Squeak web sites:	http://www.squeak.org	- The main Squeak site.	http://news.squeak.org	- The Weekly Squeak	http://board.squeak.org	- The Squeak Oversight Board	http://ftp.squeak.org	- Downloads for many Squeak versions.	http://squeakvm.org	- Development of the Squeak virtual machine	Squeak-dev - The main Squeak mailing list.	http://lists.squeakfoundation.org/mailman/listinfo/squeak-dev	http://dir.gmane.org/gmane.comp.lang.smalltalk.squeak.general	http://n4.nabble.com/Squeak-Dev-f45488.htmlSqueak-Beginners - The place to ask even the most basic questions.	http://lists.squeakfoundation.org/mailman/listinfo/beginners	http://dir.gmane.org/gmane.comp.lang.smalltalk.squeak.beginners	http://n4.nabble.com/Squeak-Beginners-f107673.htmlSqueak By Example: 	http://www.squeakbyexample.org/Squeak, Open Personal Computing and Multimedia (The NuBlue Book - Draft):	http://coweb.cc.gatech.edu/squeakbook/	http://stephane.ducasse.free.fr/FreeBooks/CollectiveNBlueBook/Squeak, Open Personal Computing for Multimedia (The White Book - Draft):	http://www.cc.gatech.edu/~mark.guzdial/drafts/	http://stephane.ducasse.free.fr/FreeBooks/GuzdialBookDrafts/More Books about Squeak and Smalltalk:	http://stephane.ducasse.free.fr/FreeBooks.html') openLabel: 'Squeak Online Resources'! !!TheWorldMainDockingBar class methodsFor: 'class initialization' stamp: 'ar 11/28/2009 11:16'!initialize	" self initialize "		Locale addLocalChangedListener: self.	self updateInstances.! !!TheWorldMainDockingBar methodsFor: 'submenu - tools' stamp: 'ar 11/28/2009 10:41'!monticelloConfigurationsMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Monticello Configurations' translated;			help: 'Open a Monticello Configurations Editor' translated;			icon: (self colorIcon: MCConfigurationBrowser basicNew defaultBackgroundColor);			target: MCConfigurationBrowser;			selector: #open ]! !!MorphicProject methodsFor: 'file in/out' stamp: 'dtl 11/29/2009 13:26'!exportSegmentWithCatagories: catList classes: classList fileName: aFileName directory: aDirectory	"Store my project out on the disk as an *exported* ImageSegment.  All outPointers will be in a form that can be resolved in the target image.  Name it <project name>.extSeg.  What do we do about subProjects, especially if they are out as local image segments?  Force them to come in?	Player classes are included automatically."	| is str ans revertSeg roots holder |	self flag: #toRemove.	self halt.  "unused"	"world == World ifTrue: [^ false]."		"self inform: 'Can''t send the current world out'."	world ifNil: [^ false].  world presenter ifNil: [^ false].	Utilities emptyScrapsBook.	world currentHand pasteBuffer: nil.	  "don't write the paste buffer."	world currentHand mouseOverHandler initialize.	  "forget about any references here"		"Display checkCurrentHandForObjectToPaste."	Command initialize.	world clearCommandHistory.	world fullReleaseCachedState; releaseViewers. 	world cleanseStepList.	world localFlapTabs size = world flapTabs size ifFalse: [		self error: 'Still holding onto Global flaps'].	world releaseSqueakPages.	ScriptEditorMorph writingUniversalTiles: (self projectParameterAt: #universalTiles ifAbsent: [false]).	holder := Project allProjects.	"force them in to outPointers, where DiskProxys are made"	"Just export me, not my previous version"	revertSeg := self projectParameters at: #revertToMe ifAbsent: [nil].	self projectParameters removeKey: #revertToMe ifAbsent: [].	roots := OrderedCollection new.	roots add: self; add: world; add: transcript; add: changeSet; add: thumbnail.	roots add: world activeHand; addAll: classList; addAll: (classList collect: [:cls | cls class]).	roots := roots reject: [ :x | x isNil].	"early saves may not have active hand or thumbnail"	catList do: [:sysCat | 		(SystemOrganization listAtCategoryNamed: sysCat asSymbol) do: [:symb |			roots add: (Smalltalk at: symb); add: (Smalltalk at: symb) class]].	is := ImageSegment new copySmartRootsExport: roots asArray.		"old way was (is := ImageSegment new copyFromRootsForExport: roots asArray)"	is state = #tooBig ifTrue: [^ false].	str := ''.	"considered legal to save a project that has never been entered"	(is outPointers includes: world) ifTrue: [		str := str, '\Project''s own world is not in the segment.' withCRs].	str isEmpty ifFalse: [		ans := (UIManager default				 chooseFrom: #('Do not write file' 'Write file anyway' 'Debug')				 title: str).		ans = 1 ifTrue: [			revertSeg ifNotNil: [projectParameters at: #revertToMe put: revertSeg].			^ false].		ans = 3 ifTrue: [self halt: 'Segment not written']].	is writeForExportWithSources: aFileName inDirectory: aDirectory.	revertSeg ifNotNil: [projectParameters at: #revertToMe put: revertSeg].	holder.	world flapTabs do: [:ft | 			(ft respondsTo: #unhibernate) ifTrue: [ft unhibernate]].	is arrayOfRoots do: [:obj |		obj class == ScriptEditorMorph ifTrue: [obj unhibernate]].	^ true! !!TheWorldMainDockingBar methodsFor: 'submenu - tools' stamp: 'ar 11/28/2009 10:42'!simpleChangeSorterMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Simple Change Sorter' translated;			help: 'Open a Change Sorter' translated;			icon: (self colorIcon: ChangeSorter basicNew defaultBackgroundColor);			target: ChangeSorter;			selector: #open ]! !!MorphicProject methodsFor: 'file in/out' stamp: 'dtl 11/29/2009 13:20'!loadFromServer: newerAutomatically	"If a newer version of me is on the server, load it."	| pair resp server |	self assureIntegerVersion.	self isCurrentProject ifTrue: ["exit, then do the command"		^ self armsLengthCommand: #loadFromServer withDescription: 'Loading' translated	].	server := self tryToFindAServerWithMe ifNil: [^ nil].	pair := self class mostRecent: self name onServer: server.	pair first ifNil: [^ self inform: ('can''t find file on server for {1}' translated format: {self name})].	self currentVersionNumber > pair second ifTrue: [		^ self inform: ('That server has an older version of the project.' translated)].	version = (Project parseProjectFileName: pair first) second ifTrue: [		resp := (UIManager default chooseFrom: 				(Array with: 'Reload anyway' translated 						with: 'Cancel' translated withCRs) 				title:  'The only changes are the ones you made here.' translated).		resp ~= 1 ifTrue: [^ nil]	] ifFalse: [		newerAutomatically ifFalse: [			resp := (UIManager default 						chooseFrom: #('Load it' 'Cancel') 						title:  'A newer version exists on the server.').			resp ~= 1 ifTrue: [^ nil]		].	].	"let's avoid renaming the loaded change set since it will be replacing ours"	self projectParameters at: #loadingNewerVersion put: true.	ComplexProgressIndicator new 		targetMorph: nil;		historyCategory: 'project loading';		withProgressDo: [			ProjectLoading				installRemoteNamed: pair first				from: server				named: self name				in: parentProject		]! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'ar 11/28/2009 09:37'!helpMenuOn: aDockingBar	aDockingBar addItem: [ :it |		it	contents: 'Help' translated;			addSubMenu: [ :menu |  'Todo'.				menu addItem:[:item|					item						contents: 'Online Resources' translated;						help: 'Online resources for Squeak' translated;						target: self;						selector: #showSqueakResources ].				menu addItem:[:item|					item						contents: 'Keyboard Shortcuts' translated;						help: 'Keyboard bindings used in Squeak' translated;						target: Utilities;						selector: #openCommandKeyHelp ].			]].! !!TheWorldMainDockingBar methodsFor: 'submenu - tools' stamp: 'ar 11/28/2009 11:02'!preferenceBrowserMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Preferences' translated;			help: 'Open a Preferences Browser' translated;			icon: (self colorIcon: PreferenceBrowser basicNew defaultBackgroundColor);			target: PreferenceBrowser;			selector: #open ]! !!MorphicProject methodsFor: 'file in/out' stamp: 'dtl 11/29/2009 13:23'!exportSegmentWithChangeSet: aChangeSetOrNil fileName: aFileNamedirectory: aDirectory	"Store my project out on the disk as an *exported*ImageSegment.  All outPointers will be in a form that can be resolvedin the target image.  Name it <project name>.extSeg.  Whatdo we doabout subProjects, especially if they are out as local imagesegments?  Force them to come in?	Player classes are included automatically."	| is str ans revertSeg roots holder collector fd mgr stacks |	"Files out a changeSet first, so that a project can containits own classes"	world ifNil: [^ false].  world presenter ifNil: [^ false].	Utilities emptyScrapsBook.	world currentHand pasteBuffer: nil.	  "don't write the paste buffer."	world currentHand mouseOverHandler initialize.	  "forget about any	references here"		"Display checkCurrentHandForObjectToPaste."	Command initialize.	world clearCommandHistory.	world fullReleaseCachedState; releaseViewers.	world cleanseStepList.	world localFlapTabs size = world flapTabs size ifFalse: [		self error: 'Still holding onto Global flaps'].	world releaseSqueakPages.	ScriptEditorMorph writingUniversalTiles: (self projectParameterAt:	#universalTiles ifAbsent: [false]).	holder := Project allProjects.	"force them in to outPointers, where	DiskProxys are made"	"Just export me, not my previous version"	revertSeg := self projectParameters at: #revertToMe ifAbsent: [nil].	self projectParameters removeKey: #revertToMe ifAbsent: [].	roots := OrderedCollection new.	roots add: self; add: world; add: transcript; add: changeSet; add: thumbnail.	roots add: world activeHand.		"; addAll: classList; addAll: (classList collect: [:cls | cls class])"	roots := roots reject: [ :x | x isNil].	"early saves may not have	active hand or thumbnail"		fd := aDirectory directoryNamed: self resourceDirectoryName.		fd assureExistence.		"Clean up resource references before writing out"		mgr := self resourceManager.		self resourceManager: nil.		ResourceCollector current: ResourceCollector new.		ResourceCollector current localDirectory: fd.		ResourceCollector current baseUrl: self resourceUrl.		ResourceCollector current initializeFrom: mgr.		ProgressNotification signal: '2:findingResources' extra:	'(collecting resources...)' translated.		"Must activate old world because this is run at #armsLength.		Otherwise references to ActiveWorld, ActiveHand, or ActiveEvent		will not be captured correctly if referenced from blocks or user code."		world becomeActiveDuring:[			is := ImageSegment new copySmartRootsExport: roots asArray.			"old way was (is := ImageSegment new	copyFromRootsForExport: roots asArray)"		].		self resourceManager: mgr.		collector := ResourceCollector current.		ResourceCollector current: nil.		ProgressNotification signal: '2:foundResources' extra: ''.		is state = #tooBig ifTrue: [			collector replaceAll.			^ false].	str := ''.	"considered legal to save a project that has never been entered"	(is outPointers includes: world) ifTrue: [		str := str, '\Project''s own world is not in the segment.' translated withCRs].	str isEmpty ifFalse: [		ans := UIManager default chooseFrom: {			'Do not write file' translated.			'Write file anyway' translated.			'Debug' translated.		} title: str.		ans = 1 ifTrue: [			revertSeg ifNotNil: [projectParameters at:	#revertToMe put: revertSeg].			collector replaceAll.			^ false].		ans = 3 ifTrue: [			collector replaceAll.			self halt: 'Segment not written' translated]].		stacks := is findStacks.		is			writeForExportWithSources: aFileName			inDirectory: fd			changeSet: aChangeSetOrNil.		SecurityManager default signFile: aFileName directory: fd.		"Compress all files and update check sums"		collector forgetObsolete.		self storeResourceList: collector in: fd.		self storeHtmlPageIn: fd.		self storeManifestFileIn: fd.		self writeStackText: stacks in: fd registerIn: collector.		"local proj.005.myStack.t"		self compressFilesIn: fd to: aFileName in: aDirectory	resources: collector.				"also deletes the resource directory"		"Now update everything that we know about"		mgr updateResourcesFrom: collector.	revertSeg ifNotNil: [projectParameters at: #revertToMe put: revertSeg].	holder.	collector replaceAll.	world flapTabs do: [:ft |			(ft respondsTo: #unhibernate) ifTrue: [ft unhibernate]].	is arrayOfRoots do: [:obj |		obj class == ScriptEditorMorph ifTrue: [obj unhibernate]].	^ true! !!MorphicProject methodsFor: 'language' stamp: 'dtl 11/29/2009 13:03'!setPaletteFor: aLanguageSymbol 	| prototype formKey form |		self flag: #toRemove. "check if this method still used by Etoys"	prototype := PaintBoxMorph prototype.	formKey := ('offPalette' , aLanguageSymbol) asSymbol.	form := Imports default imports				at: formKey				ifAbsent: [Imports default imports						at: #offPaletteEnglish						ifAbsent: []].	form isNil ifFalse: [prototype loadOffForm: form].	formKey := ('pressedPalette' , aLanguageSymbol) asSymbol.	form := Imports default imports				at: formKey				ifAbsent: [Imports default imports						at: #pressedPaletteEnglish						ifAbsent: []].	form isNil ifFalse: [prototype loadPressedForm: form].! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'ar 11/28/2009 10:53'!menusOn: aDockingBar 	self 		squeakMenuOn: aDockingBar;		projectsMenuOn: aDockingBar;		toolsMenuOn: aDockingBar;		extrasMenuOn: aDockingBar;		windowsMenuOn: aDockingBar;		helpMenuOn: aDockingBar! !TheWorldMainDockingBar initialize!