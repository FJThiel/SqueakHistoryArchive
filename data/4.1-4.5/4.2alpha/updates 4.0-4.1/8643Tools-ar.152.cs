"Change Set:		8643Tools-ar.152Tools-ar.152:NanoTraits preparations: Remove several unnecessary direct dependencies between tools package and traits package."!!Browser methodsFor: 'message functions' stamp: 'ar 12/27/2009 21:48'!removeMessage	"If a message is selected, create a Confirmer so the user can verify that  	the currently selected message should be removed from the system. If 	so,  	remove it. If the Preference 'confirmMethodRemoves' is set to false, the 	confirmer is bypassed."	| messageName confirmation |	messageListIndex = 0		ifTrue: [^ self].	self okToChange		ifFalse: [^ self].	messageName := self selectedMessageName.	confirmation := self systemNavigation   confirmRemovalOf: messageName on: self selectedClassOrMetaClass.	confirmation == 3		ifTrue: [^ self].	self selectedClassOrMetaClass removeSelector: messageName.	self messageListIndex: 0.	self changed: #messageList.	self setClassOrganizer.	"In case organization not cached"	confirmation == 2		ifTrue: [self systemNavigation browseAllCallsOn: messageName]! !!Browser methodsFor: 'accessing' stamp: 'ar 12/27/2009 19:14'!contents	"Depending on the current selection, different information is retrieved.	Answer a string description of that information. This information is the	method of the currently selected class and message."	| comment theClass latestCompiledMethod |	latestCompiledMethod := currentCompiledMethod.	currentCompiledMethod := nil.	editSelection == #newTrait		ifTrue: [^ClassDescription newTraitTemplateIn: self selectedSystemCategoryName].	editSelection == #none ifTrue: [^ ''].	editSelection == #editSystemCategories 		ifTrue: [^ systemOrganizer printString].	editSelection == #newClass 		ifTrue: [^ (theClass := self selectedClass)			ifNil:				[Class template: self selectedSystemCategoryName]			ifNotNil:				[Class templateForSubclassOf: theClass category: self selectedSystemCategoryName]].	editSelection == #editClass 		ifTrue: [^self classDefinitionText].	editSelection == #editComment 		ifTrue:			[(theClass := self selectedClass) ifNil: [^ ''].			comment := theClass comment.			currentCompiledMethod := theClass organization commentRemoteStr.			^ comment size = 0				ifTrue: ['This class has not yet been commented.']				ifFalse: [comment]].	editSelection == #hierarchy 		ifTrue: [^self selectedClassOrMetaClass printHierarchy].	editSelection == #editMessageCategories 		ifTrue: [^ self classOrMetaClassOrganizer printString].	editSelection == #newMessage		ifTrue:			[^ (theClass := self selectedClassOrMetaClass) 				ifNil: ['']				ifNotNil: [theClass sourceCodeTemplate]].	editSelection == #editMessage		ifTrue:			[^ self editContentsWithDefault:				[currentCompiledMethod := latestCompiledMethod.				self selectedMessage]].	self error: 'Browser internal error: unknown edit selection.'! !!Browser methodsFor: 'traits' stamp: 'ar 12/27/2009 21:58'!addTrait	| input trait |	input := UIManager default request: 'add trait'.	input isEmptyOrNil ifFalse: [		trait := Smalltalk classNamed: input.		(trait isNil or: [trait isTrait not]) ifTrue: [			^self inform: 'Input invalid. ' , input , ' does not exist or is not a trait'].		self selectedClass setTraitComposition: self selectedClass traitComposition asTraitComposition +  trait.		self contentsChanged].! !!Browser methodsFor: 'traits' stamp: 'ar 12/27/2009 21:46'!defineTrait: defString notifying: aController  	| defTokens keywdIx envt oldTrait newTraitName trait |	oldTrait := self selectedClassOrMetaClass.	defTokens := defString findTokens: Character separators.	keywdIx := defTokens findFirst: [:x | x = 'category'].	envt := self selectedEnvironment.	keywdIx := defTokens findFirst: [:x | x = 'named:'].	newTraitName := (defTokens at: keywdIx+1) copyWithoutAll: '#()'.	((oldTrait isNil or: [oldTrait baseTrait name asString ~= newTraitName])		and: [envt includesKey: newTraitName asSymbol]) ifTrue:			["Attempting to define new class/trait over existing one when				not looking at the original one in this browser..."			(self confirm: ((newTraitName , ' is an existing class/trait in this system.Redefining it might cause serious problems.Is this really what you want to do?') asText makeBoldFrom: 1 to: newTraitName size))				ifFalse: [^ false]].	trait := Compiler evaluate: defString notifying: aController logged: true.	^(trait isTrait)		ifTrue: [			self changed: #classList.			self classListIndex: (self classListIndexOf: trait baseTrait name).			self clearUserEditFlag; editClass.			true]		ifFalse: [ false ]! !TraitBehavior removeSelector: #browse!Browser removeSelector: #removeNonLocalSelector:!