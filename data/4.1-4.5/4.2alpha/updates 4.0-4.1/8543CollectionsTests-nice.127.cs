"Change Set:		8543CollectionsTests-nice.127CollectionsTests-nice.127:Correct 2 typos in method name Occurance->OccurrenceDeprecate old findLastOccuranceOfString:startingAt:CollectionsTests-nice.124:Non regression tests from http://bugs.squeak.org/view.php?id=6456Another fuzzy inclusion testself deny: ((1.0 to: 3.0 by: 1.0 successor) includes: 3.0).CollectionsTests-nice.125:merge two tests from pharoCollectionsTests-ul.126:- test for SortedCollection's #sort and #sort:"!!StringTest methodsFor: 'testing' stamp: 'nice 10/5/2009 03:44'!testFindLastOccurenceOfStringStartingAt	self assert: ('Smalltalk' findLastOccurrenceOfString: 'al' startingAt: 2) = 7.	self assert: ('aaa' findLastOccurrenceOfString: 'aa' startingAt: 1) = 2.	self assert: ('Smalltalk' asWideString findLastOccurrenceOfString: 'al' startingAt: 2) = 7.	self assert: ('Smalltalk' asWideString findLastOccurrenceOfString: 'al' asWideString startingAt: 2) = 7.	self assert: (('Smalltalk' copyWith: 835 asCharacter) findLastOccurrenceOfString: 'al' asWideString startingAt: 2) = 7.! !!OrderedCollectionTest methodsFor: 'testing-public methods' stamp: 'nice 10/8/2008 23:16'!testAddAfterIndex	"self run: #testAddAfterIndex"	| l |	l := #(1 2 3 4) asOrderedCollection.	l add: 77 afterIndex: 0.	self assert: (l =  #(77 1 2 3 4) asOrderedCollection).	l add: 88 afterIndex: 2.	self assert: (l =  #(77 1 88 2 3 4) asOrderedCollection). 	l add: 99 afterIndex: l size.	self assert: (l =  #(77 1 88 2 3 4 99) asOrderedCollection). 	self should:[l add: 666 afterIndex: -1] raise: Error.	self should:[l add: 666 afterIndex: l size+1] raise: Error.		"Now make room by removing first two and last two elements,	and see if the illegal bounds test still fails"	(l first: 2) , (l last: 2) reverse do: [:e | l remove: e].	self should: [l add: 666 afterIndex: -1] raise: Error.	self should: [l add: 666 afterIndex: l size+1] raise: Error.! !!OrderedCollectionTest methodsFor: 'testing-public methods' stamp: 'nice 10/8/2008 23:17'!testAddBeforeIndex	"self run: #testAddBeforeIndex"	| l |	l := #(1 2 3 4) asOrderedCollection.	l add: 77 beforeIndex: 1.	self assert: (l =  #(77 1 2 3 4) asOrderedCollection).	l add: 88 beforeIndex: 3.	self assert: (l =  #(77 1 88 2 3 4) asOrderedCollection). 	l add: 99 beforeIndex: l size+1.	self assert: (l =  #(77 1 88 2 3 4 99) asOrderedCollection). 	self should:[l add: 666 beforeIndex: 0] raise: Error.	self should:[l add: 666 beforeIndex: l size+2] raise: Error.		"Now make room by removing first two and last two elements,	and see if the illegal bounds test still fails"	(l first: 2) , (l last: 2) reverse do: [:e | l remove: e].	self should:[l add: 666 beforeIndex: 0] raise: Error.	self should:[l add: 666 beforeIndex: l size+2] raise: Error.! !!IntervalTest methodsFor: 'tests' stamp: 'nice 12/22/2009 16:19'!testInfiniteLoopBug6456	"This is a non regression test against mantis bug #6456.	Some Float interval size was not consistent with do: loop.	Some Float Interval used to do: infinite loops"		| x interval counter size |	x := (1.0 timesTwoPower: Float precision). "Note: x+1 = x due to inexact arithmetic"	interval := x to: x+4.	size := interval size.	counter := 0.	interval do: [:each | self assert: (counter := counter + 1) <= size].! !!IntervalTest methodsFor: 'tests' stamp: 'nice 12/22/2009 16:06'!testInclusion	"Non regression test for another bug of fuzzy inclusion"		self deny: ((1.0 to: 3.0 by: 1.0 successor) includes: 3.0) description: 'The last element of this Interval is closed to 2'! !!SortedCollectionTest methodsFor: 'tests - sorting' stamp: 'ul 12/23/2009 12:20'!testSort	| s |	s := SortedCollection withAll: #(3 2 1).	self assert: s asArray = #(1 2 3).	s sort: #>=. "This should change the sortBlock too"	self assert: s asArray = #(3 2 1).	s add: 4.	self assert: s asArray = #(4 3 2 1).	s := SortedCollection new 		sortBlock: #>=;		addAll: #(1 2 3);		yourself.	self assert: s asArray = #(3 2 1).	s sort.	self assert: s asArray = #(1 2 3).	s add: 0.	self assert: s asArray = #(0 1 2 3)! !StringTest removeSelector: #testFindLastOccuranceOfStringStartingAt!