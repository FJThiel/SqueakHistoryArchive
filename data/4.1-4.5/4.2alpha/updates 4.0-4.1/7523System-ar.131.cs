"Change Set:		7523System-ar.131System-ar.131:More preferences rework: Moved PreferenceView, PreferenceViewRegistry etc. into PreferenceBrowser since they should not live in the System package. The only remaining classes are Preferences, Preference, PragmaPreference and PreferenceExample. For the time being, this is probably as small as we can get and removes another set of dependencies (both Morphic and MVC) from core packages.System-ar.129:Closure fallout: With closures, all object enumeration must have a definitive end marker since enumeration will almost always create new contexts from block activations.System-ar.130:ToolBuilder cleanup. Removal of a few unused (and difficult to convert) methods and fixes of others."!Preference subclass: #PragmaPreference	instanceVariableNames: 'provider getter setter'	classVariableNames: ''	poolDictionaries: ''	category: 'System-Preferences'!Object subclass: #Preference	instanceVariableNames: 'name value defaultValue helpString localToProject categoryList changeInformee changeSelector viewRegistry type'	classVariableNames: ''	poolDictionaries: ''	category: 'System-Preferences'!Object subclass: #Preferences	instanceVariableNames: ''	classVariableNames: 'Parameters DictionaryOfPreferences DesktopColor'	poolDictionaries: ''	category: 'System-Preferences'!Object subclass: #PreferenceExample	instanceVariableNames: ''	classVariableNames: 'ColorPref TextPref BooleanPref NumericPref'	poolDictionaries: ''	category: 'System-Preferences'!!Preferences class methodsFor: 'add preferences' stamp: 'ar 8/9/2009 15:15'!addColorPreference: prefSymbol categories: categoryList default: defaultValue balloonHelp: helpString 	"Add an item repreesenting the given preference symbol to the system. Default view for this preference is boolean to keep backward compatibility"	self addPreference: prefSymbol  categories: categoryList  default:  defaultValue balloonHelp: helpString  projectLocal: false  changeInformee: nil changeSelector: nil type: #Color! !!Utilities class methodsFor: 'miscellaneous' stamp: 'ar 8/7/2009 22:31'!steplistToolsWorkspace	^ ((StringHolder new contents:  'self currentWorld listOfSteppingMorphs asArray inspectWithLabel: ''stepping morphs''.Utilities cleanseOtherworldlySteppers.self currentWorld steppingMorphsNotInWorld do: [:m | m delete].self currentWorld stepListSummary.self currentWorld stepListSize.self currentHand attachMorph: FrameRateMorph new') openLabel: 'Steplist workspace')setWindowColor: (Color r: 0.9 g: 0.7 b: 0.5);			openInWorld: self currentWorld extent: (550 @ 140)"Utilities steplistToolsWorkspace"! !!Preferences class methodsFor: 'dynamic preferences' stamp: 'ar 8/9/2009 15:14'!preference: prefName category: aCategory description: helpString type: typeSymbol	"Add a preference residing in aMethod"	|  aPreference |	aPreference := PragmaPreference new.	aPreference 		 name: prefName		 defaultValue: nil	"always nil"		 helpString: helpString		 localToProject: false "governed by the method"		 categoryList: (aCategory isArray ifTrue:[aCategory] ifFalse:[{aCategory}])		 changeInformee: nil		 changeSelector: nil		 type: typeSymbol.	^aPreference! !!Preferences class methodsFor: 'add preferences' stamp: 'ar 8/9/2009 15:14'!addBooleanPreference: prefSymbol category: categorySymbol default: defaultValue balloonHelp: helpString 	"Add an item repreesenting the given preference symbol to the system. Default view for this preference is boolean to keep backward compatibility"	self addPreference: prefSymbol  categories: {categorySymbol} default:  defaultValue balloonHelp: helpString  projectLocal: false  changeInformee: nil changeSelector: nil type: #Boolean! !!Preferences class methodsFor: 'add preferences' stamp: 'ar 8/9/2009 15:15'!addNumericPreference: prefSymbol categories: categoryList default: defaultValue balloonHelp: helpString 	"Add an item repreesenting the given preference symbol to the system. "	self addPreference: prefSymbol  categories: categoryList  default:  defaultValue balloonHelp: helpString  projectLocal: false  changeInformee: nil changeSelector: nil type: #Number! !!Preferences class methodsFor: 'add preferences' stamp: 'ar 8/9/2009 15:13'!addPreference: aName categories: categoryList default: aValue balloonHelp: helpString projectLocal: localBoolean changeInformee: informeeSymbol changeSelector: aChangeSelector type: aType	"Add or replace a preference as indicated.  Reuses the preexisting Preference object for this symbol, if there is one, so that UI artifacts that interact with it will remain valid."	| aPreference aPrefSymbol |	aPrefSymbol := aName asSymbol.	aPreference := self dictionaryOfPreferences  at:aPrefSymbol				 ifAbsent:[Preference new].	aPreference 		 name:aPrefSymbol		 defaultValue:aValue		 helpString:helpString		 localToProject:localBoolean		 categoryList:categoryList		 changeInformee:informeeSymbol		 changeSelector:aChangeSelector		 type: aType.	self dictionaryOfPreferences  at:aPrefSymbol  put:aPreference.	self  compileAccessMethodForPreference:aPreference! !!SystemNavigation methodsFor: 'query' stamp: 'ar 8/6/2009 23:27'!allObjectsDo: aBlock 	"Evaluate the argument, aBlock, for each object in the system 	excluding SmallIntegers. With closures, this needs to use an end	marker (lastObject) since activation of the block will create new 	contexts and cause an infinite loop."	| object lastObject |	object := self someObject.	lastObject := Object new.	[lastObject == object]		whileFalse: [aBlock value: object.			object := object nextObject]! !!Preference methodsFor: 'initialization' stamp: 'ar 8/9/2009 15:13'!name: aName defaultValue: aValue helpString: aString localToProject: projectBoolean categoryList: aList changeInformee: informee changeSelector:  aChangeSelector type: aType	"Initialize the preference from the given values.  There is an extra tolerence here for the symbols #true, #false, and #nil, which are interpreted, when appropriate, as meaning true, false, and nil"	name := aName asSymbol.	defaultValue := aValue.	aValue = #true ifTrue: [defaultValue := true].	aValue = #false ifTrue: [defaultValue := false].	value := defaultValue.	helpString := aString.	localToProject := projectBoolean == true or: [projectBoolean = #true].	type := aType.	categoryList := (aList ifNil: [OrderedCollection with: #unclassified]) collect:		[:elem | elem asSymbol].	changeInformee := (informee == nil or: [informee == #nil])						ifTrue: [nil]						ifFalse:	[(informee isKindOf: Symbol)							ifTrue:								[Smalltalk at: informee]							ifFalse:								[informee]].	changeSelector  := aChangeSelector! !!Preferences class methodsFor: 'add preferences' stamp: 'ar 8/9/2009 15:15'!addTextPreference: prefSymbol category: categorySymbol default: defaultValue balloonHelp: helpString 	"Add an item repreesenting the given preference symbol to the system. Default view for this preference is boolean to keep backward compatibility"	self addPreference: prefSymbol  categories: {categorySymbol} default:  defaultValue balloonHelp: helpString  projectLocal: false  changeInformee: nil changeSelector: nil type: #String! !!Preference methodsFor: 'local to project' stamp: 'ar 8/9/2009 14:45'!toggleProjectLocalness	"Toggle whether the preference should be held project-by-project or globally"	localToProject := localToProject not.! !!Preferences class methodsFor: 'add preferences' stamp: 'ar 8/9/2009 15:15'!addFontPreference: prefSymbol category: categorySymbol default: defaultValue balloonHelp: helpString 	"Add an item repreesenting the given preference symbol to the system. Default view for this preference is boolean to keep backward compatibility"	self addPreference: prefSymbol  categories: {categorySymbol} default:  defaultValue balloonHelp: helpString  projectLocal: false  changeInformee: nil changeSelector: nil type: #Font! !!Preference methodsFor: 'accessing' stamp: 'ar 8/9/2009 15:23'!type	"The type of this preference. One of #Boolean, #Color, #String, #Font, #Number etc."	^type ifNil:[		"For migration away from storing preference registries here"		type := PreferenceViewRegistry typeOfRegistry: viewRegistry].! !!Preferences class methodsFor: 'add preferences' stamp: 'ar 8/9/2009 15:14'!addBooleanPreference: prefSymbol categories: categoryList default: defaultValue balloonHelp: helpString 	"Add an item repreesenting the given preference symbol to the system. Default view for this preference is boolean to keep backward compatibility"	self addPreference: prefSymbol  categories: categoryList  default:  defaultValue balloonHelp: helpString  projectLocal: false  changeInformee: nil changeSelector: nil type: #Boolean! !!Preferences class methodsFor: 'add preferences' stamp: 'ar 8/9/2009 15:15'!addColorPreference: prefSymbol category: categorySymbol default: defaultValue balloonHelp: helpString 	"Add an item repreesenting the given preference symbol to the system. Default view for this preference is boolean to keep backward compatibility"	self addPreference: prefSymbol  categories: {categorySymbol} default:  defaultValue balloonHelp: helpString  projectLocal: false  changeInformee: nil changeSelector: nil type: #Color! !!Preferences class methodsFor: 'window colors' stamp: 'ar 8/9/2009 15:16'!setWindowColorFor: modelSymbol to: incomingColor	| aColor aPrefSymbol aColorSpec |	aColorSpec := WindowColorRegistry registeredWindowColorSpecFor: modelSymbol.	aColorSpec ifNil: [^self].	aColor := incomingColor asNontranslucentColor.	(aColor = ColorPickerMorph perniciousBorderColor or: [aColor = Color black]) 		ifTrue: [^ self].		aPrefSymbol :=  self windowColorPreferenceForClassNamed: aColorSpec classSymbol.	self 		addPreference: aPrefSymbol  		categories:  { #'window colors' }		default:  aColor 		balloonHelp: aColorSpec helpMessage translated		projectLocal: false		changeInformee: nil		changeSelector: nil		type: #WindowColor! !!Preferences class methodsFor: 'add preferences' stamp: 'ar 8/9/2009 15:15'!addTextPreference: prefSymbol categories: categoryList default: defaultValue balloonHelp: helpString 	"Add an item repreesenting the given preference symbol to the system. Default view for this preference is boolean to keep backward compatibility"	self addPreference: prefSymbol  categories: categoryList  default:  defaultValue balloonHelp: helpString  projectLocal: false  changeInformee: nil changeSelector: nil type: #String! !!Utilities class methodsFor: 'finding pointers' stamp: 'ar 8/6/2009 23:24'!pointersTo: anObject except: objectsToExclude 	"Find all occurrences in the system of pointers to the argument	anObject. Remove objects in the exclusion list from the	results. "	| results anObj lastObj |	Smalltalk garbageCollect.	"big collection shouldn't grow, so it's contents array is always the same"	results := OrderedCollection new: 1000.	"allObjectsDo: is expanded inline to keep spurious	method and block contexts out of the results"	anObj := self someObject.	lastObj := Object new.	[lastObj == anObj] whileFalse: [		anObj isInMemory ifTrue: [			(anObj pointsTo: anObject) ifTrue: [				"exclude the results collector and contexts in call chain"				(anObj ~~ results collector 					and: [anObj ~~ objectsToExclude					and: [anObj ~~ thisContext					and: [anObj ~~ thisContext sender					and: [anObj ~~ thisContext sender sender]]]])						ifTrue: [results add: anObj]]].		anObj := anObj nextObject].	objectsToExclude do: [:obj | results removeAllSuchThat: [:el | el == obj]].	^ results asArray! !!Preferences class methodsFor: 'preferences panel' stamp: 'ar 8/9/2009 15:20'!preferenceObjectsInCategory: aCategorySymbol 	"Answer a list of Preference objects that reside in the given category, in alphabetical order"	^ (self dictionaryOfPreferences 		 select:[:aPreference | aPreference categoryList  includes:aCategorySymbol])! !!Preference methodsFor: 'accessing' stamp: 'ar 8/9/2009 15:11'!type: preferenceType	"The type of this preference. One of #Boolean, #Color, #String, #Font, #Number etc."	type := preferenceType! !!Preferences class methodsFor: 'class initialization' stamp: 'ar 8/9/2009 14:45'!initialize	"Preferences initialize"	self registerForEvents.! !!Preferences class methodsFor: 'add preferences' stamp: 'ar 8/9/2009 15:15'!addNumericPreference: prefSymbol category: categorySymbol default: defaultValue balloonHelp: helpString 	"Add an item repreesenting the given preference symbol to the system."	self addPreference: prefSymbol  categories: {categorySymbol} default:  defaultValue balloonHelp: helpString  projectLocal: false  changeInformee: nil changeSelector: nil type: #Number! !!FilePackage class methodsFor: 'instance creation' stamp: 'ar 8/7/2009 22:18'!conflictsWithUpdatedMethods: fullName	| conflicts changeList |	conflicts := (self fromFileNamed: fullName) conflictsWithUpdatedMethods.	conflicts isEmpty ifTrue: [^ self].	changeList := ChangeList new.	changeList		changes: conflicts		file: (FileDirectory default readOnlyFileNamed: fullName) close.	ChangeList 		open: changeList		name: 'Conflicts for ', (FileDirectory localNameFor: fullName)		multiSelect: true.! !!Preferences class methodsFor: 'add preferences' stamp: 'ar 8/9/2009 15:14'!addBooleanPreference: prefSymbol categories: categoryList default: aValue balloonHelp: helpString projectLocal: localBoolean changeInformee: informeeSymbol  changeSelector: aChangeSelector	"Add an item repreesenting the given preference symbol to the system. Default view for this preference is boolean"	self addPreference: prefSymbol  categories: categoryList default:  aValue balloonHelp: helpString  projectLocal: localBoolean  changeInformee: informeeSymbol changeSelector: aChangeSelector type: #Boolean! !!Preferences class methodsFor: 'add preferences' stamp: 'ar 8/9/2009 15:15'!addFontPreference: prefSymbol categories: categoryList default: defaultValue balloonHelp: helpString 	"Add an item repreesenting the given preference symbol to the system. Default view for this preference is boolean to keep backward compatibility"	self addPreference: prefSymbol  categories: categoryList  default:  defaultValue balloonHelp: helpString  projectLocal: false  changeInformee: nil changeSelector: nil type: #Font! !PreferenceViewRegistry class removeSelector: #ofTextPreferences!PreferenceView removeSelector: #initializeWithPreference:!PreferenceViewRegistry removeSelector: #viewOrder:!Smalltalk removeClassNamed: #PreferenceView!BooleanPreferenceView classSide removeSelector: #initialize!Preference removeSelector: #viewForPanel:!HaloThemePreferenceView classSide removeSelector: #unload!Smalltalk removeClassNamed: #HaloThemePreferenceView!Preferences class removeSelector: #openPreferencesControlPanel!Preferences class removeSelector: #openFactoredPanel!PreferenceView removeSelector: #tearOffButton!Utilities class removeSelector: #reconstructTextWindowsFromFileNamed:!Preference removeSelector: #viewRegistry:!PreferenceViewRegistry class removeSelector: #ofColorPreferences!BooleanPreferenceView removeSelector: #representativeButtonWithColor:inPanel:!PreferenceViewRegistry class removeSelector: #ofBooleanPreferences!PreferenceViewRegistry removeSelector: #viewClassFor:!Preferences class removeSelector: #openNewPreferencesPanel!PreferenceView removeSelector: #representativeButtonWithColor:inPanel:!Preferences class removeSelector: #registerInFlapsRegistry!PreferenceViewRegistry class removeSelector: #ofFontPreferences!BooleanPreferenceView classSide removeSelector: #handlesPanel:!Preference removeSelector: #viewRegistry!PreferenceView class removeSelector: #handlesPanel:!Preferences class removeSelector: #addPreference:categories:default:balloonHelp:projectLocal:changeInformee:changeSelector:viewRegistry:!Preferences class removeSelector: #initializePreferencePanel:in:!PreferenceViewRegistry class removeSelector: #registries!BooleanPreferenceView classSide removeSelector: #unload!PreferenceViewRegistry removeSelector: #register:!Preferences class removeSelector: #openFactoredPanelWithWidth:!PreferenceViewRegistry removeSelector: #unregister:!PreferenceViewRegistry removeSelector: #initialize!Preferences class removeSelector: #preferencesControlPanel!Preference removeSelector: #name:defaultValue:helpString:localToProject:categoryList:changeInformee:changeSelector:viewRegistry:!PreferenceView removeSelector: #preference!Project class removeSelector: #showProjectHierarchyInWindow!PreferenceViewRegistry removeSelector: #registeredClasses!Smalltalk removeClassNamed: #PreferenceViewRegistry!Preference removeSelector: #representativeButtonWithColor:inPanel:!HaloThemePreferenceView classSide removeSelector: #initialize!PreferenceViewRegistry class removeSelector: #ofNumericPreferences!HaloThemePreferenceView removeSelector: #haloThemeRadioButtons!PreferenceView class removeSelector: #preference:!BooleanPreferenceView removeSelector: #offerPreferenceNameMenu:with:in:!HaloThemePreferenceView removeSelector: #representativeButtonWithColor:inPanel:!Smalltalk removeClassNamed: #BooleanPreferenceView!Preference removeSelector: #viewClassForPanel:!Preferences class removeSelector: #openPreferencesInspector!PreferenceViewRegistry removeSelector: #viewOrder!PreferenceViewRegistry class removeSelector: #registryOf:!PreferenceViewRegistry class removeSelector: #ofHaloThemePreferences!HaloThemePreferenceView classSide removeSelector: #handlesPanel:!Preferences initialize!BooleanPreferenceView initialize!HaloThemePreferenceView initialize!