"Change Set:		8705Collections-nice.270Collections-nice.270:Don't assign block argument with nil, with closure that is not necessary.Collections-ar.268:Enhancements to Collection>>do:displayingProgress:. The new version has two additional features: It allows the provision of a block argument for the label instead of a string, i.e.,Smalltalk allClasses    do:[:aClass| (Delay forMilliseconds: 1) wait]    displayingProgress:[:aClass| 'Processing ', aClass name]The second addition is an update limit that ensures that we're not spending our time in display updates. When the update limit is zero, we will update every round through the iteration, see:(Smalltalk allClasses)    do:[:aClass| (Delay forMilliseconds: 1) wait]    displayingProgress:[:aClass| 'Processing ', aClass name]    every: 0.whereas with non-zero argument we only do this every n msecs:(Smalltalk allClasses)    do:[:aClass| (Delay forMilliseconds: 1) wait]    displayingProgress:[:aClass| 'Processing ', aClass name]    every: 200.The default update limit is 20ms which should be a pretty good general choice.Collections-ar.269:Tidy up do:displayingProgress:every: a little. Make sure we update label before processing the element (may not be valid afterwards) and ensure that progress is always displayed for the first and the last element."!!WeakArray class methodsFor: 'private' stamp: 'nice 1/1/2010 00:56'!finalizationProcess	[true] whileTrue:		[FinalizationSemaphore wait.		FinalizationLock critical:			[FinalizationDependents do:				[:weakDependent |				weakDependent ifNotNil:					[weakDependent finalizeValues]]]			ifError:			[:msg :rcvr | rcvr error: msg].		].! !!Collection methodsFor: 'enumerating' stamp: 'ar 12/31/2009 20:33'!do: aBlock displayingProgress: aStringOrBlock every: msecs	"Enumerate aBlock displaying progress information. 	If the argument is a string, use a static label for the process. 	If the argument is a block, evaluate it with the element to retrieve the label.	The msecs argument ensures that updates happen at most every msecs.	Example:		Smalltalk allClasses 			do:[:aClass| (Delay forMilliseconds: 1) wait]			displayingProgress:[:aClass| 'Processing ', aClass name]			every: 0.		Smalltalk allClasses 			do:[:aClass| (Delay forMilliseconds: 1) wait]			displayingProgress:[:aClass| 'Processing ', aClass name]			every: 100.	"	| count size labelBlock oldLabel newLabel lastUpdate |	labelBlock := aStringOrBlock isString 		ifTrue:[[:item| aStringOrBlock]] 		ifFalse:[aStringOrBlock].	oldLabel := nil.	count := lastUpdate := 0.	size := self size.	'' displayProgressAt: Sensor cursorPoint from: 0 to: size during:[:bar |		self do:[:each|			"Special handling for first and last element"			(count = 0 or:[count+1 = size 				or:[(Time millisecondsSince: lastUpdate) >= msecs]]) ifTrue:[					bar value: count.					oldLabel = (newLabel := labelBlock value: each) ifFalse:[					ProgressNotification signal: '' extra: (oldLabel := newLabel).				].				lastUpdate := Time millisecondClockValue.			].			aBlock value: each.			count := count + 1.	]]! !!Collection methodsFor: 'enumerating' stamp: 'ar 12/31/2009 19:49'!do: aBlock displayingProgress: aStringOrBlock	"Enumerate aBlock displaying progress information. 	If the argument is a string, use a static label for the process. 	If the argument is a block, evaluate it with the element to retrieve the label.		Smalltalk allClasses 			do:[:aClass| (Delay forMilliseconds: 1) wait]			displayingProgress: 'Processing...'.		Smalltalk allClasses 			do:[:aClass| (Delay forMilliseconds: 1) wait]			displayingProgress:[:aClass| 'Processing ', aClass name].	"	^self do: aBlock displayingProgress: aStringOrBlock every: 20! !SequenceableCollection removeSelector: #do:displayingProgress:!