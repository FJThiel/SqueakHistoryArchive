"Change Set:		8298System-dtl.185System-dtl.185:Better progress display handling and rudimentary MVC implementations for  Project>>loadFromServer:  Project>>storeOnServerWithProgressInfo:  Project>>storeOnServerWithProgressInfoOn:System-dtl.181:Update project class>>deletingProject: to remove explicit dependency on ProjectViewMorphSystem-nice.182:http://bugs.squeak.org/view.php?id=7205cache category in MethodReference instVarallows a 25% speedup in Monticello snapshotting, after source cachingSystem-dtl.183:Remove all remaining explicit MVC and Morphic dependencies (hopefully) from class Project.System-dtl.184:Restore original #scopeFor:from:envtAndPathIfFound: method (from a Squeak 3.6 image), eliminating deprecation marker and removing it from package '39Deprecated'."!Object subclass: #MethodReference	instanceVariableNames: 'classSymbol classIsMeta methodSymbol stringVersion category'	classVariableNames: ''	poolDictionaries: ''	category: 'System-Tools'!!SystemDictionary methodsFor: 'dictionary access' stamp: 'di 12/19/1999 21:17'!scopeFor: varName from: lower envtAndPathIfFound: envtAndPathBlock	"Null compatibility with partitioning into environments."	(self includesKey: varName)		ifTrue: [^ envtAndPathBlock value: self value: String new]		ifFalse: [^ nil]! !!Project methodsFor: 'menu messages' stamp: 'dtl 11/29/2009 12:45'!makeThumbnail	"Make a thumbnail image of this project from the Display."	viewSize ifNil: [viewSize := Display extent // 8].	thumbnail := Form extent: viewSize depth: Display depth.	(WarpBlt current toForm: thumbnail)			sourceForm: Display;			cellSize: 2;  "installs a colormap"			combinationRule: Form over;			copyQuad: (Display boundingBox) innerCorners			toRect: (0@0 extent: viewSize).	(Smalltalk at: #InternalThreadNavigationMorph) ifNotNilDo: [:tnMorph |			tnMorph  cacheThumbnailFor: self].	^thumbnail! !!Project methodsFor: 'language' stamp: 'dtl 11/29/2009 13:05'!chooseNaturalLanguage	"Put up a menu allowing the user to choose the natural language for the project"	"Project current chooseNaturalLanguage"	self subclassResponsibility! !!Project methodsFor: 'file in/out' stamp: 'dtl 11/30/2009 22:40'!storeOnServerWithProgressInfo	"Save to disk as an Export Segment.  Then put that file on the server I came from, as a new version.  Version is literal piece of file name.  Mime encoded and http encoded."	CurrentProject		do: [self storeOnServerInnards]		withProgressInfoOn: nil		label: 'project storing'! !!Project methodsFor: 'file in/out' stamp: 'dtl 11/29/2009 13:15'!storeSegment	"Store my project out on the disk as an ImageSegment.  Keep the outPointers in memory.  Name it <project name>.seg.  *** Caller must be holding (Project alInstances) to keep subprojects from going out. ***"	self subclassResponsibility! !!MethodReference methodsFor: 'setting' stamp: 'mtf 10/4/2008 00:52'!category: aSymbol	category := aSymbol! !!Project class methodsFor: 'utilities' stamp: 'dtl 11/28/2009 18:03'!deletingProject: outgoingProject	| pvmClass |	pvmClass := Smalltalk at: #ProjectViewMorph ifAbsent: [nil].	ImageSegment allSubInstancesDo: [:seg |		seg ifOutPointer: outgoingProject thenAllObjectsDo: [:obj |			(obj isKindOf: pvmClass) ifTrue: [obj deletingProject: outgoingProject.  obj abandon].			(obj isKindOf: Project) ifTrue: [obj deletingProject: outgoingProject]]].	self allProjects do: [:p | p deletingProject: outgoingProject].	"ones that are in"	pvmClass ifNotNil: [		pvmClass allSubInstancesDo: [:p | 			p deletingProject: outgoingProject.			p project == outgoingProject ifTrue: [p abandon]]].	AllProjects := self allProjects copyWithout: outgoingProject.! !!Project methodsFor: 'file in/out' stamp: 'dtl 11/29/2009 13:08'!storeSegmentNoFile	"For testing.  Make an ImageSegment.  Keep the outPointers in memory.  Also useful if you want to enumerate the objects in the segment afterwards (allObjectsDo:)"	self subclassResponsibility! !!Project methodsFor: 'menu messages' stamp: 'dtl 11/29/2009 12:43'!validateProjectNameIfOK: aBlock	| details |	details := world valueOfProperty: #ProjectDetails.	details ifNotNil: ["ensure project info matches real project name"		details at: 'projectname' put: self name.	].	self doWeWantToRename ifFalse: [^aBlock value].	(Smalltalk at: #EToyProjectDetailsMorph) ifNotNilDo: [:etpdm |		etpdm			getFullInfoFor: self 			ifValid: [				World displayWorldSafely.				aBlock value.			] fixTemps			expandedFormat: false]! !!Project methodsFor: 'project parameters' stamp: 'dtl 11/28/2009 18:36'!initializeProjectPreferences	"Initialize the project's preferences from currently-prevailing preferences that are currently being held in projects in this system"		projectPreferenceFlagDictionary := Project current projectPreferenceFlagDictionary deepCopy.    "Project overrides in the new project start out being the same set of overrides in the calling project"	Preferences allPreferenceObjects do:  "in case we missed some"		[:aPreference |			aPreference localToProject ifTrue:				[(projectPreferenceFlagDictionary includesKey: aPreference name) ifFalse:			[projectPreferenceFlagDictionary at: aPreference name put: aPreference preferenceValue]]].	(Project current projectParameterAt: #disabledGlobalFlapIDs  ifAbsent: [nil]) ifNotNilDo:		[:idList | self projectParameterAt: #disabledGlobalFlapIDs put: idList copy]! !!Project methodsFor: 'file in/out' stamp: 'dtl 11/30/2009 22:43'!loadFromServer: newerAutomatically	"If a newer version of me is on the server, load it."	| pair resp server |	self assureIntegerVersion.	self isCurrentProject ifTrue: ["exit, then do the command"		^ self armsLengthCommand: #loadFromServer withDescription: 'Loading' translated	].	server := self tryToFindAServerWithMe ifNil: [^ nil].	pair := self class mostRecent: self name onServer: server.	pair first ifNil: [^ self inform: ('can''t find file on server for {1}' translated format: {self name})].	self currentVersionNumber > pair second ifTrue: [		^ self inform: ('That server has an older version of the project.' translated)].	version = (Project parseProjectFileName: pair first) second ifTrue: [		resp := (UIManager default chooseFrom: 				(Array with: 'Reload anyway' translated 						with: 'Cancel' translated withCRs) 				title:  'The only changes are the ones you made here.' translated).		resp ~= 1 ifTrue: [^ nil]	] ifFalse: [		newerAutomatically ifFalse: [			resp := (UIManager default 						chooseFrom: #('Load it' 'Cancel') 						title:  'A newer version exists on the server.').			resp ~= 1 ifTrue: [^ nil]		].	].	"let's avoid renaming the loaded change set since it will be replacing ours"	self projectParameters at: #loadingNewerVersion put: true.	CurrentProject		do: [ProjectLoading				installRemoteNamed: pair first				from: server				named: self name				in: parentProject]		withProgressInfoOn: nil		label: 'project loading'! !!MethodReference methodsFor: 'queries' stamp: 'mtf 10/4/2008 01:18'!category	^ category ifNil: [category := self actualClass organization categoryOfElement: methodSymbol]! !!Project methodsFor: 'utilities' stamp: 'dtl 11/30/2009 22:35'!do: aBlock withProgressInfoOn: aMorphOrNil label: aString	"Evaluate aBlock with a labeled progress bar"	self subclassResponsibility! !!Project methodsFor: 'file in/out' stamp: 'dtl 11/30/2009 22:40'!storeOnServerWithProgressInfoOn: aMorphOrNil	"Save to disk as an Export Segment.  Then put that file on the server I came from, as a new version.  Version is literal piece of file name.  Mime encoded and http encoded."	CurrentProject		do: [self storeOnServerInnards]		withProgressInfoOn: aMorphOrNil		label: 'project storing'	! !!Project methodsFor: 'file in/out' stamp: 'dtl 11/29/2009 13:24'!exportSegmentWithChangeSet: aChangeSetOrNil fileName: aFileNamedirectory: aDirectory	"Store my project out on the disk as an *exported*ImageSegment.  All outPointers will be in a form that can be resolvedin the target image.  Name it <project name>.extSeg.  Whatdo we doabout subProjects, especially if they are out as local imagesegments?  Force them to come in?	Player classes are included automatically."	self subclassResponsibility! !!Project methodsFor: 'file in/out' stamp: 'dtl 11/29/2009 13:27'!exportSegmentWithCatagories: catList classes: classList fileName: aFileName directory: aDirectory	"Store my project out on the disk as an *exported* ImageSegment.  All outPointers will be in a form that can be resolved in the target image.  Name it <project name>.extSeg.  What do we do about subProjects, especially if they are out as local image segments?  Force them to come in?	Player classes are included automatically."	self flag: #toRemove.	self subclassResponsibility! !Project removeSelector: #currentStack!Project removeSelector: #setPaletteFor:!