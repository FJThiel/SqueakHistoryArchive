"Change Set:		8474Collections-ul.253Collections-ul.253:- faster Association creation- removed obsolete comment from Character >> #=- removed HashedCollection >> #findElementOrNil: because it's private and deprecated- changed HashedCollection >> #fullCheck to really keep the 1/4 of the array free- inlined #fullCheck into HashedCollection >> #atNewIndex:put:Collections-ul.252:- fix: let WideString >> #replaceFrom:to:with:startingAt: use the primitive if replacement is a ByteString"!!Character methodsFor: 'comparing' stamp: 'ul 12/14/2009 17:58'!= aCharacter 	^self == aCharacter or: [		aCharacter isCharacter and: [ self asciiValue = aCharacter asciiValue ] ]! !!HashedCollection methodsFor: 'private' stamp: 'ul 12/14/2009 18:03'!fullCheck	"Keep array at least 1/4 free for decent hash behavior"	array size * 3 // 4 < tally ifTrue: [ self grow ]! !!WideString methodsFor: 'accessing' stamp: 'ul 12/14/2009 07:58'!replaceFrom: start to: stop with: replacement startingAt: repStart 	<primitive: 105>	replacement class == ByteString ifTrue: [		^self replaceFrom: start to: stop with: replacement asWideString startingAt: repStart ]. 	^super replaceFrom: start to: stop with: replacement startingAt: repStart.! !!Association class methodsFor: 'instance creation' stamp: 'ul 12/14/2009 17:57'!key: newKey value: newValue	"Answer an instance of me with the arguments as the key and value of 	the association."	^self basicNew key: newKey value: newValue! !!HashedCollection methodsFor: 'private' stamp: 'ul 12/14/2009 18:09'!atNewIndex: index put: anObject	array at: index put: anObject.	tally := tally + 1.	"Keep array at least 1/4 free for decent hash behavior"	array size * 3 < (tally * 4) ifTrue: [ self grow ]! !HashedCollection removeSelector: #findElementOrNil:!