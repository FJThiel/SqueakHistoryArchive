"Change Set:		7575ToolBuilder-Morphic-ar.34ToolBuilder-Morphic-ar.34:Small tweak to Morphic Toolbuilder's code pane construction. The styler should be set before the text to avoid retrieving, setting, and formatting it multiple times.ToolBuilder-Morphic-ar.33:Styling hooks:- Provide styling support in PtmPlus- Set up the default styler for a pluggableCodePane"!PluggableTextMorph subclass: #PluggableTextMorphPlus	instanceVariableNames: 'getColorSelector acceptAction unstyledAcceptText styler'	classVariableNames: ''	poolDictionaries: ''	category: 'ToolBuilder-Morphic'!!PluggableTextMorphPlus methodsFor: 'styling' stamp: 'ar 8/17/2009 23:48'!acceptTextInModel 		self okToStyle ifFalse:[^super acceptTextInModel].				"#correctFrom:to:with: is sent when the method source is	manipulated during compilation (removing unused temps,	changing selectors etc). But 	#correctFrom:to:with: operates 	on the textMorph's text, and we may be saving an unstyled 	copy of the text. This means that these corrections will be lost	unless we also apply the corrections to the unstyled copy that we are saving.		So remember the unstyled copy in unstyledAcceptText, so	that when #correctFrom:to:with: is received we can also apply	the correction to it"	unstyledAcceptText := styler unstyledTextFrom: textMorph asText.	[^setTextSelector isNil or:		[setTextSelector numArgs = 2			ifTrue: [model perform: setTextSelector with: unstyledAcceptText with: self]			ifFalse: [model perform: setTextSelector with: unstyledAcceptText]]	] ensure:[unstyledAcceptText := nil]! !!PluggableTextMorphPlus methodsFor: 'styling' stamp: 'ar 8/17/2009 23:49'!correctFrom: start to: stop with: aString	"see the comment in #acceptTextInModel "	unstyledAcceptText ifNotNil:[unstyledAcceptText replaceFrom: start to: stop with: aString ].	^ super correctFrom: start to: stop with: aString! !!PluggableTextMorphPlus methodsFor: 'accessing' stamp: 'ar 8/17/2009 23:50'!styler: anObject	"The styler responsible for highlighting text in the receiver"	styler := anObject! !!PluggableTextMorphPlus methodsFor: 'styling' stamp: 'ar 8/17/2009 23:52'!stylerStyled: styledCopyOfText	"Sent after the styler completed styling the underlying text"	textMorph contents runs: styledCopyOfText runs .	"textMorph paragraph recomposeFrom: 1 to: textMorph contents size delta: 0."     "caused chars to appear in wrong order esp. in demo mode. remove this line when sure it is fixed"	textMorph updateFromParagraph.	selectionInterval 		ifNotNil:[			textMorph editor				selectInvisiblyFrom: selectionInterval first to: selectionInterval last;				storeSelectionInParagraph;				setEmphasisHere].	textMorph editor blinkParen.	self scrollSelectionIntoView! !!PluggableTextMorphPlus methodsFor: 'initialize' stamp: 'ar 8/18/2009 00:07'!useDefaultStyler	"This should be changed to a proper registry but as long as there is only shout this will do"	Smalltalk at: #SHTextStylerST80 ifPresent:[:stylerClass|		self styler: (stylerClass new view: self).	].! !!MorphicToolBuilder methodsFor: 'pluggable widgets' stamp: 'ar 8/21/2009 22:03'!buildPluggableCodePane: aSpec	"Install the default styler for code panes.	Implementation note: We should just be doing something like, e.g.,		^(self buildPluggableText: aSpec) useDefaultStyler	Unfortunately, this will retrieve and layout the initial text twice which	can make for a noticable performance difference when looking at some	larger piece of code. So instead we copy the implementation from 	buildPlugggableText: here and insert #useDefaultStyler at the right point"	| widget |	widget := PluggableTextMorphPlus new.	widget useDefaultStyler.	widget on: aSpec model				text: aSpec getText 				accept: aSpec setText				readSelection: aSpec selection 				menu: aSpec menu.	widget font: Preferences standardCodeFont.	self register: widget id: aSpec name.	widget getColorSelector: aSpec color.	self setFrame: aSpec frame in: widget.	parent ifNotNil:[self add: widget to: parent].	widget borderColor: Color lightGray.	^widget! !!PluggableTextMorphPlus methodsFor: 'styling' stamp: 'ar 8/17/2009 23:52'!stylerStyledInBackground: styledCopyOfText 	"Sent after the styler completed styling of the text"	"It is possible that the text string	has changed since the styling began. Disregard the styles if styledCopyOfText's string differs with the current textMorph contents string"	textMorph contents string = styledCopyOfText string		ifTrue: [self stylerStyled: styledCopyOfText]! !!PluggableTextMorphPlus methodsFor: 'testing' stamp: 'ar 8/17/2009 23:53'!okToStyle	styler ifNil:[^false].	(model respondsTo: #aboutToStyle: ) ifFalse:[^true].	^model aboutToStyle: styler! !!PluggableTextMorphPlus methodsFor: 'styling' stamp: 'ar 8/17/2009 23:50'!hasUnacceptedEdits: aBoolean	"re-implemented to re-style the text iff aBoolean is true"	 	super hasUnacceptedEdits: aBoolean.	(aBoolean and: [self okToStyle])		ifTrue: [ styler styleInBackgroundProcess: textMorph contents]! !!PluggableTextMorphPlus methodsFor: 'styling' stamp: 'ar 8/21/2009 21:58'!setText: aText		self okToStyle ifFalse:[^super setText: aText].	super setText: (styler format: aText asText).	aText size < 4096		ifTrue:[styler style: textMorph contents]		ifFalse:[styler styleInBackgroundProcess:  textMorph contents]! !!PluggableTextMorphPlus methodsFor: 'accessing' stamp: 'ar 8/17/2009 23:51'!styler	"The styler responsible for highlighting text in the receiver"	^styler! !