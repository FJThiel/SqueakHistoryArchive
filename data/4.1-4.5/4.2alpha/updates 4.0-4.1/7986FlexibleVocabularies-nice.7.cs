"Change Set:		7986FlexibleVocabularies-nice.7FlexibleVocabularies-nice.7:Track selectors usage, use #selectorsDo:FlexibleVocabularies-nice.6:use #fasterKeys"!!Morph class methodsFor: '*flexibleVocabularies-flexiblevocabularies-scripting' stamp: 'nice 10/19/2009 22:18'!unfilteredCategoriesForViewer	"Answer a list of symbols representing the categories to offer in the viewer for one of my instances, in order of:	- masterOrderingOfCategorySymbols first	- others last in order by translated wording"	"	Morph unfilteredCategoriesForViewer	"	| aClass additions masterOrder |	aClass := self.	additions := OrderedCollection new.	[aClass == Morph superclass ] whileFalse: [		additions addAll: (aClass allAdditionsToViewerCategories fasterKeys			sort: [ :a :b | a translated < b translated ]).		aClass := aClass superclass ]. 	masterOrder := EToyVocabulary masterOrderingOfCategorySymbols.	^(masterOrder intersection: additions), (additions difference: masterOrder).! !!Morph methodsFor: '*flexiblevocabularies-scripting' stamp: 'nice 10/19/2009 22:17'!categoriesForViewer	"Answer a list of symbols representing the categories to offer in the 	viewer, in order"	| dict |	dict := Dictionary new.	self unfilteredCategoriesForViewer		withIndexDo: [:cat :index | dict at: cat put: index].	self filterViewerCategoryDictionary: dict.	^ dict fasterKeys sort: [:a :b | (dict at: a)						< (dict at: b)]! !!Morph class methodsFor: '*flexibleVocabularies-flexiblevocabularies-scripting' stamp: 'nice 10/20/2009 21:15'!allAdditionsToViewerCategories	"Answer a Dictionary of (<categoryName> <list of category specs>) that 	defines the phrases this kind of morph wishes to add to various Viewer categories. 	 	This version allows each category definition to be defined in one or more separate methods. 	 	Subclasses that have additions can either:	- override #additionsToViewerCategories, or	- (preferably) define one or more additionToViewerCategory* methods.	The advantage of the latter technique is that class extensions may be added by	external packages without having to re-define additionsToViewerCategories."	"	Morph allAdditionsToViewerCategories	"	| dict |	dict := IdentityDictionary new.	(self class includesSelector: #additionsToViewerCategories)		ifTrue: [self additionsToViewerCategories				do: [:group | group						pairsDo: [:key :list | (dict								at: key								ifAbsentPut: [OrderedCollection new])								addAll: list]]].	self class selectorsDo:		[:aSelector | ((aSelector beginsWith: 'additionsToViewerCategory')					and: [(aSelector at: 26 ifAbsent: []) ~= $:])				ifTrue: [(self perform: aSelector)						pairsDo: [:key :list | (dict								at: key								ifAbsentPut: [OrderedCollection new])								addAll: list]]].	^ dict! !