"Change Set:		8163Collections-ul.190Collections-ul.190:In Set and subclasses:- reimplemented #fixCollisionsFrom:- removed #keyAt: and #swap:with:Load Kernel-ul.297 before this"!!Set methodsFor: 'private' stamp: 'ul 11/13/2009 13:47'!fixCollisionsFrom: start	"The element at start has been removed and replaced by nil.	This method moves forward from there, relocating any entries	that had been placed below due to collisions with this one."	| element index |	index := start.	[ (element := array at: (index := index \\ array size + 1)) == nil ] whileFalse: [		| newIndex |		(newIndex := self scanFor: element) = index ifFalse: [			array swap: index with: newIndex ] ]! !!WeakSet methodsFor: 'private' stamp: 'ul 11/13/2009 13:47'!fixCollisionsFrom: start	"The element at start has been removed and replaced by flag.	This method moves forward from there, relocating any entries	that had been placed below due to collisions with this one."	| element index |	index := start.	[ (element := array at: (index := index \\ array size + 1)) == flag ] whileFalse: [		| newIndex |		(newIndex := self scanFor: element) = index ifFalse: [			array swap: index with: newIndex ] ]! !!Dictionary methodsFor: 'private' stamp: 'ul 11/13/2009 13:47'!fixCollisionsFrom: start	"The element at start has been removed and replaced by nil.	This method moves forward from there, relocating any entries	that had been placed below due to collisions with this one."	| element index |	index := start.	[ (element := array at: (index := index \\ array size + 1)) == nil ] whileFalse: [		| newIndex |		(newIndex := self scanFor: element key) = index ifFalse: [			array swap: index with: newIndex ] ]! !!KeyedSet methodsFor: 'private' stamp: 'ul 11/13/2009 13:47'!fixCollisionsFrom: start	"The element at start has been removed and replaced by nil.	This method moves forward from there, relocating any entries	that had been placed below due to collisions with this one."	| element index |	index := start.	[ (element := array at: (index := index \\ array size + 1)) == nil ] whileFalse: [		| newIndex |		(newIndex := self scanFor: (keyBlock value: element)) = index ifFalse: [			array swap: index with: newIndex ] ]! !Set removeSelector: #swap:with:!Dictionary removeSelector: #keyAt:!Set removeSelector: #keyAt:!KeyedSet removeSelector: #keyAt:!