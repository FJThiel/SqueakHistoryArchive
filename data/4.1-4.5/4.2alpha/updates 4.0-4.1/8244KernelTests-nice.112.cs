"Change Set:		8244KernelTests-nice.112KernelTests-nice.112:Grab a few tests from PharoKernelTests-ul.111:- updated tests for Kerner-ul.305"!!FloatTest methodsFor: 'printing' stamp: 'nice 10/11/2008 21:45'!testStoreBase16	"This bug was reported in mantis http://bugs.squeak.org/view.php?id=6695"	self		assert: (20.0 storeStringBase: 16) = '16r14.0'		description: 'the radix prefix should not be omitted, except in base 10'! !!IntegerTest methodsFor: 'tests - basic' stamp: 'ul 11/25/2009 02:49'!testIsProbablyPrime	"Not primes:"	#(-100 -5 -3 -2 -1 0 1) do: [ :each |		self deny: each isProbablyPrime ].	"The following tests should return 'true'"	#(17 78901 104729 15485863 2038074743 29996224275833) do: [ :each |		self assert: each isProbablyPrime ].		"The following tests should return 'false' (first 5 are Carmichael integers)"	#(561 2821 6601 10585 15841 256 29996224275831) do: [ :each |		self deny: each isProbablyPrime ].! !!IntegerTest methodsFor: 'tests - bitLogic' stamp: 'nice 7/8/2008 02:21'!testLowBit	| suite |	suite := (0 to: 1024) asArray , #(16rFDFD 16rFFFF 16r1000 16r1000000 16r1000001 16r70000000 16r7AFAFAFA ) , {SmallInteger maxVal . SmallInteger maxVal+1}.	suite := suite , (suite collect: [:e | e raisedTo: 20]).		suite do: [:anInteger |		| lowBit |		lowBit := (anInteger respondsTo: #bitAt:)			ifTrue: [(1 to: anInteger highBit) detect: [:bitIndex | (anInteger bitAt: bitIndex) ~= 0] ifNone: [0]]			ifFalse: [(1 to: anInteger highBit) detect: [:bitIndex | (anInteger bitAnd: (1 bitShift: bitIndex-1)) ~= 0] ifNone: [0]].		self assert: anInteger lowBit = lowBit.		self assert: anInteger negated lowBit = lowBit].! !!IntegerTest methodsFor: 'tests - basic' stamp: 'nice 1/25/2008 22:51'!testIsPowerOfTwoM6873	"This is a non regression test for http://bugs.squeak.org/view.php?id=6873"	self deny: ((1 to: 80) anySatisfy: [:n | (2 raisedTo: n) negated isPowerOfTwo])		description: 'A negative integer cannot be a power of two'.! !!IntegerTest methodsFor: 'tests - bitLogic' stamp: 'nice 7/8/2008 02:47'!testHighBit	| suite |	suite := (0 to: 1024) asArray , #(16rFDFD 16rFFFF 16r1000 16r1000000 16r1000001 16r70000000 16r7AFAFAFA ) , {SmallInteger maxVal . SmallInteger maxVal+1}.	suite := suite , (suite collect: [:e | e raisedTo: 20]).		suite do: [:anInteger |		| highBit shifted |		highBit := 0.		shifted := 1.		[shifted > anInteger] whileFalse: [highBit := highBit+1. shifted := shifted bitShift: 1].		self assert: anInteger highBit = highBit].! !!UndefinedObjectTest methodsFor: 'tests - Class Methods' stamp: 'nice 11/14/2009 19:25'!testAllInstances	self assert: UndefinedObject allInstances size = 1 description: 'There should be a single instance of UndefinedObject'.	self assert: (UndefinedObject allInstances includes: nil) description: 'nil should be an instance of UndefinedObject'.! !!IntegerTest methodsFor: 'tests - basic' stamp: 'ul 11/25/2009 02:51'!testIsPrime	"Not primes:"	#(-100 -5 -3 -2 -1 0 1) do: [ :each |		self deny: each isPrime ].	"The following tests should return 'true'"	#(17 78901 104729 15485863 2038074743) do: [ :each |		self assert: each isPrime ].		"The following tests should return 'false' (first 5 are Carmichael integers)"	#(561 2821 6601 10585 15841 256 29996224275831) do: [ :each |		self deny: each isPrime ].! !!IntegerTest methodsFor: 'tests - mathematical functions' stamp: 'ul 11/25/2009 03:01'!testSqrtFloor	#(-1234567890123 -10 -5 -1) do: [ :each |		self should: [ each sqrtFloor ] raise: Error ].	#(		0 1 2 3 4 5 10 16 30 160479924 386234481 501619156 524723498 580855366 766098594 834165249 1020363860 1042083924 1049218924		1459774772895569 3050005981408238 4856589481837079 5650488387708463 7831037396100244) do: [ :each |			self assert: each asFloat sqrt floor = each sqrtFloor ]		! !