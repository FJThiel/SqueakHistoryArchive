"Change Set:		8732Traits-nice.277Traits-nice.277:remove some #or:or: #and:and: sendsTraits-ul.276:- fix #unloadTraits, by temorarily moving ClassOrganizer >> #traitComposition from the Traits package to Kernel. This avoids an MNU while the Traits package is being unloaded."!!Trait class methodsFor: 'load-unload' stamp: 'ul 1/3/2010 06:27'!unloadTraits	"Trait unloadTraits"	Trait traitImpl == self ifTrue:[Trait traitImpl: nil].	self removeAllTraits.	Behavior compileSilently: 'updateTraits' classified: 'accessing'.	ClassDescription removeSelectorSilently: #updateTraits.	ClassOrganizer organization classify: #traitComposition under: 'accessing'.	(MCPackage named: 'Traits') unload.	ClassOrganizer removeSelectorSilently: #traitComposition.	Behavior removeSelectorSilently: #updateTraits.	Compiler recompileAll.! !!Trait methodsFor: 'initialize' stamp: 'nice 1/1/2010 22:06'!isValidTraitName: aSymbol	^(aSymbol isEmptyOrNil		or: [aSymbol first isLetter not		or: [aSymbol anySatisfy: [:character | character isAlphaNumeric not]]]) not! !!ClassDescription methodsFor: '*Traits-NanoKernel' stamp: 'nice 1/1/2010 21:46'!isAliasSelector: aSymbol	"Return true if the selector aSymbol is an alias defined	in my or in another composition somewhere deeper in 	the tree of traits compositions."	^(self includesLocalSelector: aSymbol) not		and: [self hasTraitComposition		and: [self traitComposition isAliasSelector: aSymbol]]! !!Trait methodsFor: 'monticello' stamp: 'nice 1/1/2010 21:49'!classDefinitions	| definitions |	definitions := OrderedCollection with: self asClassDefinition.	(self hasClassTrait		and: [self classTrait hasTraitComposition		and: [self classTrait traitComposition isEmpty not]])			ifTrue: [definitions add: self classTrait asMCDefinition].	^definitions asArray! !!ClassDescription methodsFor: '*Traits-NanoKernel' stamp: 'nice 1/1/2010 21:46'!isLocalAliasSelector: aSymbol	"Return true if the selector aSymbol is an alias defined	in my or in another composition somewhere deeper in 	the tree of traits compositions."	^(self includesLocalSelector: aSymbol) not		and: [self hasTraitComposition		and: [self traitComposition isLocalAliasSelector: aSymbol]]! !