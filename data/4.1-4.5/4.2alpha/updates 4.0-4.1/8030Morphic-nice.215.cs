"Change Set:		8030Morphic-nice.215Morphic-nice.215:forgot one #asArray sortMorphic-nice.214:Use #keys rather than #fasterKeysNote that pattern (x keys asArray sort) could as well be written (x keys sort) now that keys returns an Array...This #asArray is here solely for cross-dialect/fork compatibility."!!StandardScriptingSystem class methodsFor: 'utilities' stamp: 'mir 11/25/2004 19:01'!removeUnreferencedPlayers	"Remove existing but unreferenced player references"	"StandardScriptingSystem removeUnreferencedPlayers"	References keys do: 		[:key | (References at: key) costume pasteUpMorph			ifNil: [References removeKey: key]].! !!Morph methodsFor: 'object fileIn' stamp: 'dgd 2/22/2003 14:30'!convertAugust1998: varDict using: smartRefStrm 	"These variables are automatically stored into the new instance 	('bounds' 'owner' 'submorphs' 'fullBounds' 'color' ). 	This method is for additional changes. Use statements like (foo := 	varDict at: 'foo')."	"Be sure to to fill in ('extension' ) and deal with the information 	in ('eventHandler' 'properties' 'costumee' )"	"This method moves all property variables as well as 	eventHandler, and costumee into a morphicExtension."	"Move refs to eventhandler and costumee into extension"	| propVal |	(varDict at: 'eventHandler') isNil 		ifFalse: [self eventHandler: (varDict at: 'eventHandler')].	(varDict at: 'costumee') isNil 		ifFalse: [self player: (varDict at: 'costumee')].	(varDict at: 'properties') isNil 		ifFalse: 			[(varDict at: 'properties') keys do: 					[:key | 					"Move property extensions into extension"					propVal := (varDict at: 'properties') at: key.					propVal ifNotNil: 							[key == #possessive 								ifTrue: [propVal == true ifTrue: [self bePossessive]]								ifFalse: 									[key ifNotNil: [self assureExtension convertProperty: key toValue: propVal]]]]]! !!UpdatingStringMorph methodsFor: 'editing' stamp: 'nice 10/21/2009 00:16'!setFontStyle	| aList reply style |	aList := (TextConstants select: [:anItem | anItem isKindOf: TextStyle]) 				keys asArray.	reply := UIManager default chooseFrom: aList values: aList.	reply notNil 		ifTrue: 			[(style := TextStyle named: reply) ifNil: 					[Beeper beep.					^true].			self font: style defaultFont]! !!ComplexProgressIndicator class methodsFor: 'as yet unclassified' stamp: 'nice 10/21/2009 00:51'!historyReport"ComplexProgressIndicator historyReport"	| answer data |	History ifNil: [^Beeper beep].	answer := String streamContents: [ :strm |		(History keys asArray sort: [ :a :b | a asString <= b asString]) do: [ :k |			strm nextPutAll: k printString; cr.			data := History at: k.			(data keys asArray sort: [ :a :b | a asString <= b asString]) do: [ :dataKey |				strm tab; nextPutAll: dataKey printString,'  ',					(data at: dataKey) asArray printString; cr.			].			strm cr.		].	].	StringHolder new		contents: answer contents;		openLabel: 'Progress History'! !!FontChooserTool methodsFor: 'font list' stamp: 'ar 8/30/2009 16:39'!fontList	"List of available font family names"	^fontList ifNil:[fontList := (TextConstants select: [:each | each isKindOf: TextStyle]) keys asArray sort]! !!StandardScriptingSystem class methodsFor: 'utilities' stamp: 'mir 11/26/2004 16:14'!removePlayersIn: project	"Remove existing player references for project"	References keys do: 		[:key | (References at: key) costume pasteUpMorph == project world			ifTrue: [References removeKey: key]].! !