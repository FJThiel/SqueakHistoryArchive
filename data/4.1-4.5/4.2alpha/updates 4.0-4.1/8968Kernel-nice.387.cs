"Change Set:		8968Kernel-nice.387Kernel-nice.387:1) avoid a useless block non local return2) move a temp assignment outside blockKernel-ar.386:Merging Date class>>#readFrom:pattern: one more time (got accidentally replaced by a newer version without being merged)."!!Semaphore methodsFor: 'mutual exclusion' stamp: 'nice 1/19/2010 01:35'!critical: mutuallyExcludedBlock ifError: errorBlock	"Evaluate mutuallyExcludedBlock only if the receiver is not currently in 	the process of running the critical: message. If the receiver is, evaluate 	mutuallyExcludedBlock after the other critical: message is finished."	| blockValue hasError errMsg errRcvr |	hasError := false.	blockValue := self critical:[		[mutuallyExcludedBlock value] ifError:[:msg :rcvr|			hasError := true.			errMsg := msg.			errRcvr := rcvr		].	].	hasError ifTrue:[ ^errorBlock value: errMsg value: errRcvr].	^blockValue! !!Object methodsFor: 'testing' stamp: 'nice 1/19/2010 01:31'!nameForViewer	"Answer a name to be shown in a Viewer that is viewing the receiver"	| aName |	(aName := self uniqueNameForReferenceOrNil) ifNotNil: [^ aName].	(aName := self knownName) ifNotNil: [^ aName].	^ [(self asString copyWithout: Character cr) truncateTo:  27] ifError:		[:msg :rcvr | self class name printString]! !!Date class methodsFor: 'squeak protocol' stamp: 'Igor.Stasenko 1/15/2010 14:04'!readFrom: inputStream pattern: pattern	"Read a Date from the stream based on the pattern which can include the tokens:			y = A year with 1-n digits		yy = A year with 2 digits		yyyy = A year with 4 digits		m = A month with 1-n digits		mm = A month with 2 digits		d = A day with 1-n digits		dd = A day with 2 digits			...and any other Strings inbetween. Representing $y, $m and $d is done using	\y, \m and \d and slash itself with \\. Simple example patterns:		'yyyy-mm-dd'		'yyyymmdd'		'yy.mm.dd'		'y-m-d'	A year given using only two decimals is considered to be >2000."	| day month year patternStream char |	patternStream := pattern readStream.	[patternStream atEnd] whileFalse: [		inputStream atEnd ifTrue: [^nil].		char := patternStream next.		char = $\			ifTrue: [inputStream next = patternStream next ifFalse: [^nil]]			ifFalse: [				char = $y					ifTrue: [						(patternStream nextMatchAll: 'yyy')							ifTrue: [year := (inputStream next: 4) asInteger]							ifFalse: [								(patternStream peekFor: $y)									ifTrue: [										year := (inputStream next: 2) asInteger]									ifFalse: [										year := Integer readFrom: inputStream]]]					ifFalse: [						char = $m							ifTrue: [								(patternStream peekFor: $m)									ifTrue: [										month := (inputStream next: 2) asInteger]									ifFalse: [										month := Integer readFrom: inputStream]]							ifFalse: [								char = $d									ifTrue: [										(patternStream peekFor: $d)											ifTrue: [												day := (inputStream next: 2) asInteger]											ifFalse: [												day := Integer readFrom: inputStream]]									ifFalse: [										inputStream next = char ifFalse: [^nil]]]]]].	(year isNil | month isNil | day isNil) ifTrue: [^nil].	^self year: year month: month day: day! !