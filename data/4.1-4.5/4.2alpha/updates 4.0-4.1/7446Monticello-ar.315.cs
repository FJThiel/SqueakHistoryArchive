"Change Set:		7446Monticello-ar.315Monticello-ar.315:UIManagerization. Replaces all the trivial references to PopUpMenu, SelectionMenu, CustomMenu, and FillInTheBlank."!!MCDictionaryRepository methodsFor: 'as yet unclassified' stamp: 'ar 8/6/2009 18:24'!morphicOpen: aWorkingCopy	| names index infos |	infos := self sortedVersionInfos.	infos isEmpty ifTrue: [^ self inform: 'No versions'].	names := infos collect: [:ea | ea name].	index := UIManager default chooseFrom: names title: 'Open version:'.	index = 0 ifFalse: [(self versionWithInfo: (infos at: index)) open]! !!MCVersionInspector methodsFor: 'morphic ui' stamp: 'ar 8/6/2009 18:25'!pickAncestor	| index versions |	versions := self version info breadthFirstAncestors.	index := UIManager default chooseFrom: (versions collect: [:ea | ea name])				title: 'Ancestor:'.	^ index = 0 ifFalse: [versions at: index]! !!MCWorkingCopyBrowser methodsFor: 'actions' stamp: 'ar 8/6/2009 18:25'!newRepository	| types index |	types := MCRepository allConcreteSubclasses asArray.	index := UIManager default chooseFrom: (types collect: [:ea | ea description])				title: 'Repository type:'.	^ index = 0 ifFalse: [(types at: index) morphicConfigure]! !!MCVersionInspector methodsFor: 'morphic ui' stamp: 'ar 8/6/2009 18:25'!pickRepository	| index |	index := UIManager default chooseFrom: (self repositories collect: [:ea | ea description])				title: 'Repository:'.	^ index = 0 ifFalse: [self repositories at: index]! !!MCWorkingCopyBrowser methodsFor: 'morphic ui' stamp: 'ar 8/6/2009 18:26'!pickWorkingCopySatisfying: aBlock	| copies index |	copies := self workingCopies select: aBlock.	copies isEmpty ifTrue: [ ^nil ].	index := UIManager default chooseFrom: (copies collect: [:ea | ea packageName])				title: 'Package:'.	^ index = 0 ifFalse: [ copies at: index]! !!MCWorkingCopyBrowser methodsFor: 'morphic ui' stamp: 'ar 8/6/2009 18:26'!pickAncestorVersionInfo	| ancestors index |	ancestors := workingCopy ancestry breadthFirstAncestors.	index := UIManager default chooseFrom: (ancestors collect: [:ea | ea name])				title: 'Ancestor:'.	^ index = 0 ifFalse: [ ancestors at: index]! !!ChangeList class methodsFor: '*monticello' stamp: 'ar 8/6/2009 18:46'!recentLogOn: origChangesFile startingFrom: initialPos 	"Prompt with a menu of how far back to go when browsing a changes file."	| end banners positions pos chunk i changesFile |	changesFile := origChangesFile readOnlyCopy.	banners := OrderedCollection new.	positions := OrderedCollection new.	end := changesFile size.	pos := initialPos.	[pos = 0		or: [banners size > 20]]		whileFalse: [changesFile position: pos.			chunk := changesFile nextChunk.			i := chunk indexOfSubCollection: 'priorSource: ' startingAt: 1.			i > 0				ifTrue: [positions addLast: pos.					banners						addLast: (chunk copyFrom: 5 to: i - 2).					pos := Number								readFrom: (chunk copyFrom: i + 13 to: chunk size)]				ifFalse: [pos := 0]].	changesFile close.	banners size == 0 ifTrue: [^self recent: end on: origChangesFile].	pos := UIManager default chooseFrom: banners values: positions				title: 'Browse as far back as...'.	pos == nil		ifTrue: [^ self].	^self recent: end - pos on: origChangesFile! !!MCHttpRepository methodsFor: 'as yet unclassified' stamp: 'ar 8/6/2009 20:41'!password	self userAndPasswordFromSettingsDo: [:usr :pwd | ^pwd].	self user isEmpty ifTrue: [^password].	[password isEmpty] whileTrue: [		| answer |		"Give the user a chance to change the login"		answer := UIManager default request: 'User name for ', String cr, location			initialAnswer: self user.		answer isEmpty			ifTrue: [^password]			ifFalse: [self user: answer].				password := UIManager default requestPassword: 'Password for "', self user, '" at ', String cr, location.	].	^ password! !