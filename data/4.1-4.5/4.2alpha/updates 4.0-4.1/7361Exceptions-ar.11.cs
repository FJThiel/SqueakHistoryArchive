"Change Set:		7361Exceptions-ar.11Exceptions-ar.11:Post-closure cleanup and underscore removal."!!Exception methodsFor: 'signaling' stamp: 'ajh 2/1/2003 01:33'!signal	"Ask ContextHandlers in the sender chain to handle this signal.  The default is to execute and return my defaultAction."	signalContext := thisContext contextTag.	^ thisContext nextHandlerContext handleSignal: self! !!ProgressNotification methodsFor: 'accessing' stamp: 'ar 3/2/2001 20:12'!amount: aNumber	amount := aNumber! !!FileDoesNotExistException class methodsFor: 'examples' stamp: 'mir 2/29/2000 11:44'!example	"FileDoesNotExistException example"	| result |	result := [(StandardFileStream readOnlyFileNamed: 'error42.log') contentsOfEntireFile]		on: FileDoesNotExistException		do: [:ex | 'No error log'].	Transcript show: result; cr! !!ProgressNotification methodsFor: 'accessing' stamp: 'ar 3/2/2001 20:12'!extraParam: anObject	extra := anObject! !!ProjectEntryNotification methodsFor: 'as yet unclassified' stamp: 'RAA 6/6/2000 18:53'!projectToEnter: aProject	projectToEnter := aProject! !!ProgressNotification methodsFor: 'accessing' stamp: 'ar 3/2/2001 20:12'!done: aNumber	done := aNumber! !!Exception methodsFor: 'handling' stamp: 'ajh 6/27/2003 22:13'!outer	"Evaluate the enclosing exception action and return to here instead of signal if it resumes (see #resumeUnchecked:)."	| prevOuterContext |	self isResumable ifTrue: [		prevOuterContext := outerContext.		outerContext := thisContext contextTag.	].	self pass.! !!ProgressInitiationException methodsFor: 'as yet unclassified' stamp: 'RAA 5/15/2000 11:43'!display: argString at: argPoint from: argMinVal to: argMaxVal during: argWorkBlock	progressTitle := argString.	aPoint := argPoint.	minVal := argMinVal.	maxVal := argMaxVal.	workBlock := argWorkBlock.	^self signal! !!FileDoesNotExistException methodsFor: 'accessing' stamp: 'mir 7/25/2000 16:40'!readOnly: aBoolean	readOnly := aBoolean! !!NonBooleanReceiver methodsFor: 'accessing' stamp: 'hmm 7/29/2001 21:30'!object: anObject	object := anObject! !!InvalidDirectoryError methodsFor: 'accessing' stamp: 'ar 5/30/2001 20:45'!pathName: badPathName	pathName := badPathName! !!ProgressInitiationException methodsFor: 'as yet unclassified' stamp: 'laza 4/1/2004 12:47'!defaultMVCAction	| delta savedArea captionText textFrame barFrame outerFrame result range lastW w |	barFrame := aPoint - (75@10) corner: aPoint + (75@10).	captionText := DisplayText text: progressTitle asText allBold.	captionText		foregroundColor: Color black		backgroundColor: Color white.	textFrame := captionText boundingBox insetBy: -4.	textFrame := textFrame align: textFrame bottomCenter					with: barFrame topCenter + (0@2).	outerFrame := barFrame merge: textFrame.	delta := outerFrame amountToTranslateWithin: Display boundingBox.	barFrame := barFrame translateBy: delta.	textFrame := textFrame translateBy: delta.	outerFrame := outerFrame translateBy: delta.	savedArea := Form fromDisplay: outerFrame.	Display fillBlack: barFrame; fillWhite: (barFrame insetBy: 2).	Display fillBlack: textFrame; fillWhite: (textFrame insetBy: 2).	captionText displayOn: Display at: textFrame topLeft + (4@4).	range := maxVal = minVal ifTrue: [1] ifFalse: [maxVal - minVal].  "Avoid div by 0"	lastW := 0.	[result := workBlock value:  "Supply the bar-update block for evaluation in the work block"		[:barVal |		w := ((barFrame width-4) asFloat * ((barVal-minVal) asFloat / range min: 1.0)) asInteger.		w ~= lastW ifTrue: [			Display fillGray: (barFrame topLeft + (2@2) extent: w@16).			lastW := w]]]		ensure: [savedArea displayOn: Display at: outerFrame topLeft].	self resume: result! !!ExceptionTests methodsFor: 'testing-outer' stamp: 'dtl 6/1/2004 22:00'!testResumableOuter	| result |	result := [Notification signal. 4] 		on: Notification 		do: [:ex | ex outer. ex return: 5].	self assert: result == 5! !!FileExistsException methodsFor: 'accessing' stamp: 'LC 10/24/2001 21:42'!fileClass: aClass	fileClass := aClass! !!FileStreamException methodsFor: 'exceptionBuilder' stamp: 'mir 2/23/2000 20:13'!fileName: aFileName	fileName := aFileName! !!UnhandledError methodsFor: 'as yet unclassified' stamp: 'ajh 9/4/2002 19:15'!exception: anError	exception := anError! !!Exception methodsFor: 'priv handling' stamp: 'ajh 1/29/2003 13:44'!privHandlerContext: aContextTag	handlerContext := aContextTag! !!ExceptionTests methodsFor: 'testing-outer' stamp: 'dtl 6/1/2004 22:00'!testResumablePass	| result |	result := [Notification signal. 4] 		on: Notification 		do: [:ex | ex pass. ex return: 5].	self assert: result == 4! !!Exception methodsFor: 'handling' stamp: 'ajh 6/27/2003 22:30'!resumeUnchecked: resumptionValue	"Return resumptionValue as the value of #signal, unless this was called after an #outer message, then return resumptionValue as the value of #outer."	| ctxt |	outerContext ifNil: [		signalContext return: resumptionValue	] ifNotNil: [		ctxt := outerContext.		outerContext := ctxt tempAt: 1. "prevOuterContext in #outer"		ctxt return: resumptionValue	].! !!MessageNotUnderstood methodsFor: 'exceptionBuilder' stamp: 'ajh 10/9/2001 16:38'!receiver: obj	receiver := obj! !!BlockCannotReturn methodsFor: 'accessing' stamp: 'ajh 2/6/2002 11:12'!deadHome: context	deadHome := context! !