"Change Set:		9327CollectionsTests-ar.144CollectionsTests-ar.144:Merge class GeneratorTest from http://source.lukas-renggli.ch/continuations/Generator-ar.5.mczCollectionsTests-nice.143:Change expectation of Association hashSame key, different value will never lead to a different hash now."!TestCase subclass: #GeneratorTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CollectionsTests-Streams'!!GeneratorTest methodsFor: 'testing' stamp: 'ar 2/10/2010 21:01'!testErrorPropagation	"Ensure that errors in the generator block are properly propagated"	| generator |	self shouldnt:[generator := Generator on: [ :g | g yield: 1. g error: 'yo']] raise: Error.	self should:[generator next] raise: Error.! !!GeneratorTest methodsFor: 'testing' stamp: 'lr 1/8/2009 16:45'!testEmpty	| generator |	generator := Generator on: [ :g | ].	self assert: generator atEnd.	self assert: generator peek isNil.	self assert: generator next isNil! !!GeneratorTest methodsFor: 'testing' stamp: 'lr 1/8/2009 16:33'!testAtEnd	| generator |	generator := self numbersBetween: 1 and: 3.	self deny: generator atEnd.	generator next.	self deny: generator atEnd.	generator next.	self deny: generator atEnd.	generator next.	self assert: generator atEnd! !!GeneratorTest methodsFor: 'testing' stamp: 'lr 2/10/2010 09:02'!testEnsure	| generator |	generator := Generator on: [ :g |		[ g yield: 1; yield: 2 ]			ensure: [ g yield: 3 ] ].	self assert: generator upToEnd asArray = #( 1 2 3 )! !!GeneratorTest methodsFor: 'generators' stamp: 'lr 1/8/2009 16:29'!fibonacciSequence	"Yields an infinite sequence of fibonacci numbers."		^ Generator on: [ :generator |		| a b |		a := 0. b := 1.		[ a := b + (b := a).		  generator yield: a ]			repeat ]! !!GeneratorTest methodsFor: 'testing' stamp: 'lr 1/8/2009 16:46'!testSimple	| generator |	generator := Generator on: [ :g | g yield: 1; yield: 2 ].	self assert: generator upToEnd asArray = #( 1 2 )! !!GeneratorTest methodsFor: 'testing' stamp: 'lr 1/8/2009 16:45'!testPeek	| generator |	generator := self numbersBetween: 1 and: 3.	self assert: generator peek = 1.	self assert: generator peek = 1.	generator next.	self assert: generator peek = 2! !!GeneratorTest methodsFor: 'testing' stamp: 'lr 1/8/2009 16:50'!testFibonacci	| generator |	generator := self fibonacciSequence.	self assert: (generator next: 10) asArray = #( 1 1 2 3 5 8 13 21 34 55 )! !!GeneratorTest methodsFor: 'testing' stamp: 'lr 1/8/2009 16:35'!testReset	| generator |	generator := self numbersBetween: 1 and: 3.	self assert: generator next = 1.	self assert: generator next = 2.	generator reset.	self assert: generator next = 1.	self assert: generator next = 2.	self assert: generator next = 3.	self assert: generator next = nil.	generator reset.	self assert: generator next = 1! !!GeneratorTest methodsFor: 'testing' stamp: 'lr 2/10/2010 09:18'!testClose	| generator doEnsure notEnsure |	doEnsure := notEnsure := 0.	[ generator := Generator on: [ :g |		[ g yield: 1; yield: 2 ]			ensure: [ doEnsure := doEnsure + 1 ] ].	self assert: doEnsure = 0; assert: notEnsure = 0.	self assert: generator peek = 1.	self assert: doEnsure = 0; assert: notEnsure = 0.	generator close.	self assert: doEnsure = 1; assert: notEnsure = 0 ]		ensure: [ notEnsure := notEnsure + 1 ].	self assert: doEnsure = 1; assert: notEnsure = 1! !!GeneratorTest methodsFor: 'testing' stamp: 'lr 1/8/2009 16:33'!testNext	| generator |	generator := self numbersBetween: 1 and: 3.	self assert: generator next = 1.	self assert: generator next = 2.	self assert: generator next = 3.	self assert: generator next isNil! !!GeneratorTest methodsFor: 'testing' stamp: 'lr 4/26/2009 11:51'!testContents	| generator |	generator := self numbersBetween: 1 and: 3.	self assert: generator contents = #(1 2 3)! !!GeneratorTest methodsFor: 'testing' stamp: 'ar 2/10/2010 21:03'!testResetUnwind	"Just like close, just using reset"	| generator doEnsure notEnsure |	doEnsure := notEnsure := 0.	[ generator := Generator on: [ :g |		[ g yield: 1; yield: 2 ]			ensure: [ doEnsure := doEnsure + 1 ] ].	self assert: doEnsure = 0; assert: notEnsure = 0.	self assert: generator peek = 1.	self assert: doEnsure = 0; assert: notEnsure = 0.	generator reset.	self assert: doEnsure = 1; assert: notEnsure = 0 ]		ensure: [ notEnsure := notEnsure + 1 ].	self assert: doEnsure = 1; assert: notEnsure = 1! !!GeneratorTest class methodsFor: 'accessing' stamp: 'lr 2/10/2010 08:34'!packageNamesUnderTest	^ #('Generator')! !!GeneratorTest methodsFor: 'generators' stamp: 'lr 1/8/2009 15:49'!numbersBetween: aStartInteger and: aStopInteger	"Yields the nubmers between aStartInteger and aStopInteger."		^ Generator on: [ :generator |		aStartInteger to: aStopInteger 			do: [ :value | generator yield: value ] ]! !!AssociationTest methodsFor: 'tests' stamp: 'nice 2/13/2010 05:25'!testHash	self 		assert: (a hash = a copy hash)! !