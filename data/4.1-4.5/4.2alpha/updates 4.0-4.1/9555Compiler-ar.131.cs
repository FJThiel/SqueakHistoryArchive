"Change Set:		9555Compiler-ar.131Compiler-ar.131:Having removed the last uses of SyntaxError to indicate non-interactive compile, simplify Parser/Compiler>>interactive to just test for non-nil requestor.Compiler-nice.129:Fix Compiler/Decompiler temporary slot mismatchhttp://bugs.squeak.org/view.php?id=7467See also my comments in response tohttp://lists.squeakfoundation.org/pipermail/squeak-dev/2010-March/145280.htmlEliot, please check....Compiler-nice.130:Provide a better fix for http://source.squeak.org/trunk/Compiler-nice.129.mczBlockNode>>#addRemoteTemp: rootNode:was always sent to the TempVariableNode definingScope...But BlockNode>>#optimizedBlockHoistTempsInto:might already have moved the temporaries to next upper unoptimized BlockNode (definingBlock actualScope).This operation does not update the TempVariableNode definingScope (should it ?)Thus, only when definingScope temporaries does not include the TempVariableNode,should we attempt to remove it from actualScope temporaries....Note: this does not solve (EventSensor>>#eventTickler) decompileWithTemps"!InstructionStream subclass: #Decompiler	instanceVariableNames: 'constructor method instVars tempVars constTable stack statements lastPc exit caseExits lastJumpPc lastReturnPc limit hasValue blockStackBase numLocalTemps blockStartsToTempVars tempVarCount'	classVariableNames: 'ArgumentFlag CascadeFlag CaseFlag IfNilFlag'	poolDictionaries: ''	category: 'Compiler-Kernel'!!Encoder methodsFor: 'private' stamp: 'ar 3/4/2010 23:39'!interactive	"Answer true if compilation is interactive"	^requestor interactive! !!BlockNode methodsFor: 'code generation (closures)' stamp: 'nice 3/1/2010 23:01'!makeTemporariesRemovable	"Utilities for when we want to remove some temporaries."		temporaries isArray ifTrue:		[temporaries := temporaries asOrderedCollection].! !!BlockNode methodsFor: 'code generation (closures)' stamp: 'nice 3/2/2010 00:58'!addRemoteTemp: aTempVariableNode rootNode: rootNode "<MethodNode>"	"Add aTempVariableNode to my actualScope's sequence of	 remote temps.  If I am an optimized block then the actual	 scope is my actualScopeIfOptimized, otherwise it is myself."	remoteTempNode == nil ifTrue:		[remoteTempNode := RemoteTempVectorNode new								name: self remoteTempNodeName								index: arguments size + temporaries size								type: LdTempType								scope: 0.		 actualScopeIfOptimized			ifNil:				[self addTempNode: remoteTempNode.				 remoteTempNode definingScope: self]			ifNotNil: [actualScopeIfOptimized addHoistedTemps: { remoteTempNode }]].	remoteTempNode addRemoteTemp: aTempVariableNode encoder: rootNode encoder.	"use remove:ifAbsent: because the deferred analysis for optimized	 loops can result in the temp has already been hoised into the root."	self removeTempNode: aTempVariableNode ifAbsent: [		self actualScope removeTempNode: aTempVariableNode ifAbsent: ["should not happen"]].	^remoteTempNode! !!Parser methodsFor: 'error handling' stamp: 'ar 3/4/2010 23:39'!interactive	"Answer true if compilation is interactive"	^requestor notNil! !!BlockNode methodsFor: 'code generation (closures)' stamp: 'nice 3/1/2010 23:14'!addTempNode: aTempVariableNode	"Utilities for when we want to add some temporaries."		self makeTemporariesRemovable.	^temporaries add: aTempVariableNode! !!Compiler methodsFor: 'private' stamp: 'ar 3/4/2010 23:38'!interactive	"Answer true if compilation is interactive"	^requestor notNil! !!BlockNode methodsFor: 'code generation (closures)' stamp: 'nice 3/1/2010 23:13'!removeTempNode: aTempVariableNode ifAbsent: aBlock	"Utilities for when we want to remove some temporaries."		self makeTemporariesRemovable.	^temporaries remove: aTempVariableNode ifAbsent: aBlock	! !