"Change Set:		9362System-cmm.251System-cmm.251:- Enhanced browser invocation from a text-editor via Cmd+B.  The system is now aware that Type-Suggesting Parameter Names, a long-recognized Smalltalk best-practice, will frequently be used to spawn a browser.  Therefore, gross-motor skills (vs. fine) can be now used to spawn browsers on type-suggesting method-arguments, conserving developer time and energy.System-dtl.250:Implement Project>>showImage:named: to eliminate MVC/Morphic dependency in HTTPSocket."!!Utilities class methodsFor: 'summer97 additions' stamp: 'cmm 2/13/2010 15:47'!classFromPattern: pattern withCaption: aCaption	"If there is a class whose name exactly given by pattern, return it.	If there is only one class in the system whose name matches pattern, return it.	Otherwise, put up a menu offering the names of all classes that match pattern, and return the class chosen, else nil if nothing chosen.	This method ignores tab, space, & cr characters in the pattern"	| toMatch potentialClassNames classNames exactMatch index lines reducedIdentifiers |	(toMatch :=  pattern copyWithoutAll:			{Character space.  Character cr.  Character tab})		isEmpty ifTrue: [^ nil].	Symbol hasInterned: toMatch ifTrue:		[:patternSymbol | Smalltalk at: patternSymbol ifPresent:			[:maybeClass | (maybeClass isKindOf: Class) ifTrue: [^ maybeClass]]].	toMatch := (toMatch copyWithout: $.) asLowercase.	potentialClassNames := (Smalltalk classNames , Smalltalk traitNames) asOrderedCollection.	classNames := pattern last = $. 		ifTrue: [potentialClassNames select:					[:nm |  nm asLowercase = toMatch]]		ifFalse: [potentialClassNames select: 					[:n | n includesSubstring: toMatch caseSensitive: false]].	exactMatch := classNames detect: [:each | each asLowercase = toMatch] ifNone: [nil].	lines := OrderedCollection new.	exactMatch ifNotNil: [ lines add: 1 ].	(reducedIdentifiers := pattern suggestedTypeNames select: [ :each | potentialClassNames includes: each ]) notEmpty		ifTrue:			[ classNames addAll: reducedIdentifiers.			lines add: 1 + classNames size + reducedIdentifiers size ].	index := classNames size = 1		ifTrue:	[1]		ifFalse:	[exactMatch			ifNil: [UIManager default chooseFrom: classNames lines: lines title: aCaption]			ifNotNil: [classNames addFirst: exactMatch.				UIManager default chooseFrom: classNames lines: lines title: aCaption]].	index = 0 ifTrue: [^ nil].	^ Smalltalk at: (classNames at: index) asSymbol"	self classFromPattern: 'CharRecog' withCaption: ''	self classFromPattern: 'rRecog' withCaption: ''	self classFromPattern: 'znak' withCaption: ''	self classFromPattern: 'orph' withCaption: ''	self classFromPattern: 'TCompil' withCaption: ''"! !!String methodsFor: '*system' stamp: 'cmm 2/13/2010 15:36'!suggestedTypeNames	^ Array streamContents:		[ : stream |		self withIndexDo:		[ : eachChar : index |		eachChar isUppercase ifTrue:			[ stream nextPut: 				(self					copyFrom: index					to: self size) trimBlanks.			"Often, argument names that refer to Collections end in the letter s, which can cause the suggested type-name to not be found.  Account for this."			self last = $s				ifTrue:					[ stream nextPut:						(self							copyFrom: index							to: self size-1) trimBlanks ] ] ] ]! !!Project methodsFor: 'utilities' stamp: 'dtl 2/12/2010 20:41'!showImage: aForm named: imageName	"Show an image, possibly attached to the pointer for positioning"	self subclassResponsibility! !