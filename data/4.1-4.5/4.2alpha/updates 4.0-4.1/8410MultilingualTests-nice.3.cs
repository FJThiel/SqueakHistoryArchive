"Change Set:		8410MultilingualTests-nice.3MultilingualTests-nice.3:Tests for ByteTextConverter and also for UTF8+UTF16"!!MultiByteFileStreamTest methodsFor: 'testing' stamp: 'nice 12/8/2009 21:07'!testByteTextConverter	| strings converterClasses |	strings := {		String newFrom: ((0 to: 255) collect: [:e | e asCharacter]).	}.		converterClasses := ByteTextConverter allSubclasses.	converterClasses do: [:converterClass | 		strings do: [:string | | converter stream encoded decoded encoded2 |			converter := converterClass new.			stream := string readStream.			encoded := string select: [:e | (converter nextFromStream: stream) notNil].			stream := encoded readStream.			decoded := encoded collect: [:e | converter nextFromStream: stream].			self assert: stream atEnd.			stream := String new writeStream.			converter nextPutAll: decoded toStream: stream.			encoded2 := stream contents.			self assert: (encoded2 collect: [:e | e charCode] as: Array) = (encoded collect: [:e | e charCode] as: Array).			stream := String new writeStream.			decoded do: [:e | converter nextPut: e toStream: stream].			encoded2 := stream contents.			self assert: (encoded2 collect: [:e | e charCode] as: Array) = (encoded collect: [:e | e charCode] as: Array)]]! !!MultiByteFileStreamTest methodsFor: 'testing' stamp: 'nice 12/8/2009 21:44'!testMultiByteTextConverter	| strings converterClasses |	strings := {		String newFrom: ((0 to: 255) collect: [:e | Unicode value: e]).		String newFrom: ((0 to: 1023) collect: [:e | Unicode value: e]).	}.		converterClasses := {		UTF8TextConverter . UTF16TextConverter .		"CompoundTextConverter ."		"EUCJPTextConverter . CNGBTextConverter . ShiftJISTextConverter . EUCKRTextConverter"}.	converterClasses do: [:converterClass | | converter stream |		strings do: [:string |			converter := converterClass new.			stream := String new writeStream.			converter nextPutAll: string toStream: stream.			stream := stream contents readStream.			string do: [:e | | decoded |				decoded := converter nextFromStream: stream.				self assert: e charCode = decoded charCode].			self assert: stream atEnd.				stream := String new writeStream.			string do: [:e | converter nextPut: e toStream: stream].			stream := stream contents readStream.			string do: [:e | | decoded |				decoded := converter nextFromStream: stream.				self assert: e charCode = decoded charCode].			self assert: stream atEnd]]! !