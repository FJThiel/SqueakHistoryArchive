"Change Set:		9606ST80-ar.112ST80-ar.112:Avoid dictionary protocol in Smalltalk."!!ParagraphEditor methodsFor: 'explain' stamp: 'ar 3/5/2010 20:42'!explainClass: symbol 	"Is symbol a class variable or a pool variable?"	| class reply classes |	(model respondsTo: #selectedClassOrMetaClass)		ifFalse: [^ nil].	(class := model selectedClassOrMetaClass) ifNil: [^ nil].	"no class is selected"	(class isKindOf: Metaclass)		ifTrue: [class := class soleInstance].	classes := (Array with: class)				, class allSuperclasses.	"class variables"	reply := classes detect: [:each | (each classVarNames detect: [:name | symbol = name]					ifNone: [])					~~ nil]				ifNone: [].	reply == nil ifFalse: [^ '"is a class variable, defined in class ' , reply printString , '"\' withCRs , 'SystemNavigation new browseAllCallsOn: (' , reply printString , ' classPool associationAt: #' , symbol , ').'].	"pool variables"	classes do: [:each | (each sharedPools			detect: [:pool | (pool includesKey: symbol)					and: 						[reply := pool.						true]]			ifNone: [])			~~ nil].	reply		ifNil: [(Undeclared includesKey: symbol)				ifTrue: [^ '"is an undeclared variable.' , '"\' withCRs , 'SystemNavigation new browseAllCallsOn: (Undeclared associationAt: #' , symbol , ').']]		ifNotNil: 			[classes := WriteStream on: Array new.			self systemNavigation				allBehaviorsDo: [:each | (each sharedPools						detect: 							[:pool | 							pool == reply]						ifNone: [])						~~ nil ifTrue: [classes nextPut: each]].			"Perhaps not print whole list of classes if too long. (unlikely)"			^ '"is a pool variable from the pool ' , (Smalltalk globals keyAtIdentityValue: reply) asString , ', which is used by the following classes ' , classes contents printString , '"\' withCRs , 'SystemNavigation new browseAllCallsOn: (' , (Smalltalk globals keyAtIdentityValue: reply) asString , ' bindingOf: #' , symbol , ').'].	^ nil! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'ar 3/5/2010 20:26'!referencesToIt	"Open a references browser on the selected symbol"	| aSymbol |	self selectLine.	((aSymbol := self selectedSymbol) == nil or:		[(Smalltalk globals includesKey: aSymbol) not])			ifTrue: [^ view flash].	self terminateAndInitializeAround: [self systemNavigation browseAllCallsOn: (Smalltalk globals associationAt: self selectedSymbol)]! !!MVCProject methodsFor: 'enter' stamp: 'ar 3/5/2010 20:32'!pauseSoundPlayers	"Pause sound players, subject to preference settings"	Smalltalk at: #ScorePlayer ifPresent:[:playerClass| 		playerClass allSubInstancesDo: [:player | player pause]]! !