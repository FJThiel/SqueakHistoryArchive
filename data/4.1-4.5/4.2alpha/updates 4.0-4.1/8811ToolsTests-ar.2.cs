"Change Set:		8811ToolsTests-ar.2ToolsTests-ar.2:Making Tests unloadable: Move tests from Tools package into ToolsTests."!Object subclass: #DummyToolWorkingWithFileList	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ToolsTests-FileList'!TestCase subclass: #FileList2ModalDialogsTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ToolsTests-FileList'!TestCase subclass: #BrowserHierarchicalListTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ToolsTests-Browser'!ClassTestCase subclass: #FileListTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ToolsTests-FileList'!TestCase subclass: #DebuggerUnwindBug	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ToolsTests-Debugger'!ClassTestCase subclass: #MethodReferenceTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ToolsTests-Browser'!TestCase subclass: #BrowseTest	instanceVariableNames: 'originalBrowserClass originalHierarchyBrowserClass'	classVariableNames: ''	poolDictionaries: ''	category: 'ToolsTests-Browser'!!DummyToolWorkingWithFileList class methodsFor: 'class initialization' stamp: 'sw 2/17/2002 02:36'!serviceLoadAFilForDummyTool	"Answer a service for opening the Dummy tool"	^ SimpleServiceEntry 		provider: self 		label: 'menu label'		selector: #loadAFileForTheDummyTool:		description: 'Menu label for dummy tool'		buttonLabel: 'test'! !!FileListTest methodsFor: 'test' stamp: 'SD 11/10/2001 21:52'!testToolRegistered	"(self selector: #testToolRegistered) debug"	self assert: (FileList registeredFileReaderClasses includes: DummyToolWorkingWithFileList)! !!FileList2ModalDialogsTest methodsFor: 'running' stamp: 'sd 11/20/2005 21:27'!testModalFileSelectorForSuffixes	| window fileList2 |	window := FileList2 morphicViewFileSelectorForSuffixes: nil.	window openCenteredInWorld.	fileList2 := window valueOfProperty: #fileListModel.	fileList2 fileListIndex: 1.	window delete.	self assert: fileList2 getSelectedFile isNil.	fileList2 okHit.	self deny: fileList2 getSelectedFile isNil! !!FileList2ModalDialogsTest methodsFor: 'running' stamp: 'sd 11/20/2005 21:27'!testModalFileSelector	| window fileList2 |	window := FileList2 morphicViewFileSelector.	window openCenteredInWorld.	fileList2 := window valueOfProperty: #fileListModel.	fileList2 fileListIndex: 1.	window delete.	self assert: fileList2 getSelectedFile isNil.	fileList2 okHit.	self deny: fileList2 getSelectedFile isNil! !!BrowseTest methodsFor: 'running' stamp: 'mu 3/11/2004 15:57'!setUp	| systemNavigation |	systemNavigation := SystemNavigation default.	originalBrowserClass := systemNavigation browserClass.	originalHierarchyBrowserClass := systemNavigation hierarchyBrowserClass.		 systemNavigation browserClass: nil.	 systemNavigation hierarchyBrowserClass: nil.		! !!FileListTest methodsFor: 'test' stamp: 'SD 11/10/2001 21:53'!testMenuReturned	"(self selector: #testToolRegistered) debug"	self assert: (FileList registeredFileReaderClasses includes: DummyToolWorkingWithFileList)! !!BrowseTest methodsFor: 'private' stamp: 'mu 3/6/2004 15:27'!ensureMorphic	self isMorphic ifFalse: [self error: 'This test should be run in Morphic'].! !!BrowseTest methodsFor: 'private' stamp: 'mu 3/6/2004 15:26'!isMorphic	^Smalltalk isMorphic! !!BrowseTest methodsFor: 'testing' stamp: 'mu 3/11/2004 15:52'!testBrowseHierarchyInstance	"self debug: #testBrowseHierarchyInstance"	| browsersBefore browsersAfter opened |	self ensureMorphic.		browsersBefore := self currentHierarchyBrowsers.	1 browseHierarchy.	browsersAfter := self currentHierarchyBrowsers.		self assert:  (browsersAfter size  = (browsersBefore size + 1)).	opened := browsersAfter removeAll: browsersBefore; yourself.	self assert:  (opened size = 1).	opened := opened asArray first.	self assert: (opened model selectedClass == SmallInteger).		opened delete			! !!BrowseTest methodsFor: 'testing' stamp: 'mu 3/6/2004 15:44'!testBrowseMetaclass	"self debug: #testBrowseMetaclass"	| browsersBefore browsersAfter opened |	self ensureMorphic.		browsersBefore := self currentBrowsers.	1 class class browse.	browsersAfter := self currentBrowsers.		self assert:  (browsersAfter size  = (browsersBefore size + 1)).	opened := browsersAfter removeAll: browsersBefore; yourself.	self assert:  (opened size = 1).	opened := opened asArray first.	self assert: (opened model selectedClass == Metaclass).		opened delete			! !!BrowseTest methodsFor: 'testing' stamp: 'mu 3/6/2004 15:43'!testBrowseClass	"self debug: #testBrowseClass"	| browsersBefore browsersAfter opened |	self ensureMorphic.		browsersBefore := self currentBrowsers.	1 class browse.	browsersAfter := self currentBrowsers.		self assert:  (browsersAfter size  = (browsersBefore size + 1)).	opened := browsersAfter removeAll: browsersBefore; yourself.	self assert:  (opened size = 1).	opened := opened asArray first.	self assert: (opened model selectedClass == SmallInteger).		opened delete			! !!MethodReferenceTest methodsFor: 'Running' stamp: 'sd 11/20/2005 21:27'!testNotEquals	| aMethodReference anotherMethodReference |	aMethodReference := MethodReference new.	anotherMethodReference := MethodReference new.	""	aMethodReference setStandardClass: String methodSymbol: #foo.	anotherMethodReference setStandardClass: String class methodSymbol: #foo.	" 	differente classes, same selector -> no more equals"	self		shouldnt: [aMethodReference = anotherMethodReference].	" 	same classes, diferente selector -> no more equals"	anotherMethodReference setStandardClass: String methodSymbol: #bar.	self		shouldnt: [aMethodReference = anotherMethodReference] ! !!DebuggerUnwindBug methodsFor: 'as yet unclassified' stamp: 'ar 3/7/2003 01:41'!testUnwindDebugger	"test if unwind blocks work properly when a debugger is closed"	| sema process debugger top |	sema := Semaphore forMutualExclusion.	self assert: sema isSignaled.	process := [sema critical:[sema wait]] forkAt: Processor userInterruptPriority.	self deny: sema isSignaled.	"everything set up here - open a debug notifier"	debugger := Debugger openInterrupt: 'test' onProcess: process.	"get into the debugger"	debugger debug.	top := debugger topView.	"set top context"	debugger toggleContextStackIndex: 1.	"close debugger"	top delete.	"and see if unwind protection worked"	self assert: sema isSignaled.! !!FileListTest methodsFor: 'initialize' stamp: 'SD 11/10/2001 21:49'!tearDown	DummyToolWorkingWithFileList unregister.! !!DummyToolWorkingWithFileList class methodsFor: 'class initialization' stamp: 'sd 2/6/2002 21:29'!fileReaderServicesForFile: fullName suffix: suffix	^ (suffix = 'kkk')		ifTrue: [ self services]		ifFalse: [#()] ! !!BrowserHierarchicalListTest methodsFor: 'tests' stamp: 'rkrk 8/24/2009 05:10'!testListClassesHierarchically1	| result classes category |	category := 'Collections-Abstract'.	result := self hierarchicalClassListForCategory: category.	self assert: (SystemOrganization listAtCategoryNamed: category) size equals: result size.	classes := result collect: [:ea | self nameToClass: ea].	classes withIndexDo: [:ea : i |		classes 			from: 1 to: i			do: [:other | self assertCorrectOrderOf: other followedBy: ea in: classes]].! !!DummyToolWorkingWithFileList class methodsFor: 'class initialization' stamp: 'sd 2/1/2002 22:32'!services 	^ Array with: self serviceLoadAFilForDummyTool! !!BrowserHierarchicalListTest methodsFor: 'tests' stamp: 'rkrk 8/24/2009 05:09'!testListClassesHierarchically2	| result classes category |	category := 'Tools-Browser'.	result := self hierarchicalClassListForCategory: category.	self assert: (SystemOrganization listAtCategoryNamed: category) size equals: result size.	classes := result collect: [:ea | self nameToClass: ea].	classes withIndexDo: [:ea : i |		classes 			from: 1 to: i			do: [:other | self assertCorrectOrderOf: other followedBy: ea in: classes]].! !!DebuggerUnwindBug methodsFor: 'as yet unclassified' stamp: 'ar 3/7/2003 01:38'!testUnwindBlock	"test if unwind blocks work properly"	| sema process |	sema := Semaphore forMutualExclusion.	self assert: sema isSignaled.	"deadlock on the semaphore"	process := [sema critical:[sema wait]] forkAt: Processor userInterruptPriority.	self deny: sema isSignaled.	"terminate process"	process terminate.	self assert: sema isSignaled.! !!DummyToolWorkingWithFileList class methodsFor: 'class initialization' stamp: 'sd 2/6/2002 21:46'!initialize	"self initialize"	FileList registerFileReader: self! !!FileListTest methodsFor: 'test' stamp: 'stephaneducasse 10/9/2005 20:52'!testAllRegisteredServices	"(self selector: #testAllRegisteredServices) debug"	self shouldnt: [FileList allRegisteredServices] raise: Error! !!BrowseTest methodsFor: 'private' stamp: 'mu 3/6/2004 15:41'!currentBrowsers	^ (ActiveWorld submorphs		select: [:each | (each isKindOf: SystemWindow)				and: [each model isKindOf: Browser]]) asSet! !!FileList2ModalDialogsTest methodsFor: 'running' stamp: 'sd 11/20/2005 21:27'!testModalFolderSelector	| window fileList2 |	window := FileList2 morphicViewFolderSelector.	fileList2 := window model.	window openInWorld: self currentWorld extent: 300@400.	fileList2 fileListIndex: 1.	window delete.	self assert: fileList2 getSelectedDirectory withoutListWrapper isNil.	fileList2 okHit.	self deny: fileList2 getSelectedDirectory withoutListWrapper isNil! !!BrowseTest methodsFor: 'testing' stamp: 'mu 3/11/2004 16:00'!testBrowseHierarchyMataclass	"self debug: #testBrowseHierarchyMataclass"	| browsersBefore browsersAfter opened |	self ensureMorphic.		browsersBefore := self currentHierarchyBrowsers.	1 class class browseHierarchy.	browsersAfter := self currentHierarchyBrowsers.		self assert:  (browsersAfter size  = (browsersBefore size + 1)).	opened := browsersAfter removeAll: browsersBefore; yourself.	self assert:  (opened size = 1).	opened := opened asArray first.	self assert: (opened model selectedClass == Metaclass).		opened delete			! !!BrowseTest methodsFor: 'running' stamp: 'mu 3/11/2004 15:57'!tearDown	| systemNavigation |	systemNavigation := SystemNavigation default.	 systemNavigation browserClass: originalBrowserClass.	 systemNavigation hierarchyBrowserClass: originalHierarchyBrowserClass.! !!FileListTest methodsFor: 'test' stamp: 'SD 11/11/2001 13:54'!testToolRegisteredUsingInterface	"(self selector: #testToolRegisteredUsingInterface) debug"	self assert: (FileList isReaderNamedRegistered: #DummyToolWorkingWithFileList)! !!BrowserHierarchicalListTest methodsFor: 'helper' stamp: 'rkrk 8/24/2009 04:32'!nameToClass: classNameWithIndent	^ Smalltalk classNamed: classNameWithIndent withoutLeadingBlanks asSymbol! !!DummyToolWorkingWithFileList class methodsFor: 'class initialization' stamp: 'SD 11/15/2001 22:21'!unload	FileList unregisterFileReader: self ! !!BrowserHierarchicalListTest methodsFor: 'tests' stamp: 'nice 12/26/2009 00:33'!testListClassesHierarchicallyIndent	| result dict  |	result := self hierarchicalClassListForCategory: 'Tools-Browser'.	"Create class->indent mapping"	dict := result inject: Dictionary new into: [:classIndentMapping :className |		| indent |		indent := className count: [:char | char = Character space or: [char = Character tab]].		classIndentMapping at: (self nameToClass: className) put: indent.		classIndentMapping].	"assert that indent of class is larger than indent of superclass"	dict keysAndValuesDo: [:class :myIndent |		dict at: class superclass ifPresent: [:superIndent |			self assert: myIndent > superIndent]].! !!DummyToolWorkingWithFileList class methodsFor: 'class initialization' stamp: 'SD 11/14/2001 22:12'!loadAFileForTheDummyTool: aFileListOrAPath		"attention. if the file list selects a file the argument will be a fullpath of the selected file else it will pass the filelist itself"! !!DummyToolWorkingWithFileList class methodsFor: 'class initialization' stamp: 'SD 11/10/2001 21:49'!unregister	FileList unregisterFileReader: self.	! !!FileListTest methodsFor: 'test' stamp: 'stephaneducasse 10/9/2005 20:50'!testService	"a stupid test to check that the class returns a service"	"(self selector: #testService) debug"		| service |	service := (DummyToolWorkingWithFileList fileReaderServicesForFile: 'abab.kkk' suffix: 'kkk') first.	self assert: (self checkIsServiceIsFromDummyTool: service).	service := (DummyToolWorkingWithFileList fileReaderServicesForFile: 'zkk.gz' suffix: 'gz').	self assert: service isEmpty! !!FileListTest methodsFor: 'private' stamp: 'sd 2/1/2002 23:04'!checkIsServiceIsFromDummyTool: service		^ (service instVarNamed: #provider) = DummyToolWorkingWithFileList	 	& service label = 'menu label'		& (service instVarNamed: #selector) = #loadAFileForTheDummyTool:! !!FileListTest methodsFor: 'test' stamp: 'nk 11/30/2002 14:55'!testServicesForFileEnding	"(self selector: #testServicesForFileEnding) debug"	self assert: (((FileList new directory: FileDirectory default; yourself) itemsForFile: 'aaa.kkk') anySatisfy: [ :ea | self checkIsServiceIsFromDummyTool: ea ]).! !!FileListTest methodsFor: 'initialize' stamp: 'SD 11/10/2001 21:48'!setUp	DummyToolWorkingWithFileList initialize.! !!BrowserHierarchicalListTest methodsFor: 'helper' stamp: 'rkrk 8/24/2009 05:05'!hierarchicalClassListForCategory: category	| b index |	b := Browser new.	index := b systemCategoryList indexOf: category.	b systemCategoryListIndex: index.	^ b hierarchicalClassList.! !!MethodReferenceTest methodsFor: 'Running' stamp: 'sd 11/20/2005 21:27'!testEquals	| aMethodReference anotherMethodReference |	aMethodReference := MethodReference new.	anotherMethodReference := MethodReference new.	" 	two fresh instances should be equals between them"	self		should: [aMethodReference = anotherMethodReference].	self		should: [aMethodReference hash = anotherMethodReference hash].	" 	two instances representing the same method (same class and  	same selector) should be equals"	aMethodReference setStandardClass: String methodSymbol: #foo.	anotherMethodReference setStandardClass: String methodSymbol: #foo.	self		should: [aMethodReference = anotherMethodReference].	self		should: [aMethodReference hash = anotherMethodReference hash] ! !!FileList2ModalDialogsTest methodsFor: 'running' stamp: 'sd 11/20/2005 21:27'!testModalFolderSelectorForProjectLoad	| window fileList2 w |	window := FileList2		morphicViewProjectLoader2InWorld: self currentWorld		reallyLoad: false.	fileList2 := window valueOfProperty: #FileList.	w := self currentWorld.	window position: w topLeft + (w extent - window extent // 2).	window openInWorld: w.	window delete.	self assert: fileList2 getSelectedDirectory withoutListWrapper isNil.	fileList2 okHit.	self deny: fileList2 getSelectedDirectory withoutListWrapper isNil! !!BrowseTest methodsFor: 'testing' stamp: 'mu 3/11/2004 15:56'!testBrowseHierarchyClass	"self debug: #testBrowseHierarchyClass"	| browsersBefore browsersAfter opened |	self ensureMorphic.		browsersBefore := self currentHierarchyBrowsers.	1 class browseHierarchy.	browsersAfter := self currentHierarchyBrowsers.		self assert:  (browsersAfter size  = (browsersBefore size + 1)).	opened := browsersAfter removeAll: browsersBefore; yourself.	self assert:  (opened size = 1).	opened := opened asArray first.	self assert: (opened model selectedClass == SmallInteger).		opened delete			! !!DebuggerUnwindBug methodsFor: 'as yet unclassified' stamp: 'ar 3/7/2003 01:40'!testUnwindDebuggerWithStep	"test if unwind blocks work properly when a debugger is closed"	| sema process debugger top |	sema := Semaphore forMutualExclusion.	self assert: sema isSignaled.	process := [sema critical:[sema wait]] forkAt: Processor userInterruptPriority.	self deny: sema isSignaled.	"everything set up here - open a debug notifier"	debugger := Debugger openInterrupt: 'test' onProcess: process.	"get into the debugger"	debugger debug.	top := debugger topView.	"set top context"	debugger toggleContextStackIndex: 1.	"do single step"	debugger doStep.	"close debugger"	top delete.	"and see if unwind protection worked"	self assert: sema isSignaled.! !!BrowseTest methodsFor: 'private' stamp: 'mu 3/11/2004 15:52'!currentHierarchyBrowsers	^ (ActiveWorld submorphs		select: [:each | (each isKindOf: SystemWindow)				and: [each model isKindOf: HierarchyBrowser]]) asSet! !!BrowserHierarchicalListTest methodsFor: 'assertion' stamp: 'rkrk 8/24/2009 05:03'!assertCorrectOrderOf: classB followedBy: classA in: classCollection	"classB comes before classA. Assert that classB is a superclass of classB or that 	a common superclass is in front of both"	| commonSuperclasses commonSuperclass classAIndex classBIndex superIndex |	classA == classB ifTrue: [^ self].	(classA inheritsFrom: classB) ifTrue: [^ self].	commonSuperclasses := classA withAllSuperclasses intersection: classB withAllSuperclasses.	commonSuperclass := commonSuperclasses first.	(classCollection includes: commonSuperclass) ifFalse: [^ self].	classAIndex := classCollection indexOf: classA.	classBIndex := classCollection indexOf: classB.	superIndex := classCollection indexOf: commonSuperclass.	(superIndex < classAIndex and: [superIndex < classBIndex]) ifTrue: [^self].	self fail.! !!BrowseTest methodsFor: 'testing' stamp: 'mu 3/6/2004 15:43'!testBrowseInstance	"self debug: #testBrowseInstance"	| browsersBefore browsersAfter opened |	self ensureMorphic.		browsersBefore := self currentBrowsers.	1 browse.	browsersAfter := self currentBrowsers.		self assert:  (browsersAfter size  = (browsersBefore size + 1)).	opened := browsersAfter removeAll: browsersBefore; yourself.	self assert:  (opened size = 1).	opened := opened asArray first.	self assert: (opened model selectedClass == SmallInteger).		opened delete			! !DummyToolWorkingWithFileList initialize!