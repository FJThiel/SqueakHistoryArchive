"Change Set:		9801System-nice.300System-nice.300:1) replace un-implemented Preferences suppressCheckForSlips with existing Preferences checkForSlips ( http://bugs.squeak.org/view.php?id=7483 )2) add a postscript to clean-up obsolete MethodPropertiesSystem-nice.299:1) fix a few _ assignments2) allUnsentMessagesIn: ->  allUnSentMessagesIn: http://bugs.squeak.org/view.php?id=74833) let nextPutAll: answer it's argument"!Object subclass: #CodeLoader	instanceVariableNames: 'baseURL sourceFiles segments publicKey'	classVariableNames: 'DefaultBaseURL DefaultKey'	poolDictionaries: ''	category: 'System-Download'!ReferenceStream subclass: #SmartRefStream	instanceVariableNames: 'structures steady reshaped renamed renamedConv superclasses progressBar objCount classInstVars'	classVariableNames: 'ScannedObject'	poolDictionaries: ''	category: 'System-Object Storage'!Stream subclass: #DataStream	instanceVariableNames: 'byteStream topCall basePos'	classVariableNames: 'TypeMap'	poolDictionaries: ''	category: 'System-Object Storage'!Object subclass: #ImageSegment	instanceVariableNames: 'arrayOfRoots segment outPointers state segmentName fileName endMarker userRootCnt renamedClasses'	classVariableNames: 'BiggestFileNumber RecentlyRenamedClasses'	poolDictionaries: ''	category: 'System-Object Storage'!DataStream subclass: #ReferenceStream	instanceVariableNames: 'references objects currentReference fwdRefEnds blockers skipping insideASegment'	classVariableNames: 'RefTypes'	poolDictionaries: ''	category: 'System-Object Storage'!!AutoStart class methodsFor: 'updating' stamp: 'mir 11/13/2003 19:09'!checkForUpdates	| availableUpdate updateServer |	World 		ifNotNil: [			World install.			ActiveHand position: 100@100].	HTTPClient isRunningInBrowser		ifFalse: [^self processUpdates].	availableUpdate := (AbstractLauncher extractParameters		at: 'UPDATE'		ifAbsent: [''] ) asInteger.	availableUpdate		ifNil: [^false].	updateServer := AbstractLauncher extractParameters		at: 'UPDATESERVER'		ifAbsent: [AbstractLauncher extractParameters		at: 'UPDATE_SERVER'		ifAbsent: ['Squeakland']].	Utilities setUpdateServer: updateServer.	^SystemVersion checkAndApplyUpdates: availableUpdate! !!SmartRefStream methodsFor: 'class changed shape' stamp: 'tk 6/7/2001 13:02'!writeConversionMethod: sel class: newClass was: oldName fromInstVars: oldList to: newList	"The method convertToCurrentVersion:refStream: was not found in newClass.  Write a default conversion method for the author to modify."	| code newOthers oldOthers copied |	code := WriteStream on: (String new: 500).	code nextPutAll: 'convertToCurrentVersion: varDict refStream: smartRefStrm'; cr; tab.	newOthers := newList asOrderedCollection "copy".	oldOthers := oldList asOrderedCollection "copy".	copied := OrderedCollection new.	newList do: [:instVar |		(oldList includes: instVar) ifTrue: [			instVar isInteger ifFalse: [copied add: instVar].			newOthers remove: instVar.			oldOthers remove: instVar]].	code nextPutAll: '"These variables are automatically stored into the new instance '.	code nextPutAll: copied asArray printString; nextPut: $. .	code cr; tab; nextPutAll: 'This method is for additional changes.'; 		nextPutAll: ' Use statements like (foo := varDict at: ''foo'')."'; cr; cr; tab.	(newOthers size = 0) & (oldOthers size = 0) ifTrue: [^ self].		"Instance variables are the same.  Only the order changed.  No conversion needed."	(newOthers size > 0) ifTrue: [code nextPutAll: '"New variables: ', newOthers asArray printString, '  If a non-nil value is needed, please assign it."\' withCRs].	(oldOthers size > 0) ifTrue: [code nextPutAll: '	"These are going away ', oldOthers asArray printString, '.  Possibly store their info in some other variable?"'].	code cr; tab.	code nextPutAll: '^ super convertToCurrentVersion: varDict refStream: smartRefStrm'.	newClass compile: code contents classified: 'object fileIn'.	"If you write a conversion method beware that the class may need a version number change.  This only happens when two conversion methods in the same class have the same selector name.  (A) The inst var lists of the new and old versions intials as some older set of new and old inst var lists.  or (B) Twice in a row, the class needs a conversion method, but the inst vars stay the same the whole time.  (For an internal format change.)	If either is the case, fileouts already written with the old (wrong) version number, say 2.  Your method must be able to read files that say version 2 but are really 3, until you expunge the erroneous version 2 files from the universe." ! !!Behavior methodsFor: '*system-support' stamp: 'wiz 2/12/2010 18:58'!allUnsentMessages	"Answer an array of all the messages defined by the receiver that are not sent anywhere in the system."	^ SystemNavigation default allUnSentMessagesIn: self selectors! !!AutoStart class methodsFor: 'updating' stamp: 'mir 3/5/2004 20:43'!checkForPluginUpdate	| pluginVersion updateURL |	World 		ifNotNil: [			World install.			ActiveHand position: 100@100].	HTTPClient isRunningInBrowser		ifFalse: [^false].	pluginVersion := AbstractLauncher extractParameters		at: (SmalltalkImage current platformName copyWithout: Character space) asUppercase		ifAbsent: [^false].	updateURL := AbstractLauncher extractParameters		at: 'UPDATE_URL'		ifAbsent: [^false].	^SystemVersion check: pluginVersion andRequestPluginUpdate: updateURL! !!DummyStream methodsFor: 'accessing' stamp: 'nice 3/17/2010 20:31'!nextPutAll: aByteArray	"do nothing"		^aByteArray! !!Project class methodsFor: 'squeaklet on server' stamp: 'ar 4/10/2005 18:51'!mostRecent: projName onServer: aServerDirectory	| stem list max goodName triple num stem1 stem2 rawList nothingFound unEscName |	"Find the exact fileName of the most recent version of project with the stem name of projName.  Names are of the form 'projName|mm.pr' where mm is a mime-encoded integer version number.	File names may or may not be HTTP escaped, %20 on the server."	self flag: #bob.		"do we want to handle unversioned projects as well?"	nothingFound := {nil. -1}.	aServerDirectory ifNil: [^nothingFound].	"23 sept 2000 - some old projects have periods in name so be more careful"	unEscName := projName unescapePercents.	triple := Project parseProjectFileName: unEscName.	stem := triple first.	rawList := aServerDirectory fileNames.	rawList isString ifTrue: [self inform: 'server is unavailable'. ^nothingFound].	list := rawList collect: [:nnn | nnn unescapePercents].	max := -1.  goodName := nil.	list withIndexDo: [:aName :ind |		(aName beginsWith: stem) ifTrue: [			num := (Project parseProjectFileName: aName) second.			num > max ifTrue: [max := num.  goodName := (rawList at: ind)]]].	max = -1 ifFalse: [^ Array with: goodName with: max].	"try with underbar for spaces on server"	(stem includes: $ ) ifTrue: [		stem1 := stem copyReplaceAll: ' ' with: '_'.		list withIndexDo: [:aName :ind |			(aName beginsWith: stem1) ifTrue: [				num := (Project parseProjectFileName: aName) second.				num > max ifTrue: [max := num.  goodName := (rawList at: ind)]]]].	max = -1 ifFalse: [^ Array with: goodName with: max].		"try without the marker | "	stem1 := stem allButLast, '.pr'.	stem2 := stem1 copyReplaceAll: ' ' with: '_'.	"and with spaces replaced"	list withIndexDo: [:aName :ind |		(aName beginsWith: stem1) | (aName beginsWith: stem2) ifTrue: [			(triple := aName findTokens: '.') size >= 2 ifTrue: [				max := 0.  goodName := (rawList at: ind)]]].	"no other versions"	max = -1 ifFalse: [^ Array with: goodName with: max].	^nothingFound		"no matches"! !!ChangeSet methodsFor: 'fileIn/Out' stamp: 'wiz 2/12/2010 19:01'!mailOut	"Email a compressed version of this changeset to the squeak-dev list, so that it can be shared with everyone.  (You will be able to edit the email before it is sent.)"	| userName message slips |	userName := MailSender userName.	self checkForConversionMethods.	message := Cursor write showWhile: [self buildMessageForMailOutWithUser: userName].	MailSender sendMessage: message.	Preferences checkForSlips ifFalse: [^ self].	slips := self checkForSlips.	(slips size > 0 and: [self confirm: 'Methods in this fileOut have haltsor references to the Transcriptor other ''slips'' in them.Would you like to browse them?'])		ifTrue: [self systemNavigation browseMessageList: slips name: 'Possible slips in ' , name]! !!ImageSegment class methodsFor: 'fileIn/Out' stamp: 'sd 9/30/2003 14:02'!folder	| im |	"Full path name of segments folder.  Be sure to duplicate and rename the folder when you duplicate and rename an image.  Is $_ legal in all file systems?"	im := SmalltalkImage current imageName.	^ (im copyFrom: 1 to: im size - 6 "'.image' size"), '_segs'! !