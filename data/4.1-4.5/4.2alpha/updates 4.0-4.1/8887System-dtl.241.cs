"Change Set:		8887System-dtl.241System-dtl.241:Add Project>>dispatchTo:addPrefixAndSend:withArguments:Allow classes with MVC and Morphic dependencies to dispatch through Project current to invoke appropriate methods. Prevents accumulation of unrelated implementations in Project.System-nice.223:move a temp assignment outside block scopeSystem-ul.224:- decrease space usage of TextDiffBuilderSystem-ar.226:Fixes a bug in mapUniclasses after unloading Etoys.System-ar.227:Merge System-ar.225System-jcg.228:Add PseudoClass>>includesSelector: to patch a MessageNotUnderstood encountered while filing in code from a file.System-ar.229:Replace offerMenuFrom:shifted: by offerMenu:from:shifted: which takes an additional argument, the model to retrieve the menu from and perform the actions on.System-ul.230:- remove cr's from the patch sequence built by TextDiffBuilder >> #buildPatchSequence for backwards compatibility- do not print extra cr's if the line ends with crlf in TextDiffBuilder >> #print:withAttributes:on: System-ul.231:- code criticsSystem-dtl.232:Change Set:		compressSources-bfDate:			14 January 2010Author:			Bert FreudenbergFix compressing sources to preserve utf8 encoding. Fix reading chunks to decode utf8.TODO: figure out if anything else than chunk reading is used. decode utf8 there, too.System-bf.233:- set local timezone offset on startup from LocalePlugin- provide various default values in case LocalePlugin is absentSystem-nice.234:use methodsDo: or selectorsAndMethodsDo: to fast up some browsingSystem-nice.235:Oops, correct my last bugSystem-nice.236:Use readOnlyFileNamed:do: patternUse literal ByteArraySystem-nice.237:More ByteArray literalsSystem-ar.238:Provide a script via Smalltalk unloadAllKnownPackages that can be used to unload all packages that we know how to un- and reload.System-dtl.239:Remove all MVC BitEditor references from non-MVC packages.  Form>>bitEdit to Project class>>bitEdit:  Form>>bitEditAt:scale: to Project class>>bitEdit:at:scale:  BitEditor class>>locateMagnifiedView:scale: to Rectangle class>>locateMagnifiedView:scale:System-dtl.240:Remove remaining dependencies on ST80-Editors from non-MVC packages.Remove explicit references to ST80 classes from ModalSystemWindow and various utility methods."!!DigitalSignatureAlgorithm class methodsFor: 'examples' stamp: 'nice 1/12/2010 09:07'!testExamplesFromDisk	"verify messages from file on disk"	"Note: Secure random numbers are needed for key generation and message signing, but not for signature verification. There is no need to call initRandomFromUser if you are merely checking a signature."	"DigitalSignatureAlgorithm testExamplesFromDisk"	FileStream readOnlyFileNamed: 'dsa.test.out' do: [:file |		| msg  sig publicKey |		[file atEnd] whileFalse: [			sig := file nextChunk.			msg := file nextChunk.			publicKey := Compiler evaluate: file nextChunk.			(self verify: sig isSignatureOf: msg publicKey: publicKey) ifTrue: [				Transcript show: 'SUCCESS: ',msg; cr.			] ifFalse: [				self error: 'ERROR!! Signature verification failed'			].		].	]! !!Locale methodsFor: 'system primitives' stamp: 'bf 8/26/2008 14:57'!primLanguage	"returns string with language tag according to ISO 639"	<primitive:'primitiveLanguage' module: 'LocalePlugin'>	^'en'! !!Project methodsFor: 'editors' stamp: 'dtl 1/23/2010 18:24'!bitEdit: aForm	"Create and schedule a view located in an area designated by the user 	that contains a view of aForm magnified by 8@8 that can be modified using	a bit editor. It also contains a view of the original form."	self subclassResponsibility! !!Project methodsFor: 'editors' stamp: 'dtl 1/23/2010 18:34'!bitEdit: aForm at: magnifiedFormLocation scale: scaleFactor 	"Create and schedule a view whose top left corner is magnifiedLocation 	and that contains a view of aForm magnified by scaleFactor that  can be	modified using the Bit Editor. It also contains a view of the original form."	self subclassResponsibility! !!Locale class methodsFor: 'system startUp' stamp: 'bf 1/15/2010 12:33'!startUp: resuming	| newID |	resuming ifFalse: [^self].	DateAndTime localTimeZone: (TimeZone		offset:  (Duration minutes: self current offsetLocalToUTC)		name: 'Local Time'		abbreviation: 'LT').	(Preferences valueOfFlag: #useLocale)		ifTrue: [			newID := self current determineLocaleID.			newID ~= LocaleID current				ifTrue: [self switchToID: newID]]! !!SystemNavigation methodsFor: 'query' stamp: 'nice 1/15/2010 23:01'!allUnimplementedCalls	"Answer an Array of each message that is sent by an expression in a  	method but is not implemented by any object in the system."	| aStream all |	all := self allImplementedMessages.	aStream := WriteStream				on: (Array new: 50).	Cursor execute		showWhile: [self				allBehaviorsDo: [:cl | cl						selectorsAndMethodsDo: [:sel :method |							| secondStream | 							secondStream := WriteStream										on: (String new: 5).							method messages								do: [:m | (all includes: m)										ifFalse: [secondStream nextPutAll: m;												 space]].							secondStream position = 0								ifFalse: [aStream nextPut: cl name , ' ' , sel , ' calls: ' , secondStream contents]]]].	^ aStream contents! !!SystemDictionary methodsFor: 'shrinking' stamp: 'nice 1/15/2010 22:49'!abandonTempNames	"Replaces every method by a copy with no source pointer or	encoded temp names."	"Smalltalk abandonTempNames"	| continue oldMethods newMethods n |	continue := self confirm: '-- CAUTION --If you have backed up your system andare prepared to face the consequences ofabandoning all source code, hit Yes.If you have any doubts, hit No,to back out with no harm done.'.	continue		ifFalse: [^ self inform: 'Okay - no harm done'].	self forgetDoIts; garbageCollect.	oldMethods := OrderedCollection new.	newMethods := OrderedCollection new.	n := 0.	'Removing temp names to save space...'		displayProgressAt: Sensor cursorPoint		from: 0		to: CompiledMethod instanceCount		during: [:bar | self systemNavigation				allBehaviorsDo: [:cl | cl methodsDo: [:m | 							bar value: (n := n + 1).							oldMethods addLast: m.							newMethods								addLast: (m copyWithTrailerBytes: #(0 ))]]].	oldMethods asArray elementsExchangeIdentityWith: newMethods asArray.	SmalltalkImage current closeSourceFiles.	self flag: #shouldUseAEnsureBlockToBeSureThatTheFileIsClosed.	"sd: 17 April 2003"	Preferences disable: #warnIfNoChangesFile.	Preferences disable: #warnIfNoSourcesFile! !!Locale methodsFor: 'system primitives' stamp: 'bf 8/26/2008 15:05'!primShortDateFormat	"Returns the short date format	d day, m month, y year,	double symbol is null padded, single not padded (m=6, mm=06)	dddd weekday	mmmm month name"	<primitive:'primitiveShortDateFormat' module: 'LocalePlugin'>	^'m/d/yy'! !!Project methodsFor: 'editors' stamp: 'dtl 1/24/2010 11:26'!editCharacter: character ofFont: strikeFont	"Open a bit editor on a character in the given strike font."	self subclassResponsibility ! !!SystemNavigation methodsFor: 'query' stamp: 'nice 1/15/2010 23:02'!allUnimplementedNonPrimitiveCalls	"Answer an Array of each message that is sent by an expression in a  	method but is not implemented by any object in the system."	| aStream all |	all := self systemNavigation allImplementedMessages.	aStream := WriteStream				on: (Array new: 50).	Cursor execute		showWhile: [self systemNavigation				allBehaviorsDo: [:cl | cl						selectorsAndMethodsDo: [:sel :meth |							| secondStream | 							secondStream := WriteStream										on: (String new: 5).							meth primitive = 0 ifTrue: [								meth messages									do: [:m | (all includes: m)											ifFalse: [secondStream nextPutAll: m;													 space]].								secondStream position = 0									ifFalse: [aStream nextPut: cl name , ' ' , sel , ' calls: ' , secondStream contents]]]]].	^ aStream contents! !!CodeLoader class methodsFor: 'utilities' stamp: 'nice 1/15/2010 22:55'!exportCodeSegment: exportName classes: aClassList keepSource: keepSources	"Code for writing out a specific category of classes as an external image segment.  Perhaps this should be a method."	| is oldMethods newMethods classList symbolHolder fileName |	keepSources		ifTrue: [			self confirm: 'We are going to abandon sources.Quit without saving after this has run.' orCancel: [^self]].	classList := aClassList asArray.	"Strong pointers to symbols"	symbolHolder := Symbol allSymbols.	oldMethods := OrderedCollection new: classList size * 150.	newMethods := OrderedCollection new: classList size * 150.	keepSources		ifTrue: [			classList do: [:cl |				cl selectorsAndMethodsDo:					[:selector :m |					| oldCodeString methodNode |					m fileIndex > 0 ifTrue:						[oldCodeString := cl sourceCodeAt: selector.						methodNode := cl compilerClass new											parse: oldCodeString in: cl notifying: nil.						oldMethods addLast: m.						newMethods addLast: (m copyWithTempsFromMethodNode: methodNode)]]]].	oldMethods asArray elementsExchangeIdentityWith: newMethods asArray.	oldMethods := newMethods := nil.	Smalltalk garbageCollect.	is := ImageSegment new copyFromRootsForExport: classList.	"Classes and MetaClasses"	fileName := FileDirectory fileName: exportName extension: ImageSegment fileExtension.	is writeForExport: fileName.	self compressFileNamed: fileName! !!SystemNavigation methodsFor: 'query' stamp: 'nice 1/15/2010 23:00'!allPrimitiveMethodsInCategories: aList 	"Answer an OrderedCollection of all the methods that are implemented by 	primitives in the given categories. 1/26/96 sw"	"SystemNavigation new allPrimitiveMethodsInCategories:  	#('Collections-Streams' 'Files-Streams' 'Files-Abstract' 'Files-Macintosh')"	| aColl |	aColl := OrderedCollection new: 200.	Cursor execute		showWhile: [self				allBehaviorsDo: [:aClass | (aList includes: (SystemOrganization categoryOfElement: aClass theNonMetaClass name asString) asString)						ifTrue: [aClass								selectorsAndMethodsDo: [:sel :method | 									method primitive ~= 0										ifTrue: [aColl addLast: aClass name , ' ' , sel , ' ' , method primitive printString]]]]].	^ aColl! !!TextDiffBuilder methodsFor: 'private' stamp: 'ul 1/6/2010 06:04'!lcsFor: xFilteredLines and: yFilteredLines	"I find one of the longest common subsequences of my the arguments. I assume that none of my arguments are empty. I return nil or an Array which represents a list. The first two elements are the matching line numbers, the last is the next node in the list or nil if there are no more elements. The list containts the longest common subsequence. I'm a modified version of the greedy lcs algorithm from the 6th page of 'An O(ND) Difference Algorithm and Its Variations (1986)' by Eugene W. Myers"	| n m v lcss max |	n := xFilteredLines size.	m := yFilteredLines size.	max := m + n.	v := Array new: 2 * max + 1.	v at: max + 2 put: 0.	lcss := Array new: 2 * max + 1.	0 to: max do: [ :d |		d negated to: d by: 2 do: [ :k |			| index lcs x y |			(k + d = 0 or: [ k ~= d and: [ (v at: max + k ) < (v at: max + k + 2) ] ])				ifTrue: [ 					index := max + k + 2.					x := v at: index ]				ifFalse: [ 					index := max + k.					x := (v at: index) + 1 ].			y := x - k.			lcs := lcss at: index.			[ x < n and: [ y < m and: [ (xFilteredLines at: x + 1) = (yFilteredLines at: y + 1) ] ] ]				whileTrue: [					lcs := { x := x + 1. y := y + 1. lcs } ].			(x >= n and: [ y >= m ]) ifTrue: [				^lcs ].			v at: max + k + 1 put: x.			lcss at: max + k + 1 put: lcs ] ].	self error! !!Preferences class methodsFor: 'standard queries' stamp: 'al 7/31/2007 16:17'!serverMode	^ self		valueOfFlag: #serverMode		ifAbsent: [false]! !!SystemNavigation methodsFor: 'query' stamp: 'nice 1/15/2010 23:04'!unimplemented	"Answer an Array of each message that is sent by an expression in a method but is not implemented by any object in the system."	| all unimplemented |	all := IdentitySet new: Symbol instanceCount * 2.	Cursor wait showWhile: 		[self allBehaviorsDo: [:cl | cl selectorsDo: [:aSelector | all add: aSelector]]].	unimplemented := IdentityDictionary new.	Cursor execute showWhile: [		self allBehaviorsDo: [:cl |			 cl selectorsAndMethodsDo: [:sel :meth |				meth messages do: [:m | | entry |					(all includes: m) ifFalse: [						entry := unimplemented at: m ifAbsent: [Array new].						entry := entry copyWith: (cl name, '>', sel).						unimplemented at: m put: entry]]]]].	^ unimplemented! !!Project methodsFor: 'dispatching' stamp: 'dtl 1/30/2010 16:08'!dispatchTo: requestor addPrefixAndSend: baseSelector withArguments: arguments	"Sender wants to perform a method with dependencies on the type of project.	Dispatch to an appropriate method for the current project."	| selector |	selector := (self selectorPrefixForDispatch, baseSelector) asSymbol.	^ requestor perform: selector withArguments: arguments! !!MidiPrimTester methodsFor: 'tests' stamp: 'nice 1/18/2010 13:40'!playNoteOnPort: portNum	"MidiPrimTester new playNoteOnPort: 0"	| noteOn noteOff bytesWritten |	noteOn := #[144 60 100].	noteOff := #[144 60 0].	self openPort: portNum andDo: [		bytesWritten := self primMIDIWritePort: portNum from: noteOn at: 0.		(Delay forMilliseconds: 500) wait.		bytesWritten := bytesWritten + (self primMIDIWritePort: portNum from: noteOff at: 0)].	bytesWritten = 6 ifFalse: [self error: 'not all bytes were sent'].! !!Locale methodsFor: 'system primitives' stamp: 'bf 8/26/2008 15:07'!primTimeFormat	"Returns string time format	Format is made up of 	h hour (h 12, H 24), m minute, s seconds, x (am/pm String)	double symbol is null padded, single not padded (h=6, hh=06)"	<primitive:'primitiveTimeFormat' module: 'LocalePlugin'>	^'h:mmx'! !!Project methodsFor: 'dispatching' stamp: 'dtl 1/30/2010 15:48'!selectorPrefixForDispatch	"A string to be preppended to selectors for project specific methods"	^ self subclassResponsibility! !!Locale methodsFor: 'accessing' stamp: 'bf 8/26/2008 16:04'!offsetLocalToUTC	^self primTimezone! !!PseudoClass methodsFor: 'testing method dictionary' stamp: 'jcg 1/9/2010 14:23'!includesSelector: aSymbol 	self exists		ifTrue: [^self realClass includesSelector: aSymbol]		ifFalse: [			"Not sure what the answer should be in this case (I'm unfamiliar with this class),			 so I want to force an error rather than answer something nonsensical.  This is			 no worse than the old behavior, when this method didn't even exist, resulting			 in a MessageNotUnderstood error."			self error: 'real class does not exist'		]! !!Locale methodsFor: 'system primitives' stamp: 'bf 8/26/2008 14:54'!primCountry	"Returns string with country tag according to ISO 639"	<primitive: 'primitiveCountry' module: 'LocalePlugin'>	^'US'! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'bf 1/14/2010 13:33'!compressSources		"Copy all the source file to a compressed file. Usually preceded by Smalltalk condenseSources."	"The new file will be created in the default directory, and the code in openSources	will try to open it if it is there, otherwise it will look for normal sources."	"Smalltalk compressSources"	| f cfName cf |	f := SourceFiles first readOnlyCopy binary.	"binary to preserve utf8 encoding"	(f localName endsWith: 'sources')		ifTrue: [cfName := (f localName allButLast: 7) , 'stc']		ifFalse: [self error: 'Hey, I thought the sources name ended with ''.sources''.'].	cf := (CompressedSourceStream on: (FileStream newFileNamed: cfName))				segmentSize: 65536 maxSize: f size.	"Copy the sources"'Compressing Sources File...'	displayProgressAt: Sensor cursorPoint	from: 0 to: f size	during:		[:bar | f position: 0.		[f atEnd] whileFalse:			[cf nextPutAll: (f next: 65536).			bar value: f position]].	cf close.	self setMacFileInfoOn: cfName.	self inform: 'You now have a compressed sources file!!Squeak will use it the next time you start.'! !!MidiPrimTester methodsFor: 'tests' stamp: 'nice 1/18/2010 15:44'!playDrumRoll: mSecsBetweenNotes count: tapCount onPort: portNum	"MidiPrimTester new playDrumRoll: 75 count: 64 onPort: 0"	"Play middle-C tapCount times with the given space between notes. This example works best with a short percussive voice, like a drum."	"Details: This test can be used to investigate the real-time performance of your system. On a 110 MHz PowerPC Mac, this method can genererate very fast and smooth drum rolls up to about 100 beats/sec (10 mSecs between notes). However, many factors can prevent one from seeing this level of performance including a slow CPU, lack of a level-2 cache, networking or other background processes stealing chunks of processor time from Squeak, or a sluggish MIDI synthesizer."	"Details: By default, this method does an incremental GC on every note. While not really needed for this example, it illustrates a useful technique for real-time processing in Squeak: do an incremental GC when you know you have a few milliseconds of idle time to avoid triggering one during a time-critical task. In this case, we're also using the GC time to provide a small delay between the note-on and note-off events. If the GC time is too short, as it could be on a fast machine, the note may not sound at all unless you add a few milliseconds of additional delay!!"	"Note: This example works best if the VM's millisecond clock has 1 millisecond resolution."	| gcDuringNote noteOn noteOff endTime waitTime |	gcDuringNote := true.	"these events use running status, so the command byte is omitted"	noteOn := #[ 60 100 ].	noteOff := #[ 60 0 ].	self primMIDIOpenPort: portNum readSemaIndex: 0 interfaceClockRate: 1000000.	"send an initial event with command byte to initiate running status"	self primMIDIWritePort: portNum from: #[144 60 0] at: 0.	1 to: tapCount do: [:i |		endTime := Time millisecondClockValue + mSecsBetweenNotes.		self primMIDIWritePort: portNum from: noteOn at: 0.		gcDuringNote			ifTrue: [				"do quick GC; takes a few milliseconds and provides the note-down time"				"Note: if GC is too fast on your machine, you need to add a few mSecs delay!!"				Smalltalk garbageCollectMost]			ifFalse: [(Delay forMilliseconds: 3) wait].		self primMIDIWritePort: portNum from: noteOff at: 0.		waitTime := endTime - Time millisecondClockValue.		waitTime > 0 ifTrue: [(Delay forMilliseconds: waitTime) wait]].	self primMIDIClosePort: portNum.! !!FilePackage methodsFor: 'initialize' stamp: 'nice 1/13/2010 08:49'!fromFileNamed: aName	fullName := aName.	FileStream readOnlyFileNamed: aName do: [:stream |		stream setConverterForCode.		self fileInFrom: stream]! !!HTTPClient class methodsFor: 'examples' stamp: 'ul 1/11/2010 07:17'!examplePostMultipart	"HTTPClient examplePostMultipart"	| args result |	args := Dictionary new		at: 'arg1' put: #('val1');		at: 'arg2' put: #('val2');		yourself.	result := HTTPClient httpPostMultipart: 'http://www.squeaklet.com/cgi-bin/thrd.pl'  args: args.	Transcript show: result content; cr; cr.! !!Locale class methodsFor: 'class initialization' stamp: 'ul 1/11/2010 07:19'!initializePlatformEncodings	"Locale initializePlatformEncodings"	| platform |	PlatformEncodings ifNil: [ PlatformEncodings := Dictionary new ].	platform := PlatformEncodings at: 'default' ifAbsentPut: Dictionary new.	platform		at: 'default' put: 'iso8859-1';		at: 'Win32 CE' put: 'utf-8'.	platform := PlatformEncodings at: 'ja' ifAbsentPut: Dictionary new.	platform		at: 'default' put: 'shift-jis';		at: 'unix' put: 'euc-jp';		at: 'Win32 CE' put: 'utf-8'.	platform := PlatformEncodings at: 'ko' ifAbsentPut: Dictionary new.	platform		at: 'default' put: 'euc-kr';		at: 'Win32 CE' put: 'utf-8'.	platform := PlatformEncodings at: 'zh' ifAbsentPut: Dictionary new.	platform		at: 'default' put: 'gb2312';		at: 'unix' put: 'euc-cn';		at: 'Win32 CE' put: 'utf-8'! !!SystemNavigation methodsFor: 'query' stamp: 'nice 1/15/2010 23:03'!selectAllMethodsNoDoits: aBlock 	"Like allSelect:, but strip out Doits"	| aCollection |	aCollection := SortedCollection new.	Cursor execute		showWhile: [self				allBehaviorsDo: [:class | class						selectorsAndMethodsDo: [:sel :m | (sel isDoIt not									and: [aBlock value: m])								ifTrue: [aCollection										add: (MethodReference new setStandardClass: class methodSymbol: sel)]]]].	^ aCollection! !!SystemChangeNotifier methodsFor: 'public' stamp: 'nice 1/5/2010 19:03'!doSilently: aBlock	"Perform the block, and ensure that no system notification are broadcasted while doing so."	| result |	silenceLevel := silenceLevel + 1.	result := [aBlock value] ensure: [silenceLevel > 0 ifTrue: [silenceLevel := silenceLevel - 1]].	^ result.! !!NaturalLanguageTranslator methodsFor: 'private store-retrieve' stamp: 'ul 1/11/2010 07:49'!loadFromFileNamed: fileNameString 	"Load translations from an external file"	FileStream readOnlyFileNamed: fileNameString do: [ :file |		self loadFromStream: file ].	self changed: #translations.	self changed: #untranslated.! !!HTTPClient class methodsFor: 'examples' stamp: 'ul 1/11/2010 07:17'!examplePostArgs	"HTTPClient examplePostArgs"	| args result |	args := Dictionary new		at: 'arg1' put: #('val1');		at: 'arg2' put: #('val2');		yourself.	result := HTTPClient httpPostDocument: 'http://www.squeaklet.com/cgi-bin/thrd.pl [^]' args: args.	Transcript show: result content; cr; cr.! !!ImageSegment methodsFor: 'read/write segment' stamp: 'nice 1/15/2010 22:47'!rootsIncludingBlockMethods	"Return a new roots array with more objects.  (Caller should store into rootArray.) Any CompiledMethods that create blocks will be in outPointers if the block is held outside of this segment.  Put such methods into the roots list.  Then ask for the segment again."	| myClasses extras |	userRootCnt ifNil: [userRootCnt := arrayOfRoots size].	extras := OrderedCollection new.	myClasses := OrderedCollection new.	arrayOfRoots do: [:aRoot | aRoot class class == Metaclass ifTrue: [					myClasses add: aRoot]].	myClasses isEmpty ifTrue: [^ nil].	"no change"	outPointers do: [:anOut | | gotIt | 		anOut class == CompiledMethod ifTrue: [			"specialized version of who"			gotIt := false.			myClasses detect: [:class |				class methodsDo: [:m |					m == anOut 						ifTrue: [extras add: anOut.  gotIt := true]].				gotIt] 				ifNone: []			].	].	extras := extras select: [:ea | (arrayOfRoots includes: ea) not].	extras isEmpty ifTrue: [^ nil].	"no change"	^ arrayOfRoots, extras! !!Locale methodsFor: 'system primitives' stamp: 'bf 8/26/2008 15:45'!primTimezone	"The offset from UTC in minutes, with positive offsets being towards the east.	(San Francisco is in UTC -07*60 and Paris is in UTC +02*60 when daylight savings is in effect)."	<primitive:'primitiveTimezoneOffset' module: 'LocalePlugin'>	^0! !!SmartRefStream methodsFor: 'conversion' stamp: 'dtl 1/24/2010 21:00'!scrollControllermvslrrsmsms0	^ Smalltalk at: #MouseMenuController! !!SystemNavigation methodsFor: 'query' stamp: 'nice 1/15/2010 22:59'!allMethodsSelect: aBlock 	"Answer a SortedCollection of each method that, when used as the block  	argument to aBlock, gives a true result."	| aCollection |	aCollection := SortedCollection new.	Cursor execute		showWhile: [self				allBehaviorsDo: [:class | class						selectorsAndMethodsDo: [:sel :m | (aBlock value: m)								ifTrue: [aCollection										add: (MethodReference new setStandardClass: class methodSymbol: sel)]]]].	^ aCollection! !!SystemDictionary methodsFor: 'shrinking' stamp: 'ar 1/23/2010 14:57'!unloadAllKnownPackages	"Unload all packages we know how to unload and reload"	"Prepare unloading"	Flaps disableGlobalFlaps: false.	StandardScriptingSystem removeUnreferencedPlayers.	Project removeAllButCurrent.	#('Morphic-UserObjects' 'EToy-UserObjects' 'Morphic-Imported' )		do: [:each | SystemOrganization removeSystemCategory: each].	Smalltalk at: #ServiceRegistry ifPresent:[:aClass|		SystemChangeNotifier uniqueInstance			noMoreNotificationsFor: aClass.	].	World removeAllMorphs.	"Go unloading"	#(	'ReleaseBuilder' 'ScriptLoader'		'311Deprecated' '39Deprecated'		'Universes' 'SMLoader' 'SMBase' 'Installer-Core'		'VersionNumberTests' 'VersionNumber'		'Services-Base' 'PreferenceBrowser' 'Nebraska'		'CollectionsTests' 'GraphicsTests' 'KernelTests'  'MorphicTests' 		'MultilingualTests' 'NetworkTests' 'ToolsTests' 'TraitsTests'		'SystemChangeNotification-Tests' 'FlexibleVocabularies' 		'EToys' 'Protocols' 'XML-Parser' 'Tests' 'SUnitGUI'	) do:[:pkgName| (MCPackage named: pkgName) unload].	"Traits use custom unload"	Smalltalk at: #Trait ifPresent:[:aClass| aClass unloadTraits].	"Post-unload cleanup"	PackageOrganizer instVarNamed: 'default' put: nil.	SystemOrganization removeSystemCategory: 'UserObjects'.	Presenter defaultPresenterClass: nil.	World dumpPresenter.	Preferences removePreference: #allowEtoyUserCustomEvents.	SystemOrganization removeEmptyCategories.	ChangeSet removeChangeSetsNamedSuchThat:[:cs | (cs == ChangeSet current) not].	Undeclared removeUnreferencedKeys.	StandardScriptingSystem initialize.	MCFileBasedRepository flushAllCaches.	MCDefinition clearInstances.	Behavior flushObsoleteSubclasses.	ChangeSet current clear.	ChangeSet current name: 'Unnamed1'.	Smalltalk flushClassNameCache.	Smalltalk at: #Browser ifPresent:[:br| br initialize].	DebuggerMethodMap voidMapCache.	DataStream initialize.	Smalltalk forgetDoIts.	AppRegistry removeObsolete.	FileServices removeObsolete.	Preferences removeObsolete.	TheWorldMenu removeObsolete.	Smalltalk garbageCollect.	Symbol compactSymbolTable.	TheWorldMainDockingBar updateInstances.! !!SystemDictionary methodsFor: 'shrinking' stamp: 'dtl 1/24/2010 21:17'!discardMVC	"After suitable checks, strip out much of MVC from the system"	"Smalltalk discardMVC"	| keepers |	self flag: #bob.	"zapping projects"	self isMorphic		ifFalse: [self inform: 'You must be in a Morphic project to discard MVC.'.			^ self].	"Check that there are no MVC Projects"	(Project allProjects			allSatisfy: [:proj | proj isMorphic])		ifFalse: [(self confirm: 'Would you like a chance to remove yourMVC projects in an orderly manner?')				ifTrue: [^ self].			(self confirm: 'If you wish, I can remove all MVC projects,make this project be the top project, and placeall orphaned sub-projects of MVC parents here.Would you like be to do thisand proceed to discard all MVC classes?')				ifTrue: [self zapMVCprojects]				ifFalse: [^ self]].	self reclaimDependents.	"Remove old Paragraph classes and View classes."	self		at: #Paragraph		ifPresent: [:paraClass | (ChangeSet superclassOrder: paraClass withAllSubclasses asArray)				reverseDo: [:c | c removeFromSystem]].	self		at: #View		ifPresent: [:viewClass | (ChangeSet superclassOrder: viewClass withAllSubclasses asArray)				reverseDo: [:c | c removeFromSystem]].	"Get rid of ParagraphEditor's ScrollController dependence"	(Smalltalk at: #ParagraphEditor) ifNotNilDo: [:paragraphEditor |		#(#markerDelta #viewDelta #scrollAmount #scrollBar #computeMarkerRegion )			do: [:sel | paragraphEditor removeSelector: sel].		paragraphEditor compile: 'updateMarker'.		"Reshape to MouseMenuController"		Compiler			evaluate: (paragraphEditor definition copyReplaceAll: 'ScrollController' with: 'MouseMenuController')].	"Get rid of all Controller classes not needed by	ParagraphEditor and ScreenController"	keepers := TextMorphEditor withAllSuperclasses copyWith: ScreenController.	(ChangeSet superclassOrder: Controller withAllSubclasses asArray)		reverseDo: [:c | (keepers includes: c)				ifFalse: [c removeFromSystem]].	SystemOrganization removeCategoriesMatching: 'ST80-Paths'.	SystemOrganization removeCategoriesMatching: 'ST80-Symbols'.	SystemOrganization removeCategoriesMatching: 'ST80-Pluggable Views'.	self removeClassNamed: 'FormButtonCache'.	self removeClassNamed: 'WindowingTransformation'.	self removeClassNamed: 'ControlManager'.	self removeClassNamed: 'DisplayTextView'.	ScheduledControllers := nil.	Undeclared removeUnreferencedKeys.	SystemOrganization removeEmptyCategories.	Symbol rehash! !!SmartRefStream methodsFor: 'read write' stamp: 'ul 1/11/2010 07:20'!initKnownRenames	renamed		at: #FlasherMorph put: #Flasher! !!TextDiffBuilder methodsFor: 'private' stamp: 'ul 1/6/2010 05:58'!findMatches	"I find the matching pairs of xLines and yLines. First I filter out all lines that can't have a pair, then I find the longest common subsequence of the remaining elements. Finally I mark the matching pairs."	| lineSet lcs xFilteredLines yFilteredLines |	lineSet := yLines asSet.	xFilteredLines := xLines select: [ :each |		lineSet includes: each ].	xFilteredLines size = 0 ifTrue: [ ^self ].	lineSet := xLines asSet.	yFilteredLines := yLines select: [ :each |		(lineSet includes: each) ].	yFilteredLines size = 0 ifTrue: [ ^self ].	lcs := self		lcsFor: xFilteredLines		and: yFilteredLines.	[ lcs == nil ] whileFalse: [		(xFilteredLines at: (lcs at: 1)) matches: (yFilteredLines at: (lcs at: 2)).		lcs := lcs at: 3 ]! !!MidiPrimTester methodsFor: 'tests' stamp: 'nice 1/18/2010 13:40'!playScale: mSecsPerNote onPort: portNum	"MidiPrimTester new playScale: 130 onPort: 0"	| noteOn noteOff |	noteOn := #[144 0 100].	noteOff := #[144 0 0].	self openPort: portNum andDo: [		#(60 62 64 65 67 69 71 72 74 72 71 69 67 65 64 62 60) do: [:midiKey | 			noteOn at: 2 put: midiKey.			noteOff at: 2 put: midiKey.			self primMIDIWritePort: portNum from: noteOn at: 0.			(Delay forMilliseconds: mSecsPerNote - 10) wait.			self primMIDIWritePort: portNum from: noteOff at: 0.			(Delay forMilliseconds: 10) wait]].! !!TextDiffBuilder methodsFor: 'creating patches' stamp: 'ul 1/11/2010 01:05'!buildPatchSequence	"This method is only implemented for backwards compatibility and testing."	^Array streamContents: [ :stream |		self 			patchSequenceDoIfMatch: [ :string |				stream nextPut: #match -> (string copyWithout: Character cr) ]			ifInsert: [ :string | 				stream nextPut: #insert -> (string copyWithout: Character cr) ]			ifRemove: [ :string | 				stream nextPut: #remove -> (string copyWithout: Character cr) ] ]! !!SystemDictionary methodsFor: 'shrinking' stamp: 'nice 1/15/2010 23:05'!abandonSources	"Smalltalk abandonSources"	"Replaces every method by a copy with the 4-byte source pointer 	 replaced by a string of all arg and temp names, followed by its	 length. These names can then be used to inform the decompiler."	"wod 11/3/1998: zap the organization before rather than after	 condensing changes."	"eem 7/1/2009 13:59 update for the closure schematic temp names regime"	| oldMethods newMethods bTotal bCount |	(self confirm: 'This method will preserve most temp names(up to about 15k characters of temporaries)while allowing the sources file to be discarded.-- CAUTION --If you have backed up your system andare prepared to face the consequences ofabandoning source code files, choose Yes.If you have any doubts, you may choose Noto back out with no harm done.')			== true		ifFalse: [^ self inform: 'Okay - no harm done'].	self forgetDoIts.	oldMethods := OrderedCollection new: CompiledMethod instanceCount.	newMethods := OrderedCollection new: CompiledMethod instanceCount.	bTotal := 0.	bCount := 0.	self systemNavigation allBehaviorsDo: [:b | bTotal := bTotal + 1].	'Saving temp names for better decompilation...'		displayProgressAt: Sensor cursorPoint		from: 0		to: bTotal		during:			[:bar |			self systemNavigation allBehaviorsDo:				[:cl |  "for test: (Array with: Arc with: Arc class) do:"				bar value: (bCount := bCount + 1).				cl selectorsAndMethodsDo:					[:selector :m |					| oldCodeString methodNode |					m fileIndex > 0 ifTrue:						[oldCodeString := cl sourceCodeAt: selector.						methodNode := cl compilerClass new											parse: oldCodeString											in: cl											notifying: nil.						oldMethods addLast: m.						newMethods addLast: (m copyWithTempsFromMethodNode: methodNode)]]]].	oldMethods asArray elementsExchangeIdentityWith: newMethods asArray.	self systemNavigation allBehaviorsDo: [:b | b zapOrganization].	self condenseChanges.	Preferences disable: #warnIfNoSourcesFile! !!NaturalLanguageTranslator class methodsFor: 'file-services' stamp: 'nice 1/12/2010 09:15'!mergeTranslationFileNamed: fileFullNameString 	"merge the translation in the file named fileFullNameString"	FileStream readOnlyFileNamed: fileFullNameString do: [:stream |		| localeID translator |		localeID := LocaleID isoString: stream localName sansPeriodSuffix.		translator := self localeID: localeID.		translator loadFromStream: stream]	LanguageEnvironment resetKnownEnvironments.! !!SystemNavigation methodsFor: 'query' stamp: 'nice 1/15/2010 22:59'!allMethodsNoDoitsSelect: aBlock 	"Like allSelect:, but strip out Doits"	| aCollection |	aCollection := SortedCollection new.	Cursor execute		showWhile: [self				allBehaviorsDo: [:class | class						selectorsAndMethodsDo: [:sel :m | (sel isDoIt not									and: [aBlock value: m])								ifTrue: [aCollection										add: (MethodReference new setStandardClass: class methodSymbol: sel)]]]].	^ aCollection! !!Locale methodsFor: 'system primitives' stamp: 'bf 8/26/2008 15:05'!primLongDateFormat	"Returns the long date format	d day, m month, y year,	double symbol is null padded, single not padded (m=6, mm=06)	dddd weekday	mmmm month name"	<primitive:'primitiveLongDateFormat' module: 'LocalePlugin'>	^'dddd, mmmm d, yyyy'! !!Project methodsFor: 'utilities' stamp: 'ar 1/10/2010 10:31'!offerMenu: menuSelector from: aModel shifted: aBoolean	"Pop up a menu whose target is aModel and whose contents are provided	by sending the menuSelector to the model. The menuSelector takes two	arguments: a menu, and a boolean representing the shift state."	self subclassResponsibility! !!SystemNavigation methodsFor: 'query' stamp: 'nice 1/15/2010 23:00'!allPrimitiveMethods	"Answer an OrderedCollection of all the methods that are implemented by primitives."	| aColl |	aColl := OrderedCollection new: 200.	Cursor execute		showWhile: [self allBehaviorsDo: [:class | class						selectorsAndMethodsDo: [:sel :method | 							method primitive ~= 0								ifTrue: [aColl addLast: class name , ' ' , sel , ' ' , method primitive printString]]]].	^ aColl! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'nice 1/15/2010 23:05'!testFormatter	"Smalltalk testFormatter"	"Reformats the source for every method in the system, and	then compiles that source and verifies that it generates	identical code. The formatting used will be either classic	monochrome or fancy polychrome, depending on the setting	of the preference #colorWhenPrettyPrinting." 		"Note: removed references to Preferences colorWhenPrettyPrinting and replaced them simply with false, as I've been removing this preference lately. --Ron Spengler 8/23/09"	| badOnes |	badOnes := OrderedCollection new.	self forgetDoIts.	'Formatting all classes...' 		displayProgressAt: Sensor cursorPoint		from: 0		to: CompiledMethod instanceCount		during: 			[:bar | | n | 			n := 0.			self systemNavigation allBehaviorsDo: 					[:cls | 					"Transcript cr; show: cls name."					cls selectorsAndMethodsDo: 							[:selector :oldMethod |							| newMethod newCodeString methodNode | 							(n := n + 1) \\ 100 = 0 ifTrue: [bar value: n].							newCodeString := cls prettyPrinterClass 										format: (cls sourceCodeAt: selector)										in: cls										notifying: nil										decorated: false.							methodNode := cls compilerClass new 										compile: newCodeString										in: cls										notifying: nil										ifFail: [].							newMethod := methodNode generate.							oldMethod = newMethod 								ifFalse: 									[Transcript										cr;										show: '***' , cls name , ' ' , selector.									badOnes add: cls name , ' ' , selector]]]].	self systemNavigation browseMessageList: badOnes asSortedCollection		name: 'Formatter Discrepancies'! !!Preferences class methodsFor: 'reacting to change' stamp: 'dtl 1/24/2010 21:03'!noviceModeSettingChanged	"The current value of the noviceMode flag has changed;  	now react"	TheWorldMainDockingBar updateInstances.	PasteUpMorph allSubInstances		select: [:each | each isWorldMorph]		thenDo: [:each | each initializeDesktopCommandKeySelectors].	ParagraphEditor ifNotNilDo: [:pe | pe initialize]! !!DeepCopier methodsFor: 'like fullCopy' stamp: 'nice 1/15/2010 22:57'!mapUniClasses	"For new Uniclasses, map their class vars to the new objects.  And their additional class instance vars.  (scripts slotInfo) and cross references like (player321)."	"Players also refer to each other using associations in the References dictionary.  Search the methods of our Players for those.  Make new entries in References and point to them."| pp newKey |	newUniClasses ifFalse: [^ self].	"All will be siblings.  uniClasses is empty""Uniclasses use class vars to hold onto siblings who are referred to in code"pp := (Smalltalk at: #Player ifAbsent:[^self]) class superclass instSize.uniClasses do: [:playersClass | "values = new ones"	playersClass classPool associationsDo: [:assoc |		assoc value: (assoc value veryDeepCopyWith: self)].	playersClass scripts: (playersClass privateScripts veryDeepCopyWith: self).	"pp+1"	"(pp+2) slotInfo was deepCopied in copyUniClass and that's all it needs"	pp+3 to: playersClass class instSize do: [:ii | 		playersClass instVarAt: ii put: 			((playersClass instVarAt: ii) veryDeepCopyWith: self)].	]."Make new entries in References and point to them."References keys "copy" do: [:playerName | | oldPlayer |	oldPlayer := References at: playerName.	(references includesKey: oldPlayer) ifTrue: [		newKey := (references at: oldPlayer) "new player" uniqueNameForReference.		"now installed in References"		(references at: oldPlayer) renameTo: newKey]].uniClasses "values" do: [:newClass | | newSelList oldSelList |	oldSelList := OrderedCollection new.   newSelList := OrderedCollection new.	newClass selectorsAndMethodsDo: [:sel :m | 		m literals do: [:assoc | | newAssoc |			assoc isVariableBinding ifTrue: [				(References associationAt: assoc key ifAbsent: [nil]) == assoc ifTrue: [					newKey := (references at: assoc value ifAbsent: [assoc value]) 									externalName asSymbol.					(assoc key ~= newKey) & (References includesKey: newKey) ifTrue: [						newAssoc := References associationAt: newKey.						newClass methodDictionary at: sel put: 							(newClass compiledMethodAt: sel) clone.	"were sharing it"						(newClass compiledMethodAt: sel)							literalAt: ((newClass compiledMethodAt: sel) literals indexOf: assoc)							put: newAssoc.						(oldSelList includes: assoc key) ifFalse: [							oldSelList add: assoc key.  newSelList add: newKey]]]]]].	oldSelList with: newSelList do: [:old :new |			newClass replaceSilently: old to: new]].	"This is text replacement and can be wrong"! !!SystemDictionary methodsFor: 'shrinking' stamp: 'dtl 1/24/2010 21:11'!removeAllUnSentMessages	"Smalltalk removeAllUnSentMessages"	"[Smalltalk unusedClasses do: [:c | (Smalltalk at: c) removeFromSystem]. 	Smalltalk removeAllUnSentMessages > 0] whileTrue."	"Remove all implementations of unsent messages."	| sels n |	sels := self systemNavigation allUnSentMessages.	"The following should be preserved for doIts, etc"	"needed even after #majorShrink is pulled"	#(#rehashWithoutBecome #compactSymbolTable #rebuildAllProjects #browseAllSelect:  #lastRemoval #scrollBarValue: vScrollBarValue: #scrollBarMenuButtonPressed: #withSelectionFrom: #to: #removeClassNamed: #dragon: #hilberts: #mandala: #web #test3 #factorial #tinyBenchmarks #benchFib #newDepth: #restoreAfter: #forgetDoIts #zapAllMethods #obsoleteClasses #removeAllUnSentMessages #abandonSources #removeUnreferencedKeys #reclaimDependents #zapOrganization #condenseChanges #browseObsoleteReferences #subclass:instanceVariableNames:classVariableNames:poolDictionaries:category: #methodsFor:stamp: #methodsFor:stamp:prior: #instanceVariableNames: #startTimerInterruptWatcher #unusedClasses )		do: [:sel | sels				remove: sel				ifAbsent: []].	"The following may be sent by perform: in dispatchOnChar..."	(Smalltalk at: #ParagraphEditor) ifNotNilDo: [:paragraphEditor |		(paragraphEditor classPool at: #CmdActions) asSet			do: [:sel | sels					remove: sel					ifAbsent: []].		(paragraphEditor classPool at: #ShiftCmdActions) asSet			do: [:sel | sels					remove: sel					ifAbsent: []]].	sels size = 0		ifTrue: [^ 0].	n := 0.	self systemNavigation		allBehaviorsDo: [:x | n := n + 1].	'Removing ' , sels size printString , ' messages . . .'		displayProgressAt: Sensor cursorPoint		from: 0		to: n		during: [:bar | 			n := 0.			self systemNavigation				allBehaviorsDo: [:class | 					bar value: (n := n + 1).					sels						do: [:sel | class basicRemoveSelector: sel]]].	^ sels size! !!SystemNavigation methodsFor: 'query' stamp: 'nice 1/15/2010 23:03'!selectAllMethods: aBlock 	"Answer a SortedCollection of each method that, when used as the block  	argument to aBlock, gives a true result."	| aCollection |	aCollection := SortedCollection new.	Cursor execute		showWhile: [self				allBehaviorsDo: [:class | class						selectorsAndMethodsDo: [:sel :m | (aBlock value: m)								ifTrue: [aCollection										add: (MethodReference new setStandardClass: class methodSymbol: sel)]]]].	^ aCollection! !!SystemNavigation methodsFor: 'browse' stamp: 'nice 1/16/2010 13:43'!browseUncommentedMethodsWithInitials: targetInitials	"Browse uncommented methods whose initials (in the time-stamp, as logged to disk) match the given initials.  Present them in chronological order.  CAUTION: It will take several minutes for this to complete."	"Time millisecondsToRun: [SystemNavigation default browseUncommentedMethodsWithInitials: 'jm']"	| methodReferences |	methodReferences := OrderedCollection new.	self  allBehaviorsDo:		[:aClass | aClass selectorsAndMethodsDo: [:sel :cm |			| timeStamp initials |			timeStamp := Utilities timeStampForMethod: cm.			timeStamp isEmpty ifFalse:				[initials := timeStamp substrings first.				initials first isDigit ifFalse:					[((initials = targetInitials) and: [(aClass firstPrecodeCommentFor: sel) isNil])						ifTrue:							[methodReferences add: (MethodReference new								setStandardClass: aClass 								methodSymbol: sel)]]]]].	ToolSet		browseMessageSet: methodReferences 		name: 'Uncommented methods with initials ', targetInitials		autoSelect: nil! !!SystemDictionary methodsFor: 'shrinking' stamp: 'dtl 1/24/2010 21:09'!presumedSentMessages   | sent |"Smalltalk presumedSentMessages"	"The following should be preserved for doIts, etc"	sent := IdentitySet new.	#( rehashWithoutBecome compactSymbolTable rebuildAllProjects		browseAllSelect:  lastRemoval		scrollBarValue: vScrollBarValue: scrollBarMenuButtonPressed: 		withSelectionFrom:  to: removeClassNamed:		dragon: hilberts: mandala: web test3 factorial tinyBenchmarks benchFib		newDepth: restoreAfter: forgetDoIts zapAllMethods obsoleteClasses		removeAllUnSentMessages abandonSources removeUnreferencedKeys		reclaimDependents zapOrganization condenseChanges browseObsoleteReferences		subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:		methodsFor:stamp: methodsFor:stamp:prior: instanceVariableNames:		startTimerInterruptWatcher unusedClasses) do:		[:sel | sent add: sel].	"The following may be sent by perform: in dispatchOnChar..."	(Smalltalk at: #ParagraphEditor) ifNotNilDo: [:paragraphEditor |		(paragraphEditor classPool at: #CmdActions) asSet do:			[:sel | sent add: sel].		(paragraphEditor classPool at: #ShiftCmdActions) asSet do:			[:sel | sent add: sel]].	^ sent! !!TextDiffBuilder methodsFor: 'private' stamp: 'ul 1/11/2010 01:13'!print: aString withAttributes: attributes on: stream	stream		withAttributes: attributes 		do: [ 			stream nextPutAll: aString.			(aString notEmpty and: [ 				aString last = Character cr or: [					aString endsWith: String crlf ] ]) 						ifFalse: [ stream cr ] ]! !!DigitalSignatureAlgorithm class methodsFor: 'examples' stamp: 'nice 1/12/2010 09:07'!writeExamplesToDisk	"Example of signing a message and verifying its signature. Used to create samples from one implementation that could later be tested with a different implementation"	"Note: Secure random numbers are needed for key generation and message signing, but not for signature verification. There is no need to call initRandomFromUser if you are merely checking a signature."	"DigitalSignatureAlgorithm writeExamplesToDisk"	| keyList dsa msgList |	dsa := DigitalSignatureAlgorithm new.	dsa initRandomFromUser.	self inform: 'About to generate 5 key sets. Will take a while'.	keyList := {self testKeySet},((1 to: 5) collect: [ :ignore | self generateKeySet]).	msgList := {'This is a test...'. 'This is the second test period.'. 'And finally, a third message'}.	FileStream newFileNamed: 'dsa.test.out' do: [:file |		msgList do: [ :msg |			keyList do: [ :keys |				| sig |				sig := self sign: msg privateKey: keys first dsa: dsa.				(self verify: sig isSignatureOf: msg publicKey: keys last) ifTrue: [					file						nextChunkPut: sig;						nextChunkPut: msg;						nextChunkPut: keys last storeString.				] ifFalse: [					self error: 'ERROR!! Signature verification failed'				].			].		].	]! !!Project methodsFor: 'editors' stamp: 'dtl 1/24/2010 16:07'!formEdit: aForm	"Start up an instance of the form editor on a form." 	self subclassResponsibility! !Project removeSelector: #offerMenuFrom:shifted:!