"Change Set:		8270System-dtl.176System-dtl.176:Remove remaining direct Morphic dependencies from class side of ProjectSystem-dtl.169:Better Project>>printOn: for displaying MVC and Morphic projects in an object explorerSystem-dtl.170:Remove Morphic dependencies from Project>>okToChange.Add Project>>prepareForDelete and MorphicProject>>prepareForDelete to handle Morphic specific cleanup actions.Remove some apparently unneeded logic by changing from this:	ok := world isMorph not and: [world scheduledControllers size <= 1].	ok ifFalse: [self isMorphic ifTrue:		[self parent == CurrentProject 			ifFalse: [^ true]]].  'view from elsewhere.  just delete it.'to this:	self parent == CurrentProject 			ifFalse: [^ true].  'view from elsewhere.  just delete it.'System-dtl.171:Factor Project>>findProjectView: into subclasses.Implement #interruptName: and #interruptName:preemptedProcess: on instance side, and use Project current idiom to access them. Eliminate some related #isMorphic testing in other methods. System-dtl.172:Fix Project class>>jumpToProject, broken in prior changes.System-ar.173:Fix http://bugs.squeak.org/view.php?id=7418 which was caused by running allCallsOn: twice for classes - once for the class association and once for its name. The fix also means browsing class refs now is twice as fast.System-dtl.174:Move project navigation and menu methods from class side of Project to instance methods. Replace #isMorphic logic with dispatch to appropriate project instances for MVC and Morphic conditions.System-nice.175:Correct Behavior>>#allUnsentMessages"!!Behavior methodsFor: '*system-support' stamp: 'ar 11/23/2009 21:14'!allCallsOn	"Answer a SortedCollection of all the methods that refer to me by name or as part of an association in a global dict."	^self  systemNavigation allCallsOn:  self theNonMetaClass name! !!Project class methodsFor: 'utilities' stamp: 'dtl 11/27/2009 13:25'!canWeLoadAProjectNow	^ Smalltalk verifyMorphicAvailability! !!Project methodsFor: 'scheduling' stamp: 'dtl 11/23/2009 14:55'!interruptName: labelString	"Create a Notifier on the active scheduling process with the given label."	^ self interruptName: labelString preemptedProcess: nil! !!Project methodsFor: 'accessing' stamp: 'dtl 11/22/2009 20:15'!findProjectView: projectDescription	"In this world, find the morph that holds onto the project described by projectDescription.	projectDescription can be a project, or the name of a project.  The project may be	represented by a DiskProxy.  The holder morph may be at any depth in the world.	Need to fix this if Projects have subclasses, or if a class other than ProjectViewMorph	can officially hold onto a project.  (Buttons, links, etc)	If parent is an MVC world, return the ProjectController."	self flag: #bob.		"read the comment"	self subclassResponsibility! !!Project methodsFor: 'utilities' stamp: 'dtl 11/25/2009 13:27'!addItem: item toMenu: menu selection: action requestor: requestingProject	"Add a menu item representing this project to a menu being created by requestingProject"	self subclassResponsibility! !!Project class methodsFor: 'utilities' stamp: 'dtl 11/23/2009 22:27'!jumpToSelection: selection	"Enter the project corresponding to this menu selection."	self flag: #toRemove. "Project current jumpToProject"	^ self current jumpToSelection: selection! !!Project methodsFor: 'utilities' stamp: 'dtl 11/23/2009 21:44'!jumpToProject	"Present a list of potential projects and enter the one selected."	"Project current jumpToProject"	self subclassResponsibility! !!Behavior methodsFor: '*system-support' stamp: 'stephane.ducasse 10/12/2008 21:02'!allUnsentMessages	"Answer an array of all the messages defined by the receiver that are not sent anywhere in the system."	^ SystemNavigation default allUnsentMessagesIn: self selectors! !!Project methodsFor: 'squeaklet on server' stamp: 'dtl 11/27/2009 13:41'!enterIfThereOrFind: aProjectName	self subclassResponsibility! !!Project methodsFor: 'scheduling' stamp: 'dtl 11/23/2009 14:54'!interruptName: labelString preemptedProcess: theInterruptedProcess	"Create a Notifier on the active scheduling process with the given label."	^ self subclassResponsibility! !!Project methodsFor: 'utilities' stamp: 'dtl 11/25/2009 14:01'!buildJumpToMenu: menu	"Make the supplied menu offer a list of potential projects, consisting of:		*	The previous-project chain		*	The next project, if any		*	The parent project, if any		*	All projects, alphabetically or hierarchically"	| prev listed i next  toAdd |	listed := OrderedCollection with: self.	i := 0.	"The previous Project chain"	prev := self previousProject.	[(prev ~~ nil and: [(listed includes: prev) not])] whileTrue:	  [i := i + 1.		listed add: prev.		self 	addItem: prev name , ' (', ('back {1}' translated format:{i}  ), ')'				toMenu: menu 				selection: ('%back' , i printString) 				project: prev.		prev := prev previousProject].	i > 0 ifTrue: [menu addLine].	"Then the next Project"	(((next := self nextProject) ~~ nil) and: [(listed includes: next) not]) ifTrue:		[self	addItem: (next name, ' (', ('forward {1}' translated format:{1}), ')') 				toMenu: menu 				selection: next name 				project: next]. 	next ~~ nil ifTrue: [menu addLine].	"Then the parent"	self isTopProject ifFalse: 		[self	addItem: self parent name , ' (', 'parent' translated, ')' 				toMenu: menu 				selection: #parent 				project: self parent.		  menu addLine].	"Finally all the projects, in hierarchical or alphabetical order:"	(Preferences alphabeticalProjectMenu			ifTrue:				[Project allNamesAndProjects]			ifFalse:				[Project hierarchyOfNamesAndProjects]) do:		[:aPair | 			toAdd := aPair last isCurrentProject				ifTrue:				  [aPair first, ' (', 'current' translated, ')']				ifFalse:				  [aPair first].			self	addItem: toAdd 				toMenu: menu 				selection: aPair first 				project: aPair last].	^ menu! !!Project methodsFor: 'release' stamp: 'dtl 11/22/2009 17:48'!prepareForDelete	"The window in which the project is housed is about to deleted. Perform	any necessary actions to prepare for deletion. For an MVC project, no	action is required."! !!Project methodsFor: 'utilities' stamp: 'dtl 11/25/2009 13:53'!addItem: item toMenu: menu selection: action color: aColor thumbnail: aForm	"Add menu item representing the sender to a menu"	self subclassResponsibility! !!Project methodsFor: 'squeaklet on server' stamp: 'dtl 11/27/2009 14:12'!openBlankProjectNamed: projName	"Project current openBlankProjectNamed: 'My new project'"	self subclassResponsibility! !!Project class methodsFor: 'utilities' stamp: 'dtl 11/23/2009 15:03'!interruptName: labelString	"Create a Notifier on the active scheduling process with the given label."	self flag: #toRemove. "after restarting the user interrupt watcher process"	^ self current interruptName: labelString preemptedProcess: nil! !!SystemDictionary methodsFor: 'memory space' stamp: 'dtl 11/23/2009 15:10'!lowSpaceWatcher	"Wait until the low space semaphore is signalled, then take appropriate actions."	| free preemptedProcess |	self garbageCollectMost <= self lowSpaceThreshold		ifTrue: [self garbageCollect <= self lowSpaceThreshold				ifTrue: ["free space must be above threshold before					starting low space watcher"					^ Beeper beep]].	Smalltalk specialObjectsArray at: 23 put: nil.  "process causing low space will be saved here"	LowSpaceSemaphore := Semaphore new.	self primLowSpaceSemaphore: LowSpaceSemaphore.	self primSignalAtBytesLeft: self lowSpaceThreshold.  "enable low space interrupts"	LowSpaceSemaphore wait.  "wait for a low space condition..."	self primSignalAtBytesLeft: 0.  "disable low space interrupts"	self primLowSpaceSemaphore: nil.	LowSpaceProcess := nil.	"The process that was active at the time of the low space interrupt."	preemptedProcess := Smalltalk specialObjectsArray at: 23.	Smalltalk specialObjectsArray at: 23 put: nil.	"Note: user now unprotected until the low space watcher is re-installed"	self memoryHogs isEmpty		ifFalse: [free := self bytesLeft.			self memoryHogs				do: [ :hog | hog freeSomeSpace ].			self bytesLeft > free				ifTrue: [ ^ self installLowSpaceWatcher ]].	Project current			interruptName: 'Space is low'			preemptedProcess: preemptedProcess! !!Project class methodsFor: 'squeaklet on server' stamp: 'dtl 11/27/2009 14:11'!fromUrl: urlString	"Load the project, and make a thumbnail to it in the current project.  Replace the old one if necessary.To test it, make sure you don't have AAEmptyTest.001.pr in your Squeaklets directory. Then do:Project fromUrl: 'http://209.143.91.36/super/SuperSwikiProj/AAEmptyTest.001.pr'.The project should open and you should enter it. Return to the previous project and delete the project. Then do:Project fromUrl: 'AAEmptyTest.001.pr'.The project should open again - this time faster - and you should enter it. "	| absoluteUrl projectFilename projName proj serverDir pair |	Project canWeLoadAProjectNow ifFalse: [^ self].	absoluteUrl := Url absoluteFromFileNameOrUrlString: urlString.	projectFilename := absoluteUrl fileName.	projName := (Project parseProjectFileName: projectFilename unescapePercents) first.	(proj := Project named: projName) ifNotNil: [		"it appeared"		^ProjectEntryNotification signal: proj].	serverDir := ServerDirectory serverForURL: absoluteUrl directoryUrl asString.	serverDir ifNotNil: [		pair := self mostRecent: projectFilename onServer: serverDir.		"Pair first is name exactly as it is on the server"		pair first ifNil: [^self current openBlankProjectNamed: projName].		projectFilename := pair first].	ProjectLoading		installRemoteNamed: projectFilename		from: absoluteUrl asString unescapePercents		named: projName		in: CurrentProject! !!Project methodsFor: 'utilities' stamp: 'dtl 11/23/2009 20:42'!jumpToSelection: selection	"Enter the project corresponding to this menu selection."		"Project jumpToProject"	| nBack prev pr |	selection ifNil: [^ self].	(selection beginsWith: '%back') ifTrue:		[nBack := (selection copyFrom: 6 to: selection size) asNumber.		prev := CurrentProject previousProject.		1 to: nBack-1 do:			[:i | prev ifNotNil: [prev := prev previousProject]].		prev ifNotNil: [prev enter: true revert: false saveForRevert: false]].	selection = #parent ifTrue:		[CurrentProject parent enter: false revert: false saveForRevert: false.		^ self].	(pr := Project namedWithDepth: selection) ifNil: [^ self].	pr enter: false revert: false saveForRevert: false! !!Project class methodsFor: 'utilities' stamp: 'dtl 11/23/2009 20:43'!jumpToProject	"Project jumpToProject"	"Present a list of potential projects and enter the one selected."	self current jumpToProject! !!Project class methodsFor: 'squeaklet on server' stamp: 'dtl 11/27/2009 13:43'!enterIfThereOrFind: aProjectName	^ self current enterIfThereOrFind: aProjectName! !!Project class methodsFor: 'utilities' stamp: 'dtl 11/23/2009 15:05'!maybeForkInterrupt	self flag: #toRemove. "unreferenced in image, check eToys"	Preferences cmdDotEnabled ifFalse: [^self].	[self current interruptName: 'User Interrupt'] fork! !!Project methodsFor: 'utilities' stamp: 'dtl 11/25/2009 13:30'!addItem: item toMenu: menu selection: action project: aProject	"Request aProject to add a menu item to represent it in the menu"	^ aProject addItem: item toMenu: menu selection: action requestor: self! !!Project methodsFor: 'file in/out' stamp: 'dtl 11/27/2009 14:11'!decideAboutCreatingBlank: otherProjectName	| resp |	"20 Oct - just do it"	true "version isNil" ifFalse: [	"if saved, then maybe don't create"		resp := (UIManager default chooseFrom: #('Yes, make it up' 'No, skip it') 			title: ('I cannot locate the project\',				otherProjectName,				'\Would you like me to create a new project\with that name?'			) withCRs).		resp = 1 ifFalse: [^ nil]	].	^Project current openBlankProjectNamed: otherProjectName! !!SystemDictionary methodsFor: 'miscellaneous' stamp: 'dtl 11/23/2009 15:01'!handleUserInterrupt	Preferences cmdDotEnabled ifTrue:		[[Project current interruptName: 'User Interrupt'] fork]! !!Project methodsFor: 'release' stamp: 'dtl 11/22/2009 17:56'!okToChange	"Answer whether the window in which the project is housed can be dismissed -- which is destructive. We never clobber a project without confirmation"	self subProjects size  >0 ifTrue:		[self inform: ('The project {1}contains sub-projects.  You must remove theseexplicitly before removing their parent.' translated format:{self name}).		^ false].	self parent == CurrentProject 			ifFalse: [^ true].  "view from elsewhere.  just delete it."	(self confirm:('Really delete the project{1}and all its windows?' translated format:{self name}))		ifFalse: [^ false].	self prepareForDelete.	self removeChangeSetIfPossible.	"do this last since it will render project inaccessible to #allProjects and their ilk"	ProjectHistory forget: self.	Project deletingProject: self.	^ true! !!Project methodsFor: 'printing' stamp: 'dtl 11/22/2009 15:54'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' (', self name, ') in '.	world printOn: aStream! !Project class removeSelector: #openBlankProjectNamed:!Project class removeSelector: #addItem:toMenu:selection:project:!Preferences class removeSelector: #showWorldMainDockingBar!Project class removeSelector: #interruptName:preemptedProcess:!Project class removeSelector: #buildJumpToMenu:!Project class removeSelector: #addItem:toMenu:selection:!