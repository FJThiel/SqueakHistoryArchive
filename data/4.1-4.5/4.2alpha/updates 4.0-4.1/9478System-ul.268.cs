"Change Set:		9478System-ul.268System-ul.268:- added ObjectFinalizerCollection which will hold the finalizers in WeakRegistry.System-ul.260:- remove the remaining #close sends from MessageTally.System-edc.261:Fix CodeLoader installSourceFilesNow you could do this example|loader |	loader _ CodeLoader new.	loader baseURL: 'http://www.squeaksource.com/Ladrillos/'.	loader loadSourceFiles: #('Scamper-edc.13.mcz' );installSourceFiles.System-ul.262:- don't use #lastPositionOf:- minor cleanupSystem-nice.263:Add a preference to ignore lineEndings in TextDiffBuilder.System-nice.264:Remove some outer temp assignments in blocksSystem-bf.265:- backout CodeLoader changes. Consensus is to use Installer for these tasks, not CodeLoader.System-laza.266:Changed SystemDictionary>>condenseSources to wirte the source file to the default directorySystem-ar.267:Fix SecureHashAlgorithm raising an error upon empty input instead of computing the correct result."!Object subclass: #TextDiffBuilder	instanceVariableNames: 'xLines yLines'	classVariableNames: 'IgnoreLineEndings InsertTextAttributes NormalTextAttributes RemoveTextAttributes'	poolDictionaries: ''	category: 'System-FilePackage'!OrderedCollection subclass: #ObjectFinalizerCollection	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'System-Finalization'!!Project methodsFor: 'file in/out' stamp: 'nice 1/18/2010 19:07'!writeFileNamed: localFileName fromDirectory: localDirectory toServer: primaryServerDirectory	| local resp gifFileName f |	local := localDirectory oldFileNamed: localFileName.	resp := primaryServerDirectory upLoadProject: local named: localFileName resourceUrl: self resourceUrl retry: false.	local close.	resp == true ifFalse: [		"abandon resources that would've been stored with the project"		self resourceManager abandonResourcesThat:			[:loc| loc urlString beginsWith: self resourceUrl].		self error: 'the primary server of this project seems to be down (',							resp printString,')'. 		^ self	].	gifFileName := self name,'.gif'.	localDirectory deleteFileNamed: gifFileName ifAbsent: [].	local := localDirectory fileNamed: gifFileName.	thumbnail ifNil: [		(thumbnail := Form extent: 100@80) fillColor: Color orange	] ifNotNil: [		thumbnail unhibernate.	].	f := thumbnail colorReduced.  "minimize depth"	f depth > 8 ifTrue: [		f := thumbnail asFormOfDepth: 8	].	GIFReadWriter putForm: f onStream: local.	local close.	[local := StandardFileStream readOnlyFileNamed: (localDirectory fullNameFor: gifFileName).	(primaryServerDirectory isKindOf: FileDirectory)		ifTrue: [primaryServerDirectory deleteFileNamed: gifFileName ifAbsent: []].	primaryServerDirectory putFile: local named: gifFileName retry: false.	] on: Error do: [:ex |].	local close.	primaryServerDirectory updateProjectInfoFor: self.	primaryServerDirectory sleep.	"if ftp, close the connection"! !!SecureHashAlgorithm methodsFor: 'public' stamp: 'ar 2/25/2010 23:40'!hashStream: aPositionableStream	"Hash the contents of the given stream from the current position to the end using the Secure Hash Algorithm. The SHA algorithm is defined in FIPS PUB 180-1. It is also described on p. 442 of 'Applied Cryptography: Protocols, Algorithms, and Source Code in C' by Bruce Scheier, Wiley, 1996."	"SecureHashAlgorithm new hashStream: (ReadStream on: 'foo')"	| startPosition buf bitLength |	self initializeTotals.	"(SecureHashAlgorithm new hashMessage: '') radix: 16 		=> 'DA39A3EE5E6B4B0D3255BFEF95601890AFD80709'"	aPositionableStream atEnd ifTrue: [self processFinalBuffer: #() bitLength: 0].	startPosition := aPositionableStream position.	[aPositionableStream atEnd] whileFalse: [		buf := aPositionableStream next: 64.		(aPositionableStream atEnd not and: [buf size = 64])			ifTrue: [self processBuffer: buf]			ifFalse: [				bitLength := (aPositionableStream position - startPosition) * 8.				self processFinalBuffer: buf bitLength: bitLength]].	^ self finalHash! !!SharedPool class methodsFor: 'name lookup' stamp: 'nice 2/8/2010 09:43'!bindingOf: varName	"Answer the binding of some variable resolved in the scope of the receiver"	| aSymbol binding |	aSymbol := varName asSymbol.	"First look in classVar dictionary."	binding := self classPool bindingOf: aSymbol.	binding ifNotNil:[^binding].	"Next look in shared pools."	self sharedPools do:[:pool | 		| poolBinding |		poolBinding := pool bindingOf: aSymbol.		poolBinding ifNotNil:[^poolBinding].	].	"subclassing and environment are not preserved"	^nil! !!MessageTally class methodsFor: 'spying' stamp: 'ul 2/24/2010 00:06'!tallySendsTo: receiver inBlock: aBlock showTree: treeOption	"	MessageTally tallySends: [3.14159 printString]	"	"This method uses the simulator to count the number of calls on each method	invoked in evaluating aBlock. If receiver is not nil, then only sends	to that receiver are tallied.	Results are presented as leaves, sorted by frequency,	preceded, optionally, by the whole tree."	| prev tallies startTime totalTime |	startTime := Time millisecondClockValue.	tallies := MessageTally new class: aBlock receiver class method: aBlock method.	tallies reportOtherProcesses: true.	"Do NOT filter nodes with nil process"	prev := aBlock.	thisContext sender		runSimulated: aBlock		contextAtEachStep: [ :current |			current == prev ifFalse: [ "call or return"				prev sender == nil ifFalse: [ "call only"					(receiver == nil or: [ current receiver == receiver ])						ifTrue: [ tallies tally: current by: 1 ] ].				prev := current ] ].	totalTime := Time millisecondClockValue - startTime // 1000.0 roundTo: 0.01.	(StringHolder new contents:		(String streamContents:			[:s |			s nextPutAll: 'This simulation took ' , totalTime printString							, ' seconds.'; cr.			treeOption				ifTrue: [ tallies fullPrintExactOn: s ]				ifFalse: [ tallies leavesPrintExactOn: s ] ]))		openLabel: 'Spy Results'! !!TextDiffBuilder class methodsFor: 'preferences' stamp: 'nice 2/25/2010 03:57'!ignoreLineEndings: aBoolean	"Set the preference telling if line endings differences should be ignored or emphasized"		IgnoreLineEndings := aBoolean! !!MessageTally class methodsFor: 'spying' stamp: 'ul 2/24/2010 00:06'!spyOn: aBlock toFileNamed: fileName reportOtherProcesses: aBoolean	"Spy on the evaluation of aBlock. Write the data collected on a file	named fileName."	| value node |	node := self new.	node reportOtherProcesses: aBoolean.	value := node spyEvery: self defaultPollPeriod on: aBlock.	FileStream newFileNamed: fileName do: [ :file |		node report: file ].	^value! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'laza 2/25/2010 22:56'!condenseSources	"Move all the changes onto a compacted sources file."	"Smalltalk condenseSources"	| newSourcesFile defaultDirectory newVersion currentVersion |	Utilities fixUpProblemsWithAllCategory.	"The above removes any concrete, spurious '-- all --' categories, which mess up the process."	defaultDirectory := FileDirectory default.	currentVersion := SmalltalkImage current sourceFileVersionString.	newVersion := UIManager default 		request: 'Please designate the version\for the new source code file...' withCRs		initialAnswer: currentVersion.	newVersion ifEmpty: [ ^ self ].	newVersion = currentVersion ifTrue: [ ^ self error: 'The new source file must not be the same as the old.' ].	SmalltalkImage current sourceFileVersionString: newVersion.	"Write all sources with fileIndex 1"	newSourcesFile := defaultDirectory newFileNamed: (defaultDirectory localNameFor: SmalltalkImage current sourcesName).	newSourcesFile ifNil: [ ^ self error: 'Couldn''t create source code file in\' withCRs,  defaultDirectory name].	newSourcesFile		header;		timeStamp.	'Condensing Sources File...' 		displayProgressAt: Sensor cursorPoint		from: 0		to: self classNames size + self traitNames size		during: 			[ :bar | 			| count |			count := 0.			Smalltalk allClassesAndTraitsDo: 				[ :classOrTrait | 				bar value: (count := count + 1).				classOrTrait 					fileOutOn: newSourcesFile					moveSource: true					toFile: 1 ] ].	newSourcesFile		trailer;		close.			"Make a new empty changes file"	SmalltalkImage current closeSourceFiles.	defaultDirectory 		rename: SmalltalkImage current changesName		toBe: SmalltalkImage current changesName , '.old'.	(FileStream newFileNamed: SmalltalkImage current changesName)		header;		timeStamp;		close.	SmalltalkImage current lastQuitLogPosition: 0.	self setMacFileInfoOn: SmalltalkImage current changesName.	self setMacFileInfoOn: newSourcesFile name.	SmalltalkImage current openSourceFiles.	self inform: 'Source files have been rewritten to\' withCRs, newSourcesFile name, '\Check that all is well,\and then save/quit.' withCRs! !!TextDiffBuilder class methodsFor: 'preferences' stamp: 'nice 2/25/2010 04:07'!ignoreLineEndings	"Answer a boolean telling if line endings differences should be ignored or emphasized"		<preference: 'ignoreLineEndings'		category: 'TextDiff'		description: 'When enabled, source code differences in line endings will be ignored.'		type: #Boolean>	^IgnoreLineEndings ifNil: [ false ]! !!MessageTally class methodsFor: 'spying' stamp: 'ul 2/24/2010 00:06'!spyOnProcess: aProcess forMilliseconds: msecDuration toFileNamed: fileName reportOtherProcesses: aBoolean	"Spy on the evaluation of aProcess. Write the data collected on a file  	named fileName. Will overwrite fileName"	| node |	node := self new.	node reportOtherProcesses: aBoolean.	node		spyEvery: self defaultPollPeriod		onProcess: aProcess		forMilliseconds: msecDuration.	FileStream fileNamed: fileName do: [ :file |		node report: file ]! !!CodeLoader methodsFor: 'installing' stamp: 'ar 12/22/1999 15:02'!installSourceFiles	"Install the previously loaded source files"	sourceFiles == nil ifTrue:[^self].	sourceFiles do:[:req| self installSourceFile: req contentStream].	sourceFiles := nil.! !!ObjectFinalizerCollection methodsFor: 'finalization' stamp: 'ul 2/25/2010 16:53'!finalize	"Finalize all elements in this collection. The elements are expected to be ObjectFinalizers, but can be any object which understands #finalize."	self do: #finalize! !!SARInstaller methodsFor: 'fileIn' stamp: 'nice 1/13/2010 08:46'!fileIn	"File in to a change set named like my file"	directory readOnlyFileNamed: fileName do: [:stream |		| newCS |		newCS := self class withCurrentChangeSetNamed: fileName			do: [:cs | self fileInFrom: stream].		newCS isEmpty ifTrue: [ ChangeSet removeChangeSet: newCS ]]! !!TextDiffBuilder methodsFor: 'private' stamp: 'nice 2/25/2010 03:58'!split: aString	"I return an Array of strings which are the lines extracted from aString. All lines contain the line separator characters, or not depending on preference."	^Array streamContents: [ :stream |		self class ignoreLineEndings			ifTrue: [aString lineIndicesDo: [ :start :endWithoutSeparators :end |				stream nextPut: (aString copyFrom: start to: endWithoutSeparators) ] ]			ifFalse: [aString lineIndicesDo: [ :start :endWithoutSeparators :end |				stream nextPut: (aString copyFrom: start to: end) ] ] ]! !!SARInstaller methodsFor: 'client services' stamp: 'nice 1/18/2010 19:08'!fileInGenieDictionaryNamed: memberName 	"This is to be used from preamble/postscript code to file in zip 	members as Genie gesture dictionaries.	Answers a dictionary."	| member object crDictionary stream |	crDictionary := Smalltalk at: #CRDictionary ifAbsent: [ ^self error: 'Genie not installed' ].	"don't know how to recursively load"	member := self memberNamed: memberName.	member ifNil: [ ^self errorNoSuchMember: memberName ].	stream := ReferenceStream on: member contentStream.	object := [ stream next ]		on: Error do: 		[:ex |  stream close.		self inform: 'Error on loading: ' , ex description. ^ nil ].	stream close.	(object notNil and: [object name isEmptyOrNil])		ifTrue: [object := crDictionary name: object storedName].	self installed: member.	^ object! !CodeLoader removeSelector: #lookLastVersion:!CodeLoader removeSelector: #installMonticelloFor:!CodeLoader removeSelector: #segments!CodeLoader removeSelector: #tryVersion:!CodeLoader removeSelector: #installLastMonticelloFor:!CodeLoader removeSelector: #lookMonticelloVersion:!