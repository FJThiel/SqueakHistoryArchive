"Change Set:		7882CollectionsTests-nice.101CollectionsTests-nice.101:Add tests from http://bugs.squeak.org/view.php?id=6535keyBlock and sortBlock are lost when creating a collection of the same species. CollectionsTests-nice.99:Lots of tests for WideStringmost from http://bugs.squeak.org/view.php?id=5331All failing tests have a solution in mantisCollectionsTests-dtl.100:Add IntegerArrayTest.Verify storage of integer values in an IntegerArray. An IntegerArray stores 32-bit signed integer values. Lack of range check in primitive fallback code leads to arithmetic overflow errors, so attempts to store out of range values should raise errors.Reference Mantis 7309"!ClassTestCase subclass: #KeyedSetTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CollectionsTests-Unordered'!ClassTestCase subclass: #IntegerArrayTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CollectionsTests-Arrayed'!!WideStringTest methodsFor: 'tests - substrings' stamp: 'nice 7/28/2007 00:46'!testFindSubstring	"This is related to http://bugs.squeak.org/view.php?id=6366	finding substring in a WideString was broken because matchTable are byte-wise"		| ws1 ws2 |		self assert: ('abcd' findString: 'bc' startingAt: 1) = 2.	self assert: ('abcd' asWideString findString: 'bc' startingAt: 1) = 2.	self assert: ('abcd' findString: 'bc' asWideString startingAt: 1) = 2.	self assert: ('abcd' asWideString findString: 'bc' asWideString startingAt: 1) = 2.		ws1 := 'A' , (WideString with: (Unicode value: 530)) , 'BCD'.	self assert: (ws1 findString: 'bc' startingAt: 1 caseSensitive: true) = 0.	self assert: (ws1 findString: 'bc' startingAt: 1 caseSensitive: false) = 3.		ws2 := (WideString with: (Unicode value: 530)) , 'b'.	self assert: (ws1 findString: ws2 startingAt: 1 caseSensitive: true) = 0.	self assert: (ws1 findString: ws2 startingAt: 1 caseSensitive: false) = 2.		self assert: ('abc' findString: ws2 startingAt: 1 caseSensitive: true) = 0.	self assert: ('abc' findString: ws2 startingAt: 1 caseSensitive: false) = 0.! !!WideStringTest methodsFor: 'tests - compare' stamp: 'nice 7/28/2007 23:19'!testCompare	"from johnmci at http://bugs.squeak.org/view.php?id=5331"		self assert: ('abc' compare: 'abc') = 2.	self assert: ('abc' compare: 'abd') = 1.	self assert: ('abd' compare: 'abc') = 3.	self assert: ('abc' compare: 'abC') = 2.	self assert: ('abc' compare: 'abD') = 1.	self assert: ('abd' compare: 'abC') = 3.	self assert: ('aBc' compare: 'abC') = 2.	self assert: ('aBc' compare: 'abD') = 1.	self assert: ('aDd' compare: 'abC') = 3.			self assert: ('abc' compare: 'abc' asWideString) = 2.	self assert: ('abc' compare: 'abd' asWideString) = 1.	self assert: ('abd' compare: 'abc' asWideString) = 3.	self assert: ('abc' compare: 'abC' asWideString) = 2.	self assert: ('abc' compare: 'abD' asWideString) = 1.	self assert: ('abd' compare: 'abC' asWideString) = 3.	self assert: ('aBc' compare: 'abC' asWideString) = 2.	self assert: ('aBc' compare: 'abD' asWideString) = 1.	self assert: ('aDd' compare: 'abC' asWideString) = 3.		self assert: ('abc' asWideString compare: 'abc') = 2.	self assert: ('abc' asWideString compare: 'abd') = 1.	self assert: ('abd' asWideString compare: 'abc') = 3.	self assert: ('abc' asWideString compare: 'abC') = 2.	self assert: ('abc' asWideString compare: 'abD') = 1.	self assert: ('abd' asWideString compare: 'abC') = 3.	self assert: ('aBc' asWideString compare: 'abC') = 2.	self assert: ('aBc' asWideString compare: 'abD') = 1.	self assert: ('aDd' asWideString compare: 'abC') = 3.		self assert: ('abc' asWideString compare: 'abc' asWideString) = 2.	self assert: ('abc' asWideString compare: 'abd' asWideString) = 1.	self assert: ('abd' asWideString compare: 'abc' asWideString) = 3.	self assert: ('abc' asWideString compare: 'abC' asWideString) = 2.	self assert: ('abc' asWideString compare: 'abD' asWideString) = 1.	self assert: ('abd' asWideString compare: 'abC' asWideString) = 3.	self assert: ('aBc' asWideString compare: 'abC' asWideString) = 2.	self assert: ('aBc' asWideString compare: 'abD' asWideString) = 1.	self assert: ('aDd' asWideString compare: 'abC' asWideString) = 3.		self assert: ('abc' compare: 'abc' caseSensitive: true) = 2.	self assert: ('abc' compare: 'abC' caseSensitive: false) = 2.	self assert: ('abc' compare: 'abc' asWideString caseSensitive: true) = 2.	self assert: ('abc' compare: 'abC' asWideString caseSensitive: false) = 2.	self assert: ('abc' asWideString compare: 'abc' caseSensitive: true) = 2.	self assert: ('abc' asWideString compare: 'abC' caseSensitive: false) = 2.	self assert: ('abc' asWideString compare: 'abc' asWideString caseSensitive: true) = 2.	self assert: ('abc' asWideString compare: 'abC' asWideString caseSensitive: false) = 2.! !!IntegerArrayTest methodsFor: 'tests' stamp: 'dtl 10/3/2009 16:35'!testStoreNegativeOutOfRange	"A value too small for a 32-bit signed integer should raise an error."	| ia val storedValue |	ia := IntegerArray new: 1.	val := (2 raisedTo: 31) negated - 1. " -16r80000001 of range for 32-bit twos complement integer"	self should: [ia at: 1 put: val. "should raise error here"				storedValue := ia at: 1. "lack of range check leads to value of 16r7FFFFFFF"				self assert: val = storedValue "fail here"]		raise: Error! !!WideStringTest methodsFor: 'tests - match' stamp: 'nice 7/28/2007 23:16'!testMatch	"from johnmci at http://bugs.squeak.org/view.php?id=5331"		self assert: ('*baz' match: 'mobaz' ).	self assert: ('*foo#zort' match: 'afoo3zortthenfoo3zort' ).	self assert: ('*baz' match: 'mobaz' ).	self assert: ('*foo#zort' match: 'afoo3zortthenfoo3zort' ).		self assert: ('*baz' match: 'mobaz' asWideString).	self assert: ('*foo#zort' match: 'afoo3zortthenfoo3zort' asWideString).	self assert: ('*baz' match: 'mobaz' asWideString).	self assert: ('*foo#zort' match: 'afoo3zortthenfoo3zort' asWideString).		self assert: ('*baz' asWideString match: 'mobaz' ).	self assert: ('*foo#zort' asWideString match: 'afoo3zortthenfoo3zort' ).	self assert: ('*baz' asWideString match: 'mobaz' ).	self assert: ('*foo#zort' asWideString match: 'afoo3zortthenfoo3zort' ).		self assert: ('*baz' asWideString match: 'mobaz' asWideString).	self assert: ('*foo#zort' asWideString match: 'afoo3zortthenfoo3zort' asWideString).	self assert: ('*baz' asWideString match: 'mobaz' asWideString).	self assert: ('*foo#zort' asWideString match: 'afoo3zortthenfoo3zort' asWideString).! !!SortedCollectionTest methodsFor: 'basic' stamp: 'nice 5/22/2008 09:59'!testSpeciesLooseSortBlock	"This is a non regression test for http://bugs.squeak.org/view.php?id=6535"	| numbers reverseOrder firstThree |	numbers := #(1 2 3 4 5).	reverseOrder := SortedCollection sortBlock: [:x :y | x > y].	reverseOrder addAll: numbers.	"The elements are inverted"	self assert: [reverseOrder asArray = #(5 4 3 2 1)].	"Copy the first 3 elements"	firstThree := reverseOrder copyFrom: 1 to: 3.	"It appears to work"	self assert: [firstThree asArray = #(5 4 3)].	"but we have lost the sort block"	firstThree add: 1.	" firstThree is now #(1 5 4 3)!! "	self assert: [firstThree asArray = #(5 4 3 1)] "fails"! !!IntegerArrayTest methodsFor: 'tests' stamp: 'dtl 10/3/2009 16:35'!testStorePositiveOutOfRange	"A value too large for a 32-bit signed integer should raise an error."	| ia val storedValue |	ia := IntegerArray new: 1.	val := 2 raisedTo: 31. "16r80000000 is out of range for 32-bit twos complement"	self should: [ia at: 1 put: val. "should raise error here"				storedValue := ia at: 1. "lack of range check leads to value of 16r-80000000"				self assert: val = storedValue "fail here"]		raise: Error! !!WideStringTest methodsFor: 'tests - match' stamp: 'nice 7/28/2007 23:22'!testCharactersExactlyMatching	"from johnmci at http://bugs.squeak.org/view.php?id=5331"		self assert: ('abc' charactersExactlyMatching: 'abc') = 3.	self assert: ('abd' charactersExactlyMatching: 'abc') = 2.	self assert: ('abc' charactersExactlyMatching: 'abc' asWideString) = 3.	self assert: ('abd' charactersExactlyMatching: 'abc' asWideString) = 2.	self assert: ('abc' asWideString charactersExactlyMatching: 'abc') = 3.	self assert: ('abd' asWideString charactersExactlyMatching: 'abc') = 2.	self assert: ('abc' asWideString charactersExactlyMatching: 'abc' asWideString) = 3.	self assert: ('abd' asWideString charactersExactlyMatching: 'abc' asWideString)= 2.	self assert: ('abc' charactersExactlyMatching: 'ABC') = 0.! !!WideStringTest methodsFor: 'tests - relation order' stamp: 'nice 7/28/2007 23:21'!testRelationOrderWithCase	"from johnmci at http://bugs.squeak.org/view.php?id=5331"			self assert: ('ABC' caseInsensitiveLessOrEqual: 'abc').	self assert: ('ABC' caseInsensitiveLessOrEqual: 'abd').	self assert: ('ABD' caseInsensitiveLessOrEqual: 'abc') not.	self assert: ('ABC' caseInsensitiveLessOrEqual: 'abc' asWideString).	self assert: ('ABC' caseInsensitiveLessOrEqual: 'abd' asWideString).	self assert: ('ABD' caseInsensitiveLessOrEqual: 'abc' asWideString) not.	self assert: ('ABC' asWideString caseInsensitiveLessOrEqual: 'abc').	self assert: ('ABC' asWideString caseInsensitiveLessOrEqual: 'abd').	self assert: ('ABD' asWideString caseInsensitiveLessOrEqual: 'abc') not.	self assert: ('ABC' asWideString caseInsensitiveLessOrEqual: 'abc' asWideString).	self assert: ('ABC' asWideString caseInsensitiveLessOrEqual: 'abd' asWideString).	self assert: ('ABD' asWideString caseInsensitiveLessOrEqual: 'abc' asWideString) not.			self assert: ('abc' caseSensitiveLessOrEqual: 'abc').	self assert: ('abc' caseSensitiveLessOrEqual: 'abd').	self assert: ('abd' caseSensitiveLessOrEqual: 'abc') not.	self assert: ('abc' caseSensitiveLessOrEqual: 'abc' asWideString).	self assert: ('abc' caseSensitiveLessOrEqual: 'abd' asWideString).	self assert: ('abd' caseSensitiveLessOrEqual: 'abc' asWideString) not.	self assert: ('abc' asWideString caseSensitiveLessOrEqual: 'abc').	self assert: ('abc' asWideString caseSensitiveLessOrEqual: 'abd').	self assert: ('abd' asWideString caseSensitiveLessOrEqual: 'abc') not.	self assert: ('abc' caseSensitiveLessOrEqual: 'ABC') not.	! !!IntegerArrayTest methodsFor: 'tests' stamp: 'dtl 10/3/2009 16:34'!testStoreLargePositiveInteger	"A LargePositiveInteger that does not exceed the range of a 32-bit twos	complement integer may be stored."	| ia val |	ia := IntegerArray new: 1.	val := (2 raisedTo: 31) - 1. "largest positive 32-bit integer, a LargePositiveInteger"	ia at: 1 put: val.	self assert: ((ia at: 1) = val)! !!KeyedSetTest methodsFor: 'tests' stamp: 'nice 5/22/2008 14:18'!testSelect	"this is a non regression test for http://bugs.squeak.org/view.php?id=6535"		| ks ks2 |		"Creare a KeyedSet"	ks := KeyedSet keyBlock: [:e | e asInteger \\ 4].	ks addAll: #(1.2 1.5 3.8 7.7 9.1 12.4 13.25 14.0 19.2 11.4).		"There is non more than 4 possible keys (0 1 2 3)"	self assert: ks size <= 4.		"Select some elements"	ks2 := ks select: [:e | e fractionPart > 0.5].	"If keyBlock was preserved, then still no more than 4 keys..."	ks2 addAll: #(1.2 1.5 3.8 7.7 9.1 12.4 13.25 14.0 19.2 11.4).	self assert: ks2 size <= 4.! !!IntegerArrayTest methodsFor: 'tests' stamp: 'dtl 10/3/2009 16:31'!testStoreSmallInteger	"Any SmallInteger may be stored in an IntegerArray."	| ia val |	ia := IntegerArray new: 1.	val := SmallInteger maxVal.	ia at: 1 put: val.	self assert: ((ia at: 1) = val).	val := SmallInteger minVal.	ia at: 1 put: val.	self assert: ((ia at: 1) = val)! !!WideStringTest methodsFor: 'tests - relation order' stamp: 'nice 7/28/2007 23:14'!testRelationOrder	"from johnmci at http://bugs.squeak.org/view.php?id=5331"	self assert: ('aa' < 'ab').	self assert: ('aa' <= 'ab').	self assert: ('aa' <= 'aa').	self assert: ('ab' > 'aa').	self assert: ('ab' >= 'aa').	self assert: ('aa' >= 'aa').		self assert: ('aa' < 'ab' asWideString).	self assert: ('aa' <= 'ab' asWideString).	self assert: ('aa' <= 'aa' asWideString).	self assert: ('ab' > 'aa' asWideString).	self assert: ('ab' >= 'aa' asWideString).	self assert: ('aa' >= 'aa' asWideString).		self assert: ('aa' asWideString < 'ab').	self assert: ('aa' asWideString <= 'ab').	self assert: ('aa' asWideString <= 'aa').	self assert: ('ab' asWideString > 'aa').	self assert: ('ab' asWideString >= 'aa').	self assert: ('aa' asWideString >= 'aa').		self assert: ('aa' asWideString< 'ab' asWideString).	self assert: ('aa' asWideString<= 'ab' asWideString).	self assert: ('aa' asWideString<= 'aa' asWideString).	self assert: ('ab' asWideString> 'aa' asWideString).	self assert: ('ab' asWideString >= 'aa' asWideString).	self assert: ('aa' asWideString>= 'aa' asWideString).! !!WideStringTest methodsFor: 'tests - endsWith' stamp: 'nice 10/3/2009 21:18'!testEndsWith	"Mix of tests from http://bugs.squeak.org/view.php?id=6366	#endsWith: was broken because using broken findSubstring	and tests from johnmci at http://bugs.squeak.org/view.php?id=5331"	| ws |			self assert: ('abc' endsWith: 'bc').	self assert: ('abc' endsWith: 'bc' asWideString).	self assert: ('abc' asWideString endsWith: 'bc').	self assert: ('abc' endsWith: 'bX') not.	self assert: ('abc' endsWith: 'BC') not.	self assert: ('abc' endsWith: 'BC' asWideString) not.	self assert: ('ABC' asWideString endsWith: 'bc') not.		self assert: ('Elvis' endsWith: 'vis').	self assert: ('Elvis' asWideString endsWith: 'vis').	self assert: ((WideString with: (Unicode value: 530)) , 'Elvis' endsWith: 'vis').		self deny: ('Elvis' endsWith: 'Vis').	self deny: ('Elvis' asWideString endsWith: 'vIs').	self deny: ((WideString with: (Unicode value: 530)) , 'Elvis' endsWith: 'viS').		ws := 'vis' , (WideString with: (Unicode value: 530)).	self deny: ('Elvis' endsWith: ws).	self assert: ('Elvis' , ws endsWith: ws).	self deny: ((WideString with: (Unicode value: 530)) , 'Elvis' endsWith: ws).! !!WideStringTest methodsFor: 'tests - compare' stamp: 'nice 7/28/2007 23:24'!testEqual	"from johnmci at http://bugs.squeak.org/view.php?id=5331"		self assert: 'abc' = 'abc'.	self assert: 'abc' = 'abc' asWideString.	self assert: 'abc' asWideString = 'abc'.	self assert: 'abc' asWideString = 'abc' asWideString.	self assert: ('abc' = 'ABC') not.	self assert: ('abc' = 'ABC' asWideString) not.	self assert: ('abc' asWideString = 'ABC') not.	self assert: ('abc' asWideString = 'abc' asWideString).	self assert: ((ByteArray with: 97 with: 0 with: 0 with: 0) asString ~= 'a000' asWideString).	self assert: ('a000' asWideString ~= (ByteArray with: 97 with: 0 with: 0 with: 0) asString).! !!WideStringTest methodsFor: 'tests - compare' stamp: 'nice 7/28/2007 23:25'!testSameAs	"from johnmci at http://bugs.squeak.org/view.php?id=5331"	self assert: ('abc' sameAs: 'aBc' asWideString).	self assert: ('aBc' asWideString sameAs: 'abc').	self assert: ((ByteArray with: 97 with: 0 with: 0 with: 0) asString sameAs: 'Abcd' asWideString) not.	self assert: ('a000' asWideString sameAs: (ByteArray with: 97 with: 0 with: 0 with: 0) asString) not.	! !!IntegerArrayTest methodsFor: 'tests' stamp: 'dtl 10/3/2009 16:36'!testStoreLargeNegativeInteger	"A LargeNegativeInteger that does not exceed the range of a 32-bit twos	complement integer may be stored."	| ia val |	ia := IntegerArray new: 1.	val := (2 raisedTo: 31) negated. "smallest negative 32-bit integer, a LargeNegativeInteger"	ia at: 1 put: val.	self assert: ((ia at: 1) = val)! !!WideStringTest methodsFor: 'tests - beginsWith' stamp: 'nice 7/28/2007 23:29'!testBeginsWith	"from johnmci at http://bugs.squeak.org/view.php?id=5331"		| w1 w2 |	self assert: ('abc' beginsWith: 'ab').	self assert: ('abc' beginsWith: 'ab' asWideString).	self assert: ('abc' asWideString beginsWith: 'ab').	self assert: ('abc' beginsWith: 'aX') not .	self assert: ('abc' beginsWith: 'AB') not.	self assert: ('abc' beginsWith: 'AB' asWideString) not .	self assert: ('ABC' asWideString beginsWith: 'ab') not.	w1 := WideString with: (Unicode value: 402) with: $a with: (Unicode value: 400) with: $b.	w2 := WideString with: (Unicode value: 402).	w1 beginsWith: w2.! !