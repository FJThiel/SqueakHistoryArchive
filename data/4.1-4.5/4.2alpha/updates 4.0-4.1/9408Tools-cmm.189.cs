"Change Set:		9408Tools-cmm.189Tools-cmm.189:- Fix for new Reuse Windows feature for object-explorers.Tools-dtl.183:Recategorize Utilities class>> openScratchWorkspaceLabeled:contents: from System to ST80 ( MVC-only method).Eliminate explicit MVC/Morphic references in  Utilities class>>closeAllDebuggersTools-cmm.184:- Updates for working with new refactored DirectoryEntry, of the Files package.Tools-edc.185:Enhanced Filelist2 for populated disk.You could navigate and the last dir you use is remembered.See navigation for loading projects in dockingbarTools-dtl.186:Remove two unreferenced methods with MVC/Morphic dependencies (these were reintroduced in Tools-edc.185 but are not required now).Tools-cmm.187:- Fixed a missed old-style DirectoryEntry access.Tools-ul.188:- add a missing class instance variable (lastSelDir) to FileList2"!FileList subclass: #FileList2	instanceVariableNames: 'showDirsInFileList currentDirectorySelected fileSelectionBlock dirSelectionBlock optionalButtonSpecs modalView directoryChangeBlock ok'	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-FileList'!!ObjectExplorer methodsFor: 'accessing' stamp: 'cmm 2/19/2010 14:40'!rootObject	^ rootObject! !!FileList2 class methodsFor: 'morphic ui' stamp: 'edc 10/8/2009 09:46'!morphicViewFileSelectorForSuffixes: aList 	"Answer a morphic file-selector tool for the given suffix list."	^ self morphicViewFileSelectorForSuffixes: aList directory: self modalFolderSelector! !!FileList methodsFor: 'private' stamp: 'cmm 2/18/2010 20:38'!entriesMatching: patternString	"Answer a list of directory entries which match the patternString.	The patternString may consist of multiple patterns separated by ';'.	Each pattern can include a '*' or '#' as wildcards - see String>>match:"	| entries patterns |	entries := directory entries reject:[:e| e isDirectory].	patterns := patternString findTokens: ';'.	(patterns anySatisfy: [:each | each = '*'])		ifTrue: [^ entries].	^ entries select: [:entry | patterns anySatisfy: [:each | each match: entry name]]! !!FileList2 methodsFor: 'volume list and pattern' stamp: 'cmm 9/4/2007 12:12'!listForPatterns: anArray	"Make the list be those file names which match the patterns."	| sizePad newList |	directory ifNil: [^#()].	(fileSelectionBlock isKindOf: MessageSend) ifTrue: [		fileSelectionBlock arguments: {directory entries}.		newList := fileSelectionBlock value.		fileSelectionBlock arguments: #().	] ifFalse: [		newList := Set new.		anArray do: [ :pat |			newList addAll: (directory entries select: [:entry | fileSelectionBlock value: entry value: pat]) ].	].	newList := newList asSortedCollection: self sortBlock.	sizePad := (newList inject: 0 into: [:mx :entry | mx max: entry fileSize])					asStringWithCommas size - 1.	newList := newList collect: [ :e | self fileNameFormattedFrom: e sizePad: sizePad ].	^ newList asArray! !!FileList2 class methodsFor: 'accessing' stamp: 'edc 10/3/2009 08:14'!lastSelDir^ lastSelDir! !!FileList2 class methodsFor: 'modal dialogs' stamp: 'edc 10/3/2009 08:18'!modalFolderSelectorself lastSelDir  ifNil: [^self modalFolderSelector: FileDirectory default]ifNotNil:[^self modalFolderSelector: self lastSelDir ]	! !!Utilities class methodsFor: '*Tools' stamp: 'dtl 2/12/2010 22:33'!closeAllDebuggers	"Utilities closeAllDebuggers"	Smalltalk isMorphic	ifTrue:		[((Smalltalk at: #SystemWindow) allSubInstances select: [:w | w model isKindOf: Debugger])			do: [:w | w delete]]	ifFalse:		[((Smalltalk at: #StandardSystemController) allInstances select: [:w | w model isKindOf: Debugger])			do: [:w | w closeAndUnscheduleNoTerminate]]! !!FileList methodsFor: 'volume list and pattern' stamp: 'cmm 8/22/2007 12:08'!fileNameFormattedFrom: entry sizePad: sizePad	"entry is a 5-element array of the form:		(name creationTime modificationTime dirFlag fileSize)"	| sizeStr nameStr dateStr |	nameStr := entry isDirectory		ifTrue: [entry name , self folderString]		ifFalse: [entry name].	dateStr := ((Date fromSeconds: entry modificationTime )					printFormat: #(3 2 1 $. 1 1 2)) , ' ' ,				(String streamContents: [:s |					(Time fromSeconds: entry modificationTime \\ 86400)						print24: true on: s]).	sizeStr := entry fileSize asStringWithCommas.	sortMode = #name ifTrue:		[^ nameStr , '    (' , dateStr , ' ' , sizeStr , ')'].	sortMode = #date ifTrue:		[^ '(' , dateStr , ' ' , sizeStr , ') ' , nameStr].	sortMode = #size ifTrue:		[^ '(' , ((sizeStr size to: sizePad) collect: [:i | $ ]) , sizeStr , ' ' , dateStr , ') ' , nameStr].! !!FileList methodsFor: 'private' stamp: 'cmm 8/22/2007 12:00'!listForPatterns: anArray	"Make the list be those file names which match the pattern."	| sizePad newList |	newList := Set new.	anArray do: [ :pat | newList addAll: (self entriesMatching: pat) ].	newList := (SortedCollection sortBlock: self sortBlock) addAll: newList; yourself.	sizePad := (newList inject: 0 into: [:mx :entry | mx max: (entry fileSize)])					asStringWithCommas size - 1.	newList := newList collect: [ :e | self fileNameFormattedFrom: e sizePad: sizePad ].	volList size = 1 ifTrue:		["Include known servers along with other desktop volumes" 		^ newList asArray ,		(ServerDirectory serverNames collect: [:n | '^' , n , self folderString])].	^ newList asArray! !!FileList2 class methodsFor: 'modal dialogs' stamp: 'edc 10/3/2009 08:19'!modalFolderSelector: aDir	| window fileModel |	window _ self morphicViewFolderSelector: aDir.	fileModel _ window model.	window openInWorld: self currentWorld extent: 300@400.	self modalLoopOn: window.	^self lastSelDir: fileModel getSelectedDirectory withoutListWrapper! !!FileList2 class methodsFor: 'accessing' stamp: 'edc 10/3/2009 08:14'!lastSelDir: aDir^ lastSelDir := aDir! !