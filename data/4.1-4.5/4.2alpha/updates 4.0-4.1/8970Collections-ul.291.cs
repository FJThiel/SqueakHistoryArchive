"Change Set:		8970Collections-ul.291Collections-ul.291:- weak collection changes, part 1- a bit faster #fixCollisionsFrom:Collections-mpe.290:add a helper method to count the number of open Transcripts"!Dictionary subclass: #WeakKeyDictionary	instanceVariableNames: 'finalizer'	classVariableNames: ''	poolDictionaries: ''	category: 'Collections-Weak'!Collection subclass: #WeakRegistry	instanceVariableNames: 'valueDictionary accessLock objectsToFinalize'	classVariableNames: 'Default'	poolDictionaries: ''	category: 'Collections-Weak'!!WeakKeyDictionary methodsFor: 'public' stamp: 'ul 2/4/2010 00:59'!slowSize	"Careful!! Answer the maximum amount	of elements in the receiver, not the	exact amount"	| count |	count := 0.	1 to: array size do: [ :index |		(array at: index) ifNotNil: [ :object |			object key ifNotNil: [				count := count + 1 ] ] ].	^count! !!WeakRegistry methodsFor: 'private' stamp: 'ul 2/3/2010 00:11'!protected: aBlock	"Execute aBlock protected by the accessLock"	^accessLock		ifNil: [ aBlock value ]		ifNotNil: [			accessLock				critical: aBlock				ifError: [ :msg :rcvr |					rcvr error: msg ] ]! !!Set methodsFor: 'private' stamp: 'ul 2/4/2010 04:06'!fixCollisionsFrom: start	"The element at start has been removed and replaced by nil.	This method moves forward from there, relocating any entries	that had been placed below due to collisions with this one."	| element index |	index := start.	[ (element := array at: (index := index \\ array size + 1)) == nil ] whileFalse: [		| newIndex |		(newIndex := self scanFor: element enclosedSetElement) = index ifFalse: [			array 				at: newIndex put: element;				at: index put: nil ] ]! !!WeakSet methodsFor: 'private' stamp: 'ul 2/5/2010 04:10'!fixCollisionsFrom: start	"The element at start has been removed and replaced by flag.	This method moves forward from there, relocating any entries	that had been placed below due to collisions with this one."	| element index |	index := start.	[ (element := array at: (index := index \\ array size + 1)) == flag ] whileFalse: [		element 			ifNil: [ "This object is gone"				array at: index put: flag.				tally := tally - 1 ]			ifNotNil: [				| newIndex |				(newIndex := self scanFor: element enclosedSetElement) = index ifFalse: [					array 						at: newIndex put: element;						at: index put: flag ] ] ]! !!WeakKeyDictionary methodsFor: 'accessing' stamp: 'ul 2/3/2010 06:22'!finalizer: aValueable	finalizer := aValueable! !!WeakKeyDictionary methodsFor: 'accessing' stamp: 'ul 2/3/2010 06:20'!keysDo: aBlock 	"Evaluate aBlock for each of the receiver's keys."		self associationsDo: [ :association |		association key ifNotNil: [ :key | "Don't let the key go away"			aBlock value: key ] ].! !!Dictionary methodsFor: 'private' stamp: 'ul 2/4/2010 04:06'!fixCollisionsFrom: start	"The element at start has been removed and replaced by nil.	This method moves forward from there, relocating any entries	that had been placed below due to collisions with this one."	| element index |	index := start.	[ (element := array at: (index := index \\ array size + 1)) == nil ] whileFalse: [		| newIndex |		(newIndex := self scanFor: element key) = index ifFalse: [			array 				at: newIndex put: element;				at: index put: nil ] ]! !!WeakRegistry methodsFor: 'removing' stamp: 'ul 2/3/2010 00:14'!remove: oldObject ifAbsent: exceptionBlock	"Remove oldObject as one of the receiver's elements."		oldObject ifNil: [ ^nil ].	^(self protected: [ valueDictionary removeKey: oldObject ifAbsent: nil ])		ifNil: [ exceptionBlock value ]! !!WeakSet methodsFor: 'private' stamp: 'ul 2/4/2010 01:01'!growSize	"Answer what my next table size should be.	Note that, it can be less than the current."		^self class goodPrimeAtLeast: self slowSize * 3 // 2 + 2! !!WeakSet methodsFor: 'public' stamp: 'ul 2/4/2010 01:10'!slowSize	"Careful!! Answer the maximum amount	of elements in the receiver, not the	exact amount"	| count |	count := 0.	1 to: array size do: [ :index |		(array at: index) ifNotNil: [ :object |			object == flag ifFalse: [				count := count + 1 ] ] ].	^count! !!WeakKeyDictionary methodsFor: 'private' stamp: 'ul 2/4/2010 01:02'!noCheckNoGrowFillFrom: anArray	"Add the elements of anArray except nils and flag to me assuming that I don't contain any of them, they are unique and I have more free space than they require."	tally := 0.	1 to: anArray size do: [ :index |		(anArray at: index) ifNotNil: [ :association |			association key 				ifNil: [ finalizer ifNotNil: [ finalizer value: association value ] ]				ifNotNil: [ :key | "Don't let the key go away"					array						at: (self scanForEmptySlotFor: key)						put: association.					tally := tally + 1 ] ] ]! !!WeakKeyDictionary methodsFor: 'private' stamp: 'ul 2/3/2010 07:09'!fixCollisionsFrom: start	"The element at start has been removed and replaced by nil.	This method moves forward from there, relocating any entries	that had been placed below due to collisions with this one."	| element index |	index := start.	[ (element := array at: (index := index \\ array size + 1)) == nil ] whileFalse: [		element key			ifNil: [ 				finalizer ifNotNil: [ finalizer value: element value ].				array at: index put: nil.				tally := tally - 1 ]			ifNotNil: [ :key | "Don't let the key go away"				| newIndex |				(newIndex := self scanFor: key) = index ifFalse: [					array swap: index with: newIndex ] ] ]! !!TranscriptStream methodsFor: 'initialization' stamp: 'mp 2/2/2010 20:36'!open	| openCount |	openCount := self countOpenTranscripts.	openCount = 0		ifTrue: [self openLabel: 'Transcript']		ifFalse: [self openLabel: 'Transcript #' , (openCount+1) printString]! !!KeyedSet methodsFor: 'private' stamp: 'ul 2/4/2010 04:07'!fixCollisionsFrom: start	"The element at start has been removed and replaced by nil.	This method moves forward from there, relocating any entries	that had been placed below due to collisions with this one."	| element index |	index := start.	[ (element := array at: (index := index \\ array size + 1)) == nil ] whileFalse: [		| newIndex |		(newIndex := self scanFor: (keyBlock value: element enclosedSetElement)) = index ifFalse: [			array 				at: newIndex put: element;				at: index put: nil ] ]! !!TranscriptStream methodsFor: 'private' stamp: 'mp 2/2/2010 20:36'!countOpenTranscripts			| openCount |	openCount := 0.	self dependents do:		[:d | ((d isKindOf: PluggableTextView) or:			[d isKindOf: PluggableTextMorph]) ifTrue: [openCount := openCount + 1]].	^ openCount! !!WeakKeyDictionary methodsFor: 'private' stamp: 'ul 2/4/2010 01:01'!growSize	"Answer what my next table size should be.	Note that, it can be less than the current."		^self class goodPrimeAtLeast: self slowSize * 3 // 2 + 2! !WeakSet removeSelector: #grow!