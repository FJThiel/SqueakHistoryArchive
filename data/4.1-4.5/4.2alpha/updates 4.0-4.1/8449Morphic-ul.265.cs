"Change Set:		8449Morphic-ul.265Morphic-ul.265:- make sure that ProvideAnswerNotification's messageText is a StringMorphic-HenrikSperreJohansen.262:Changes the display of grip handles of windows to be more inline with the rest of the updated GUI.See CornerGripMorph class 'handle settings'-protocol for customizability.Morphic-ar.263:Adds a modal UserDialogBoxMorph for simple inform: or confirm: dialogs.Morphic-ul.264:- replace sends of #ifNotNilDo: to #ifNotNil:, #ifNil:ifNotNilDo: to #ifNil:ifNotNil:, #ifNotNilDo:ifNil: to #ifNotNil:ifNil:"!AbstractResizerMorph subclass: #CornerGripMorph	instanceVariableNames: 'target'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Windows'!AlignmentMorph subclass: #UserDialogBoxMorph	instanceVariableNames: 'titleMorph labelMorph buttonRow value'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Windows'!!UserDialogBoxMorph methodsFor: 'events' stamp: 'ar 12/12/2009 00:08'!mouseDown: event	(self containsPoint: event position) ifFalse:[		Beeper beepPrimitive.		^self flash].	event hand grabMorph: self.! !!TopRightGripMorph methodsFor: 'private' stamp: 'hsj 12/10/2009 16:04'!handleOrigin^0@25! !!BottomRightGripMorph methodsFor: 'private' stamp: 'hsj 12/10/2009 16:07'!handleOrigin	^0@0! !!UserDialogBoxMorph methodsFor: 'running' stamp: 'ul 12/12/2009 15:16'!runModalIn: aWorld forHand: aHand	"Ensure that we have a reasonable minimum size"	| oldFocus |	(ProvideAnswerNotification signal: self label asString) ifNotNil:[:answer| ^answer].	self openInWorld: aWorld.	self setConstrainedPosition: aHand position - (self fullBounds extent // 2) hangOut: false.	oldFocus := aHand keyboardFocus.	aHand newMouseFocus: self.	aHand newKeyboardFocus: self.	[self isInWorld] whileTrue:[aWorld doOneSubCycle].	oldFocus ifNotNil:[aHand keyboardFocus: oldFocus].	^value! !!BottomLeftGripMorph methodsFor: 'private' stamp: 'hsj 12/10/2009 16:44'!borderOffset	|width|	width :=SystemWindow borderWidth +1.	 ^self handleOrigin + (width @ width negated)! !!UserDialogBoxMorph methodsFor: 'running' stamp: 'ar 12/12/2009 00:06'!updateFill	| fill |	fill := GradientFillStyle ramp: {0.0 -> Color white. 1 ->Preferences menuColor}.	fill radial: false;		origin: self topLeft;		direction: 0 @ self height.	self fillStyle: fill.! !!FileList methodsFor: 'file list' stamp: 'ul 12/12/2009 14:11'!readOnlyStream	"Answer a read-only stream on the selected file. For the various stream-reading services."	^self directory ifNotNil: [ :dir | dir readOnlyFileNamed: self fileName ]! !!HaloMorph methodsFor: 'private' stamp: 'ul 12/12/2009 14:11'!doRot: evt with: rotHandle	"Update the rotation of my target if it is rotatable.  Keep the relevant command object up to date."	| degrees |	evt hand obtainHalo: self.	degrees := (evt cursorPoint - (target pointInWorld: target referencePosition)) degrees.	degrees := degrees - angleOffset degrees.	degrees := degrees detentBy: 10.0 atMultiplesOf: 90.0 snap: false.	degrees = 0.0		ifTrue: [self setColor: Color lightBlue toHandle: rotHandle]		ifFalse: [self setColor: Color blue toHandle: rotHandle].	rotHandle submorphsDo:		[:m | m color: rotHandle color makeForegroundColor].	self removeAllHandlesBut: rotHandle.	self showingDirectionHandles ifFalse:		[self showDirectionHandles: true addHandles: false].	self addDirectionHandles.	target rotationDegrees: degrees.	rotHandle position: evt cursorPoint - (rotHandle extent // 2).	(self valueOfProperty: #commandInProgress) ifNotNil:		[:cmd | "Update the final rotation"		cmd redoTarget: target renderedMorph selector: #heading: argument: degrees].	self layoutChanged! !!UserDialogBoxMorph methodsFor: 'running' stamp: 'ar 12/11/2009 22:52'!closeDialog: returnValue	value := returnValue.	self delete.! !!CornerGripMorph methodsFor: 'private' stamp: 'HenrikSperreJohansen 12/10/2009 21:11'!setDefaultColors	handleColor := self passiveForm.! !!PasteUpMorph methodsFor: 'undo' stamp: 'ul 12/12/2009 14:08'!reintroduceIntoWorld: aMorph	"The given morph is being raised from the dead.  Bring it back to life."	(aMorph valueOfProperty: #lastPosition) ifNotNil:		[:pos | aMorph position: pos].	aMorph openInWorld; goHome	! !!CornerGripMorph class methodsFor: 'accessing' stamp: 'HenrikSperreJohansen 12/10/2009 21:06'!activeForm	^ActiveForm ifNil: [self initializeActiveForm]! !!CornerGripMorph methodsFor: 'private' stamp: 'HenrikSperreJohansen 12/10/2009 21:13'!clipForm: aHandle	|cutArea|	"This doesn't really needs to be done every draw, but only if border width changes.	In that case,, we'd have to install a newly initialized one anyways, so the current method will fail.	Good enough for now though."	cutArea := self transparentRectangle.	aHandle getCanvas image: cutArea 		at: self borderOffset 		sourceRect: cutArea boundingBox 		rule: Form and. 	^aHandle		! !!PolygonMorph methodsFor: 'menu' stamp: 'ul 12/12/2009 14:07'!customizeArrows: evt	| handle origin aHand |	aHand := evt ifNil: [self primaryHand] ifNotNil: [evt hand].	origin := aHand position.	(handle := HandleMorph new)		forEachPointDo:			[:newPoint | handle removeAllMorphs.			handle addMorph:				(LineMorph from: origin to: newPoint color: Color black width: 1).			self arrowSpec: (newPoint - origin) / 5.0]		lastPointDo:			[:newPoint | handle deleteBalloon.			self halo ifNotNil: [:halo | halo addHandles].].	aHand attachMorph: handle.	handle setProperty: #helpAtCenter toValue: true.	handle showBalloon:'Move cursor left and rightto change arrow length and style.Move it up and down to change width.Click when done.' hand: evt hand.	handle startStepping! !!StringMorphAttributeScanner methodsFor: 'scanning' stamp: 'ul 12/12/2009 14:06'!setActualFont: aFont	"Set the value of actualFont, from a TextFontReference"	actualFont := aFont.	aFont textStyle ifNotNil: [ :ts | fontNumber := ts fontIndexOf: aFont ]! !!ScriptEditorMorph methodsFor: 'buttons' stamp: 'ul 12/12/2009 14:07'!buttonRowForEditor	"Answer a row of buttons that comprise the header at the top of the Scriptor"	| aRow aString buttonFont aStatusMorph aButton aColumn aTile |	buttonFont := Preferences standardButtonFont.	aRow := AlignmentMorph newRow color: Color transparent; layoutInset: 0.	aRow hResizing: #shrinkWrap.	aRow vResizing: #shrinkWrap.	self hasParameter ifFalse:		[aRow addMorphFront:			(SimpleButtonMorph new				label: '!!' font: Preferences standardEToysFont;				target: self;				color: Color yellow;				borderWidth: 0;				actWhen: #whilePressed;				actionSelector: #tryMe;				balloonTextSelector: #tryMe).		aRow addTransparentSpacerOfSize: 6@10].	self addDismissButtonTo: aRow.	aRow addTransparentSpacerOfSize: 6@1.	aColumn := AlignmentMorph newColumn beTransparent.	aColumn addTransparentSpacerOfSize: 0@4.	aButton := UpdatingThreePhaseButtonMorph checkBox.	aButton		target: self;		actionSelector: #toggleWhetherShowingTiles;		getSelector: #showingMethodPane.	aButton setBalloonText: 'toggle between showing tiles and showing textual code' translated.	aColumn addMorphBack: aButton.	aRow addMorphBack: aColumn.	aRow addTransparentSpacerOfSize: 6@10.	aString := playerScripted externalName.	aRow addMorphBack:		(aButton := SimpleButtonMorph new useSquareCorners label: aString font: buttonFont; target: self; setNameTo: 'title').	aButton actWhen: #buttonDown; actionSelector: #offerScriptorMenu.	aButton		on: #mouseEnter send: #menuButtonMouseEnter: to: aButton;		on: #mouseLeave send: #menuButtonMouseLeave: to: aButton.	aButton borderColor: (Color fromRgbTriplet: #(0.065 0.258 1.0)).	aButton color: ScriptingSystem uniformTileInteriorColor.	aButton balloonTextSelector: #offerScriptorMenu.	aRow addTransparentSpacerOfSize: 4@1.	aButton := (Preferences universalTiles ifTrue: [SyntaxUpdatingStringMorph] 					ifFalse: [UpdatingStringMorph]) new.	aButton useStringFormat;		target:  self;		getSelector: #scriptTitle;		setNameTo: 'script name';		font: ScriptingSystem fontForNameEditingInScriptor;		putSelector: #setScriptNameTo:;		setProperty: #okToTextEdit toValue: true;		step;		yourself.	aRow addMorphBack: aButton.	aButton setBalloonText: 'Click here to edit the name of the script.' translated.	aRow addTransparentSpacerOfSize: 6@0.	self hasParameter		ifTrue:			[aTile := TypeListTile new choices: Vocabulary typeChoices dataType: nil.			aTile addArrows.			aTile setLiteral: #Number.	"(aButton := SimpleButtonMorph new useSquareCorners label: 'parameter' translated font: buttonFont; target: self; setNameTo: 'parameter').			aButton actWhen: #buttonDown; actionSelector: #handUserParameterTile."			aRow addMorphBack: aTile.			aTile borderColor: Color red.			aTile color: ScriptingSystem uniformTileInteriorColor.			aTile setBalloonText: 'Drag from here to get a parameter tile' translated]		ifFalse:			[aRow addMorphBack: (aStatusMorph := self scriptInstantiation statusControlMorph)].	aRow addTransparentSpacerOfSize: 6@1.	aRow addMorphBack:		(IconicButton new borderWidth: 0;			labelGraphic: (ScriptingSystem formAtKey: 'AddTest'); color: Color transparent; 			actWhen: #buttonDown;			target: self;			actionSelector: #addYesNoToHand;			shedSelvedge;			balloonTextSelector: #addYesNoToHand).	aRow addTransparentSpacerOfSize: 12@10.	self addDestroyButtonTo: aRow.	(playerScripted existingScriptInstantiationForSelector: scriptName)		ifNotNil:			[:inst | inst updateStatusMorph: aStatusMorph].	^ aRow! !!MenuMorph class methodsFor: 'utilities' stamp: 'ul 12/12/2009 14:09'!inform: queryString	"MenuMorph inform: 'I like Squeak'"	| menu |	(ProvideAnswerNotification signal: queryString) 		ifNotNil:[:answer | ^ self].	menu := self new.	menu addTitle: queryString icon: MenuIcons confirmIcon.	menu add: 'OK' target: self selector: #yourself.	MenuIcons decorateMenu: menu.	menu invokeAt: ActiveHand position in: ActiveWorld allowKeyboard: true.! !!UserDialogBoxMorph methodsFor: 'events' stamp: 'ar 12/11/2009 23:17'!mouseUp: event	"aggressively preserve focus"	event hand newMouseFocus: self.! !!TopRightGripMorph methodsFor: 'private' stamp: 'hsj 12/10/2009 16:43'!borderOffset	|width|	width :=SystemWindow borderWidth +1 .	 ^self handleOrigin + ( width negated @ (width) )! !!MorphicProject methodsFor: 'enter' stamp: 'ul 12/12/2009 14:09'!finalExitActions	(world findA: ProjectNavigationMorph)		ifNotNil: [:navigator | navigator retractIfAppropriate]! !!MenuMorph class methodsFor: 'utilities' stamp: 'ul 12/12/2009 14:09'!chooseFrom: aList lines: linesArray title: queryString	"Choose an item from the given list. Answer the index of the selected item."	"MenuMorph		chooseFrom: #('Hello' 'World' 'Here' 'We' 'Go')		lines: #(2 4)		title: 'What''s up?'"	| menu aBlock result |	(ProvideAnswerNotification signal: queryString) ifNotNil:[:answer | 		1 to: aList size do:[:i| (aList at: i) = answer ifTrue:[^i]].		^0].	aBlock := [:v| result := v].	menu := self new.	menu addTitle: queryString.	1 to: aList size do:[:i| 		menu add: (aList at: i) asString target: aBlock selector: #value: argument: i.		(linesArray includes: i) ifTrue:[menu addLine]	].	MenuIcons decorateMenu: menu.	result := 0.	menu invokeAt: ActiveHand position in: ActiveWorld allowKeyboard: true.	^result! !!BottomRightGripMorph methodsFor: 'private' stamp: 'hsj 12/10/2009 16:45'!borderOffset	|width|	width :=SystemWindow borderWidth +1.	 ^self handleOrigin - (width asPoint)! !!MenuMorph class methodsFor: 'utilities' stamp: 'ul 12/12/2009 14:09'!chooseFrom: aList values: valueList lines: linesArray title: queryString	"Choose an item from the given list. Answer the index of the selected item."	"MenuMorph		chooseFrom: #('Hello' 'World' 'Here' 'We' 'Go')		values: #('Hello' 'World' 'Here' 'We' 'Go')		lines: #(2 4)		title: 'What''s up?'"	| menu aBlock result |	(ProvideAnswerNotification signal: queryString) ifNotNil:[:answer | 		1 to: aList size do:[:i| (aList at: i) = answer ifTrue:[^answer]].		^nil].	aBlock := [:v| result := v].	menu := self new.	menu addTitle: queryString.	1 to: aList size do:[:i| 		menu add: (aList at: i) asString target: aBlock selector: #value: argument: (valueList at: i).		(linesArray includes: i) ifTrue:[menu addLine]	].	MenuIcons decorateMenu: menu.	result := nil.	menu invokeAt: ActiveHand position in: ActiveWorld allowKeyboard: true.	^result! !!CornerGripMorph methodsFor: 'private' stamp: 'HenrikSperreJohansen 12/10/2009 21:08'!activeForm	^self clipForm: self class activeForm! !!TextMorph methodsFor: 'blinking' stamp: 'ul 12/12/2009 14:05'!onBlinkCursor	"Blink the cursor"	| para |	para := self paragraph ifNil:[^nil].	Time millisecondClockValue < self blinkStart ifTrue:[		"don't blink yet"		^para showCaret: para focused.	].	para showCaret: para showCaret not.	para caretRect ifNotNil: [ :r | self invalidRect: r].! !!UserDialogBoxMorph methodsFor: 'events' stamp: 'ar 12/11/2009 23:56'!wantsToBeDroppedInto: aMorph	"Return true if it's okay to drop the receiver into aMorph"	^aMorph isWorldMorph "only into worlds"! !!PasteUpMorph methodsFor: 'accessing' stamp: 'ul 12/12/2009 14:08'!modalWindow: aMorph 	(self valueOfProperty: #modalWindow)		ifNotNil: [:morph | morph doCancel].	self setProperty: #modalWindow toValue: aMorph.	aMorph		ifNotNil: [self				when: #aboutToLeaveWorld				send: #removeModalWindow				to: self]! !!PolygonMorph methodsFor: 'private' stamp: 'ul 12/12/2009 14:07'!privateMoveBy: delta	super privateMoveBy: delta.	vertices := vertices collect: [:p | p + delta].	self arrowForms do: [:f | f offset: f offset + delta].	curveState := nil.  "Force recomputation"	(self valueOfProperty: #referencePosition) ifNotNil:		[:oldPos | self setProperty: #referencePosition toValue: oldPos + delta]! !!UserDialogBoxMorph class methodsFor: 'utilities' stamp: 'ar 12/12/2009 00:28'!confirm: aString orCancel: cancelBlock	"UserDialogBoxMorph confirm: 'Do you like chocolate?'"	| dialog resp |	dialog := self new.	dialog title: 'Confirmation'.	dialog label: aString.	dialog addButton: '       Yes       ' translated value: true.	dialog addButton: '        No        ' translated  value: false..	dialog addButton: '     Cancel     ' translated  value: nil..	resp := dialog runModalIn: ActiveWorld forHand: ActiveHand.	^resp ifNil:[cancelBlock value]! !!TopLeftGripMorph methodsFor: 'private' stamp: 'hsj 12/10/2009 16:05'!handleOrigin^25@25! !!ScriptEditorMorph methodsFor: 'buttons' stamp: 'ul 12/12/2009 14:06'!updateStatusMorph: statusMorph	"My status button may need to reflect an externally-induced change in status"	(playerScripted existingScriptInstantiationForSelector: scriptName) ifNotNil:		[:scriptInstantiation |			scriptInstantiation updateStatusMorph: statusMorph]! !!Morph methodsFor: 'submorphs-add/remove' stamp: 'ul 12/12/2009 14:09'!allMorphsWithPlayersDo: aTwoArgumentBlock 	"Evaluate the given block for all morphs in this composite morph that have non-nil players.	Also evaluate the block for the receiver if it has a player."	submorphs do: [:m | m allMorphsWithPlayersDo: aTwoArgumentBlock ].	self playerRepresented ifNotNil: [ :p | aTwoArgumentBlock value: self value: p ].! !!UserDialogBoxMorph methodsFor: 'constructing' stamp: 'ar 12/11/2009 23:22'!label: aString	"The dialog's label (String)"	labelMorph contents: aString.! !!Morph methodsFor: 'stepping and presenter' stamp: 'ul 12/12/2009 14:09'!stepAt: millisecondClockValue	"Do some periodic activity. Use startStepping/stopStepping to start and stop getting sent this message. The time between steps is specified by this morph's answer to the stepTime message.	The millisecondClockValue parameter gives the value of the millisecond clock at the moment of dispatch.	Default is to dispatch to the parameterless step method for the morph, but this protocol makes it possible for some morphs to do differing things depending on the clock value"	self player ifNotNil:[:p| p stepAt: millisecondClockValue].	self step! !!CornerGripMorph class methodsFor: 'handle settings' stamp: 'HenrikSperreJohansen 12/10/2009 21:08'!activeColor: aColor	|canvas|	canvas := self initializeActiveForm getCanvas.	canvas 		privatePort fillPattern: aColor;		combinationRule: Form rgbMul;		fillRect: (self activeForm boundingBox) offset: 0@0.	self subclassesDo: [:each | each activeColor: aColor]		! !!CornerGripMorph methodsFor: 'drawing' stamp: 'hsj 12/10/2009 17:23'!drawOn: aCanvas	bounds := self bounds.	aCanvas 		translucentImage: (self alphaHandle) 		at: (bounds origin ) 		sourceRect: (self handleOrigin extent: bounds extent )! !!TextMorph methodsFor: 'blinking' stamp: 'ul 12/12/2009 14:05'!resetBlinkCursor	"Reset the blinking cursor"	| para |	self blinkStart: Time millisecondClockValue + 500.	para := self paragraph ifNil:[^self].	para showCaret = para focused ifFalse:[		para caretRect ifNotNil: [ :r | self invalidRect: r].		para showCaret: para focused.	].! !!UserDialogBoxMorph methodsFor: 'constructing' stamp: 'ar 12/11/2009 23:14'!handleFocusEvent: evt	"Handle focus events. Valid menu transitions are determined based on the menu currently holding the focus after the mouse went down on one of its children."	self processEvent: evt.	"Need to handle keyboard input if we have the focus."	^self handleEvent: evt! !!TextMorph methodsFor: 'menu' stamp: 'ul 12/12/2009 14:05'!changeMargins: evt	| handle origin aHand oldMargin newMargin |	aHand := evt ifNil: [self primaryHand] ifNotNil: [evt hand].	origin := aHand position.	oldMargin := margins.	(handle := HandleMorph new)		forEachPointDo:			[:newPoint | handle removeAllMorphs.			handle addMorph:				(LineMorph from: origin to: newPoint color: Color black width: 1).			newMargin := (newPoint - origin max: 0@0) // 5.			self margins: newMargin]		lastPointDo:			[:newPoint | handle deleteBalloon.			self halo ifNotNil: [ :halo | halo addHandles].			self rememberCommand:				(Command new cmdWording: ('margin change for ' translated,self nameForUndoWording);					undoTarget: self selector: #margins: argument: oldMargin;					redoTarget: self selector: #margins: argument: newMargin;					yourself)].	aHand attachMorph: handle.	handle setProperty: #helpAtCenter toValue: true.	handle showBalloon:'Move cursor down and to the rightto increase margin inset.Click when done.' hand: evt hand.	handle startStepping! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'ul 12/12/2009 14:08'!accept 	"Inform the model of text to be accepted, and return true if OK."	| ok saveSelection saveScrollerOffset |"sps 8/13/2001 22:41: save selection and scroll info"	saveSelection := self selectionInterval copy.	saveScrollerOffset := scroller offset copy.	(self canDiscardEdits and: [(self hasProperty: #alwaysAccept) not])		ifTrue: [^ self flash].	self hasEditingConflicts ifTrue:		[(self confirm: 'Caution!! This method may have beenchanged elsewhere since you startedediting it here.  Accept anyway?' translated) ifFalse: [^ self flash]].	ok := self acceptTextInModel.	ok==true ifTrue:		[self setText: self getText.		self hasUnacceptedEdits: false.		(model dependents detect: [:dep | (dep isKindOf: PluggableTextMorph) and: [dep getTextSelector == #annotation]] ifNone: [nil]) ifNotNil:			[:aPane | model changed: #annotation]].	"sps 8/13/2001 22:41: restore selection and scroll info"	["During the step for the browser, updateCodePaneIfNeeded is called, and 		invariably resets the contents of the codeholding PluggableTextMorph		at that time, resetting the cursor position and scroller in the process.		The following line forces that update without waiting for the step, 		then restores the cursor and scrollbar"	ok ifTrue: "(don't bother if there was an error during compile)"		[(model respondsTo: #updateCodePaneIfNeeded) 			ifTrue: [model updateCodePaneIfNeeded].		WorldState addDeferredUIMessage:			[self currentHand newKeyboardFocus: textMorph.			scroller offset: saveScrollerOffset.			self setScrollDeltas.			self selectFrom: saveSelection first to: saveSelection last]]]			on: Error do: []! !!UserDialogBoxMorph methodsFor: 'initialization' stamp: 'ar 12/12/2009 01:13'!initialize	| titleRow titleFill |	super initialize.	self color: Color white.	self listDirection: #topToBottom; wrapCentering: #center;		hResizing: #shrinkWrap; vResizing: #shrinkWrap.	self layoutInset: 0@0; cellInset: 5@5.	self borderStyle: BorderStyle thinGray.	self useRoundedCorners;			addDropShadow;			shadowColor: (TranslucentColor r: 0.0 g: 0.0 b: 0.0 alpha: 0.666);			shadowOffset: 1 @ 1.	titleRow := AlignmentMorph newRow.	titleRow hResizing: #spaceFill; vResizing: #shrinkWrap.	titleRow layoutInset: 2@2.	titleRow color: Preferences menuTitleColor.	titleFill := GradientFillStyle ramp: {0.0 -> Color white. 1 ->Preferences menuTitleColor}.	titleFill radial: false; origin: titleRow topLeft; direction: 0 @ TextStyle defaultFont height.	titleRow fillStyle: titleFill.	titleMorph := StringMorph new.	titleMorph emphasis: 1.	titleRow addMorph: titleMorph.	labelMorph := TextMorph new.	labelMorph margins: 5@5.	labelMorph lock.	buttonRow := AlignmentMorph newRow vResizing: #shrinkWrap.	buttonRow hResizing: #shrinkWrap; layoutInset: 5@5; cellInset: 5@5.	buttonRow color: Color transparent.	self addMorphBack: titleRow.	self addMorphBack: labelMorph.	self addMorphBack: buttonRow.	self addDropShadow.! !!Morph methodsFor: 'menu' stamp: 'ul 12/12/2009 14:09'!addModelYellowButtonItemsTo: aCustomMenu event: evt 	"Give my models a chance to add their context-menu items to  	aCustomMenu."	self model		ifNotNil: [:mod |			mod				addModelYellowButtonMenuItemsTo: aCustomMenu				forMorph: self				hand: evt hand]! !!SystemWindow methodsFor: 'initialization' stamp: 'ul 12/12/2009 14:05'!replaceBoxes	"Rebuild the various boxes."	self setLabelWidgetAllowance.	closeBox ifNotNil: [ :m | m delete. self addCloseBox. ].	expandBox ifNotNil: [ :m | m delete. self addExpandBox. ].	menuBox ifNotNil: [ :m | m delete. self addMenuControl. ].	collapseBox ifNotNil: [ :m | m delete. labelArea addMorph: (collapseBox := self createCollapseBox) ].	self setFramesForLabelArea.	self setWindowColor: self paneColor ! !!Morph methodsFor: 'submorphs-add/remove' stamp: 'ul 12/12/2009 14:09'!delete	"Remove the receiver as a submorph of its owner and make its 	new owner be nil."	| aWorld |	self removeHalo.	aWorld := self world ifNil: [World].	"Terminate genie recognition focus"	"I encountered a case where the hand was nil, so I put in a little 	protection - raa "	" This happens when we are in an MVC project and open	  a morphic window. - BG "	aWorld ifNotNil:	  [self disableSubmorphFocusForHand: self activeHand.	  self activeHand releaseKeyboardFocus: self;		  releaseMouseFocus: self.].	owner ifNotNil:[ self privateDelete.		self player ifNotNil: [ :player |			"Player must be notified"			player noteDeletionOf: self fromWorld: aWorld]].! !!Morph methodsFor: 'scripting' stamp: 'ul 12/12/2009 14:09'!defaultFloatPrecisionFor: aGetSelector	"Answer a number indicating the default float precision to be used in a numeric readout for which the receiver provides the data.   Individual morphs can override this.  Showing fractional values for readouts of getCursor was in response to an explicit request from ack"	(self renderedMorph decimalPlacesForGetter: aGetSelector) ifNotNil: [:places | ^ (Utilities floatPrecisionForDecimalPlaces: places)].	(#(getCursor getNumericValue getNumberAtCursor getCursorWrapped getScaleFactor getUnitVector getAlpha) includes: aGetSelector)		ifTrue:			[^ 0.01].	^ 1! !!PasteUpMorph methodsFor: 'scripting' stamp: 'ul 12/12/2009 14:08'!tellAllContents: aMessageSelector	"Send the given message selector to all the objects within the receiver"	self submorphs do:		[:m |			m player ifNotNil:				[:p | p performScriptIfCan: aMessageSelector]]! !!TopLeftGripMorph methodsFor: 'private' stamp: 'hsj 12/10/2009 16:44'!borderOffset	|width|	width :=SystemWindow borderWidth +1.	 ^self handleOrigin + width asPoint! !!UserDialogBoxMorph methodsFor: 'events' stamp: 'ar 12/12/2009 01:13'!flash	"Flash me"	1 to: 2 do:[:i|		self color: Color black.		self world doOneCycleNow.		(Delay forMilliseconds: 50) wait.		self color: Color white.		self world doOneCycleNow.		(Delay forMilliseconds: 50) wait.	].! !!UserDialogBoxMorph class methodsFor: 'utilities' stamp: 'ar 12/12/2009 00:28'!inform: aString	"UserDialogBoxMorph inform: 'Squeak is great!!'"	^self inform: aString title: 'Note:'! !!SystemWindow methodsFor: 'top window' stamp: 'ul 12/12/2009 12:54'!activate	"Activate the owner too."	|mo mc|	mo := self modalOwner.	mc := self modalChild.	mc isNil		ifFalse: [mc owner notNil ifTrue: [				mc activate.				^mc modalChild isNil ifTrue: [mc flash]]].	(self paneMorphs size > 1 and: [self splitters isEmpty])		ifTrue: [self addPaneSplitters].	self activateWindow.	self rememberedKeyboardFocus		ifNil: [(self respondsTo: #navigateFocusForward)				ifTrue: [self navigateFocusForward]]		ifNotNil: [:m | m world						ifNil: [self rememberKeyboardFocus: nil] "deleted"						ifNotNil: [:w | 							m wantsKeyboardFocus								ifTrue: [m takeKeyboardFocus]								ifFalse: [(self respondsTo: #navigateFocusForward)											ifTrue: [self navigateFocusForward]]]].	(mo notNil and: [mo isKindOf: SystemWindow])		ifTrue: [mo bringBehind: self]! !!CornerGripMorph class methodsFor: 'handle settings' stamp: 'HenrikSperreJohansen 12/10/2009 21:07'!passiveColor: aColor	|canvas|	(canvas := self initializePassiveForm getCanvas).	canvas 		privatePort fillPattern: aColor;		combinationRule: Form rgbMul;		fillRect: (self passiveForm boundingBox) offset: 0@0.		self subclassesDo: [:each | each passiveColor: aColor]		! !!CornerGripMorph class methodsFor: 'handle settings' stamp: 'HenrikSperreJohansen 12/10/2009 21:04'!defaultFormFromFileNamed: aString	"If you dislike the alpha scale of the default handle, use this method to install a new one.	File should be in a readable image format, and contain a 48x48 32bit radial gradient with color white.	Use passiveColor: / activeColor: to change them after file is loaded, see initialize for an example"	|sourceStream|	sourceStream := WriteStream on: String new. 	sourceStream nextPutAll: 'defaultForm';		nextPut: Character cr;		nextPut: Character cr;		nextPut: $^;		nextPut: $(;		nextPutAll: 	(ImageReadWriter formFromFileNamed: aString) storeString;			nextPut: $).	self class compile: sourceStream contents.! !!HaloMorph methodsFor: 'private' stamp: 'ul 12/12/2009 14:11'!doScale: evt with: scaleHandle	"Update the scale of my target if it is scalable."	| newHandlePos colorToUse |	evt hand obtainHalo: self.	newHandlePos := evt cursorPoint - (scaleHandle extent // 2).	target scaleToMatch: newHandlePos.	colorToUse := target scale = 1.0						ifTrue: [Color yellow]						ifFalse: [Color orange].	self setColor: colorToUse toHandle: scaleHandle.	scaleHandle		submorphsDo: [:m | m color: colorToUse makeForegroundColor].	scaleHandle position: newHandlePos.	self layoutChanged.	(self valueOfProperty: #commandInProgress) ifNotNil:[:cmd |		"Update the final extent"		cmd redoTarget: target renderedMorph selector: #setFlexExtentFromHalo: argument: target extent	].! !!HaloMorph methodsFor: 'private' stamp: 'ul 12/12/2009 14:11'!doGrow: evt with: growHandle	"Called while the mouse is down in the grow handle"	| newExtent extentToUse scale |	evt hand obtainHalo: self.	newExtent := (target pointFromWorld: (target griddedPoint: evt cursorPoint - positionOffset))								- target topLeft.	evt shiftPressed ifTrue: [		scale := (newExtent x / (originalExtent x max: 1)) min:					(newExtent y / (originalExtent y max: 1)).		newExtent := (originalExtent x * scale) asInteger @ (originalExtent y * scale) asInteger	].	(newExtent x < 1 or: [newExtent y < 1 ]) ifTrue: [^ self].	target renderedMorph setExtentFromHalo: (extentToUse := newExtent).	growHandle position: evt cursorPoint - (growHandle extent // 2).	self layoutChanged.	(self valueOfProperty: #commandInProgress) ifNotNil:  		[:cmd | "Update the final extent"			cmd redoTarget: target renderedMorph selector: #setFlexExtentFromHalo: argument: extentToUse]! !!PasteUpMorph methodsFor: 'objects from disk' stamp: 'ul 12/12/2009 14:08'!fixUponLoad: aProject seg: anImageSegment	"We are in an old project that is being loaded from disk.Fix up conventions that have changed."	self isWorldMorph ifTrue: [			(self valueOfProperty: #soundAdditions) ifNotNil:				[:additions | SampledSoundassimilateSoundsFrom: additions]].	^ super fixUponLoad: aProject seg: anImageSegment! !!UserDialogBoxMorph class methodsFor: 'utilities' stamp: 'ar 12/12/2009 00:32'!confirm: aString title: titleString	"UserDialogBoxMorph confirm: 'Make your choice carefully' withCRs title: 'Do you like chocolate?'"	| dialog |	dialog := self new.	dialog title: titleString.	dialog label: aString.	dialog addButton: '       Yes       ' translated value: true.	dialog addButton: '        No        ' translated  value: false..	^dialog runModalIn: ActiveWorld forHand: ActiveHand! !!CornerGripMorph methodsFor: 'private' stamp: 'hsj 12/10/2009 16:03'!handleOrigin	"The handles origin is the offset into the alphaForm"^self subclassResponsibility! !!BorderedMorph methodsFor: 'menu' stamp: 'ul 12/12/2009 14:11'!changeBorderWidth: evt	| handle origin aHand newWidth oldWidth |	aHand := evt ifNil: [self primaryHand] ifNotNil: [evt hand].	origin := aHand position.	oldWidth := borderWidth.	(handle := HandleMorph new)		forEachPointDo:			[:newPoint | handle removeAllMorphs.			handle addMorph:				(LineMorph from: origin to: newPoint color: Color black width: 1).			newWidth := (newPoint - origin) r asInteger // 5.			self borderWidth: newWidth]		lastPointDo:			[:newPoint | handle deleteBalloon.			self halo ifNotNil: [:halo | halo addHandles].			self rememberCommand:				(Command new cmdWording: 'border change' translated;					undoTarget: self selector: #borderWidth: argument: oldWidth;					redoTarget: self selector: #borderWidth: argument: newWidth)].	aHand attachMorph: handle.	handle setProperty: #helpAtCenter toValue: true.	handle showBalloon:'Move cursor farther fromthis point to increase border width.Click when done.' translated hand: evt hand.	handle startStepping! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'ul 12/12/2009 14:08'!toggleAnnotationPaneSize	| handle origin aHand siblings newHeight lf prevBottom m ht |	self flag: #bob.		"CRUDE HACK to enable changing the size of the annotations pane"	owner ifNil: [^self].	siblings := owner submorphs.	siblings size > 3 ifTrue: [^self].	siblings size < 2 ifTrue: [^self].	aHand := self primaryHand.	origin := aHand position.	(handle := HandleMorph new)		forEachPointDo: [:newPoint |			handle removeAllMorphs.			newHeight := (newPoint - origin) y asInteger min: owner height - 50 max: 16.			lf := siblings last layoutFrame.			lf bottomOffset: newHeight.			prevBottom := newHeight.			siblings size - 1 to: 1 by: -1 do: [ :index |				m := siblings at: index.				lf := m layoutFrame.				ht := lf bottomOffset - lf topOffset.				lf topOffset: prevBottom.				lf bottomOffset = 0 ifFalse: [					lf bottomOffset: (prevBottom + ht).				].				prevBottom := prevBottom + ht.			].			owner layoutChanged.		]		lastPointDo:			[:newPoint | handle deleteBalloon.			self halo ifNotNil: [:halo | halo addHandles].		].	aHand attachMorph: handle.	handle setProperty: #helpAtCenter toValue: true.	handle showBalloon:'Move cursor farther fromthis point to increase pane.Click when done.' hand: aHand.	handle startStepping! !!SystemWindow methodsFor: 'polymorph' stamp: 'ul 12/12/2009 14:05'!bringBehind: aMorph	"Make the receiver be directly behind the given morph.	Take into account any modal owner and propagate."	|outerMorph|	outerMorph := self topRendererOrSelf.	outerMorph owner ifNil: [^ self "avoid spurious activate when drop in trash"].	outerMorph owner addMorph: outerMorph after: aMorph topRendererOrSelf.	self modalOwner ifNotNil: [:mo | mo bringBehind: self]! !!UserDialogBoxMorph methodsFor: 'events' stamp: 'ar 12/11/2009 23:56'!justDroppedInto: aMorph event: event	"aggressively preserve focus"	event hand newMouseFocus: self.! !!CornerGripMorph class methodsFor: 'class initialization' stamp: 'HenrikSperreJohansen 12/10/2009 21:05'!initializePassiveForm	^PassiveForm := self defaultForm! !!UserDialogBoxMorph methodsFor: 'constructing' stamp: 'ar 12/11/2009 23:02'!addButton: buttonLabel value: buttonValue	"Adds a button with the given label and value.	The value is returned if the user presses the button."	| button |	button := PluggableButtonMorphPlus new.	button label: buttonLabel.	button action:[self closeDialog: buttonValue].	button color: Preferences menuColor.	buttonRow addMorphBack: button.! !!PluggableTextMorph methodsFor: 'menu commands' stamp: 'ul 12/12/2009 14:08'!cancel	self setText: self getText.	self setSelection: self getSelection.	getTextSelector == #annotation ifFalse:		[(model dependents detect: [:dep | (dep isKindOf: PluggableTextMorph) and: [dep getTextSelector == #annotation]] ifNone: [nil]) ifNotNil:			[:aPane | model changed: #annotation]]! !!UserDialogBoxMorph class methodsFor: 'utilities' stamp: 'ar 12/12/2009 00:28'!confirm: aString	"UserDialogBoxMorph confirm: 'Do you like chocolate?'"	^self confirm: aString title: 'Confirm'! !!CornerGripMorph class methodsFor: 'accessing' stamp: 'HenrikSperreJohansen 12/10/2009 21:06'!passiveForm	^PassiveForm ifNil: [self initializePassiveForm]! !!CornerGripMorph class methodsFor: 'class initialization' stamp: 'HenrikSperreJohansen 12/10/2009 21:03'!defaultForm	^(Form		extent: 48@48		depth: 32		fromArray: 			#( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50331647 100663295 134217727 167772159 184549375 201326591 218103807 218103807 201326591 184549375 167772159 134217727 100663295 50331647 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50331647 117440511 167772159 218103807 301989887 352321535 385875967 436207615 469762047 469762047 469762047 469762047 452984831 402653183 369098751 318767103 251658239 167772159 117440511 50331647 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50331647 117440511 201326591 301989887 385875967 452984831 536870911 587202559 637534207 654311423 687865855 687865855 704643071 687865855 671088639 637534207 603979775 553648127 486539263 402653183 335544319 218103807 117440511 50331647 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33554431 100663295 201326591 301989887 402653183 520093695 637534207 687865855 754974719 838860799 889192447 922746879 956301311 973078527 973078527 956301311 939524095 905969663 855638015 788529151 704643071 654311423 570425343 436207615 352321535 218103807 100663295 33554431 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 67108863 167772159 268435455 385875967 520093695 654311423 721420287 838860799 922746879 989855743 1056964607 1107296255 1140850687 1174405119 1191182335 1191182335 1191182335 1157627903 1124073471 1073741823 1006632959 939524095 872415231 771751935 671088639 570425343 436207615 318767103 167772159 67108863 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 83886079 201326591 335544319 469762047 620756991 738197503 855638015 956301311 1040187391 1124073471 1224736767 1258291199 1325400063 1358954495 1375731711 1375731711 1375731711 1375731711 1358954495 1342177279 1291845631 1224736767 1157627903 1073741823 989855743 889192447 788529151 654311423 520093695 385875967 234881023 83886079 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 83886079 218103807 369098751 520093695 654311423 805306367 939524095 1056964607 1157627903 1241513983 1325400063 1409286143 1476395007 1509949439 1543503871 1577058303 1610612735 1610612735 1593835519 1560281087 1509949439 1493172223 1426063359 1342177279 1275068415 1191182335 1090519039 973078527 855638015 704643071 570425343 419430399 251658239 83886079 0 0 0 0 0 0 0 0 0 0 0 0 0 83886079 218103807 385875967 536870911 687865855 855638015 1006632959 1124073471 1224736767 1342177279 1442840575 1526726655 1593835519 1660944383 1711276031 1761607679 1778384895 1778384895 1778384895 1778384895 1778384895 1728053247 1677721599 1627389951 1543503871 1476395007 1375731711 1275068415 1157627903 1040187391 905969663 754974719 587202559 419430399 268435455 83886079 0 0 0 0 0 0 0 0 0 0 0 83886079 218103807 369098751 536870911 704643071 889192447 1040187391 1191182335 1308622847 1409286143 1543503871 1627389951 1694498815 1778384895 1845493759 1895825407 1946157055 1962934271 1979711487 1979711487 1979711487 1962934271 1912602623 1862270975 1795162111 1728053247 1660944383 1577058303 1459617791 1342177279 1224736767 1107296255 939524095 771751935 587202559 419430399 251658239 83886079 0 0 0 0 0 0 0 0 0 67108863 184549375 352321535 536870911 704643071 889192447 1056964607 1207959551 1342177279 1476395007 1610612735 1694498815 1811939327 1879048191 1962934271 2030043135 2080374783 2113929215 2147483647 2147483647 2147483647 2147483647 2130706431 2097151999 2046820351 1979711487 1912602623 1828716543 1744830463 1644167167 1526726655 1375731711 1258291199 1124073471 939524095 771751935 587202559 419430399 218103807 67108863 0 0 0 0 0 0 0 33554431 134217727 285212671 486539263 671088639 872415231 1056964607 1207959551 1358954495 1509949439 1644167167 1761607679 1862270975 1962934271 2046820351 2130706431 2181038079 2231369727 2264924159 2298478591 2315255807 2315255807 2315255807 2281701375 2248146943 2197815295 2147483647 2080374783 1996488703 1895825407 1795162111 1677721599 1560281087 1409286143 1258291199 1124073471 922746879 738197503 553648127 369098751 134217727 33554431 0 0 0 0 0 0 83886079 234881023 419430399 637534207 822083583 1023410175 1207959551 1358954495 1509949439 1660944383 1795162111 1895825407 2013265919 2097151999 2197815295 2281701375 2348810239 2382364671 2432696319 2466250751 2466250751 2466250751 2466250751 2432696319 2399141887 2365587455 2298478591 2231369727 2130706431 2030043135 1946157055 1828716543 1711276031 1560281087 1409286143 1258291199 1090519039 889192447 704643071 503316479 285212671 83886079 0 0 0 0 0 50331647 167772159 335544319 553648127 754974719 973078527 1140850687 1308622847 1476395007 1660944383 1795162111 1929379839 2030043135 2147483647 2264924159 2348810239 2415919103 2499805183 2533359615 2583691263 2600468479 2634022911 2634022911 2617245695 2583691263 2550136831 2516582399 2449473535 2365587455 2298478591 2181038079 2080374783 1962934271 1845493759 1711276031 1543503871 1358954495 1207959551 1023410175 838860799 620756991 419430399 184549375 50331647 0 0 0 0 83886079 234881023 452984831 687865855 889192447 1090519039 1258291199 1442840575 1627389951 1761607679 1912602623 2046820351 2181038079 2281701375 2382364671 2466250751 2550136831 2617245695 2684354559 2717908991 2751463423 2768240639 2785017855 2751463423 2734686207 2701131775 2650800127 2583691263 2499805183 2415919103 2332033023 2214592511 2097151999 1962934271 1811939327 1677721599 1509949439 1325400063 1140850687 956301311 754974719 536870911 301989887 83886079 0 0 0 50331647 167772159 335544319 553648127 771751935 989855743 1191182335 1375731711 1560281087 1728053247 1879048191 2030043135 2164260863 2281701375 2399141887 2499805183 2600468479 2684354559 2751463423 2801795071 2852126719 2885681151 2902458367 2902458367 2885681151 2868903935 2818572287 2768240639 2701131775 2617245695 2533359615 2432696319 2332033023 2197815295 2063597567 1929379839 1778384895 1610612735 1442840575 1258291199 1056964607 855638015 620756991 419430399 184549375 50331647 0 0 83886079 234881023 436207615 671088639 872415231 1090519039 1291845631 1476395007 1660944383 1828716543 1979711487 2113929215 2264924159 2399141887 2516582399 2617245695 2717908991 2801795071 2868903935 2919235583 2986344447 3003121663 3003121663 3019898879 3003121663 2986344447 2952790015 2885681151 2818572287 2751463423 2650800127 2550136831 2432696319 2315255807 2181038079 2030043135 1862270975 1728053247 1543503871 1358954495 1157627903 939524095 738197503 536870911 285212671 83886079 0 0 100663295 268435455 503316479 738197503 973078527 1174405119 1375731711 1560281087 1744830463 1929379839 2080374783 2214592511 2365587455 2483027967 2617245695 2717908991 2818572287 2902458367 2969567231 3036676095 3087007743 3103784959 3137339391 3137339391 3120562175 3103784959 3053453311 2986344447 2919235583 2835349503 2751463423 2650800127 2533359615 2399141887 2264924159 2130706431 1979711487 1811939327 1610612735 1442840575 1241513983 1040187391 822083583 587202559 352321535 100663295 0 50331647 167772159 369098751 603979775 822083583 1040187391 1258291199 1442840575 1627389951 1811939327 1996488703 2164260863 2298478591 2449473535 2583691263 2701131775 2818572287 2902458367 3003121663 3087007743 3137339391 3187671039 3221225471 3254779903 3254779903 3238002687 3204448255 3154116607 3103784959 3019898879 2936012799 2835349503 2751463423 2617245695 2483027967 2348810239 2214592511 2046820351 1879048191 1694498815 1509949439 1308622847 1124073471 889192447 671088639 436207615 201326591 50331647 67108863 201326591 402653183 654311423 889192447 1107296255 1308622847 1526726655 1711276031 1879048191 2063597567 2214592511 2365587455 2516582399 2650800127 2768240639 2885681151 2986344447 3087007743 3154116607 3238002687 3271557119 3321888767 3338665983 3338665983 3321888767 3305111551 3238002687 3187671039 3120562175 3019898879 2902458367 2801795071 2684354559 2566914047 2432696319 2264924159 2113929215 1946157055 1761607679 1593835519 1392508927 1174405119 956301311 721420287 486539263 251658239 67108863 83886079 234881023 452984831 704643071 956301311 1157627903 1375731711 1560281087 1761607679 1946157055 2113929215 2281701375 2432696319 2583691263 2701131775 2818572287 2936012799 3053453311 3154116607 3238002687 3305111551 3355443199 3405774847 3439329279 3456106495 3422552063 3388997631 3321888767 3271557119 3187671039 3087007743 2969567231 2868903935 2751463423 2617245695 2483027967 2332033023 2181038079 2013265919 1811939327 1627389951 1442840575 1241513983 1023410175 788529151 536870911 301989887 83886079 100663295 268435455 503316479 738197503 989855743 1207959551 1409286143 1610612735 1811939327 1979711487 2164260863 2315255807 2466250751 2617245695 2751463423 2885681151 3003121663 3103784959 3204448255 3288334335 3372220415 3439329279 3506438143 3523215359 3523215359 3506438143 3472883711 3388997631 3321888767 3238002687 3137339391 3036676095 2936012799 2801795071 2667577343 2516582399 2365587455 2214592511 2046820351 1862270975 1694498815 1459617791 1275068415 1056964607 838860799 570425343 352321535 100663295 100663295 285212671 553648127 771751935 1023410175 1241513983 1442840575 1627389951 1845493759 2030043135 2197815295 2332033023 2516582399 2650800127 2785017855 2919235583 3019898879 3137339391 3254779903 3338665983 3422552063 3506438143 3556769791 3607101439 3607101439 3590324223 3523215359 3456106495 3372220415 3271557119 3187671039 3070230527 2952790015 2835349503 2684354559 2550136831 2399141887 2231369727 2080374783 1895825407 1711276031 1509949439 1308622847 1090519039 872415231 620756991 385875967 100663295 117440511 301989887 553648127 788529151 1040187391 1258291199 1459617791 1677721599 1845493759 2030043135 2197815295 2365587455 2516582399 2667577343 2801795071 2936012799 3053453311 3170893823 3288334335 3372220415 3456106495 3539992575 3623878655 3674210303 3674210303 3640655871 3573547007 3489660927 3405774847 3305111551 3204448255 3103784959 2969567231 2868903935 2717908991 2566914047 2432696319 2264924159 2080374783 1929379839 1728053247 1543503871 1308622847 1124073471 889192447 620756991 402653183 117440511 117440511 301989887 553648127 805306367 1040187391 1258291199 1459617791 1677721599 1845493759 2046820351 2197815295 2365587455 2533359615 2684354559 2818572287 2936012799 3070230527 3170893823 3288334335 3372220415 3489660927 3556769791 3640655871 3724541951 3741319167 3674210303 3590324223 3506438143 3422552063 3305111551 3221225471 3103784959 2986344447 2868903935 2734686207 2583691263 2432696319 2264924159 2080374783 1929379839 1728053247 1543503871 1308622847 1124073471 889192447 637534207 402653183 117440511 117440511 301989887 553648127 788529151 1040187391 1258291199 1459617791 1677721599 1845493759 2030043135 2197815295 2365587455 2516582399 2667577343 2801795071 2936012799 3053453311 3170893823 3288334335 3372220415 3456106495 3539992575 3623878655 3674210303 3674210303 3640655871 3573547007 3489660927 3405774847 3305111551 3204448255 3103784959 2969567231 2868903935 2717908991 2566914047 2432696319 2264924159 2080374783 1929379839 1728053247 1543503871 1308622847 1124073471 889192447 620756991 402653183 117440511 100663295 285212671 553648127 771751935 1023410175 1241513983 1442840575 1627389951 1845493759 2030043135 2197815295 2332033023 2516582399 2650800127 2785017855 2919235583 3019898879 3137339391 3254779903 3338665983 3422552063 3506438143 3556769791 3607101439 3607101439 3590324223 3523215359 3456106495 3372220415 3271557119 3187671039 3070230527 2952790015 2835349503 2684354559 2550136831 2399141887 2231369727 2080374783 1895825407 1711276031 1509949439 1308622847 1090519039 872415231 620756991 385875967 100663295 100663295 268435455 503316479 738197503 989855743 1207959551 1409286143 1610612735 1811939327 1979711487 2164260863 2315255807 2466250751 2617245695 2751463423 2885681151 3003121663 3103784959 3204448255 3288334335 3372220415 3439329279 3506438143 3523215359 3523215359 3506438143 3472883711 3388997631 3321888767 3238002687 3137339391 3036676095 2936012799 2801795071 2667577343 2516582399 2365587455 2214592511 2046820351 1862270975 1694498815 1459617791 1275068415 1056964607 838860799 570425343 352321535 100663295 83886079 234881023 452984831 704643071 956301311 1157627903 1375731711 1560281087 1761607679 1946157055 2113929215 2281701375 2432696319 2583691263 2701131775 2818572287 2936012799 3053453311 3154116607 3238002687 3305111551 3355443199 3405774847 3439329279 3456106495 3422552063 3388997631 3321888767 3271557119 3187671039 3087007743 2969567231 2868903935 2751463423 2617245695 2483027967 2332033023 2181038079 2013265919 1811939327 1627389951 1442840575 1241513983 1023410175 788529151 536870911 301989887 83886079 67108863 201326591 402653183 654311423 889192447 1107296255 1308622847 1526726655 1711276031 1879048191 2063597567 2214592511 2365587455 2516582399 2650800127 2768240639 2885681151 2986344447 3087007743 3154116607 3238002687 3271557119 3321888767 3338665983 3338665983 3321888767 3305111551 3238002687 3187671039 3120562175 3019898879 2902458367 2801795071 2684354559 2566914047 2432696319 2264924159 2113929215 1946157055 1761607679 1593835519 1392508927 1174405119 956301311 721420287 486539263 251658239 67108863 50331647 167772159 369098751 603979775 822083583 1040187391 1258291199 1442840575 1627389951 1811939327 1996488703 2164260863 2298478591 2449473535 2583691263 2701131775 2818572287 2902458367 3003121663 3087007743 3137339391 3187671039 3221225471 3254779903 3254779903 3238002687 3204448255 3154116607 3103784959 3019898879 2936012799 2835349503 2751463423 2617245695 2483027967 2348810239 2214592511 2046820351 1879048191 1694498815 1509949439 1308622847 1124073471 889192447 671088639 436207615 201326591 50331647 0 100663295 268435455 503316479 738197503 973078527 1174405119 1375731711 1560281087 1744830463 1929379839 2080374783 2214592511 2365587455 2483027967 2617245695 2717908991 2818572287 2902458367 2969567231 3036676095 3087007743 3103784959 3137339391 3137339391 3120562175 3103784959 3053453311 2986344447 2919235583 2835349503 2751463423 2650800127 2533359615 2399141887 2264924159 2130706431 1979711487 1811939327 1610612735 1442840575 1241513983 1040187391 822083583 587202559 352321535 100663295 0 0 83886079 234881023 436207615 671088639 872415231 1090519039 1291845631 1476395007 1660944383 1828716543 1979711487 2113929215 2264924159 2399141887 2516582399 2617245695 2717908991 2801795071 2868903935 2919235583 2986344447 3003121663 3003121663 3019898879 3003121663 2986344447 2952790015 2885681151 2818572287 2751463423 2650800127 2550136831 2432696319 2315255807 2181038079 2030043135 1862270975 1728053247 1543503871 1358954495 1157627903 939524095 738197503 536870911 285212671 83886079 0 0 50331647 167772159 335544319 553648127 771751935 989855743 1191182335 1375731711 1560281087 1728053247 1879048191 2030043135 2164260863 2281701375 2399141887 2499805183 2600468479 2684354559 2751463423 2801795071 2852126719 2885681151 2902458367 2902458367 2885681151 2868903935 2818572287 2768240639 2701131775 2617245695 2533359615 2432696319 2332033023 2197815295 2063597567 1929379839 1778384895 1610612735 1442840575 1258291199 1056964607 855638015 620756991 419430399 184549375 50331647 0 0 0 83886079 234881023 452984831 687865855 889192447 1090519039 1258291199 1442840575 1627389951 1761607679 1912602623 2046820351 2181038079 2281701375 2382364671 2466250751 2550136831 2617245695 2684354559 2717908991 2751463423 2768240639 2785017855 2751463423 2734686207 2701131775 2650800127 2583691263 2499805183 2415919103 2332033023 2214592511 2097151999 1962934271 1811939327 1677721599 1509949439 1325400063 1140850687 956301311 754974719 536870911 301989887 83886079 0 0 0 0 50331647 167772159 335544319 553648127 754974719 973078527 1140850687 1308622847 1476395007 1660944383 1795162111 1929379839 2030043135 2147483647 2264924159 2348810239 2415919103 2499805183 2533359615 2583691263 2600468479 2634022911 2634022911 2617245695 2583691263 2550136831 2516582399 2449473535 2365587455 2298478591 2181038079 2080374783 1962934271 1845493759 1711276031 1543503871 1358954495 1207959551 1023410175 838860799 620756991 419430399 184549375 50331647 0 0 0 0 0 83886079 234881023 419430399 637534207 822083583 1023410175 1207959551 1358954495 1509949439 1660944383 1795162111 1895825407 2013265919 2097151999 2197815295 2281701375 2348810239 2382364671 2432696319 2466250751 2466250751 2466250751 2466250751 2432696319 2399141887 2365587455 2298478591 2231369727 2130706431 2030043135 1946157055 1828716543 1711276031 1560281087 1409286143 1258291199 1090519039 889192447 704643071 503316479 285212671 83886079 0 0 0 0 0 0 33554431 134217727 285212671 486539263 671088639 872415231 1056964607 1207959551 1358954495 1509949439 1644167167 1761607679 1862270975 1962934271 2046820351 2130706431 2181038079 2231369727 2264924159 2298478591 2315255807 2315255807 2315255807 2281701375 2248146943 2197815295 2147483647 2080374783 1996488703 1895825407 1795162111 1677721599 1560281087 1409286143 1258291199 1124073471 922746879 738197503 553648127 369098751 134217727 33554431 0 0 0 0 0 0 0 67108863 184549375 352321535 536870911 704643071 889192447 1056964607 1207959551 1342177279 1476395007 1610612735 1694498815 1811939327 1879048191 1962934271 2030043135 2080374783 2113929215 2147483647 2147483647 2147483647 2147483647 2130706431 2097151999 2046820351 1979711487 1912602623 1828716543 1744830463 1644167167 1526726655 1375731711 1258291199 1124073471 939524095 771751935 587202559 419430399 218103807 67108863 0 0 0 0 0 0 0 0 0 83886079 218103807 369098751 536870911 704643071 889192447 1040187391 1191182335 1308622847 1409286143 1543503871 1627389951 1694498815 1778384895 1845493759 1895825407 1946157055 1962934271 1979711487 1979711487 1979711487 1962934271 1912602623 1862270975 1795162111 1728053247 1660944383 1577058303 1459617791 1342177279 1224736767 1107296255 939524095 771751935 587202559 419430399 251658239 83886079 0 0 0 0 0 0 0 0 0 0 0 83886079 218103807 385875967 536870911 687865855 855638015 1006632959 1124073471 1224736767 1342177279 1442840575 1526726655 1593835519 1660944383 1711276031 1761607679 1778384895 1778384895 1778384895 1778384895 1778384895 1728053247 1677721599 1627389951 1543503871 1476395007 1375731711 1275068415 1157627903 1040187391 905969663 754974719 587202559 419430399 268435455 83886079 0 0 0 0 0 0 0 0 0 0 0 0 0 83886079 218103807 369098751 520093695 654311423 805306367 939524095 1056964607 1157627903 1241513983 1325400063 1409286143 1476395007 1509949439 1543503871 1577058303 1610612735 1610612735 1593835519 1560281087 1509949439 1493172223 1426063359 1342177279 1275068415 1191182335 1090519039 973078527 855638015 704643071 570425343 419430399 251658239 83886079 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 83886079 201326591 335544319 469762047 620756991 738197503 855638015 956301311 1040187391 1124073471 1224736767 1258291199 1325400063 1358954495 1375731711 1375731711 1375731711 1375731711 1358954495 1342177279 1291845631 1224736767 1157627903 1073741823 989855743 889192447 788529151 654311423 520093695 385875967 234881023 83886079 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 67108863 167772159 268435455 385875967 520093695 654311423 721420287 838860799 922746879 989855743 1056964607 1107296255 1140850687 1174405119 1191182335 1191182335 1191182335 1157627903 1124073471 1073741823 1006632959 939524095 872415231 771751935 671088639 570425343 436207615 318767103 167772159 67108863 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33554431 100663295 201326591 301989887 402653183 520093695 637534207 687865855 754974719 838860799 889192447 922746879 956301311 973078527 973078527 956301311 939524095 905969663 855638015 788529151 704643071 654311423 570425343 436207615 352321535 218103807 100663295 33554431 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50331647 117440511 201326591 301989887 385875967 452984831 536870911 587202559 637534207 654311423 687865855 687865855 704643071 687865855 671088639 637534207 603979775 553648127 486539263 402653183 335544319 218103807 117440511 50331647 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50331647 117440511 167772159 218103807 301989887 352321535 385875967 436207615 469762047 469762047 469762047 469762047 452984831 402653183 369098751 318767103 251658239 167772159 117440511 50331647 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 50331647 100663295 134217727 167772159 184549375 201326591 218103807 218103807 201326591 184549375 167772159 134217727 100663295 50331647 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: 0@0)! !!FillInTheBlankMorph methodsFor: 'invoking' stamp: 'ul 12/12/2009 14:11'!getUserResponse	"Wait for the user to accept or cancel, and answer the result string. Answers the empty string if the user cancels."	"Details: This is invoked synchronously from the caller. In order to keep processing inputs and updating the screen while waiting for the user to respond, this method has its own version of the World's event loop."	| w |	w := self world.	w ifNil: [^ response].		(ProvideAnswerNotification signal:		(self submorphOfClass: TextMorph) userString) ifNotNil:		[:answer |		self delete.		w doOneCycle.		^ response := (answer == #default) ifTrue: [response] ifFalse: [answer]].	done := false.	w activeHand newKeyboardFocus: textPane.	[done] whileFalse: [w doOneCycle].	self delete.	w doOneCycle.	^ response! !!CornerGripMorph methodsFor: 'private' stamp: 'HenrikSperreJohansen 12/10/2009 20:42'!borderOffset	"The offset from my corner to where the border starts"	^self subclassResponsibility! !!CornerGripMorph class methodsFor: 'class initialization' stamp: 'HenrikSperreJohansen 12/10/2009 21:05'!initialize	"CornerGripMorph initialize"		super initialize.	self initializeActiveForm.	self initializePassiveForm.	self activeColor: Color orange.! !!MenuMorph class methodsFor: 'utilities' stamp: 'ul 12/12/2009 14:09'!confirm: queryString trueChoice: trueChoice falseChoice: falseChoice 	"Put up a yes/no menu with caption queryString. The actual wording for the two choices will be as provided in the trueChoice and falseChoice parameters. Answer true if the response is the true-choice,  false if it's the false-choice. This is a modal question -- the user must respond one way or the other."	"MenuMorph 		confirm: 'Are you hungry?'  		trueChoice: 'yes, I''m famished'  		falseChoice: 'no, I just ate'"	| menu aBlock result |	(ProvideAnswerNotification signal: queryString) 		ifNotNil:[:answer | ^ trueChoice = answer].	aBlock := [:v| result := v].	menu := self new.	menu addTitle: queryString icon: MenuIcons confirmIcon.	menu add: trueChoice target: aBlock selector: #value: argument: true.	menu add: falseChoice target: aBlock selector: #value: argument: false.	MenuIcons decorateMenu: menu.	[menu invokeAt: ActiveHand position in: ActiveWorld allowKeyboard: true.	result == nil] whileTrue.	^result! !!PasteUpMorph methodsFor: 'menu & halo' stamp: 'ul 12/12/2009 14:08'!sendTextContentsBackToDonor	"Send my string contents back to the Text Morph from whence I came"	(self valueOfProperty: #donorTextMorph) ifNotNil:		[:aDonor | aDonor setCharacters: self assuredPlayer getStringContents]! !!CornerGripMorph methodsFor: 'drawing' stamp: 'HenrikSperreJohansen 12/10/2009 21:36'!alphaHandle	handleColor ifNil: [handleColor := self passiveForm].	"The following line is only needed on first load, so existing windows don't blow up from the new handles. 	Can safely be deleted along with this comment in a later update"	(handleColor class == Form) 		ifFalse: [handleColor := self passiveForm].	^handleColor		! !!UserDialogBoxMorph class methodsFor: 'utilities' stamp: 'ar 12/12/2009 00:28'!inform: aString title: titleString	"UserDialogBoxMorph inform: 'Squeak is great!!' title: 'Will you look at this:'"	| dialog |	dialog := self new.	dialog title: titleString.	dialog label: aString.	dialog addButton: '       OK       ' translated value: nil.	^dialog runModalIn: ActiveWorld forHand: ActiveHand! !!CornerGripMorph methodsFor: 'private' stamp: 'HenrikSperreJohansen 12/10/2009 21:11'!passiveForm	^self clipForm: self class passiveForm! !!CornerGripMorph methodsFor: 'private' stamp: 'HenrikSperreJohansen 12/10/2009 20:40'!transparentRectangle	"This could be a class var, provided either bounds of grips does not change, or one ensures a new one is installed when such an event occurs"	^Form extent: self bounds extent depth: 32! !!BottomLeftGripMorph methodsFor: 'private' stamp: 'hsj 12/10/2009 16:04'!handleOrigin^25@0! !!HaloMorph methodsFor: 'private' stamp: 'ul 12/12/2009 14:10'!endInteraction	"Clean up after a user interaction with the a halo control"	| m |	self isMagicHalo: false.	"no longer"	self magicAlpha: 1.0.	(target isInWorld not or: [owner isNil]) ifTrue: [^self].	[target isFlexMorph and: [target hasNoScaleOrRotation]] whileTrue: 			[m := target firstSubmorph.			target removeFlexShell.			target := m].	self isInWorld 		ifTrue: 			["make sure handles show in front, even if flex shell added"			self comeToFront.			self addHandles].	(self valueOfProperty: #commandInProgress) ifNotNil: 			[:cmd | 			self rememberCommand: cmd.			self removeProperty: #commandInProgress]! !!CornerGripMorph methodsFor: 'private' stamp: 'HenrikSperreJohansen 12/10/2009 21:11'!setInverseColors	handleColor := self activeForm.! !!PasteUpMorph methodsFor: 'world menu' stamp: 'ul 12/12/2009 14:08'!galleryOfPlayers	"Put up a tool showing all the players in the project"		(ActiveWorld findA: AllPlayersTool) ifNotNil: [:aTool | ^ aTool comeToFront].	AllPlayersTool newStandAlone openInHand"ActiveWorld galleryOfPlayers"! !!MenuMorph methodsFor: 'menu' stamp: 'ul 12/12/2009 14:09'!doButtonAction	"Do the receiver's inherent button action.  Makes sense for the kind of MenuMorph that is a wrapper for a single menu-item -- pass it on the the item"	(self findA: MenuItemMorph) ifNotNil: [:aMenuItem | aMenuItem doButtonAction]! !!CornerGripMorph class methodsFor: 'class initialization' stamp: 'HenrikSperreJohansen 12/10/2009 21:05'!initializeActiveForm	^ActiveForm := self defaultForm! !!Morph methodsFor: 'submorphs-accessing' stamp: 'ul 12/12/2009 14:09'!allSubmorphNamesDo: nameBlock	"Return a list of all known names of submorphs and nested submorphs of the receiver, based on the scope of the receiver.  Items in parts bins are excluded"	self isPartsBin ifTrue: [^ self]. "Don't report names from parts bins"	self submorphsDo: 		[:m | m knownName ifNotNil: [:n | nameBlock value: n].		m allSubmorphNamesDo: nameBlock].! !!UserDialogBoxMorph methodsFor: 'constructing' stamp: 'ar 12/12/2009 00:21'!title	^titleMorph contents! !!UserDialogBoxMorph methodsFor: 'constructing' stamp: 'ar 12/12/2009 00:21'!title: aString	titleMorph contents: aString! !!ScriptEditorMorph methodsFor: 'testing' stamp: 'ul 12/12/2009 14:07'!typeForParameter	"Answer a symbol representing the type of my parameter"	scriptName numArgs > 0 ifTrue:		[(playerScripted class scripts at: scriptName ifAbsent: [nil]) ifNotNil:			[:aScript | ^ aScript argumentVariables first variableType]].	^ #Error! !!UserDialogBoxMorph methodsFor: 'constructing' stamp: 'ar 12/11/2009 22:38'!label	"The dialog's label (String)"	^labelMorph contents! !TopLeftGripMorph removeSelector: #drawOn:!BottomLeftGripMorph removeSelector: #drawOn:!TopRightGripMorph removeSelector: #drawOn:!BottomRightGripMorph removeSelector: #drawOn:!CornerGripMorph initialize!