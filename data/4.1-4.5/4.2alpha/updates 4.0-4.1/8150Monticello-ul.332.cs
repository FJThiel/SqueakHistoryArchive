"Change Set:		8150Monticello-ul.332Monticello-ul.332:- speed up MCFileRepositoryInspector by improving #packageList and caching the result. (~25x speedup with a respository of ~500 package versions of ~160 packages)"!MCVersionInspector subclass: #MCFileRepositoryInspector	instanceVariableNames: 'repository versions loaded newer inherited selectedPackage selectedVersion order versionInfo packageList'	classVariableNames: 'Order'	poolDictionaries: ''	category: 'Monticello-UI'!!MCFileRepositoryInspector methodsFor: 'morphic ui' stamp: 'ul 11/11/2009 21:15'!packageList	| result loadedPackages |	packageList ifNotNil: [ ^packageList ].	result := Set new: versions size.	versions do: [ :each | result add: each first ].	"sort loaded packages first, then alphabetically"	loadedPackages := Set new: loaded size.	loaded do: [ :each |		loadedPackages add: (each copyUpToLast: $-) ].	result := result asArray sort: [ :a :b |		| loadedA loadedB |		loadedA := loadedPackages includes: a.		loadedB := loadedPackages includes: b.		loadedA = loadedB 			ifTrue: [ a < b ]			ifFalse: [ loadedA ] ].	^packageList := result collect: [ :each | self packageHighlight: each ]! !!MCFileRepositoryInspector methodsFor: 'as yet unclassified' stamp: 'ul 11/11/2009 21:02'!refresh	| packageNames name latest av |	packageNames := Set new.	packageList := nil.	versions := repository readableFileNames collect: [ :each |		name := (each copyUpToLast: $.) copyUpTo: $(.		name last isDigit ifFalse: [Array with: name with: '' with: '' with: each]			ifTrue:				[Array					with: (packageNames add: (name copyUpToLast:  $-))		"pkg name"					with: ((name copyAfterLast: $-) copyUpTo: $.)				"user"					with: ((name copyAfterLast: $-) copyAfter: $.) asInteger	"version"					with: each]].	versions := versions select: [:each | (each at: 3) isNumber].	newer := Set new.	inherited := Set new.	loaded := Set new.	(MCWorkingCopy allManagers "		select: [ :each | packageNames includes: each packageName]")		do: [:each |			each ancestors do: [ :ancestor |				loaded add: ancestor name.				ancestor ancestorsDoWhileTrue: [:heir |					(inherited includes: heir name)						ifTrue: [false]						ifFalse: [inherited add: heir name. true]]].			latest := (versions select: [:v | v first = each package name])					detectMax: [:v | v third].			(latest notNil and: [				each ancestors allSatisfy: [:ancestor |					av := ((ancestor name copyAfterLast: $-) copyAfter: $.) asInteger.					av < latest third or: [						av = latest third and: [((ancestor name copyAfterLast: $-) copyUpTo: $.) ~= latest second]]]])				ifTrue: [newer add: each package name ]].	self changed: #packageList; changed: #versionList! !