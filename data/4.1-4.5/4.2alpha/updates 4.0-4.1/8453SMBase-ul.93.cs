"Change Set:		8453SMBase-ul.93SMBase-ul.93:- replace sends of #ifNotNilDo: to #ifNotNil:, #ifNil:ifNotNilDo: to #ifNil:ifNotNil:, #ifNotNilDo:ifNil: to #ifNotNil:ifNil:"!!SMInstallationRegistry methodsFor: 'installation' stamp: 'ul 12/12/2009 14:07'!noteInstalledPackageWithId: aPackageId autoVersion: aVersion name: aName	"The package release was just successfully installed.	Can be used to inform SM of an installation not been	done using SM, even when the map isn't loaded.	We record the fact in our Dictionary of installed packages	and log a 'do it' to mark this in the changelog.	The doit helps keeping track of the packages when	recovering changes etc - not a perfect solution but should help.	The map used is the default map.	The id of the package is the key and the value is an OrderedCollection	of Arrays with the release auto version, the point in time and the current installCounter."	| time name id v |	v := aVersion isString ifTrue: [aVersion asVersion] ifFalse: [aVersion].	aName ifNil: [name := '<unknown package name>'] ifNotNil: [name := aName].	id := UUID fromString: aPackageId.	time := Time totalSeconds.	self countInstall.	self markInstalled: id version: v time: time counter: installCounter.	(((Smalltalk classNamed: 'SmalltalkImage') ifNotNil: [:si | si current]) ifNil: [Smalltalk])		logChange: '"Installed ', name, ' auto version ', v versionString, '".(Smalltalk at: #SMSqueakMap ifAbsent: []) ifNotNil:[	SMSqueakMap noteInstalledPackageWithId: ', id asString storeString, ' autoVersion: ', v storeString, ' atSeconds: ', time asString, ' number: ', installCounter asString, ']'! !!SMInstaller class methodsFor: 'instance creation' stamp: 'ul 12/12/2009 14:07'!classForPackageRelease: aPackageRelease	"Decide which subclass to instantiate. 	We detect and return the first subclass	that wants to handle the release going	recursively leaf first so that subclasses gets	first chance if several classes compete over	the same packages, like for example SMDVSInstaller	that also uses the .st file extension."	self subclasses do: [:ea |		(ea classForPackageRelease: aPackageRelease)			ifNotNil: [:class | ^ class]].	^(self canInstall: aPackageRelease)		ifTrue: [self]! !!SMInstallationRegistry methodsFor: 'installation' stamp: 'ul 12/12/2009 14:07'!noteUninstalledPackageWithId: aPackageId autoVersion: aVersion name: aName	"The package release was just successfully uninstalled.	Can be used to inform SM of an uninstallation not been	done using SM, even when the map isn't loaded.	We record the fact in our Dictionary of installed packages	and log a 'do it' to mark this in the changelog.	The doit helps keeping track of the packages when	recovering changes etc - not a perfect solution but should help.	The map used is the default map.	The id of the package is the key and the value is an OrderedCollection	of Arrays with the release auto version, the point in time and the current installCounter."	| time name id v |	v := aVersion isString ifTrue: [aVersion asVersion] ifFalse: [aVersion].	aName ifNil: [name := '<unknown package name>'] ifNotNil: [name := aName].	id := UUID fromString: aPackageId.	time := Time totalSeconds.	self countInstall. "Used for both installs and uninstalls"	self clearInstalled: id version: v time: time counter: installCounter.	(((Smalltalk classNamed: 'SmalltalkImage') ifNotNil: [:si | si current]) ifNil: [Smalltalk])		logChange: '"Uninstalled ', name, ' auto version ', v versionString, '".(Smalltalk at: #SMSqueakMap ifAbsent: []) ifNotNil:[	SMSqueakMap noteUninstalledPackageWithId: ', id asString storeString, ' autoVersion: ', v storeString, ' atSeconds: ', time asString, ' number: ', installCounter asString, ']'! !!SMPackage methodsFor: 'printing' stamp: 'ul 12/12/2009 14:07'!installedVersion	"Return the version String for the installed version.	We ask the map. Return nil if this package is not installed."	^self installedRelease ifNotNil: [:r | r smartVersion]! !