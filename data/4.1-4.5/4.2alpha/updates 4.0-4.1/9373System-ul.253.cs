"Change Set:		9373System-ul.253System-ul.253:- fix (again): Timer may be already nil in the #ensure: block in MessageTally >> #spyEvery:on: and MessageTally >> #spyAllEvery:on:System-ar.252:Use withBlanksTrimmed, not trimBlanks (which doesn't exist in Squeak)."!!MessageTally methodsFor: 'initialize-release' stamp: 'ul 2/14/2010 09:08'!spyAllEvery: millisecs on: aBlock	"Create a spy and spy on the given block at the specified rate."	"Spy all the system processes"	| myDelay time0 |	(aBlock isMemberOf: BlockClosure)		ifFalse: [self error: 'spy needs a block here'].	self class: aBlock receiver class method: aBlock method.		"set up the probe"	myDelay := Delay forMilliseconds: millisecs.	time0 := Time millisecondClockValue.	gcStats := SmalltalkImage current getVMParameters.	Timer ifNotNil: [ Timer terminate ].	Timer := [		[true] whileTrue: [			| observedProcess startTime |			startTime := Time millisecondClockValue.			myDelay wait.			observedProcess := Processor preemptedProcess.			self				tally: observedProcess suspendedContext				in: observedProcess				"tally can be > 1 if ran a long primitive"				by: (Time millisecondClockValue - startTime) // millisecs].		nil] newProcess.	Timer priority: Processor timingPriority-1.		"activate the probe and evaluate the block"	Timer resume.	^ aBlock ensure: [		"Collect gc statistics"		SmalltalkImage current getVMParameters keysAndValuesDo: [ :idx :gcVal | 			gcStats at: idx put: (gcVal - (gcStats at: idx))].		"cancel the probe and return the value"		Timer ifNotNil: [			Timer terminate.			Timer := nil ].		time := Time millisecondClockValue - time0]! !!MessageTally methodsFor: 'initialize-release' stamp: 'ul 2/14/2010 09:09'!spyEvery: millisecs on: aBlock	"Create a spy and spy on the given block at the specified rate."	"Spy only on the active process (in which aBlock is run)"	| myDelay time0 observedProcess |	(aBlock isMemberOf: BlockClosure)		ifFalse: [self error: 'spy needs a block here'].	self class: aBlock receiver class method: aBlock method.		"set up the probe"	observedProcess := Processor activeProcess.	myDelay := Delay forMilliseconds: millisecs.	time0 := Time millisecondClockValue.	gcStats := SmalltalkImage current getVMParameters.	Timer ifNotNil: [ Timer terminate ].	Timer := [ 		[true] whileTrue: [			| startTime |			startTime := Time millisecondClockValue.			myDelay wait.			self				tally: Processor preemptedProcess suspendedContext				in: (observedProcess == Processor preemptedProcess ifTrue: [observedProcess] ifFalse: [nil])				"tally can be > 1 if ran a long primitive"				by: (Time millisecondClockValue - startTime) // millisecs].		nil] newProcess.	Timer priority: Processor timingPriority-1.		"activate the probe and evaluate the block"	Timer resume.	^ aBlock ensure: [		"Collect gc statistics"		SmalltalkImage current getVMParameters keysAndValuesDo: [ :idx :gcVal | 			gcStats at: idx put: (gcVal - (gcStats at: idx))].		"cancel the probe and return the value"		Timer ifNotNil: [			Timer terminate.			Timer := nil ].		time := Time millisecondClockValue - time0]! !!String methodsFor: '*system' stamp: 'ar 2/13/2010 15:50'!suggestedTypeNames	^ Array streamContents:		[ : stream |		self withIndexDo:		[ : eachChar : index |		eachChar isUppercase ifTrue:			[ stream nextPut: 				(self					copyFrom: index					to: self size) withBlanksTrimmed.			"Often, argument names that refer to Collections end in the letter s, which can cause the suggested type-name to not be found.  Account for this."			self last = $s				ifTrue:					[ stream nextPut:						(self							copyFrom: index							to: self size-1) withBlanksTrimmed ] ] ] ]! !