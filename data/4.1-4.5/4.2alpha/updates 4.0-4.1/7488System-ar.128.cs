"Change Set:		7488System-ar.128System-ar.128:UIManagerization. Replaces all the trivial references to PopUpMenu, SelectionMenu, CustomMenu, and FillInTheBlank.System-nice.116:Tet and fix forhttp://bugs.squeak.org/view.php?id=7351The code to extract image name without .image extension gets fooled if there is another dot in the name like inSqueak3.10.2-7179-basic.imageSystem-jmv.117:Part of StrikeFont enhancements to support glyphs up to 32bpp, with anti aliasing.System-jmv.118:StrikeFont useUnderscoreSystem-jmv.119:Additional DejaVu StrikeFonts, sizes 7 and 12.System-jmv.120:Additional DejaVu StrikeFonts, sizes 7 and 12.Run the install.System-jmv.121:Fixes Display alpha channel for AA StrikeFonts.System-ar.122:Introducing pragma preferences. Preferences no longer have to litter the Preferences class but can be defined as class variables local to the place where they are needed. Preferences are discovered by using the <preference:category:description:type:> pragma, for example:samplePref	<preference: 'Sample Preference'		category: 'Examples'		description: 'A Sample Preference'		type: #Boolean>	^SamplePrefFour types of preferences are currently supported: #Boolean, #Number, #String, and #Color. When the preference is changed, the according setter method is being called.System-jmv.123:Moves dual pass for AA StrikeFonts back to BitBlt, without needing any new instvar (that would break WarpBlt). Enhanced a bit the spacing between glyphs.System-jmv.124:Do Run the postscript to install new fonts!System-jmv.125:Another round of small fixes for AA StrikeFonts.System-jmv.126:Run again the install of the DejaVu fontsSystem-jmv.127:Remove the old entry in TextConstants!"!Preference subclass: #PragmaPreference	instanceVariableNames: 'provider getter setter'	classVariableNames: ''	poolDictionaries: ''	category: 'System-Support'!TestCase subclass: #SmalltalkImageTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'System-Support-Tests'!Object subclass: #PreferenceExample	instanceVariableNames: ''	classVariableNames: 'TextPref NumericPref BooleanPref ColorPref'	poolDictionaries: ''	category: 'System-Support'!!Preferences class methodsFor: 'fonts' stamp: 'jmv 8/6/2009 10:12'!restoreDefaultFonts	"Since this is called from menus, we can take the opportunity to prompt for missing font styles."	"	Preferences restoreDefaultFonts	"	self setDefaultFonts: #(		(setSystemFontTo:			'Bitmap DejaVu Sans'		9)		(setListFontTo:				'Bitmap DejaVu Sans'		9)		(setFlapsFontTo:			Accushi						12)		(setEToysFontTo:			BitstreamVeraSansBold		9)		(setPaintBoxButtonFontTo:	BitstreamVeraSansBold		9)		(setMenuFontTo:			'Bitmap DejaVu Sans'		9)		(setWindowTitleFontTo:		'Bitmap DejaVu Sans Bold'	12)		(setBalloonHelpFontTo:		Accujen						9)		(setCodeFontTo:			'Bitmap DejaVu Sans'		9)		(setButtonFontTo:			BitstreamVeraSansMono	9)	)! !!Preferences class methodsFor: 'fonts' stamp: 'jmv 8/4/2009 15:11'!properAlphaForBlackText	^ self		valueOfFlag: #properAlphaForBlackText		ifAbsent: [true]! !!PreferenceExample class methodsFor: 'preferences' stamp: 'ar 3/3/2009 22:35'!booleanPref: aBool	BooleanPref := aBool.	self inform: 'The new preference value is: ', aBool asString.! !!PragmaPreference methodsFor: 'printing' stamp: 'ar 3/9/2009 21:28'!printOn: aStream	"Print a string decribing the receiver to the given stream"	super printOn: aStream.	aStream nextPutAll: name storeString, ' ', self value storeString! !!SmalltalkImage methodsFor: 'image, changes names' stamp: 'nice 5/11/2009 23:30'!fullNameForChangesNamed: aName	| imgName |	imgName := self fullNameForImageNamed: aName.	^FileDirectory fileName: (FileDirectory baseNameFor: imgName) extension: FileDirectory changeSuffix.! !!Preferences class methodsFor: 'dynamic preferences' stamp: 'ar 3/9/2009 21:32'!preference: prefName category: aCategory description: helpString type: typeSymbol	"Add a preference residing in aMethod"	|  aPreference aViewRegistry |	typeSymbol caseOf: {		[#Boolean] -> [aViewRegistry := PreferenceViewRegistry ofBooleanPreferences].		[#Color] -> [aViewRegistry := PreferenceViewRegistry ofColorPreferences].		[#Font]	-> [aViewRegistry := PreferenceViewRegistry ofFontPreferences].		[#Number]	-> [aViewRegistry := PreferenceViewRegistry ofNumericPreferences].		[#String]	-> [aViewRegistry := PreferenceViewRegistry ofTextPreferences].	}.	aPreference := PragmaPreference new.	aPreference 		 name: prefName		 defaultValue: nil	"always nil"		 helpString: helpString		 localToProject: false "governed by the method"		 categoryList: (aCategory isArray ifTrue:[aCategory] ifFalse:[{aCategory}])		 changeInformee: nil		 changeSelector: nil		 viewRegistry: aViewRegistry.	^aPreference! !!Preferences class methodsFor: 'fonts' stamp: 'jmv 8/4/2009 10:11'!setDefaultFonts: defaultFontsSpec	"Since this is called from menus, we can take the opportunity to prompt for missing font styles."	| fontNames map emphases |	fontNames := defaultFontsSpec collect: [:array | array second].	map := IdentityDictionary new.	emphases := IdentityDictionary new.	fontNames do: [:originalName | | decoded style response |		decoded := TextStyle decodeStyleName: originalName.		style := map at: originalName put: (TextStyle named: decoded second).		emphases at: originalName put: decoded first.		style ifNil: [			response := TextStyle modalStyleSelectorWithTitle: 'Choose replacement for text style ', originalName.			map at: originalName put: (response ifNil: [TextStyle default])]].	defaultFontsSpec do: [:triplet | self		perform: triplet first		with: (((map at: triplet second) fontOfPointSize: triplet third) emphasized: (emphases at: triplet second))]! !!FilePackage methodsFor: 'conflict checker' stamp: 'ar 8/6/2009 20:40'!conflictsWithUpdatedMethods	"Check this package for conflicts with methods in the image which are in newer updates."	| localFileName stream updateNumberString updateNumber imageUpdateNumber updateNumberChangeSet conflicts fileStream |	localFileName := FileDirectory localNameFor: fullName.	stream := ReadStream on: sourceSystem.	stream upToAll: 'latest update: #'.	updateNumberString := stream upTo: $].	stream close.		fileStream := FileStream readOnlyFileNamed: fullName.	(fileStream contentsOfEntireFile includes: Character linefeed)		ifTrue: [self notifyWithLabel:  'The changeset file ', localFileName, ' contains linefeeds.  Proceed if...you know that this is okay (e.g. the file contains raw binary data).'].	fileStream close.	updateNumberString isEmpty ifFalse:		"remove prepended junk, if any"		[updateNumberString := (updateNumberString findTokens: Character space) last].	updateNumberString asInteger ifNil:		[(self confirm: 'Error: ', localFileName, ' has no valid Latest Update number in its header.Do you want to enter an update number for this file?')			ifFalse: [^ self]			ifTrue: [updateNumberString := UIManager default						request: 'Please enter the estimated update number (e.g. 4332).']].	updateNumberString asInteger ifNil: [self inform: 'Conflict check cancelled.'. ^ self].	updateNumber := updateNumberString asInteger.	imageUpdateNumber := SystemVersion current highestUpdate.	updateNumber > imageUpdateNumber ifTrue:		[(self confirm: 'Warning: The update number for this file (#', updateNumberString, ')is greater than the highest update number for this image (#', imageUpdateNumber asString, ').This probably means you need to update your image.Should we proceed anyway as if the file update number is #', imageUpdateNumber asString, '?')			ifTrue:				[updateNumber := imageUpdateNumber.				updateNumberString := imageUpdateNumber asString]			ifFalse: [^ self]].	updateNumberChangeSet := self findUpdateChangeSetMatching: updateNumber.	updateNumberChangeSet ifNil: [^ self].	Smalltalk isMorphic ifTrue: [self currentWorld findATranscript: self currentEvent].	self class logCr; logCr; log: 'Checking ', localFileName, ' (#', updateNumberString, ') for method conflicts with changesets after ', updateNumberChangeSet name, ' ...'.	conflicts := OrderedCollection new.	self classes values do: [:pseudoClass |		(Array with: pseudoClass with: pseudoClass metaClass) do: [:classOrMeta |			classOrMeta selectors do: [:selector | | conflict |				conflict := self							checkForMoreRecentUpdateThanChangeSet: updateNumberChangeSet							pseudoClass: classOrMeta							selector: selector.				conflict ifNotNil: [conflicts add: conflict].			].		].	].	self class logCr; log: conflicts size asString, (' conflict' asPluralBasedOn: conflicts), ' found.'; logCr.	self class closeLog.	^ conflicts! !!Utilities class methodsFor: 'user interface' stamp: 'ar 8/6/2009 19:21'!informUser: aString during: aBlock	"Display a message above (or below if insufficient room) the cursor during execution of the given block. This is now handled by UIManager."	"Utilities informUser: 'Just a sec!!' during: [(Delay forSeconds: 1) wait]"	^UIManager default informUser: aString during: aBlock.! !!AppRegistry class methodsFor: 'as yet unclassified' stamp: 'ar 8/6/2009 20:02'!askForDefault	self registeredClasses isEmpty ifTrue:		[self inform: 'There are no ', self appName, ' applications registered.'.		^ default := nil].	self registeredClasses size = 1 ifTrue:		[^ default := self registeredClasses anyOne].	default :=  UIManager default 		chooseFrom: self registeredClasses 		values: self registeredClasses		title: 'Which ', self appName, ' would you prefer?'.	default ifNil: [default := self registeredClasses first].	^default.! !!ChangeSet class methodsFor: 'defaults' stamp: 'ar 8/6/2009 18:17'!promptForDefaultChangeSetDirectoryIfNecessary	"Check the Preference (if any), and prompt the user to change it if necessary.	The default if the Preference is unset is the current directory.	Answer the directory."	"ChangeSet promptForDefaultChangeSetDirectoryIfNecessary"	| choice directoryName dir |	directoryName := Preferences				parameterAt: #defaultChangeSetDirectoryName				ifAbsentPut: [''].	[dir := FileDirectory default directoryNamed: directoryName.	dir exists]		whileFalse: [choice := UIManager default chooseFrom: {			'Create directory' translated.			'Use default directory and forget preference' translated.			'Choose another directory'  translated		} title: ('The preferred change set directory (''{1}'') does not exist.Create it or use the default directory ({2})?' translated format: { directoryName. FileDirectory default pathName }).			choice = 1				ifTrue: [dir assureExistence ].			choice = 3				ifTrue: [dir := UIManager default chooseDirectory.					directoryName := dir					ifNil: [ '' ]						ifNotNil: [dir pathName ]]].		self defaultChangeSetDirectory: directoryName.		^dir! !!PragmaPreference methodsFor: 'value' stamp: 'ar 3/9/2009 21:31'!togglePreferenceValue	"Toggle whether the value of the preference. Self must be a boolean preference."	self preferenceValue: self preferenceValue not.	self notifyInformeeOfChange! !!SystemDictionary methodsFor: 'shrinking' stamp: 'ar 8/6/2009 20:34'!majorShrink	"Undertake a major shrinkage of the image.	This method throws out lots of the system that is not needed	for, eg, operation in a hand-held PC. majorShrink produces a	999k image in Squeak 2.8	Smalltalk majorShrink; abandonSources; lastRemoval"	| oldDicts newDicts |	self isMorphic		ifTrue: [^ self error: 'You can only run majorShrink in MVC'].	Project current isTopProject		ifFalse: [^ self error: 'You can only run majorShrink in the top project'].	(self confirm: 'All sub-projects will be deleted from this image.You should already have made a backup copy,or you must save with a different name after shrinking.Shall we proceed to discard most of the content in this image?')		ifFalse: [^ self inform: 'No changes have been made.'].	"Remove all projects but the current one. - saves 522k"	ProjectView		allInstancesDo: [:pv | pv controller closeAndUnscheduleNoTerminate].	Project current setParent: Project current.	MorphWorldView		allInstancesDo: [:pv | pv topView controller closeAndUnscheduleNoTerminate].	self		at: #Wonderland		ifPresent: [:cls | cls removeActorPrototypesFromSystem].	Player freeUnreferencedSubclasses.	MorphicModel removeUninstantiatedModels.	Utilities classPool at: #ScrapsBook put: nil.	Utilities zapUpdateDownloader.	ProjectHistory currentHistory initialize.	Project rebuildAllProjects.	"Smalltalk discardVMConstruction."	"755k"	self discardSoundSynthesis.	"544k"	self discardOddsAndEnds.	"227k"	self discardNetworking.	"234k"	"Smalltalk discard3D."	"407k"	self discardFFI.	"33k"	self discardMorphic.	"1372k"	Symbol rehash.	"40k"	"Above by itself saves about 4,238k"	"Remove references to a few classes to be deleted, so that they	won't leave obsolete versions around."	ChangeSet class compile: 'defaultName		^ ''Changes'' ' classified: 'initialization'.	ScreenController removeSelector: #openChangeManager.	ScreenController removeSelector: #exitProject.	ScreenController removeSelector: #openProject.	ScreenController removeSelector: #viewImageImports.	"Now delete various other classes.."	SystemOrganization removeSystemCategory: 'Graphics-Files'.	SystemOrganization removeSystemCategory: 'System-Object Storage'.	self removeClassNamed: #ProjectController.	self removeClassNamed: #ProjectView.	"Smalltalk removeClassNamed: #Project."	self removeClassNamed: #Component1.	self removeClassNamed: #FormSetFont.	self removeClassNamed: #FontSet.	self removeClassNamed: #InstructionPrinter.	self removeClassNamed: #ChangeSorter.	self removeClassNamed: #DualChangeSorter.	self removeClassNamed: #EmphasizedMenu.	self removeClassNamed: #MessageTally.	StringHolder class removeSelector: #originalWorkspaceContents.	CompiledMethod removeSelector: #symbolic.	RemoteString removeSelector: #makeNewTextAttVersion.	Utilities class removeSelector: #absorbUpdatesFromServer.	self removeClassNamed: #PenPointRecorder.	self removeClassNamed: #Path.	self removeClassNamed: #Base64MimeConverter.	"Smalltalk removeClassNamed: #EToySystem. Dont bother - its	very small and used for timestamps etc"	self removeClassNamed: #RWBinaryOrTextStream.	self removeClassNamed: #AttributedTextStream.	self removeClassNamed: #WordNet.	self removeClassNamed: #SelectorBrowser.	TextStyle		allSubInstancesDo: [:ts | ts				newFontArray: (ts fontArray						copyFrom: 1						to: (2 min: ts fontArray size))].	#(ListParagraph PopUpMenu StandardSystemView) do:[:className|		Smalltalk at: className ifPresent:[:aClass| aClass initialize].	].	ChangeSet noChanges.	ChangeSet classPool		at: #AllChangeSets		put: (OrderedCollection with: ChangeSet current).	SystemDictionary removeSelector: #majorShrink.	[self removeAllUnSentMessages > 0]		whileTrue: [Smalltalk unusedClasses				do: [:c | (Smalltalk at: c) removeFromSystem]].	SystemOrganization removeEmptyCategories.	self		allClassesDo: [:c | c zapOrganization].	self garbageCollect.	'Rehashing method dictionaries . . .'		displayProgressAt: Sensor cursorPoint		from: 0		to: MethodDictionary instanceCount		during: [:bar | 			oldDicts := MethodDictionary allInstances.			newDicts := Array new: oldDicts size.			oldDicts				withIndexDo: [:d :index | 					bar value: index.					newDicts at: index put: d rehashWithoutBecome].			oldDicts elementsExchangeIdentityWith: newDicts].	oldDicts := newDicts := nil.	Project rebuildAllProjects.	ChangeSet current initialize.	"seems to take more than one try to gc all the weak refs in	SymbolTable "	3		timesRepeat: [self garbageCollect.			Symbol compactSymbolTable]! !!Preferences class methodsFor: 'fonts' stamp: 'jmv 8/4/2009 15:09'!aaFontsColormapDepth	"Adjust balance between colored AA text quality (especially if subpixel AA is used) and space / performance.	5 is optimal quality. Each colorMap takes 128kB of RAM, and takes several seconds to build.	4 is a reasonable balance. Each colorMap takes 16kB of RAM and builds fast on a fast machine.	3 is good for slow hardware or memory restrictions. Each colorMap takes 2 kb of RAM."	^self		valueOfFlag: #aaFontsColormapDepth		ifAbsent: [4]! !!Utilities class methodsFor: 'user interface' stamp: 'ar 8/6/2009 19:22'!informUserDuring: aBlock	"Display a message above (or below if insufficient room) the cursor during execution of the given block. This is now handled by UIManager."	"Utilities informUserDuring:[:bar|		#(one two three) do:[:info|			bar value: info.			(Delay forSeconds: 1) wait]]"	^UIManager default informUserDuring: aBlock! !!PreferenceExample class methodsFor: 'preferences' stamp: 'ar 3/3/2009 22:36'!textPref: aString	TextPref := aString.	self inform: 'The new preference value is: ', aString asString.! !!Preferences class methodsFor: 'fonts' stamp: 'jmv 8/5/2009 23:11'!subPixelRenderFonts	^ self		valueOfFlag: #subPixelRenderFonts		ifAbsent: [ true ]! !!PreferenceExample class methodsFor: 'preferences' stamp: 'ar 3/5/2009 20:09'!initialize	"PreferenceExample initialize"	"Initialize the default values and register preferences"	TextPref := 'Hello World'.	NumericPref := 1234.	BooleanPref := true.	ColorPref := Color green.! !!PreferenceExample class methodsFor: 'preferences' stamp: 'ar 3/3/2009 22:36'!numericPref: aNumber	NumericPref := aNumber.	self inform: 'The new preference value is: ', aNumber asString.! !!PreferenceExample class methodsFor: 'preferences' stamp: 'ar 8/4/2009 20:52'!textPref	<preference: 'Textual Preference Example'		category: 'Examples'		description: 'A simple example for a textual preference (see PreferenceExample>>textPref)'		type: #String>	^TextPref! !!SmalltalkImageTest methodsFor: 'testing' stamp: 'nice 5/11/2009 23:47'!testImageName	"Non regression test for http://bugs.squeak.org/view.php?id=7351"	| shortImgName fullImgName fullChgName |	shortImgName := 'Squeak3.10.2-7179-basic'.	fullImgName := SmalltalkImage current fullNameForImageNamed: shortImgName.	fullChgName := SmalltalkImage current fullNameForChangesNamed: shortImgName.	FileDirectory splitName: fullImgName to: [:path :name |		self assert: path = SmalltalkImage current imagePath.		self assert: name = 'Squeak3.10.2-7179-basic.image'.].	FileDirectory splitName: fullChgName to: [:path :name |		self assert: path = SmalltalkImage current imagePath.		self assert: name = 'Squeak3.10.2-7179-basic.changes'.].! !!PragmaPreference methodsFor: 'initialization' stamp: 'ar 3/9/2009 21:28'!restoreDefaultValue	"Pragma preferences preserve their current value"! !!FilePackage methodsFor: 'fileIn/fileOut' stamp: 'ar 8/6/2009 18:51'!askForDoits	| choice choices |	choices := #('do not process' 'at the beginning' 'at the end' 'cancel').	choice := nil.	[choices includes: choice] whileFalse: [		choice := UIManager default chooseFrom: choices values: choices title:'The package contains unprocessed doIts.When would like to process those?'].	^choices indexOf: choice! !!Preferences class methodsFor: 'fonts' stamp: 'jmv 8/5/2009 23:11'!subPixelRenderColorFonts	^ self		valueOfFlag: #subPixelRenderColorFonts		ifAbsent: [ true ]! !!DefaultExternalDropHandler methodsFor: 'private' stamp: 'ar 8/6/2009 20:09'!chooseServiceFrom: aCollection	"private - choose a service from aCollection asking the user if  needed"	^aCollection size = 1 		ifTrue: [aCollection anyOne]		ifFalse:[UIManager default 			chooseFrom: (aCollection collect:[:each| each label])			values: aCollection].! !!PragmaPreference methodsFor: 'initialization' stamp: 'ar 3/9/2009 21:35'!provider: aClass getter: getterSymbol setter: setterSymbol	provider := aClass.	getter := getterSymbol.	setter := setterSymbol.! !!Preferences class methodsFor: 'dynamic preferences' stamp: 'ar 3/9/2009 21:41'!removePreferencesFor: aClass	"Remove all the preferences registered for the given class"	"Preferences removePreferencesFor: PreferenceExample"	| map |	map := self dictionaryOfPreferences select:[:pref| pref provider == aClass].	map keysDo:[:prefName| self dictionaryOfPreferences removeKey: prefName].! !!Preference methodsFor: 'value' stamp: 'ar 3/9/2009 21:41'!provider	"Compatibility with pragma preferences"	^nil! !!ExternalDropHandler class methodsFor: 'private' stamp: 'ar 8/6/2009 20:09'!chooseServiceFrom: aCollection	"private - choose a service from aCollection asking the user if  needed"	^aCollection size = 1 		ifTrue: [aCollection anyOne]		ifFalse:[UIManager default 			chooseFrom: (aCollection collect:[:each| each label])			values: aCollection].! !!PreferenceExample class methodsFor: 'preferences' stamp: 'ar 3/3/2009 22:36'!colorPref: aColor	ColorPref := aColor.	self inform: 'The new preference value is: ', aColor asString.! !!Utilities class methodsFor: 'summer97 additions' stamp: 'ar 8/6/2009 19:20'!chooseFileWithSuffixFromList: aSuffixList withCaption: aCaption	"Pop up a list of all files in the default directory which have a suffix in the list.  Return #none if there are none; return nil if the user backs out of the menu without making a choice."	"Utilities chooseFileWithSuffixFromList: #('.gif' '.jpg')"	| aList aName |	aList := OrderedCollection new.	aSuffixList do:		[:aSuffix | aList addAll: (FileDirectory default fileNamesMatching: '*', aSuffix)].	^ aList size > 0		ifTrue:			[aName := UIManager default chooseFrom: aList values: aList title: aCaption.			aName]		ifFalse:			[#none]! !!Preferences class methodsFor: 'class initialization' stamp: 'ar 8/4/2009 20:46'!initialize	"Preferences initialize"	self registerInFlapsRegistry.	self registerForEvents.! !!ChangeSet methodsFor: 'fileIn/Out' stamp: 'ar 8/6/2009 18:16'!fileOut	"File out the receiver, to a file whose name is a function of the  	change-set name and either of the date & time or chosen to have a  	unique numeric tag, depending on the preference  	'changeSetVersionNumbers'"	| slips nameToUse internalStream |	self checkForConversionMethods.	ChangeSet promptForDefaultChangeSetDirectoryIfNecessary.	nameToUse := Preferences changeSetVersionNumbers				ifTrue: [self defaultChangeSetDirectory nextNameFor: self name extension: FileStream cs]				ifFalse: [self name , FileDirectory dot , Utilities dateTimeSuffix, FileDirectory dot , FileStream cs].	nameToUse := self defaultChangeSetDirectory fullNameFor: nameToUse.	Cursor write showWhile: [			internalStream := WriteStream on: (String new: 10000).			internalStream header; timeStamp.			self fileOutPreambleOn: internalStream.			self fileOutOn: internalStream.			self fileOutPostscriptOn: internalStream.			internalStream trailer.			FileStream writeSourceCodeFrom: internalStream baseName: (nameToUse copyFrom: 1 to: nameToUse size - 3) isSt: false useHtml: false.	].	Preferences checkForSlips		ifFalse: [^ self].	slips := self checkForSlips.	(slips size > 0			and: [(UIManager default chooseFrom: #('Ignore' 'Browse slips')				 	title: 'Methods in this fileOut have haltsor references to the Transcriptor other ''slips'' in them.Would you like to browse them?')					= 2])		ifTrue: [self systemNavigation browseMessageList: slips name: 'Possible slips in ' , name]! !!Preferences class methodsFor: 'dynamic preferences' stamp: 'ar 8/4/2009 20:46'!registerForEvents	"Preferences registerForEvents"	| aPrefSymbol aPreference |	SystemChangeNotifier uniqueInstance noMoreNotificationsFor: self.	SystemChangeNotifier uniqueInstance notify: self ofAllSystemChangesUsing: #prefEvent:.	Smalltalk allClassesDo:[:aClass|		aClass class methodsDo:[:method|			method pragmas do:[:pragma|				pragma keyword == #preference:category:description:type: ifTrue:[					aPrefSymbol := (aClass name,'>>', method selector) asSymbol.					aPreference := self 						preference: pragma arguments first						category: pragma arguments second 						description: pragma arguments third						type: pragma arguments fourth.					aPreference 						provider: aClass 						getter: method selector 						setter: method selector asMutator.					self dictionaryOfPreferences at: aPrefSymbol put: aPreference]]]].! !!Project methodsFor: 'file in/out' stamp: 'ar 8/6/2009 18:31'!exportSegmentWithChangeSet: aChangeSetOrNil fileName: aFileNamedirectory: aDirectory	"Store my project out on the disk as an *exported*ImageSegment.  All outPointers will be in a form that can be resolvedin the target image.  Name it <project name>.extSeg.  Whatdo we doabout subProjects, especially if they are out as local imagesegments?  Force them to come in?	Player classes are included automatically."	| is str ans revertSeg roots holder collector fd mgr stacks |	"Files out a changeSet first, so that a project can containits own classes"world isMorph ifFalse: [	self projectParameters at: #isMVC put: true.	^ false].	"Only Morphic projects for now"world ifNil: [^ false].  world presenter ifNil: [^ false].Utilities emptyScrapsBook.world currentHand pasteBuffer: nil.	  "don't write the paste buffer."world currentHand mouseOverHandler initialize.	  "forget about anyreferences here"	"Display checkCurrentHandForObjectToPaste."Command initialize.world clearCommandHistory.world fullReleaseCachedState; releaseViewers.world cleanseStepList.world localFlapTabs size = world flapTabs size ifFalse: [	self error: 'Still holding onto Global flaps'].world releaseSqueakPages.ScriptEditorMorph writingUniversalTiles: (self projectParameterAt:#universalTiles ifAbsent: [false]).holder := Project allProjects.	"force them in to outPointers, whereDiskProxys are made""Just export me, not my previous version"revertSeg := self projectParameters at: #revertToMe ifAbsent: [nil].self projectParameters removeKey: #revertToMe ifAbsent: [].roots := OrderedCollection new.roots add: self; add: world; add: transcript; add: changeSet; add: thumbnail.roots add: world activeHand.	"; addAll: classList; addAll: (classList collect: [:cls | cls class])"roots := roots reject: [ :x | x isNil].	"early saves may not haveactive hand or thumbnail"	fd := aDirectory directoryNamed: self resourceDirectoryName.	fd assureExistence.	"Clean up resource references before writing out"	mgr := self resourceManager.	self resourceManager: nil.	ResourceCollector current: ResourceCollector new.	ResourceCollector current localDirectory: fd.	ResourceCollector current baseUrl: self resourceUrl.	ResourceCollector current initializeFrom: mgr.	ProgressNotification signal: '2:findingResources' extra:'(collecting resources...)' translated.	"Must activate old world because this is run at #armsLength.	Otherwise references to ActiveWorld, ActiveHand, or ActiveEvent	will not be captured correctly if referenced from blocks or user code."	world becomeActiveDuring:[		is := ImageSegment new copySmartRootsExport: roots asArray.		"old way was (is := ImageSegment newcopyFromRootsForExport: roots asArray)"	].	self resourceManager: mgr.	collector := ResourceCollector current.	ResourceCollector current: nil.	ProgressNotification signal: '2:foundResources' extra: ''.	is state = #tooBig ifTrue: [		collector replaceAll.		^ false].str := ''."considered legal to save a project that has never been entered"(is outPointers includes: world) ifTrue: [	str := str, '\Project''s own world is not in the segment.' translated withCRs].str isEmpty ifFalse: [	ans := UIManager default chooseFrom: {		'Do not write file' translated.		'Write file anyway' translated.		'Debug' translated.	} title: str.	ans = 1 ifTrue: [		revertSeg ifNotNil: [projectParameters at:#revertToMe put: revertSeg].		collector replaceAll.		^ false].	ans = 3 ifTrue: [		collector replaceAll.		self halt: 'Segment not written' translated]].	stacks := is findStacks.	is		writeForExportWithSources: aFileName		inDirectory: fd		changeSet: aChangeSetOrNil.	SecurityManager default signFile: aFileName directory: fd.	"Compress all files and update check sums"	collector forgetObsolete.	self storeResourceList: collector in: fd.	self storeHtmlPageIn: fd.	self storeManifestFileIn: fd.	self writeStackText: stacks in: fd registerIn: collector.	"local proj.005.myStack.t"	self compressFilesIn: fd to: aFileName in: aDirectoryresources: collector.			"also deletes the resource directory"	"Now update everything that we know about"	mgr updateResourcesFrom: collector.revertSeg ifNotNil: [projectParameters at: #revertToMe put: revertSeg].holder.collector replaceAll.world flapTabs do: [:ft |		(ft respondsTo: #unhibernate) ifTrue: [ft unhibernate]].is arrayOfRoots do: [:obj |	obj class == ScriptEditorMorph ifTrue: [obj unhibernate]].^ true! !!PreferenceExample class methodsFor: 'preferences' stamp: 'ar 8/4/2009 20:52'!colorPref	<preference: 'Color Preference Example'		category: 'Examples'		description: 'A simple example for a color preference (see PreferenceExample>>colorPref)'		type: #Color>	^ColorPref! !!Utilities class methodsFor: 'summer97 additions' stamp: 'ar 8/6/2009 19:19'!chooseFileWithSuffix: aSuffix	"Utilities chooseFileWithSuffix: '.gif'"	| aList aName |	aList := FileDirectory default fileNamesMatching: '*', aSuffix.	aList size > 0		ifTrue:			[aName := UIManager default chooseFrom: aList values: aList title: 'Choose a file'.			^ aName]		ifFalse:			[self inform: 'Sorry, there are no fileswhose names end with "', aSuffix, '".'.			^ nil]! !!Utilities class methodsFor: 'fetching updates' stamp: 'ar 8/6/2009 19:19'!broadcastUpdatesFrom: n1 to: n2 except: skipList"	Note:  This method takes its list of files from the directory named 'updates',	which will have been created and filled by, eg,		Utilities readServerUpdatesSaveLocally: true updateImage: true.	These can then be rebroadcast to any server using, eg,		Utilities broadcastUpdatesFrom: 1 to: 9999 except: #(223 224).	If the files are already on the server, and it is only a matter	of copying them to the index for a different version, then use...		(ServerDirectory serverInGroupNamed: 'SqC Internal Updates*')			exportUpdatesExcept: #()."	| fileNames fileNamesInOrder names choice file updateDirectory |	updateDirectory := FileDirectory default directoryNamed: 'updates'.	fileNames := updateDirectory fileNames select:		[:n | n first isDigit			and: [(n initialIntegerOrNil between: n1 and: n2)			and: [(skipList includes: n initialIntegerOrNil) not]]].	(file := fileNames select: [:n | (n occurrencesOf: $.) > 1]) size > 0		ifTrue: [self halt: file first , ' has multiple periods'].	fileNamesInOrder := fileNames asSortedCollection:		[:a :b | a initialIntegerOrNil < b initialIntegerOrNil].	names := ServerDirectory groupNames asSortedArray.	choice := UIManager default chooseFrom: names values: names.	choice == nil ifTrue: [^ self].	(ServerDirectory serverInGroupNamed: choice)		putUpdateMulti: fileNamesInOrder fromDirectory: updateDirectory! !!PreferenceExample class methodsFor: 'preferences' stamp: 'ar 8/4/2009 20:52'!numericPref	<preference: 'Numeric Preference Example'		category: 'Examples'		description: 'A simple example for a numeric preference (see PreferenceExample>>numericPref)'		type: #Number>	^NumericPref! !!Preferences class methodsFor: 'fonts' stamp: 'jmv 8/6/2009 08:52'!fontConfigurationMenu	| aMenu |	aMenu := MenuMorph new defaultTarget: Preferences.	aMenu addTitle: 'Standard System Fonts' translated.		aMenu addStayUpIcons.		aMenu add: 'default text font...' translated action: #chooseSystemFont.	aMenu balloonTextForLastItem: 'Choose the default font to be used for code and  in workspaces, transcripts, etc.' translated.	aMenu lastItem font: Preferences standardDefaultTextFont.		aMenu add: 'list font...' translated action: #chooseListFont.	aMenu lastItem font: Preferences standardListFont.	aMenu balloonTextForLastItem: 'Choose the font to be used in list panes' translated.		aMenu add: 'flaps font...' translated action: #chooseFlapsFont.	aMenu lastItem font: Preferences standardFlapFont.	aMenu balloonTextForLastItem: 'Choose the font to be used on textual flap tabs' translated.	aMenu add: 'eToys font...' translated action: #chooseEToysFont.	aMenu lastItem font: Preferences standardEToysFont.	aMenu balloonTextForLastItem: 'Choose the font to be used on eToys environment' translated.	aMenu add: 'eToys title font...' translated action: #chooseEToysTitleFont.	aMenu lastItem font: Preferences standardEToysTitleFont.	aMenu balloonTextForLastItem: 'Choose the font to be used in titles on eToys environment' translated.	aMenu add: 'halo label font...' translated action: #chooseHaloLabelFont.	aMenu lastItem font: Preferences standardHaloLabelFont.	aMenu balloonTextForLastItem: 'Choose the font to be used on labels ih halo' translated.	aMenu add: 'menu font...' translated action: #chooseMenuFont.	aMenu lastItem font: Preferences standardMenuFont.	aMenu balloonTextForLastItem: 'Choose the font to be used in menus' translated.		aMenu add: 'window-title font...' translated action: #chooseWindowTitleFont.	aMenu lastItem font: Preferences windowTitleFont.	aMenu balloonTextForLastItem: 'Choose the font to be used in window titles.' translated.	aMenu add: 'balloon-help font...' translated action: #chooseBalloonHelpFont.	aMenu lastItem font: Preferences standardBalloonHelpFont.	aMenu balloonTextForLastItem: 'choose the font to be used when presenting balloon help.' translated.		aMenu add: 'code font...' translated action: #chooseCodeFont. 	aMenu lastItem font: Preferences standardCodeFont. 	aMenu balloonTextForLastItem: 'Choose the font to be used in code panes.' translated.	aMenu add: 'button font...' translated action: #chooseStandardButtonFont.	aMenu lastItem font: Preferences standardButtonFont.	aMenu balloonTextForLastItem: 'Choose the font to be used in buttons.' translated.	aMenu addLine.	aMenu add: 'demo mode' translated action: #setDemoFonts.	aMenu balloonTextForLastItem: 'Set Fonts usable for giving a presentation' translated.	aMenu addLine.	aMenu add: 'restore default font choices' translated action: #restoreDefaultFonts.	aMenu balloonTextForLastItem: 'Use the standard system font defaults' translated.		aMenu add: 'print default font choices' translated action: #printStandardSystemFonts.	aMenu balloonTextForLastItem: 'Print the standard system font defaults to the Transcript' translated.	^ aMenu! !!SmalltalkImage methodsFor: 'image, changes names' stamp: 'nice 5/11/2009 23:33'!fullNameForImageNamed: aName	| imgDir |	imgDir := FileDirectory on: self imagePath.	^FileDirectory fileName: (imgDir fullNameFor: aName) extension: FileDirectory imageSuffix.! !!PragmaPreference methodsFor: 'value' stamp: 'ar 3/9/2009 21:30'!preferenceValue: aValue	"set the value as indicated, and invoke the change selector if appropriate"	self preferenceValue = aValue ifFalse:[		self rawValue: aValue.		self notifyInformeeOfChange].! !!Preferences class methodsFor: 'fonts' stamp: 'ar 8/6/2009 18:30'!setMenuFontTo: aFont	"rbb 2/18/2005 12:54 - How should this be changed to work	with the UIManager, if at all?"	Parameters at: #standardMenuFont put: aFont.	Smalltalk at: #PopUpMenu ifPresent:[:aClass| aClass setMenuFontTo: aFont].	TheWorldMainDockingBar updateInstances.! !!Project methodsFor: 'menu messages' stamp: 'ar 8/6/2009 19:07'!enter: returningFlag revert: revertFlag saveForRevert: saveForRevert	"Install my ChangeSet, Transcript, and scheduled views as current globals. If returningFlag is true, we will return to the project from whence the current project was entered; don't change its previousProject link in this case.	If saveForRevert is true, save the ImageSegment of the project being left.	If revertFlag is true, make stubs for the world of the project being left.	If revertWithoutAsking is true in the project being left, then always revert."	| showZoom recorderOrNil old forceRevert response seg newProcess |	(world isKindOf: StringMorph) ifTrue: [		self inform: 'This project is not all here. I will try to load a complete version.' translated.		^self loadFromServer: true	"try to get a fresh copy"	].	self isCurrentProject ifTrue: [^ self].	"Check the guards"	guards ifNotNil:		[guards := guards reject: [:obj | obj isNil].		guards do: [:obj | obj okayToEnterProject ifFalse: [^ self]]].	CurrentProject world triggerEvent: #aboutToLeaveWorld.	forceRevert := false.	CurrentProject rawParameters 		ifNil: [revertFlag ifTrue: [^ self inform: 'nothing to revert to' translated]]		ifNotNil: [saveForRevert ifFalse: [				forceRevert := CurrentProject projectParameters 								at: #revertWithoutAsking ifAbsent: [false]]].	forceRevert not & revertFlag ifTrue: [		response := (UIManager default chooseFrom: {			'Revert to saved version' translated.			'Cancel' translated.		} title: 'Are you sure you want to destroy this Project\ and revert to an older version?\\(From the parent project, click on this project''s thumbnail.)' translated withCRs) = 1.		response ifFalse: [^ self]].	revertFlag | forceRevert 		ifTrue: [seg := CurrentProject projectParameters at: #revertToMe ifAbsent: [					^ self inform: 'nothing to revert to' translated]]		ifFalse: [			CurrentProject finalExitActions.			CurrentProject makeThumbnail.			returningFlag == #specialReturn				ifTrue:					[ProjectHistory forget: CurrentProject.		"this guy is irrelevant"					Project forget: CurrentProject]				ifFalse:					[ProjectHistory remember: CurrentProject]].	(revertFlag | saveForRevert | forceRevert) ifFalse:		[(Preferences valueOfFlag: #projectsSentToDisk) ifTrue:			[self storeToMakeRoom]].	CurrentProject abortResourceLoading.	Smalltalk isMorphic ifTrue: [CurrentProject world triggerClosingScripts].	CurrentProject saveProjectPreferences.	"Update the display depth and make a thumbnail of the current project"	CurrentProject displayDepth: Display depth.	old := CurrentProject.		"for later"	"Show the project transition.	Note: The project zoom is run in the context of the old project,		so that eventual errors can be handled accordingly"	displayDepth == nil ifTrue: [displayDepth := Display depth].	self installNewDisplay: Display extent depth: displayDepth.	(showZoom := self showZoom) ifTrue: [		self displayZoom: CurrentProject parent ~~ self].	(world isMorph and: [world hasProperty: #letTheMusicPlay])		ifTrue: [world removeProperty: #letTheMusicPlay]		ifFalse: [Smalltalk at: #ScorePlayer ifPresentAndInMemory:					[:playerClass | playerClass allSubInstancesDo:						[:player | player pause]]].	returningFlag == #specialReturn ifTrue: [		old removeChangeSetIfPossible.	"keep this stuff from accumulating"		nextProject := nil	] ifFalse: [		returningFlag			ifTrue: [nextProject := CurrentProject]			ifFalse: [previousProject := CurrentProject].	].	CurrentProject saveState.	CurrentProject isolationHead == self isolationHead ifFalse:		[self invokeFrom: CurrentProject].	CurrentProject := self.	self installProjectPreferences.	ChangeSet  newChanges: changeSet.	TranscriptStream newTranscript: transcript.	Sensor flushKeyboard.	Smalltalk isMorphic ifTrue: [recorderOrNil := World pauseEventRecorder].	ProjectHistory remember: CurrentProject.	world isMorph		ifTrue:			[World := world.  "Signifies Morphic"			world install.			world transferRemoteServerFrom: old world.			"(revertFlag | saveForRevert | forceRevert) ifFalse: [				(Preferences valueOfFlag: #projectsSentToDisk) ifTrue: [					self storeSomeSegment]]."			recorderOrNil ifNotNil: [recorderOrNil resumeIn: world].			world triggerOpeningScripts]		ifFalse:			[World := nil.  "Signifies MVC"			Smalltalk at: #ScheduledControllers put: world].	saveForRevert ifTrue: [		Smalltalk garbageCollect.	"let go of pointers"		old storeSegment.		"result :=" old world isInMemory 			ifTrue: ['Can''t seem to write the project.']			ifFalse: [old projectParameters at: #revertToMe put: 					old world xxxSegment clone].				'Project written.'].			"original is for coming back in and continuing."	revertFlag | forceRevert ifTrue: [		seg clone revert].	"non-cloned one is for reverting again later"	self removeParameter: #exportState.	"Complete the enter: by launching a new process"	world isMorph ifTrue: [		self finalEnterActions.		world repairEmbeddedWorlds.		world triggerEvent: #aboutToEnterWorld.		Project spawnNewProcessAndTerminateOld: true	] ifFalse: [		SystemWindow clearTopWindow.	"break external ref to this project"		newProcess := [				ScheduledControllers resetActiveController.	"in case of walkback in #restore"			showZoom ifFalse: [ScheduledControllers restore].			ScheduledControllers searchForActiveController		] fixTemps newProcess priority: Processor userSchedulingPriority.		newProcess resume.		"lose the current process and its referenced morphs"		Processor terminateActive.	]! !!PragmaPreference methodsFor: 'value' stamp: 'ar 3/9/2009 21:29'!rawValue: aValue	"set the value as indicated, with no side effects"	provider perform: setter with: aValue! !!PreferenceExample class methodsFor: 'preferences' stamp: 'ar 8/4/2009 20:52'!booleanPref	<preference: 'Boolean Preference Example'		category: 'Examples'		description: 'A simple example for a boolean preference  (see PreferenceExample>>booleanPref)'		type: #Boolean>	^BooleanPref! !!PragmaPreference methodsFor: 'value' stamp: 'ar 3/9/2009 21:31'!preferenceValue	"Answer the current value of the preference"	^provider perform: getter! !!Preferences class methodsFor: 'dynamic preferences' stamp: 'ar 3/9/2009 21:40'!prefEvent: anEvent	"Check if this system event defines or removes a preference.	TODO: Queue the event and handle in background process. 	There is zero reason to be so eager here."	| aClass aSelector prefSymbol method aPrefSymbol aPreference |	(anEvent itemKind = SystemChangeNotifier classKind and: [anEvent isRemoved])		ifTrue:[self removePreferencesFor: anEvent item].	anEvent itemKind = SystemChangeNotifier methodKind ifTrue:[		aClass := anEvent itemClass.		aClass isMeta ifFalse:[^self]. "ignore instance methods"		aClass := aClass theNonMetaClass.		aSelector := anEvent itemSelector.		(anEvent isRemoved or:[anEvent isModified]) ifTrue:[			prefSymbol := (aClass name,'>>', aSelector) asSymbol.			self dictionaryOfPreferences removeKey: prefSymbol ifAbsent:[]].		(anEvent isAdded or:[anEvent isModified]) ifTrue:[			method := anEvent item.			method pragmas do:[:pragma|				pragma keyword == #preference:category:description:type: ifTrue:[					aPrefSymbol := (aClass name,'>>', method selector) asSymbol.					aPreference := self 						preference: pragma arguments first						category: pragma arguments second 						description: pragma arguments third						type: pragma arguments fourth.					aPreference 						provider: aClass 						getter: method selector 						setter: method selector asMutator.					self dictionaryOfPreferences at: aPrefSymbol put: aPreference]]]].! !PreferenceExample initialize!Preferences initialize!