"Change Set:		7493ToolBuilder-Morphic-ar.25ToolBuilder-Morphic-ar.25:UIManagerization. Replaces all the trivial references to PopUpMenu, SelectionMenu, CustomMenu, and FillInTheBlank.ToolBuilder-Morphic-ar.22:Fix an old bug in MorphicToolBuilder which would ignore the default size of the model being opened.ToolBuilder-Morphic-ar.23:Add separators to Morphic ToolBuilder menus.ToolBuilder-Morphic-ar.24:Morphic UI Manager requests are now vectored directly into FillInTheBlankMorph and MenuMorph instead of their MVC equivalents (FillInTheBlank and PopUpMenu). This helps decoupling MVC and Morphic a little more."!!MorphicUIManager methodsFor: 'ui requests' stamp: 'ar 8/6/2009 18:58'!chooseFrom: labelList values: valueList lines: linesArray title: aString	"Choose an item from the given list. Answer the selected item."	^MenuMorph chooseFrom: labelList values: valueList lines: linesArray title: aString! !!MorphicToolBuilder methodsFor: 'pluggable widgets' stamp: 'ar 7/28/2009 22:42'!buildPluggableWindow: aSpec	| widget children label |	aSpec layout == #proportional ifFalse:[		"This needs to be implemented - probably by adding a single pane and then the rest"		^self error: 'Not implemented'.	].	widget := PluggableSystemWindow new.	self register: widget id: aSpec name.	widget model: aSpec model.	(label := aSpec label) ifNotNil:[		label isSymbol 			ifTrue:[widget getLabelSelector: label]			ifFalse:[widget setLabel: label]].	children := aSpec children.	children isSymbol ifTrue:[		widget getChildrenSelector: children.		widget update: children.		children := #().	].	widget closeWindowSelector: aSpec closeAction.	panes := OrderedCollection new.	self buildAll: children in: widget.	widget bounds: (RealEstateAgent 		initialFrameFor: widget 		initialExtent: (aSpec extent ifNil:[widget initialExtent])		world: self currentWorld).	widget setUpdatablePanesFrom: panes.	^widget! !!MorphicUIManager methodsFor: 'ui requests' stamp: 'ar 8/4/2009 22:53'!inform: aString	"Display a message for the user to read and then dismiss"	^MenuMorph inform: aString! !!MorphicUIManager methodsFor: 'ui requests' stamp: 'ar 8/6/2009 19:00'!informUserDuring: aBlock	"Display a message above (or below if insufficient room) the cursor 	during execution of the given block.		UIManager default informUserDuring:[:bar|			#(one two three) do:[:info|				bar value: info.				(Delay forSeconds: 1) wait]]"	(MenuMorph new addTitle: '						')		informUserAt: Sensor cursorPoint during: aBlock.! !!MorphicUIManager methodsFor: 'ui requests' stamp: 'ar 8/4/2009 22:41'!confirm: queryString	"Put up a yes/no menu with caption queryString. Answer true if the 	response is yes, false if no. This is a modal question--the user must 	respond yes or no."	^MenuMorph confirm: queryString! !!MorphicUIManager methodsFor: 'ui requests' stamp: 'ar 8/4/2009 22:49'!chooseFrom: aList lines: linesArray title: aString	"Choose an item from the given list. Answer the index of the selected item."	^MenuMorph chooseFrom: aList lines: linesArray title: aString! !!MorphicUIManager methodsFor: 'ui requests' stamp: 'ar 8/4/2009 22:17'!multiLineRequest: queryString centerAt: aPoint initialAnswer: defaultAnswer answerHeight: answerHeight	"Create a multi-line instance of me whose question is queryString with	the given initial answer. Invoke it centered at the given point, and	answer the string the user accepts.  Answer nil if the user cancels.  An	empty string returned means that the ussr cleared the editing area and	then hit 'accept'.  Because multiple lines are invited, we ask that the user	use the ENTER key, or (in morphic anyway) hit the 'accept' button, to 	submit; that way, the return key can be typed to move to the next line."	^FillInTheBlankMorph 		request: queryString 		initialAnswer: defaultAnswer 		centerAt: aPoint 		inWorld: self currentWorld		onCancelReturn: nil		acceptOnCR: false! !!MorphicUIManager methodsFor: 'ui requests' stamp: 'ar 8/4/2009 22:15'!request: queryString initialAnswer: defaultAnswer 	"Create an instance of me whose question is queryString with the given 	initial answer. Invoke it centered at the given point, and answer the 	string the user accepts. Answer the empty string if the user cancels."	^FillInTheBlankMorph request: queryString initialAnswer: defaultAnswer ! !!MorphicUIManager methodsFor: 'ui requests' stamp: 'ar 8/4/2009 22:50'!confirm: aString orCancel: cancelBlock	"Put up a yes/no/cancel menu with caption aString. Answer true if  	the response is yes, false if no. If cancel is chosen, evaluate  	cancelBlock. This is a modal question--the user must respond yes or no."	^MenuMorph confirm: aString orCancel: cancelBlock! !!MorphicUIManager methodsFor: 'ui requests' stamp: 'ar 8/4/2009 22:15'!requestPassword: queryString	"Create an instance of me whose question is queryString. Invoke it centered	at the cursor, and answer the string the user accepts. Answer the empty 	string if the user cancels."	^FillInTheBlankMorph requestPassword: queryString! !!MorphicToolBuilder methodsFor: 'building' stamp: 'ar 7/30/2009 21:12'!buildPluggableMenuItem: itemSpec	| item action label menu |	item := MenuItemMorph new.	label := itemSpec label.	itemSpec checked ifTrue:[label := '<on>', label] ifFalse:[label := '<off>', label].	item contents: label.	item isEnabled: itemSpec enabled.	(action := itemSpec action) ifNotNil:[		item 			target: action receiver;			selector: action selector;			arguments: action arguments.	].	(menu := itemSpec subMenu) ifNotNil:[		item subMenu: (menu buildWith: self).	].	parentMenu ifNotNil:[parentMenu addMorphBack: item].	itemSpec separator ifTrue:[parentMenu addLine].	^item! !