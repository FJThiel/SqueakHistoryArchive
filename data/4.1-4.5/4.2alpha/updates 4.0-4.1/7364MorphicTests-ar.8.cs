"Change Set:		7364MorphicTests-ar.8MorphicTests-ar.8:Underscore removal."!!TileMorphTest methodsFor: 'testing' stamp: 'tak 12/5/2004 18:58'!testArrowAction	"self debug: #testArrowAction"	| dummy tile |	dummy := Morph new.	tile := TileMorph new setOperator: '+'.	dummy addMorph: tile.	tile arrowAction: 1.	self assert: tile codeString = '-'.	tile := TileMorph new setOperator: '<'.	dummy addMorph: tile.	tile arrowAction: 1.	"Because receiver is not tile"	self assert: tile codeString = '='.	tile := true newTileMorphRepresentative.	dummy addMorph: tile.	tile arrowAction: 1.	self assert: tile codeString = '(false)'.! !!PasteUpMorphTest methodsFor: 'tests' stamp: 'mjr 3/6/2003 11:34'!testGridToGradient	"A trivial test for checking that you can change from a grid to a  	gradient background. A recent [FIX] will make this pass."	| pum |	pum := PasteUpMorph new.	pum setStandardTexture.	"The following should fail without the fix"	self		shouldnt: [pum gradientFillColor: Color red]		raise: MessageNotUnderstood! !!TileMorphTest methodsFor: 'testing' stamp: 'tak 12/5/2004 18:58'!testAssignmentTile	"self debug: #testAssignmentTile"	| player viewer tile phrase |	player := Morph new assuredPlayer.	viewer := CategoryViewer new invisiblySetPlayer: player.	viewer  makeSetter: #(#getX #Number) event: nil from: player costume.	phrase := ActiveHand firstSubmorph.	ActiveHand removeAllMorphs.	tile := phrase submorphs second.	self assert: tile codeString = 'setX: '.	tile arrowAction: 1.	self assert: tile codeString = 'setX: self getX + '.! !!TileMorphTest methodsFor: 'testing' stamp: 'tlk 5/6/2006 16:35'!testSoundTile	"self debug: #testSoundTile"	| tile dummy |	dummy := Morph new.	tile := SoundTile new literal: 'croak'.	dummy addMorph: tile.	tile arrowAction: 1.	self assert: tile codeString = '(''horn'')'.	! !!MCPTest methodsFor: 'tests' stamp: 'dgd 2/14/2003 10:15'!testTop	"test the #top: messages and its consequences"	| morph factor newTop newBounds |	morph := Morph new.	""	factor := 10.	newTop := self defaultTop + factor.	newBounds := self defaultBounds translateBy: 0 @ factor.	""	morph top: newTop.	""	self assert: morph top = newTop;		 assert: morph bounds = newBounds! !!MorphTest methodsFor: 'testing - etoys' stamp: 'tak 1/21/2005 11:31'!testOverlapAny	"self debug: #testOverlapAny"	| p1 p2 |	p1 := Morph new assuredPlayer.	p2 := EllipseMorph new assuredPlayer.	"Same position"	p1 costume position: 0@0.	p2 costume position: 0@0.	self assert: (p1 overlapsAny: p2).	"Different position"	p1 costume position: 0@0.	p2 costume position: 500@0.	self assert: (p1 overlapsAny: p2) not.! !