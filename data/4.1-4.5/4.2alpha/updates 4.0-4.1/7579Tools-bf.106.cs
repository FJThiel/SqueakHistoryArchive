"Change Set:		7579Tools-bf.106Tools-bf.106:Fix Message Finder problem (bug #7380)Tools-bf.103:- fix UIManager typo in Browser>>recentTools-ar.104:Fixes SelectorBrowser. It had its morphicWindow method nuked but not been given the equivalent ToolBuilder build method.Tools-ar.105:Styling hooks:- Provide #aboutToStyle: interface throughout the tools (similar to #shoutAboutToStyle: but passes styler instead of view)- Use pluggableCodePaneSpec for the tools that should support syntax highlighting."!!SelectorBrowser methodsFor: 'as yet unclassified' stamp: 'bf 8/20/2009 21:58'!markMatchingClasses	"If an example is used, mark classes matching the example instance with an asterisk."	| unmarkedClassList firstPartOfSelector receiverString receiver |	self flag: #mref.	"allows for old-fashioned style"	"Only 'example' queries can be marked."	(contents asString includes: $.) ifFalse: [^ self].	unmarkedClassList := classList copy.	"Get the receiver object of the selected statement in the message list."	firstPartOfSelector := (Scanner new scanTokens: (selectorList at: selectorIndex)) second.	receiverString := (ReadStream on: (selectorList at: selectorIndex))						upToAll: firstPartOfSelector.	receiver := Compiler evaluate: receiverString.	unmarkedClassList do: [ :classAndMethod | | class |		(classAndMethod isKindOf: MethodReference) ifTrue: [			(receiver isKindOf: classAndMethod actualClass) ifTrue: [				classAndMethod stringVersion: '*', classAndMethod stringVersionDefault.			]		] ifFalse: [			class := Compiler evaluate:					((ReadStream on: classAndMethod) upToAll: firstPartOfSelector).			(receiver isKindOf: class) ifTrue: [				classList add: '*', classAndMethod.				classList remove: classAndMethod			]		].	].! !!HierarchyBrowser methodsFor: 'toolbuilder' stamp: 'ar 8/10/2009 23:28'!buildWith: builder	^builder build: (self openSystemCatEditString: '')! !!CodeHolder methodsFor: 'contents' stamp: 'ar 8/17/2009 23:13'!isModeStyleable	"determine the current mode can be styled"	^ self showingSource or: [self showingPrettyPrint]! !!Browser methodsFor: 'class list' stamp: 'bf 8/12/2009 11:12'!recent	"Let the user select from a list of recently visited classes.  11/96 stp.	 12/96 di:  use class name, not classes themselves.	 : dont fall into debugger in empty case"	| className class recentList |	recentList := RecentClasses select: [:n | Smalltalk includesKey: n].	recentList size == 0 ifTrue: [^ Beeper beep].	className := UIManager default chooseFrom: recentList values: recentList.	className == nil ifTrue: [^ self].	class := Smalltalk at: className.	self selectCategoryForClass: class.	self classListIndex: (self classList indexOf: class name)! !!SelectorBrowser methodsFor: 'as yet unclassified' stamp: 'ar 8/14/2009 21:00'!buildClassListWith: builder	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 		model: self;		list: #classList; 		getIndex: #classListIndex; 		setIndex: #classListIndex:; 		keyPress: #arrowKey:from:.	^listSpec! !!Browser methodsFor: 'code pane' stamp: 'ar 8/17/2009 23:15'!aboutToStyle: aStyler	"This is a notification that aStyler is about to re-style its text.	Set the classOrMetaClass in aStyler, so that identifiers	will be resolved correctly.	Answer true to allow styling to proceed, or false to veto the styling"	| type |		self isModeStyleable ifFalse: [^false].	type := self editSelection.	(#(newMessage editMessage editClass newClass) includes: type) ifFalse:[^false].	aStyler classOrMetaClass: (type = #editClass ifFalse:[self selectedClassOrMetaClass]).	^true! !!SelectorBrowser methodsFor: 'as yet unclassified' stamp: 'ar 8/14/2009 21:04'!buildWith: builder	"Create a Browser that lets you type part of a selector, shows a list of selectors, shows the classes of the one you chose, and spawns a full browser on it.  Answer the window	SelectorBrowser new open "	| windowSpec |	selectorIndex := classListIndex := 0.	windowSpec := 	self buildWindowWith: builder specs: {		(0@0 corner: 0.5@0.14) -> [self buildEditViewWith: builder].		(0@0.14 corner: 0.5@0.6) -> [self buildMessageListWith: builder].		(0.5@0 corner: 1@0.6) -> [self buildClassListWith: builder].		(0@0.6 corner: 1@1) -> [self buildExamplePaneWith: builder].	}.	^builder build: windowSpec! !!ChangeSorter methodsFor: 'code pane' stamp: 'ar 8/17/2009 23:14'!aboutToStyle: aStyler	"This is a notification that aStyler is about to re-style its text.	Set the classOrMetaClass in aStyler, so that identifiers	will be resolved correctly.	Answer true to allow styling to proceed, or false to veto the styling"	self isModeStyleable ifFalse: [^false].	self currentSelector ifNil: [^false].	aStyler classOrMetaClass: self selectedClassOrMetaClass.	^true! !!SelectorBrowser methodsFor: 'as yet unclassified' stamp: 'ar 8/14/2009 21:01'!buildExamplePaneWith: builder	| textSpec |	textSpec := builder pluggableTextSpec new.	textSpec 		model: self;		getText: #byExample; 		setText: #byExample:; 		selection: #contentsSelection; 		menu: #codePaneMenu:shifted:.	^textSpec! !!SelectorBrowser methodsFor: 'as yet unclassified' stamp: 'ar 8/14/2009 20:59'!buildMessageListWith: builder	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 		model: self;		list: #messageList; 		getIndex: #messageListIndex; 		setIndex: #messageListIndex:; 		menu: #selectorMenu:; 		keyPress: #messageListKey:from:.	^listSpec! !!CodeHolder methodsFor: 'contents' stamp: 'ar 8/17/2009 23:13'!aboutToStyle: aStyler	"This is a notification that aStyler is about to re-style its text.	The default is to answer false to veto the styling"	^false! !!CodeHolder methodsFor: 'toolbuilder' stamp: 'ar 8/18/2009 00:08'!buildCodePaneWith: builder	| textSpec top buttonSpec annoSpec |	self wantsOptionalButtons ifTrue:[		top := builder pluggablePanelSpec new.		top children: OrderedCollection new.		buttonSpec := self buildOptionalButtonsWith: builder.		buttonSpec frame: (0@0 corner: 1@0.12).		top children add: buttonSpec.	].	textSpec := builder pluggableCodePaneSpec new.	textSpec 		model: self;		getText: #contents; 		setText: #contents:notifying:; 		selection: #contentsSelection; 		menu: #codePaneMenu:shifted:.	self wantsAnnotationPane ifTrue:[		top ifNil:[			top := builder pluggablePanelSpec new.			top children: OrderedCollection new.		].		annoSpec := builder pluggableInputFieldSpec new.		annoSpec model: self; getText: #annotation. 		annoSpec frame: (0@0.88 corner: 1@1).		top children add: annoSpec.	].	top ifNotNil:[		textSpec frame: (0 @ (buttonSpec ifNil:[0] ifNotNil:[0.12])			corner: 1 @ (annoSpec ifNil:[1] ifNotNil:[0.88])).		top children add: textSpec.	].	^top ifNil:[textSpec]! !!Debugger methodsFor: 'accessing' stamp: 'ar 8/17/2009 23:17'!debuggerMap	^debuggerMap ifNil:		[debuggerMap := self selectedContext debuggerMap].! !!FileContentsBrowser methodsFor: 'edit pane' stamp: 'ar 8/17/2009 23:18'!aboutToStyle: aStyler	"This is a notification that aStyler is about to re-style its text.	Set the classOrMetaClass in aStyler, so that identifiers	will be resolved correctly.	Answer true to allow styling to proceed, or false to veto the styling"	self isModeStyleable ifFalse: [^false].	aStyler classOrMetaClass: self selectedClassOrMetaClass.	^true! !!MessageSet methodsFor: 'contents' stamp: 'ar 8/17/2009 23:19'!aboutToStyle: aStyler	"This is a notification that aStyler is about to re-style its text.	Set the classOrMetaClass in aStyler, so that identifiers	will be resolved correctly.	Answer true to allow styling to proceed, or false to veto the styling"		self isModeStyleable ifFalse: [^false].	aStyler classOrMetaClass: self selectedClassOrMetaClass.	^true! !!Debugger methodsFor: 'code pane' stamp: 'ar 8/17/2009 23:18'!aboutToStyle: aStyler	"This is a notification that aStyler is about to re-style its text.	Set the classOrMetaClass in aStyler, so that identifiers	will be resolved correctly.	Answer true to allow styling to proceed, or false to veto the styling"		self isModeStyleable ifFalse: [^false].	aStyler 		classOrMetaClass: self selectedClassOrMetaClass;		sourceMap: self debuggerMap.	^true! !!SelectorBrowser methodsFor: 'as yet unclassified' stamp: 'ar 8/14/2009 21:04'!buildEditViewWith: builder	| textSpec |	textSpec := builder pluggableInputFieldSpec new.	textSpec 		model: self;		getText: #contents; 		setText: #contents:notifying:; 		selection: #contentsSelection; 		menu: #codePaneMenu:shifted:.	^textSpec! !