"Change Set:		7796CollectionsTests-nice.97CollectionsTests-nice.97:Test from http://bugs.squeak.org/view.php?id=7095Assert this feature:Dictionary>>#collect: should preserve the keysCollectionsTests-nice.94:Add a few tests for #removeAllFar from complete... but better than nothingCollectionsTests-nice.95:WideCharacterSetTest from http://bugs.squeak.org/view.php?id=3574CollectionsTests-ar.96:Merging CollectionsTests-ul.94:- added StringTest >> #testFindStringStartingAt"!TestCase subclass: #WideCharacterSetTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CollectionsTests-Support'!!SetTest methodsFor: 'tests' stamp: 'nice 9/14/2009 21:08'!testRemoveAll	"Allows one to remove all elements of a collection" 		| c1 c2 s2 |	c1 := full.	c2 := c1 copy.	s2 := c2 size.		c1 removeAll.		self assert: c1 size = 0.	self assert: c2 size = s2 description: 'the copy has not been modified'.! !!WideCharacterSetTest methodsFor: 'testing' stamp: 'nice 11/19/2007 23:34'!testCreation	"By now, only creation method is newFrom:"	| cs1 wcs1 cs2 wcs2 byteString wideString |	byteString := 'aeiouy'.	wideString := 'aeiouy' copyWith: 340 asCharacter.	cs1 := CharacterSet newFrom: byteString.	wcs1 := WideCharacterSet newFrom: byteString.	self should: [wcs1 = cs1].	self should: [wcs1 size = byteString "asSet" size].		cs2 := CharacterSet newFrom: wideString.	wcs2 := WideCharacterSet newFrom: wideString.	self should: [wcs2 = cs2].	self should: [wcs2 size = wideString "asSet" size].		self should: [(byteString indexOfAnyOf: wcs1) = 1] description: 'This should used optimized byteArrayMap method'.	self should: [(byteString indexOfAnyOf: wcs2) = 1] description: 'This should used optimized byteArrayMap method'.		self should: [('bcd' indexOfAnyOf: wcs1) = 0] description: 'This should used optimized byteArrayMap method'.	self should: [('bcd' indexOfAnyOf: wcs2) = 0] description: 'This should used optimized byteArrayMap method'.! !!BagTest methodsFor: 'tests' stamp: 'nice 9/14/2009 21:05'!testRemoveAll	"Allows one to remove all elements of a collection" 		| c1 c2 s2 |	c1 := #(10 9 8 7 5 4 4 2) asBag.	c2 := c1 copy.	s2 := c2 size.		c1 removeAll.		self assert: c1 size = 0.	self assert: c2 size = s2 description: 'the copy has not been modified'.! !!DictionaryTest methodsFor: 'tests' stamp: 'nice 9/14/2009 21:07'!testRemoveAll	"Allows one to remove all elements of a collection" 		| dict1 dict2 s2 |	dict1 := Dictionary new.	dict1 at: #a put:1 ; at: #b put: 2. 	dict2 := dict1 copy.	s2 := dict2 size.		dict1 removeAll.		self assert: dict1 size = 0.	self assert: dict2 size = s2 description: 'the copy has not been modified'.! !!DictionaryTest methodsFor: 'testing' stamp: 'ar 6/13/2008 00:12'!testSelect	"Ensure that Dictionary>>select: answers a dictionary not something else"	| dict expected result |	dict := Dictionary newFromPairs:{		#first.		1.		#second.	2.		#third.		3.		#fourth.	4.		#fifth.		5.	}.	result := dict select:[:each| each odd].	expected := Dictionary newFromPairs:{		#first.		1.		#third.		3.		#fifth.		5.	}.	self assert: result = expected.! !!DictionaryTest methodsFor: 'testing' stamp: 'ar 6/13/2008 00:13'!testReject	"Ensure that Dictionary>>reject: answers a dictionary not something else"	| dict expected result |	dict := Dictionary newFromPairs:{		#first.		1.		#second.	2.		#third.		3.		#fourth.	4.		#fifth.		5.	}.	result := dict reject:[:each| each odd].	expected := Dictionary newFromPairs:{		#second.	2.		#fourth.	4.	}.	self assert: result = expected.! !!WideCharacterSetTest methodsFor: 'testing' stamp: 'nice 11/19/2007 23:36'!testAddingToCharacterSet	| cs wcs wc |	cs := CharacterSet newFrom: 'aeiouy'.	wcs := cs copy.	wc := 4452 asCharacter.		self shouldnt: [wcs add: wc] raise: Error description: 'adding a WideCharacter to an ordinary CharacterSet should turn it into a WideCharacterSet'.	self should: [wcs size = (cs size + 1)] description: 'We just added a Character, size should be increased by one'.	self shouldnt: [wcs = cs] description: 'We just added a Character, sets should not be equal'.	self shouldnt: [cs = wcs] description: 'We just added a Character, sets should not be equal'.	self should: [cs allSatisfy: [:char | wcs includes: char]] description: 'Each character of the original CharacterSet should be included in the WideCharacterSet'.	self should: [wcs hasWideCharacters] description: 'We just added a WideCharacter, so this WideCharacterSet definitely has one'.	self should: [wcs includes: wc] description: 'We just added this WideCharacter, so this WideCharacterSet should include it'.		wcs add: wc.	self should: [wcs size = (cs size + 1)] description: 'We just added a Character already included in the set, size should be unchanged'.		wcs remove: wc.	self should: [wcs size = cs size] description: 'We added then removed a Character, now size should be equal to original'.	self shouldnt: [wcs hasWideCharacters] description: 'We just removed the only WideCharacter, so this WideCharacterSet definitely has no WideCharacter'.		self should: [wcs = cs] description: 'A WideCharacterSet can be equal to an Ordinary CharacterSet'.	self should: [cs = wcs] description: 'An ordinary CharacterSet can be equal to a WideCharacterSet'.	self should: [cs hash = wcs hash] description: 'If some objects are equal, then they should have same hash code'.		! !!LinkedListTest methodsFor: 'testing' stamp: 'nice 9/14/2009 20:57'!testRemoveAll	| list2 |	list add: link1.	list add: link2.	list add: link3.	list add: link4.	list2 := list copy.	list removeAll.		self assert: list size = 0.	self assert: list2 size = 4 description: 'the copy has not been modified'! !!SortedCollectionTest methodsFor: 'basic' stamp: 'nice 9/14/2009 21:02'!testRemoveAll	"Allows one to remove all elements of a collection" 		| c1 c2 s2 |	c1 := #(10 9 8 7 5 4 4 2) asSortedCollection: [:a :b | a >= b].	c2 := c1 copy.	s2 := c2 size.		c1 removeAll.		self assert: c1 size = 0.	self assert: c2 size = s2 description: 'the copy has not been modified'.		c1 add: 13; add: 14.	self assert: (c1 first = 14 and: [c1 second = 13])  description: 'the sortBlock has been preserved'.! !!StringTest methodsFor: 'tests - finding' stamp: 'ul 9/14/2009 03:16'!testFindStringStartingAt	"Run the tests with both String's and ByteString's method"	{		"text pattern startIndex expectedResult"		#('Smalltalk' 'al' 2 3).		{ (Character value: 12345) asString, 'foo'. 'foo'. 1. 2 }.		{ (Character value: 12345) asString, 'foo'. (Character value: 12345) asString, 'foo'. 1. 1 }.		{ 'foo', (Character value: 12345) asString. (Character value: 12345) asString. 1. 4 }.		#('ababab' 'ab' 2 3).		#('abc' 'a' 2 0) } do: [ :input |			#(				(yourself yourself)				"the (yourself asWideString) pair would sometimes result 0 				(like here: 'Smalltalk' findString: 'al' asWideString startingAt: 1)				if the text is a ByteString, because of the optimized version,				but normally ByteStrings never ''contain'' WideStrings"				(asWideString yourself)				(asWideString asWideString)) do: [ :modifiers |					| text pattern startIndex expectedResult result |					text := input first perform: modifiers first.					pattern := input second perform: modifiers second.					startIndex := input third.					expectedResult := input fourth.					self assert: (result := text findString: pattern startingAt: startIndex) = expectedResult ] ]! !!DictionaryTest methodsFor: 'testing' stamp: 'ar 6/13/2008 00:14'!testCollect	"Ensure that Dictionary>>collect: answers a dictionary not something else"	| dict expected result |	dict := Dictionary newFromPairs:{		#first.		1.		#second.	2.		#third.		3.		#fourth.	4.		#fifth.		5.	}.	result := dict collect:[:each| each asWords].	expected := Dictionary newFromPairs:{		#first.		'one'.		#second.	'two'.		#third.		'three'.		#fourth.	'four'.		#fifth.		'five'.	}.	self assert: result = expected.! !!OrderedCollectionTest methodsFor: 'testsRemoving' stamp: 'nice 9/14/2009 20:57'!testRemoveAll	"Allows one to remove all elements of a collection" 		| c1 c2 s2 |	c1 := #(2 3 4 6) asOrderedCollection.	c1 addAll: (1 to: 200).	c2 := c1 copy.	s2 := c2 size.		c1 removeAll.		self assert: c1 size = 0.	self assert: c2 size = s2 description: 'the copy has not been modified'	! !