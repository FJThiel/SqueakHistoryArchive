"Change Set:		9350KernelTests-ar.136KernelTests-ar.136:Refactor ClassBuilderTest, removing separate ClassBuilderChangeClassTypeType and ClassBuilderFormatTest (now all part of ClassBuilderTest)KernelTests-nice.130:Some tests for the ExtendedNumberParserKernelTests-nice.131:Tests for reading  long numbers from http://bugs.squeak.org/view.php?id=6982KernelTests-nice.132:Change the expectations: reading some malformed number will now fail and raise an Error, not answer 0KernelTests-nice.133:Test coercion in case of ScaledDecimal arithmetic.I expect the same policy for Integer and Fraction.Rationale: (1/1) is a Fraction represented as an Integer, so we cannot really dissociate the two behaviors.KernelTests-nice.134:Add some tests for hash and = disagreement.Also for problems of non transitivity of =http://bugs.squeak.org/view.php?id=3360http://bugs.squeak.org/view.php?id=3374KernelTests-nice.135:1) Change the expectations for conversions to ScaledDecimal according to new policy.2) Add a SqNumberParser testfrom Pharo"!ClassTestCase subclass: #ClassBuilderTest	instanceVariableNames: 'baseClass subClass'	classVariableNames: ''	poolDictionaries: ''	category: 'KernelTests-Classes'!ClassTestCase subclass: #ExtendedNumberParserTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'KernelTests-Numbers'!!FloatTest methodsFor: 'testing - conversion' stamp: 'nice 3/14/2008 23:59'!testReadFromManyDigits	"A naive algorithm may interpret these representations as Infinity or NaN.	This is http://bugs.squeak.org/view.php?id=6982"		| s1 s2 |	s1 := '1' , (String new: 321 withAll: $0) , '.0e-321'.	s2 := '0.' , (String new: 320 withAll: $0) , '1e321'.	self assert: (Number readFrom: s1) = 1.	self assert: (Number readFrom: s2) = 1.! !!ScaledDecimalTest methodsFor: 'tests' stamp: 'nice 2/13/2010 23:13'!testConvertFromIntegerWithScale	"Converting an Integer with asScaledDecimal: does now honour the scale passed as message argument."	| sd |	sd := 13 asScaledDecimal: 6.	self assert: 6 = sd scale.	self assert: ('13.000000s6' = sd printString).	sd := -13 asScaledDecimal: 4.	self assert: 4 = sd scale.	self assert: ('-13.0000s4' = sd printString).	sd := 130000000013 asScaledDecimal: 3.	self assert: 3 = sd scale.	self assert: ('130000000013.000s3' = sd printString).	sd := -130000000013 asScaledDecimal: 1.	self assert: 1 = sd scale.	self assert: ('-130000000013.0s1' = sd printString)! !!ExtendedNumberParserTest methodsFor: 'testing' stamp: 'nice 2/13/2010 02:23'!testInvalidExponent	"The leading number is returned, the invalid part is ignored"		self assert: (ExtendedNumberParser parse: '1e') = 1.	self assert: (ExtendedNumberParser parse: '1eZ') = 1.	self assert: (ExtendedNumberParser parse: '+1eW') = 1.	self assert: (ExtendedNumberParser parse: '-1eX') = -1.		self assert: (ExtendedNumberParser parse: '2e-') = 2.	self assert: (ExtendedNumberParser parse: '2e--1') = 2.	self assert: (ExtendedNumberParser parse: '2e-+1') = 2.	self assert: (ExtendedNumberParser parse: '2e-Z') = 2.	self assert: (ExtendedNumberParser parse: '+2e-W') = 2.	self assert: (ExtendedNumberParser parse: '-2e-X') = -2.		self assert: (ExtendedNumberParser parse: '3e+') = 3.	self assert: (ExtendedNumberParser parse: '3e+-') = 3.	self assert: (ExtendedNumberParser parse: '3e+-1') = 3.	self assert: (ExtendedNumberParser parse: '+3e+W') = 3.	self assert: (ExtendedNumberParser parse: '-3e+Z') = -3.! !!ClassBuilderTest methodsFor: 'testing - reshape' stamp: 'abc 2/12/2010 12:33'!testDuplicateClassVariableError	baseClass := Object subclass: self baseClassName		instanceVariableNames: ''		classVariableNames: 'TestVar'		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'.	self should:[		subClass := baseClass subclass: self subClassName			instanceVariableNames: ''			classVariableNames: 'TestVar'			poolDictionaries: ''			category: 'Kernel-Tests-ClassBuilder'	] raise: DuplicateVariableError.	[subClass := baseClass subclass: self subClassName			instanceVariableNames: ''			classVariableNames: 'TestVar'			poolDictionaries: ''			category: 'Kernel-Tests-ClassBuilder'	] on: DuplicateVariableError do:[:ex|		self assert: ex superclass == baseClass.		self assert: ex variable = 'TestVar'.		ex resume.	].	self shouldnt:[		baseClass := Object subclass: self baseClassName			instanceVariableNames: ''			classVariableNames: ''			poolDictionaries: ''			category: 'Kernel-Tests-ClassBuilder'.	] raise: Error.	self should:[		baseClass := Object subclass: self baseClassName			instanceVariableNames: ''			classVariableNames: 'TestVar'			poolDictionaries: ''			category: 'Kernel-Tests-ClassBuilder'.	] raise: DuplicateVariableError.	[baseClass := Object subclass: self baseClassName			instanceVariableNames: ''			classVariableNames: 'TestVar'			poolDictionaries: ''			category: 'Kernel-Tests-ClassBuilder'.	] on: DuplicateVariableError do:[:ex|		self assert: ex superclass == baseClass.		self assert: ex variable = 'TestVar'.		ex resume.	].! !!ClassBuilderTest methodsFor: 'utilities' stamp: 'ar 1/4/2004 20:16'!subClassName	^#DummyClassBuilderFormatTestSubClass! !!ClassBuilderTest methodsFor: 'testing - format' stamp: 'ar 1/4/2004 20:20'!testWeakSubclass	"Ensure that the invariants for superclass/subclass format are preserved"	baseClass := Object weakSubclass: self baseClassName		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'.	[	"pointer classes"	self shouldnt:[self makeNormalSubclassOf: baseClass] raise: Error.	self assert: (subClass isPointers).	self assert: (subClass isVariable).	self assert: (subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	self shouldnt:[self makeIVarsSubclassOf: baseClass] raise: Error.	self assert: (subClass isPointers).	self assert: (subClass isVariable).	self assert: (subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	self shouldnt:[self makeVariableSubclassOf: baseClass] raise: Error.	self assert: (subClass isPointers).	self assert: (subClass isVariable).	self deny: (subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	self shouldnt:[self makeWeakSubclassOf: baseClass] raise: Error.	self assert: (subClass isPointers).	self assert: (subClass isVariable).	self assert: (subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	"bit classes"	self should:[self makeByteVariableSubclassOf: baseClass] raise: Error.	self should:[self makeWordVariableSubclassOf: baseClass] raise: Error.	] ensure:[self cleanup].! !!ClassBuilderTest methodsFor: 'testing - format' stamp: 'ar 1/4/2004 20:21'!testSubclassWithInstanceVariables	"Ensure that the invariants for superclass/subclass format are preserved"	baseClass := Object subclass: self baseClassName		instanceVariableNames: 'var1 var2'		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'.	[	self shouldnt:[self makeNormalSubclassOf: baseClass] raise: Error.	self assert: (subClass isPointers).	self deny: (subClass isVariable).	self deny: (subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	"pointer classes"	self shouldnt:[self makeIVarsSubclassOf: baseClass] raise: Error.	self assert: (subClass isPointers).	self deny: (subClass isVariable).	self deny: (subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	self shouldnt:[self makeVariableSubclassOf: baseClass] raise: Error.	self assert: (subClass isPointers).	self assert: (subClass isVariable).	self deny: (subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	self shouldnt:[self makeWeakSubclassOf: baseClass] raise: Error.	self assert: (subClass isPointers).	self assert: (subClass isVariable).	self assert: (subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	"bit classes"	self should:[self makeByteVariableSubclassOf: baseClass] raise: Error.	self should:[self makeWordVariableSubclassOf: baseClass] raise: Error.	] ensure:[self cleanup].! !!ExtendedNumberParserTest methodsFor: 'testing' stamp: 'nice 2/13/2010 02:24'!testInvalidScale	"The leading number is returned, the invalid part is ignored"		self assert: (ExtendedNumberParser parse: '1s') = 1.	self assert: (ExtendedNumberParser parse: '1sZ') = 1.	self assert: (ExtendedNumberParser parse: '+1sW') = 1.	self assert: (ExtendedNumberParser parse: '-1sX') = -1.		self assert: (ExtendedNumberParser parse: '2s-') = 2.	self assert: (ExtendedNumberParser parse: '2s--1') = 2.	self assert: (ExtendedNumberParser parse: '2s-+1') = 2.	self assert: (ExtendedNumberParser parse: '2s-1') = 2.	self assert: (ExtendedNumberParser parse: '+2s-2') = 2.	self assert: (ExtendedNumberParser parse: '-2s-3') = -2.		self assert: (ExtendedNumberParser parse: '3s+') = 3.	self assert: (ExtendedNumberParser parse: '3s+-') = 3.	self assert: (ExtendedNumberParser parse: '3s+-1') = 3.	self assert: (ExtendedNumberParser parse: '+3s+2') = 3.	self assert: (ExtendedNumberParser parse: '-3s+3') = -3.! !!ExtendedNumberParserTest methodsFor: 'testing' stamp: 'nice 2/13/2010 02:26'!testPositive	"A leading + sign is allowed"		self assert: (ExtendedNumberParser parse: '+1') = 1.	self assert: (ExtendedNumberParser parse: '+22') = 22.	self assert: (ExtendedNumberParser parse: '+2r11') = 3.	self assert: (ExtendedNumberParser parse: '+2r+101') = 5.	self assert: (ExtendedNumberParser parse: '+2r-101') = -5.	self assert: (ExtendedNumberParser parse: '-2r+101') = -5.		self assert: (ExtendedNumberParser parse: '+1.') isFloat.	self assert: (ExtendedNumberParser parse: '+1.') = 1.	self assert: (ExtendedNumberParser parse: '+21.') = 21.	self assert: (ExtendedNumberParser parse: '+3r21.') = 7.	self assert: (ExtendedNumberParser parse: '+3r+201.') = 19.	self assert: (ExtendedNumberParser parse: '+3r-201.') = -19.	self assert: (ExtendedNumberParser parse: '-3r+201.') = -19.! !!ScaledDecimalTest methodsFor: 'tests' stamp: 'nice 2/13/2010 23:12'!testConvertFromInteger	"Converting an Integer with asScaledDecimal use strictly necessary number of decimal places: 0."	| sd |	sd := 13 asScaledDecimal.	self assert: 0 = sd scale.	self assert: ('13s0' = sd printString).	sd := -13 asScaledDecimal.	self assert: 0 = sd scale.	self assert: ('-13s0' = sd printString).	sd := 130000000013 asScaledDecimal.	self assert: 0 = sd scale.	self assert: ('130000000013s0' = sd printString).	sd := -130000000013 asScaledDecimal.	self assert: 0 = sd scale.	self assert: ('-130000000013s0' = sd printString)! !!ClassBuilderTest methodsFor: 'running' stamp: 'abc 2/12/2010 11:24'!tearDown	self cleanup.! !!ClassBuilderTest methodsFor: 'utilities' stamp: 'ar 1/4/2004 20:16'!makeWordVariableSubclassOf: aClass	subClass := aClass variableWordSubclass: self subClassName		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'! !!ClassBuilderTest methodsFor: 'utilities' stamp: 'ar 1/4/2004 20:16'!makeWeakSubclassOf: aClass	subClass := aClass weakSubclass: self subClassName		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'! !!ClassBuilderTest methodsFor: 'utilities' stamp: 'ar 1/4/2004 20:15'!makeVariableSubclassOf: aClass	subClass := aClass variableSubclass: self subClassName		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'.! !!ClassBuilderTest methodsFor: 'utilities' stamp: 'ar 1/4/2004 20:15'!makeNormalSubclassOf: aClass	subClass := aClass subclass: self subClassName		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'! !!ClassBuilderTest methodsFor: 'testing - reshape' stamp: 'abc 2/12/2010 12:32'!testDuplicateInstanceVariableError	baseClass := Object subclass: self baseClassName		instanceVariableNames: 'var'		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'.	self should:[		subClass := baseClass subclass: self subClassName			instanceVariableNames: 'var'			classVariableNames: ''			poolDictionaries: ''			category: 'Kernel-Tests-ClassBuilder'	] raise: DuplicateVariableError.	[subClass := baseClass subclass: self subClassName			instanceVariableNames: 'var'			classVariableNames: ''			poolDictionaries: ''			category: 'Kernel-Tests-ClassBuilder'	] on: DuplicateVariableError do:[:ex|		self assert: ex superclass == baseClass.		self assert: ex variable = 'var'.		ex resume.	].	self shouldnt:[		baseClass := Object subclass: self baseClassName			instanceVariableNames: ''			classVariableNames: ''			poolDictionaries: ''			category: 'Kernel-Tests-ClassBuilder'.	] raise: Error.	self should:[		baseClass := Object subclass: self baseClassName			instanceVariableNames: 'var'			classVariableNames: ''			poolDictionaries: ''			category: 'Kernel-Tests-ClassBuilder'.	] raise: DuplicateVariableError.	[baseClass := Object subclass: self baseClassName			instanceVariableNames: 'var'			classVariableNames: ''			poolDictionaries: ''			category: 'Kernel-Tests-ClassBuilder'.	] on: DuplicateVariableError do:[:ex|		self assert: ex superclass == baseClass.		self assert: ex variable = 'var'.		ex resume.	].! !!ExtendedNumberParserTest methodsFor: 'testing' stamp: 'nice 2/13/2010 02:25'!testFractionPartWithoutIntegerPart	"The integer part before the decimal is optional"		self assert: (ExtendedNumberParser parse: '.5') = (1/2).	self assert: (ExtendedNumberParser parse: '.5') isFloat.		self assert: (ExtendedNumberParser parse: '.3e2') = 30.	self assert: (ExtendedNumberParser parse: '.3e2') isFloat.		self assert: (ExtendedNumberParser parse: '-.4e2') = -40.	self assert: (ExtendedNumberParser parse: '-.4e2') isFloat.		self assert: (ExtendedNumberParser parse: '+.5e2') = 50.	self assert: (ExtendedNumberParser parse: '+.5e2') isFloat.	self assert: (ExtendedNumberParser parse: '+.6e+2') = 60.	self assert: (ExtendedNumberParser parse: '+.6e+2') isFloat.	self assert: (ExtendedNumberParser parse: '-.7e+2') = -70.	self assert: (ExtendedNumberParser parse: '-.7e+2') isFloat.		self assert: (ExtendedNumberParser parse: '+2r.1e-2') = (1/8).	self assert: (ExtendedNumberParser parse: '+2r.1e-2') isFloat.		self assert: (ExtendedNumberParser parse: '-4r.1e-2') = (-1/64).	self assert: (ExtendedNumberParser parse: '-4r.1e-2') isFloat.! !!FloatTest methodsFor: 'testing compare' stamp: 'nice 5/30/2008 01:23'!testComparison		"test equality when Float conversion loose bits"	| a b c |	a := 16r1FFFFFFFFFFFFF1.	b := 16r1FFFFFFFFFFFFF3.	c := a asFloat.	self assert: ((a = c) & (b = c)) ==> (a = b).		"Test equality when Float conversion exact"	self assert: 16r1FFFFFFFFFFFFF = 16r1FFFFFFFFFFFFF asFloat.	self assert: 16r1FFFFFFFFFFFFF = 16r1FFFFFFFFFFFFF asFloat asInteger.		"Test inequality when Float conversion loose bits"	self assert: (((1 bitShift: 54)+1)/(1 bitShift: 54)) > 1.	self assert: (((1 bitShift: 54)+1)/(1 bitShift: 54)) > 1.0.		self assert: (((1 bitShift: 54)-1)/(1 bitShift: 54)) < 1.	self assert: (((1 bitShift: 54)-1)/(1 bitShift: 54)) < 1.0.		"Test exact vs inexact arithmetic"	(1 to: 100) do: [:i |		i isPowerOfTwo			ifTrue: [self assert: (1/i) = (1/i) asFloat]			ifFalse: [self deny: (1/i) = (1/i) asFloat]].		"Test overflow (compare to infinity)"	a := (11 raisedTo: 400) / 2.	b := (13 raisedTo: 400) / 2.	c := a asFloat.	self assert: ((a = c) & (b = c)) ==> (a = b).		"every integer is smaller than infinity"	self assert: a < Float infinity.	self assert: a > Float infinity negated.		"Test underflow"	self deny: 1 / (11 raisedTo: 400) = 0.	self deny: 1 / (11 raisedTo: 400) = 0.0.		"Test hash code"	self assert:		((Set new: 3) add: 3; add: 3.0; size) =		((Set new: 4) add: 3; add: 3.0; size).! !!ClassBuilderTest methodsFor: 'testing - format' stamp: 'ar 7/13/2009 21:18'!testChangeToVariableSubclass	"Ensure that the invariants for superclass/subclass format are preserved"	baseClass := Object subclass: self baseClassName		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'.	[		self shouldnt:[baseClass := Object variableSubclass: self baseClassName			instanceVariableNames: ''			classVariableNames: ''			poolDictionaries: ''			category: 'Kernel-Tests-ClassBuilder'] raise: Error.	] ensure:[self cleanup].! !!ClassBuilderTest methodsFor: 'testing - format' stamp: 'ar 1/4/2004 20:20'!testWordVariableSubclass	"Ensure that the invariants for superclass/subclass format are preserved"	baseClass := Object variableWordSubclass: self baseClassName		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'.	[	self shouldnt:[self makeNormalSubclassOf: baseClass] raise: Error.	self deny: (subClass isPointers).	self assert: (subClass isVariable).	self deny: (subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	"pointer classes"	self should:[self makeIVarsSubclassOf: baseClass] raise: Error.	self should:[self makeVariableSubclassOf: baseClass] raise: Error.	self should:[self makeWeakSubclassOf: baseClass] raise: Error.	"bit classes"	self should:[self makeByteVariableSubclassOf: baseClass] raise: Error.	self shouldnt:[self makeWordVariableSubclassOf: baseClass] raise: Error.	self deny: (subClass isPointers).	self assert: (subClass isVariable).	self deny: (subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	] ensure:[self cleanup].! !!ExtendedNumberParserTest methodsFor: 'testing' stamp: 'nice 2/13/2010 02:27'!testPositiveExponent	"A leading + sign is allowed in exponent"		self assert: (ExtendedNumberParser parse: '1e+2') = 100.	self assert: (ExtendedNumberParser parse: '1e+2') isInteger.	self assert: (ExtendedNumberParser parse: '-1e+2') = -100.	self assert: (ExtendedNumberParser parse: '1.e+2') = 100.	self assert: (ExtendedNumberParser parse: '1.e+2') isFloat.	self assert: (ExtendedNumberParser parse: '-1.0e+2') = -100.! !!ClassBuilderTest methodsFor: 'testing - format' stamp: 'ar 1/4/2004 20:20'!testSubclass	"Ensure that the invariants for superclass/subclass format are preserved"	baseClass := Object subclass: self baseClassName		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'.	[	self shouldnt:[self makeNormalSubclassOf: baseClass] raise: Error.	self assert: (subClass isPointers).	self deny: (subClass isVariable).	self deny: (subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	"pointer classes"	self shouldnt:[self makeIVarsSubclassOf: baseClass] raise: Error.	self assert: (subClass isPointers).	self deny: (subClass isVariable).	self deny: (subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	self shouldnt:[self makeVariableSubclassOf: baseClass] raise: Error.	self assert: (subClass isPointers).	self assert:(subClass isVariable).	self deny: (subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	self shouldnt:[self makeWeakSubclassOf: baseClass] raise: Error.	self assert: (subClass isPointers).	self assert:(subClass isVariable).	self assert:(subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	"bit classes"	self shouldnt:[self makeByteVariableSubclassOf: baseClass] raise: Error.	self deny: (subClass isPointers).	self assert: (subClass isVariable).	self deny: (subClass isWeak).	self assert: (subClass isBytes).	subClass removeFromSystem.	self shouldnt:[self makeWordVariableSubclassOf: baseClass] raise: Error.	self deny: (subClass isPointers).	self assert: (subClass isVariable).	self deny: (subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	] ensure:[self cleanup].! !!ClassBuilderTest methodsFor: 'utilities' stamp: 'ar 1/4/2004 20:15'!baseClassName	^#DummyClassBuilderFormatTestSuperClass! !!ClassBuilderTest methodsFor: 'testing - format' stamp: 'ar 1/4/2004 20:21'!testByteVariableSubclass	"Ensure that the invariants for superclass/subclass format are preserved"	baseClass := Object variableByteSubclass: self baseClassName		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'.	[	self shouldnt:[self makeNormalSubclassOf: baseClass] raise: Error.	self deny: (subClass isPointers).	self assert: (subClass isVariable).	self deny: (subClass isWeak).	self assert: (subClass isBytes).	subClass removeFromSystem.	"pointer classes"	self should:[self makeIVarsSubclassOf: baseClass] raise: Error.	self should:[self makeVariableSubclassOf: baseClass] raise: Error.	self should:[self makeWeakSubclassOf: baseClass] raise: Error.	"bit classes"	self shouldnt:[self makeByteVariableSubclassOf: baseClass] raise: Error.	self deny: (subClass isPointers).	self assert: (subClass isVariable).	self deny: (subClass isWeak).	self assert: (subClass isBytes).	subClass removeFromSystem.	self should:[self makeWordVariableSubclassOf: baseClass] raise: Error.	] ensure:[self cleanup].! !!ClassBuilderTest methodsFor: 'utilities' stamp: 'ar 1/4/2004 20:15'!makeIVarsSubclassOf: aClass	subClass := aClass subclass: self subClassName		instanceVariableNames: 'var3 var4'		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'! !!ClassBuilderTest methodsFor: 'testing - reshape' stamp: 'abc 2/12/2010 12:32'!testMoveVarFromSuperToSubclass	| baseInst subInst |	baseClass := Object subclass: self baseClassName		instanceVariableNames: 'var'		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'.	baseClass compile: 'superGet ^var'.	baseClass compile: 'superSet: v var := v'.	subClass := baseClass subclass: self subClassName		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'.	subClass compile: 'subGet ^var'.	subClass compile: 'subSet: v var := v'.	self assert:[baseClass instSize = 1].	self assert:[subClass instSize = 1].	baseInst := baseClass new.	subInst := subClass new.	baseInst instVarAt: 1 put: 42.	subInst instVarAt: 1 put: 123.	self assert: (baseInst instVarAt: 1) = 42.	self assert: (subInst instVarAt: 1) = 123.	self assert: (subInst subGet) = 123.	[subClass := baseClass subclass: self subClassName			instanceVariableNames: 'var'			classVariableNames: ''			poolDictionaries: ''			category: 'Kernel-Tests-ClassBuilder'	] on: DuplicateVariableError do:[:ex| ex resume].	self assert:[baseClass instSize = 1].	self assert:[subClass instSize = 2].	self assert: (baseInst instVarAt: 1) = 42.	"the assumption below is that for duplicate variables the values get duplicated too.	this isn't strictly necessary; what we really need is that the old var doesn't get 	nuked but it has some advantages when moving vars up the hierarchy"	self assert: (subInst instVarAt: 1) = 123.	self assert: (subInst instVarAt: 2) = 123.	self assert: (subInst superGet) = 123.	self assert: (subInst subGet) = 123.	"the assumption below is that the subclass binds to the local scope not	the outer one, which is in line with common name space approaches."	subInst superSet: 666.	subInst subSet: 321.	self assert: (subInst instVarAt: 1) = 666.	self assert: (subInst instVarAt: 2) = 321.	self assert: (subInst superGet) = 666.	self assert: (subInst subGet) = 321.	baseClass removeSelector: #superGet.	baseClass removeSelector: #superSet:.	baseClass := Object subclass: self baseClassName		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'.	self assert:[baseClass instSize = 0].	self assert:[subClass instSize = 1].	self assert: (subInst instVarAt: 1) = 321.	self assert: (subInst subGet) = 321.! !!ScaledDecimalTest methodsFor: 'tests' stamp: 'nice 5/16/2009 23:48'!testCoercion	#( #* #+ #- #/) do: [:op |		self assert: (1.0s1 perform: op with: 2) class = ScaledDecimal.		self assert: (1.0s1 perform: op with: 1/2) class = ScaledDecimal.		self deny: (1.0s1 perform: op with: 1.0) class = ScaledDecimal.				self assert: (1 perform: op with: 2.0s1) class = ScaledDecimal.		self assert: (1/2 perform: op with: 2.0s1) class = ScaledDecimal.		self deny: (1.0 perform: op with: 1.0s1) class = ScaledDecimal]! !!ExtendedNumberParserTest methodsFor: 'testing' stamp: 'nice 2/13/2010 02:25'!testIntegerPartWithoutFraction	"The fraction part after the decimal is optional"		self assert: (ExtendedNumberParser parse: '1.') = 1.	self assert: (ExtendedNumberParser parse: '1.') isFloat.		self assert: (ExtendedNumberParser parse: '3.e2') = 300.	self assert: (ExtendedNumberParser parse: '3.e2') isFloat.		self assert: (ExtendedNumberParser parse: '-4.e2') = -400.	self assert: (ExtendedNumberParser parse: '-4.e2') isFloat.		self assert: (ExtendedNumberParser parse: '+5.e2') = 500.	self assert: (ExtendedNumberParser parse: '+5.e2') isFloat.	self assert: (ExtendedNumberParser parse: '+6.e+2') = 600.	self assert: (ExtendedNumberParser parse: '+6.e+2') isFloat.	self assert: (ExtendedNumberParser parse: '-7.e+2') = -700.	self assert: (ExtendedNumberParser parse: '-7.e+2') isFloat.		self assert: (ExtendedNumberParser parse: '+2r1.e-2') = (1/4).	self assert: (ExtendedNumberParser parse: '+2r1.e-2') isFloat.		self assert: (ExtendedNumberParser parse: '-4r1.e-2') = (-1/16).	self assert: (ExtendedNumberParser parse: '-4r1.e-2') isFloat.! !!FloatTest methodsFor: 'testing' stamp: 'nice 2/13/2010 04:15'!testSetOfFloat	"Classical disagreement between hash and = did lead to a bug.	This is a non regression test from http://bugs.squeak.org/view.php?id=3360"	| size3 size4 |	size3 := (Set new: 3) add: 3; add: 3.0; size.	size4 := (Set new: 4) add: 3; add: 3.0; size.	self assert: size3 = size4 description: 'The size of a Set should not depend on its capacity.'! !!IntegerTest methodsFor: 'tests - instance creation' stamp: 'nice 2/13/2010 03:11'!testIntegerReadFrom	self assert: (Integer readFrom: '123' readStream base: 10) = 123.	self assert: (Integer readFrom: '-123' readStream base: 10) = -123.	self should: [Integer readFrom: 'abc' readStream base: 10] raise: Error.	self should: [Integer readFrom: 'D12' readStream base: 10] raise: Error.	self assert: (Integer readFrom: 'abc' readStream ifFail: [0]) = 0.	self assert: (Integer readFrom: 'D12' readStream ifFail: [0]) = 0.	self assert: (Integer readFrom: '1two3' readStream base: 10) = 1.! !!ClassBuilderTest methodsFor: 'utilities' stamp: 'ar 1/4/2004 20:15'!makeByteVariableSubclassOf: aClass	subClass := aClass variableByteSubclass: self subClassName		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'! !!ClassBuilderTest methodsFor: 'utilities' stamp: 'ar 1/4/2004 20:15'!cleanup	subClass ifNotNil:[subClass removeFromSystem].	baseClass ifNotNil:[baseClass removeFromSystem].! !!SmallIntegerTest methodsFor: 'testing - printing' stamp: 'al 7/21/2008 21:48'!testPrintString	self assert: 1 printString  = '1'.	self assert: -1 printString  = '-1'.	self assert: SmallInteger minVal printString  = '-1073741824'.	self assert: SmallInteger maxVal printString  = '1073741823'.	self assert: 12345 printString  = '12345'.	self assert: -54321 printString  = '-54321'.	self assert: 0 decimalDigitLength = 1.	self assert: 4 decimalDigitLength = 1.	self assert: 12 decimalDigitLength = 2.	self assert: 123 decimalDigitLength = 3.	self assert: 1234 decimalDigitLength = 4.	self assert: 56789 decimalDigitLength = 5.	self assert: 657483 decimalDigitLength = 6.	self assert: 6571483 decimalDigitLength = 7.	self assert: 65174383 decimalDigitLength = 8.	self assert: 625744831 decimalDigitLength = 9.	self assert: 1000001111 decimalDigitLength = 10.	self assert: SmallInteger maxVal decimalDigitLength = 10.! !!ScaledDecimalTest methodsFor: 'tests' stamp: 'nice 2/13/2010 23:14'!testConvertFromFractionWithScale	| sd |	sd := (13 / 11) asScaledDecimal: 6.	self assert: ScaledDecimal == sd class.	self assert: ('1.181818s6' = sd printString).	self assert: 6 == sd scale! !!ClassBuilderTest methodsFor: 'testing - reshape' stamp: 'abc 2/12/2010 12:32'!testMoveVarFromSubToSuperclass	| baseInst subInst |	baseClass := Object subclass: self baseClassName		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'.	subClass := baseClass subclass: self subClassName		instanceVariableNames: 'var'		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'.	subClass compile: 'subGet ^var'.	subClass compile: 'subSet: v var := v'.	self assert:[baseClass instSize = 0].	self assert:[subClass instSize = 1].	baseInst := baseClass new.	subInst := subClass new.	subInst instVarAt: 1 put: 123.	self assert: (subInst instVarAt: 1) = 123.	self assert: (subInst subGet) = 123.	[baseClass := Object subclass: self baseClassName		instanceVariableNames: 'var'		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'.	] on: DuplicateVariableError do:[:ex| ex resume].	baseClass compile: 'superGet ^var'.	baseClass compile: 'superSet: v var := v'.	self assert:[baseClass instSize = 1].	self assert:[subClass instSize = 2].	"the assumption here is that an existing value is propagated up"	self assert: (baseInst instVarAt: 1) = nil.	self assert: (subInst instVarAt: 1) = 123.	self assert: (subInst instVarAt: 2) = 123.	"the assumption below is that the subclass binds to the local scope not	the outer one, which is in line with common name space approaches."	subInst superSet: 666.	subInst subSet: 321.	self assert: (subInst instVarAt: 1) = 666.	self assert: (subInst instVarAt: 2) = 321.	self assert: (subInst superGet) = 666.	self assert: (subInst subGet) = 321.	subClass := baseClass subclass: self subClassName		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'.	self assert:[baseClass instSize = 1].	self assert:[subClass instSize = 1].	"the assumption here is that the current (subclass) value is propagated up"	self assert: (subInst instVarAt: 1) = 321.	self assert: (subInst subGet) = 321.! !!ExtendedNumberParserTest methodsFor: 'testing' stamp: 'nice 2/13/2010 02:08'!testInvalidRadix	"The leading number is returned, the invalid part is ignored"		self assert: (ExtendedNumberParser parse: '1r') = 1.	self assert: (ExtendedNumberParser parse: '+1r') = 1.	self assert: (ExtendedNumberParser parse: '-1r') = -1.	self assert: (ExtendedNumberParser parse: '-1r+') = -1.	self assert: (ExtendedNumberParser parse: '-1r-') = -1.		self assert: (ExtendedNumberParser parse: '-2r.') = -2.	self assert: (ExtendedNumberParser parse: '-2r-.') = -2.	self assert: (ExtendedNumberParser parse: '+2r-.') = 2.		self assert: (ExtendedNumberParser parse: '+2r3.') = 2.	self assert: (ExtendedNumberParser parse: '+2r.3') = 2.	self assert: (ExtendedNumberParser parse: '+2r-.3') = 2.! !!ScaledDecimalTest methodsFor: 'tests' stamp: 'nice 2/13/2010 23:21'!testConvertFromFraction	"Converting a Fractionwith asScaledDecimal use strictly necessary number of decimal places when possible."		| defaultNumberOfDecimals |	0 to: 11 do: [:pow2 |		0 to: 11 do: [:pow5 |			| fraction sd sd2 |			fraction := 13 / (2 raisedTo: pow2) / (5 raisedTo: pow5).			sd := fraction asScaledDecimal.			self assert: sd scale = (pow2 max: pow5).			sd2 := ScaledDecimal readFrom: sd printString.			self assert: sd = sd2]].		defaultNumberOfDecimals := (1/3) asScaledDecimal scale.	#(6 7 9 11 12 13 14 17 18 19 21 22 23 24) do: [:den |		| sd sd2 |		sd := (1/den) asScaledDecimal.		self assert: sd scale = defaultNumberOfDecimals.		sd2 := ScaledDecimal readFrom: sd printString.		self deny: sd = sd2		] ! !!ClassBuilderTest methodsFor: 'testing - format' stamp: 'ar 1/4/2004 20:20'!testVariableSubclass	"Ensure that the invariants for superclass/subclass format are preserved"	baseClass := Object variableSubclass: self baseClassName		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Kernel-Tests-ClassBuilder'.	[	"pointer classes"	self shouldnt:[self makeNormalSubclassOf: baseClass] raise: Error.	self assert: (subClass isPointers).	self assert: (subClass isVariable).	self deny: (subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	self shouldnt:[self makeIVarsSubclassOf: baseClass] raise: Error.	self assert: (subClass isPointers).	self assert: (subClass isVariable).	self deny: (subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	self shouldnt:[self makeVariableSubclassOf: baseClass] raise: Error.	self assert: (subClass isPointers).	self assert: (subClass isVariable).	self deny: (subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	self shouldnt:[self makeWeakSubclassOf: baseClass] raise: Error.	self assert: (subClass isPointers).	self assert: (subClass isVariable).	self assert: (subClass isWeak).	self deny: (subClass isBytes).	subClass removeFromSystem.	"bit classes"	self should:[self makeByteVariableSubclassOf: baseClass] raise: Error.	self should:[self makeWordVariableSubclassOf: baseClass] raise: Error.	] ensure:[self cleanup].! !!SqNumberParserTest methodsFor: 'tests - fail' stamp: 'NikoSchwarz 10/23/2009 12:39'!testFail	"Verify that the value of a failblock is returned."	self assert: (SqNumberParser parse: 'blablabla' onError: [42]) equals: 42! !ClassBuilderFormatTests removeSelector: #testChangeToVariableSubclass!ClassBuilderFormatTests removeSelector: #testWordVariableSubclass!ClassBuilderChangeClassTypeTest removeSelector: #baseClassName!ClassBuilderFormatTests removeSelector: #testSubclass!ClassBuilderFormatTests removeSelector: #baseClassName!ClassBuilderFormatTests removeSelector: #testByteVariableSubclass!ClassBuilderFormatTests removeSelector: #makeIVarsSubclassOf:!ClassBuilderChangeClassTypeTest removeSelector: #cleanup!ClassBuilderFormatTests removeSelector: #makeByteVariableSubclassOf:!Smalltalk removeClassNamed: #ClassBuilderChangeClassTypeTest!ClassBuilderFormatTests removeSelector: #cleanup!ClassBuilderFormatTests removeSelector: #testVariableSubclass!ClassBuilderFormatTests removeSelector: #testWeakSubclass!ClassBuilderFormatTests removeSelector: #subClassName!ClassBuilderFormatTests removeSelector: #testSubclassWithInstanceVariables!Smalltalk removeClassNamed: #ClassBuilderFormatTests!ClassBuilderFormatTests removeSelector: #makeWordVariableSubclassOf:!ClassBuilderFormatTests removeSelector: #makeWeakSubclassOf:!ClassBuilderFormatTests removeSelector: #makeVariableSubclassOf:!ClassBuilderFormatTests removeSelector: #makeNormalSubclassOf:!