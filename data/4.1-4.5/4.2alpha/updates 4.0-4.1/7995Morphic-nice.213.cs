"Change Set:		7995Morphic-nice.213Morphic-nice.213:Track selectors usage, use #includesSelector: where dueMorphic-nice.212:use #fasterKeys"!!StandardScriptingSystem class methodsFor: 'utilities' stamp: 'nice 10/19/2009 22:28'!removeUnreferencedPlayers	"Remove existing but unreferenced player references"	"StandardScriptingSystem removeUnreferencedPlayers"	References fasterKeys do: 		[:key | (References at: key) costume pasteUpMorph			ifNil: [References removeKey: key]].! !!StandardScriptingSystem methodsFor: 'help dictionary' stamp: 'nice 10/20/2009 21:03'!initializeHelpStrings	"Initialize the data structure that determines, for the etoy system, help messages for various scripting elements.  The structure is built up by letting every Morph subclass contribute elements simply by implementing method #helpContributions.  Consult implementors of #helpContributions for examples of how this goes."	"ScriptingSystem initializeHelpStrings"	| aDictionary |	aDictionary := IdentityDictionary new.  	"For safety, the new copy is built up in this temp first, so that if an error occurs during the creation of the structure, the old version will remain remain in place"	Morph withAllSubclasses do:		[:aClass | (aClass class includesSelector: #helpContributions)			ifTrue:				[aClass helpContributions do:					[:pair | aDictionary at: pair first put: pair second]]].		HelpStrings := aDictionary! !!Morph methodsFor: 'object fileIn' stamp: 'nice 10/19/2009 22:17'!convertAugust1998: varDict using: smartRefStrm 	"These variables are automatically stored into the new instance 	('bounds' 'owner' 'submorphs' 'fullBounds' 'color' ). 	This method is for additional changes. Use statements like (foo := 	varDict at: 'foo')."	"Be sure to to fill in ('extension' ) and deal with the information 	in ('eventHandler' 'properties' 'costumee' )"	"This method moves all property variables as well as 	eventHandler, and costumee into a morphicExtension."	"Move refs to eventhandler and costumee into extension"	| propVal |	(varDict at: 'eventHandler') isNil 		ifFalse: [self eventHandler: (varDict at: 'eventHandler')].	(varDict at: 'costumee') isNil 		ifFalse: [self player: (varDict at: 'costumee')].	(varDict at: 'properties') isNil 		ifFalse: 			[(varDict at: 'properties') fasterKeys do: 					[:key | 					"Move property extensions into extension"					propVal := (varDict at: 'properties') at: key.					propVal ifNotNil: 							[key == #possessive 								ifTrue: [propVal == true ifTrue: [self bePossessive]]								ifFalse: 									[key ifNotNil: [self assureExtension convertProperty: key toValue: propVal]]]]]! !!UpdatingStringMorph methodsFor: 'editing' stamp: 'nice 10/19/2009 22:33'!setFontStyle	| aList reply style |	aList := (TextConstants select: [:anItem | anItem isKindOf: TextStyle]) 				fasterKeys.	reply := UIManager default chooseFrom: aList values: aList.	reply notNil 		ifTrue: 			[(style := TextStyle named: reply) ifNil: 					[Beeper beep.					^true].			self font: style defaultFont]! !!ComplexProgressIndicator class methodsFor: 'as yet unclassified' stamp: 'nice 10/19/2009 21:59'!historyReport"ComplexProgressIndicator historyReport"	| answer data |	History ifNil: [^Beeper beep].	answer := String streamContents: [ :strm |		(History fasterKeys sort: [ :a :b | a asString <= b asString]) do: [ :k |			strm nextPutAll: k printString; cr.			data := History at: k.			(data fasterKeys sort: [ :a :b | a asString <= b asString]) do: [ :dataKey |				strm tab; nextPutAll: dataKey printString,'  ',					(data at: dataKey) asArray printString; cr.			].			strm cr.		].	].	StringHolder new		contents: answer contents;		openLabel: 'Progress History'! !!FontChooserTool methodsFor: 'font list' stamp: 'nice 10/19/2009 22:10'!fontList	"List of available font family names"	^fontList ifNil:[fontList := (TextConstants select: [:each | each isKindOf: TextStyle]) fasterKeys sort]! !!StandardScriptingSystem class methodsFor: 'utilities' stamp: 'nice 10/19/2009 22:28'!removePlayersIn: project	"Remove existing player references for project"	References fasterKeys do: 		[:key | (References at: key) costume pasteUpMorph == project world			ifTrue: [References removeKey: key]].! !