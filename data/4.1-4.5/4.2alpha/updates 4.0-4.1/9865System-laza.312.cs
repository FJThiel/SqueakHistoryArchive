"Change Set:		9865System-laza.312System-laza.312:veryDeepCopy shouldn't be necessarySystem-ar.304:Fixes http://bugs.squeak.org/view.php?id=6478System-nice.305:Fix for http://bugs.squeak.org/view.php?id=7483#metaclass -> #metaClassSystem-ul.306:Merged klub.304:- added Docking Bar shortcuts to Keyboard Shortcuts helpSystem-ar.307:Adds a new condensing method. 	Smalltalk appendChangesTo: 'myfile.sources' will copy the original sources file and append a condensed version of the changes. These later versions are linked to the earlier ones so that the 'versions' of some method show its ancestry in the sources file.  This gives us the ability to preserve the 'shipped' ancestry of methods while avoiding all the intermediate versions during development.Also bullet-proofs ChangeSet>>scanVersionsOf: in the case of broken preambles.System-ar.308:Merging System-cbr.306:Fixed weirdness in RealEstateAgent>>standardWindowExtent which was causing browsers/etc to appear too small to use on devices with small screens. I did the most unobtrusive thing possible, as 4.1 is in code lockdown. In order to figure out what was going wrong, I refactored the whole thing, but I will save those changes for 4.2, opting to do what it takes to make the system browser usable on your 2010 interrim Dynabook. It should be noted that this method was guilty of shenanigans before I touched it :-)System-cmm.309:Updated command-key mappings.System-ar.310:Position the sources file to the end instead of writing a timestamp at the beginning (overwriting the license header).System-laza.311:Make Preferences 'save to disk' work again. This did not work for PragmaPreferences.see http://bugs.squeak.org/view.php?id=7490"!!PseudoClass methodsFor: 'accessing' stamp: 'nice 3/30/2010 22:16'!theMetaClass	^ self metaClass! !!PragmaPreference methodsFor: 'converting' stamp: 'laza 4/7/2010 16:02'!asPreference	| preference |	preference := Preference new.	preference		name: name		defaultValue: defaultValue		helpString: helpString		localToProject: localToProject		categoryList: categoryList		changeInformee: changeInformee		changeSelector:  changeSelector		type: type.	preference rawValue: self preferenceValue.	^preference! !!Preferences class methodsFor: 'personalization' stamp: 'laza 4/7/2010 19:00'!storePreferencesIn: aFileName 	| stream prefsSnapshot |	#(#Prevailing #PersonalPreferences )  do:[:ea | Parameters  removeKey:ea  ifAbsent:[]].	stream := ReferenceStream fileNamed: aFileName.	stream  nextPut:Parameters.	prefsSnapshot := self dictionaryOfPreferences copy.	prefsSnapshot keysAndValuesDo: [:key :pref | prefsSnapshot at: key put: pref asPreference].	stream  nextPut: prefsSnapshot.	Smalltalk isMorphic 		 ifTrue:[stream nextPut:World fillStyle]		 ifFalse:[stream nextPut:DesktopColor].	stream close! !!Utilities class methodsFor: 'support windows' stamp: 'cmm 4/4/2010 20:44'!commandKeyMappings	^ (self class firstCommentAt: #commandKeyMappings) translated"Lower-case command keys(use with Cmd key on Mac and Alt key on other platforms)a	Select allb	Browse it (selection is a class name or cursor is over a class-list or message-list)c	Copy selectiond	Do it (selection is a valid expression)e	Exchange selection with prior selectionf	Findg	Find againh	Set selection as search string for find againi	Inspect it (selection is a valid expression, or selection is over an inspect-ilst)j	Again once (do the last text-related operation again)k	Set fontl	Cancelm	Implementors of it (selection is a message selector or cursor is over a class-list or message-list)n	Senders of it (selection is a message selector or cursor is over a class-list or message-list)o	Spawn current methodp	Print it (selection is a valid expression)q	Query symbol (toggle all possible completion for a given prefix)r	Recognizers	Save (i.e. accept)t	Finds a Transcript (when cursor is over the desktop)u	Toggle alignmentv	Pastew	Delete preceding word (over text);  Close-window (over morphic desktop)x	Cut selectiony	Swap charactersz	UndoNote: for Do it, Senders of it, etc., a null selection will be expanded to a word or to the current line in an attempt to do what you want.  Also note that Senders/Implementors of it will find the outermost keyword selector in a large selection, as when you have selected a bracketed expression or an entire line.  Finally note that the same cmd-m and cmd-n (and cmd-v for versions) work in the message pane of most browsers.Upper-case command keys	(use with Shift-Cmd, or Ctrl on Mac	or Shift-Alt on other platforms; sometimes Ctrl works too)A	Advance argumentB	Browse it in this same browser (in System browsers only)C	Compare argument to clipboardD	DuplicateE	Method strings containing itF	Insert 'ifFalse:'G	fileIn from it (a file name)H	cursor TopHome:I	Inspect via Object ExplorerJ	Again many (apply the previous text command repeatedly until the end of the text)K	Set styleL	Outdent (move selection one tab-stop left)M	Select current type-inN	References to it (selection is a class name, or cursor is over a class-list or message-list)O	Open single-message browser (in message lists)P	Make project linkR	Indent (move selection one tab-stap right)S	SearchT	Insert 'ifTrue:'U	Convert linefeeds to carriage returns in selectionV	Paste author's initialsW	Selectors containing it (in text); show-world-menu (when issued with cursor over desktop)X	Force selection to lowercaseY	Force selection to uppercaseZ	Capitalize all words in selectionOther special keysBackspace	Backward delete characterDel			Forward delete characterShift-Bksp	Backward delete wordShift-Del	Forward delete wordEsc			Pop up the Desktop Menu\			Send top window to backCursor keysleft, right,up, down	Move cursor left, right, up or downCtrl-left		Move cursor left one wordCtrl-right	Move cursor right one wordHome		Move cursor to begin of line or begin of textEnd			Move cursor to end of line or end of textPgUp, Ctrl-up	Move cursor up one pagePgDown, Ctrl-Dn	Move cursor down one pageNote all these keys can be used together with Shift to define or enlarge the selection. You cannot however shrink that selection again, as in some other systems.Other Cmd-key combinations (not available on all platforms)Return		Insert return followed by as many tabs as the previous line			(with a further adjustment for additional brackets in that line)Space		Select the current word as with double clickingEnclose the selection in a kind of bracket.  Each is a toggle.	(not available on all platforms)Ctrl-(	Enclose within ( and ), or remove enclosing ( and )Ctrl-[	Enclose within [ and ], or remove enclosing [ and ]Crtl-{	Enclose within { and }, or remove enclosing { and }Ctrl-<	Enclose within < and >, or remove enclosing < and >Ctrl-'	Enclose within ' and ', or remove enclosing ' and 'Ctrl-""	Enclose within "" and "", or remove enclosing "" and ""Note also that you can double-click just inside any of the above delimiters,or at the beginning or end of a line, to select the text enclosed.Text Emphasis	(not available on all platforms)Cmd-1	type the first method argumentCmd-2	type the second method argumentCmd-3	type the third method argumentCmd-4	type the fourth method argumentCmd-5	for future useCmd-6	color, action-on-click, link to class comment, link to method, url		Brings up a menu.  To remove these properties, select		more than the active part and then use command-0.Cmd-7	boldCmd-8	italicCmd-9	narrow (same as negative kern)Cmd-0	plain text (resets all emphasis)Cmd--	underlined (toggles it)Cmd-=	struck out (toggles it)Shift-Cmd--	(aka :=) negative kern (letters 1 pixel closer)Shift-Cmd-+	positive kern (letters 1 pixel larger spread)	Docking BarCtrl-<n> opens the n-th (where n is between 0 and 7) menu if such exists, otherwise it moves the keyboard focus to the Search Bar. Currently this means:Ctrl-1	Squeak menuCtrl-2	Projects menuCtrl-3	Tools menuCtrl-4	Extras menuCtrl-5	Windows menuCtrl-6	Help menuCtrl-7	Activates Search Bar"! !!Preference methodsFor: 'converting' stamp: 'laza 4/7/2010 15:53'!asPreference	^self! !!SmalltalkImage methodsFor: 'housekeeping' stamp: 'ar 4/6/2010 20:09'!appendChangesTo: sourcesName	"Condense changes to the end of the given sources file.	If the file is the same as Smalltalk sourcesName, then just append	the changes. If the file is different, then copy the sources file and	append the changes afterwards."	"Smalltalk appendChangesTo: 'test123.sources'"	"To verify correctness of the operation run the following code:	[	| sourceMap |		sourceMap := Dictionary new.		(CompiledMethod allInstances select:[:cm| cm isInstalled]) do:[:cm|			sourceMap at: cm methodReference put: 				(cm getSourceFor: cm selector in: cm methodClass)].		Smalltalk allClassesAndTraitsDo:[:aClass|			sourceMap at: aClass put: aClass comment].		Smalltalk appendChangesTo: 'verify.sources'.		(CompiledMethod allInstances select:[:cm| cm isInstalled]) do:[:cm|			self assert: (sourceMap at: cm methodReference) =				(cm getSourceFor: cm selector in: cm methodClass)].		Smalltalk allClassesAndTraitsDo:[:aClass|			self assert: (sourceMap at: aClass) = aClass comment].	]"	| fullName sourcesFile |	fullName := FileDirectory default fullNameFor: sourcesName.	(fullName endsWith: '.sources') ifFalse:[self error: 'New name must end with .sources'].	fullName = Smalltalk sourcesName ifFalse:[		"Copy sources file; change file name accordingly"		FileStream forceNewFileNamed: fullName do:[:newFile| | bufSize |			bufSize := 16r10000.			sourcesFile := (SourceFiles at: 1) readOnlyCopy.			sourcesFile position: 0.			'Copying sources...' displayProgressAt: Sensor cursorPoint 				from: 0 to: sourcesFile size during:[:bar|					[sourcesFile atEnd] whileFalse:[						bar value: sourcesFile position.						newFile nextPutAll: (sourcesFile next: bufSize)]].			newFile position = sourcesFile size ifFalse:[self error: 'File copy failed'].		].		self setMacFileInfoOn: fullName.		"Change to the new sources file and reopen"		self closeSourceFiles.		SourceFileVersionString := (FileDirectory localNameFor: fullName) 			allButLast: '.sources' size.		self openSourceFiles.	].	"We've copied the old to the new sources file; reopen the sources file read/write"	sourcesFile := SourceFiles at: 1.	sourcesFile close; open: sourcesFile fullName forWrite: true. "should be openReadWrite"	sourcesFile setToEnd; timeStamp. "remember when we did this"	"Copy method sources from changes to sources"	CompiledMethod allInstances do:[:method|		(method isInstalled and:[method fileIndex = 2]) ifTrue:[			| class selector category preamble changeList index chgRec string source |			class := method methodClass.			selector := method selector.			source := class sourceCodeAt: selector.			category := class organization categoryOfElement: selector.			preamble := class name, ' methodsFor: ', category asString printString,							' stamp: ', method timeStamp printString.			"Find the last version in the sources file; link up the prior: version"			changeList := ChangeSet scanVersionsOf: method 				class: class meta: class isMeta category: category  selector: selector.			index := changeList findLast:[:any| any fileIndex = 1].			index > 0 ifTrue:[				chgRec := changeList at: index.				preamble := preamble, ' prior: ', (SourceFiles 					sourcePointerFromFileIndex: chgRec fileIndex 					andPosition: chgRec position) printString].			"append to sources file"			sourcesFile setToEnd; cr; nextPut: $!!; nextChunkPut: preamble; cr.			string := RemoteString newString: source onFileNumber: 1 toFile: sourcesFile.			sourcesFile nextChunkPut: ' '.			method setSourcePosition: string position inFile: 1		].	] displayingProgress: 'Moving changes...'.	"Copy class comments from changes to sources"	self  allClassesAndTraitsDo: [:classOrTrait | 		classOrTrait moveClassCommentTo: sourcesFile fileIndex: 1.	].	"We've moved everything; reopen the source files"	self closeSourceFiles; openSourceFiles.	"Finally, run condenseChanges -- they *should* be empty 	but it's better to be safe than sorry"	self condenseChanges.! !!ChangeSet class methodsFor: 'scanning' stamp: 'ar 3/31/2010 22:13'!scanVersionsOf: method class: class meta: meta category: cat selector: selector	| position prevPos prevFileIndex preamble tokens sourceFilesCopy stamp changeList file |	changeList := OrderedCollection new.	position := method filePosition.	sourceFilesCopy := SourceFiles collect:[:x | x ifNotNil:[x readOnlyCopy]].	method fileIndex == 0 ifTrue: [^ nil].	file := sourceFilesCopy at: method fileIndex.	[position notNil & file notNil] whileTrue:[		preamble := method getPreambleFrom: file at: (0 max: position - 3).		"Preamble is likely a linked method preamble, if we're in			a changes file (not the sources file).  Try to parse it			for prior source position and file index"		prevPos := nil.		stamp := ''.		(preamble findString: 'methodsFor:' startingAt: 1) > 0			ifTrue: [tokens := [Scanner new scanTokens: preamble] on: Error do:[#()]]			ifFalse: [tokens := Array new  "ie cant be back ref"].		((tokens size between: 7 and: 8)			and: [(tokens at: tokens size-5) = #methodsFor:]) ifTrue:[				(tokens at: tokens size-3) = #stamp: ifTrue:[					"New format gives change stamp and unified prior pointer"					stamp := tokens at: tokens size-2.					prevPos := tokens last.					prevFileIndex := sourceFilesCopy fileIndexFromSourcePointer: prevPos.					prevPos := sourceFilesCopy filePositionFromSourcePointer: prevPos.				] ifFalse: ["Old format gives no stamp; prior pointer in two parts"					prevPos := tokens at: tokens size-2.					prevFileIndex := tokens last.				].				(prevPos = 0 or: [prevFileIndex = 0]) ifTrue: [prevPos := nil]			].		((tokens size between: 5 and: 6)			and: [(tokens at: tokens size-3) = #methodsFor:]) ifTrue:[				(tokens at: tokens size-1) = #stamp: ifTrue: [					"New format gives change stamp and unified prior pointer"					stamp := tokens at: tokens size.			]		]. 		changeList add: (ChangeRecord new file: file position: position type: #method						class: class name category: cat meta: meta stamp: stamp).		position := prevPos.		prevPos notNil ifTrue:[file := sourceFilesCopy at: prevFileIndex].	].	sourceFilesCopy do: [:x | x ifNotNil:[x close]].	^changeList! !!RealEstateAgent class methodsFor: 'settings' stamp: 'cbr 3/30/2010 17:30'!standardWindowExtent	"Answer the standard default extent for new windows.  "	| effectiveExtent width strips height grid allowedArea maxLevel extent |	effectiveExtent := self maximumUsableArea extent					- (self scrollBarSetback @ self screenTopSetback).	Preferences reverseWindowStagger ifTrue:		["NOTE: following copied from strictlyStaggeredInitialFrameFor:"		allowedArea := self maximumUsableArea insetBy: (			self scrollBarSetback @ self screenTopSetback extent: 0@0		).		"Number to be staggered at each corner (less on small screens)"		maxLevel := allowedArea area > 300000 ifTrue: [3] ifFalse: [2].		"Amount by which to stagger (less on small screens)"		grid := allowedArea area > 500000 ifTrue: [40] ifFalse: [20].		extent := (allowedArea extent - (grid*(maxLevel+1*2) + (grid//2))) min: StandardSize "600@400".		(extent y < 300) ifTrue: [^ (extent x)@300 ].		^ extent].	width := (strips := self windowColumnsDesired) > 1		ifTrue:			[effectiveExtent x // strips]		ifFalse:			[(3 * effectiveExtent x) // 4].	height := (strips := self windowRowsDesired) > 1		ifTrue:			[effectiveExtent y // strips]		ifFalse:			[(3 * effectiveExtent y) //4].	^ width @ height"RealEstateAgent standardWindowExtent"! !!SystemDictionary methodsFor: 'classes and traits' stamp: 'ar 3/29/2010 16:08'!classNames	"Answer a SortedCollection of all class names."	| names |	cachedClassNames == nil ifTrue:		[names := OrderedCollection new: self size.		self keysAndValuesDo:[:key :value|			"The key == value name test below addresses two separate issues:				1) Obsolete classes, where key = #Foo and value name = 'AnObsoleteFoo'				2) Aliases, i.e., Smalltalk at: #OtherName put: aClass			"			(value isInMemory and: [(value isKindOf: Class) and: [key == value name]])				ifTrue: [names add: key]].		cachedClassNames := names asSortedCollection].	^ cachedClassNames! !