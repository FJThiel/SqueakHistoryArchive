"Change Set:		8134Morphic-ar.226Morphic-ar.226:Remove support for isolation layers.Morphic-dtl.222:Move three methods from MorphicProject back to Project, undoing prior change. These are required for creating and entering an MVC project from Morphic.Morphic-nice.223:Fix from http://bugs.squeak.org/view.php?id=7071 for unicode inputMorphic-dtl.224:Continue factoring Project into MVCProject and MorphicProject. Add method category 'enter' for methods associated with entering one project from another, including MVC-Morphic transition. Project>>enter: revert:saveForRevert: is significantly modified. Changes are in packages System, Morphic, and ST-80.Morphic-dtl.225:Factor Project>>saveState into MVCProject and MorphicProject.Morphic-ar.225:Exclude the scrollbar from minExtent computations when they have been turned off explicitly. This avoids input fields to show up like text areas in some situations."!!MorphicProject methodsFor: 'enter' stamp: 'dtl 11/7/2009 20:21'!setWorldForEnterFrom: old recorder: recorderOrNil	"Prepare world for enter."	World := world.  "Signifies Morphic"	world install.	world transferRemoteServerFrom: old world.	"(revertFlag | saveForRevert | forceRevert) ifFalse: [		(Preferences valueOfFlag: #projectsSentToDisk) ifTrue: [			self storeSomeSegment]]."	recorderOrNil ifNotNil: [recorderOrNil resumeIn: world].	world triggerOpeningScripts! !!MorphicProject methodsFor: 'file in/out' stamp: 'dtl 11/2/2009 23:39'!armsLengthCommand: aCommand withDescription: aString	| tempProject foolingForm tempCanvas bbox crossHatchColor stride |	"Set things up so that this aCommand is sent to self as a messageafter jumping to the parentProject.  For things that can't be executedwhile in this project, such as saveAs, loadFromServer, storeOnServer.  SeeProjectViewMorph step."	world borderWidth: 0.	"get rid of the silly default border"	tempProject := MorphicProject new.	foolingForm := world imageForm.		"make them think they never left"	tempCanvas := foolingForm getCanvas.	bbox := foolingForm boundingBox.	crossHatchColor := Color yellow alpha: 0.3.	stride := 20.	10 to: bbox width by: stride do: [ :x |		tempCanvas fillRectangle: (x@0 extent: 1@bbox height) fillStyle: crossHatchColor.	].	10 to: bbox height by: stride do: [ :y |		tempCanvas fillRectangle: (0@y extent: bbox width@1) fillStyle: crossHatchColor.	].	tempProject world color: (InfiniteForm with: foolingForm).	tempProject projectParameters 		at: #armsLengthCmd 		put: (			DoCommandOnceMorph new				addText: aString;				actionBlock: [					self doArmsLengthCommand: aCommand.				] fixTemps		).	tempProject projectParameters 		at: #deleteWhenEnteringNewProject 		put: true.	tempProject enter! !!MorphicProject methodsFor: 'enter' stamp: 'dtl 11/7/2009 20:52'!pauseSoundPlayers	"Pause sound players, subject to preference settings"	(world hasProperty: #letTheMusicPlay)		ifTrue: [world removeProperty: #letTheMusicPlay]		ifFalse: [Smalltalk at: #ScorePlayer ifPresentAndInMemory:					[:playerClass | playerClass allSubInstancesDo:						[:player | player pause]]]! !!MorphicProject methodsFor: 'flaps support' stamp: 'dtl 11/6/2009 21:49'!navigatorFlapVisible	"Answer whether a Navigator flap is visible"	self flag: #toRemove. "unreferenced in image, check eToys"	^ (Flaps sharedFlapsAllowed and: 		[self flapsSuppressed not]) and:			[self isFlapIDEnabled: 'Navigator' translated]! !!MorphicProject methodsFor: 'enter' stamp: 'dtl 11/6/2009 21:43'!finalExitActions	(world findA: ProjectNavigationMorph)		ifNotNilDo: [:navigator | navigator retractIfAppropriate]! !!MorphicProject methodsFor: 'initialize' stamp: 'ar 11/12/2009 01:11'!initMorphic	"Written so that Morphic can still be removed.  Note that #initialize is never actually called for a morphic project -- see the senders of this method."	self flag: #toRemove. "check if this method still used by Etoys"	Smalltalk verifyMorphicAvailability ifFalse: [^ nil].	changeSet := ChangeSet new.	transcript := TranscriptStream new.	displayDepth := Display depth.	parentProject := CurrentProject.	world := PasteUpMorph newWorldForProject: self.	Locale switchToID: CurrentProject localeID.	self initializeProjectPreferences. "Do this *after* a world is installed so that the project will be recognized as a morphic one."	Preferences useVectorVocabulary ifTrue: [world installVectorVocabulary]! !!ScrollPane methodsFor: 'geometry' stamp: 'ar 11/9/2009 22:37'!minScrollbarExtent	"Answer the minimum extent occupied by the receiver..	It is assumed the if the receiver is sized to its minimum both scrollbars will be used (and visible) unless they have been turned off explicitly.	This makes the behaviour also more predictable."	^((self valueOfProperty: #noVScrollBarPlease ifAbsent: [false]) 		ifTrue:[0@0] ifFalse:[scrollBar minExtent])  +	((self valueOfProperty: #noHScrollBarPlease ifAbsent: [false]) 		ifTrue:[0@0] ifFalse:[hScrollBar minExtent])! !!MorphicProject methodsFor: 'menu messages' stamp: 'dtl 11/6/2009 21:33'!assureNavigatorPresenceMatchesPreference	"Make sure that the current project conforms to the presence/absence of the navigator"	| navigator navType wantIt |	wantIt :=  Preferences classicNavigatorEnabled and: [Preferences showProjectNavigator].	navType := ProjectNavigationMorph preferredNavigator.	navigator := world findA: navType.	wantIt		ifFalse:			[navigator ifNotNil: [navigator delete]]		ifTrue:			[navigator isNil ifTrue: 				[(navigator := navType new)					bottomLeft: world bottomLeft;					openInWorld: world]]! !!TheWorldMenu methodsFor: 'construction' stamp: 'ar 11/12/2009 01:07'!changesMenu        "Build the changes menu for the world."        | menu |        menu := self menu: 'changes...'.        self fillIn: menu from: {                { 'file out current change set' . { ChangeSet current . #verboseFileOut}.                                'Write the current change set out to a file whose name reflects the change set name and the current date & time.'}.                { 'create new change set...' . { ChangeSet . #newChangeSet}. 'Create a new change set and make it the current one.'}.                { 'browse changed methods' . { ChangeSet  . #browseChangedMessages}.  'Open a message-list browser showing all methods in the current change set'}.                { 'check change set for slips' . { self  . #lookForSlips}.                                'Check the current change set for halts, references to the Transcript, etc., and if any such thing is found, open up a message-list browser detailing all possible slips.'}.                nil.                { 'simple change sorter' . {self. #openChangeSorter1}.  'Open a 3-paned changed-set viewing tool'}.                { 'dual change sorter' . {self. #openChangeSorter2}.                                'Open a change sorter that shows you two change sets at a time, making it easy to copy and move methods and classes between them.'}.               { 'find a change sorter (C)' . { #myWorld . #findAChangeSorter: }. 'Brings an open change sorter to the front, creating one if necessary, and makes it the active window'}.                nil.                { 'browse recent submissions' . { Utilities . #browseRecentSubmissions}.                                'Open a new recent-submissions browser.  A recent-submissions browser is a message-list browser that shows the most recent methods that have been submitted.  If you submit changes within that browser, it will keep up-to-date, always showing the most recent submissions.'}.                { 'find recent submissions (R)' . { #myWorld . #openRecentSubmissionsBrowser:}.                                'Make an open recent-submissions browser be the front-window, expanding a collapsed one or creating a new one if necessary.  A recent-submissions browser is a message-list browser that shows the most recent methods that have been submitted, latest first.  If you submit changes within that browser, it will keep up-to-date, always showing the most recent submissions at the top of the browser.'}.			nil.                { 'recently logged changes...' . { self . #browseRecentLog}.'Open a change-list browser on the latter part of the changes log.  You can use this browser to recover logged changes which were not saved in your image, in the event of a crash or other interruption.'}.                { 'recent log file...' . { Smalltalk . #writeRecentToFile}.                                'Create a file holding the logged changes (going as far back as you wish), and open a window on that file.'}.                nil.                { 'save world as morph file' . {self. #saveWorldInFile}. 'Save a file that, when reloaded, reconstitutes the current World.'}.                nil.        }.        ^ menu! !!MorphicProject methodsFor: 'enter' stamp: 'dtl 11/7/2009 20:18'!setWorldForEmergencyRecovery	"Prepare world for enter with an absolute minimum of mechanism.	An unrecoverable error has been detected in an isolated project."	World := world.	world install.	world triggerOpeningScripts! !!MorphicProject methodsFor: 'display' stamp: 'dtl 11/6/2009 21:54'!viewLocFor: exitedProject 	"Look for a view of the exitedProject, and return its center"	world submorphsDo: [:v |			(v isSystemWindow and: [v model == exitedProject])				ifTrue: [^ v center]].	^ Sensor cursorPoint	"default result"! !!MorphicProject methodsFor: 'enter' stamp: 'dtl 11/9/2009 21:35'!saveState	"Save the current state in me prior to leaving this project"	changeSet := ChangeSet current.	thumbnail ifNotNil: [thumbnail hibernate].	world := World.	world sleep.	ActiveWorld := ActiveHand := ActiveEvent := nil.	Sensor flushAllButDandDEvents. "Will be reinstalled by World>>install"	transcript := Transcript! !!MorphicProject methodsFor: 'enter' stamp: 'dtl 11/7/2009 21:08'!isIncompletelyLoaded	"Answer true if project is incomplete and should be loaded from server "	(world isKindOf: StringMorph)		ifTrue: [self inform: 'This project is not all here. I will try to load a complete version.' translated.			^ true].	^ false! !!MorphicProject methodsFor: 'enter' stamp: 'dtl 11/7/2009 23:09'!finalEnterActions	"Perform the final actions necessary as the receiver project is entered"	| navigator armsLengthCmd navType thingsToUnhibernate fixBlock |	self projectParameters 		at: #projectsToBeDeleted 		ifPresent: [ :projectsToBeDeleted |			self removeParameter: #projectsToBeDeleted.			projectsToBeDeleted do: [ :each | 				Project deletingProject: each.				each removeChangeSetIfPossible]].	Locale switchAndInstallFontToID: self localeID.	thingsToUnhibernate := world valueOfProperty: #thingsToUnhibernate ifAbsent: [#()].	(thingsToUnhibernate anySatisfy:[:each| 		each isMorph and:[each hasProperty: #needsLayoutFixed]]) 			ifTrue:[fixBlock := self displayFontProgress].	thingsToUnhibernate do: [:each | each unhibernate].	world removeProperty: #thingsToUnhibernate.	fixBlock ifNotNil:[		fixBlock value.		world fullRepaintNeeded.	].	navType := ProjectNavigationMorph preferredNavigator.	armsLengthCmd := self parameterAt: #armsLengthCmd ifAbsent: [nil].	navigator := world findA: navType.	(Preferences classicNavigatorEnabled and: [Preferences showProjectNavigator and: [navigator isNil]]) ifTrue:		[(navigator := navType new)			bottomLeft: world bottomLeft;			openInWorld: world].	navigator notNil & armsLengthCmd notNil ifTrue:		[navigator color: Color lightBlue].	armsLengthCmd notNil ifTrue:		[Preferences showFlapsWhenPublishing			ifFalse:				[self flapsSuppressed: true.				navigator ifNotNil:	[navigator visible: false]].		armsLengthCmd openInWorld: world].	world reformulateUpdatingMenus.	world presenter positionStandardPlayer.	self assureMainDockingBarPresenceMatchesPreference.	WorldState addDeferredUIMessage: [self startResourceLoading].! !!MorphicProject methodsFor: 'enter' stamp: 'dtl 11/7/2009 20:47'!triggerClosingScripts	"If any scripts must be run on closing, run them now"	CurrentProject world triggerClosingScripts! !!TextMorphEditor methodsFor: 'menu messages' stamp: 'nice 8/21/2008 17:04'!zapSelectionWith: aText	"**overridden to inhibit old-style display"	| start stop rText rInterval isInTypeRun |	self deselect.	start := self startIndex.	stop := self stopIndex.	(aText isEmpty and: [stop > start]) ifTrue:		["If deleting, then set emphasisHere from 1st character of the deletion"		emphasisHere := (paragraph text attributesAt: start forStyle: paragraph textStyle)					select: [:att | att mayBeExtended]].	(start = stop and: [aText size = 0]) ifFalse:		[		"===Support for multilevel undo start ==="		rText := (paragraph text copyFrom: start to: (stop - 1)).		rInterval := start to: (stop - 1).		isInTypeRun := self isInTypeRun.		"===Support for multilevel undo end ==="				paragraph replaceFrom: start to: stop - 1			with: aText displaying: false.  "** was true in super"		self wasComposition ifTrue: [wasComposition := false. self setPoint: start + 1].		self computeIntervalFrom: start to: start + aText size - 1.		UndoInterval := otherInterval := self selectionInterval.		"===Support for multilevel undo start ==="		 (Preferences multipleTextUndo and: [isInTypeRun not])ifTrue:				[ self addEditCommand: 							(EditCommand									textMorph: morph									replacedText: rText									replacedTextInterval: rInterval									newText: aText 									newTextInterval: super selectionInterval)].		"===Support for multilevel undo end ==="].	self userHasEdited  " -- note text now dirty"! !!MorphicProject methodsFor: 'enter' stamp: 'dtl 11/7/2009 20:34'!scheduleProcessForEnter: showZoom	"Complete the enter: by launching a new process"	self finalEnterActions.	world repairEmbeddedWorlds.	world triggerEvent: #aboutToEnterWorld.	Project spawnNewProcessAndTerminateOld: true! !!MorphicProject methodsFor: 'enter' stamp: 'dtl 11/7/2009 21:00'!pauseEventRecorder	"Suspend any event recorder, and return it if found"	^World pauseEventRecorder! !MorphicProject removeSelector: #showSharedFlaps!TheWorldMenu removeSelector: #propagateChanges!MorphicProject removeSelector: #flapsSuppressed!TheWorldMenu removeSelector: #beIsolated!MorphicProject removeSelector: #flapsSuppressed:!