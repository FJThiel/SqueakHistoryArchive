"Change Set:		8065Collections-nice.178Collections-nice.178:subclasses of Array are not literalCollections-nice.173:Correct some #isSelfEvaluating implementations that were a bit relax.Anyway, the implementation is still weak:Try ((0@1 extent: 1@1) -> 0) isSelfEvaluatingThen try to evaluate ((0@1 extent: 1@1) -> 0) printStringCollections-nice.174:A bit of cleanup before printing every Array with a Brace notation (unless they are literal of course)Collections-nice.175:Implement Eliot suggestion to always print Array with a brace format (unless they are literal).Thus I renamed #printAsSelfEvaluatingFormOn: -> #printAsBraceFormOn:If community agree on this one, then more cleanup and removal will followCollections-ar.176:Merging Name: Collections-ul.175- reimplemented Set >> #rehashAllSets, it sends the new #rehashAllInstances to self and all subclasses.- deprecated #quickRehashAllSets, because it didn't rehash all subinstances of Set and #rehashAllSets is fast enough with Kernel-ul.283, it also sends #rehashAllSets instead of the old implementation (no senders in trunk).use it with Kernel-ul.283, load order doesn't matterCollections-nice.177:Patch to make literal Array store Float exactly"!!Array methodsFor: 'printing' stamp: 'nice 10/30/2009 23:51'!printOn: aStream	self isLiteral ifTrue: [^self printAsLiteralFormOn: aStream].	self class = Array ifTrue: [^self printAsBraceFormOn: aStream].	^super printOn: aStream! !!Set class methodsFor: 'initialization' stamp: 'ul 10/25/2009 11:21'!quickRehashAllSets	self deprecated: 'Use #rehashAllSets'.	self rehashAllSets! !!Association methodsFor: 'self evaluating' stamp: 'nice 10/30/2009 20:24'!isSelfEvaluating	^ self class == Association and: [self key isSelfEvaluating and: [self value isSelfEvaluating]]! !!WeakRegistry methodsFor: 'printing' stamp: 'nice 10/30/2009 23:09'!printElementsOn: aStream	accessLock ifNil: [^super printElementsOn: aStream].	aStream nextPutAll: '(<this WeakRegistry is locked>)'! !!Set class methodsFor: 'initialization' stamp: 'ul 10/25/2009 10:38'!rehashAllSets	"Set rehashAllSets"				self withAllSubclassesDo: [ :each | each rehashAllInstances ]! !!Array methodsFor: 'self evaluating' stamp: 'nice 10/30/2009 23:50'!printAsBraceFormOn: aStream	aStream nextPut: ${.	self do: [:el | aStream print: el] separatedBy: [ aStream nextPutAll: ' . '].	aStream nextPut: $}! !!Set class methodsFor: 'initialization' stamp: 'ul 10/30/2009 04:51'!rehashAllInstances	"Do not use #allInstancesDo: because rehash may create new instances."	self allInstances do: [ :each | each rehash ] ! !!Array methodsFor: 'testing' stamp: 'nice 11/2/2009 19:06'!isLiteral	^self class == Array and: [self allSatisfy: [:each | each isLiteral]]! !!Array methodsFor: 'printing' stamp: 'nice 10/31/2009 17:23'!storeOn: aStream 	"Use the literal form if possible."	self isLiteral		ifTrue: 			[aStream nextPut: $#; nextPut: $(.			self do: 				[:element | 				element storeOn: aStream.				aStream space].			aStream nextPut: $)]		ifFalse: [super storeOn: aStream]! !!RunArray methodsFor: 'self evaluating' stamp: 'nice 10/30/2009 20:29'!isSelfEvaluating	^ self class == RunArray and: [values isSelfEvaluating]! !Array removeSelector: #printAsSelfEvaluatingFormOn:!WeakSet removeSelector: #printElementsOn:!