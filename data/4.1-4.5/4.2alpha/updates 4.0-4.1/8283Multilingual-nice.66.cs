"Change Set:		8283Multilingual-nice.66Multilingual-nice.66:Complete http://bugs.squeak.org/view.php?id=6086In the process of #detectLineEndConvention a primitive fails trying to obtain the position of '/dev/stdout'.Multilingual-nice.64:Get rid of some ugly getSystemAttribute: 1002There is an explicitely named message #osVersion to just do thatThe named one seems a bit more future proof to me than assembleur like hardcoded valuesMultilingual-nice.65:http://bugs.squeak.org/view.php?id=6086In the process of #detectLineEndConvention a primitive fails trying to obtain the position of '/dev/stdout'.Re-Install fix from Kph compatible with latests changes."!!SimplifiedChineseEnvironment class methodsFor: 'public query' stamp: 'nice 11/27/2009 22:02'!defaultEncodingName	| platformName osVersion |	platformName := SmalltalkImage current platformName.	osVersion := SmalltalkImage current osVersion.	(platformName = 'Win32' and: [osVersion = 'CE']) ifTrue: [^'utf-8' copy].	(#('Win32' 'Mac OS' 'ZaurusOS') includes: platformName) 		ifTrue: [^'gb2312' copy].	(#('unix') includes: platformName) ifTrue: [^'euc-cn' copy].	^'mac-roman'! !!MultiByteFileStream methodsFor: 'accessing' stamp: 'nice 11/28/2009 13:06'!lineEndConvention: aSymbol	(lineEndConvention := aSymbol) ifNotNil: [wantsLineEndConversion := true].	self installLineEndConventionInConverter! !!Latin2Environment class methodsFor: 'subclass responsibilities' stamp: 'nice 11/27/2009 21:59'!defaultEncodingName	| platformName osVersion |	platformName := SmalltalkImage current platformName.	osVersion := SmalltalkImage current osVersion.	(platformName = 'Win32' and: [osVersion = 'CE']) ifTrue: [^'utf-8' copy].	(#('Win32') includes: platformName) 		ifTrue: [^'cp-1250' copy].	(#('unix') includes: platformName) ifTrue: [^'iso8859-2' copy].	^'mac-roman'! !!JapaneseEnvironment class methodsFor: 'public query' stamp: 'nice 11/27/2009 22:02'!defaultEncodingName	| platformName osVersion |	platformName := SmalltalkImage current platformName.	osVersion := SmalltalkImage current osVersion.	(platformName = 'Win32' and: [osVersion = 'CE']) ifTrue: [^'utf-8'].	(#('Win32' 'ZaurusOS') includes: platformName) ifTrue: [^'shift-jis'].	platformName = 'Mac OS' 		ifTrue: 			[^('10*' match: osVersion) 				ifTrue: ['utf-8']				ifFalse: ['shift-jis']].	^'unix' = platformName ifTrue: ['euc-jp'] ifFalse: ['mac-roman']! !!KoreanEnvironment class methodsFor: 'as yet unclassified' stamp: 'nice 11/27/2009 21:58'!inputInterpreterClass	| platformName osVersion encoding |	platformName := SmalltalkImage current platformName.	osVersion := SmalltalkImage current osVersion.	(platformName = 'Win32' and: [osVersion = 'CE']) 		ifTrue: [^MacRomanInputInterpreter].	platformName = 'Win32' ifTrue: [^WinKSX1001InputInterpreter].	platformName = 'Mac OS' 		ifTrue: 			[('10*' match: osVersion) 				ifTrue: [^MacUnicodeInputInterpreter]				ifFalse: [^WinKSX1001InputInterpreter]].	platformName = 'unix' 		ifTrue: 			[encoding := X11Encoding encoding.			(EUCJPTextConverter encodingNames includes: encoding) 				ifTrue: [^MacRomanInputInterpreter].			(UTF8TextConverter encodingNames includes: encoding) 				ifTrue: [^MacRomanInputInterpreter].			(ShiftJISTextConverter encodingNames includes: encoding) 				ifTrue: [^MacRomanInputInterpreter]].	^MacRomanInputInterpreter! !!Latin1Environment class methodsFor: 'subclass responsibilities' stamp: 'nice 11/27/2009 21:59'!inputInterpreterClass	| platformName osVersion |	platformName := SmalltalkImage current platformName.	osVersion := SmalltalkImage current osVersion.	(platformName = 'Win32' and: [osVersion ~= 'CE'])		ifTrue: [^ (self win32VMUsesUnicode) ifTrue: [UTF32InputInterpreter] ifFalse: [MacRomanInputInterpreter]].	platformName = 'Mac OS'		ifTrue: [^ MacRomanInputInterpreter].	platformName = 'unix'		ifTrue: [^ UTF32InputInterpreter].	^ MacRomanInputInterpreter! !!SimplifiedChineseEnvironment class methodsFor: 'subclass responsibilities' stamp: 'nice 11/27/2009 22:01'!clipboardInterpreterClass	| platformName osVersion |	platformName := SmalltalkImage current platformName.	osVersion := SmalltalkImage current osVersion.	(platformName = 'Win32' and: [osVersion = 'CE']) 		ifTrue: [^NoConversionClipboardInterpreter].	platformName = 'Win32' ifTrue: [^WinGB2312ClipboardInterpreter].	platformName = 'Mac OS' 		ifTrue: 			[('10*' match: osVersion) 				ifTrue: [^NoConversionClipboardInterpreter]				ifFalse: [^WinGB2312ClipboardInterpreter]].	platformName = 'unix' 		ifTrue: 			[(ShiftJISTextConverter encodingNames includes: X11Encoding getEncoding) 				ifTrue: [^MacShiftJISClipboardInterpreter]				ifFalse: [^NoConversionClipboardInterpreter]].	^NoConversionClipboardInterpreter! !!KoreanEnvironment class methodsFor: 'as yet unclassified' stamp: 'nice 11/27/2009 21:58'!defaultEncodingName	| platformName osVersion |	platformName := SmalltalkImage current platformName.	osVersion := SmalltalkImage current osVersion.	(platformName = 'Win32' and: [osVersion = 'CE']) ifTrue: [^'utf-8' copy].	(#('Win32' 'Mac OS' 'ZaurusOS') includes: platformName) 		ifTrue: [^'euc-kr' copy].	(#('unix') includes: platformName) ifTrue: [^'euc-kr' copy].	^'mac-roman'! !!JapaneseEnvironment class methodsFor: 'subclass responsibilities' stamp: 'nice 11/27/2009 21:56'!clipboardInterpreterClass	| platformName osVersion |	platformName := SmalltalkImage current  platformName.	osVersion := SmalltalkImage current osVersion.	(platformName = 'Win32' and: [osVersion = 'CE']) 		ifTrue: [^NoConversionClipboardInterpreter].	platformName = 'Win32' ifTrue: [^WinShiftJISClipboardInterpreter].	platformName = 'Mac OS' ifTrue: [^MacShiftJISClipboardInterpreter].	^platformName = 'unix' 		ifTrue: 			[(ShiftJISTextConverter encodingNames includes: X11Encoding getEncoding) 				ifTrue: [MacShiftJISClipboardInterpreter]				ifFalse: [UnixJPClipboardInterpreter]]		ifFalse: [ NoConversionClipboardInterpreter ]! !!MultiByteFileStream methodsFor: 'open/close' stamp: 'HenrikSperreJohansen 11/20/2009 15:13'!open: fileName forWrite: writeMode 	| result |	result := super open: fileName forWrite: writeMode.	result ifNotNil: [			converter ifNil: [self converter: UTF8TextConverter new].			lineEndConvention ifNil: [ self detectLineEndConvention ]	].	^result! !!Latin1Environment class methodsFor: 'subclass responsibilities' stamp: 'nice 11/27/2009 22:00'!defaultEncodingName	| platformName osVersion |	platformName := SmalltalkImage current platformName.	osVersion := SmalltalkImage current osVersion.	(platformName = 'Win32' and: [osVersion = 'CE']) ifTrue: [^'utf-8' copy].	(#('Win32' 'Mac OS' 'ZaurusOS') includes: platformName) 		ifTrue: [^'iso8859-1' copy].	(#('unix') includes: platformName) ifTrue: [^'iso8859-1' copy].	^'mac-roman'! !!MultiByteFileStream methodsFor: 'remnant' stamp: 'kph 3/1/2009 15:50'!wantsLineEndConversion: aBoolean		wantsLineEndConversion :=  aBoolean.	lineEndConvention ifNil: [ self detectLineEndConvention ]. ! !!KoreanEnvironment class methodsFor: 'as yet unclassified' stamp: 'nice 11/27/2009 22:02'!clipboardInterpreterClass	| platformName osVersion |	platformName := SmalltalkImage current platformName.	osVersion := SmalltalkImage current osVersion.	(platformName = 'Win32' and: [osVersion = 'CE']) 		ifTrue: [^NoConversionClipboardInterpreter].	platformName = 'Win32' ifTrue: [^WinKSX1001ClipboardInterpreter].	platformName = 'Mac OS' 		ifTrue: 			[('10*' match: osVersion) 				ifTrue: [^NoConversionClipboardInterpreter]				ifFalse: [^WinKSX1001ClipboardInterpreter]].	platformName = 'unix' 		ifTrue: 			[(ShiftJISTextConverter encodingNames includes: X11Encoding getEncoding) 				ifTrue: [^WinKSX1001ClipboardInterpreter]				ifFalse: [^NoConversionClipboardInterpreter]].	^NoConversionClipboardInterpreter! !!MultiByteFileStream class methodsFor: 'class initialization' stamp: 'nice 11/27/2009 22:01'!guessDefaultLineEndConvention	"Lets try to guess the line end convention from what we know about the	path name delimiter from FileDirectory."	FileDirectory pathNameDelimiter = $:		ifTrue: [^ self defaultToCR].	FileDirectory pathNameDelimiter = $/		ifTrue: [((SmalltalkImage current osVersion)					beginsWith: 'darwin')				ifTrue: [^ self defaultToCR]				ifFalse: [^ self defaultToLF]].	FileDirectory pathNameDelimiter = $\		ifTrue: [^ self defaultToCRLF].	"in case we don't know"	^ self defaultToCR! !!SimplifiedChineseEnvironment class methodsFor: 'subclass responsibilities' stamp: 'nice 11/27/2009 22:03'!inputInterpreterClass	| platformName osVersion encoding |	platformName := SmalltalkImage current platformName.	osVersion := SmalltalkImage current osVersion.	(platformName = 'Win32' and: [osVersion = 'CE']) 		ifTrue: [^MacRomanInputInterpreter].	platformName = 'Win32' ifTrue: [^WinGB2312InputInterpreter].	platformName = 'Mac OS' 		ifTrue: 			[('10*' match: osVersion) 				ifTrue: [^MacUnicodeInputInterpreter]				ifFalse: [^WinGB2312InputInterpreter]].	platformName = 'unix' 		ifTrue: 			[encoding := X11Encoding encoding.			(EUCJPTextConverter encodingNames includes: encoding) 				ifTrue: [^MacRomanInputInterpreter].			(UTF8TextConverter encodingNames includes: encoding) 				ifTrue: [^MacRomanInputInterpreter].			(ShiftJISTextConverter encodingNames includes: encoding) 				ifTrue: [^MacRomanInputInterpreter]].	^MacRomanInputInterpreter! !!JapaneseEnvironment class methodsFor: 'subclass responsibilities' stamp: 'nice 11/27/2009 21:57'!inputInterpreterClass	| platformName osVersion encoding |	platformName := SmalltalkImage current platformName.	osVersion := SmalltalkImage current osVersion.	(platformName = 'Win32'			and: [osVersion = 'CE'])		ifTrue: [^ MacRomanInputInterpreter].	platformName = 'Win32'		ifTrue: [^ (self win32VMUsesUnicode) ifTrue: [UTF32JPInputInterpreter] ifFalse: [WinShiftJISInputInterpreter]].	platformName = 'Mac OS'		ifTrue: [^ (('10*' match: osVersion)					and: [(SmalltalkImage current getSystemAttribute: 3) isNil])				ifTrue: [MacUnicodeInputInterpreter]				ifFalse: [MacShiftJISInputInterpreter]].	platformName = 'unix'		ifTrue: [encoding := X11Encoding encoding.			(EUCJPTextConverter encodingNames includes: encoding)				ifTrue: [^ UnixEUCJPInputInterpreter].			(UTF8TextConverter encodingNames includes: encoding)				ifTrue: [^ UnixUTF8JPInputInterpreter].			(ShiftJISTextConverter encodingNames includes: encoding)				ifTrue: [^ MacShiftJISInputInterpreter]].	^ MacRomanInputInterpreter! !!JapaneseEnvironment class methodsFor: 'subclass responsibilities' stamp: 'nice 11/27/2009 21:58'!systemConverterClass	| platformName osVersion encoding |	platformName := SmalltalkImage current platformName.	osVersion := SmalltalkImage current osVersion.	(platformName = 'Win32' and: [osVersion = 'CE']) 		ifTrue: [^UTF8TextConverter].	(#('Win32' 'ZaurusOS') includes: platformName) 		ifTrue: [^ShiftJISTextConverter].	platformName = 'Mac OS' 		ifTrue: 			[^('10*' match: osVersion) 				ifTrue: [UTF8TextConverter]				ifFalse: [ShiftJISTextConverter]].	platformName = 'unix' 		ifTrue: 			[encoding := X11Encoding encoding.			encoding ifNil: [^EUCJPTextConverter].			(encoding = 'utf-8') 				ifTrue: [^UTF8TextConverter].							(encoding = 'shiftjis' | encoding = 'sjis') 				ifTrue: [^ShiftJISTextConverter].							^EUCJPTextConverter].	^MacRomanTextConverter! !!LanguageEnvironment class methodsFor: 'private' stamp: 'nice 11/27/2009 22:00'!win32VMUsesUnicode	| buildDate ind date obj vmHead |	obj :=  Smalltalk at: #SmalltalkImage ifAbsent: [Smalltalk].	obj == Smalltalk ifFalse: [obj := obj current].	vmHead := obj vmVersion.	vmHead ifNil: [^ false].	buildDate := obj getSystemAttribute: 1006.	buildDate ifNil: [^ false].	ind := buildDate indexOfSubCollection: 'on'.	date := Date readFromString: (buildDate copyFrom: ind+3 to: buildDate size).	(vmHead beginsWith: 'Croquet') ifTrue: [		^ date >= (Date readFromString: '1 Feb 2007')	].	(vmHead beginsWith: 'Squeak') ifTrue: [		^ date >= (Date readFromString: '5 June 2007')	].	^ false."LanguageEnvironment win32VMUsesUnicode"! !