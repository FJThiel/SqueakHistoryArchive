"Change Set:		8262Morphic-dtl.252Morphic-dtl.252:Add instance methods originally from class side of ProjectMorphic-kb.235: - converted the #showWorldMainDockingBar preference to pragma style.Morphic-kb.236: - changed the showWorldMainDockingBar preference to always use the current project's preference. - added to the postscript to remove the preference from PreferencesMorphic-kb.237: - changed the showWorldMainDockingBar preference to always use the current project's preference. - added to the postscript to remove the preference from PreferencesMorphic-kb.238: - first stab at creating a simple docking bar. - moved the old docking bar class to TheWorldMainDockingBarOld - created a subclass of MenuItemMorph: DockingBarItemMorph,  - and cleaned MenuItemMorph from isInDockingBar sends. - added to the postcript to enable the docking bar.Morphic-kb.239: - Refactoring of TheWorldMainDockingBar - Added some helper methods to MenuItemMorph, MenuMorph, DockingBarMorph - Added a menu to the docking bar listing windows not collapsedMorphic-kb.240: - Refactoring of TheWorldMainDockingBar - Added some helper methods to MenuItemMorph, MenuMorph, DockingBarMorph - Added a menu to the docking bar listing windows not collapsedMorphic-kb.241: - added preamble to unscubscribe TheWorldMainDockingBar from system change notifications. - added 2px vertical padding to MenuItemMorph in minHeight - refactored the building of TheWorldMainDockingBar - added a stub for Help menu - played a bit with the Windows menu: now you can close a window from there.Morphic-kb.242: - Refactored updating menus:   - Removed subMenuUpdater from MenuItemMorph   - Hijacked UpdatingMenuMorph   - Added #updateMenu to MenuMorph with an empty body   - Added updateMenu call to activation methods:     - UpdatingMenuMorph >> activate:     - DockingBarMorph >> activeSubmenu:     - MenuMorph >> activeSubmenu:   - Changed MenuItemMorph updating submenu mechanism - Poked with Windows menuMorphic-kb.243: - fix: #releaseSelection: prevented clearing the selection of MenuMorph when disappearing. This caused at least some of the glitches. - refactored TheWorldMainDockingBar to build a DockingBarMorph without blocks, but with tragets, selectors and arguments.Morphic-kb.244: - Fixed glitches of MenuMorph and DockingBarMorph. Now menu items loose selection on mouse leave except when the mouse moves towards their submenu. Docking bar items loose selection only if another item is selected, or the docking bar looses focus. - Removed the border of the docking bar, and adapted DockingBarItemMorph >> adjacentTo to it. We need to recreate the DockingBarMorph for this to take effect. - Labels of the items in the Windows menu are contracted to 50 characters.Morphic-dtl.245:Add MorphicProject>>prepareForDelete to support Project>>okToChangeMorphic-ul.246:- fix: don't raise an error if the primitive can't open a stream for a dropped file (http://lists.squeakfoundation.org/pipermail/squeak-dev/2009-September/139207.html)- fix: MouseOverHandler >> #noticeMouseOver:event: sent #includes: to a possibly nil object. Fixed the same way the pharo guys did, but without splitting #processMouseOver: into a lot of small methods. Bug reports:http://bugs.squeak.org/view.php?id=2697http://bugs.squeak.org/view.php?id=6186http://bugs.squeak.org/view.php?id=7415http://code.google.com/p/pharo/issues/detail?id=889Morphic-dtl.247:Implement #interruptName:preemptedProcess: on instance sideMorphicProject>>findProjectView: refactored from ProjectMorphicProject>>jumpToProject refactored from ProjectMorphic-dtl.248:Eliminate class CurrentProjectRefactoring.Morphic-dtl.249:Move project navigation and menu methods from class side of Project to instance methods. Replace #isMorphic logic with dispatch to appropriate project instances for MVC and Morphic conditions.Morphic-ar.250:Merging Morphic-dtl.249 and Morphic-ar.249.Morphic-kb.251:fix: TheMainWorldDockingBar picks shows new project subclasses automatically in its New Project menu."!Object subclass: #TheWorldMainDockingBarOld	instanceVariableNames: 'icons'	classVariableNames: 'Instance TS'	poolDictionaries: ''	category: 'Morphic-Kernel'!MenuItemMorph subclass: #DockingBarItemMorph	instanceVariableNames: 'selectedIcon'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Menus'!Object subclass: #TheWorldMainDockingBar	instanceVariableNames: ''	classVariableNames: 'Instance TS'	poolDictionaries: ''	category: 'Morphic-Kernel'!MenuMorph subclass: #UpdatingMenuMorph	instanceVariableNames: 'updater updateSelector arguments'	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Menus'!!TheWorldMainDockingBarOld methodsFor: 'private - icons' stamp: 'kb 11/19/2009 18:49'!squeakLogoIcon	^MenuIcons squeakLogoIcon! !!MouseOverHandler methodsFor: 'event handling' stamp: 'ul 11/22/2009 21:53'!noticeMouseOver: aMorph event: anEvent	"Remember that the mouse is currently over some morph"	leftMorphs remove: aMorph ifAbsent: [		enteredMorphs nextPut: aMorph ].	overMorphs nextPut: aMorph.! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!newProject	MorphicProject openViewOn: nil! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'kb 11/20/2009 09:33'!toolsMenuOn: aDockingBar 	aDockingBar addItem: [ :item |		item			contents: 'Tools' translated;			addSubMenu: [ :menu | 				self					browserMenuItemOn: menu;					workspaceMenuItemOn: menu;					transcriptMenuItemOn: menu;					testRunnerMenuItemOn: menu.				menu addLine.				self 					monticelloBrowserMenuItemOn: menu;					fileListMenuItemOn: menu ] ]! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!updateFromServer	Smalltalk		at: #SmallLandTools		ifPresent: [:smallLandTools | smallLandTools instance updateFromSmallLandSwikiPage: #quick]! !!TheWorldMainDockingBar methodsFor: 'submenu - squeak' stamp: 'kb 11/20/2009 17:22'!saveAsNewVersionMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Save As New Version' translated;			help: 'Save the current state of Squeak on disk under a version-stamped name' translated;			icon: MenuIcons smallSaveAsIcon;			target: self;			selector: #saveAsNewVersion ]! !!TheWorldMainDockingBarOld methodsFor: 'private - icons' stamp: 'kb 11/19/2009 18:49'!objectsIcon	^ Preferences tinyDisplay		ifTrue: [MenuIcons smallObjectsIcon]		ifFalse: [MenuIcons objectsIcon]! !!TheWorldMainDockingBar class methodsFor: 'timestamping' stamp: 'kb 11/19/2009 18:48'!setTimeStamp	"Change the receiver's timeStamp"	TS := UUID new! !!TheWorldMainDockingBar methodsFor: 'submenu - squeak' stamp: 'kb 11/20/2009 17:33'!saveMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Save Image' translated;			help: 'Save the current state of Squeak on disk' translated;			icon: MenuIcons smallSaveIcon;			target: self;			selector: #saveImage ]! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!toggleShowWorldMainDockingBar	self world toggleShowWorldMainDockingBar! !!DockingBarMorph methodsFor: 'control' stamp: 'kb 11/20/2009 13:38'!activeSubmenu: aSubmenu 	activeSubMenu isNil		ifFalse: [activeSubMenu delete].	activeSubMenu := aSubmenu.	aSubmenu isNil		ifTrue: [^ self].	activeSubMenu updateMenu.	activeSubMenu selectItem: nil event: nil.	MenuIcons decorateMenu: activeSubMenu.	activeSubMenu activatedFromDockingBar: self.	activeSubMenu borderColor: self borderColor.	activeSubMenu beSticky.	activeSubMenu resistsRemoval: true.activeSubMenu removeMatchString.! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!unhideHiddenObjects	self world showHiders! !!TheWorldMainDockingBarOld methodsFor: 'private - buttons' stamp: 'kb 11/19/2009 18:49'!perform: selectorSymbol event: anEvent for: aMorph 	"Private - perform the given selector"	aMorph color: self offColor.	self perform: selectorSymbol! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'ar 11/25/2009 19:48'!newProject: projectClass	"Create a new project of the given type"	| newProject |	"Allow the project to return nil from #new to indicate that it was canceled."	newProject := projectClass new ifNil:[^self].	ProjectViewMorph openOn: newProject.	newProject enter.! !!TheWorldMainDockingBarOld class methodsFor: 'class initialization' stamp: 'kb 11/19/2009 18:49'!initialize	"Initialize the receiver"	Preferences		addPreference: #showWorldMainDockingBar		categories: #(#'docking bars' )		default: true		balloonHelp: 'Whether world''s main docking bar should be shown or not.'		projectLocal: true		changeInformee: TheWorldMainDockingBar		changeSelector: #showWorldMainDockingBarPreferenceChanged.	""	SystemChangeNotifier uniqueInstance noMoreNotificationsFor: self.	SystemChangeNotifier uniqueInstance		notify: self		ofSystemChangesOfItem: #method		using: #updateInstances:.	""	Locale addLocalChangedListener: self.	self setTimeStamp! !!TheWorldMainDockingBarOld class methodsFor: 'as yet unclassified' stamp: 'kb 11/19/2009 18:49'!localeChanged	self updateInstances! !!TheWorldMainDockingBar methodsFor: 'submenu - tools' stamp: 'kb 11/20/2009 17:38'!monticelloBrowserMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Monticello Browser' translated;			help: 'Open a Monticello Browser' translated;			icon: (self colorIcon: MCTool basicNew defaultBackgroundColor);			target: MCWorkingCopyBrowser;			selector: #open ]! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!hideAllViewersIn: aMorph 	aMorph isFlapTab		ifTrue: [self hideAllViewersIn: aMorph referent].	aMorph		submorphsDo: [:each | ""			({ScriptEditorMorph. StandardViewer} includes: each class)				ifTrue: [each dismiss]				ifFalse: [self hideAllViewersIn: each]]! !!MenuMorph methodsFor: 'events' stamp: 'kb 11/21/2009 10:54'!handleFocusEvent: evt	"Handle focus events. Valid menu transitions are determined based on the menu currently holding the focus after the mouse went down on one of its children."	self processEvent: evt.	"Need to handle keyboard input if we have the focus."	evt isKeyboard ifTrue: [^ self handleEvent: evt].	"We need to handle button clicks outside and transitions to local popUps so throw away everything else"	(evt isMouseOver or:[evt isMouse not]) ifTrue:[^self].	"What remains are mouse buttons and moves"	evt isMove ifFalse:[^self handleEvent: evt]. "handle clicks outside by regular means"	"Now it's getting tricky. On #mouseMove we might transfer control to *either* the currently active submenu or the pop up owner, if any. Since the active sub menu is always displayed upfront check it first."		selectedItem ifNotNil: [		(selectedItem activateSubmenu: evt) 			ifTrue: [ ^self ]			ifFalse: [ 				(self containsPoint: evt position) ifFalse: [ 					self selectItem: nil event: evt ] ] ].	"Note: The following does not traverse upwards but it's the best I can do for now"	popUpOwner ifNotNil:[(popUpOwner activateOwnerMenu: evt) ifTrue:[^self]].! !!MenuItemMorph methodsFor: 'layout' stamp: 'kb 11/20/2009 11:34'!minHeight	| iconHeight |	iconHeight := self hasIcon				ifTrue: [self icon height + 2]				ifFalse: [0].	^(self fontToUse height max: iconHeight) + 2! !!TheWorldMainDockingBar methodsFor: 'submenu - projects' stamp: 'kb 11/26/2009 20:40'!updateNewProjectSubMenu: menu	Project allSubclasses do: [ :each |		menu addItem: [ :item | 			item				contents: ('New ', each name) translated;				help: ('Start a new ', each name) translated;				target: self;				selector: #newProject:;				arguments: { each } ] ]! !!MenuItemMorph methodsFor: 'selecting' stamp: 'kb 11/20/2009 13:03'!select: evt	self isSelected: true.	owner activeSubmenu: subMenu.	subMenu ifNotNil: [		subMenu delete.		subMenu			popUpAdjacentTo: self adjacentTo			forHand: evt hand			from: self.		subMenu selectItem: nil event: evt].! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!switchToFullScreen	self toggleFullScreen! !!TheWorldMainDockingBar methodsFor: 'submenu - squeak' stamp: 'kb 11/20/2009 17:16'!aboutMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'About Squeak...' translated;			target: self;			selector: #aboutSqueak ]! !!TheWorldMainDockingBar methodsFor: 'submenu - projects' stamp: 'kb 11/20/2009 17:46'!saveProjectMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Save Project' translated;			help: 'Save this project on a file' translated;			icon: MenuIcons smallPublishIcon;			target: World;			selector: #saveOnFile ]! !!UpdatingMenuMorph methodsFor: 'as yet unclassified' stamp: 'kb 11/20/2009 13:04'!activate: evt	"Receiver should be activated; e.g., so that control passes correctly."		self updateMenu.	evt hand newMouseFocus: self.! !!TheWorldMainDockingBarOld methodsFor: 'private - icons' stamp: 'kb 11/19/2009 18:49'!fullScreenIcon	^ Preferences tinyDisplay		ifTrue: [MenuIcons smallFullScreenIcon]		ifFalse: [MenuIcons fullScreenIcon]! !!TheWorldMainDockingBarOld methodsFor: 'construction - submenus' stamp: 'kb 11/19/2009 18:49'!saveAsMenuItem	^{	'Save Image As...'. 		'Save the current state of Squeak on disk under a new name'. 		MenuIcons smallSaveAsIcon.		#saveAs }! !!MenuMorph methodsFor: 'control' stamp: 'kb 11/20/2009 13:37'!activeSubmenu: aSubmenu 	activeSubMenu ifNotNil: [		activeSubMenu delete ].	activeSubMenu := aSubmenu.	activeSubMenu ifNotNil: [		activeSubMenu updateMenu.		activeSubMenu activatedFromDockingBar: nil. ]! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'kb 11/20/2009 17:55'!windowsMenuOn: aDockingBar	aDockingBar addItem: [ :item |		item			contents: 'Windows' translated;			subMenuUpdater: self			selector: #listWindowsOn: ]! !!TheWorldMainDockingBar methodsFor: 'private' stamp: 'kb 11/19/2009 18:48'!updateIfNeeded: aDockingBar "Update the given docking bar if needed"	| timeStamp |	timeStamp := aDockingBar				valueOfProperty: #mainDockingBarTimeStamp				ifAbsent: [^ self].	timeStamp = self class timeStamp		ifTrue: [^ self].	""	aDockingBar removeAllMorphs.	self fillDockingBar: aDockingBar! !!TheWorldMainDockingBarOld class methodsFor: 'events' stamp: 'kb 11/19/2009 18:49'!updateInstances	"The class has changed, time to update the instances"	self setTimeStamp.	Project current assureMainDockingBarPresenceMatchesPreference! !!DockingBarMorph methodsFor: 'construction' stamp: 'kb 11/19/2009 18:20'!add: wordingString icon: aForm selectedIcon: anotherForm help: helpString subMenu: aMenuMorph 	"Append the given submenu with the given label."	| item |	item := DockingBarItemMorph new		contents: wordingString;		subMenu: aMenuMorph;		icon: aForm;		selectedIcon: anotherForm.	helpString isNil ifFalse: [		item setBalloonText: helpString ].	self addMorphBack: item! !!TheWorldMainDockingBar class methodsFor: 'events' stamp: 'kb 11/19/2009 18:48'!updateInstances: anEvent 	"The class has changed, time to update the instances"	(anEvent itemClass == self			or: [anEvent itemClass == self class])		ifFalse: [^ self].	""	self updateInstances! !!TheWorldMainDockingBarOld class methodsFor: 'preferences' stamp: 'kb 11/19/2009 18:49'!showWorldMainDockingBar		<preference: 'Show world main docking bar'		category: 'docking bars'		description: 'Whether world''s main docking bar should be shown or not.'		type: #Boolean>	^Project current showWorldMainDockingBar! !!TheWorldMainDockingBar methodsFor: 'submenu - projects' stamp: 'dtl 11/23/2009 21:48'!updateJumpToProjectSubMenu: subMenu	subMenu defaultTarget: Project.	Project current buildJumpToMenu: subMenu! !!TheWorldMainDockingBarOld methodsFor: 'construction' stamp: 'kb 11/19/2009 18:49'!openDockingBar	^ self createDockingBar openInWorld ! !!MorphicProject methodsFor: 'release' stamp: 'dtl 11/22/2009 17:53'!prepareForDelete	"The window in which the project is housed is about to deleted. Perform	any necessary actions to prepare for deletion."	| is list |	Smalltalk at: #WonderlandCameraMorph ifPresent:[:aClass |		world submorphs do:   "special release for wonderlands"					[:m | (m isKindOf: aClass)							and: [m getWonderland release]]].	"Remove Player classes and metaclasses owned by project"	is := ImageSegment new arrayOfRoots: (Array with: self).	(list := is rootsIncludingPlayers) ifNotNil:		[list do: [:playerCls | 			(playerCls respondsTo: #isMeta) ifTrue:				[playerCls isMeta ifFalse:					[playerCls removeFromSystemUnlogged]]]]! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!switchToExpertMode	| ok |	ok := self confirm: 'CAUTION!!The expert mode is powerful as well as dangerous and you can break your Squeak in several ways.Are you sure to switch to expert mode?' translated.	ok		ifFalse: [^ self].	""	Preferences enable: #cmdGesturesEnabled.	Preferences enable: #debugHaloHandle.	Preferences disable: #noviceMode.! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!importFile	self findAnyFile! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!moveObjectsOnscreen	self world roundUpStrays! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'kb 11/20/2009 17:33'!saveImageAs	SmalltalkImage current saveAs! !!TheWorldMainDockingBar class methodsFor: 'timestamping' stamp: 'kb 11/19/2009 18:48'!timeStamp	"Answer the receiver's timeStamp"	^ TS! !!TheWorldMainDockingBar methodsFor: 'submenu - windows' stamp: 'kb 11/20/2009 17:52'!windowMenuFor: window on: menu	menu 		addItem: [ :item |			item				contents: 'Close';				target: window;				selector: #delete ];		addItem: [ :item |			item 				contents: 'Toggle Full Screen';				target: window;				selector: #expandBoxHit ]! !!MenuMorph methodsFor: 'update' stamp: 'kb 11/20/2009 13:38'!updateMenu	" Do nothing "! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!about	! !!TheWorldMainDockingBar methodsFor: 'submenu - tools' stamp: 'kb 11/20/2009 17:37'!browserMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Browser' translated;			help: 'Open a browser' translated;			icon: (self colorIcon: Preferences browserWindowColor);			target: StandardToolSet;			selector: #openClassBrowser ]! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'kb 11/20/2009 17:16'!aboutSqueak! !!TheWorldMainDockingBarOld methodsFor: 'construction' stamp: 'kb 11/19/2009 18:49'!gradientRamp	^{ 		0.0 -> Color white.		1.0 -> Preferences menuColor }! !!TheWorldMainDockingBarOld methodsFor: 'private' stamp: 'kb 11/19/2009 18:49'!createMenuItem: triplet on: menu 	| wording help selectorOrMenu |	wording := triplet first.	help := triplet second.	selectorOrMenu := triplet size > 3				ifTrue: [triplet fourth]				ifFalse: [self selectorForWording: wording].	""	selectorOrMenu isSymbol		ifTrue: [""			menu				add: wording translated				target: self				selector: selectorOrMenu]		ifFalse: [menu add: wording translated subMenu: selectorOrMenu].	""	help isNil		ifFalse: [menu lastItem setBalloonText: help translated].""	Preferences tinyDisplay		ifFalse: [triplet size > 2				ifTrue: [menu lastItem icon: triplet third]]! !!MorphicProject methodsFor: 'utilities' stamp: 'dtl 11/25/2009 13:29'!addItem: item toMenu: menu selection: action requestor: requestingProject	"Add a menu item representing this project to a menu being created by requestingProject"	| color |	"Color to be used for this menu item"	color := self world isInMemory						ifTrue: [Color black]						ifFalse: [Color brown].	"Menu item of type appropriate for current project"	requestingProject		addItem: item		toMenu: menu		selection: action		color: color		thumbnail: thumbnail! !!TheWorldMainDockingBarOld methodsFor: 'construction' stamp: 'kb 11/19/2009 18:49'!createDockingBar	"Create a docking bar from the receiver's representation"	| dockingBar |	dockingBar := DockingBarMorph new.	dockingBar adhereToTop.	dockingBar color: ColorTheme current dockingBarColor.	dockingBar gradientRamp: ColorTheme current  dockingBarGradientRamp.	dockingBar autoGradient: ColorTheme current dockingBarAutoGradient.	""	self fillDockingBar: dockingBar.	""	^ dockingBar! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!objectCatalog	self activateObjectsTool! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!saveAsNewVersion	SmalltalkImage current saveAsNewVersion! !!MenuItemMorph methodsFor: 'accessing' stamp: 'kb 11/20/2009 13:01'!addUpdatingSubMenu: aBlock	subMenu := UpdatingMenuMorph new.	subMenu updater: aBlock updateSelector: #value:.	self changed.! !!TheWorldMainDockingBarOld methodsFor: 'private - icons' stamp: 'kb 11/19/2009 18:49'!objectCatalogIcon	^ Preferences tinyDisplay		ifTrue: [MenuIcons smallObjectCatalogIcon]		ifFalse: [MenuIcons objectCatalogIcon]! !!TheWorldMainDockingBarOld methodsFor: 'construction - submenus' stamp: 'kb 11/19/2009 18:49'!squeakMenu	| menu |	menu := MenuMorph new defaultTarget: self.	""	" 	menu add: 'configuration...' translated subMenu: self  	configurationMenu. menu lastItem icon: MenuIcons  	smallConfigurationIcon. menu addLine.  	"	Preferences readOnlyMode ifFalse:[""	self createMenuItem: {'save'. 'Save the current state of Squeak on disk'. MenuIcons smallSaveIcon} on: menu.	self createMenuItem: {'save as...'. 'Save the current state of Squeak on disk under a new name'. MenuIcons smallSaveAsIcon} on: menu.	Preferences noviceMode		ifFalse: [""			self createMenuItem: {'save as new version'. 'Save the current state of Squeak on disk under a version-stamped name'. MenuIcons smallSaveAsIcon} on: menu].	menu addLine.	self createMenuItem: {'save and quit'. 'Save the current state of Squeak on disk, and quit out of Squeak'. MenuIcons smallQuitIcon} on: menu].	self createMenuItem: {'quit'. 'Quit out of Squeak'. MenuIcons smallQuitIcon} on: menu.	""	^ menu! !!TheWorldMainDockingBar methodsFor: 'submenu - windows' stamp: 'kb 11/20/2009 18:23'!listWindowsOn: menu	| expanded |	expanded := SystemWindow windowsIn: World satisfying: [ :w | w isCollapsed not ].	expanded ifEmpty: [ 		menu addItem: [ :item | 			item				contents: 'No open Windows' translated;				isEnabled: false ] ].	expanded do: [ :each |		menu addItem: [ :item |			item 				contents: (each label contractTo: 50);				icon: (self colorIcon: each paneColor);				subMenuUpdater: self				selector: #windowMenuFor:on:				arguments: { each };				action: [ each activateAndForceLabelToShow ] ] ].! !!TheWorldMainDockingBar methodsFor: 'submenu - projects' stamp: 'kb 11/20/2009 17:42'!loadProjectMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Load Project' translated;			help: 'Load a project from a file' translated;			icon: MenuIcons smallLoadProjectIcon;			target: self;			selector: #loadProject ]! !!MenuItemMorph methodsFor: 'private' stamp: 'kb 11/19/2009 18:03'!updateLayoutInDockingBar! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!viewSelectedObject	| selected menu |	selected := self world selectedObject.	selected isNil		ifTrue: [^ self viewObjectsHierarchy].	""	menu := selected buildYellowButtonMenu: ActiveHand.	menu		addTitle: selected externalName		icon: (selected iconOrThumbnailOfSize: (Preferences tinyDisplay ifTrue: [16] ifFalse: [28])).	menu popUpInWorld: selected currentWorld! !!MenuMorph methodsFor: 'events' stamp: 'kb 11/20/2009 16:53'!releasesSelection: evt	" The MenuMorph releases its selection if the selected item releases it. 	Used in #selectItem:event: "	self selectedItem ifNil: [ ^true ].	evt ifNil: [ ^true ].	(self selectedItem containsPoint: evt position) ifTrue: [ ^true ].	^self selectedItem releasesSelection: evt! !!DockingBarItemMorph methodsFor: 'rounding' stamp: 'kb 11/19/2009 17:53'!wantsRoundedCorners	^false! !!TheWorldMainDockingBar methodsFor: 'submenu - tools' stamp: 'kb 11/20/2009 17:38'!testRunnerMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Test Runner' translated;			help: 'Open the Test Runner' translated;			icon: (self colorIcon: TestRunner basicNew defaultBackgroundColor);			target: TestRunner;			selector: #open ]! !!DockingBarItemMorph methodsFor: 'as yet unclassified' stamp: 'kb 11/19/2009 18:20'!selectedIcon: aForm	selectedIcon := aForm! !!MenuItemMorph methodsFor: 'layout' stamp: 'kb 11/19/2009 17:40'!minWidth	| subMenuWidth iconWidth markerWidth |	subMenuWidth := self hasSubMenu		ifTrue: [ 10 ]		ifFalse: [ 0 ].	iconWidth := self hasIcon		ifTrue: [ self icon width + 2 ]		ifFalse: [ 0 ].	markerWidth := self hasMarker		ifTrue: [ self submorphBounds width + 8 ]		ifFalse: [ 0 ].	^(self fontToUse widthOfString: contents)		+ subMenuWidth + iconWidth + markerWidth! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!setWorldColor| world |world := self world.	world		changeColorTarget: world		selector: #color:		originalColor: world color		hand: world activeHand! !!TheWorldMainDockingBarOld methodsFor: 'private - icons' stamp: 'kb 11/19/2009 18:49'!forwardIcon	^ Preferences tinyDisplay		ifTrue: [MenuIcons smallForwardIcon]		ifFalse: [MenuIcons forwardIcon]! !!MouseOverHandler methodsFor: 'event handling' stamp: 'ul 11/23/2009 02:41'!processMouseOver: anEvent 	"Re-establish the z-order for all morphs wrt the given event"	| hand localEvt focus evt |	hand := anEvent hand.	leftMorphs := mouseOverMorphs asIdentitySet.	"Assume some coherence for the number of objects in over list"	overMorphs := WriteStream on: (Array new: leftMorphs size).	enteredMorphs := WriteStream on: #().	"Now go looking for eventual mouse overs"	hand handleEvent: anEvent asMouseOver.	"Get out early if there's no change"	(leftMorphs isEmpty and: [ enteredMorphs position = 0 ]) 		ifTrue: [ ^self initializeTrackedMorphs ].	focus := hand mouseFocus.	"Send #mouseLeave as appropriate"	evt := anEvent asMouseLeave.	"Keep the order of the left morphs by recreating it from the mouseOverMorphs"	leftMorphs size > 1 		ifTrue: [leftMorphs := mouseOverMorphs select: [:m | leftMorphs includes: m]].	leftMorphs do: [ :m | 		(m == focus or: [m hasOwner: focus])			ifFalse: [ overMorphs nextPut: m ]			ifTrue: [				localEvt := evt transformedBy: (m transformedFrom: hand).				m handleEvent: localEvt ] ].	enteredMorphs ifNil: [ "inform: was called in handleEvent:"		^self initializeTrackedMorphs ].	"Send #mouseEnter as appropriate"	evt := anEvent asMouseEnter.	enteredMorphs := enteredMorphs contents.	enteredMorphs reverseDo: [ :m | 		(m == focus or: [m hasOwner: focus]) ifTrue: [			localEvt := evt transformedBy: (m transformedFrom: hand).			m handleEvent: localEvt ] ].	"And remember the over list"	overMorphs ifNotNil: [		mouseOverMorphs := overMorphs contents ].	self initializeTrackedMorphs! !!MenuMorph methodsFor: 'events' stamp: 'kb 11/21/2009 10:21'!handleMouseMove: evt	" If the mouse moves over an item not selected, we try to set it as selected.	If this happens depends on that the current selected item wants to release	its selection. "	self selectedItem ifNil: [ ^super handleMouseMove: evt ].	(self selectedItem containsPoint: evt position) ifTrue: [ ^super handleMouseMove: evt ].	self 		selectItem: (			self items 				detect: [ :each | each containsPoint: evt position ] 				ifNone: [ nil ])		event: evt.	super handleMouseMove: evt! !!DockingBarItemMorph methodsFor: 'private' stamp: 'kb 11/19/2009 18:03'!updateLayoutInDockingBar		owner isVertical		ifTrue: [			self hResizing: #spaceFill.			self vResizing: #shrinkWrap ]		ifFalse: [			self hResizing: #shrinkWrap.			self vResizing: #spaceFill ].	self extent: self minWidth @ self minHeight! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'kb 11/20/2009 17:33'!saveImage	SmalltalkImage current saveSession! !!MorphicProject methodsFor: 'docking bars support' stamp: 'kb 11/19/2009 12:02'!showWorldMainDockingBar	^ self projectPreferenceFlagDictionary		at: #showWorldMainDockingBar		ifAbsent: [ false ]! !!TheWorldMainDockingBar methodsFor: 'submenu - squeak' stamp: 'kb 11/20/2009 17:36'!updateMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Update Squeak' translated;			help: 'Load latest code updates via the internet' translated;			target: self;			selector: #updateSqueak ]! !!MenuIcons class methodsFor: 'accessing - icons' stamp: 'kb 11/19/2009 15:08'!squeakLogoIcon^ Icons		at: #squeakLogoIcon ifAbsentPut: [(Form	extent: 24@16	depth: 32	fromArray: #( 16777215 16777215 67108864 2063597568 1778384896 889192448 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 1610612736 1811939328 1610612736 16777215 16777215 16777215 16777215 16777215 905969664 889192448 16777215 1442840576 788529152 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 1711276032 469762048 16777215 1728053248 16777215 16777215 16777215 16777215 16777215 1006632960 704643072 16777215 16777215 1895825408 234881024 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 1207959552 838860800 16777215 16777215 1728053248 16777215 16777215 16777215 16777215 16777215 738197504 989855744 16777215 16777215 167772160 1862270976 16777215 16777215 16777215 16777215 16777215 16777215 16777215 83886080 1879048192 16777215 16777215 16777215 1744830464 16777215 16777215 16777215 16777215 16777215 469762048 1258291200 16777215 16777215 16777215 1543503872 520093696 16777215 16777215 16777215 16777215 16777215 16777215 1543503872 335544320 16777215 16777215 16777215 1761607680 16777215 16777215 16777215 16777215 16777215 16777216 1644167168 16777215 16777215 16777215 33554432 67108864 16777215 16777215 16777215 16777215 16777215 16777215 33554432 16777215 16777215 16777215 16777215 1795162112 16777215 16777215 16777215 16777215 16777215 16777215 1711276032 16777215 16777215 16777215 16777215 16777215 117440512 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 100663296 1677721600 16777215 16777215 16777215 16777215 16777215 16777215 1744830464 16777215 16777215 16777215 16777215 3019898880 4009754624 1056964608 16777215 16777215 1090519040 3204448256 1325400064 16777215 16777215 16777215 889192448 889192448 16777215 16777215 16777215 16777215 16777215 16777215 1392508928 352321536 16777215 16777215 637534208 4278190080 4278190080 2650800128 16777215 16777215 3372220416 4278190080 3758096384 16777215 16777215 16777215 1560281088 117440512 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 134217728 4060086272 4278190080 1929379840 16777215 16777215 3187671040 4278190080 3590324224 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 704643072 1577058304 83886080 16777215 16777215 771751936 2667577344 956301312 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 369098752 973078528 1577058304 1728053248 1711276032 1325400064 805306368 218103808 16777215 858262026 925501705 16777216 16777215 268435456 788529152 1308622848 1593835520 1056964608 436207616 16777216 16777215 16777215 1442840576 1761607680 1409286144 788529152 301989888 872415232 1124073472 1627389952 1929379840 973078528 2032667403 4280814347 4280814347 2166885388 1040187392 1946157056 1577058304 939524096 452984832 687865856 1325400064 1778384896 1795162112 1392508928 16777215 16777215 855638016 1795162112 1677721600 855638016 620756992 436207616 486539264 285212672 2032667403 4280814347 4280814347 2166885388 486539264 1023410176 922746880 1157627904 1392508928 1845493760 1744830464 486539264 16777215 16777215 201326592 2013265920 1006632960 16777215 553648128 1694498816 1778384896 1694498816 1728053248 738197504 16777215 858262026 925501705 16777216 738197504 1728053248 1744830464 1778384896 1476395008 251658240 117440512 1476395008 1879048192 150994944 16777215 16777216 16777215 486539264 1426063360 16777216 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 234881024 1728053248 486539264 16777215 167772160 50331648)	offset: 0@0)]! !!TheWorldMainDockingBarOld methodsFor: 'private - buttons' stamp: 'kb 11/19/2009 18:49'!offColor	"Private - answer the off color"	^ Color black alpha: 0.01! !!TheWorldMainDockingBarOld methodsFor: 'construction - submenus' stamp: 'kb 11/19/2009 18:49'!saveMenuItem	^{	'Save Image'. 		'Save the current state of Squeak on disk'. 		MenuIcons smallSaveIcon.		#save }! !!TheWorldMainDockingBarOld methodsFor: 'construction - submenus' stamp: 'kb 11/19/2009 18:49'!saveAndQuitMenuItem	^{	'Save And Quit'. 		'Save the current state of Squeak on disk, and quit out of Squeak'. 		MenuIcons smallQuitIcon.		#saveAndQuit }! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!findAProject	FileList2		morphicViewProjectLoader2InWorld: self world		reallyLoad: true		dirFilterType: #limitedSuperSwikiDirectoryList! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!nextProject	Project advanceToNextProject.	Beeper beep! !!MenuItemMorph methodsFor: 'accessing' stamp: 'kb 11/20/2009 17:40'!subMenuUpdater: updater selector: selector	subMenu := UpdatingMenuMorph new.	subMenu updater: updater updateSelector: selector.	self changed.! !!TheWorldMainDockingBarOld methodsFor: 'construction' stamp: 'kb 11/19/2009 18:49'!fillDockingBar: aDockingBar 	"Private - fill the given docking bar"	self fillMenuItemsBar: aDockingBar.	""	aDockingBar addSpacer.	self fillNavigatorOn: aDockingBar.	""	aDockingBar addSpacer.	Preferences tinyDisplay		ifFalse: [| clock | 			clock := ClockMorph new.			clock show24hr: true.			clock showSeconds: false.			clock font: Preferences standardMenuFont emphasis: 0.			aDockingBar addMorphBack: clock.			aDockingBar addSpace: 5.	""	aDockingBar		addMorphBack: (self				createButtonIcon: self volumeIcon				help: 'Change sound volume' translated				selector: #changeSoundVolume)].	aDockingBar		addMorphBack: (self				createButtonIcon: self fullScreenIcon				help: (ScreenController lastScreenModeSelected						ifTrue: ['Exit from full screen']						ifFalse: ['Switch to full screen'])				selector: #toggleFullScreen).	aDockingBar		addMorphBack: (self				createButtonIcon: (SelectedObjectThumbnail						extent: 37 @ 28								- (Preferences tinyDisplay										ifTrue: [12]										ifFalse: [0])						noSelectedThumbnail: self objectsIcon						noSelectedBalloonText: 'View objects hierarchy' translated)				selector: #viewSelectedObject).	""	aDockingBar setProperty: #mainDockingBarTimeStamp toValue: self class timeStamp! !!MenuItemMorph methodsFor: 'selecting' stamp: 'kb 11/19/2009 17:33'!adjacentTo	^{ self bounds topRight + (10 @ 0). self bounds topLeft }! !!DockingBarItemMorph methodsFor: 'layout' stamp: 'kb 11/19/2009 17:47'!minWidth	| iconWidth |	iconWidth := self hasIcon		ifTrue: [ self icon width + 2 ]		ifFalse: [ 0 ].	^ (self fontToUse widthOfString: contents) + iconWidth + (2 * self stringMargin)! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'kb 11/20/2009 10:31'!projectsMenuOn: aDockingBar	aDockingBar addItem: [ :item |		item			contents: 'Projects' translated;			addSubMenu: [ :menu | 				self					newProjectMenuItemOn: menu;					saveProjectMenuItemOn: menu;					loadProjectMenuItemOn: menu;					previousProjectMenuItemOn: menu;					jumpToProjectMenuItemOn: menu ] ]! !!MenuItemMorph methodsFor: 'drawing' stamp: 'kb 11/19/2009 17:37'!drawOn: aCanvas 	| stringColor stringBounds |	isSelected & isEnabled		ifTrue: [			aCanvas fillRectangle: self bounds fillStyle: self selectionFillStyle.			stringColor := color negated ]		ifFalse: [ stringColor := color ].	stringBounds := bounds.	self hasIcon ifTrue: [		| iconForm | 		iconForm := self iconForm.		aCanvas 			translucentImage: iconForm 			at: stringBounds left @ (self top + (self height - iconForm height // 2)).		stringBounds := stringBounds left: stringBounds left + iconForm width + 2 ].	self hasMarker ifTrue: [		stringBounds := stringBounds left: stringBounds left + self submorphBounds width + 8 ].	stringBounds := stringBounds top: stringBounds top + stringBounds bottom - self fontToUse height // 2.	aCanvas		drawString: contents		in: stringBounds		font: self fontToUse		color: stringColor.	self hasSubMenu		ifTrue: [| subMenuMarker subMenuMarkerPosition | 			subMenuMarker := self subMenuMarker.			subMenuMarkerPosition := self right - subMenuMarker width @ (self top + self bottom - subMenuMarker height // 2).			aCanvas paintImage: subMenuMarker at: subMenuMarkerPosition ]! !!DockingBarItemMorph methodsFor: 'as yet unclassified' stamp: 'kb 11/19/2009 18:22'!iconForm	"private - answer the form to be used as the icon"	^isEnabled		ifTrue: [			(isSelected and: [ selectedIcon notNil ])				ifTrue: [ selectedIcon ]				ifFalse: [ icon ] ]		ifFalse: [			icon asGrayScale ]! !!UpdatingMenuMorph methodsFor: 'initialization' stamp: 'kb 11/20/2009 17:49'!updater: anObject updateSelector: aSelector arguments: anArray	updater := anObject.	updateSelector := aSelector.	arguments := anArray! !!TheWorldMainDockingBarOld methodsFor: 'construction - submenus' stamp: 'kb 11/19/2009 18:49'!saveAsNewVersionMenuItem	^{	'Save As New Version'. 		'Save the current state of Squeak on disk under a version-stamped name'. 		MenuIcons smallSaveAsIcon.		#saveAsNewVersion }! !!TheWorldMainDockingBar methodsFor: 'submenu - squeak' stamp: 'kb 11/20/2009 17:33'!saveAsMenuItemOn: menu	menu addItem: [ :item |			item			contents: 'Save Image As...' translated;			help: 'Save the current state of Squeak on disk under a new name' translated;			icon: MenuIcons smallSaveAsIcon;			target: self;			selector: #saveImageAs ]! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!saveAndQuit	SmalltalkImage current snapshot: true andQuit: true! !!TheWorldMainDockingBar methodsFor: 'submenu - tools' stamp: 'kb 11/20/2009 17:38'!workspaceMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Workspace' translated;			help: 'Open a Workspace' translated;			icon: (self colorIcon: Preferences workspaceWindowColor);			target: StandardToolSet;			selector: #openWorkspace ]! !!TheWorldMainDockingBar class methodsFor: 'instance creation' stamp: 'kb 11/19/2009 18:48'!new	"Singleton, use #instance"	^ self error: 'Use #instance'! !!DockingBarItemMorph methodsFor: 'selecting' stamp: 'kb 11/20/2009 22:24'!adjacentTo		owner isFloating		ifTrue: [^ {self bounds bottomLeft + (4 @ 4)}].	owner isAdheringToTop		ifTrue: [^ {self bounds bottomLeft + (4 @ 4)}].	owner isAdheringToLeft		ifTrue: [^ {self bounds topRight + (4 @ 4)}].	owner isAdheringToBottom		ifTrue: [^ {self bounds topLeft + (4 @ 4)}].	owner isAdheringToRight		ifTrue: [^ {self bounds topLeft + (4 @ -4)}].	^ {self bounds bottomLeft + (3 @ 5)}! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!makeNewDrawing	self doNewPainting! !!MouseOverHandler methodsFor: 'initialize-release' stamp: 'ul 11/23/2009 02:28'!initialize	mouseOverMorphs := Array new.	self initializeTrackedMorphs! !!DockingBarItemMorph methodsFor: 'drawing' stamp: 'kb 11/19/2009 20:20'!drawOn: aCanvas 	| stringColor stringBounds |	(isSelected and: [ isEnabled ])		ifTrue: [			aCanvas fillRectangle: self bounds fillStyle: self selectionFillStyle.			stringColor := color negated ]		ifFalse: [ stringColor := color ].	stringBounds := bounds.	stringBounds := stringBounds left: stringBounds left + self stringMargin.	self hasIcon ifTrue: [		| iconForm | 		iconForm := self iconForm.		aCanvas 			translucentImage: iconForm 			at: stringBounds left @ (self top + (self height - iconForm height // 2)).			stringBounds := stringBounds left: stringBounds left + iconForm width + 2 ].	stringBounds := stringBounds top: stringBounds top + stringBounds bottom - self fontToUse height // 2.	aCanvas		drawString: contents		in: stringBounds		font: self fontToUse		color: stringColor! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!toggleFullScreen	ScreenController lastScreenModeSelected		ifTrue: [ScreenController new fullScreenOff]		ifFalse: [ScreenController new fullScreenOn].	self world positionSubmorphs.self class updateInstances! !!TheWorldMainDockingBarOld methodsFor: 'private - buttons' stamp: 'kb 11/19/2009 18:49'!onColor"Private - answer the on color"	^ (Preferences menuSelectionColor		ifNil: [Color blue])		alpha: 0.4! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!clearTurtleTrails	self world clearTurtleTrails! !!MenuItemMorph methodsFor: 'private' stamp: 'kb 11/19/2009 17:58'!selectionFillStyle	" Answer the fill style to use with the receiver is the selected  	element "	| fill baseColor preferenced |	Display depth <= 2 ifTrue: [		^Color gray ].	preferenced := Preferences menuSelectionColor.	preferenced notNil ifTrue: [ ^preferenced ].	baseColor := owner color negated.	Preferences gradientMenu ifFalse: [ ^baseColor ].	fill := GradientFillStyle ramp: { 		0.0 -> baseColor twiceLighter. 		1 -> baseColor twiceDarker }.	fill origin: self topLeft.	^ fill! !!TheWorldMainDockingBarOld class methodsFor: 'timestamping' stamp: 'kb 11/19/2009 18:49'!setTimeStamp	"Change the receiver's timeStamp"	TS := UUID new! !!TheWorldMainDockingBar methodsFor: 'submenu - projects' stamp: 'kb 11/20/2009 17:45'!previousProjectMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Previous Project' translated;			help: 'Return to the most-recently-visited project' translated;			icon: MenuIcons smallBackIcon;			target: World;			selector: #goBack ]! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!saveAs	SmalltalkImage current saveAs! !!TheWorldMainDockingBar class methodsFor: 'preferences' stamp: 'kb 11/19/2009 18:48'!showWorldMainDockingBar: aBoolean		Project current showWorldMainDockingBar: aBoolean! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'kb 11/20/2009 17:24'!save	SmalltalkImage current snapshot: true andQuit: false! !!TheWorldMainDockingBar methodsFor: 'submenu - tools' stamp: 'kb 11/20/2009 17:37'!fileListMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'File List' translated;			help: 'Open a file list' translated;			icon: (self colorIcon: Preferences fileListWindowColor);			target: StandardToolSet;			selector: #openFileList ]! !!TheWorldMainDockingBar class methodsFor: 'instance creation' stamp: 'kb 11/19/2009 18:48'!instance	"Answer the receiver's instance"	^ Instance		ifNil: [Instance := super new]! !!MorphicProject methodsFor: 'utilities' stamp: 'dtl 11/23/2009 14:46'!interruptName: labelString preemptedProcess: theInterruptedProcess	"Create a Notifier on the active scheduling process with the given label."	| preemptedProcess projectProcess |	ActiveHand ifNotNil:[ActiveHand interrupted].	ActiveWorld := World. "reinstall active globals"	ActiveHand := World primaryHand.	ActiveHand interrupted. "make sure this one's interrupted too"	ActiveEvent := nil.	projectProcess := UIProcess.	"we still need the accessor for a while"	preemptedProcess := theInterruptedProcess ifNil: [Processor preemptedProcess].	"Only debug preempted process if its priority is >= projectProcess' priority"	preemptedProcess priority < projectProcess priority 		ifTrue:[preemptedProcess := projectProcess].	preemptedProcess suspend.	Debugger openInterrupt: labelString onProcess: preemptedProcess! !!MorphicProject methodsFor: 'utilities' stamp: 'dtl 11/25/2009 13:54'!addItem: item toMenu: menu selection: action color: aColor thumbnail: aForm	"Add menu item representing the sender to a menu"	menu		add: item		selector: #jumpToSelection:		argument: action.	menu lastItem color: aColor.	aForm isNil		ifFalse: [menu lastItem				icon: (aForm						scaledIntoFormOfSize: (Preferences tinyDisplay								ifTrue: [16]								ifFalse: [28]))]! !!MenuItemMorph methodsFor: 'accessing' stamp: 'kb 11/20/2009 00:27'!action: aBlock	self 		target: aBlock;		selector: #value! !!DockingBarItemMorph methodsFor: 'private' stamp: 'kb 11/19/2009 17:57'!selectionFillStyle	| fill |	fill := super selectionFillStyle.	fill isColor ifTrue: [ ^fill ].	self owner isVertical		ifFalse: [ fill direction: 0 @ self height ]		ifTrue: [ fill direction: self width @ 0 ].	^fill! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!objectFromPasteBuffer	ActiveHand 	pasteMorph! !!DockingBarItemMorph methodsFor: 'layout' stamp: 'kb 11/19/2009 20:19'!stringMargin	^Preferences tinyDisplay		ifTrue: [ 1 ]		ifFalse: [ 6 ]! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!windows	self worldMenu windowsMenu popUpInWorld! !!TheWorldMainDockingBarOld methodsFor: 'private' stamp: 'kb 11/19/2009 18:49'!updateIfNeeded: aDockingBar "Update the given docking bar if needed"	| timeStamp |	timeStamp := aDockingBar				valueOfProperty: #mainDockingBarTimeStamp				ifAbsent: [^ self].	timeStamp = self class timeStamp		ifTrue: [^ self].	""	aDockingBar removeAllMorphs.	self fillDockingBar: aDockingBar! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!eToyVocabularySummary	Cursor wait		showWhile: [self world printVocabularySummary]! !!TheWorldMainDockingBarOld methodsFor: 'private - icons' stamp: 'kb 11/19/2009 18:49'!publishIcon	^ Preferences tinyDisplay		ifTrue: [MenuIcons smallPublishIcon]		ifFalse: [MenuIcons publishIcon]! !!TheWorldMainDockingBarOld class methodsFor: 'events' stamp: 'kb 11/19/2009 18:49'!updateInstances: anEvent 	"The class has changed, time to update the instances"	(anEvent itemClass == self			or: [anEvent itemClass == self class])		ifFalse: [^ self].	""	self updateInstances! !!MenuItemMorph methodsFor: 'events' stamp: 'kb 11/19/2009 17:44'!mouseDown: evt	"Handle a mouse down event. Menu items get activated when the mouse is over them."	evt shiftPressed ifTrue: [ ^super mouseDown: evt ].  "enable label editing" 	evt hand newMouseFocus: owner. "Redirect to menu for valid transitions"	owner selectItem: self event: evt! !!TheWorldMainDockingBarOld methodsFor: 'private' stamp: 'kb 11/19/2009 18:49'!world^ World! !!PasteUpMorph methodsFor: 'world state' stamp: 'dtl 11/23/2009 23:38'!jumpToProject	Project current jumpToProject.! !!MouseOverHandler methodsFor: 'initialize-release' stamp: 'ul 11/23/2009 02:28'!initializeTrackedMorphs	leftMorphs := OrderedCollection new.	overMorphs := WriteStream on: #().	enteredMorphs := WriteStream on: #().! !!MenuItemMorph methodsFor: 'private' stamp: 'kb 11/19/2009 17:59'!subMenuMarker	"private - answer the form to be used as submenu marker"		^self rightArrow! !!MenuItemMorph methodsFor: 'selecting' stamp: 'kb 11/21/2009 10:57'!deselect: evt	self isSelected: false.	lastMousePosition := nil.	subMenu ifNotNil: [		owner ifNotNil: [ owner activeSubmenu: nil ] ].! !!TheWorldMainDockingBarOld methodsFor: 'construction - submenus' stamp: 'kb 11/19/2009 18:49'!helpMenu	| menu |	menu := MenuMorph new defaultTarget: self.	""	self createMenuItem: {'move objects onscreen'. 'Bring back all objects whose current coordinates keep them from being visible, so that at least a portion of each of my interior objects can be seen'} on: menu.	self createMenuItem: {'unhide hidden objects'. 'If any items on the world are currently hidden, make them visible'} on: menu.	menu addLine.	self createMenuItem: {'show all viewers'. 'Make visible the viewers for all objects which have user-written scripts in this playfield'} on: menu.	self createMenuItem: {'hide all viewers'. 'Make invisible the viewers for all objects in the world'} on: menu.	menu addLine.	self createMenuItem: {'clear turtle trails'. 'Remove any pigment laid down on the desktop by objects moving with their pens down'} on: menu."	menu addLine.	self createMenuItem: {'eToy vocabulary summary'. 'Displays a summary of all the pre-defined commands and properties in the pre-defined eToy vocabulary'} on: menu."	""	^ menu! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!changeSoundVolume	self notYetImplemented! !!TheWorldMainDockingBarOld class methodsFor: 'timestamping' stamp: 'kb 11/19/2009 18:49'!timeStamp	"Answer the receiver's timeStamp"	^ TS! !!TheWorldMainDockingBar methodsFor: 'submenu - projects' stamp: 'kb 11/26/2009 20:41'!newProjectMenuItemOn: menu	menu addItem: [ :item | 		item			contents: 'New Project' translated;			help: 'Start a new MorphicProject' translated;			icon: MenuIcons smallProjectIcon;			target: self;			selector: #newProject:;			arguments: { MorphicProject };			subMenuUpdater:  self			selector: #updateNewProjectSubMenu: ]! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'kb 11/20/2009 17:36'!updateSqueak	Utilities updateFromServer! !!DockingBarItemMorph methodsFor: 'events' stamp: 'kb 11/19/2009 17:44'!mouseDown: evt	"Handle a mouse down event. Menu items get activated when the mouse is over them."	evt shiftPressed ifTrue: [ ^super mouseDown: evt ].  "enable label editing" 	isSelected		ifTrue: [			evt hand newMouseFocus: nil.			owner selectItem: nil event: evt. ]		ifFalse: [			evt hand newMouseFocus: owner. "Redirect to menu for valid transitions"			owner selectItem: self event: evt. ]! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!quit	Preferences readOnlyMode		ifTrue: [""(self confirm: 'REALLY quit Squeak?' translated)				ifTrue: [SmalltalkImage current snapshot: false andQuit: true]]		ifFalse: [| saveBeforeQuitting | 			saveBeforeQuitting := self						confirm: 'Save changes before quitting?' translated						orCancel: [^ self].			SmalltalkImage current snapshot: saveBeforeQuitting andQuit: true]! !!TheWorldMainDockingBarOld methodsFor: 'private - icons' stamp: 'kb 11/19/2009 18:49'!volumeIcon	^ Preferences tinyDisplay		ifTrue: [MenuIcons smallVolumeIcon]		ifFalse: [MenuIcons volumeIcon]! !!TheWorldMainDockingBar class methodsFor: 'class initialization' stamp: 'kb 11/20/2009 09:51'!initialize	" self initialize "		Locale addLocalChangedListener: self.	self updateInstances! !!MenuItemMorph methodsFor: 'accessing' stamp: 'kb 11/20/2009 00:07'!addSubMenu: aBlock	subMenu := MenuMorph new.	aBlock value: subMenu.	self changed.! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!publishProject	self		publishStyle: #limitedSuperSwikiPublishDirectoryList		forgetURL: false		withRename: false! !!TheWorldMainDockingBar class methodsFor: 'as yet unclassified' stamp: 'kb 11/19/2009 18:48'!localeChanged	self updateInstances! !!TheWorldMainDockingBarOld methodsFor: 'construction - submenus' stamp: 'kb 11/19/2009 18:49'!projectMenu	| menu |	menu := MenuMorph new defaultTarget: self.	""	Preferences noviceMode		ifFalse: [""			self createMenuItem: {'open...'. nil. MenuIcons smallOpenIcon} on: menu.			self createMenuItem: {'windows...'. nil. MenuIcons smallWindowIcon} on: menu.			menu addLine].	""	self createMenuItem: {'previous project'. 'Return to the most recently visited project'. MenuIcons smallBackIcon} on: menu.	self createMenuItem: {'jump to project...'. 'Put up a list of all projects, letting me choose one to go to'. MenuIcons smallJumpIcon} on: menu.	self createMenuItem: {'next project'. 'Go to next project'. MenuIcons smallForwardIcon} on: menu.	menu addLine.	self createMenuItem: {'find any file'. 'Import a file into Squeak'. MenuIcons smallOpenIcon} on: menu.	self createMenuItem: {'find a project'. 'Open a project into Squeak'. MenuIcons smallLoadProjectIcon} on: menu.	menu addLine.	self createMenuItem: {'new project'. 'Start a new project'. MenuIcons smallProjectIcon} on: menu.	self createMenuItem: {'make new drawing'. 'Make a painting'. MenuIcons smallPaintIcon} on: menu.	self createMenuItem: {'object catalog (o)'. 'A tool for finding and obtaining many kinds of objects'. MenuIcons smallObjectCatalogIcon} on: menu.	menu addLine.	self createMenuItem: {'object from paste buffer'. 'Create a new object from paste buffer'. MenuIcons smallPasteIcon} on: menu.	Preferences useUndo		ifTrue: [""			Preferences infiniteUndo				ifTrue: [""					menu						addUpdating: #undoMenuWording						target: self commandHistory						action: #undoLastCommand.					menu						addUpdating: #redoMenuWording						target: self commandHistory						action: #redoNextCommand]				ifFalse: [""					menu						addUpdating: #undoOrRedoMenuWording						target: self commandHistory						action: #undoOrRedoCommand]].	menu addLine.	self createMenuItem: {'view objects hierarchy'. 'A tool for discovering the objects and the relations between them'. MenuIcons smallObjectsIcon} on: menu.	menu addLine.	self createMenuItem: {'publish project'. 'Publish the current project'. MenuIcons smallPublishIcon} on: menu.	""	^ menu! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!doNewPainting	| w |	w := self world.	w		assureNotPaintingElse: [^ self].	w		makeNewDrawing: (World primaryHand lastEvent copy setPosition: w center)! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!purgeUndoRecords	 CommandHistory resetAllHistory! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!viewObjectsHierarchy	"self world findWindow: nil"	MorphHierarchy openOrDelete! !!TheWorldMainDockingBarOld methodsFor: 'construction - submenus' stamp: 'dtl 11/23/2009 16:56'!configurationMenu	| menu |	menu := MenuMorph new defaultTarget: self.	""	self createMenuItem: {'set language...'. 'Choose the language in which Squeak should be displayed'. MenuIcons smallLanguageIcon} on: menu.	menu addLine.	self createMenuItem: {'update from server'. 'Update from server (Internet access is required)'. MenuIcons smallUpdateIcon} on: menu.	""	menu addLine.	menu addUpdating: #showWorldMainDockingBarString action: #toggleShowWorldMainDockingBar.	Flaps sharedFlapsAllowed		ifTrue: [menu				addUpdating: #suppressFlapsString				target: Project current				action: #toggleFlapsSuppressed].	menu addLine.	self createMenuItem: {'set world color...'. 'Choose a color to use as world background.'} on: menu.	ScreenController lastScreenModeSelected		ifTrue: [self createMenuItem: {'exit from full screen'. 'Exit from full screen and enclose Squeak in a window'. MenuIcons smallFullScreenIcon} on: menu]		ifFalse: [self createMenuItem: {'switch to full screen'. 'Switch to full screen giving the maximun display space to Squeak'. MenuIcons smallFullScreenIcon} on: menu].	""	self createMenuItem: {'change sound volume'. 'Change sound volume'. MenuIcons smallVolumeIcon} on: menu.	menu addLine.	Preferences noviceMode		ifFalse: [""			Preferences useUndo				ifTrue: [""					self createMenuItem: {'purge undo records'. 'Save space by removing all the undo information.'} on: menu.					menu addLine].			self createMenuItem: {'preferences..'. 'Opens a "Preferences Panel" which allows you to alter many settings'. MenuIcons smallConfigurationIcon} on: menu.			self createMenuItem: {'appearance...'. nil. MenuIcons smallConfigurationIcon} on: menu].	self createMenuItem: {'set color theme...'. 'Choose the color theme in which Squeak should be displayed'} on: menu.	menu addLine.	Preferences noviceMode		ifTrue: [self createMenuItem: {'switch to expert mode'. 'Switch to expert mode. CAUTION: The expert mode is powerful as well as dangerous'. MenuIcons smallExpertIcon} on: menu]		ifFalse: [self createMenuItem: {'switch to novice mode'. 'Come back to novice mode'. MenuIcons smallExpertIcon} on: menu].	""	^ menu! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!setColorTheme		SmallLandColorTheme chooseTheme.  ! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'kb 11/20/2009 09:41'!squeakMenuOn: aDockingBar 	"Private - fill the given docking bar"		aDockingBar addItem: [ :item |		item			contents: '';			icon: MenuIcons squeakLogoIcon;			selectedIcon: MenuIcons squeakLogoInvertedIcon;			addSubMenu: [ :menu | 				self					aboutMenuItemOn: menu;					updateMenuItemOn: menu.				menu addLine.				self 					saveMenuItemOn: menu;					saveAsMenuItemOn: menu;					saveAsNewVersionMenuItemOn: menu.				menu addLine.				self					saveAndQuitMenuItemOn: menu;					quitMenuItemOn: menu ] ]! !!TheWorldMainDockingBar class methodsFor: 'events' stamp: 'kb 11/19/2009 18:48'!updateInstances	"The class has changed, time to update the instances"	self setTimeStamp.	Project current assureMainDockingBarPresenceMatchesPreference! !!TheWorldMainDockingBarOld methodsFor: 'private' stamp: 'kb 11/19/2009 18:49'!worldMenu	^ TheWorldMenu new		world: self world		project: Project current		hand: self world activeHand; yourself! !!DockingBarMorph methodsFor: 'events-processing' stamp: 'kb 11/21/2009 18:17'!mouseDown: evt	(self fullContainsPoint: evt position) ifFalse: [		self selectItem: nil event: evt.		evt hand releaseMouseFocus: self ]! !!TheWorldMainDockingBarOld methodsFor: 'private - icons' stamp: 'kb 11/19/2009 18:49'!squeakLogoInvertedIcon	^MenuIcons squeakLogoInvertedIcon! !!DockingBarItemMorph methodsFor: 'private' stamp: 'kb 11/19/2009 17:59'!subMenuMarker	self shouldNotImplement! !!MenuItemMorph methodsFor: 'accessing' stamp: 'kb 11/20/2009 17:51'!subMenuUpdater: updater selector: selector arguments: arguments	subMenu := UpdatingMenuMorph new.	subMenu updater: updater updateSelector: selector arguments: arguments.	self changed.! !!TheWorldMainDockingBarOld methodsFor: 'private - buttons' stamp: 'kb 11/19/2009 18:49'!colorOnEvent: anEvent for: aMorph 	"Private - gives an on-color to the given morph"	aMorph color: self onColor! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'dtl 11/23/2009 23:39'!jumpToProject	Project current jumpToProject! !!TheWorldMainDockingBarOld class methodsFor: 'preferences' stamp: 'kb 11/19/2009 18:49'!showWorldMainDockingBarPreferenceChanged	"The preference #showWorldMainDockingBar has just  	changed"	Project current showWorldMainDockingBar:  Preferences showWorldMainDockingBar! !!PasteUpMorph methodsFor: 'event handling' stamp: 'ul 11/22/2009 22:45'!dropFiles: anEvent	"Handle a number of dropped files from the OS.	TODO:		- use a more general mechanism for figuring out what to do with the file (perhaps even offering a choice from a menu)		- remember the resource location or (when in browser) even the actual file handle	"	| numFiles stream handler |	numFiles := anEvent contents.	1 to: numFiles do: [ :i |		(stream := FileStream requestDropStream: i) ifNotNil: [			handler := ExternalDropHandler lookupExternalDropHandler: stream.			[ handler ifNotNil: [handler handle: stream in: self dropEvent: anEvent ] ]				ensure: [ stream close ] ] ].! !!TheWorldMainDockingBar methodsFor: 'submenu - tools' stamp: 'kb 11/20/2009 17:38'!transcriptMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Transcript' translated;			help: 'Open the Transcript' translated;			icon: (self colorIcon: Preferences transcriptWindowColor);			target: Transcript;			selector: #open ]! !!TheWorldMainDockingBarOld methodsFor: 'construction' stamp: 'kb 11/19/2009 18:49'!fillMenuItemsBar: aDockingBar 	"Private - fill the given docking bar"	| squeakIcon homeIcon configurationIcon helpIcon squeakLabel projectLabel configurationLabel helpLabel |	(aDockingBar isDockingBar not			or: [Preferences tinyDisplay])		ifTrue: [""			squeakIcon := MenuIcons smallSqueakIcon.			homeIcon := MenuIcons smallHomeIcon.			configurationIcon := MenuIcons smallConfigurationIcon.			helpIcon := MenuIcons smallHelpIcon]		ifFalse: [""			squeakIcon := MenuIcons squeakIcon.			homeIcon := MenuIcons homeIcon.			configurationIcon := MenuIcons configurationIcon.			helpIcon := MenuIcons helpIcon].	""	Preferences tinyDisplay		ifTrue: [""			squeakLabel := '' .			projectLabel := '' .			configurationLabel := '' .			helpLabel := '' ]		ifFalse: [""			squeakLabel := 'Squeak' translated.			projectLabel := 'Project' translated.			configurationLabel := 'Configuration' translated.			helpLabel := 'Help' translated].	""	aDockingBar		add: squeakLabel		icon: squeakIcon		help: 'Options related to Squeak as a whole' translated		subMenu: self squeakMenu.	aDockingBar		add: projectLabel		icon: homeIcon		help: 'Options to open things in the current project or to navigate between projects' translated		subMenu: self projectMenu.	aDockingBar		add: configurationLabel		icon: configurationIcon		help: 'Options to configure Squeak' translated		subMenu: self configurationMenu.	aDockingBar		add: helpLabel		icon: helpIcon		help: 'Helpful options or options to get help' translated		subMenu: self helpMenu! !!TheWorldMainDockingBarOld methodsFor: 'private - icons' stamp: 'kb 11/19/2009 18:49'!paintIcon	^ Preferences tinyDisplay		ifTrue: [MenuIcons smallPaintIcon]		ifFalse: [MenuIcons paintIcon]! !!TheWorldMainDockingBar class methodsFor: 'preferences' stamp: 'kb 11/19/2009 18:48'!showWorldMainDockingBar		<preference: 'Show world main docking bar'		category: 'docking bars'		description: 'Whether world''s main docking bar should be shown or not.'		type: #Boolean>	^Project current showWorldMainDockingBar! !!MenuMorph methodsFor: 'keyboard control' stamp: 'kb 11/20/2009 03:32'!displayFiltered: evt	| matchStr allItems isMatch matches feedbackMorph |	matchStr := self valueOfProperty: #matchString.	allItems := self submorphs select: [:m | m isKindOf: MenuItemMorph].	matches :=  allItems select: [:m | 		isMatch := 			matchStr isEmpty or: [				m contents includesSubstring: matchStr caseSensitive: false].		m isEnabled: isMatch.		isMatch].	feedbackMorph := self valueOfProperty: #feedbackMorph.	feedbackMorph ifNil: [		feedbackMorph := 			TextMorph new 				autoFit: true;				color: Color darkGray.		self			addLine;			addMorphBack: feedbackMorph lock.		self setProperty: #feedbackMorph toValue: feedbackMorph.		self fullBounds.  "Lay out for submorph adjacency"].	feedbackMorph contents: '<', matchStr, '>'.	matchStr isEmpty ifTrue: [		feedbackMorph delete.		self submorphs last delete.		self removeProperty: #feedbackMorph].	"matches size >= 1 ifTrue: [		self selectItem: matches first event: evt]"! !!TheWorldMainDockingBarOld methodsFor: 'private - buttons' stamp: 'kb 11/19/2009 18:49'!createButtonIcon: aFormOrMorph help: helpStringOrNil selector: selector 	"Private - Creates a button to fire an action from a docking bar"	| button icon |	button := RectangleMorph new.	button extent: aFormOrMorph extent + 2.	button borderWidth: 0.	button color: self offColor.	helpStringOrNil isNil		ifFalse: [button setBalloonText: helpStringOrNil translated].	""	icon := aFormOrMorph isMorph				ifTrue: [aFormOrMorph]				ifFalse: [SketchMorph withForm: aFormOrMorph].	button addMorphCentered: icon.	""	button		on: #mouseDown		send: #perform:event:for:		to: self		withValue: selector.	button		on: #mouseEnter		send: #colorOnEvent:for:		to: self.	button		on: #mouseLeave		send: #colorOffEvent:for:		to: self.	""	^ button! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!open	self worldMenu openMenu popUpInWorld! !!TheWorldMainDockingBar methodsFor: 'private' stamp: 'kb 11/19/2009 20:38'!colorIcon: aColor	Preferences tinyDisplay ifTrue: [ ^nil ].	^(aColor iconOrThumbnailOfSize: 14)		borderWidth: 3 color: Preferences menuColor muchDarker;		borderWidth: 2 color: Color transparent! !!MorphicProject methodsFor: 'utilities' stamp: 'dtl 11/23/2009 21:45'!jumpToProject	"Present a list of potential projects and enter the one selected."	"Project current jumpToProject"	| menu |menu:=MenuMorph new.menu defaultTarget: self.	menu := self buildJumpToMenu: menu.	menu popUpInWorld! !!MenuItemMorph methodsFor: 'events' stamp: 'kb 11/19/2009 17:50'!mouseUp: evt	"Handle a mouse up event. Menu items get activated when the mouse is over them. Do nothing if we're not in a 'valid menu transition', meaning that the current hand focus must be aimed at the owning menu."		evt hand mouseFocus == owner ifFalse: [ ^self ].	self contentString ifNotNil: [		self contents: self contentString withMarkers: true inverse: true.		self refreshWorld.		(Delay forMilliseconds: 200) wait ].	self deselect: evt.	self invokeWithEvent: evt.		! !!DockingBarMorph methodsFor: 'construction' stamp: 'kb 11/19/2009 17:31'!add: wordingString icon: aForm help: helpString subMenu: aMenuMorph 	"Append the given submenu with the given label."	| item |	item := DockingBarItemMorph new.	item contents: wordingString.	item subMenu: aMenuMorph.	item icon: aForm.	helpString isNil		ifFalse: [item setBalloonText: helpString].	self addMorphBack: item! !!TheWorldMainDockingBarOld methodsFor: 'private - icons' stamp: 'kb 11/19/2009 18:49'!projectIcon	^ Preferences tinyDisplay		ifTrue: [MenuIcons smallProjectIcon]		ifFalse: [MenuIcons projectIcon]! !!TheWorldMainDockingBar methodsFor: 'private' stamp: 'kb 11/19/2009 20:57'!gradientRamp	^{ 		0.0 -> Color white.		1.0 -> Preferences menuColor darker }! !!TheWorldMainDockingBarOld methodsFor: 'private - buttons' stamp: 'kb 11/19/2009 18:49'!colorOffEvent: anEvent for: aMorph 	"Private - gives an off-color to the given morph"	aMorph color: self offColor! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'kb 11/20/2009 17:18'!saveAndQuitSqueak	SmalltalkImage current snapshot: true andQuit: true! !!TheWorldMainDockingBarOld methodsFor: 'construction - submenus' stamp: 'kb 11/19/2009 18:49'!quitMenuItem	^{	'Quit'. 		'Quit out of Squeak'. 		MenuIcons smallQuitIcon.		#quit }! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'kb 11/20/2009 22:23'!createDockingBar	"Create a docking bar from the receiver's representation"		| dockingBar |	dockingBar := DockingBarMorph new		adhereToTop;		color: Preferences menuColor;		gradientRamp: self gradientRamp;		autoGradient: ColorTheme current dockingBarAutoGradient;		borderWidth: 0.	self fillDockingBar: dockingBar.	^ dockingBar! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'kb 11/20/2009 11:04'!helpMenuOn: aDockingBar	aDockingBar addItem: [ :item |		item			contents: 'Help' translated;			help: 'Todo' ]! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'kb 11/20/2009 17:22'!saveAsNewVersion	SmalltalkImage current saveAsNewVersion! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!findAnyFile	FileList2 morphicViewGeneralLoaderInWorld: self world! !!MorphicProject methodsFor: 'squeaklet on server' stamp: 'dtl 11/27/2009 13:42'!enterIfThereOrFind: aProjectName	| newProject |	newProject := Project named: aProjectName.	newProject ifNotNil: [^newProject enter].	ComplexProgressIndicator new 		targetMorph: nil;		historyCategory: 'project loading';		withProgressDo: [			[				newProject := self fromMyServerLoad: aProjectName			] 				on: ProjectViewOpenNotification				do: [ :ex | ex resume: false]							"we probably don't want a project view morph in this case"		].	newProject ifNotNil: [^newProject enter].	Beeper beep.! !!TheWorldMainDockingBarOld methodsFor: 'private - icons' stamp: 'kb 11/19/2009 18:49'!jumpIcon	^ Preferences tinyDisplay		ifTrue: [MenuIcons smallJumpIcon]		ifFalse: [MenuIcons jumpIcon]! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!hideAllViewers	self hideAllViewersIn: self world! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!showAllViewers	self world showAllPlayers! !!DockingBarItemMorph methodsFor: 'events' stamp: 'kb 11/19/2009 17:52'!mouseUp: evt	"Handle a mouse up event. Menu items get activated when the mouse is over them. Do nothing if we're not in a 'valid menu transition', meaning that the current hand focus must be aimed at the owning menu."		evt hand mouseFocus == owner ifFalse: [ ^self ].	self contentString ifNotNil: [		self contents: self contentString withMarkers: true inverse: true.		self refreshWorld.		(Delay forMilliseconds: 200) wait ].	owner rootMenu selectItem: nil event: evt.	self invokeWithEvent: evt! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!exitFromFullScreen	self toggleFullScreen! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!appearance	self worldMenu appearanceMenu popUpInWorld ! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!preferences	PreferenceBrowser open! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'dtl 11/23/2009 16:29'!previousProject	Project returnToPreviousProject.	Project current exit.	"go to parent if no previous"	Beeper beep.! !!MenuItemMorph methodsFor: 'events' stamp: 'kb 11/21/2009 09:20'!mouseLeaveDragging: evt 	"The mouse left the receiver. Do nothing if we're not in a 'valid menu transition', meaning that the current hand focus must be aimed at the owning menu."	owner ifNil: [^self].	evt hand mouseFocus == owner ifFalse: [ ^self ].	lastMousePosition := evt position.	owner selectItem: nil event: evt! !!TheWorldMainDockingBarOld methodsFor: 'private - icons' stamp: 'kb 11/19/2009 18:49'!openIcon	^ Preferences tinyDisplay		ifTrue: [MenuIcons smallOpenIcon]		ifFalse: [MenuIcons openIcon]! !!TheWorldMainDockingBar methodsFor: 'submenu - squeak' stamp: 'kb 11/20/2009 17:17'!quitMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Quit' translated;			help: 'Quit out of Squeak' translated;			icon: MenuIcons smallQuitIcon;			target: self;			selector: #quitSqueak ]! !!TheWorldMainDockingBarOld methodsFor: 'private - icons' stamp: 'kb 11/19/2009 18:49'!loadProjectIcon	^ Preferences tinyDisplay		ifTrue: [MenuIcons smallLoadProjectIcon]		ifFalse: [MenuIcons loadProjectIcon]! !!MorphicProject methodsFor: 'squeaklet on server' stamp: 'dtl 11/27/2009 13:38'!openBlankProjectNamed: projName	| proj projViewer |	proj := MorphicProject openViewOn: nil.	proj changeSet name: projName.	proj world addMorph: (		TextMorph new 			beAllFont: ((TextStyle default fontOfSize: 26) emphasized: 1);			color: Color red;			contents: 'Welcome to a new project - ',projName	).	proj setParent: self.	projViewer := (self findProjectView: projName) ifNil: [^proj].	(projViewer owner isSystemWindow) ifTrue: [			projViewer owner model: proj].	^ projViewer project: proj! !!TheWorldMainDockingBar methodsFor: 'submenu - projects' stamp: 'kb 11/20/2009 17:41'!jumpToProjectMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Jump To Project' translated;			icon: MenuIcons smallForwardIcon;			subMenuUpdater: self			selector: #updateJumpToProjectSubMenu: ]! !!TheWorldMainDockingBarOld class methodsFor: 'instance creation' stamp: 'kb 11/19/2009 18:49'!new	"Singleton, use #instance"	^ self error: 'Use #instance'! !!TheWorldMainDockingBarOld methodsFor: 'private - icons' stamp: 'kb 11/19/2009 18:49'!backIcon	^ Preferences tinyDisplay		ifTrue: [MenuIcons smallBackIcon]		ifFalse: [MenuIcons backIcon]! !!MenuItemMorph methodsFor: 'accessing' stamp: 'kb 11/20/2009 00:29'!help: aString	self setBalloonText: aString! !!TheWorldMainDockingBarOld methodsFor: 'private - buttons' stamp: 'kb 11/19/2009 18:49'!createButtonIcon: aFormOrMorph selector: selector 	"Private - Creates a button to fire an action from a docking bar"	^ self		createButtonIcon: aFormOrMorph		help: nil		selector: selector! !!MenuItemMorph methodsFor: 'events' stamp: 'kb 11/19/2009 17:45'!mouseEnter: evt	"The mouse entered the receiver"	owner ifNotNil: [ owner stayUp ifFalse: [ self mouseEnterDragging: evt ] ]! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!publishStyle: aSymbol forgetURL: aBoolean withRename: renameBoolean	| w primaryServer rename |	w := self world ifNil: [^Beeper beep].	w setProperty: #SuperSwikiPublishOptions toValue: aSymbol.	primaryServer := w project primaryServerIfNil: [nil].	rename := ((primaryServer notNil		and: [primaryServer acceptsUploads]) not)		or: [renameBoolean].	w setProperty: #SuperSwikiRename toValue: rename.	w project 		storeOnServerShowProgressOn: self 		forgetURL: aBoolean | rename.! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!setLanguage	Project current chooseNaturalLanguage ! !!TheWorldMainDockingBarOld class methodsFor: 'preferences' stamp: 'kb 11/19/2009 18:49'!showWorldMainDockingBar: aBoolean		Project current showWorldMainDockingBar: aBoolean! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!activateObjectsTool	self world activateObjectsTool! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!save	SmalltalkImage current snapshot: true andQuit: false! !!TheWorldMainDockingBarOld class methodsFor: 'instance creation' stamp: 'kb 11/19/2009 18:49'!instance	"Answer the receiver's instance"	^ Instance		ifNil: [Instance := super new]! !!DockingBarItemMorph methodsFor: 'events' stamp: 'kb 11/21/2009 18:13'!mouseLeaveDragging: evt ! !!TheWorldMainDockingBar methodsFor: 'submenu - squeak' stamp: 'kb 11/20/2009 17:21'!saveAndQuitMenuItemOn: menu	menu addItem: [ :item |		item			contents: 'Save And Quit' translated;			help: 'Save the current state of Squeak on disk, and quit out of Squeak' translated;			icon: MenuIcons smallQuitIcon;			target: self;			selector: #saveAndQuitSqueak ]! !!DockingBarMorph methodsFor: 'construction' stamp: 'kb 11/19/2009 23:57'!addItem: aBlock	| item |	item := DockingBarItemMorph new.	aBlock value: item.	self addMorphBack: item! !!TheWorldMainDockingBarOld methodsFor: 'construction - submenus' stamp: 'kb 11/19/2009 18:49'!aboutMenuItem	^{	'About Squeak...'. 		nil. 		nil.		#about }! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'kb 11/20/2009 10:54'!fillDockingBar: aDockingBar 	"Private - fill the given docking bar"		aDockingBar addSpace: 6.	self menusOn: aDockingBar.	aDockingBar		setProperty: #mainDockingBarTimeStamp 		toValue: self class timeStamp! !!DockingBarItemMorph methodsFor: 'events' stamp: 'kb 11/19/2009 17:46'!mouseEnter: evt	"The mouse entered the receiver"	super mouseEnter: evt.	(owner selectedItem notNil and: [ owner selectedItem ~~ self ]) ifTrue: [		owner selectItem: self event: evt. ]! !!MorphicProject methodsFor: 'utilities' stamp: 'dtl 11/22/2009 20:15'!findProjectView: projectDescription	"In this world, find the morph that holds onto the project described by projectDescription.	projectDescription can be a project, or the name of a project.  The project may be	represented by a DiskProxy. The holder morph may be at any depth in the world.."	| pName dpName |	pName := (projectDescription isString) 		ifTrue: [projectDescription]		ifFalse: [projectDescription name].	world allMorphsDo: [:pvm |	pvm class == ProjectViewMorph ifTrue: [		(pvm project class == Project and: 			[pvm project name = pName]) ifTrue: [^ pvm].			pvm project class == DiskProxy ifTrue: [ 			dpName := pvm project constructorArgs first.			dpName := (dpName findTokens: '/') last.			dpName := (Project parseProjectFileName: dpName unescapePercents) first.			dpName = pName ifTrue: [^ pvm]]]].	^ nil! !!UpdatingMenuMorph methodsFor: 'update' stamp: 'kb 11/20/2009 17:51'!updateMenu	"Reconstitute the menu by first removing the contents and then building it afresh"	self removeAllMorphs.	arguments 		ifNil: [ updater perform: updateSelector with: self ]		ifNotNil: [ 			updater 				perform: updateSelector 				withArguments: arguments, { self } ]	! !!MenuIcons class methodsFor: 'accessing - icons' stamp: 'kb 11/19/2009 18:20'!squeakLogoInvertedIcon^ Icons		at: #squeakLogoInvertedIcon ifAbsentPut: [(Form	extent: 24@16	depth: 32	fromArray: #( 16777215 16777215 83886079 2080374783 1795162111 905969663 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 1627389951 1828716543 1627389951 16777215 16777215 16777215 16777215 16777215 922746879 905969663 16777215 1459617791 805306367 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 1728053247 486539263 16777215 1744830463 16777215 16777215 16777215 16777215 16777215 1023410175 721420287 16777215 16777215 1912602623 251658239 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 1224736767 855638015 16777215 16777215 1744830463 16777215 16777215 16777215 16777215 16777215 754974719 1006632959 16777215 16777215 184549375 1879048191 16777215 16777215 16777215 16777215 16777215 16777215 16777215 100663295 1895825407 16777215 16777215 16777215 1761607679 16777215 16777215 16777215 16777215 16777215 486539263 1275068415 16777215 16777215 16777215 1560281087 536870911 16777215 16777215 16777215 16777215 16777215 16777215 1560281087 352321535 16777215 16777215 16777215 1778384895 16777215 16777215 16777215 16777215 16777215 33554431 1660944383 16777215 16777215 16777215 50331647 83886079 16777215 16777215 16777215 16777215 16777215 16777215 50331647 16777215 16777215 16777215 16777215 1811939327 16777215 16777215 16777215 16777215 16777215 16777215 1728053247 16777215 16777215 16777215 16777215 16777215 134217727 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 117440511 1694498815 16777215 16777215 16777215 16777215 16777215 16777215 1761607679 16777215 16777215 16777215 16777215 3036676095 4026531839 1073741823 16777215 16777215 1107296255 3221225471 1342177279 16777215 16777215 16777215 905969663 905969663 16777215 16777215 16777215 16777215 16777215 16777215 1409286143 369098751 16777215 16777215 654311423 4294967295 4294967295 2667577343 16777215 16777215 3388997631 4294967295 3774873599 16777215 16777215 16777215 1577058303 134217727 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 150994943 4076863487 4294967295 1946157055 16777215 16777215 3204448255 4294967295 3607101439 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 721420287 1593835519 100663295 16777215 16777215 788529151 2684354559 973078527 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 385875967 989855743 1593835519 1744830463 1728053247 1342177279 822083583 234881023 16777215 869791221 936769270 33554431 16777215 285212671 805306367 1325400063 1610612735 1073741823 452984831 33554431 16777215 16777215 1459617791 1778384895 1426063359 805306367 318767103 889192447 1140850687 1644167167 1946157055 989855743 2044196084 4292343028 4292343028 2178413555 1056964607 1962934271 1593835519 956301311 469762047 704643071 1342177279 1795162111 1811939327 1409286143 16777215 16777215 872415231 1811939327 1694498815 872415231 637534207 452984831 503316479 301989887 2044196084 4292343028 4292343028 2178413555 503316479 1040187391 939524095 1174405119 1409286143 1862270975 1761607679 503316479 16777215 16777215 218103807 2030043135 1023410175 16777215 570425343 1711276031 1795162111 1711276031 1744830463 754974719 16777215 869791221 936769270 33554431 754974719 1744830463 1761607679 1795162111 1493172223 268435455 134217727 1493172223 1895825407 167772159 16777215 33554431 16777215 503316479 1442840575 33554431 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 251658239 1744830463 503316479 16777215 184549375 67108863)	offset: 0@0)]! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'kb 11/20/2009 17:42'!loadProject	World worldMenu loadProject! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!switchToNoviceMode	Preferences disable: #cmdGesturesEnabled.	Preferences disable: #debugHaloHandle.	Preferences enable: #noviceMode.! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'dtl 11/23/2009 16:42'!suppressFlapsString	"Answer the wording of the suppress-flaps item"	^ Project current suppressFlapsString! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'kb 11/20/2009 10:53'!menusOn: aDockingBar 	self 		squeakMenuOn: aDockingBar;		projectsMenuOn: aDockingBar;		toolsMenuOn: aDockingBar;		windowsMenuOn: aDockingBar;		helpMenuOn: aDockingBar! !!TheWorldMainDockingBarOld methodsFor: 'construction' stamp: 'kb 11/19/2009 18:49'!fillNavigatorOn: main 	"main addLine."	main addDefaultSpace.	""	main		addMorphBack: (self				createButtonIcon: self backIcon				help: 'Previous project'				selector: #previousProject).	main		addMorphBack: (self				createButtonIcon: self jumpIcon				help: 'Put up a list of all projects, letting me choose one to go to'				selector: #jumpToProject).	main		addMorphBack: (self				createButtonIcon: self forwardIcon				help: 'Next project'				selector: #nextProject).	main		addMorphBack: (self				createButtonIcon: self openIcon				help: 'Find any file'				selector: #findAnyFile).Preferences tinyDisplay ifFalse:[""	main		addMorphBack: (self				createButtonIcon: self loadProjectIcon				help: 'Find a project'				selector: #findAProject)].	main addDefaultSpace.	main addSpacer.	main		addMorphBack: (self				createButtonIcon: self projectIcon				help: 'Start a new project'				selector: #newProject).	main		addMorphBack: (self				createButtonIcon: self paintIcon				help: 'Make a painting'				selector: #doNewPainting).	main		addMorphBack: (self				createButtonIcon: self objectCatalogIcon				help: 'Open the objects catalog'				selector: #activateObjectsTool).Preferences tinyDisplay ifFalse:[""	main		addMorphBack: (self				createButtonIcon: self publishIcon				help: 'Publish the current project'				selector: #publishProject)].	""	main addDefaultSpace! !!TheWorldMainDockingBarOld methodsFor: 'menu actions' stamp: 'kb 11/19/2009 18:49'!showWorldMainDockingBarString	^ self world showWorldMainDockingBarString! !!TheWorldMainDockingBarOld methodsFor: 'private' stamp: 'kb 11/19/2009 18:49'!selectorForWording: aString 	"Private - Create a valid smalltalk selector from an english  	wording.  	'foo' -> #foo  	'foo....' -> #foo  	'foo bar' -> #fooBar  	'foo bar (f)' - #fooBar  	"	| words selector temp |	temp := aString.	('*(*)*' match: temp)		ifTrue: [| pre post | 			pre := temp copyUpTo: $(.			post := temp copyAfterLast: $).			temp := pre , post].	""	temp := temp				collect: [:each | ""					each isLetter						ifTrue: [each]						ifFalse: [Character space]].	words := temp subStrings: Character separators.	selector := String				streamContents: [:stream | ""					words						do: [:word | stream nextPutAll: word capitalized]].	selector at: 1 put: selector first asLowercase.	""	^ selector asSymbol! !!TheWorldMainDockingBar methodsFor: 'menu actions' stamp: 'kb 11/20/2009 17:15'!quitSqueak	^SmalltalkImage current		snapshot: (			self 				confirm: 'Save changes before quitting?' translated 				orCancel: [ ^self ])		andQuit: true	! !!MenuMorph methodsFor: 'construction' stamp: 'kb 11/20/2009 00:05'!addItem: aBlock	| item |	item := MenuItemMorph new.	aBlock value: item.	self addMorphBack: item! !TheWorldMainDockingBar removeSelector: #makeNewDrawing!TheWorldMainDockingBar removeSelector: #toggleFullScreen!TheWorldMainDockingBar removeSelector: #onColor!TheWorldMainDockingBar removeSelector: #clearTurtleTrails!TheWorldMainDockingBar removeSelector: #saveAs!TheWorldMainDockingBar removeSelector: #objectFromPasteBuffer!TheWorldMainDockingBar removeSelector: #helpMenu!TheWorldMainDockingBar removeSelector: #windows!TheWorldMainDockingBar removeSelector: #eToyVocabularySummary!TheWorldMainDockingBar removeSelector: #publishIcon!TheWorldMainDockingBar removeSelector: #world!TheWorldMainDockingBar removeSelector: #changeSoundVolume!TheWorldMainDockingBar removeSelector: #quit!TheWorldMainDockingBar removeSelector: #volumeIcon!TheWorldMainDockingBar removeSelector: #publishProject!TheWorldMainDockingBar removeSelector: #projectMenu!TheWorldMainDockingBar removeSelector: #doNewPainting!TheWorldMainDockingBar removeSelector: #purgeUndoRecords!TheWorldMainDockingBar removeSelector: #viewObjectsHierarchy!TheWorldMainDockingBar removeSelector: #configurationMenu!TheWorldMainDockingBar removeSelector: #setColorTheme!TheWorldMainDockingBar removeSelector: #worldMenu!TheWorldMainDockingBar removeSelector: #paintIcon!MenuItemMorph removeSelector: #wantsRoundedCorners!TheWorldMainDockingBar removeSelector: #colorOnEvent:for:!TheWorldMainDockingBar removeSelector: #jumpToProject!TheWorldMainDockingBar class removeSelector: #showWorldMainDockingBarPreferenceChanged!TheWorldMainDockingBar removeSelector: #fillMenuItemsBar:!TheWorldMainDockingBar removeSelector: #createButtonIcon:help:selector:!TheWorldMainDockingBar removeSelector: #open!TheWorldMainDockingBar removeSelector: #projectIcon!TheWorldMainDockingBar removeSelector: #colorOffEvent:for:!TheWorldMainDockingBar removeSelector: #findAnyFile!TheWorldMainDockingBar removeSelector: #jumpIcon!TheWorldMainDockingBar removeSelector: #hideAllViewers!TheWorldMainDockingBar removeSelector: #showAllViewers!TheWorldMainDockingBar removeSelector: #exitFromFullScreen!TheWorldMainDockingBar removeSelector: #appearance!TheWorldMainDockingBar removeSelector: #preferences!TheWorldMainDockingBar removeSelector: #previousProject!TheWorldMainDockingBar removeSelector: #openIcon!TheWorldMainDockingBar removeSelector: #loadProjectIcon!TheWorldMainDockingBar removeSelector: #backIcon!TheWorldMainDockingBar removeSelector: #createButtonIcon:selector:!TheWorldMainDockingBar removeSelector: #publishStyle:forgetURL:withRename:!TheWorldMainDockingBar removeSelector: #setLanguage!TheWorldMainDockingBar removeSelector: #activateObjectsTool!TheWorldMainDockingBar removeSelector: #showWorldMainDockingBarString!TheWorldMainDockingBar removeSelector: #switchToNoviceMode!TheWorldMainDockingBar removeSelector: #newProject!TheWorldMainDockingBar removeSelector: #suppressFlapsString!MenuItemMorph removeSelector: #roundedCorners!TheWorldMainDockingBar removeSelector: #fillNavigatorOn:!TheWorldMainDockingBar removeSelector: #selectorForWording:!TheWorldMainDockingBar removeSelector: #updateFromServer!TheWorldMainDockingBar removeSelector: #objectsIcon!TheWorldMainDockingBar removeSelector: #toggleShowWorldMainDockingBar!TheWorldMainDockingBar removeSelector: #unhideHiddenObjects!TheWorldMainDockingBar removeSelector: #perform:event:for:!TheWorldMainDockingBar removeSelector: #hideAllViewersIn:!TheWorldMainDockingBar removeSelector: #switchToFullScreen!TheWorldMainDockingBar removeSelector: #fullScreenIcon!TheWorldMainDockingBar removeSelector: #openDockingBar!TheWorldMainDockingBar removeSelector: #switchToExpertMode!TheWorldMainDockingBar removeSelector: #importFile!TheWorldMainDockingBar removeSelector: #moveObjectsOnscreen!TheWorldMainDockingBar removeSelector: #createMenuItem:on:!TheWorldMainDockingBar removeSelector: #objectCatalog!TheWorldMainDockingBar removeSelector: #objectCatalogIcon!TheWorldMainDockingBar removeSelector: #squeakMenu!TheWorldMainDockingBar removeSelector: #viewSelectedObject!TheWorldMainDockingBar removeSelector: #forwardIcon!TheWorldMainDockingBar removeSelector: #setWorldColor!TheWorldMainDockingBar removeSelector: #offColor!TheWorldMainDockingBar removeSelector: #findAProject!TheWorldMainDockingBar removeSelector: #nextProject!TheWorldMainDockingBar removeSelector: #saveAndQuit!TheWorldMainDockingBarOld initialize!TheWorldMainDockingBar initialize!