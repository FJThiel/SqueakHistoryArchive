"Change Set:		8242ST80-dtl.71ST80-dtl.71:Move project navigation and menu methods from class side of Project to instance methods. Replace #isMorphic logic with dispatch to appropriate project instances for MVC and Morphic conditions.ST80-dtl.70:Implement #interruptName:preemptedProcess: on instance sideMVCProject>>findProjectView: refactored from ProjectMVCProject>>jumpToProject refactored from Prorject"!!MVCProject methodsFor: 'utilities' stamp: 'dtl 11/23/2009 14:47'!interruptName: labelString preemptedProcess: theInterruptedProcess	"Create a Notifier on the active scheduling process with the given label."	^ ScheduledControllers interruptName: labelString! !!MVCProject methodsFor: 'utilities' stamp: 'dtl 11/25/2009 13:56'!addItem: item toMenu: menu selection: action color: aColor thumbnail: aForm	"Add menu item representing the sender to a menu. Morphic projects use	aColor and aForm for menu items."	menu add: item action: action! !!MVCProject methodsFor: 'utilities' stamp: 'dtl 11/25/2009 13:29'!addItem: item toMenu: menu selection: action requestor: requestingProject	"Add a menu item representing this project to a menu being created by requestingProject"	| color |	"Color to be used for this menu item, will be ignored if current project is MVC"	color := self world isInMemory						ifTrue: [Color veryVeryDarkGray]						ifFalse: [Color blue].	"Menu item of type appropriate for current project"	requestingProject		addItem: item		toMenu: menu		selection: action		color: color		thumbnail: thumbnail! !!ProjectController methodsFor: 'control activity' stamp: 'dtl 11/23/2009 23:38'!redButtonActivity	| index |	view isCollapsed ifTrue: [^ super redButtonActivity].	(view insetDisplayBox containsPoint: Sensor cursorPoint)		ifFalse: [^ super redButtonActivity].	index := (UIManager default chooseFrom: #('enter' 'jump to project...') lines: #()).	index = 0 ifTrue: [^ self].	"save size on enter for thumbnail on exit"	model setViewSize: view insetDisplayBox extent.	index = 1 ifTrue: [^ model enter: false revert: false saveForRevert: false].	index = 2 ifTrue: [Project current jumpToProject. ^ self].! !!MVCProject methodsFor: 'utilities' stamp: 'dtl 11/22/2009 20:13'!findProjectView: projectDescription	"In this world, find the ProjectController for the project described by projectDescription."	| pName dpName proj |	pName := (projectDescription isString) 		ifTrue: [projectDescription]		ifFalse: [projectDescription name].	world scheduledControllers do: [:cont |		(cont isKindOf: ProjectController) ifTrue: [			((proj := cont model) class == Project and: 				[proj name = pName]) ifTrue: [^ cont view].			proj class == DiskProxy ifTrue: [ 				dpName := proj constructorArgs first.				dpName := (dpName findTokens: '/') last.				dpName := (Project parseProjectFileName: dpName unescapePercents) first.				dpName = pName ifTrue: [^ cont view]]]].	^ nil! !!ScreenController methodsFor: 'menu messages' stamp: 'dtl 11/23/2009 23:38'!jumpToProject	Project current jumpToProject.! !!MVCProject methodsFor: 'utilities' stamp: 'dtl 11/23/2009 21:44'!jumpToProject	"Present a list of potential projects and enter the one selected."	"Project current jumpToProject"	self jumpToSelection: (self buildJumpToMenu: CustomMenu new) startUpLeftFlush! !