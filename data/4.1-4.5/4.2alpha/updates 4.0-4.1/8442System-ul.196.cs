"Change Set:		8442System-ul.196System-ul.196:- replace sends of #ifNotNilDo: to #ifNotNil:, #ifNil:ifNotNilDo: to #ifNil:ifNotNil:, #ifNotNilDo:ifNil: to #ifNotNil:ifNil:System-bf.193:- after updating, set the current system version to the latest date found in all system packages. Also set the highest update number to the sum of version numbers.System-bf.194:- for setting system version update number, use the sum of version numbers in the system packages plus 4662 [Squeak 3.10.2 had as highest update 7179. The sum of version numbers in the very first Trunk config map (update.ar-1) was 2518. So the offset is 7179 - 2518 + 1 = 4662]System-bf.195:- after updating trunk, set the current system version to the latest date found in all system packages. Also set the highest update number to the sum of version numbers."!!Project methodsFor: 'menu messages' stamp: 'ul 12/12/2009 14:07'!makeThumbnail	"Make a thumbnail image of this project from the Display."	viewSize ifNil: [viewSize := Display extent // 8].	thumbnail := Form extent: viewSize depth: Display depth.	(WarpBlt current toForm: thumbnail)			sourceForm: Display;			cellSize: 2;  "installs a colormap"			combinationRule: Form over;			copyQuad: (Display boundingBox) innerCorners			toRect: (0@0 extent: viewSize).	(Smalltalk at: #InternalThreadNavigationMorph) ifNotNil: [:tnMorph |			tnMorph  cacheThumbnailFor: self].	^thumbnail! !!SARInstaller class methodsFor: 'SqueakMap' stamp: 'ul 12/12/2009 14:07'!cardForSqueakMap: aSqueakMap	"Answer the current card or a new card."	(aSqueakMap cardWithId: self squeakMapPackageID)		ifNotNil: [ :card |			(card installedVersion = self squeakMapPackageVersion) ifTrue: [ ^card ]		].	^self newCardForSqueakMap: aSqueakMap! !!PseudoClass methodsFor: 'testing method dictionary' stamp: 'ul 12/12/2009 14:07'!bindingOf: varName	self exists ifTrue:[		(self realClass bindingOf: varName) ifNotNil:[:binding| ^binding].	].	^Smalltalk bindingOf: varName asSymbol! !!Project methodsFor: 'menu messages' stamp: 'ul 12/12/2009 14:07'!validateProjectNameIfOK: aBlock	| details |	details := world valueOfProperty: #ProjectDetails.	details ifNotNil: ["ensure project info matches real project name"		details at: 'projectname' put: self name.	].	self doWeWantToRename ifFalse: [^aBlock value].	(Smalltalk at: #EToyProjectDetailsMorph) ifNotNil: [:etpdm |		etpdm			getFullInfoFor: self 			ifValid: [				World displayWorldSafely.				aBlock value.			] fixTemps			expandedFormat: false]! !!Project methodsFor: 'project parameters' stamp: 'ul 12/12/2009 14:07'!initializeProjectPreferences	"Initialize the project's preferences from currently-prevailing preferences that are currently being held in projects in this system"		projectPreferenceFlagDictionary := Project current projectPreferenceFlagDictionary deepCopy.    "Project overrides in the new project start out being the same set of overrides in the calling project"	Preferences allPreferenceObjects do:  "in case we missed some"		[:aPreference |			aPreference localToProject ifTrue:				[(projectPreferenceFlagDictionary includesKey: aPreference name) ifFalse:			[projectPreferenceFlagDictionary at: aPreference name put: aPreference preferenceValue]]].	(Project current projectParameterAt: #disabledGlobalFlapIDs  ifAbsent: [nil]) ifNotNil:		[:idList | self projectParameterAt: #disabledGlobalFlapIDs put: idList copy]! !!Preferences class methodsFor: 'personalization' stamp: 'ul 12/12/2009 14:07'!loadPreferencesFrom: aFileName	| stream params dict desktopColor |	stream := ReferenceStream fileNamed: aFileName.	params := stream next.	self assert: (params isKindOf: IdentityDictionary).	params removeKey: #PersonalDictionaryOfPreferences.	dict := stream next.	self assert: (dict isKindOf: IdentityDictionary).	desktopColor := stream next.	stream close.	dict keysAndValuesDo:		[:key :value | (self preferenceAt: key ifAbsent: [nil]) ifNotNil:			[:pref | pref preferenceValue: value preferenceValue]].	params keysAndValuesDo: [ :key :value | self setParameter: key to: value ].	Smalltalk isMorphic		ifTrue: [ World fillStyle: desktopColor ]		ifFalse: [ self desktopColor: desktopColor. ScheduledControllers updateGray ].! !!SystemNavigation methodsFor: 'query' stamp: 'ul 12/12/2009 14:05'!obsoleteMethodReferences	"SystemNavigation default obsoleteMethodReferences"	"Open a browser on all referenced behaviors that are obsolete"	| obsClasses obsRefs references |	references := WriteStream on: Array new.	obsClasses := self obsoleteBehaviors.	'Scanning for methods referencing obsolete classes' 		displayProgressAt: Sensor cursorPoint		from: 1		to: obsClasses size		during: 			[:bar | 			obsClasses keysAndValuesDo: 					[:index :each | 					bar value: index.					obsRefs := Utilities pointersTo: each except: obsClasses.					obsRefs do: 							[:ref | 							"Figure out if it may be a global"							(ref isVariableBinding and: [ref key isString	"or Symbol"]) 								ifTrue: 									[(Utilities pointersTo: ref) do: 											[:meth | 											(meth isKindOf: CompiledMethod) 												ifTrue: [meth methodReference ifNotNil: [:mref | references nextPut: mref]]]]]]].	^references contents! !!Utilities class methodsFor: 'fetching updates' stamp: 'bf 12/12/2009 02:53'!setSystemVersionFromConfig: anMCConfiguration	"Set the current system version date to the latest date found in anMCConfiguration (or the associated working copy). Also set the highest update number to the sum of version numbers in the config."	| versionNumbers versionDates |	versionNumbers := anMCConfiguration dependencies collect: [:d |		(d versionInfo name copyAfterLast: $.) asInteger].	versionDates := anMCConfiguration dependencies collect: [:d |		d versionInfo date			ifNil: [d package workingCopy ancestors first date]].	SystemVersion current		date: versionDates max;		highestUpdate: versionNumbers sum.! !!SARInstaller methodsFor: 'client services' stamp: 'ul 12/12/2009 14:07'!getMCBootstrapLoaderClass	^Smalltalk at: #MCBootstrapLoader		ifAbsent: 			[(self memberNamed: 'MCBootstrapLoader.st') 				ifNotNil: [:m | self fileInMemberNamed: m.					Smalltalk at: #MCBootstrapLoader ifAbsent: []]]! !!SystemChangeNotifier class methodsFor: 'private' stamp: 'ul 12/12/2009 14:06'!resetUniqueInstance	"self resetUniqueInstance"	UniqueInstance		ifNotNil: [:u | UniqueInstance releaseAll.			UniqueInstance := nil]! !!Imports methodsFor: 'icons' stamp: 'ul 12/12/2009 14:10'!importImageDirectory: directoryOrName 	| dir extensions forms |	dir := directoryOrName isString		ifFalse: [ directoryOrName ]		ifTrue: [ FileDirectory default directoryNamed: directoryOrName ].	dir exists		ifFalse: [self error: dir fullName , ' does not exist'. ^ #()].	extensions := (ImageReadWriter allTypicalFileExtensions add: 'form';				 yourself)				collect: [:ex | '.' , ex].	forms := OrderedCollection new.	dir fileNames		do: [:fileName | | fullName | (fileName endsWithAnyOf: extensions)				ifTrue: [fullName := dir fullNameFor: fileName.					(self importImageFromFileNamed: fullName)						ifNotNil: [:form | forms add: form]]].	^ forms! !!Preferences class methodsFor: 'personalization' stamp: 'ul 12/12/2009 14:07'!restorePersonalPreferences	"Restore all the user's saved personal preference settings"	| savedPrefs |	savedPrefs := self parameterAt: #PersonalDictionaryOfPreferences ifAbsent: [^ self inform: 'There are no personal preferences saved in this image yet'].	savedPrefs associationsDo:		[:assoc | (self preferenceAt: assoc key ifAbsent: [nil]) ifNotNil:			[:pref | pref preferenceValue: assoc value preferenceValue]]! !!Utilities class methodsFor: 'fetching updates' stamp: 'bf 12/11/2009 12:35'!updateFromServer	"Update the image by loading all pending updates from the server.  Also save local copies of the update files if the #updateSavesFile preference is set to true"	| config |	config := MCMcmUpdater updateFromRepositories: #(		'http://source.squeak.org/trunk'	).	self setSystemVersionFromConfig: config.	"self readServerUpdatesSaveLocally: Preferences updateSavesFile updateImage: true"! !