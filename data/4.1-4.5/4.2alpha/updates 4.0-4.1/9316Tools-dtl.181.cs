"Change Set:		9316Tools-dtl.181Tools-dtl.181:Move PopUpMenu>>computeLabelParagraph from package Tools to ST80.Move StandardFileMenu>>computeLabelParagraph from package Tools to ST80.Eliminate a reference to MVC ParagraphEditor in FileList>>fileContentsMenu:shifted:Cleaner fix for PopUpMenu class>>inform:Tools-nice.180:remove now useless fixTemps"!!FileList2 methodsFor: 'initialize-release' stamp: 'nice 2/11/2010 14:37'!initialize	showDirsInFileList := false.	fileSelectionBlock := [ :entry :myPattern |		entry isDirectory ifTrue: [			showDirsInFileList		] ifFalse: [			myPattern = '*' or: [myPattern match: entry name]		]	].	dirSelectionBlock := [ :dirName | true].! !!FileList2 class methodsFor: 'blue ui' stamp: 'nice 2/11/2010 14:37'!morphicViewGeneralLoaderInWorld: aWorld"FileList2 morphicViewGeneralLoaderInWorld: self currentWorld"	| window aFileList buttons treePane textColor1 fileListPane pane2a pane2b fileTypeInfo fileTypeButtons fileTypeRow actionRow |	fileTypeInfo := self endingSpecs.	window := AlignmentMorphBob1 newColumn.	window hResizing: #shrinkWrap; vResizing: #shrinkWrap.	textColor1 := Color r: 0.742 g: 0.839 b: 1.0.	aFileList := self new directory: FileDirectory default.	aFileList 		fileSelectionBlock: self projectOnlySelectionBlock;		modalView: window.	window		setProperty: #FileList toValue: aFileList;		wrapCentering: #center; cellPositioning: #topCenter;		borderWidth: ColorTheme current dialogBorderWidth;		borderColor: ColorTheme current dialogBorderColor;		useRoundedCorners.	fileTypeButtons := fileTypeInfo collect: [ :each |		(self blueButtonText: each first textColor: Color gray inWindow: window)			setProperty: #enabled toValue: true;			hResizing: #shrinkWrap;			useSquareCorners	].	buttons := {{'OK'. ColorTheme current okColor}. {'Cancel'. ColorTheme current cancelColor}} collect: [ :each |		self blueButtonText: each first textColor: textColor1 color: each second inWindow: window	].	treePane := aFileList morphicDirectoryTreePane 		extent: 250@300; 		retractable: false;		borderWidth: 0.	fileListPane := aFileList morphicFileListPane 		extent: 350@300; 		retractable: false;		borderWidth: 0.	window addARow: {window fancyText: 'Find...' translated font: Preferences standardEToysTitleFont color: textColor1}.	fileTypeRow := window addARowCentered: fileTypeButtons cellInset: 2.	actionRow := window addARowCentered: {		buttons first. 		(Morph new extent: 30@5) color: Color transparent. 		buttons second	} cellInset: 2.	window		addARow: {				(window inAColumn: {(pane2a := window inARow: {window inAColumn: {treePane}}) 					useRoundedCorners;					layoutInset: 0;					borderWidth: ColorTheme current dialogPaneBorderWidth;					borderColor: ColorTheme current dialogPaneBorderColor				}) layoutInset: 10.				(window inAColumn: {(pane2b := window inARow: {window inAColumn: {fileListPane}}) 					useRoundedCorners;					layoutInset: 0;					borderWidth: ColorTheme current dialogPaneBorderWidth;					borderColor: ColorTheme current dialogPaneBorderColor				}) layoutInset: 10.		}.	window fullBounds.	window fillWithRamp: ColorTheme current dialogRampOrColor oriented: 0.65.	pane2a fillWithRamp: ColorTheme current dialogPaneRampOrColor oriented: (0.7 @ 0.35).	pane2b fillWithRamp: ColorTheme current dialogPaneRampOrColor oriented: (0.7 @ 0.35)."	buttons do: [ :each |		each fillWithRamp: ColorTheme current dialogButtonsRampOrColor oriented: (0.75 @ 0).	]."	fileTypeButtons do: [ :each | 		each 			on: #mouseUp 			send: #value:value: 			to: [ :evt :morph | 				self update: actionRow in: window fileTypeRow: fileTypeRow morphUp: morph.			]	].	buttons first on: #mouseUp send: #okHit to: aFileList.	buttons second on: #mouseUp send: #cancelHit to: aFileList.	aFileList postOpen.	window position: aWorld topLeft + (aWorld extent - window extent // 2).	aFileList directoryChangeBlock: [ :newDir |		self update: actionRow in: window fileTypeRow: fileTypeRow morphUp: nil.		self enableTypeButtons: fileTypeButtons info: fileTypeInfo forDir: newDir.	].	aFileList directory: aFileList directory.	window adoptPaneColor: (Color r: 0.548 g: 0.677 b: 1.0).	window becomeModal.	^ window openInWorld: aWorld.! !!FileList2 class methodsFor: 'as yet unclassified' stamp: 'nice 2/11/2010 14:37'!projectOnlySelectionBlock	^[ :entry :myPattern |		entry isDirectory ifTrue: [			false		] ifFalse: [			#('*.pr' '*.pr.gz' '*.project') anySatisfy: [ :each | each match: entry name]		]	]! !!PopUpMenu class methodsFor: 'dialogs' stamp: 'dtl 2/11/2010 23:08'!inform: aString	"PopUpMenu inform: 'I like Squeak'"	| iconOrNil |	iconOrNil := Smalltalk at: #MenuIcons ifPresent: [:cls | cls confirmIcon].	(PopUpMenu labels: ' OK ' translated)		startUpWithCaption: aString		icon: iconOrNil! !!FileList methodsFor: 'file list menu' stamp: 'dtl 2/10/2010 22:26'!fileContentsMenu: aMenu shifted: shifted	"Construct aMenu to have items appropriate for the file browser's code pane, given the shift state provided"	| shiftMenu services maybeLine extraLines |	shifted ifTrue:		[shiftMenu := SelectionMenu fromArray: StringHolder shiftedYellowButtonMenuItems.		^ aMenu addAllFrom: shiftMenu].	fileName ifNotNil:		[services := OrderedCollection new.		(#(briefHex briefFile needToGetBriefHex needToGetBrief) includes: brevityState) ifTrue:			[services add: self serviceGet].		(#(fullHex briefHex needToGetFullHex needToGetBriefHex) includes: brevityState) ifFalse:			[services add: self serviceGetHex].		(#(needToGetShiftJIS needToGetEUCJP needToGetCNGB needToGetEUCKR needToGetUTF8) includes: brevityState) ifFalse:			[services add: self serviceGetEncodedText].		maybeLine := services size.		(FileStream sourceFileSuffixes includes: self suffixOfSelectedFile) ifTrue:			[services addAll:				(self servicesFromSelectorSpecs:					#(fileIntoNewChangeSet: fileIn: browseChangesFile: browseFile:))].		extraLines := OrderedCollection new.		maybeLine > 0 ifTrue: [extraLines add: maybeLine].		services size > maybeLine ifTrue: [extraLines add: services size].		aMenu 			addServices: services			for: self fullName			extraLines: extraLines].	aMenu addList: {			{'find...(f)' translated.		#find}.			{'find again (g)' translated.		#findAgain}.			{'set search string (h)' translated.	#setSearchString}.			#-.			{'do again (j)' translated.		#again}.			{'undo (z)' translated.			#undo}.			#-.			{'copy (c)' translated.			#copySelection}.			{'cut (x)' translated.			#cut}.			{'paste (v)' translated.		#paste}.			{'paste...' translated.			#pasteRecent}.			#-.			{'do it (d)' translated.		#doIt}.			{'print it (p)' translated.		#printIt}.			{'inspect it (i)' translated.		#inspectIt}.			{'fileIn selection (G)' translated.	#fileItIn}.			#-.			{'accept (s)' translated.		#accept}.			{'cancel (l)' translated.		#cancel}.			#-.			{'more...' translated.			#shiftedYellowButtonActivity}}.	^ aMenu! !!FileList2 class methodsFor: 'as yet unclassified' stamp: 'nice 2/11/2010 14:37'!selectionBlockForSuffixes: anArray	^[ :entry :myPattern |		entry isDirectory ifTrue: [			false		] ifFalse: [			anArray anySatisfy: [ :each | each match: entry name]		]	]! !!FileList2 class methodsFor: 'morphic ui' stamp: 'nice 2/11/2010 14:37'!morphicViewFileSelectorForSuffixes: aList directory: dir	"Answer a morphic file-selector tool for the given suffix list and the given directory."	| aFileList window fixedSize midLine gap |	aFileList := self new directory: dir.	aFileList optionalButtonSpecs: aFileList okayAndCancelServices.	aList ifNotNil:		[aFileList fileSelectionBlock: [:entry :myPattern |			entry isDirectory				ifTrue:					[false]				ifFalse:					[aList includes: (FileDirectory extensionFor: entry name asLowercase)]]].	window := BorderedMorph new		layoutPolicy: ProportionalLayout new;		color: Color lightBlue;		borderColor: Color blue;		borderWidth: 4;		layoutInset: 4;		extent: 600@400;		useRoundedCorners.	window setProperty: #fileListModel toValue: aFileList.	aFileList modalView: window.	midLine := 0.4.	fixedSize := 25.	gap := 5.	self addFullPanesTo: window from: {		{self textRow: 'Please select a file'. 0 @ 0 corner: 1 @ 0. 0@0 corner: 0@fixedSize}.		{aFileList optionalButtonRow. 0 @ 0 corner: 1 @ 0. 0@fixedSize corner: 0@(fixedSize * 2)}.		{aFileList morphicDirectoryTreePane. 0@0 corner: midLine@1. 					gap @(fixedSize * 2) corner: gap negated@0}.		{aFileList morphicFileListPane. midLine @ 0 corner: 1@1. 					gap@(fixedSize * 2) corner: gap negated@0}.	}.	aFileList postOpen.	^ window ! !!FileList2 class methodsFor: 'morphic ui' stamp: 'nice 2/11/2010 14:37'!morphicViewImageViewer	| dir aFileList window midLine fixedSize |	dir := FileDirectory default.	aFileList := self new directory: dir.	aFileList optionalButtonSpecs: aFileList specsForImageViewer.	aFileList fileSelectionBlock: [ :entry :myPattern |		entry isDirectory ifTrue: [			false		] ifFalse: [			#('bmp' 'gif' 'jpg' 'form' 'png') includes: 					 (FileDirectory extensionFor: entry name asLowercase)		]	].	window := (SystemWindow labelled: dir pathName) model: aFileList.	fixedSize := 25.	midLine := 0.4.	self addFullPanesTo: window from: {		{aFileList optionalButtonRow. 0 @ 0 corner: 1 @ 0.				0@0 corner: 0@fixedSize}.		{aFileList morphicDirectoryTreePane. 0@0 corner: midLine@1.				0@fixedSize corner: 0@0}.		{aFileList morphicFileListPane. midLine @ 0 corner: 1@1.				0@fixedSize corner: 0@0}.	}.	aFileList postOpen.	^ window ! !!FileList2 methodsFor: 'user interface' stamp: 'nice 2/11/2010 14:37'!blueButtonForService: aService textColor: textColor inWindow: window 	| block result |	block := [self fullName isNil				ifTrue: [self inform: 'Please select a file' translated]				ifFalse: [aService performServiceFor: self]].	result := window				fancyText: aService buttonLabel capitalized translated				font: Preferences standardEToysFont				color: textColor.	result setProperty: #buttonText toValue: aService buttonLabel capitalized;		 hResizing: #rigid;		 extent: 100 @ 20;		 layoutInset: 4;		 borderWidth: ColorTheme current dialogButtonBorderWidth;		 useRoundedCorners;		 setBalloonText: aService label.	result		on: #mouseUp		send: #value		to: block.	^ result! !StandardFileMenu removeSelector: #computeLabelParagraph!PopUpMenu removeSelector: #computeLabelParagraph!