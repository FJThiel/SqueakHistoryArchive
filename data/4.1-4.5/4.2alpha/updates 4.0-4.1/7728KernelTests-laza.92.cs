"Change Set:		7728KernelTests-laza.92KernelTests-laza.92:Removed the test that checks that too long delays are refused and added a test that checks that long delays are ok.KernelTests-tfel.89:Change a test in the Time tests to check if it allows nanSeconds at the end. Add a test in Date tests to check parsing from ISO8601. These are for a proposed change in the parsing methods.KernelTests-ar.90:Adds a test for http://bugs.squeak.org/view.php?id=6764.KernelTests-ar.91:http://bugs.squeak.org/view.php?id=7321Updated tests for waitTimeout."!!DateTest methodsFor: 'Tests' stamp: 'tfel 9/1/2009 07:09'!testConvertingFromIso8601	self 		assert: '1973-06-02' asDate = date;		assert: '1973-JUN-02' asDate = date;		assert: '1973-June-02' asDate = date! !!TimeTest methodsFor: 'Tests' stamp: 'tfel 9/1/2009 07:14'!testReadFrom	| t1 t2 |	t1 := self timeClass readFrom: '4:02:47 am' readStream.	t2 := self timeClass readFrom: '4:02:47.000 am' readStream.	self		assert: time = t1;		assert: time = t2! !!SemaphoreTest methodsFor: 'testing' stamp: 'jf 12/2/2003 19:31'!testWaitAndWaitTimeoutTogether	| semaphore value waitProcess waitTimeoutProcess |	semaphore := Semaphore new.		waitProcess := [semaphore wait. value := #wait] fork.	waitTimeoutProcess := [semaphore waitTimeoutMSecs: 50. value := #waitTimeout] fork.	"Wait for the timeout to happen"	(Delay forMilliseconds: 100) wait.	"The waitTimeoutProcess should already have timed out.  This should release the waitProcess"	semaphore signal.	[waitProcess isTerminated and: [waitTimeoutProcess isTerminated]]		whileFalse: [(Delay forMilliseconds: 100) wait].	self assert: value = #wait.	! !!DelayTest methodsFor: 'testing-limits' stamp: 'laza 9/5/2009 08:49'!testBounds	"self run: #testBounds"		self should: [Delay forMilliseconds: -1] raise: Error.	self shouldnt: [Delay forMilliseconds: SmallInteger maxVal + 1] raise: Error.	self shouldnt: [(Delay forMilliseconds: Float pi) wait] raise: Error. "Wait 3ms"! !!SemaphoreTest methodsFor: 'testing' stamp: 'ar 3/23/2009 17:01'!testWaitTimeoutMSecs	"Ensure that waitTimeoutMSecs behaves properly"	"Ensure that a timed out waitTimeoutMSecs: returns true from the wait"	self assert: (Semaphore new waitTimeoutMSecs: 50) == true.	"Ensure that a signaled waitTimeoutMSecs: returns false from the wait"	self assert: (Semaphore new signal waitTimeoutMSecs: 50) == false.! !!DurationTest methodsFor: 'Tests' stamp: 'ar 9/2/2009 19:57'!testReadFromTrailingDigits	"http://bugs.squeak.org/view.php?id=6764"	self should:  (Duration readFrom: '0:00:00:00.001 ' readStream) nanoSeconds = 1000000.! !