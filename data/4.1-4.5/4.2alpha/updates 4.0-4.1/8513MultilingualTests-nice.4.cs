"Change Set:		8513MultilingualTests-nice.4MultilingualTests-nice.4:Add a few tests for MultiByteFileStream.Includes an expected failure for backChunk."!!MultiByteFileStreamTest methodsFor: 'testing' stamp: 'nice 12/22/2009 00:20'!testNonAsciiBackChunk	"Note: this is an expected failure: MultiByteFileStream is not equipped to read back non ASCII String... (no comment)	As a consequence, never use non ASCII in method category nor in your initials. That would make a few tools blind..."		| foo fileName |		fileName := 'foobackchunk.txt'.		foo := MultiByteFileStream forceNewFileNamed: fileName.	[foo lineEndConvention: #cr; converter: UTF8TextConverter new.	foo cr; nextChunkPut: 'testé' printString.	foo cr; nextChunkPut: 'test' printString.	self assert: foo backChunk = (String cr , 'test' printString).	self assert: foo backChunk = (String cr , 'testé' printString).] ensure: [foo close].	FileDirectory default deleteFileNamed: fileName! !!MultiByteFileStreamTest methodsFor: 'testing' stamp: 'nice 12/21/2009 23:25'!testAsciiBackChunk		| foo fileName |		fileName := 'foobackchunk.txt'.		foo := MultiByteFileStream forceNewFileNamed: fileName.	[foo lineEndConvention: #cr; converter: UTF8TextConverter new.	foo cr; nextChunkPut: 'test1' printString.	foo cr; nextChunkPut: 'test2' printString.	self assert: foo backChunk = (String cr , 'test2' printString).	self assert: foo backChunk = (String cr , 'test1' printString).] ensure: [foo close].	FileDirectory default deleteFileNamed: fileName! !!MultiByteFileStreamTest methodsFor: 'testing' stamp: 'nice 12/21/2009 22:52'!testNextLine		| foo fileName |		fileName := 'foolinend.txt'.		foo := MultiByteFileStream forceNewFileNamed: fileName.	[foo wantsLineEndConversion: false.	foo nextPutAll: 'line 1'; cr; nextPutAll: 'line 2'; nextPutAll: String crlf; nextPutAll: 'line 3'; nextPut: Character lf; nextPutAll: 'line 4'] ensure: [foo close].	#(cr lf crlf nil) do: [:lineEnding |		foo := MultiByteFileStream oldFileNamed: fileName.		[foo lineEndConvention: lineEnding.		self assert: (foo nextLine) = ('line 1').		self assert: (foo nextLine) = ('line 2').		self assert: (foo nextLine) = ('line 3').		self assert: (foo nextLine) = ('line 4').		self assert: (foo nextLine) = nil] ensure: [foo close]].	FileDirectory default deleteFileNamed: fileName! !!MultiByteFileStreamTest methodsFor: 'testing' stamp: 'nice 12/21/2009 22:59'!testLineEnding		| foo fileName |		fileName := 'foolinend.txt'.		foo := MultiByteFileStream forceNewFileNamed: fileName.	[foo wantsLineEndConversion: false.	foo nextPutAll: 'line 1'; cr; nextPutAll: 'line 2'; nextPutAll: String crlf; nextPutAll: 'line 3'; nextPut: Character lf; nextPutAll: 'line 4'] ensure: [foo close].	{		{#cr.  'line 1' , String cr , 'line 2' , String cr , 'line 3' , String cr , 'line 4'}.		{#lf.  'line 1' , String cr , 'line 2' , String cr , 'line 3' , String cr , 'line 4'}.		{#crlf.  'line 1' , String cr , 'line 2' , String cr , 'line 3' , String cr , 'line 4'}.		{nil.  'line 1' , String cr , 'line 2' , String crlf , 'line 3' , String lf , 'line 4'}	} do: [:lineEndingResult |		foo := MultiByteFileStream oldFileNamed: fileName.		[foo lineEndConvention: lineEndingResult first.		self assert: (foo upToEnd) = lineEndingResult last] ensure: [foo close]].	FileDirectory default deleteFileNamed: fileName! !!MultiByteFileStreamTest methodsFor: 'testing' stamp: 'nice 12/21/2009 23:30'!expectedFailures	^#(#testNonAsciiBackChunk)! !