"Change Set:		7916Morphic-ar.201Morphic-ar.201:Remove further MVC (ParagraphEditor) dependencies.Morphic-nice.199:Fix http://bugs.squeak.org/view.php?id=6972Some TextConstants are hardcoded in TextLineMorphic-ar.200:Merging Morphic-ml.197:Avoid division by 0 if width or height degenerate to 0 in LayoutFrame>>minExtentFrom:"!Object subclass: #TextLine	instanceVariableNames: 'left right top bottom firstIndex lastIndex internalSpaces paddingWidth baseline leftMargin'	classVariableNames: ''	poolDictionaries: 'TextConstants'	category: 'Morphic-Text Support'!!TextEditor class methodsFor: 'keyboard shortcut tables' stamp: 'ar 10/5/2009 22:54'!initializeYellowButtonMenu	"Initialize the yellow button pop-up menu and corresponding messages."	"TextEditor initialize"	yellowButtonMenu := MenuMorph fromArray: {		{'find...(f)' translated.				#find}.		{'find again (g)' translated.			#findAgain}.		{'set search string (h)' translated.	#setSearchString}.		#-.		{'do again (j)' translated.			#again}.		{'undo (z)' translated.				#undo}.		#-.		{'copy (c)' translated.				#copySelection}.		{'cut (x)' translated.				#cut}.		{'paste (v)' translated.				#paste}.		{'paste...' translated.				#pasteRecent}.		#-.		{'set font... (k)' translated.			#offerFontMenu}.		{'set style... (K)' translated.		#changeStyle}.		{'set alignment...' translated.		#chooseAlignment}.		"		#-.		{'more...' translated.				#shiftedTextPaneMenuRequest}.		"	}! !!TextEditor class methodsFor: 'class initialization' stamp: 'ar 10/5/2009 22:55'!initialize 	"Initialize the keyboard shortcut maps and the shared buffers	for copying text across views and managing again and undo."  	"TextEditor initialize"	UndoSelection := FindText := ChangeText := Text new.	UndoMessage := Message selector: #halt.	self initializeCmdKeyShortcuts.	self initializeShiftCmdKeyShortcuts.	self initializeYellowButtonMenu.	self initializeShiftedYellowButtonMenu! !!LayoutFrame methodsFor: 'layout' stamp: 'ml 10/4/2009 15:18'!minExtentFrom: minExtent	"Return the minimal extent the given bounds can be represented in"	| width height left right top bottom |	left := leftFraction ifNil: [0.0].	right := rightFraction ifNil: [1.0].	width := left = right		ifTrue: [0]		ifFalse: [minExtent x / (right - left)].	top := topFraction ifNil: [0.0].	bottom := bottomFraction ifNil: [1.0].	height := bottom = top		ifTrue: [0]		ifFalse: [minExtent y / (bottom - top)].	leftOffset ifNotNil:[width := width + leftOffset].	rightOffset ifNotNil:[width := width + rightOffset].	topOffset ifNotNil:[height := height + topOffset].	bottomOffset ifNotNil:[height := height + bottomOffset].	^width truncated @ height truncated! !!PluggableTextMorph methodsFor: 'updating' stamp: 'ar 10/5/2009 21:39'!update: aSymbol 	aSymbol ifNil: [^self].	aSymbol == #flash ifTrue: [^self flash].	aSymbol == getTextSelector 		ifTrue: 			[self setText: self getText.			^self setSelection: self getSelection].	aSymbol == getSelectionSelector 		ifTrue: [^self setSelection: self getSelection].	(aSymbol == #autoSelect and: [getSelectionSelector notNil]) 		ifTrue: 			[self handleEdit: 					[(textMorph editor)						abandonChangeText; "no replacement!!"						setSearch: model autoSelectString;						againOrSame: true]].	aSymbol == #clearUserEdits ifTrue: [^self hasUnacceptedEdits: false].	aSymbol == #wantToChange 		ifTrue: 			[self canDiscardEdits ifFalse: [^self promptForCancel].			^self].	aSymbol == #appendEntry 		ifTrue: 			[self handleEdit: [self appendEntry].			^self refreshWorld].	aSymbol == #clearText 		ifTrue: 			[self handleEdit: [self changeText: Text new].			^self refreshWorld].	aSymbol == #bs 		ifTrue: 			[self handleEdit: [self bsText].			^self refreshWorld].	aSymbol == #codeChangedElsewhere 		ifTrue: 			[self hasEditingConflicts: true.			^self changed]! !!TextEditor methodsFor: 'editing keys' stamp: 'ar 10/5/2009 21:39'!abandonChangeText	^self class abandonChangeText! !!SmalltalkEditor class methodsFor: 'keyboard shortcut tables' stamp: 'ar 10/5/2009 23:21'!initializeShiftedYellowButtonMenu	"Initialize the yellow button pop-up menu and corresponding messages."	"SmalltalkEditor initialize"	shiftedYellowButtonMenu := MenuMorph fromArray: StringHolder yellowButtonMenuItems.! !!SmalltalkEditor class methodsFor: 'keyboard shortcut tables' stamp: 'ar 10/5/2009 23:21'!initializeYellowButtonMenu	"Initialize the yellow button pop-up menu and corresponding messages."	"SmalltalkEditor initialize"	yellowButtonMenu := MenuMorph fromArray: StringHolder yellowButtonMenuItems! !!TextLine methodsFor: 'accessing' stamp: 'nice 3/6/2008 22:44'!leftMarginForAlignment: alignmentCode	alignmentCode = RightFlush ifTrue: [^ self left + paddingWidth].	alignmentCode = Centered ifTrue: [^ self left + (paddingWidth//2)].	^ self left  "leftFlush and justified"! !!SmalltalkEditor class methodsFor: 'keyboard shortcut tables' stamp: 'ar 10/5/2009 22:56'!initialize	"SmalltalkEditor initialize"	self initializeCmdKeyShortcuts.	self initializeShiftCmdKeyShortcuts.	self initializeYellowButtonMenu.	self initializeShiftedYellowButtonMenu.! !!FillInTheBlankMorph methodsFor: 'menu' stamp: 'ar 10/5/2009 23:24'!codePaneMenu: aMenu shifted: shifted	^ StringHolder codePaneMenu: aMenu shifted: shifted.! !!TextMorph methodsFor: 'event handling' stamp: 'ar 10/5/2009 21:48'!getMenu: shiftKeyState 	^ (shiftKeyState not			or: [Preferences noviceMode])		ifTrue: [TextEditor yellowButtonMenu]		ifFalse: [TextEditor shiftedYellowButtonMenu]! !TextEditor initialize!SmalltalkEditor initialize!