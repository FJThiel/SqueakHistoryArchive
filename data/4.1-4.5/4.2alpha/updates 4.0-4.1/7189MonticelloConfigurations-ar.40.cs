"Change Set:		7189MonticelloConfigurations-ar.40MonticelloConfigurations-ar.40:MCMcmUpdater for loading update.mcm versions.MonticelloConfigurations-ar.39:Make McMcmReader work again."!Object subclass: #MCMcmUpdater	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MonticelloConfigurations'!MCVersionReader subclass: #MCMcmReader	instanceVariableNames: 'fileName configuration'	classVariableNames: ''	poolDictionaries: ''	category: 'MonticelloConfigurations'!!MCMcmReader methodsFor: 'accessing' stamp: 'ar 6/30/2009 17:06'!loadVersionInfo	info := self configuration! !!MCMcmReader methodsFor: 'accessing' stamp: 'ar 6/30/2009 17:06'!version	^self configuration! !!MCMcmReader methodsFor: 'accessing' stamp: 'ar 6/30/2009 17:05'!configuration	configuration ifNil: [self loadConfiguration].	"browser modifies configuration, but the reader might get cached"	^configuration copy! !!MCMcmUpdater class methodsFor: 'updating' stamp: 'ar 6/30/2009 17:19'!updateFromRepositories: repositoryUrls	"MCMcmUpdater updateFromRepositories: #(		'http://squeaksource.com/MCUpdateTest'	)"	| repos updateList parts base author version type config |	Preferences enable: #upgradeIsMerge.	"The list of repositories to consult in order"	repos := repositoryUrls collect:[:url| 		MCRepositoryGroup default repositories 			detect:[:r| r description = url]			ifNone:[ | r |				r := MCHttpRepository location: url user: '' password: ''.				MCRepositoryGroup default addRepository: r.				r]].	"The list of updates-author.version.mcm sorted by version"	updateList := SortedCollection new.	repos do:[:r|		"Find all the updates-author.version.mcm files"		r allFileNames do:[:versionedName|			parts := versionedName findTokens: '.-'.			parts size = 4 ifTrue:[				base := parts at: 1.				author := parts at: 2.				version := [(parts at: 3) asNumber] on: Error do:[:ex| ex return: 0].				type := parts at: 4.			].			(base = 'update' and:[version > 0 and:[type = 'mcm']]) 				ifTrue:[updateList add: version -> versionedName]].		"Now process each update file. Check if we have all dependencies and if not,		load the entire configuration (this is mostly to skip older updates quickly)"		updateList do:[:assoc|			config := r versionFromFileNamed: assoc value.			(config dependencies allSatisfy:[:dep| dep isFulfilled]) 				ifFalse:[config upgrade]].		"We've loaded all the provided update configurations.		Use the latest configuration to update all the remaining packages."		config updateFromRepositories.		config upgrade.	].! !!MCMcmReader methodsFor: 'accessing' stamp: 'ar 6/30/2009 17:05'!loadConfiguration	stream reset.	configuration := MCConfiguration fromArray: (MCScanner scan: stream).	configuration name: self configurationName.! !