"Change Set:		8960CollectionsTests-ar.135CollectionsTests-ar.135:Tests for sets with nil: Documents current behavior including the cases that aren't supported (KeyedSet and WeakSet since they have some additional requirements).CollectionsTests-ar.134:Tests for beginsWithAnyOf: and endsWithAnyOf:."!TestCase subclass: #SetWithNilTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CollectionsTests-Unordered'!!SetWithNilTest methodsFor: 'tests' stamp: 'ar 2/1/2010 20:14'!testIdentitySetWithNil	self shouldnt:[IdentitySet with: nil] raise: Error.	self shouldnt:[IdentitySet withAll: #(nil nil nil)] raise: Error.	self assert: (IdentitySet with: nil) size = 1.	self assert: (IdentitySet withAll: #(nil nil nil)) size = 1.	self assert: (IdentitySet with: nil) anyOne = nil.	self assert: ((IdentitySet with: nil) remove: nil) == nil.	self assert: ((IdentitySet with: nil) remove: nil; yourself) isEmpty.	self assert: (IdentitySet withAll: #(1 nil foo)) size = 3.	self assert: ((IdentitySet withAll: #(1 nil foo)) remove: nil; yourself) size = 2.	self assert: ((IdentitySet with: nil) collect:[:x| x]) = (IdentitySet with: nil).	self assert: ((IdentitySet with: nil) collect:[:x| x] as: Array) = #(nil).! !!SequenceableCollectionTest methodsFor: 'testing - testing' stamp: 'ar 2/1/2010 19:14'!testBeginsWithAnyOf	"We can't test SequenceableCollection directly. However, we can test a sampling of its descendants."	| la oc |	la := #(1 2 3 4 5 6).	oc := OrderedCollection new.	oc add: 1; add: 2; add: 3.	self assert: (la beginsWithAnyOf: #((17) (1) (42))).	self assert: (la beginsWithAnyOf: #((17) (1 2) (42))).	self assert: (la beginsWithAnyOf: #((17) (1 2 3) (42))).	self deny: (la beginsWithAnyOf: #()).	self deny: (la beginsWithAnyOf: #(())).	self deny: (la beginsWithAnyOf: #((42))).! !!SetWithNilTest methodsFor: 'tests' stamp: 'ar 2/1/2010 20:15'!testKeyedSetWithNil	self should:[KeyedSet with: nil] raise: Error.! !!SetWithNilTest methodsFor: 'tests' stamp: 'ar 2/1/2010 20:15'!testWeakSetWithNil	self should:[WeakSet with: nil] raise: Error.! !!SequenceableCollectionTest methodsFor: 'testing - testing' stamp: 'ar 2/1/2010 19:13'!testEndsWithAnyOf	"We can't test SequenceableCollection directly. However, we can test a sampling of its descendants."	| la oc |	la := #(6 5 4 3 2 1).	oc := OrderedCollection new.	oc add: 3; add: 2; add: 1.	self assert: (la endsWithAnyOf: #((17) (1) (42))).	self assert: (la endsWithAnyOf: #((17) (2 1) (42))).	self assert: (la endsWithAnyOf: #((17) (3 2 1) (42))).	self deny: (la endsWithAnyOf: #()).	self deny: (la endsWithAnyOf: #(())).	self deny: (la endsWithAnyOf: #((42))).! !!SetWithNilTest methodsFor: 'tests' stamp: 'ar 2/1/2010 20:14'!testSetWithNil	self shouldnt:[Set with: nil] raise: Error.	self shouldnt:[Set withAll: #(nil nil nil)] raise: Error.	self assert: (Set with: nil) size = 1.	self assert: (Set withAll: #(nil nil nil)) size = 1.	self assert: (Set with: nil) anyOne = nil.	self assert: ((Set with: nil) remove: nil) == nil.	self assert: ((Set with: nil) remove: nil; yourself) isEmpty.	self assert: (Set withAll: #(1 nil foo)) size = 3.	self assert: ((Set withAll: #(1 nil foo)) remove: nil; yourself) size = 2.	self assert: ((Set with: nil) collect:[:x| x]) = (Set with: nil).	self assert: ((Set with: nil) collect:[:x| x] as: Array) = #(nil).! !!SetWithNilTest methodsFor: 'tests' stamp: 'ar 2/1/2010 20:17'!testPluggableSetWithNil	self shouldnt:[PluggableSet with: nil] raise: Error.	self shouldnt:[PluggableSet withAll: #(nil nil nil)] raise: Error.	self assert: (PluggableSet with: nil) size = 1.	self assert: (PluggableSet withAll: #(nil nil nil)) size = 1.	self assert: (PluggableSet with: nil) anyOne = nil.	self assert: ((PluggableSet with: nil) remove: nil) == nil.	self assert: ((PluggableSet with: nil) remove: nil; yourself) isEmpty.	self assert: (PluggableSet withAll: #(1 nil foo)) size = 3.	self assert: ((PluggableSet withAll: #(1 nil foo)) remove: nil; yourself) size = 2.	self assert: ((PluggableSet with: nil) collect:[:x| x]) = (PluggableSet with: nil).	self assert: ((PluggableSet with: nil) collect:[:x| x] as: Array) = #(nil).! !