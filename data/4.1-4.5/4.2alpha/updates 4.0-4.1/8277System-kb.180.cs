"Change Set:		8277System-kb.180System-kb.180: - fix: implemented missing PragmaPreference >> provider to return its provider ivar.  This is needed for Preferences >> removePreferencesFor: to work, as it selects preferences based on their providers, which is implemented in Preference (the superclass of PragmaPreference) as to return nil.System-dtl.177:Bug fix - Change Project class>>deletingProject to use isKindOf: Project. Still need to factor out ProjectViewMorph dependencies in this method.System-nice.178:Remove two more uggly SmalltalkImage current getSystemAttribute: 1002IMO SmalltalkImage current osVersion is a bit more future proof than an obscure message with an hardcoded valueSystem-nice.179:Print Smalltalk with isSelfEvaluating styleBEFORE: a SystemDictionary(lots of globals)AFTER:  Smalltalk 'a SystemDictionary with lots of globals'"!!SystemDictionary methodsFor: 'printing' stamp: 'nice 11/2/2009 23:11'!printOn: aStream	self == Smalltalk		ifTrue: [aStream nextPutAll: #Smalltalk.			aStream nextPutAll:' "a SystemDictionary with lots of globals"']		ifFalse: [super printOn: aStream]! !!Project class methodsFor: 'utilities' stamp: 'dtl 11/27/2009 15:10'!deletingProject: outgoingProject	ImageSegment allSubInstancesDo: [:seg |		seg ifOutPointer: outgoingProject thenAllObjectsDo: [:obj |			(obj isKindOf: ProjectViewMorph) ifTrue: [				obj deletingProject: outgoingProject.  obj abandon].			(obj isKindOf: Project) ifTrue: [obj deletingProject: outgoingProject]]].	Project allProjects do: [:p | p deletingProject: outgoingProject].	"ones that are in"	ProjectViewMorph allSubInstancesDo: [:p | 		p deletingProject: outgoingProject.		p project == outgoingProject ifTrue: [p abandon]].	AllProjects := self allProjects copyWithout: outgoingProject.! !!PragmaPreference methodsFor: 'accessing' stamp: 'kb 11/28/2009 12:17'!provider	^provider! !!Locale class methodsFor: 'platform specific' stamp: 'nice 11/27/2009 21:59'!defaultEncodingName: languageSymbol 	| encodings platformName osVersion |	platformName := SmalltalkImage current platformName.	osVersion := SmalltalkImage current osVersion.	encodings := self platformEncodings at: languageSymbol				ifAbsent: [self platformEncodings at: #default].	encodings at: platformName ifPresent: [:encoding | ^encoding].	encodings at: platformName , ' ' , osVersion		ifPresent: [:encoding | ^encoding].	^encodings at: #default! !!Locale class methodsFor: 'platform specific' stamp: 'nice 11/27/2009 22:00'!defaultInputInterpreter	| platformName osVersion |	platformName := SmalltalkImage current platformName.	osVersion := SmalltalkImage current osVersion.	(platformName = 'Win32' and: [osVersion = 'CE']) 		ifTrue: [^NoInputInterpreter new].	platformName = 'Win32' ifTrue: [^MacRomanInputInterpreter new].	^NoInputInterpreter new! !