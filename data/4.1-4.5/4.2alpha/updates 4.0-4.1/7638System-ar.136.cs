"Change Set:		7638System-ar.136System-ar.136:Merged System-bp.131:fixed StandardSystemFontsTestsSystem-rkrk.133:Fixed Preferences giveHelpWithPreferences.See http://bugs.squeak.org/view.php?id=7391System-rss.134:Removing cruft left over from colorPrint browser option and colorWhenPrettyPrinting preference.System-nice.135:Fix http://bugs.squeak.org/view.php?id=7007The 'toggle break on entry' menu did install method with breakpoint in class side.This is essentially:Installer mantis ensureFix: 7007."!!Preferences class methodsFor: 'standard queries' stamp: ''!syntaxHighlightingAsYouTypeLeftArrowAssignment	^ self		valueOfFlag: #syntaxHighlightingAsYouTypeLeftArrowAssignment		ifAbsent: [false]! !!StandardSystemFontsTest methodsFor: 'utilities' stamp: 'bp 8/9/2009 20:09'!saveStandardSystemFontsDuring: aBlock	| standardDefaultTextFont standardListFont standardEToysFont standardMenuFont 	windowTitleFont standardBalloonHelpFont standardCodeFont standardButtonFont |	standardDefaultTextFont := Preferences standardDefaultTextFont.	standardListFont := Preferences standardListFont.	standardEToysFont := Preferences standardEToysFont.	standardMenuFont := Preferences standardMenuFont.	windowTitleFont := Preferences windowTitleFont.	standardBalloonHelpFont := Preferences standardBalloonHelpFont.	standardCodeFont := Preferences standardCodeFont.	standardButtonFont := Preferences standardButtonFont.	[aBlock value] ensure: [		Preferences setSystemFontTo: standardDefaultTextFont.		Preferences setListFontTo: standardListFont.		Preferences setEToysFontTo: standardEToysFont.		Preferences setMenuFontTo: standardMenuFont.		Preferences setWindowTitleFontTo: windowTitleFont.		Preferences setBalloonHelpFontTo: standardBalloonHelpFont.		Preferences setCodeFontTo: standardCodeFont.		Preferences setButtonFontTo: standardButtonFont]! !!Preferences class methodsFor: 'misc' stamp: 'rkrk 8/23/2009 18:05'!giveHelpWithPreferences	"Open up a workspace with explanatory info in it about Preferences"	| aString aHelpString |	aString := String streamContents: [:aStream | 		aStream nextPutAll:'Many aspects of the system are governed by the settings of various "Preferences".  Click on any of brown tabs at the top of the panel to see all the preferences in that category.  Or type in to the box above the Search button, then hit Search, and all Preferences matching whatever you typed in will appear in the "search results" category.  A preference is considered to match your search if either its name matches the characters *or* if anything in the balloon help provided for the preferences matches the search text.To find out more about any particular Preference, hold the mouse over it for a moment and balloon help will appear.  Also, a complete list of all the Preferences, with documentation for each, is included below.Preferences whose names are in shown in bold in the Preferences Panel are designated as being allowed to vary from project to project; those whose name are not in bold are "global", which is to say, they apply equally whatever project you are in.Click on the name of any preference to get a menu which allows you to *change* whether the preference should vary from project to project or should be global, and also allows you to browse all the senders of the preference, and to discover all the categories under which the preference has been classified, and to be handed a button that you can drop wherever you please that will control the preference.If you like all your current Preferences settings, you may wish to hit the "Save Current Settings as my Personal Preferences" button.  Once you have done that, you can at any point in the future hit "Restore my Personal Preferences" and all your saved settings will get restored immediately.Also, you can use "themes" to set multiple preferences all at once; click on the "change theme..." button in the Squeak flap or in the Preferences panel, or seek out the themes item in the Appearance menu.' translated.	aStream cr; cr; nextPutAll: '-----------------------------------------------------------------';		cr; cr; nextPutAll:  'Alphabetical listing of all Preferences' translated; cr; cr.   (Preferences allPreferenceObjects asSortedCollection: [:a :b | a name < b name]) do:	[:pref |		aStream nextPutAll: pref name; cr.		aHelpString := pref helpString translated.		(aHelpString beginsWith: pref name) ifTrue:			[aHelpString := aHelpString copyFrom: (pref name size + 3) to: aHelpString size].		aHelpString := (aHelpString copyReplaceAll: String cr with: ' ')  copyWithout: Character tab.		aStream nextPutAll: aHelpString capitalized.		(aHelpString isEmpty or: [aHelpString last == $.]) ifFalse: [aStream nextPut: $.].        aStream cr; cr]].	UIManager default edit: aString label: 'About Preferences' translated"Preferences giveHelpWithPreferences"! !!Preferences class methodsFor: 'themes - small-land' stamp: 'rss 8/23/2009 11:02'!smallLandPreferences	"Private - change the preferences according to small-land taste"	self setPreferencesFrom: #(		(haloEnclosesFullBounds true)		(showBoundsInHalo       true)		(cmdGesturesEnabled	false)		(easySelection			true)		(abbreviatedBrowserButtons       true)		(alternativeBrowseIt             true)		(alwaysShowVScrollbar            false)		(annotationPanes                 true)		(balloonHelpInMessageLists       true)		(browseWithDragNDrop             true)		(browseWithPrettyPrint           true)		(classicNewMorphMenu             true)		(collapseWindowsInPlace          true)		(diffsWithPrettyPrint            true)		(dragNDropWithAnimation          true)		(duplicateControlAndAltKeys      true)		(eToyFriendly                    true)		(extraDebuggerButtons            true)		(extractFlashInHighestQuality    true)		(fastDragWindowForMorphic        false)		(includeSoundControlInNavigator  true)		(menuKeyboardControl             true)		(menuAppearance3d			false)		(gradientMenu					false)		(mouseOverForKeyboardFocus       true)		(optionalButtons                 true)		(preserveTrash                   true)		(projectViewsInWindows           true)		(propertySheetFromHalo           true)		(scrollBarsNarrow                true)		(scrollBarsOnRight               true)		(selectiveHalos                  true)		(showDirectionForSketches        true)		(showDirectionHandles            true)		(slideDismissalsToTrash          true)		(translationWithBabel            true)		(unlimitedPaintArea              true)		(unlimitedPaintArea              true)		(menuColorFromWorld false)		(noviceMode true)		(uniqueNamesInHalos true)		(infiniteUndo true)		(useUndo true)		(soundStopWhenDone true)	).	self setParameter: #balloonHelpDelayTime to: 100.! !!BreakpointManager class methodsFor: 'install-uninstall' stamp: 'nice 4/10/2008 22:00'!installInClass: aClass selector: aSymbol 	"Install a new method containing a breakpoint.	The receiver will remember this for unstalling it later"	| breakMethod |	breakMethod := self compilePrototype: aSymbol in: aClass.	breakMethod isNil		ifTrue: [^ nil].	self installed at: breakMethod put: aClass >> aSymbol. "old method"	aClass basicAddSelector: aSymbol withMethod: breakMethod.! !!StandardSystemFontsTest methodsFor: 'testing' stamp: 'bp 8/9/2009 20:07'!testRestoreDefaultFonts	self saveStandardSystemFontsDuring: [		Preferences restoreDefaultFonts.		self assert: #standardDefaultTextFont familyName: 'Bitmap DejaVu Sans' pointSize: 9.		self assert: #standardListFont familyName: 'Bitmap DejaVu Sans' pointSize: 9.		self assert: #standardFlapFont familyName: 'Accushi' pointSize: 12.		self assert: #standardEToysFont familyName: 'BitstreamVeraSans' pointSize: 9.		self assert: #standardMenuFont familyName: 'Bitmap DejaVu Sans' pointSize: 9.		self assert: #windowTitleFont familyName: 'Bitmap DejaVu Sans' pointSize: 12.		self assert: #standardBalloonHelpFont familyName: 'Accujen' pointSize: 9.		self assert: #standardCodeFont familyName: 'Bitmap DejaVu Sans' pointSize: 9.		self assert: #standardButtonFont familyName: 'BitstreamVeraSansMono' pointSize: 9]! !!StandardSystemFontsTest methodsFor: 'utilities' stamp: 'bp 8/9/2009 19:57'!assert: selector familyName: aString pointSize: anInteger	| font |	font := Preferences perform: selector.	self assert: aString equals: font familyName.	self assert: anInteger equals: font pointSize! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'rss 8/23/2009 11:10'!testFormatter	"Smalltalk testFormatter"	"Reformats the source for every method in the system, and	then compiles that source and verifies that it generates	identical code. The formatting used will be either classic	monochrome or fancy polychrome, depending on the setting	of the preference #colorWhenPrettyPrinting." 		"Note: removed references to Preferences colorWhenPrettyPrinting and replaced them simply with false, as I've been removing this preference lately. --Ron Spengler 8/23/09"	| newCodeString methodNode oldMethod newMethod badOnes n |	badOnes := OrderedCollection new.	self forgetDoIts.	'Formatting all classes...' 		displayProgressAt: Sensor cursorPoint		from: 0		to: CompiledMethod instanceCount		during: 			[:bar | 			n := 0.			self systemNavigation allBehaviorsDo: 					[:cls | 					"Transcript cr; show: cls name."					cls selectors do: 							[:selector | 							(n := n + 1) \\ 100 = 0 ifTrue: [bar value: n].							newCodeString := cls prettyPrinterClass 										format: (cls sourceCodeAt: selector)										in: cls										notifying: nil										decorated: false.							methodNode := cls compilerClass new 										compile: newCodeString										in: cls										notifying: nil										ifFail: [].							newMethod := methodNode generate: #(0 0 0 0).							oldMethod := cls compiledMethodAt: selector.							oldMethod = newMethod 								ifFalse: 									[Transcript										cr;										show: '***' , cls name , ' ' , selector.									badOnes add: cls name , ' ' , selector]]]].	self systemNavigation browseMessageList: badOnes asSortedCollection		name: 'Formatter Discrepancies'! !!Preferences class methodsFor: 'standard queries' stamp: ''!syntaxHighlightingAsYouType	^ self		valueOfFlag: #syntaxHighlightingAsYouType		ifAbsent: [true]! !!Preferences class methodsFor: 'misc' stamp: 'rss 8/23/2009 11:03'!defaultValueTableForCurrentRelease	"Answer a table defining default values for all the preferences in the release.  Returns a list of (pref-symbol, boolean-symbol) pairs"	^  #(		(abbreviatedBrowserButtons false)		(alternativeBrowseIt false)		(annotationPanes false)		(areaFillsAreTolerant false)		(areaFillsAreVeryTolerant false)		(automaticFlapLayout true)		(automaticKeyGeneration false)		(automaticPlatformSettings true)		(automaticViewerPlacement true)		(balloonHelpEnabled true)		(balloonHelpInMessageLists false)		(batchPenTrails false)		(browseWithDragNDrop false)		(browseWithPrettyPrint false)		(browserShowsPackagePane false)		(canRecordWhilePlaying false)		(capitalizedReferences true)		(caseSensitiveFinds false)		(cautionBeforeClosing false)		(changeSetVersionNumbers true)		(checkForSlips true)		(checkForUnsavedProjects true)		(classicNavigatorEnabled false)		(clickOnLabelToEdit false)		(cmdDotEnabled true)		(collapseWindowsInPlace false)		(compactViewerFlaps false)		(compressFlashImages false)		(confirmFirstUseOfStyle true)		(conversionMethodsAtFileOut false)		(cpuWatcherEnabled false)		(debugHaloHandle true)		(debugPrintSpaceLog false)		(debugShowDamage false)		(decorateBrowserButtons true)		(diffsInChangeList true)		(diffsWithPrettyPrint false)		(dismissAllOnOptionClose false)		(dragNDropWithAnimation false)		(eToyFriendly false)		(eToyLoginEnabled false)		(enableLocalSave true)		(extractFlashInHighQuality true)		(extractFlashInHighestQuality false)		(fastDragWindowForMorphic true)		(fenceEnabled true)		(fullScreenLeavesDeskMargins true)		(haloTransitions false)		(hiddenScrollBars false)		(higherPerformance false)		(honorDesktopCmdKeys true)		(ignoreStyleIfOnlyBold true)		(includeSoundControlInNavigator false)		(infiniteUndo false)		(logDebuggerStackToFile true)		(magicHalos false)		(menuButtonInToolPane false)		(menuColorFromWorld false)		(menuKeyboardControl false)  		(modalColorPickers true)		(mouseOverForKeyboardFocus false)		(mouseOverHalos false)		(mvcProjectsAllowed true)		(navigatorOnLeftEdge true)		(noviceMode false)		(okToReinitializeFlaps true)		(optionalButtons true)		(passwordsOnPublish false)		(personalizedWorldMenu true)		(postscriptStoredAsEPS false)		(preserveTrash true)		(projectViewsInWindows true)		(projectZoom true)		(projectsSentToDisk false)		(promptForUpdateServer true)		(propertySheetFromHalo false)		(readDocumentAtStartup true)		(restartAlsoProceeds false)		(reverseWindowStagger true)		(roundedMenuCorners true)		(roundedWindowCorners true)		(scrollBarsNarrow false)		(scrollBarsOnRight true)		(scrollBarsWithoutMenuButton false)		(securityChecksEnabled false)		(selectiveHalos false)		(showBoundsInHalo false)		(showDirectionForSketches false)		(showDirectionHandles false)		(showFlapsWhenPublishing false)		(showProjectNavigator false)		(showSecurityStatus true)		(showSharedFlaps true)		(signProjectFiles true)		(simpleMenus false)		(slideDismissalsToTrash true)		(smartUpdating true)		(soundQuickStart false)		(soundStopWhenDone false)		(soundsEnabled true)		(startInUntrustedDirectory false)		(systemWindowEmbedOK false)		(thoroughSenders true)		(tileTranslucentDrag true)		(timeStampsInMenuTitles true)		(turnOffPowerManager false)		(twentyFourHourFileStamps true)		(typeCheckingInTileScripting true)		(uniTilesClassic true)		(uniqueNamesInHalos false)		(universalTiles false)		(unlimitedPaintArea false)		(updateSavesFile false)		(useButtonProprtiesToFire false)		(useUndo true)		(viewersInFlaps true)		(warnAboutInsecureContent true)		(warnIfNoChangesFile true)		(warnIfNoSourcesFile true))"Preferences defaultValueTableForCurrentRelease do:	[:pair | (Preferences preferenceAt: pair first ifAbsent: [nil]) ifNotNilDo:			[:pref | pref defaultValue: (pair last == true)]].Preferences chooseInitialSettings."! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'rss 8/23/2009 11:11'!testFormatter2	"Smalltalk testFormatter2"	"Reformats the source for every method in the system, and	then verifies that the order of source tokens is unchanged.	The formatting used will be either classic monochrome or	fancy polychrome, depending on the setting of the preference	#colorWhenPrettyPrinting. "		"Note: removed references to Preferences colorWhenPrettyPrinting and replaced them simply with false, as I've been removing this preference lately. --Ron Spengler 8/23/09"	| newCodeString badOnes n oldCodeString oldTokens newTokens |	badOnes := OrderedCollection new.	self forgetDoIts.	'Formatting all classes...' 		displayProgressAt: Sensor cursorPoint		from: 0		to: CompiledMethod instanceCount		during: 			[:bar | 			n := 0.			self systemNavigation allBehaviorsDo: 					[:cls | 					"Transcript cr; show: cls name."					cls selectors do: 							[:selector | 							(n := n + 1) \\ 100 = 0 ifTrue: [bar value: n].							oldCodeString := (cls sourceCodeAt: selector) asString.							newCodeString := cls prettyPrinterClass 										format: oldCodeString										in: cls										notifying: nil										decorated: false.							oldTokens := oldCodeString findTokens: Character separators.							newTokens := newCodeString findTokens: Character separators.							oldTokens = newTokens 								ifFalse: 									[Transcript										cr;										show: '***' , cls name , ' ' , selector.									badOnes add: cls name , ' ' , selector]]]].	self systemNavigation browseMessageList: badOnes asSortedCollection		name: 'Formatter Discrepancies'! !!Preferences class methodsFor: 'standard queries' stamp: ''!syntaxHighlightingAsYouTypeAnsiAssignment	^ self		valueOfFlag: #syntaxHighlightingAsYouTypeAnsiAssignment		ifAbsent: [false]! !Preferences class removeSelector: #colorWhenPrettyPrinting!