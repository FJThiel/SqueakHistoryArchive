"Change Set:		8603Tests-nice.40Tests-nice.40:Cosmetic: move or remove a few temps inside closures"!!PCCByCompilation methodsFor: 'ui testing' stamp: 'nice 12/26/2009 19:02'!existsDisabledCallIn: aMethodRef 	| src |	^ (self existsCompiledCallIn: aMethodRef) not		and: ["higher priority to avoid source file accessing errors"			src := [aMethodRef sourceString]				valueAt: self higherPriority.			self methodSourceContainsDisabledCall: src]! !!PCCByCompilation methodsFor: 'ui querying' stamp: 'nice 12/27/2009 03:11'!methodsWithDisabledCall	"Answer a SortedCollection of all the methods that contain, in source  	code, the substring indicating a disabled prim."	"The alternative implementation  		^ SystemNavigation new allMethodsWithSourceString: self disabledPrimStartString									matchCase: true  	also searches in class comments."	| list string |	string := self disabledPrimStartString.	list := Set new.	'Searching all method source code...'		displayProgressAt: Sensor cursorPoint		from: 0		to: Smalltalk classNames size * 2 "classes with their metaclasses"		during: [:bar | | classCount |			classCount := 0.			SystemNavigation default				allBehaviorsDo: [:class | 					bar value: (classCount := classCount + 1).					class						selectorsDo: [:sel | 							| src | 							"higher priority to avoid source file accessing  							errors"							src := [class sourceCodeAt: sel]								valueAt: self higherPriority.							(src								findString: string								startingAt: 1								caseSensitive: true) > 0								ifTrue: [sel isDoIt ifFalse: [											list add: (MethodReference new setStandardClass: class methodSymbol: sel)]]]]].	^ list asSortedCollection! !!PCCByCompilation methodsFor: 'private user interface' stamp: 'nice 12/26/2009 19:03'!privateEnableCallIn: aMethodRef 	"Enables disabled external prim call by recompiling method with prim  	call taken from disabling comment, will be called by superclass."	| src newMethodSource |	"higher priority to avoid source file accessing errors"	src := [aMethodRef sourceString]		valueAt: self higherPriority.	newMethodSource := self disabled2EnabledPrimMethodString: src.	"higher priority to avoid source file accessing errors"	[aMethodRef actualClass		compile: newMethodSource		classified: (aMethodRef actualClass whichCategoryIncludesSelector: aMethodRef methodSymbol)		notifying: nil]		valueAt: self higherPriority! !!TestValueWithinFix methodsFor: 'tests' stamp: 'nice 12/27/2009 03:11'!testValueWithinNonLocalReturnFixReal	"self run: #testValueWithinNonLocalReturnFixReal"	"The real test for the fix is just as obscure as the original problem"	| startTime |	self valueWithinNonLocalReturn.	startTime := Time millisecondClockValue.	[[] repeat] valueWithin: 100 milliSeconds onTimeout:[ | deltaTime |		"This *should* timeout after 100 msecs but the pending process from		the previous invokation will signal timeout after 20 msecs already		which will in turn cut this invokation short."		deltaTime := Time millisecondClockValue - startTime.		self deny: deltaTime < 90.	].! !!PCCByCompilation methodsFor: 'private user interface' stamp: 'nice 12/26/2009 19:03'!privateDisableCallIn: aMethodRef 	"Disables enabled or failed external prim call by recompiling method 	with prim call commented out, will be called by superclass."	| src newMethodSource |	"higher priority to avoid source file accessing errors"	src := [aMethodRef sourceString]		valueAt: self higherPriority.	newMethodSource := self enabled2DisabledPrimMethodString: src.	"higher priority to avoid source file accessing errors"	[aMethodRef actualClass		compile: newMethodSource		classified: (aMethodRef actualClass whichCategoryIncludesSelector: aMethodRef methodSymbol)		notifying: nil]		valueAt: self higherPriority! !