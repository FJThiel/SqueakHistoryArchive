"Change Set:		8624ReleaseBuilder-nice.42ReleaseBuilder-nice.42:Cosmetic: move or remove a few temps inside closures"!!ReleaseBuilderFor3dot11 methodsFor: 'sources managment' stamp: 'nice 12/27/2009 04:06'!createCompressedSources" ReleaseBuilderFor3dot11 new createCompressedSources"ProtoObject allSubclassesWithLevelDo:[:cl :l| | dir | 	dir := self createDirIfnotExists:cl category.			Cursor write showWhile: [ | zipped nameToUse unzipped buffer |		nameToUse :=  cl printString .		(dir fileExists: nameToUse) ifFalse:[			unzipped :=RWBinaryOrTextStream on: ''.			unzipped header; timeStamp.	 cl  fileOutOn: unzipped moveSource: false toFile: 0.	unzipped trailer.				unzipped reset.			zipped := dir newFileNamed: (nameToUse, FileDirectory dot, ImageSegment compressedFileExtension).	zipped binary.	zipped := GZipWriteStream on: zipped.	buffer := ByteArray new: 50000.	'Compressing ', nameToUse displayProgressAt: Sensor cursorPoint		from: 0 to: unzipped size		during:[:bar|			[unzipped atEnd] whileFalse:[				bar value: unzipped position.				zipped nextPutAll: (unzipped nextInto: buffer)].			zipped close.			unzipped close]]]] startingLevel: 0! !!ReleaseBuilderFor3dot10 methodsFor: 'accessing' stamp: 'nice 12/27/2009 04:07'!packagesList | mcc lista |lista := OrderedCollection new.mcc := MCWorkingCopyBrowser new.mcc  repository: MCCacheRepository default.lista := mcc workingCopies select:		[:wc |		((wc modified = true) & wc ancestors notEmpty)] thenCollect: [:ea| | packName pos| 		packName := ea  ancestry ancestors first name.		pos := packName indexOf: $-.		packName := packName copyFrom: 1 to: pos -1.		lista add: packName].	^ lista! !!ReleaseBuilderFor3dot10 methodsFor: 'updates' stamp: 'nice 12/27/2009 04:06'!updateToNext| stream mcc |stream := RWBinaryOrTextStream on: String new.mcc := MCWorkingCopyBrowser new.mcc  repository: MCCacheRepository default.mcc workingCopies select:		[:wc |		(wc modified = true)] thenDo: [:ea| | number p1 packString pos |		self saveNewVersion: ea.				packString :=  ea ancestry ancestorString .		pos := packString indexOf: $..		p1 := packString copyFrom: 1 to: pos -1.		number := (packString copyFrom: pos + 1 to: packString size) asNumber.		packString := p1 ,'.', number  asString , '(', (number - 1) asString ,').mcd'.		packString := packString, Character cr asString.		stream nextPutAll: packString		].ChangeSet current postscript: ChangeSet current postscript, stream contents! !!ReleaseBuilderFor3dot11 methodsFor: 'updates' stamp: 'nice 12/27/2009 03:11'!loadLastVersion: aListOfPackageNames 	| mcw montiNames version |	mcw := MCWorkingCopyBrowser new				repository: (MCHttpRepository						location: 'http://source.squeakfoundation.org/trunk'						user: ''						password: '').	mcw repository		ifNotNil: [:repos | montiNames := repos readableFileNames].	aListOfPackageNames		do: [:mo | | package | 			package := montiNames						detect: [:ea | (ea findTokens: '-' ) first = mo]						ifNone: [].			package				ifNotNil: [version := mcw repository loadVersionFromFileNamed: package.					version load]].	^ version! !!ReleaseBuilderFor3dot10 methodsFor: 'packages' stamp: 'nice 12/27/2009 04:07'!packagesInfluenced" This is a partial response to Ralph request.Lets know what packages could touch some code file what we wish go into image.Intended to load Mantis fix and convert the result to Monticello ""ReleaseBuilderFor3dot10 new packagesInfluenced "| monti fileName cs |monti := Set new.fileName := UIManager default chooseFileMatching: #('st' 'cs').cs := FilePackage fromFileNamed: fileName.cs classes do: [:cl| | realClass cat p |	realClass := Smalltalk at: cl name ifAbsent: [ self error: 'This image do not have ', cl asString] .cat := (realClass category findTokens: '-') first.        p := (PackageInfo allPackages collect:[:pi| pi packageName]) .    (p includes: cat) ifTrue:[ monti add: cat]].^ monti.! !!ReleaseBuilderFor3dot10 methodsFor: 'packages' stamp: 'nice 12/27/2009 04:07'!packagesInfluenced: aStream named: aFileName" This is a partial response to Ralph request.Lets know what packages could touch some code file what we wish go into image.Intended to load Mantis fix and convert the result to Monticello ""ReleaseBuilderFor3dot10 new packagesInfluenced "| monti cs |monti := Set new.cs := FilePackage new fromStream: aStream reset named: aFileName.cs classes do: [:cl| | p realClass cat |	realClass := Smalltalk at: cl name ifAbsent: [ self error: 'This image do not have ', cl asString] .cat := (realClass category findTokens: '-') first.        p := (PackageInfo allPackages collect:[:pi| pi packageName]) .    (p includes: cat) ifTrue:[ monti add: cat]].packagesList addAll:  monti.! !!ReleaseBuilder methodsFor: 'utilities' stamp: 'nice 12/27/2009 03:11'!fixObsoleteReferences	"ReleaseBuilder new fixObsoleteReferences"		Preference allInstances do: [:each | | informee | 		informee := each instVarNamed: #changeInformee.		((informee isKindOf: Behavior)			and: [informee isObsolete])			ifTrue: [				Transcript show: each name; cr.				each instVarNamed: #changeInformee put: (Smalltalk at: (informee name copyReplaceAll: 'AnObsolete' with: '') asSymbol)]]. 	CompiledMethod allInstances do: [:method |		| obsoleteBindings |		obsoleteBindings := method literals select: [:literal |			literal isVariableBinding				and: [literal value isBehavior]				and: [literal value isObsolete]].		obsoleteBindings do: [:binding |			| obsName realName realClass |			obsName := binding value name.			Transcript show: obsName; cr.			realName := obsName copyReplaceAll: 'AnObsolete' with: ''.			realClass := Smalltalk at: realName asSymbol ifAbsent: [UndefinedObject].			binding isSpecialWriteBinding				ifTrue: [binding privateSetKey: binding key value: realClass]				ifFalse: [binding key: binding key value: realClass]]].	Behavior flushObsoleteSubclasses.	Smalltalk garbageCollect; garbageCollect.	SystemNavigation default obsoleteBehaviors size > 0		ifTrue: [SystemNavigation default inspect]! !!ReleaseBuilderFor3dot11 methodsFor: 'squeakThreeEleven' stamp: 'nice 12/27/2009 03:11'!saveInTrunk: packageName " ReleaseBuilderFor3dot11 new saveInTrunk: Foo"	| monti repo |	monti := MCWorkingCopyBrowser new.	repo := MCHttpRepository				location: 'http://source.squeak.org/trunk'				user: ''				password: ''.			(SystemOrganization categoriesMatching: packageName , '*')		do: [:cat | 			| workingCopy message | 			PackageInfo registerPackageName: cat asString.			workingCopy := MCWorkingCopy						forPackage: (MCPackage new name: cat asString).			workingCopy repositoryGroup addRepository: repo.			repo user				ifEmpty: [repo						user: (UIManager default request: 'Trunk Repository username').					repo						password: (UIManager default request: 'Trunk Repository  password')].				message := 	UIManager default 			request: 'Please type comments for this package:' translated			initialAnswer: 'a good comment' translated.						repo						storeVersion: (workingCopy newVersionWithName: workingCopy uniqueVersionName message: message)].								monti workingCopyListChanged; changed: #workingCopySelection; changed: #repositoryList ! !!ReleaseBuilderFor3dot10 methodsFor: 'packages' stamp: 'nice 12/27/2009 03:11'!loadLastVersion: aListOfPackageNames | mcw montiNames version |mcw := MCWorkingCopyBrowser new repository: (MCHttpRepository				location: 'http://source.squeakfoundation.org/39a'				user: ''				password: '').mcw repository ifNotNil: [:repos | montiNames := repos readableFileNames ].		aListOfPackageNames do: [:mo | | package |		package := (montiNames detect:[:ea| ea beginsWith: mo] ifNone:[] ) .	package ifNotNil: [	version := mcw repository loadVersionFromFileNamed: package.	version load]].^version! !