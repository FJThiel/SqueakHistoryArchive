"Change Set:		7658Monticello-ar.321Monticello-ar.321:Adds a workaround for the broken 'atomic' loading behavior in MCPackageLoader>>basicLoad.Monticello-tfel.320:Adapt a test-case to reality	- In the MCSnapshotBrowser, when we have abolutely 	nothing selected, we don't want to see an empty 	string, instead we see the packages scripts or, in 	the testcase, the info that this package doesn't define	any scripts"!!MCSnapshotBrowserTest methodsFor: 'testing' stamp: 'tfel 8/28/2009 20:43'!testNoSelection	self assertAListMatches: self allCategories.	self denyAListIncludesAnyOf: self definedClasses.	self denyAListIncludesAnyOf: self allProtocols.	self denyAListIncludesAnyOf: self allMethods.	"and if there I need to see the packages scripts (or none)"	self assertTextIs: '(package defines no scripts)'.! !!MCPackageLoader methodsFor: 'private' stamp: 'ar 8/30/2009 20:34'!basicLoad	errorDefinitions := OrderedCollection new.	[[		"FIXME. Do a separate pass on loading class definitions as the very first thing.	This is a workaround for a problem with the so-called 'atomic' loading (you wish!!)	which isn't atomic at all but mixes compilation of methods with reshapes of classes.	Since the method is not installed until later, any class reshape in the middle *will*	affect methods in subclasses that have been compiled before. There is probably	a better way of dealing with this by ensuring that the sort order of the definition lists	superclass definitions before methods for subclasses but I need this NOW, and adding	an extra pass ensures that methods are compiled against their new class definitions."	additions do: [:ea | self loadClassDefinition: ea] displayingProgress: 'Loading classes...'.		additions do: [:ea | self tryToLoad: ea] displayingProgress: 'Compiling methods...'.	removals do: [:ea | ea unload] displayingProgress: 'Cleaning up...'.	self shouldWarnAboutErrors ifTrue: [self warnAboutErrors].	errorDefinitions do: [:ea | ea addMethodAdditionTo: methodAdditions] displayingProgress: 'Reloading...'.	methodAdditions do: [:each | each installMethod].	methodAdditions do: [:each | each notifyObservers].	additions do: [:ea | ea postloadOver: (self obsoletionFor: ea)] displayingProgress: 'Initializing...']		on: InMidstOfFileinNotification 		do: [:n | n resume: true]]			ensure: [self flushChangesFile]! !!MCMethodDefinitionTest methodsFor: 'mocks' stamp: 'tfel 8/28/2009 19:46'!override ^ 1! !!MCSnapshotBrowser methodsFor: 'text' stamp: 'tfel 8/28/2009 20:42'!scriptDefinitionString	| defs |	defs := items select: [:ea | ea isScriptDefinition].	defs isEmpty ifTrue: [^'(package defines no scripts)'].		^ String streamContents: [:stream | 		defs asArray sort 			do: [:ea | stream nextPutAll: '---------- package ';					nextPutAll: ea scriptSelector;					nextPutAll: ' ----------'; cr;					nextPutAll: ea script; cr]			separatedBy: [stream cr]].! !!MCPackageLoader methodsFor: 'private' stamp: 'ar 8/30/2009 20:25'!loadClassDefinition: aDefinition	[aDefinition isClassDefinition ifTrue:[aDefinition load]] on: Error do: [errorDefinitions add: aDefinition].! !