"Change Set:		9395ST80-dtl.106ST80-dtl.106:Implement Project>>textWindows to remove MVC/Morphic dependencies from  Utilities class> storeTextWindowContentsToFileNamed:Fix bug in #storeTextWindowContentsToFileNamed: in which text windows with duplicate window titles were not saved.Remove explicit MVC references from SystemDictionary>>majorShrink.Remove explicit MVC reference from SystemDictionary>>discardOddsAndEnds."!!StandardSystemView class methodsFor: 'class initialization' stamp: 'dtl 2/14/2010 13:08'!doCacheBits	"StandardSystemView doCacheBits - Enable fast window repaint feature"	CacheBits := true.	ScheduledControllers ifNotNilDo: [:sc | sc unCacheWindows; restore]! !!MVCProject methodsFor: 'utilities' stamp: 'dtl 2/14/2010 20:44'!textWindows	"Answer a dictionary of all system windows for text display keyed by window title.	Generate new window titles as required to ensure unique keys in the dictionary."	| aDict windows title |	aDict := Dictionary new.	windows := ScheduledControllers controllersSatisfying:		[:c | (c model isKindOf: StringHolder)].	windows do:		[:aController | | textToUse aTextView | 			aTextView := aController view subViews detect: [:m | m isKindOf: PluggableTextView] ifNone: [nil].			textToUse := aTextView				ifNil:		[aController model contents]				ifNotNil:	[aTextView controller text].  "The latest edits, whether accepted or not"				title := aController view label.				(aDict includesKey: title) ifTrue: [ | newKey | "Ensure unique keys in aDict"					(1 to: 100) detect: [:e |							newKey := title, '-', e asString.							(aDict includesKey: newKey) not].					title := newKey].			aDict at: title put: textToUse].	^ aDict! !!Utilities class methodsFor: '*ST80-Support' stamp: 'jm 5/3/1998 20:12'!openScratchWorkspaceLabeled: labelString contents: initialContents	"Open a scratch text view with the given label on the given string. A scratch text view won't warn you about unsaved changes when you close it."	"Utilities openScratchWorkspaceLabeled: 'Scratch' contents: 'Hello. world!!'"	| model topView stringView |	model := StringHolder new contents: initialContents.	topView := StandardSystemView new.	topView		model: model;		label: labelString;		minimumSize: 180@120.	topView borderWidth: 1.	stringView := PluggableTextView on: model 		text: #contents		accept: nil		readSelection: #contentsSelection		menu: #codePaneMenu:shifted:.	stringView		askBeforeDiscardingEdits: false;		window: (0@0 extent: 180@120).	topView addSubView: stringView.	topView controller open.! !