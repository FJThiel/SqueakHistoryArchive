"Change Set:		8435Traits-ul.244Traits-ul.244:- replace sends of #ifNotNilDo: to #ifNotNil:, #ifNil:ifNotNilDo: to #ifNil:ifNotNil:, #ifNotNilDo:ifNil: to #ifNotNil:ifNil:"!!TraitTest methodsFor: 'testing' stamp: 'ul 12/12/2009 14:04'!testLocalMethodWithSameCodeInTrait	"Note, takes all behaviors (classes and traits) into account"	SystemNavigation default allBehaviorsDo: [ :each |		each hasTraitComposition ifTrue: [			each methodDict keys do: [ :selector |				(each includesLocalSelector: selector) ifTrue: [					(each traitComposition traitProvidingSelector: selector) ifNotNil: [ :trait |						self deny: (trait >> selector = (each >> selector)) ] ] ] ] ].! !!TPureBehavior methodsFor: 'send caches' stamp: 'ul 12/12/2009 12:52'!requirements	^ self requiredSelectorsCache 		ifNil: [#()] 		ifNotNil: [:rsc | rsc requirements]! !!TBehaviorCategorization methodsFor: 'organization' stamp: 'ul 12/12/2009 14:03'!category	"Answer the system organization category for the receiver. First check whether the	category name stored in the ivar is still correct and only if this fails look it up	(latter is much more expensive)"	| result |	self basicCategory ifNotNil: [ :symbol |		((SystemOrganization listAtCategoryNamed: symbol) includes: self name)			ifTrue: [ ^symbol ] ].	self basicCategory: (result := SystemOrganization categoryOfElement: self name).	^result! !!RequiredSelectorsChangesCalculator methodsFor: 'calculating' stamp: 'ul 12/12/2009 14:07'!findRootsAndRoutes	"Based on the 	1. target classes (ones considered interesting by our clients) and the 	2. modifiedBehaviors (ones we are told might have changed), 	decide the 	A. rootClasses (superclasses of target classes that include methods from modifiedBehaviors) 	B. classesToUpdate (classes that may have been affected AND are on an inheritance path between a root class and a target class, will be updated by the algorithm. This includes the every target class that may have been affected).	C. mapping from root classes to its classesToUpdate."	| highestSuperclassOfCurrentTarget modifiedClasses |	classesToUpdate := IdentitySet new.	rootClasses := IdentitySet new.	modifiedClasses := (modifiedBehaviors gather: [:mb | mb classesComposedWithMe]) asIdentitySet.	targetClasses do: [:currentTargetClass | 		highestSuperclassOfCurrentTarget := nil.		currentTargetClass withAllSuperclassesDo: [:sc | 			(modifiedClasses includes: sc) ifTrue: 				[highestSuperclassOfCurrentTarget := sc.				self noteRoot: sc possiblyAffected: currentTargetClass]].			highestSuperclassOfCurrentTarget ifNotNil: [:highestRoot | 				self addUpdatePathTo: currentTargetClass from: highestRoot]]! !!TraitMethodDescription methodsFor: 'accessing' stamp: 'ul 12/12/2009 14:04'!providedMethod	^self providedLocatedMethod ifNotNil: [:locatedMethod | locatedMethod method]! !!RequiredSelectorsChangesCalculator methodsFor: 'as yet unclassified' stamp: 'ul 12/12/2009 12:54'!sinsIn: aClass 	| negativeDefined selfSent sins |	negativeDefined := IdentitySet new.	aClass selectorsAndMethodsDo: [:s :m | m isProvided ifFalse: [negativeDefined add: s]].	selfSent := aClass sendCaches selfSenders ifNil: [^negativeDefined] ifNotNil: [:dict | dict keys].	sins := negativeDefined union: (selfSent copyWithoutAll: aClass providedSelectors).	^sins! !!TPureBehavior methodsFor: 'printing' stamp: 'ul 12/12/2009 14:03'!literalScannedAs: scannedLiteral notifying: requestor	"Postprocesses a literal scanned by Scanner scanToken (esp. xLitQuote).	If scannedLiteral is not an association, answer it.	Else, if it is of the form:		nil->#NameOfMetaclass	answer nil->theMetaclass, if any has that name, else report an error.	Else, if it is of the form:		#NameOfGlobalVariable->anythiEng	answer the global, class, or pool association with that nameE, if any, else	add it to Undeclared a answer the new Association."	| key value |	(scannedLiteral isVariableBinding)		ifFalse: [^ scannedLiteral].	key := scannedLiteral key.	value := scannedLiteral value.	key isNil 		ifTrue: "###<metaclass soleInstance name>"			[(self bindingOf: value) ifNotNil:[:assoc|				 (assoc value isKindOf: Behavior)					ifTrue: [^ nil->assoc value class]].			 requestor notify: 'No such metaclass'.			 ^false].	(key isSymbol)		ifTrue: "##<global var name>"			[(self bindingOf: key) ifNotNil:[:assoc | ^assoc].			Undeclared at: key put: nil.			 ^Undeclared bindingOf: key].	requestor notify: '## must be followed by a non-local variable name'.	^false"	Form literalScannedAs: 14 notifying: nil 14	Form literalScannedAs: #OneBitForm notiEfying: nil  OneBitForm	Form literalScannedAs: ##OneBitForm notifying: nil  OneBitForm->a Form	Form literalScannedAs: ##Form notifying: nil   Form->Form	Form literalScannedAs: ###Form notifying: nil   nilE->Form class"! !