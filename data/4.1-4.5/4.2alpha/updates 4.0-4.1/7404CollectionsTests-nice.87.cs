"Change Set:		7404CollectionsTests-nice.87CollectionsTests-nice.87:Test forhttp://bugs.squeak.org/view.php?id=6777CharacterSet copy is shallow... 'If we change the copy, do we change the original?We'd better not'| cs1 cs2 |cs1 := CharacterSet separators.cs2 := cs1 copy.cs2 remove: Character tab.^self assert: (cs1 includes: Character tab). CollectionsTests-nice.77:Test for Interval>>#includes: and #indexOf:http://bugs.squeak.org/view.php?id=1602http://bugs.squeak.org/view.php?id=1603http://bugs.squeak.org/view.php?id=6455http://bugs.squeak.org/view.php?id=7180These tests are only non regression test about previous fuzzy inclusion errors.REMINDER:Interval of Floats are evil.Fuzzy inclusion does not make them behave that better.For example, I did not include this funny test, known to fail due to fuzzyfication efforts:| eps i |eps := (1.0 timesTwoPower: -52) * 1.25.i := (1 to: 1+(99*eps) by: eps).^(i includes: (i at: 2))CollectionsTests-ar.79:Simple tests for base64Encoded/base64Decoded.CollectionsTests-nice.80:Test forhttp://bugs.squeak.org/view.php?id=6994#(1 2 3) asByteArray as: Interval.CollectionsTests-nice.81:Test forhttp://bugs.squeak.org/view.php?id=7136LinkedList #add:after: bugCollectionsTests-nice.82:Tests for http://bugs.squeak.org/view.php?id=7121add:beforeIndex: and add:afterIndex: do not work as advertised CollectionsTests-nice.83:Test for http://bugs.squeak.org/view.php?id=6998WideString>>at:put: does not return the put-objectCollectionsTests-nice.84:Test forhttp://bugs.squeak.org/view.php?id=67821.0 / (FloatArray with: 2.0)CollectionsTests-nice.85:Test forhttp://bugs.squeak.org/view.php?id=7175CharacterSetComplement cannot printString CollectionsTests-nice.86:Test forhttp://bugs.squeak.org/view.php?id=6482Interval storeOn: incorrect for some ScaledDecimalSome ScaledDecimal have more bits than printed.Example: 0.5s1 squared will print 0.2s1However 0.5s1 squared * 4 = 1Thus (0 to: 1 by: 0.5s1 squared) size = 5(0 0.25 0.5 0.75 1)If you storeString and reinterpret, you get size 6(0 0.2 0.4 0.6 0.8 1.0)Interval SHOULD use storeOn: and not rely on Number>>printOn:This is some sort of violation of encapsulation.And it is defeated by introduction of a new species of Number (ScaledDecimal)..."!TestCase subclass: #CharacterSetTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CollectionsTests-Support'!ClassTestCase subclass: #CharacterSetComplementTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CollectionsTests-Support'!!OrderedCollectionTest methodsFor: 'testing-public methods' stamp: 'ar 7/15/2008 23:09'!testAddAfterIndex	"self run: #testAddAfterIndex"	| l |	l := #(1 2 3 4) asOrderedCollection.	l add: 77 afterIndex: 0.	self assert: (l =  #(77 1 2 3 4) asOrderedCollection).	l add: 88 afterIndex: 2.	self assert: (l =  #(77 1 88 2 3 4) asOrderedCollection). 	l add: 99 afterIndex: l size.	self assert: (l =  #(77 1 88 2 3 4 99) asOrderedCollection). 	self should:[l add: 666 afterIndex: -1] raise: Error.	self should:[l add: 666 afterIndex: l size+1] raise: Error.! !!IntervalTest methodsFor: 'tests' stamp: 'nice 2/3/2008 21:35'!testIndexOfBug6455	"This test is about mantis bug http://bugs.squeak.org/view.php?id=6455	It should work as long as Fuzzy inclusion test feature for Interval of Float is maintained.	This is a case when tested element is near ones of actual value, but by default.	Code used to work only in the case of close numbers by excess..."		self assert: ((0 to: Float pi by: Float pi / 100) indexOf: Float pi * (3/100)) = 4! !!StringTest methodsFor: 'tests - converting' stamp: 'ar 7/22/2009 22:02'!testBase64	self assert: 'SGVsbG8gV29ybGQ=' base64Decoded = 'Hello World'.	self assert: 'Hello World' base64Encoded = 'SGVsbG8gV29ybGQ='.! !!CharacterSetComplementTest methodsFor: 'testing' stamp: 'nice 9/2/2008 10:29'!testPrintString	"This is about CharacterSetComplementTest"		self shouldnt: [CharacterSet separators complement printString] raise: Error! !!CharacterSetTest methodsFor: 'testing' stamp: 'nice 11/20/2007 00:38'!testCopy    | theOriginal theCopy |    theOriginal := CharacterSet newFrom: 'abc'.    theCopy := theOriginal copy.    theCopy remove: $a.    ^self should: [theOriginal includes: $a] description: 'Changing the copy should not change the original'.! !!WideStringTest methodsFor: 'testing' stamp: 'nice 4/2/2008 23:49'!testAtPut	"Non regression test for http://bugs.squeak.org/view.php?id=6998"		| w1 |	w1 := WideString with: (Unicode value: 402) with: $a with: (Unicode value: 400) with: $b.	self assert: (w1 at: 2 put: $b) = $b description: 'at:put: should return the put-object'! !!OrderedCollectionTest methodsFor: 'testing-public methods' stamp: 'ar 7/15/2008 23:08'!testAddBeforeIndex	"self run: #testAddBeforeIndex"	| l |	l := #(1 2 3 4) asOrderedCollection.	l add: 77 beforeIndex: 1.	self assert: (l =  #(77 1 2 3 4) asOrderedCollection).	l add: 88 beforeIndex: 3.	self assert: (l =  #(77 1 88 2 3 4) asOrderedCollection). 	l add: 99 beforeIndex: l size+1.	self assert: (l =  #(77 1 88 2 3 4 99) asOrderedCollection). 	self should:[l add: 666 beforeIndex: 0] raise: Error.	self should:[l add: 666 beforeIndex: l size+2] raise: Error.! !!IntervalTest methodsFor: 'tests' stamp: 'nice 3/27/2008 00:24'!testAsInterval	"This is the same as newFrom:"	self shouldnt: [		self assert: (#(1 2 3) as: Interval) = (1 to: 3).		self assert: (#(33 5 -23) as: Interval) = (33 to: -23 by: -28).		self assert: (#(2 4 6) asByteArray as: Interval) = (2 to: 6 by: 2).	] raise: Error.	self should: [#(33 5 -22) as: Interval]		raise: Error		description: 'This is not an arithmetic progression'! !!FloatArrayTest methodsFor: 'testing' stamp: 'nice 11/23/2007 23:53'!testArithmeticCoercion	"This test is related to http://bugs.squeak.org/view.php?id=6782"		self should: [3.0 / (FloatArray with: 2.0) = (FloatArray with: 1.5)].	self should: [3.0 * (FloatArray with: 2.0) = (FloatArray with: 6.0)].	self should: [3.0 + (FloatArray with: 2.0) = (FloatArray with: 5.0)].	self should: [3.0 - (FloatArray with: 2.0) = (FloatArray with: 1.0)].! !!IntervalTest methodsFor: 'tests' stamp: 'nice 5/12/2007 00:53'!testIntervalStoreOn	"this is a test for http://bugs.squeak.org/view.php?id=4378"		| interval1 interval2 |	interval1 := 0 to: 1 by: 0.5s1 squared.	interval2 := Compiler evaluate: interval1 storeString.	self assert: interval1 size = interval2 size! !!IntervalTest methodsFor: 'tests' stamp: 'nice 4/29/2007 21:34'!testInclusionBug1603	"This test is by german morales.	It is about mantis bug 1603"		self shouldnt: ((1 to: 5 by: 1) includes: 2.5). "obvious"	self shouldnt: ((100000000000000 to: 500000000000000 by: 100000000000000) 		  includes: 250000000000000). "same as above with 14 zeros appended"! !!IntervalTest methodsFor: 'tests' stamp: 'nice 2/3/2008 21:43'!testInclusionBug6455	"This test is about mantis bug http://bugs.squeak.org/view.php?id=6455	It should work as long as Fuzzy inclusion test feature for Interval of Float is maintained.	This is a case when tested element is near ones of actual value, but by default.	Code used to work only in the case of close numbers by excess..."		self assert: ((0 to: Float pi by: Float pi / 100) includes: Float pi * (3/100))! !!LinkedListTest methodsFor: 'tests' stamp: 'nice 7/28/2008 22:27'!testAddAfterLast2	"LinkedListTest new testAddAfterLast2"	| l first second third fourth |	l := LinkedList new.	first := self class new n: 1.	second := self class new n: 2.	third := self class new n: 3.	fourth :=self class new n: 4.	l addLast: first.	l addLast: second.	self assert: (l collect:[:e | e n]) asArray  = #(1 2). 	l add: third after: second.	self assert: (l collect:[:e | e n]) asArray  = #(1 2 3).	l addLast: fourth.	self assert: (l collect:[:e | e n]) asArray  = #(1 2 3 4).! !!IntervalTest methodsFor: 'tests' stamp: 'nice 4/29/2007 21:35'!testIndexOfBug1602	"This test is by german morales.	It is about mantis bug 1602"		self should: ((1 to: 5 by: 1) indexOf: 2.5) = 0. "obvious"	self should: ((100000000000000 to: 500000000000000 by: 100000000000000) 		  indexOf: 250000000000000) = 0. "same as above with 14 zeros appended"! !