"Change Set:		8135Multilingual-nice.59Multilingual-nice.59:File in fixes from http://bugs.squeak.org/view.php?id=7071 for handling unicode input"!WriteStream subclass: #UnicodeCompositionStream	instanceVariableNames: 'combinedChar'	classVariableNames: ''	poolDictionaries: ''	category: 'Multilingual-Scanning'!KeyboardInputInterpreter subclass: #UTF32JPInputInterpreter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Multilingual-TextConversion'!KeyboardInputInterpreter subclass: #UnixUnicodeInputInterpreter	instanceVariableNames: 'keyValueIndex'	classVariableNames: ''	poolDictionaries: ''	category: 'Multilingual-TextConversion'!!Unicode class methodsFor: 'character classification' stamp: 'yo 10/16/2007 21:00'!isComposition: aChar	^ (GeneralCategory at: aChar charCode + 1) = Mn! !!UnicodeCompositionStream methodsFor: 'as yet unclassified' stamp: 'yo 10/10/2007 19:32'!isCombining	^ combinedChar ~~ nil! !!UTF32JPInputInterpreter methodsFor: 'as yet unclassified' stamp: 'yo 10/16/2007 14:45'!nextCharFrom: sensor firstEvt: evtBuf 	| keyValue mark |	keyValue := evtBuf at: 6.	mark := self japaneseSpecialMark: keyValue.	mark notNil		ifTrue: [^ mark].	keyValue < 256		ifTrue: [^ (Character value: keyValue) squeakToIso].	^ Character leadingChar: JapaneseEnvironment leadingChar code: keyValue! !!Latin1Environment class methodsFor: 'subclass responsibilities' stamp: 'yo 3/18/2008 13:50'!inputInterpreterClass	| platformName osVersion |	platformName := SmalltalkImage current platformName.	osVersion := SmalltalkImage current getSystemAttribute: 1002.	(platformName = 'Win32' and: [osVersion ~= 'CE'])		ifTrue: [^ (self win32VMUsesUnicode) ifTrue: [UTF32InputInterpreter] ifFalse: [MacRomanInputInterpreter]].	platformName = 'Mac OS'		ifTrue: [^ MacRomanInputInterpreter].	platformName = 'unix'		ifTrue: [^ UTF32InputInterpreter].	^ MacRomanInputInterpreter! !!UTF32JPInputInterpreter methodsFor: 'as yet unclassified' stamp: 'yo 10/16/2007 14:44'!japaneseSpecialMark: anInteger 	"For japanese special marks.	This method converts 'YEN SIGN' (16rA5) to 'REVERSE SOLIDUS' (16r5C)	and use Japanese leading characters instead of Unicode for below	characters.	'CENT SIGN' (16rA2)	'POUND SIGN' (16rA3)	'SECTION SIGN' (16rA7)	'DIAERESIS' (16rA8)	'NOT SIGN' (16rAC)	'DEGREE SIGN' (16rB0)	'PLUS-MINUS SIGN (16rB1)	'ACUTE ACCENT' (16rB4)	'PILCROW SIGN' (16rB6)	'MULTIPLICATION SIGN' (16rD7)	'DIVISION SIGN' (16rF7)	"	Project current localeID			= (LocaleID isoLanguage: 'ja')		ifTrue: [anInteger = 16rA5				ifTrue: [^ Character value: 16r5C].			(#(16rA2 16rA3 16rA7 16rA8 16rAC 16rB0 16rB1 16rB4 16rB6 16rD7 16rF7) includes: anInteger)				ifTrue: [^ Character leadingChar: JapaneseEnvironment leadingChar code: anInteger]].	^ nil! !!UnicodeCompositionStream methodsFor: 'as yet unclassified' stamp: 'yo 10/10/2007 19:47'!nextPut: anObject	self isCombining ifFalse: [		combinedChar := CombinedChar new.		combinedChar simpleAdd: anObject.	] ifTrue: [		(combinedChar simpleAdd: anObject) ifFalse: [			super nextPut: combinedChar combined.			combinedChar := CombinedChar new.			combinedChar simpleAdd: anObject.		]	].! !!UnicodeCompositionStream methodsFor: 'as yet unclassified' stamp: 'yo 10/10/2007 19:57'!nextPutAll: aCollection	aCollection do: [:e | self nextPut: e].! !!UnixUnicodeInputInterpreter methodsFor: 'initialization' stamp: 'yo 10/10/2007 20:50'!initialize	| satisfiesVersion launcherClass |	launcherClass := Smalltalk at: #SugarLaunche  ifAbsent: [nil].	satisfiesVersion := launcherClass notNil and: [launcherClass current isRunningInSugar].	satisfiesVersion		ifTrue: [keyValueIndex := 6]		ifFalse: [keyValueIndex := 6  "it might have to be 3, but probably different logic to check the VM version would be better."]! !!CombinedChar methodsFor: 'as yet unclassified' stamp: 'yo 10/10/2007 19:50'!simpleAdd: char	| dict elem |	codes ifNil: [codes := Array with: char. combined := char. ^ true].	dict := Compositions at: combined charCode ifAbsent: [^ false].	elem := dict at: char charCode ifAbsent: [^ false].	combined := Character leadingChar: self base leadingChar code: elem.	codes at: 1 put: combined.	^ true.! !!JapaneseEnvironment class methodsFor: 'subclass responsibilities' stamp: 'yo 10/16/2007 20:33'!inputInterpreterClass	| platformName osVersion encoding |	platformName := SmalltalkImage current platformName.	osVersion := SmalltalkImage current getSystemAttribute: 1002.	(platformName = 'Win32'			and: [osVersion = 'CE'])		ifTrue: [^ MacRomanInputInterpreter].	platformName = 'Win32'		ifTrue: [^ (self win32VMUsesUnicode) ifTrue: [UTF32JPInputInterpreter] ifFalse: [WinShiftJISInputInterpreter]].	platformName = 'Mac OS'		ifTrue: [^ (('10*' match: SmalltalkImage current osVersion)					and: [(SmalltalkImage current getSystemAttribute: 3) isNil])				ifTrue: [MacUnicodeInputInterpreter]				ifFalse: [MacShiftJISInputInterpreter]].	platformName = 'unix'		ifTrue: [encoding := X11Encoding encoding.			(EUCJPTextConverter encodingNames includes: encoding)				ifTrue: [^ UnixEUCJPInputInterpreter].			(UTF8TextConverter encodingNames includes: encoding)				ifTrue: [^ UnixUTF8JPInputInterpreter].			(ShiftJISTextConverter encodingNames includes: encoding)				ifTrue: [^ MacShiftJISInputInterpreter]].	^ MacRomanInputInterpreter! !!UnixUnicodeInputInterpreter methodsFor: 'keyboard' stamp: 'yo 10/10/2007 20:50'!nextCharFrom: sensor firstEvt: evtBuf 	| keyValue mark |	keyValue := evtBuf at: self keyValueIndex.	mark := self japaneseSpecialMark: keyValue.	mark notNil		ifTrue: [^ mark].	keyValue < 256		ifTrue: [^ Character value: keyValue].	"Smalltalk systemLanguage charsetClass charFromUnicode: keyValue."	^ Unicode value: keyValue! !!LanguageEnvironment class methodsFor: 'private' stamp: 'yo 10/17/2007 08:33'!win32VMUsesUnicode	| buildDate ind date obj vmHead |	obj :=  Smalltalk at: #SmalltalkImage ifAbsent: [Smalltalk].	obj == Smalltalk ifFalse: [obj := obj current].	vmHead := obj getSystemAttribute: 1004.	vmHead ifNil: [^ false].	buildDate := obj getSystemAttribute: 1006.	buildDate ifNil: [^ false].	ind := buildDate indexOfSubCollection: 'on'.	date := Date readFromString: (buildDate copyFrom: ind+3 to: buildDate size).	(vmHead beginsWith: 'Croquet') ifTrue: [		^ date >= (Date readFromString: '1 Feb 2007')	].	(vmHead beginsWith: 'Squeak') ifTrue: [		^ date >= (Date readFromString: '5 June 2007')	].	^ false."LanguageEnvironment win32VMUsesUnicode"! !!UnixUnicodeInputInterpreter methodsFor: 'accessing' stamp: 'yo 10/10/2007 17:24'!keyValueIndex	^ keyValueIndex! !!UnicodeCompositionStream methodsFor: 'as yet unclassified' stamp: 'yo 10/10/2007 19:42'!contents	(self isCombining) ifTrue: [^ super contents copyWith: combinedChar combined].	^ super contents.! !!UnixUnicodeInputInterpreter methodsFor: 'conversion' stamp: 'yo 10/10/2007 17:24'!japaneseSpecialMark: anInteger 	"For japanese special marks.	This method converts 'YEN SIGN' (16rA5) to 'REVERSE SOLIDUS' (16r5C)	and use Japanese leading characters instead of Unicode for below	characters.	'CENT SIGN' (16rA2)	'POUND SIGN' (16rA3)	'SECTION SIGN' (16rA7)	'DIAERESIS' (16rA8)	'NOT SIGN' (16rAC)	'DEGREE SIGN' (16rB0)	'PLUS-MINUS SIGN (16rB1)	'ACUTE ACCENT' (16rB4)	'PILCROW SIGN' (16rB6)	'MULTIPLICATION SIGN' (16rD7)	'DIVISION SIGN' (16rF7)	"	Project current localeID			= (LocaleID isoLanguage: 'ja')		ifTrue: [anInteger = 16rA5				ifTrue: [^ Character value: 16r5C].			(#(16rA2 16rA3 16rA7 16rA8 16rAC 16rB0 16rB1 16rB4 16rB6 16rD7 16rF7) includes: anInteger)				ifTrue: [^ Character leadingChar: JapaneseEnvironment leadingChar code: anInteger]].	^ nil! !KeyboardInputInterpreter class removeSelector: #new!KeyboardInputInterpreter removeSelector: #initialize!