"Change Set:		8068CollectionsTests-nice.107CollectionsTests-nice.107:Add a test denying a WeakArray isLiteralCollectionsTests-nice.105:Test #isSelfEvaluating a bit deeperCollectionsTests-nice.106:Provide non regression tests for literal Array storeOn: (especially it must not loose bits when storing Float)"!!ArrayTest methodsFor: 'testing' stamp: 'nice 11/3/2009 21:28'!testIsLiteral	"We work with a copy of literalArray, to avoid corrupting the code."		| aLiteralArray |	aLiteralArray := literalArray copy.	self assert: aLiteralArray isLiteral.	aLiteralArray at: 1 put: self class.	self deny: aLiteralArray isLiteral.	self deny: (literalArray as: WeakArray) isLiteral description: 'instances of Array subclasses are not literal'.! !!ArrayTest methodsFor: 'testing' stamp: 'nice 11/1/2009 19:14'!testLiteralStoreOn	"Test that a literal Array is stored and evaluated back unchanged"		| anArray |	anArray := {true. false. nil. #a. 'a'. $a. -1. 0. 1. Float pi. Float halfPi. Float halfPi negated.}.	anArray := anArray copyWith: anArray.	self assert: anArray isLiteral.	self assert: (Compiler evaluate: anArray storeString) = anArray.! !!AssociationTest methodsFor: 'tests' stamp: 'nice 10/30/2009 20:24'!testIsSelfEvaluating	| anotherAssociation |	self 		assert: (a isSelfEvaluating).	anotherAssociation := Object new -> Object new.	anotherAssociation isSelfEvaluating ifTrue: [self		assert: (Compiler evaluate: anotherAssociation printString) = anotherAssociation		description: 'a self evaluating should evaluate as self'].! !!RunArrayTest methodsFor: 'tests - instance creation' stamp: 'nice 10/30/2009 20:28'!testIsSelfEvaluating	| array array2 |	array := RunArray new: 5 withAll: 2.	self assert: array isSelfEvaluating.	array2 := RunArray new: 5 withAll: Object new.	array2 isSelfEvaluating ifTrue: [self		assert: (Compiler evaluate: array2 printString) = array2		description: 'a self evaluating should evaluate as self'].! !