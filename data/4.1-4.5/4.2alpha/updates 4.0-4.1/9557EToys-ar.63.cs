"Change Set:		9557EToys-ar.63EToys-ar.63:Remove two unused methods.EToys-dtl.62:The correct spelling of Etoys is 'Etoys'. Therefore rename the EToys package to 'Etoys' and recategorize all package overrides to '*Etoys'."!ObjectRepresentativeMorph subclass: #ClassRepresentativeMorph	instanceVariableNames: 'classRepresented'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!Object subclass: #ButtonProperties	instanceVariableNames: 'target actionSelector arguments actWhen wantsRolloverIndicator mouseDownTime nextTimeToFire visibleMorph delayBetweenFirings mouseOverHaloWidth mouseOverHaloColor mouseDownHaloWidth mouseDownHaloColor stateCostumes currentLook'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Buttons'!AlignmentMorph subclass: #Viewer	instanceVariableNames: 'scriptedPlayer'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!Player subclass: #KedamaTurtlePlayer	instanceVariableNames: 'world who x y headingRadians color visible'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!SymbolListTile subclass: #ScriptNameTile	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!TileLikeMorph subclass: #CompoundTileMorph	instanceVariableNames: 'type testPart yesPart noPart'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!AlignmentMorph subclass: #WatcherWrapper	instanceVariableNames: 'player variableName'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Support'!MethodWithInterface subclass: #UniclassScript	instanceVariableNames: 'currentScriptEditor formerScriptingTiles isTextuallyCoded lastSourceString'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!Morph subclass: #KedamaPatchMorph	instanceVariableNames: 'form displayMax shiftAmount useLogDisplay displayForm diffusionRate scaledEvaporationRate sniffRange formChanged tmpForm autoChanged displayType'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!ThumbnailMorph subclass: #PlayerReferenceReadout	instanceVariableNames: 'putSelector'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Support'!StandardViewer subclass: #KedamaStandardViewer	instanceVariableNames: 'stub restrictedIndex restrictedWho'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!TileMorph subclass: #ParameterTile	instanceVariableNames: 'scriptEditor'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!Object subclass: #ScriptInstantiation	instanceVariableNames: 'player selector status frequency anonymous tickingRate lastTick'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!Object subclass: #VariableDock	instanceVariableNames: 'variableName type definingMorph morphGetSelector morphPutSelector playerGetSelector playerPutSelector defaultValue'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Stacks'!AlignmentMorph subclass: #PlayerSurrogate	instanceVariableNames: 'playerRepresented'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!SketchMorph subclass: #StickySketchMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Support'!PluggableTextMorph subclass: #MethodMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!Notification subclass: #GetTriggeringObjectNotification	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-CustomEvents'!StandardScriptingSystem subclass: #EToySystem	instanceVariableNames: ''	classVariableNames: 'EToyVersion EToyVersionDate'	poolDictionaries: ''	category: 'Etoys-Experimental'!KedamaExamplerPlayer subclass: #KedamaSequenceExecutionStub	instanceVariableNames: 'who index arrays exampler'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!ScriptInstantiation subclass: #UserScript	instanceVariableNames: 'currentScriptEditor formerScriptEditors'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!ObjectRepresentativeMorph subclass: #ListViewLine	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!TileMorph subclass: #KedamaTurtleAtTile	instanceVariableNames: 'turtleTile'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!EToyVocabulary subclass: #EToyVectorVocabulary	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Protocols'!PlayerType subclass: #KedamaPatchType	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!SimpleButtonMorph subclass: #ScriptActivationButton	instanceVariableNames: 'uniclassScript'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!ColorTileMorph subclass: #ColorSeerTile	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!CategoryViewer subclass: #SearchingViewer	instanceVariableNames: 'searchString'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!Morph subclass: #TilePadMorph	instanceVariableNames: 'type'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!TileMorph subclass: #SoundTile	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!TileMorph subclass: #ColorTileMorph	instanceVariableNames: 'colorSwatch'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!AlignmentMorph subclass: #AllPlayersTool	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!Object subclass: #ActorState	instanceVariableNames: 'owningPlayer penDown penSize penColor fractionalPosition instantiatedUserScriptsDictionary penArrowheads trailStyle'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Support'!AlignmentMorph subclass: #ScriptEditorMorph	instanceVariableNames: 'scriptName firstTileRow timeStamp playerScripted handWithTile showingMethodPane threadPolygon'	classVariableNames: 'WritingUniversalTiles'	poolDictionaries: ''	category: 'Etoys-Scripting'!MessageNode subclass: #TileMessageNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Tile Scriptors'!UpdatingSimpleButtonMorph subclass: #ScriptableButton	instanceVariableNames: 'scriptSelector'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!SimpleHierarchicalListMorph subclass: #EToyHierarchicalTextMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Outliner'!TileMorph subclass: #KedamaUpHillTile	instanceVariableNames: 'patchTile'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!AlignmentMorphBob1 subclass: #EToyCommunicatorMorph	instanceVariableNames: 'fields resultQueue'	classVariableNames: 'LastFlashTime'	poolDictionaries: ''	category: 'Etoys-Experimental'!Presenter subclass: #EtoysPresenter	instanceVariableNames: 'associatedMorph standardPlayer standardPlayfield standardPalette playerList'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!CategoryViewer subclass: #KedamaCategoryViewer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!TileMorph subclass: #KedamaAngleToTile	instanceVariableNames: 'turtleTile'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!EToyProjectDetailsMorph subclass: #EToyProjectQueryMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Experimental'!TileMorph subclass: #StringReadoutTile	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!ListItemWrapper subclass: #EToyTextNodeWrapper	instanceVariableNames: 'parentWrapper'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Outliner'!AlignmentMorph subclass: #ViewerLine	instanceVariableNames: 'elementSymbol'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!SymbolListType subclass: #UserCustomEventNameType	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-CustomEvents'!AbstractHierarchicalList subclass: #EToyHierarchicalTextGizmo	instanceVariableNames: 'topNode'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Outliner'!TileMorph subclass: #RandomNumberTile	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!SymbolListType subclass: #ScriptNameType	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Protocols-Type Vocabularies'!AssignmentTileMorph subclass: #KedamaSetColorComponentTile	instanceVariableNames: 'patchTile'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!FloatArray variableWordSubclass: #KedamaFloatArray	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!GenericPropertiesMorph subclass: #ObjectPropertiesMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Experimental'!AlignmentMorph subclass: #AllScriptsTool	instanceVariableNames: 'showingOnlyActiveScripts showingAllInstances showingOnlyTopControls'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!MessageNode subclass: #MessagePartNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Tile Scriptors'!Player subclass: #CardPlayer	instanceVariableNames: 'privateMorphs'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Stacks'!Model subclass: #ScriptingDomain	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!AlignmentMorph subclass: #TileLikeMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!TileMorph subclass: #MenuTile	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!Morph subclass: #KedamaMorph	instanceVariableNames: 'dimensions wrapX wrapY pixelsPerPatch patchesToDisplay patchVarDisplayForm lastTurtleID turtleCount turtlesDict turtlesDictSemaphore turtlesToDisplay magnifiedDisplayForm autoChanged topEdgeMode bottomEdgeMode leftEdgeMode rightEdgeMode topEdgeModeMnemonic bottomEdgeModeMnemonic leftEdgeModeMnemonic rightEdgeModeMnemonic'	classVariableNames: 'RandomSeed'	poolDictionaries: ''	category: 'Etoys-StarSqueak'!RectangleMorph subclass: #UpdatingRectangleMorph	instanceVariableNames: 'target lastValue getSelector putSelector contents'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Support'!UpdatingRectangleMorph subclass: #ColorSwatch	instanceVariableNames: 'argument'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Support'!AssignmentTileMorph subclass: #KedamaSetPixelValueTile	instanceVariableNames: 'patchTile'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!TextContainer subclass: #SimplerTextContainer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Outliner'!TileMorph subclass: #KedamaBounceOnTile	instanceVariableNames: 'playerTile'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!AlignmentMorphBob1 subclass: #EtoyLoginMorph	instanceVariableNames: 'theName theNameMorph actionBlock cancelBlock'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Experimental'!IndentingListItemMorph subclass: #IndentingListParagraphMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Outliner'!AlignmentMorph subclass: #SyntaxMorph	instanceVariableNames: 'parseNode markerMorph'	classVariableNames: 'AllSpecs ContrastFactor DownRightArrow SelfTile SizeScaleFactor'	poolDictionaries: ''	category: 'Etoys-Tile Scriptors'!TileMorph subclass: #KedamaBounceOnColorTile	instanceVariableNames: 'playerTile colorTile'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!AlignmentMorphBob1 subclass: #StretchyImageMorph	instanceVariableNames: 'form cache'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Experimental'!TileMorph subclass: #KedamaDistanceToTile	instanceVariableNames: 'turtleTile'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!TextMorph subclass: #ShowEmptyTextMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Experimental'!RectangleMorph subclass: #TileMorph	instanceVariableNames: 'type slotName literal operatorOrExpression actualObject downArrow upArrow suffixArrow typeColor lastArrowTick nArrowTicks operatorReadoutString possessive retractArrow vocabulary vocabularySymbol'	classVariableNames: 'DownPicture RetractPicture SuffixArrowAllowance SuffixPicture UpArrowAllowance UpPicture UpdatingOperators'	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!DataType subclass: #PlayerType	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Protocols-Type Vocabularies'!AlignmentMorph subclass: #ScriptStatusLine	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!MethodInterface subclass: #MethodWithInterface	instanceVariableNames: 'playerClass'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!Viewer subclass: #StandardViewer	instanceVariableNames: 'firstPanel'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!Player subclass: #UnscriptedPlayer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!TwoWayScrollPane subclass: #PluggableTileScriptorMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Tile Scriptors'!AlignmentMorph subclass: #ObjectRepresentativeMorph	instanceVariableNames: 'objectRepresented'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!EToyProjectRenamerMorph subclass: #EToyProjectDetailsMorph	instanceVariableNames: 'projectDetails'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Experimental'!AlignmentMorphBob1 subclass: #GenericPropertiesMorph	instanceVariableNames: 'myTarget thingsToRevert'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Experimental'!Object subclass: #KedamaVectorizer	instanceVariableNames: 'attributes root'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!TileMorph subclass: #KedamaGetPixelValueTile	instanceVariableNames: 'patchTile'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!Model subclass: #Player	instanceVariableNames: 'costume costumes'	classVariableNames: 'BiggestSubclassNumber TimeOfError'	poolDictionaries: 'References'	category: 'Etoys-Scripting'!TileMorph subclass: #AssignmentTileMorph	instanceVariableNames: 'assignmentRoot assignmentSuffix dataType'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!TileMorph subclass: #KedamaGetColorComponentTile	instanceVariableNames: 'patchTile'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!CategoryViewer subclass: #KedamaWhoSearchingViewer	instanceVariableNames: 'searchString'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!EToyGenericDialogMorph subclass: #EToyProjectRenamerMorph	instanceVariableNames: 'actionBlock theProject'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Experimental'!TileMorph subclass: #KedamaPatchTile	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!TileMorph subclass: #KedamaTurtleOfTile	instanceVariableNames: 'turtleTile'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!BookMorph subclass: #StackMorph	instanceVariableNames: 'cards'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Stacks'!UpdatingStringMorph subclass: #SyntaxUpdatingStringMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Tile Scriptors'!AlignmentMorph subclass: #ScriptStatusControl	instanceVariableNames: 'tickPauseWrapper tickPauseButtonsShowing scriptInstantiation'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!ThumbnailMorph subclass: #ThumbnailForAllPlayersTool	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!PhraseTileMorph subclass: #SystemQueryPhrase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!AlignmentMorphBob1 subclass: #EToyGenericDialogMorph	instanceVariableNames: 'namedFields'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Experimental'!ScriptEditorMorph subclass: #BooleanScriptEditor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Support'!TileMorph subclass: #UndescribedTile	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!UpdatingThreePhaseButtonMorph subclass: #EtoyUpdatingThreePhaseButtonMorph	instanceVariableNames: ''	classVariableNames: 'CheckedForm MouseDownForm UncheckedForm'	poolDictionaries: ''	category: 'Etoys-Widgets'!Object subclass: #SlotInformation	instanceVariableNames: 'type documentation floatPrecision variableDock variableDefinition'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!EToyCommunicatorMorph subclass: #EToyProjectHistoryMorph	instanceVariableNames: 'changeCounter'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Experimental'!Object subclass: #KedamaAttributeDictionary	instanceVariableNames: 'dictionaries'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!KedamaExamplerPlayer subclass: #KedamaTurtleVectorPlayer	instanceVariableNames: 'exampler info types arrays deletingIndex whoTable whoTableBase whoTableValid turtlesMap turtleMapValid lastWho lastWhoStub'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!SymbolListTile subclass: #TypeListTile	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!StringReadoutTile subclass: #SoundReadoutTile	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!Morph subclass: #KedamaTurtleMorph	instanceVariableNames: 'kedamaWorld turtleCount isGroup'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!TileLikeMorph subclass: #PhraseTileMorph	instanceVariableNames: 'resultType brightenedOnEnter userScriptSelector justGrabbedFromViewer vocabulary vocabularySymbol'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!Viewer subclass: #CategoryViewer	instanceVariableNames: 'namePane chosenCategorySymbol'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!UnscriptedPlayer subclass: #UnscriptedCardPlayer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting'!GenericPropertiesMorph subclass: #TextPropertiesMorph	instanceVariableNames: 'activeTextMorph applyToWholeText lastGlobalColor'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Experimental'!TileMorph subclass: #BooleanTile	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!Vocabulary subclass: #EToyVocabulary	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Protocols'!TileMorph subclass: #SymbolListTile	instanceVariableNames: 'choices dataType'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!TextMorph subclass: #EToyTextNode	instanceVariableNames: 'children firstDisplay'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Outliner'!TileMorph subclass: #GraphicTile	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!TileMorph subclass: #NumericReadoutTile	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-Scripting Tiles'!Player subclass: #KedamaExamplerPlayer	instanceVariableNames: 'kedamaWorld turtles sequentialStub'	classVariableNames: ''	poolDictionaries: ''	category: 'Etoys-StarSqueak'!!ColorType methodsFor: '*Etoys-tiles' stamp: 'yo 4/5/2005 11:36'!updatingTileForTarget: aTarget partName: partName getter: getter setter: setter	"Answer, for classic tiles, an updating readout tile for a part with the receiver's type, with the given getter and setter"	| readout |	readout _ UpdatingRectangleMorph new.	readout		getSelector: getter;		target: aTarget;		borderWidth: 1;		extent:  22@22.	((aTarget isKindOf: KedamaExamplerPlayer) and: [getter = #getColor]) ifTrue: [		readout getSelector: #getColorOpaque.	].	(setter isNil or: [#(unused none #nil) includes: setter]) ifFalse:		[readout putSelector: setter].	^ readout! !!GeeMailMorph methodsFor: '*Etoys-customevents-stepping and presenter' stamp: 'nk 10/12/2003 13:23'!step	"For each submorph of thePasteUp that has just been scrolled into view, fire the script named #scrolledIntoView, if any.	For each submorph of thePasteUp that has just been scrolled out of view, fire the script named #scrolledOutOfView, if any."	| lastVisible nowVisible newlyVisible newlyInvisible |	super step.	lastVisible := self visibleMorphs.	nowVisible := (thePasteUp submorphs copyWithoutAll: (self allTextPlusMorphs))		select: [ :m | self bounds intersects: (m boundsIn: self world) ].	newlyInvisible := lastVisible difference: nowVisible.	newlyInvisible do: [ :ea | ea triggerEvent: #scrolledOutOfView ].	newlyVisible := nowVisible difference: lastVisible.	newlyVisible do: [ :ea | ea triggerEvent: #scrolledIntoView ].	self visibleMorphs: nowVisible.	! !!StandardScriptingSystem methodsFor: '*Etoys-form dictionary' stamp: 'sw 5/2/1998 14:01'!readFormsFromFileNamed: aFileName	"Read the entire FormDictionary in from a designated file on disk"	| aReferenceStream |	aReferenceStream := ReferenceStream fileNamed: aFileName.	FormDictionary := aReferenceStream next.	aReferenceStream close	"ScriptingSystem readFormsFromFileNamed: 'EToyForms22Apr'"! !!StandardScriptingSystem methodsFor: '*Etoys-universal slots & scripts' stamp: 'sw 9/27/2001 04:08'!systemSlotNamesOfType: aType	"Answer the type of the slot name, or nil if not found."		| aList |	self flag: #deferred.  "Hard-coded etoyVocabulary needed here to make this work."	aList := OrderedCollection new.	Vocabulary eToyVocabulary methodInterfacesDo:		 [:anInterface |			anInterface resultType = aType ifTrue:				[aList add: anInterface selector]].	^ aList! !!CodeHolder methodsFor: '*Etoys-tiles' stamp: 'sw 2/3/2001 00:10'!showingTiles	"Answer whether the receiver is currently showing tiles"	^ contentsSymbol == #tiles! !!StandardScriptingSystem methodsFor: '*Etoys-tile colors' stamp: 'sw 8/28/2004 15:19'!colorForType: typeSymbol	"Answer the color to use to represent the given type symbol"	true ifTrue:		[^ self standardTileBorderColor].	typeSymbol capitalized = #Command ifTrue:		[^ Color fromRgbTriplet: #(0.065 0.258 1.0)].	"Command is historical and idiosyncratic and should be regularized"	^ (Vocabulary vocabularyForType: typeSymbol) typeColor! !!BooleanType methodsFor: '*Etoys-color' stamp: 'sw 9/27/2001 17:20'!typeColor	"Answer the color for tiles to be associated with objects of this type"	^ self subduedColorFromTriplet: #(0.94 1.0 0.06)! !!TextMorph methodsFor: '*Etoys-support' stamp: 'sw 9/15/2000 06:14'!getNumericValue	"Obtain a numeric value from the receiver; if no digits, return zero"	| aString |	^ [(aString := text string) asNumber] ifError: [:a :b | ^ aString asInteger ifNil: [0]]! !!TempVariableNode methodsFor: '*Etoys-tiles' stamp: 'ab 7/13/2004 13:54'!explanation	^(self isArg ifTrue: ['Method argument'] ifFalse: ['Temporary variable']),' <',self name,'>'! !!GeeMailMorph methodsFor: '*Etoys-customevents' stamp: 'nk 10/12/2003 13:23'!releaseCachedState	super releaseCachedState.	self removeProperty: #visibleMorphs! !!SymbolListType methodsFor: '*Etoys-tiles' stamp: 'sw 12/3/2001 21:00'!newReadoutTile	"Answer a tile that can serve as a readout for data of this type"	^ SymbolListTile new choices: self choices dataType: self vocabularyName! !!TextFieldMorph methodsFor: '*Etoys-card in a stack' stamp: 'tk 1/6/2001 14:20'!couldHoldSeparateDataForEachInstance	"Answer whether this type of morph is inherently capable of holding separate data for each instance ('card data')"	^ true! !!NumberType methodsFor: '*Etoys-color' stamp: 'sw 9/27/2001 17:21'!typeColor	"Answer the color for tiles to be associated with objects of this type"	^ self subduedColorFromTriplet: #(0.8 0.4 0.2)! !!TextMorph methodsFor: '*Etoys-support' stamp: 'sw 10/2/97 15:16'!configureForKids	super configureForKids.	self lock! !!Point methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:26'!basicType	"Answer a symbol representing the inherent type of the receiver"	^ #Point! !!DataType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 13:15'!defaultArgumentTile	"Answer a tile to represent the type"	^ 'arg' newTileMorphRepresentative typeColor: self typeColor! !!AlignmentMorph methodsFor: '*Etoys-initialization' stamp: 'ar 10/25/2000 17:53'!addUpDownArrowsFor: aMorph	"Add a column of up and down arrows that serve to send upArrowHit and downArrowHit to aMorph when they're pressed/held down"	| holder downArrow upArrow |	holder := Morph new extent: 16 @ 16; beTransparent.	downArrow := ImageMorph new image: (ScriptingSystem formAtKey: 'DownArrow').	upArrow := ImageMorph new image: (ScriptingSystem formAtKey: 'UpArrow').	upArrow position: holder bounds topLeft + (2@2).	downArrow align: downArrow bottomLeft				with: holder topLeft + (0 @ TileMorph defaultH) + (2@-2).	holder addMorph: upArrow.	holder addMorph: downArrow.	self addMorphBack: holder.	upArrow on: #mouseDown send: #upArrowHit to: aMorph.	upArrow on: #mouseStillDown send: #upArrowHit to: aMorph.	downArrow on: #mouseDown send: #downArrowHit to: aMorph.	downArrow on: #mouseStillDown send: #downArrowHit to: aMorph.! !!Lexicon methodsFor: '*Etoys-tiles' stamp: 'tk 9/7/2001 10:24'!varTilesMenu	"Offer a menu of tiles for instance variables and a new temporary"	SyntaxMorph new offerVarsMenuFor: self targetObject in: self! !!Morph methodsFor: '*Etoys-customevents-scripting' stamp: 'nk 9/25/2003 11:37'!removeEventTrigger: aSymbol	"Remove all the event registrations for my Player that are triggered by aSymbol.	User custom events are triggered at the World,	while system custom events are triggered on individual Morphs."	| player |	(player := self player) ifNil: [ ^self ].	self removeEventTrigger: aSymbol for: player.	self currentWorld removeEventTrigger: aSymbol for: player.! !!DataType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 02:29'!affordsCoercionToBoolean	"Answer true if a tile of this data type, when dropped into a pane that demands a boolean, could plausibly be expanded into a comparison (of the form  frog < toad   or frog = toad) to provide a boolean expression"	^ true! !!ServerDirectory methodsFor: '*Etoys-school support' stamp: 'ar 8/24/2001 14:31'!eToyUserListUrl: aString	eToyUserListUrl := aString.	eToyUserList := nil.! !!PasteUpMorph methodsFor: '*Etoys-world menu' stamp: 'sw 6/6/2004 13:16'!attemptCleanup	"Try to fix up some bad things that are known to occur in some etoy projects we've seen.  This is a bare beginning, but a useful place to tack on further cleanups, which then can be invoked whenever the attempt-cleanup item invoked from the debug menu"	self attemptCleanupReporting: true"ActiveWorld attemptCleanup"! !!SimpleSliderMorph methodsFor: '*Etoys-support' stamp: 'sw 9/1/2000 10:38'!setNumericValue: aValue	"Set the numeric value of the receiver to be as indicated"	^ self setScaledValue: aValue! !!Morph methodsFor: '*Etoys-customevents-scripting' stamp: 'nk 9/25/2003 11:11'!renameScriptActionsFor: aPlayer from: oldSelector to: newSelector	self updateableActionMap keysAndValuesDo: [ :event :sequence |		sequence asActionSequence do: [ :action |			((action receiver == aPlayer)				and: [ (#(doScript: triggerScript:) includes: action selector)					and: [ action arguments first == oldSelector ]])						ifTrue: [ action arguments at: 1 put: newSelector ]]]! !!AlignmentMorph methodsFor: '*Etoys-support' stamp: 'panda 4/25/2000 15:44'!configureForKids	self disableDragNDrop.	super configureForKids! !!Number methodsFor: '*Etoys-vocabulary' stamp: 'sw 8/3/2001 13:43'!vocabularyDemanded	"Answer the vocabulary normally preferred by this object"	^ Vocabulary numberVocabulary! !!StandardScriptingSystem methodsFor: '*Etoys-parts bin' stamp: 'sw 7/3/2001 08:01'!tilesForQuery: expressionString label: aLabel	"Answer scripting tiles that represent the query,"	| aPhrase aTile |	aPhrase := SystemQueryPhrase new.	aTile := BooleanTile new.	aTile setExpression: expressionString  label: aLabel.	aPhrase addMorph: aTile.	^ aPhrase! !!StringType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:33'!setFormatForDisplayer: aDisplayer	"Set up the displayer to have the right format characteristics"	aDisplayer useStringFormat	! !!StandardScriptingSystem methodsFor: '*Etoys-customevents-custom events' stamp: 'nk 9/26/2003 23:30'!globalCustomEventNames	^self customEventsRegistry keys asArray sort! !!NumberType methodsFor: '*Etoys-tiles' stamp: 'dgd 9/6/2003 20:30'!addExtraItemsToMenu: aMenu forSlotSymbol: slotSym	"If the receiver has extra menu items to add to the slot menu, here is its chance to do it.  The defaultTarget of the menu is the player concerned."	aMenu add: 'decimal places...' translated selector: #setPrecisionFor: argument: slotSym.	aMenu balloonTextForLastItem: 'Lets you choose how many decimal places should be shown in readouts for this variable' translated! !!TheWorldMenu methodsFor: '*Etoys-action' stamp: 'dgd 9/1/2003 15:05'!uniTilesClassicString	^ ((myProject			parameterAt: #uniTilesClassic			ifAbsent: [false])		ifTrue: ['<yes>']		ifFalse: ['<no>']), 'classic tiles' translated! !!StandardScriptingSystem methodsFor: '*Etoys-font & color choices' stamp: 'dgd 7/12/2003 12:05'!fontForTiles	^ Preferences standardEToysFont! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'sw 12/20/2003 18:02'!reportToUser: aString	"Make a message accessible to the user.  For the moment, we simply defer to the Transcript mechanism"	Transcript cr; show: aString! !!StandardScriptingSystem methodsFor: '*Etoys-customevents-custom events' stamp: 'nk 10/12/2003 13:14'!customEventsRegistry	^Smalltalk at: #CustomEventsRegistry ifAbsentPut: [ IdentityDictionary new ].! !!StandardScriptingSystem methodsFor: '*Etoys-customevents-custom events' stamp: 'nk 9/26/2003 23:23'!addUserCustomEventNamed: aSymbol help: helpString	self currentWorld addUserCustomEventNamed: aSymbol help: helpString.	"Vocabulary addStandardVocabulary: UserCustomEventNameType new."	Vocabulary customEventsVocabulary.	SymbolListTile updateAllTilesForVocabularyNamed: #CustomEvents! !!StandardScriptingSystem methodsFor: '*Etoys-form dictionary' stamp: 'sw 4/23/1999 11:24'!restorePrivateGraphics	"ScriptingSystem restorePrivateGraphics"	| aReferenceStream |	aReferenceStream := ReferenceStream fileNamed: 'disGraphics'.	self mergeGraphicsFrom: aReferenceStream next.	aReferenceStream close.! !!PasteUpMorph methodsFor: '*Etoys-support' stamp: 'nk 8/29/2004 17:17'!currentVocabularyFor: aScriptableObject 	"Answer the Vocabulary object to be applied when scripting an object in the world."	| vocabSymbol vocab aPointVocab |	vocabSymbol := self valueOfProperty: #currentVocabularySymbol				ifAbsent: [nil].	vocabSymbol ifNil: 			[vocab := self valueOfProperty: #currentVocabulary ifAbsent: [nil].			vocab ifNotNil: 					[vocabSymbol := vocab vocabularyName.					self removeProperty: #currentVocabulary.					self setProperty: #currentVocabularySymbol toValue: vocabSymbol]].	vocabSymbol ifNotNil: [^Vocabulary vocabularyNamed: vocabSymbol]		ifNil: 			[(aScriptableObject isPlayerLike) ifTrue: [^Vocabulary eToyVocabulary].			(aScriptableObject isNumber) 				ifTrue: [^Vocabulary numberVocabulary].			(aScriptableObject isKindOf: Time) 				ifTrue: [^Vocabulary vocabularyForClass: Time].			(aScriptableObject isString) 				ifTrue: [^Vocabulary vocabularyForClass: String].			(aScriptableObject isPoint) 				ifTrue: 					[(aPointVocab := Vocabulary vocabularyForClass: Point) 						ifNotNil: [^aPointVocab]].			(aScriptableObject isKindOf: Date) 				ifTrue: [^Vocabulary vocabularyForClass: Date].			"OrderedCollection and Holder??"			^Vocabulary fullVocabulary]! !!MessageSend methodsFor: '*Etoys-tiles' stamp: 'nice 12/27/2009 03:11'!asTilesIn: playerClass globalNames: makeSelfGlobal	| code tree syn block phrase |	"Construct SyntaxMorph tiles for me.  If makeSelfGlobal is true, name the receiver and use that name, else use 'self'.  (Note that this smashes 'self' into the receiver, regardless of what it was.)"	"This is really cheating!!  Make a true parse tree later. -tk"	code := String streamContents: [:strm | | keywords num | 		strm nextPutAll: 'doIt'; cr; tab.		strm nextPutAll: 			(makeSelfGlobal ifTrue: [self stringFor: receiver] ifFalse: ['self']).		keywords := selector keywords.		strm space; nextPutAll: keywords first.		(num := selector numArgs) > 0 ifTrue: [strm space. 					strm nextPutAll: (self stringFor: arguments first)].		2 to: num do: [:kk |			strm space; nextPutAll: (keywords at: kk).			strm space; nextPutAll: (self stringFor: (arguments at: kk))]].	"decompile to tiles"	tree := Compiler new 		parse: code 		in: playerClass		notifying: nil.	syn := tree asMorphicSyntaxUsing: SyntaxMorph.	block := syn submorphs detect: [:mm | 		(mm respondsTo: #parseNode) ifTrue: [			mm parseNode class == BlockNode] ifFalse: [false]].	phrase := block submorphs detect: [:mm | 		(mm respondsTo: #parseNode) ifTrue: [			mm parseNode class == MessageNode] ifFalse: [false]].	^ phrase! !!TheWorldMenu methodsFor: '*Etoys-scripting' stamp: 'ar 3/17/2001 20:16'!adaptedToWorld: aWorld	"Can use me but need to adapt myself"	self adaptToWorld: aWorld.! !!Text methodsFor: '*Etoys-tiles' stamp: 'tk 11/1/2001 14:37'!basicType	"Answer a symbol representing the inherent type I hold"	"Number String Boolean player collection sound color etc"	^ #Text! !!ReturnNode methodsFor: '*Etoys-tiles' stamp: 'RAA 8/15/1999 19:31'!explanation	^'Exit this method returning the value of ',expr explanation! !!StandardScriptingSystem methodsFor: '*Etoys-customevents-custom events' stamp: 'nk 9/26/2003 23:22'!userCustomEventNames	^ self currentWorld userCustomEventNames! !!SymbolListType methodsFor: '*Etoys-tiles' stamp: 'sw 12/3/2001 19:15'!defaultArgumentTile	"Answer a tile to represent the type"	| aTile choices |	aTile := SymbolListTile new choices: (choices := self choices) dataType: self vocabularyName.	aTile addArrows.	aTile setLiteral: choices first.	^ aTile! !!MatrixTransformMorph methodsFor: '*Etoys-geometry' stamp: 'ar 6/12/2001 06:03'!heading: newHeading	"Set the receiver's heading (in eToy terms)"	self rotateBy: ((newHeading - self forwardDirection) - self innerAngle).! !!Morph methodsFor: '*Etoys-customevents-scripting' stamp: 'ul 12/12/2009 14:09'!instantiatedUserScriptsDo: aBlock	self actorStateOrNil ifNotNil: [ :aState | aState instantiatedUserScriptsDictionary do: aBlock]! !!NumberType methodsFor: '*Etoys-tiles' stamp: 'sw 9/15/2002 16:50'!addUserSlotItemsTo: aMenu slotSymbol: slotSym	"Optionally add items to the menu that pertain to a user-defined slot of the given symbol"	"aMenu add: 'decimal places...' selector: #setPrecisionFor: argument: slotSym	NB: This item is now generically added for system as well as user slots, so the addition is now done in NubmerType.addExtraItemsToMenu:forSlotSymbol:"! !!PluggableTextMorphWithModel methodsFor: '*Etoys-card in a stack' stamp: 'sw 10/24/2000 14:52'!couldHoldSeparateDataForEachInstance	"Answer whethre the receiver is structurally capable of holding uniqe data for each ard instance"	^ true! !!DataType methodsFor: '*Etoys-tiles' stamp: 'sw 1/12/2005 08:35'!addWatcherItemsToMenu: aMenu forGetter: aGetter	"Add watcher items to the menu if appropriate, provided the getter is not an odd-ball one for which a watcher makes no sense"	(Vocabulary gettersForbiddenFromWatchers includes: aGetter) ifFalse:		[aMenu add: 'simple watcher' translated selector: #tearOffUnlabeledWatcherFor: argument: aGetter.		aMenu add: 'detailed watcher' translated selector: #tearOffFancyWatcherFor: argument: aGetter.		aMenu addLine]! !!ColorType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:30'!defaultArgumentTile	"Answer a tile to represent the type"	^ Color blue newTileMorphRepresentative! !!SymbolListType methodsFor: '*Etoys-tiles' stamp: 'sw 1/12/2005 10:13'!affordsCoercionToBoolean	"Answer true if a tile of this data type, when dropped into a pane that demands a boolean, could plausibly be expanded into a comparison (of the form  frog < toad   or frog = toad) to provide a boolean expression"	"Formerly this had been disabled (9/27/01) but from today's perspective I don't see any reason to disable it..."	^ true! !!BookMorph methodsFor: '*Etoys-support' stamp: 'sw 10/2/97 15:22'!configureForKids	super configureForKids.	pages do:		[:aPage | aPage configureForKids].! !!TheWorldMenu methodsFor: '*Etoys-popups' stamp: 'RAA 5/26/2000 10:27'!scriptingDo	self doPopUp: self scriptingMenu! !!StandardScriptingSystem methodsFor: '*Etoys-parts bin' stamp: 'tk 10/20/2004 15:52'!anyButtonPressedTiles	"Answer tiles representing the query 'is any button pressed?'"	^ self tilesForQuery: '(ActiveHand anyButtonPressed)' label: 'button down?' translated! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'sw 10/30/2000 16:45'!resetStaleScriptingReferences	"Remove all scripting references that are no longer needed"	References  removeUnreferencedKeys	"ScriptingSystem resetStaleScriptingReferences"! !!CodeHolder methodsFor: '*Etoys-tiles' stamp: 'sw 5/20/2001 21:12'!showingTilesString	"Answer a string characterizing whether tiles are currently showing or not"	^ (self showingTiles		ifTrue:			['<yes>']		ifFalse:			['<no>']), 'tiles'! !!Lexicon methodsFor: '*Etoys-tiles' stamp: 'tk 9/7/2001 10:15'!tilesMenu	"Offer a menu of tiles for assignment and constants"	SyntaxMorph new offerTilesMenuFor: self targetObject in: self! !!Number methodsFor: '*Etoys-tiles' stamp: 'sw 10/31/97 13:54'!newTileMorphRepresentative	^ TileMorph new addArrows; setLiteral: self; addSuffixIfCan! !!StandardScriptingSystem methodsFor: '*Etoys-script-control' stamp: 'dgd 9/19/2003 14:41'!stepButton	| aButton |	self flag: #deferred.  "ambiguity about recipients"	aButton := ThreePhaseButtonMorph new.		aButton			image:  (ScriptingSystem formAtKey: 'StepPicOn');			offImage: (ScriptingSystem formAtKey: 'StepPic');			pressedImage:  (ScriptingSystem formAtKey: 'StepPicOn');			arguments: (Array with: nil with: aButton);		 	actionSelector: #stepStillDown:with:; 			target: self;			setNameTo: 'Step Button'; 			actWhen: #whilePressed;			on: #mouseDown send: #stepDown:with: to: self;			on: #mouseStillDown send: #stepStillDown:with: to: self;			on: #mouseUp send: #stepUp:with: to: self;			setBalloonText:'Run every paused script exactly once.  Keep the mouse button down over "Step" and everything will keep running until you release it' translated.	^ aButton! !!StringHolder methodsFor: '*Etoys-tiles' stamp: 'di 11/4/2000 11:07'!openSyntaxView	"Open a syntax view on the current method"	| class selector |	(selector := self selectedMessageName) ifNotNil: [		class := self selectedClassOrMetaClass.		SyntaxMorph testClass: class andMethod: selector.	]! !!HandleMorph methodsFor: '*Etoys-support' stamp: 'sw 6/30/1999 20:40'!isCandidateForAutomaticViewing	^ false! !!VariableNode methodsFor: '*Etoys-tiles' stamp: 'ab 7/13/2004 13:53'!explanation	self isSelfPseudoVariable ifTrue: [^'the pseudo variable <self> (refers to the receiver)'].	^(#('instance' 'temporary' 'LIT3' 'global') 			at: self type 			ifAbsent: ['UNK',self type printString]),' variable <',self name,'>'			"LdInstType := 1.	LdTempType := 2.	LdLitType := 3.	LdLitIndType := 4."! !!NumberType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 02:53'!comparatorForSampleBoolean	"Answer the comparator to use in tile coercions involving the receiver; normally, the equality comparator is used but NumberType overrides"	^ #<! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'sw 2/26/2003 22:44'!nameForInstanceVariablesCategory	"Answer the name to use for the viewer category that contains instance variables"	^ #variables    	"^ #'instance variables'""ScriptingSystem nameForInstanceVariablesCategory"! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'kfr 9/23/2003 09:44'!arithmeticalOperatorsAndHelpStrings	"Answer an array consisting of lists of the standard arithmetical operator tiles and of the corresponding balloon help for them"	^ #((+ - * / // \\ max: min:)	 	('add' 'subtract' 'multiply' 'divide' 'divide & truncate' 'remainder when divided by' 'larger value' 'smaller value' ))! !!UpdatingStringMorph methodsFor: '*Etoys-card in a stack' stamp: 'tk 9/26/2001 06:04'!couldHoldSeparateDataForEachInstance	"Answer whether this type of morph is inherently capable of holding separate data for each instance ('card data')"	^ true! !!ColorPickerMorph methodsFor: '*Etoys-support' stamp: 'sw 7/6/1999 09:00'!isCandidateForAutomaticViewing	^ false! !!StandardScriptingSystem methodsFor: '*Etoys-script-control' stamp: 'sw 10/30/1998 15:33'!stepDown: evt with: aMorph	aMorph presenter stopRunningScripts! !!SimpleSliderMorph methodsFor: '*Etoys-support' stamp: 'sw 7/4/2004 01:53'!arrowDeltaFor: aGetter	"Here just for testing the arrowDelta feature.  To test, re-enable the code below by commenting out the first line, and you should see the minVal slot of the slider go up and down in increments of 5 as you work the arrows on its readout tile in a freshly-launched Viewer or detailed watcher"		true ifTrue: [^ super arrowDeltaFor: aGetter]. 		^ (aGetter == #getMinVal)		ifTrue:			[5]		ifFalse:			[1]! !!Quadrangle methodsFor: '*Etoys-vocabulary' stamp: 'sw 5/4/2001 16:45'!vocabularyDemanded	"Answer the vocabulary that the receiver really would like to use in a Viewer"	^ Vocabulary quadVocabulary! !!StandardScriptingSystem methodsFor: '*Etoys-universal slots & scripts' stamp: 'kfr 9/23/2003 09:29'!doesOperatorWantArrows: aSymbol	aSymbol = #, ifTrue:[^ false].	^ aSymbol isInfix or: [#(isDivisibleBy:) includes: aSymbol]! !!PasteUpMorph methodsFor: '*Etoys-support' stamp: 'dgd 8/31/2003 19:39'!modernizeBJProject	"Prepare a kids' project from the BJ fork of September 2000 -- a once-off thing for converting such projects forward to a modern 3.1a image, in July 2001.  Except for the #enableOnlyGlobalFlapsWithIDs: call, this could conceivably be called upon reloading *any* project, just for safety."	"ActiveWorld modernizeBJProject"	ScriptEditorMorph allInstancesDo:		[:m | m userScriptObject].	Flaps enableOnlyGlobalFlapsWithIDs: {'Supplies' translated}.	ActiveWorld abandonOldReferenceScheme.	ActiveWorld relaunchAllViewers.! !!StandardScriptingSystem methodsFor: '*Etoys-customevents-custom events' stamp: 'nice 12/26/2009 21:56'!customEventNamesAndHelpStringsFor: aPlayer	| retval morph |	morph := aPlayer costume renderedMorph.	retval := SortedCollection sortBlock: [ :a :b | a first < b first ].	self customEventsRegistry		keysAndValuesDo: [ :k :v |			| helpStrings |			helpStrings := Array streamContents: [ :hsStream |				v keysAndValuesDo: [ :registrant :array |					(morph isKindOf: array second) ifTrue: [						| help |						help := String streamContents: [ :stream |										v size > 1											ifTrue: [ stream nextPut: $(;													nextPutAll: array second name;													nextPut: $);													space ].										stream nextPutAll: array first ].						hsStream nextPut: help ]]].			helpStrings isEmpty ifFalse: [retval add: { k. helpStrings } ]].	^ retval! !!TextMorph methodsFor: '*Etoys-support' stamp: 'sw 9/1/2000 10:44'!setNumericValue: aValue	"Set the contents of the receiver to be a string obtained from aValue"	self newContents: aValue asString! !!StandardScriptingSystem methodsFor: '*Etoys-form dictionary' stamp: 'sw 9/14/2000 21:29'!readFormsFromFileNamed: aFileName andStoreIntoGlobal: globalName	"Read the a FormDictionary in from a designated file on disk and save it in the designated global"	| aReferenceStream |	aReferenceStream := ReferenceStream fileNamed: aFileName.	Smalltalk at: globalName put: aReferenceStream next.	aReferenceStream close	"ScriptingSystem readFormsFromFileNamed: 'SystemFormsFromFwdF.forms' andStoreIntoGlobal: #FormsTemp"	"ScriptingSystem saveForm:  (FormsTemp at: #StackElementDesignationHelp) atKey: #StackElementDesignationHelp"! !!Morph methodsFor: '*Etoys-customevents-scripting' stamp: 'nk 9/25/2003 11:36'!removeAllEventTriggers	"Remove all the event registrations for my Player.	User custom events are triggered at the World,	while system custom events are triggered on individual Morphs."	| player |	(player := self player) ifNil: [ ^self ].	self removeAllEventTriggersFor: player.	self currentWorld removeAllEventTriggersFor: player.! !!Number methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:26'!basicType	"Answer a symbol representing the inherent type of the receiver"	^ #Number! !!StandardScriptingSystem methodsFor: '*Etoys-font & color choices' stamp: 'nk 7/12/2003 08:59'!smallBoldFont	"Answer a small bold font for use in some standard scripting-support structures"	^ StrikeFont familyName: Preferences standardEToysFont familyName size: 12! !!UnknownType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 13:33'!affordsCoercionToBoolean	"Answer true if a tile of this data type, when dropped into a pane that demands a boolean, could plausibly be expanded into a comparison (of the form  frog < toad   or frog = toad) to provide a boolean expression"	^ false! !!ParseNode methodsFor: '*Etoys-tiles' stamp: 'ab 7/13/2004 13:47'!addCommentToMorph: aMorph	| row |	(self comment isNil or: [self comment isEmpty]) ifTrue: [^ self].	row := aMorph addTextRow:		(String streamContents: [:strm | self printCommentOn: strm indent: 1]).	row firstSubmorph color: (SyntaxMorph translateColor: #comment).	row parseNode: (self as: CommentNode).! !!Form methodsFor: '*Etoys-testing' stamp: 'RAA 1/19/2001 15:04'!appearsToBeSameCostumeAs: anotherForm	(anotherForm isKindOf: self class) ifFalse: [^false].	anotherForm depth = self depth ifFalse: [^false].	^anotherForm bits = bits! !!Class methodsFor: '*Etoys-class name' stamp: 'sw 12/1/2000 20:40'!uniqueNameForReference	"Answer a unique name by which the receiver can be referred to from user scripts, for example"	^ name! !!ServerDirectory methodsFor: '*Etoys-school support' stamp: 'ar 9/5/2001 16:05'!eToyUserName: aString	"Ignored here"! !!PasteUpMorph methodsFor: '*Etoys-customevents-scripting' stamp: 'nk 9/26/2003 23:18'!userCustomEventsRegistry	^self valueOfProperty: #userCustomEventsRegistry ifAbsentPut: [ IdentityDictionary new ].! !!StandardScriptingSystem methodsFor: '*Etoys-form dictionary' stamp: 'sw 11/26/1999 15:37'!mergeGraphicsFrom: aDictionary	"aDictionary is assumed to hold associations of the form <formName> -> <form>.   Merge the graphics held by that dictionary into the internal FormDictionary, overlaying any existing entries with the ones found in aDictionary"	aDictionary associationsDo:		[:assoc | self saveForm: assoc value atKey: assoc key]		"works ok even if keys in aDictionary are strings rather than symbols"! !!WeakMessageSend methodsFor: '*Etoys-tiles' stamp: 'nk 4/25/2002 09:34'!asTilesIn: playerClass globalNames: makeSelfGlobal	^self asMessageSend asTilesIn: playerClass globalNames: makeSelfGlobal! !!MessageSend methodsFor: '*Etoys-tiles' stamp: 'nice 12/27/2009 03:11'!asTilesIn: playerClass	| code tree syn block phrase |	"Construct SyntaxMorph tiles for me."	"This is really cheating!!  Make a true parse tree later. -tk"	code := String streamContents: [:strm | | num keywords | 		strm nextPutAll: 'doIt'; cr; tab.		strm nextPutAll: (self stringFor: receiver).		keywords := selector keywords.		strm space; nextPutAll: keywords first.		(num := selector numArgs) > 0 ifTrue: [strm space. 					strm nextPutAll: (self stringFor: arguments first)].		2 to: num do: [:kk |			strm space; nextPutAll: (keywords at: kk).			strm space; nextPutAll: (self stringFor: (arguments at: kk))]].	"decompile to tiles"	tree := Compiler new 		parse: code 		in: playerClass		notifying: nil.	syn := tree asMorphicSyntaxUsing: SyntaxMorph.	block := syn submorphs detect: [:mm | 		(mm respondsTo: #parseNode) ifTrue: [			mm parseNode class == BlockNode] ifFalse: [false]].	phrase := block submorphs detect: [:mm | 		(mm respondsTo: #parseNode) ifTrue: [			mm parseNode class == MessageNode] ifFalse: [false]].	^ phrase! !!StringType methodsFor: '*Etoys-tiles' stamp: 'yo 3/14/2005 21:27'!defaultArgumentTile        "Answer a tile to represent the type"        ^ 'abc' translated newTileMorphRepresentative typeColor: self typeColor! !!PasteUpMorph methodsFor: '*Etoys-support' stamp: 'sw 2/18/2003 01:46'!getCharacters	"obtain a string value from the receiver"	^ String streamContents:		[:aStream |			submorphs do:				[:m | aStream nextPutAll: m getCharacters]]! !!SoundType methodsFor: '*Etoys-color' stamp: 'sw 9/27/2001 17:21'!typeColor	"Answer the color for tiles to be associated with objects of this type"	^ self subduedColorFromTriplet: #(1.0 0.06 0.84)	! !!PasteUpMorph methodsFor: '*Etoys-world menu' stamp: 'sw 7/22/2001 00:55'!abandonOldReferenceScheme	"Perform a one-time changeover"	"ActiveWorld abandonOldReferenceScheme"	Preferences setPreference: #capitalizedReferences toValue: true.	(self presenter allExtantPlayers collect: [:aPlayer | aPlayer class]) asSet do:			[:aPlayerClass |				aPlayerClass isUniClass ifTrue:					[aPlayerClass abandonOldReferenceScheme]]! !!PasteUpMorph methodsFor: '*Etoys-support' stamp: 'sw 2/18/2003 02:56'!elementCount	"Answer how many objects are contained within me"	^ submorphs size! !!EventHandler methodsFor: '*Etoys-initialization' stamp: 'jcg 9/21/2001 12:57'!forgetDispatchesTo: aSelector	"aSelector is no longer implemented by my corresponding Player, so don't call it any more"	mouseDownSelector == aSelector		ifTrue: [mouseDownRecipient := mouseDownSelector := nil].	mouseMoveSelector == aSelector		ifTrue: [mouseMoveRecipient := mouseMoveSelector := nil].	mouseStillDownSelector == aSelector		ifTrue: [mouseStillDownRecipient := mouseStillDownSelector := nil].	mouseUpSelector == aSelector		ifTrue: [mouseUpRecipient := mouseUpSelector := nil].	mouseEnterSelector == aSelector		ifTrue: [mouseEnterRecipient := mouseEnterSelector := nil].	mouseLeaveSelector == aSelector		ifTrue: [mouseLeaveRecipient := mouseLeaveSelector := nil].	mouseEnterDraggingSelector == aSelector		ifTrue: [mouseEnterDraggingRecipient := mouseEnterDraggingSelector := nil].	mouseLeaveDraggingSelector == aSelector		ifTrue: [mouseLeaveDraggingRecipient := mouseLeaveDraggingSelector := nil].	clickSelector == aSelector		ifTrue: [clickRecipient := clickSelector := nil].	doubleClickSelector == aSelector		ifTrue: [doubleClickRecipient := doubleClickSelector := nil].	doubleClickTimeoutSelector == aSelector		ifTrue: [doubleClickTimeoutRecipient := doubleClickTimeoutSelector := nil].	keyStrokeSelector == aSelector		ifTrue: [keyStrokeRecipient := keyStrokeSelector := nil].! !!MenuType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:30'!defaultArgumentTile	"Answer a tile to represent the type"	^ MenuTile new typeColor: self typeColor! !!HandMorph methodsFor: '*Etoys-scripting' stamp: 'ar 3/17/2001 20:11'!adaptedToWorld: aWorld	"If I refer to a world or a hand, return the corresponding items in the new world."	^aWorld primaryHand! !!StandardScriptingSystem methodsFor: '*Etoys-customevents-help dictionary' stamp: 'nk 11/1/2004 08:21'!statusHelpStringFor: aPlayer	^String streamContents: [ :stream |		stream nextPutAll: 'normal -- run when calledpaused -- ready to run all the timeticking -- run all the timemouseDown -- run when mouse goes down on memouseStillDown -- while mouse still downmouseUp -- when mouse comes back upmouseEnter -- when mouse enters my bounds, button upmouseLeave -- when mouse exits my bounds, button upmouseEnterDragging -- when mouse enters my bounds, button downmouseLeaveDragging -- when mouse exits my bounds, button downopening -- when I am being openedclosing -- when I am being closed' translated."'keyStroke -- run when user hits a key' "	stream cr; cr; nextPutAll: 'More events:' translated; cr.	(self customEventNamesAndHelpStringsFor: aPlayer) do: [ :array |		stream cr;		nextPutAll: array first;		nextPutAll: ' -- '.		array second do: [ :help | stream nextPutAll: help translated ]			separatedBy: [ stream nextPutAll: ' or ' translated ]].	(Preferences allowEtoyUserCustomEvents) ifTrue: [	self userCustomEventNames isEmpty ifFalse: [		stream cr; cr; nextPutAll: 'User custom events:' translated; cr.		self currentWorld userCustomEventsRegistry keysAndValuesDo: [ :key :value |			stream cr; nextPutAll: key; nextPutAll: ' -- '; nextPutAll: value ]]]]! !!TextMorph methodsFor: '*Etoys-player' stamp: 'sw 10/25/2000 07:02'!variableDocks	"Answer a list of VariableDock objects for docking up my data with an instance held in my containing playfield"	^ Array with: (VariableDock new variableName: self defaultVariableName type: #text definingMorph: self morphGetSelector: #contents morphPutSelector: #setNewContentsFrom:)! !!StandardScriptingSystem methodsFor: '*Etoys-form dictionary' stamp: 'sw 5/6/1998 17:46'!saveFormsToFileNamed: aFileName	"Save the current state of form dictionary to disk for possible later retrieval"  	 (ReferenceStream fileNamed: aFileName) nextPut: FormDictionary; close	"ScriptingSystem saveFormsToFileNamed: 'SystemForms06May98.forms'"! !!GeeMailMorph methodsFor: '*Etoys-customevents-access' stamp: 'nk 10/12/2003 13:22'!visibleMorphs: morphs	"Answer a collection of morphs that were visible as of the last step"	self setProperty: #visibleMorphs toValue: (WeakArray withAll: morphs)! !!ServerDirectory methodsFor: '*Etoys-school support' stamp: 'ar 8/24/2001 14:31'!eToyUserList: aCollectionOrNil	"Set a list of all known users for eToy login support"	eToyUserList := aCollectionOrNil.! !!NumberType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:37'!newReadoutTile	"Answer a tile that can serve as a readout for data of this type"	^ NumericReadoutTile new typeColor: Color lightGray lighter! !!ServerDirectory methodsFor: '*Etoys-school support' stamp: 'ar 9/5/2001 15:45'!eToyUserList	"Return a list of all known users for eToy login support"	| urlString |	eToyUserList ifNotNil:[^eToyUserList].	urlString := self eToyUserListUrl.	urlString ifNil:[^nil].	eToyUserList := self class parseEToyUserListFrom: urlString.	^eToyUserList! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'sw 10/30/2000 16:47'!resetAllScriptingReferences	"Clear out all the elements in the References directory"		Smalltalk at: #References put: IdentityDictionary new	"ScriptingSystem resetAllScriptingReferences"! !!MenuMorph methodsFor: '*Etoys-control' stamp: 'sw 6/30/1999 20:30'!isCandidateForAutomaticViewing	^ false! !!ParseNode methodsFor: '*Etoys-tiles' stamp: 'RAA 8/24/1999 13:06'!currentValueIn: aContext	^nil! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'dgd 7/12/2003 12:05'!tryButtonFor: aPhraseTileMorph 	| aButton |	aButton := SimpleButtonMorph new.	aButton target: aPhraseTileMorph;		 actionSelector: #try;				label: '!!'		font: Preferences standardEToysFont;		 color: Color yellow;		 borderWidth: 0.	aButton actWhen: #whilePressed.	aButton balloonTextSelector: #try.	^ aButton! !!Lexicon methodsFor: '*Etoys-tiles' stamp: 'nb 6/17/2003 12:25'!acceptTiles	| pp pq methodNode cls sel |	"In complete violation of all the rules of pluggable panes, search dependents for my tiles, and tell them to accept."	pp := self dependents detect: [:pane | pane isKindOf: PluggableTileScriptorMorph] 			ifNone: [^ Beeper beep].	pq := pp findA: TransformMorph.	methodNode := pq findA: SyntaxMorph.	cls := methodNode parsedInClass.	sel := cls compile: methodNode decompile classified: self selectedCategoryName			notifying: nil.	self noteAcceptanceOfCodeFor: sel.	self reformulateListNoting: sel.! !!StandardScriptingSystem methodsFor: '*Etoys-font & color choices' stamp: 'sw 5/2/1998 14:26'!colorBehindTiles	^ Color r: 0.903 g: 1.0 b: 0.903! !!Object methodsFor: '*Etoys-tiles' stamp: 'sw 9/26/2001 11:58'!basicType	"Answer a symbol representing the inherent type of the receiver"	^ #Object! !!ImageMorph methodsFor: '*Etoys-player' stamp: 'sw 10/25/2000 06:58'!variableDocks	"Answer a list of VariableDock objects for docking up my data with an instance held in my containing playfield"	^ Array with: (VariableDock new variableName: self defaultVariableName type: #form definingMorph: self morphGetSelector: #image morphPutSelector: #setNewImageFrom:)! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'sw 10/30/2000 09:33'!referenceAt: aSymbol put: anObject	"Store a reference to anObject at the given symbol in the References directory"	^ References at: aSymbol put: anObject! !!StandardScriptingSystem methodsFor: '*Etoys-font & color choices' stamp: 'dgd 7/12/2003 12:06'!fontForNameEditingInScriptor	^ Preferences standardEToysFont! !!DataType methodsFor: '*Etoys-tiles' stamp: 'sw 9/26/2001 03:18'!wantsSuffixArrow	"Answer whether a tile showing data of this type would like to have a suffix arrow"	^ false! !!SketchMorph methodsFor: '*Etoys-player' stamp: 'sw 10/25/2000 07:01'!variableDocks	"Answer a list of VariableDock objects for docking up my data with an instance held in my containing playfield"	^ Array with: (VariableDock new variableName: self defaultVariableName  type: #form definingMorph: self morphGetSelector: #form morphPutSelector: #setNewFormFrom:)! !!PasteUpMorph methodsFor: '*Etoys-support' stamp: 'tk 6/14/1998 15:18'!scriptorForTextualScript: aSelector ofPlayer: aPlayer	| aScriptor |	self world ifNil: [^ nil].	aScriptor := ScriptEditorMorph new setMorph: aPlayer costume scriptName: aSelector.	aScriptor position: (self primaryHand position - (10 @ 10)).	^ aScriptor! !!TabbedPalette methodsFor: '*Etoys-support' stamp: 'sw 7/5/1998 15:40'!succeededInRevealing: aPlayer	| result |	result := super succeededInRevealing: aPlayer.	result ifTrue:		["BookMorph code will have called goToPageNumber:; here, we just need to get the tab selection right here"		self selectTabOfBook: self currentPalette].	^ result! !!SketchMorph methodsFor: '*Etoys-e-toy support' stamp: 'nk 6/12/2004 10:04'!acquirePlayerSimilarTo: aSketchMorphsPlayer	"Retrofit into the receiver a player derived from the existing scripted player of a different morph.  Works only between SketchMorphs. Maddeningly complicated by potential for transformations or native sketch-morph scaling in donor or receiver or both"	| myName myTop itsTop newTop newSketch |	myTop := self topRendererOrSelf.	aSketchMorphsPlayer belongsToUniClass ifFalse: [^ Beeper beep].	itsTop := aSketchMorphsPlayer costume.	(itsTop renderedMorph isSketchMorph)		ifFalse:	[^ Beeper beep].	newTop := itsTop veryDeepCopy.  "May be a sketch or a tranformation"	myName := myTop externalName.  "Snag before the replacement is added to the world, because otherwise that could affect this"	newSketch := newTop renderedMorph.	newSketch form: self form.	newSketch scalePoint: self scalePoint.	newSketch bounds: self bounds.	myTop owner addMorph: newTop after: myTop.	newTop heading ~= myTop heading ifTrue:		"avoids annoying round-off error in what follows"			[newTop player setHeading: myTop heading]. 	(newTop isFlexMorph and: [myTop == self])		ifTrue:			[newTop removeFlexShell].	newTop := newSketch topRendererOrSelf.	newTop bounds: self bounds.	(newTop isFlexMorph and:[myTop isFlexMorph]) ifTrue:[		"Note: This completely dumps the above #bounds: information.		We need to recompute the bounds based on the transform."		newTop transform: myTop transform copy.		newTop computeBounds].	newTop setNameTo: myName.	newTop player class bringScriptsUpToDate.	myTop delete! !!PasteUpMorph methodsFor: '*Etoys-support' stamp: 'RAA 10/4/2000 08:24'!fenceEnabled	^ self valueOfProperty: #fenceEnabled ifAbsent: [Preferences fenceEnabled]! !!DataType methodsFor: '*Etoys-tiles' stamp: 'sw 9/26/2001 03:11'!wantsAssignmentTileVariants	"Answer whether an assignment tile for a variable of this type should show variants to increase-by, decrease-by, multiply-by.  NumberType says yes, the rest of us say no"	^ false! !!StandardScriptingSystem methodsFor: '*Etoys-parts bin' stamp: 'sw 5/3/1999 22:40'!prototypicalHolder	| aHolder |	aHolder := PasteUpMorph authoringPrototype color: Color orange muchLighter; borderColor: Color orange lighter.	aHolder setNameTo: 'holder'; extent: 160 @ 110.	^ aHolder behaveLikeHolder.! !!TextMorph methodsFor: '*Etoys-player' stamp: 'sw 10/30/2000 09:01'!currentDataValue	"Answer the current data value held by the receiver"	^ text! !!StandardScriptingSystem methodsFor: '*Etoys-customevents-custom events' stamp: 'nk 6/30/2004 18:16'!standardEventStati	"Answer the events that can be directed to a particular morph by its event handler."	^ #(mouseDown	"run when mouse goes down on me"		mouseStillDown	"while mouse still down"		mouseUp		"when mouse comes back up"		mouseEnter	"when mouse enters my bounds, button up"		mouseLeave	"when mouse exits my bounds, button up"		mouseEnterDragging	"when mouse enters my bounds, button down"		mouseLeaveDragging	"when mouse exits my bounds, button down"		"keyStroke"		"gesture"	)! !!TextMorph methodsFor: '*Etoys-card in a stack' stamp: 'nice 12/27/2009 20:31'!setNewContentsFrom: stringOrTextOrNil	"Using stringOrTextOrNil as a guide, set the receiver's contents afresh.  If the input parameter is nil, the a default value stored in a property of the receiver, if any, will supply the new initial content.  This method is only called when a VariableDock is attempting to put a new value.  This is still messy and ill-understood and not ready for prime time."	| defaultValue |	stringOrTextOrNil ifNotNil: [^ self newContents: stringOrTextOrNil 		fromCard: (self valueOfProperty: #cardInstance)].		   "Well, totally yuk -- emergency measure late on eve of demo"	defaultValue := self valueOfProperty: #defaultValue 					ifAbsent: [ | atts tt |						atts := text attributesAt: 1.	"Preserve size, emphasis"						tt := text copyReplaceFrom: 1 to: text size								with: 'blankText'.						atts do: [:anAtt | tt addAttribute: anAtt].						tt].	self contents: defaultValue deepCopy wrappedTo: self width.! !!HandMorph methodsFor: '*Etoys-pen' stamp: 'di 9/10/1998 16:20'!trailMorph	"You can't draw trails when picked up by the hand."	^ nil! !!BookMorph methodsFor: '*Etoys-support' stamp: 'sw 8/11/1998 16:50'!succeededInRevealing: aPlayer	currentPage ifNotNil: [currentPage player == aPlayer ifTrue: [^ true]].	pages do:		[:aPage |			(aPage succeededInRevealing: aPlayer) ifTrue:				[self goToPageMorph: aPage.				^ true]].	^ false! !!TextMorph methodsFor: '*Etoys-card in a stack' stamp: 'sw 5/31/2000 01:18'!newContents: stringOrText fromCard: aCard	"Accept new text contents."	| newText setter |	newText := stringOrText asText.	text = newText ifTrue: [^ self].  "No substantive change"	text ifNotNil: [		text embeddedMorphs do: [ :m | m delete ] ].	text := newText.	"add all morphs off the visible region; they'll be moved into the right place when they become visible.  (this can make the scrollable area too large, though)"	stringOrText asText embeddedMorphs do: [ :m | 		self addMorph: m. 		m position: (-1000@0)].	self releaseParagraph.  "update the paragraph cache"	self paragraph.  "re-instantiate to set bounds"	self holdsSeparateDataForEachInstance		ifTrue:			[setter := self valueOfProperty: #setterSelector.			setter ifNotNil:				[aCard perform: setter with: newText]].	self world ifNotNil:		[self world startSteppingSubmorphsOf: self ].! !!GraphicType methodsFor: '*Etoys-color' stamp: 'sw 9/27/2001 17:21'!typeColor	"Answer the color for tiles to be associated with objects of this type"	^ self subduedColorFromTriplet: #(0.806 1.0 0.806)	! !!TextFieldMorph methodsFor: '*Etoys-player' stamp: 'tk 1/6/2001 13:58'!variableDocks	"Answer a list of VariableDock objects for docking up my data with an instance held in my containing playfield"	^ Array with: (VariableDock new variableName: self defaultVariableName type: #text definingMorph: self morphGetSelector: #contents morphPutSelector: #setNewContentsFrom:)! !!PasteUpMorph methodsFor: '*Etoys-world menu' stamp: 'nk 10/14/2004 07:07'!makeAllScriptEditorsReferToMasters	"Ensure that all script editors refer to the first (by alphabetical externalName) Player among the list of siblings"	(self presenter allExtantPlayers groupBy: [ :p | p class ] having: [ :p | true ])		do: [ :group | group first allScriptEditors ]! !!TheWorldMenu methodsFor: '*Etoys' stamp: 'nk 10/14/2004 07:08'!scriptingMenu	"Build the authoring-tools menu for the world."	^ self fillIn: (self menu: 'authoring tools...') from: { 		{ 'objects (o)' . { #myWorld . #activateObjectsTool }. 'A searchable source of new objects.'}.		nil.  "----------" 		{ 'view trash contents' . { #myWorld . #openScrapsBook:}. 'The place where all your trashed morphs go.'}. 		{ 'empty trash can' . { Utilities . #emptyScrapsBook}. 'Empty out all the morphs that have accumulated in the trash can.'}.		nil.  "----------"			{ 'new scripting area' . { #myWorld . #detachableScriptingSpace}. 'A window set up for simple scripting.'}.		nil.  "----------"					{ 'status of scripts' . {#myWorld . #showStatusOfAllScripts}. 'Lets you view the status of all the scripts belonging to all the scripted objects of the project.'}.		{ 'summary of scripts' . {#myWorld . #printScriptSummary}. 'Produces a summary of scripted objects in the project, and all of their scripts.'}.		{ 'browser for scripts' . {#myWorld . #browseAllScriptsTextually}. 'Allows you to view all the scripts in the project in a traditional programmers'' "browser" format'}.		nil.		{ 'gallery of players' . {#myWorld . #galleryOfPlayers}. 'A tool that lets you find out about all the players used in this project'}."		{ 'gallery of scripts' . {#myWorld . #galleryOfScripts}. 'Allows you to view all the scripts in the project'}."		{ 'etoy vocabulary summary' . {#myWorld . #printVocabularySummary }. 'Displays a summary of all the pre-defined commands and properties in the pre-defined EToy vocabulary.'}.		{ 'attempt misc repairs' . {#myWorld . #attemptCleanup}. 'Take measures that may help fix up some things about a faulty or problematical project.'}.		{ 'remove all viewers' . {#myWorld . #removeAllViewers}. 'Remove all the Viewers from this project.'}.		{ 'refer to masters' . {#myWorld . #makeAllScriptEditorsReferToMasters }. 'Ensure that all script editors are referring to the first (alphabetically by external name) Player of their type' }.		nil.  "----------" 		{ 'unlock locked objects' . { #myWorld . #unlockContents}. 'If any items on the world desktop are currently locked, unlock them.'}.		{ 'unhide hidden objects' . { #myWorld . #showHiders}. 'If any items on the world desktop are currently hidden, make them visible.'}.        }! !!StandardScriptingSystem methodsFor: '*Etoys-script-control' stamp: 'sw 11/11/1998 15:16'!stopUp: dummy with: theButton	| aPresenter |	(aPresenter := theButton presenter) flushPlayerListCache.  "catch guys not in cache but who're running"	aPresenter stopRunningScriptsFrom: theButton! !!BooleanType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:20'!defaultArgumentTile	"Answer a tile to represent the type"	^ true newTileMorphRepresentative typeColor: self typeColor! !!Morph methodsFor: '*Etoys-customevents-scripting' stamp: 'nk 11/1/2004 10:58'!triggerEtoyEvent: aSymbol from: aMorph	"Trigger whatever scripts may be connected to the event named aSymbol.	If anyone comes back to ask who sent it, return aMorph's player."	[ self triggerEvent: aSymbol ]		on: GetTriggeringObjectNotification do: [ :ex |			ex isNested				ifTrue: [ ex pass ]				ifFalse: [ ex resume: aMorph assuredPlayer ]]! !!StandardScriptingSystem methodsFor: '*Etoys-viewer' stamp: 'sw 10/30/2000 09:07'!uniqueNameForReference	"Answer a more-or-less global name by which the receiver can be referred to in scripts"	^ #ScriptingSystem! !!WeakMessageSend methodsFor: '*Etoys-tiles' stamp: 'nk 4/25/2002 09:34'!asTilesIn: playerClass	^self asMessageSend asTilesIn: playerClass! !!NumberType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:30'!defaultArgumentTile	"Answer a tile to represent the type"	^ 5 newTileMorphRepresentative typeColor: self typeColor! !!Vocabulary methodsFor: '*Etoys-color' stamp: 'sw 9/27/2001 17:47'!subduedColorFrom: aColor	"Answer a subdued color derived from the given color"	^ aColor mixed: ScriptingSystem colorFudge with: ScriptingSystem uniformTileInteriorColor! !!StandardScriptingSystem methodsFor: '*Etoys-script-control' stamp: 'sw 10/30/1998 15:35'!stepStillDown: dummy with: theButton	theButton presenter stepStillDown: dummy with: theButton! !!ImageMorph methodsFor: '*Etoys-other' stamp: ''!wearCostume: anotherMorph	self image: anotherMorph form.! !!SketchMorph methodsFor: '*Etoys-accessing' stamp: 'RAA 3/15/2001 09:11'!wearCostume: anotherMorph	self form: anotherMorph form.! !!ImageMorph methodsFor: '*Etoys-player' stamp: 'sw 10/23/2000 18:22'!currentDataValue	"Answer the current data value of the receiver, to be stored in each card instance if appropriate"	^ image! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'sw 5/2/1998 14:17'!reclaimSpace	"Reclaim space from the scripting system, and report the result in an informer"	"ScriptingSystem reclaimSpace"	| reclaimed |	(reclaimed := self spaceReclaimed)  > 0		ifTrue:	[self inform: reclaimed printString, ' bytes reclaimed']		ifFalse:	[self inform: 'Hmm...  Nothing gained this time.']! !!Morph methodsFor: '*Etoys-customevents-scripting' stamp: 'nk 11/1/2004 11:00'!triggerCustomEvent: aSymbol	"Trigger whatever scripts may be connected to the custom event named aSymbol"	self currentWorld triggerEtoyEvent: aSymbol from: self! !!StandardScriptingSystem methodsFor: '*Etoys-parts bin' stamp: 'sw 10/27/1998 13:35'!resetStandardPartsBin	"ScriptingSystem resetStandardPartsBin"	StandardPartsBin := nil! !!StandardScriptingSystem methodsFor: '*Etoys-universal slots & scripts' stamp: 'sw 1/4/2005 02:20'!acceptableSlotNameFrom: originalString forSlotCurrentlyNamed: currentName asSlotNameIn: aPlayer world: aWorld	"Produce an acceptable slot name, derived from the current name, for aPlayer.  This method will always return a valid slot name that will be suitable for use in the given situation, though you might not like its beauty sometimes."	| aString stemAndSuffix proscribed stem suffix putative |	aString := originalString asIdentifier: false.  "get an identifier not lowercase"	stemAndSuffix := aString stemAndNumericSuffix.	proscribed := #(self super thisContext costume costumes dependents #true #false size), aPlayer class allInstVarNames.	stem := stemAndSuffix first.	suffix := stemAndSuffix last.	putative := aString asSymbol.		[(putative ~~ currentName) and: [(proscribed includes: putative)		or:	[(aPlayer respondsTo: putative)		or:	[Smalltalk includesKey: putative]]]]	whileTrue:		[suffix := suffix + 1.		putative := (stem, suffix printString) asSymbol].	^ putative! !!SketchMorph methodsFor: '*Etoys-player' stamp: 'sw 10/30/2000 10:28'!currentDataValue	"Answer the object which bears the current datum for the receiver"	^ originalForm! !!SketchMorph methodsFor: '*Etoys-geometry eToy' stamp: 'ar 9/22/2000 21:19'!heading: newHeading	"If not rotating normally, change forward direction rather than heading"	rotationStyle == #normal ifTrue:[^super heading: newHeading].	self isFlexed		ifTrue:[self forwardDirection: newHeading - owner rotationDegrees]		ifFalse:[self forwardDirection: newHeading].	self layoutChanged! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'sw 2/18/2001 17:50'!newScriptingSpace	"Answer a complete scripting space - raa 19 sept 2000 - experiment for Alan, a variant *not* in a window, now adopted as the only true scripting space"	^ self newScriptingSpace2! !!ServerDirectory methodsFor: '*Etoys-school support' stamp: 'ar 8/24/2001 14:29'!eToyUserListUrl	^eToyUserListUrl! !!ProjectViewMorph methodsFor: '*Etoys-user interface' stamp: 'RAA 7/10/2000 23:30'!eToyStreamedRepresentationNotifying: aWidget	| safeVariant outData |	self flag: #bob.		"probably irrelevant"	safeVariant := self copy.	[ outData := SmartRefStream streamedRepresentationOf: safeVariant ] 		on: ProgressInitiationException		do: [ :ex | 			ex sendNotificationsTo: [ :min :max :curr |				aWidget ifNotNil: [aWidget flashIndicator: #working].			].		].	^outData! !!Vocabulary methodsFor: '*Etoys-queries' stamp: 'sw 9/26/2001 12:01'!typeColor	"Answer the color for tiles to be associated with objects of this type"	^ self subduedColorFrom: Color green! !!SoundType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:33'!setFormatForDisplayer: aDisplayer	"Set up the displayer to have the right format characteristics"	aDisplayer useStringFormat	! !!PasteUpMorph methodsFor: '*Etoys-support' stamp: 'dgd 9/6/2003 18:01'!fenceEnabledString	"Answer the string to be shown in a menu to represent the  	fence enabled status"	^ (self fenceEnabled		ifTrue: ['<on>']		ifFalse: ['<off>'])		, 'fence enabled' translated! !!SketchMorph methodsFor: '*Etoys-tiles' stamp: 'tk 11/1/2001 12:42'!basicType	"Answer a symbol representing the inherent type I hold"	"Number String Boolean player collection sound color etc"	^ #Image! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'nice 12/26/2009 21:57'!reinvigorateThumbnailsInViewerFlapTabs	"It has happened that the thumbnail in a viewer flap tab will go solid gray because it got associated with some passing and disused player temporarily created during the initial painting process.  This method takes a sledge hammer to repair such thumbnails.   At its genesis, this method is called only from the postscript of its defining fileout."	ViewerFlapTab allInstancesDo:		[:aTab | 			| vwr thumbnail |			vwr := aTab referent findA: StandardViewer.			thumbnail := aTab findA: ThumbnailMorph.			(vwr notNil and: [thumbnail notNil]) ifTrue:				[thumbnail objectToView: vwr scriptedPlayer]]	"ScriptingSystem reinvigorateThumbnailsInViewerFlapTabs"! !!Inspector methodsFor: '*Etoys-menu commands' stamp: 'sw 10/23/2000 18:25'!tearOffTile	"Tear off a tile that refers to the receiver's selection, and place it in the mophic hand"	| objectToRepresent |	objectToRepresent := self selectionIndex == 0 ifTrue: [object] ifFalse: [self selection].	self currentHand attachMorph: (TileMorph new referTo: objectToRepresent)	! !!PaintInvokingMorph methodsFor: '*Etoys-support' stamp: 'sw 6/30/1999 20:31'!isCandidateForAutomaticViewing	^ self isPartsDonor not! !!FullVocabulary methodsFor: '*Etoys-initialization' stamp: 'sw 9/27/2001 17:21'!typeColor	"Answer the color for tiles to be associated with objects of this type"	^ self subduedColorFromTriplet: #(1.0 0.26 0.98)	! !!StandardScriptingSystem methodsFor: '*Etoys-script-control' stamp: 'sw 11/11/1998 15:24'!goUp: evt with: aGoButton	aGoButton presenter startRunningScriptsFrom: aGoButton! !!PasteUpMorph methodsFor: '*Etoys-world menu' stamp: 'RAA 1/8/2001 15:17'!hideAllPlayers	| a |	a := OrderedCollection new.	self allMorphsDo: [ :x | 		(x isKindOf: ViewerFlapTab) ifTrue: [a add: x]	].	a do: [ :each | each delete].! !!TextFieldMorph methodsFor: '*Etoys-player' stamp: 'sw 10/30/2000 09:03'!currentDataValue	"Answer the current data value held by the receiver"	^ self contents! !!TextFieldMorph methodsFor: '*Etoys-card in a stack' stamp: 'tk 1/6/2001 14:15'!setNewContentsFrom: textOrString	"talk to my text"	| tm |	(tm := self findA: TextMorph) ifNil: [^ nil].	tm valueOfProperty: #cardInstance ifAbsent: ["move it down"		tm setProperty: #cardInstance toValue: (self valueOfProperty: #cardInstance)].	tm valueOfProperty: #holdsSeparateDataForEachInstance ifAbsent: ["move it down"		tm setProperty: #holdsSeparateDataForEachInstance toValue: 			(self valueOfProperty: #holdsSeparateDataForEachInstance)].	^ tm setNewContentsFrom: textOrString! !!FlapTab methodsFor: '*Etoys-support' stamp: 'sw 1/25/2000 11:07'!isCandidateForAutomaticViewing	^ false! !!CodeHolder methodsFor: '*Etoys-tiles' stamp: 'rhi 1/4/2002 11:15'!showTiles: aBoolean	"Set the showingTiles as indicated.  The fact that there are initially no senders of this reflects that fact that initially this trait is only directly settable through the UI; later there may be senders, such as if one wanted to set a system up so that all newly-opened browsers showed tiles rather than text."	aBoolean		ifTrue:			[contentsSymbol := #tiles]		ifFalse:			[contentsSymbol == #tiles ifTrue: [contentsSymbol := #source]].	self setContentsToForceRefetch.	self changed: #contents! !!StandardScriptingSystem methodsFor: '*Etoys-form dictionary' stamp: 'sw 2/20/2002 01:09'!patchInNewStandardPlayerForm	"Patch in a darker and larger representation of a Dot.  No senders -- called from the postscript of an update"	"ScriptingSystem patchInNewStandardPlayerForm"	FormDictionary at: #standardPlayer put:		(Form	extent: 13@13	depth: 16	fromArray: #( 0 0 0 65536 0 0 0 0 0 65537 65537 65536 0 0 0 65537 65537 65537 65537 65536 0 0 65537 65537 65537 65537 65536 0 1 65537 65537 65537 65537 65537 0 1 65537 65537 65537 65537 65537 0 65537 65537 65537 65537 65537 65537 65536 1 65537 65537 65537 65537 65537 0 1 65537 65537 65537 65537 65537 0 0 65537 65537 65537 65537 65536 0 0 65537 65537 65537 65537 65536 0 0 0 65537 65537 65536 0 0 0 0 0 65536 0 0 0)	offset: 0@0)! !!StandardScriptingSystem methodsFor: '*Etoys-font & color choices' stamp: 'sw 5/2/1998 14:23'!uniformTileInteriorColor	^ Color r: 0.806 g: 1.0 b: 0.806! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'sw 9/27/2001 13:28'!tileForArgType: aType	"Anwer a default tile to represent a datum of the given argument type, which may be either a symbol (e.g. #Color) or a class"	(aType isKindOf: Class)  "Allowed in Ted's work"		ifTrue:			[^ aType name asString newTileMorphRepresentative typeColor: Color gray].	^ (Vocabulary vocabularyForType: aType) defaultArgumentTile! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'tk 8/21/2000 12:59'!cleanupsForRelease	"Miscellaneous space cleanups to do before a release."	"EToySystem cleanupsForRelease"	Socket deadServer: ''.  "Don't reveal any specific server name"	HandMorph initialize.  "free cached ColorChart"	PaintBoxMorph initialize.	"forces Prototype to let go of extra things it might hold"	Smalltalk removeKey: #AA ifAbsent: [].	Smalltalk removeKey: #BB ifAbsent: [].	Smalltalk removeKey: #CC ifAbsent: [].	Smalltalk removeKey: #DD ifAbsent: [].	Smalltalk removeKey: #Temp ifAbsent: [].	ScriptingSystem reclaimSpace.	Smalltalk cleanOutUndeclared.	Smalltalk reclaimDependents.	Smalltalk forgetDoIts.	Smalltalk removeEmptyMessageCategories.	Symbol rehash! !!PolygonMorph methodsFor: '*Etoys-geometry' stamp: 'di 9/24/2000 09:36'!heading: newHeading	"Set the receiver's heading (in eToy terms).	Note that polygons never use flex shells."	self rotationDegrees: newHeading.! !!HaloMorph methodsFor: '*Etoys-handles' stamp: 'sw 3/30/2005 04:28'!doMakeSiblingOrDup: evt with: dupHandle	"Ask hand to duplicate my target, if shift key *is* pressed, or make a sibling if shift key *not* pressed"	^ (evt shiftPressed or: [target couldMakeSibling not])		ifFalse:			[self doMakeSibling: evt with: dupHandle]		ifTrue:			[dupHandle color: Color green.			self doDup: evt with: dupHandle]! !!PluggableTextMorphWithModel methodsFor: '*Etoys-player' stamp: 'sw 10/25/2000 07:00'!variableDocks	"Answer a list of VariableDocks that will handle the interface between me and instance data stored on my behalf on a card"	^ Array with: (VariableDock new variableName: self defaultVariableName type: #text definingMorph: self morphGetSelector: #getMyText morphPutSelector: #setMyText:)! !!DataType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:36'!addExtraItemsToMenu: aMenu forSlotSymbol: slotSym	"If the receiver has extra menu items to add to the slot menu, here is its chance to do it"! !!SystemDictionary methodsFor: '*Etoys-copying' stamp: 'sw 10/23/2001 10:23'!vocabularyDemanded	"Answer the vocabulary that the receiver really would like to use in a Viewer"	^ Vocabulary vocabularyNamed: #System! !!SoundType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:37'!newReadoutTile	"Answer a tile that can serve as a readout for data of this type"	^ SoundReadoutTile new typeColor: Color lightGray lighter! !!WeakMessageSend methodsFor: '*Etoys-tiles' stamp: 'nk 4/25/2002 09:35'!stringFor: anObject	^self asMessageSend stringFor: anObject! !!CollapsedMorph methodsFor: '*Etoys-queries' stamp: 'sw 4/9/2001 12:53'!isMyUncollapsedMorph: aMorph	"Answer whether my uncollapsed morph is aMorph"	^ uncollapsedMorph == aMorph! !!HaloMorph methodsFor: '*Etoys-handles' stamp: 'sw 3/30/2005 04:26'!doDupOrMakeSibling: evt with: dupHandle	"Ask hand to duplicate my target, if shift key *not* pressed, or make a sibling if shift key *is* pressed"	^ (evt shiftPressed and: [target couldMakeSibling])		ifTrue:			[dupHandle color: Color green muchDarker.			self doMakeSibling: evt with: dupHandle]		ifFalse:			[self doDup: evt with: dupHandle]! !!StandardScriptingSystem methodsFor: '*Etoys-script-control' stamp: 'dgd 9/19/2003 14:41'!stopButton	"Answer a new button that can serve as a stop button"	| aButton |	aButton := ThreePhaseButtonMorph new.	aButton		image:  (ScriptingSystem formAtKey: 'StopPic');		offImage: (ScriptingSystem formAtKey: 'StopPic');		pressedImage:  (ScriptingSystem formAtKey: 'StopPicOn').		aButton actionSelector: #stopUp:with:; 		arguments: (Array with: nil with: aButton);		actWhen: #buttonUp;		target: self;		setNameTo: 'Stop Button'; 		setBalloonText: 'Pause all ticking scripts.' translated.	^ aButton! !!UndefinedObject methodsFor: '*Etoys-tiles' stamp: 'sw 10/29/1998 16:34'!newTileMorphRepresentative	^ UndescribedTile new! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'di 3/3/2001 08:47'!spaceReclaimed	"Reclaim space from the EToy system, and return the number of bytes reclaimed"	"ScriptingSystem spaceReclaimed"	| oldFree  |	oldFree := Smalltalk garbageCollect.	ThumbnailMorph recursionReset.	Player removeUninstantiatedSubclassesSilently.	Smalltalk cleanOutUndeclared.	Smalltalk reclaimDependents.	^ Smalltalk garbageCollect - oldFree.! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'sw 7/25/2004 17:27'!restoreClassicEToyLook	"Restore classic EToy look, as closely as possible.  If ComicBold is present, restore it as the standard etoy and button font.  Substitute ComicSansMS and Accuny as respective alternatives if the classic fonts are absent.  If those also aren't available, do nothing."	| aTextStyle aFont | 	(aTextStyle := TextStyle named: #ComicBold)		ifNotNil:			[aFont := aTextStyle fontOfSize: 16.			Preferences setEToysFontTo: aFont.			Preferences setButtonFontTo: aFont]		ifNil:			[(aTextStyle := TextStyle named: #ComicSansMS) ifNotNil:				[Preferences setEToysFontTo: (aTextStyle fontOfSize: 18)].			(aTextStyle := TextStyle named: #Accuny) ifNotNil:				[Preferences setButtonFontTo: (aTextStyle fontOfSize: 12)]].	(aTextStyle := TextStyle named: #NewYork)		ifNotNil:			[Preferences setSystemFontTo: (aTextStyle fontOfSize: 12)]! !!PasteUpMorph methodsFor: '*Etoys-customevents-scripting' stamp: 'nk 9/26/2003 23:26'!removeUserCustomEventNamed: aSymbol	^self userCustomEventsRegistry removeKey: aSymbol ifAbsent: [].! !!DataType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:33'!wantsArrowsOnTiles	"Answer whether this data type wants up/down arrows on tiles representing its values"	^ true! !!Boolean methodsFor: '*Etoys-tiles' stamp: 'sw 8/20/1999 17:42'!newTileMorphRepresentative	^ TileMorph new addArrows; setLiteral: self! !!SketchMorph methodsFor: '*Etoys-e-toy support' stamp: 'nk 6/12/2004 10:04'!asWearableCostume	"Return a wearable costume for some player"	^(World drawingClass withForm: originalForm) copyCostumeStateFrom: self! !!StandardScriptingSystem methodsFor: '*Etoys-script-control' stamp: 'dgd 9/19/2003 14:40'!goButton	| aButton |	aButton :=  ThreePhaseButtonMorph new.	aButton image:  (ScriptingSystem formAtKey: 'GoPicOn');			offImage: (ScriptingSystem formAtKey: 'GoPic');			pressedImage: (ScriptingSystem formAtKey: 'GoPicOn');			actionSelector: #goUp:with:; 			arguments: (Array with: nil with: aButton);			actWhen: #buttonUp;			target: self;			setNameTo: 'Go Button';			setBalloonText:'Resume running all paused scripts' translated.	^ aButton! !!UpdatingStringMorph methodsFor: '*Etoys-player' stamp: 'tk 9/26/2001 06:10'!variableDocks	"Answer a list of VariableDock objects for docking up my data with an instance held in my containing playfield.  For a numeric-readout tile."	"Is CardPlayer class holding my variableDock, or should I be using the caching mechanism in Morph>>variableDocks?"	^ Array with: (VariableDock new 			variableName: (getSelector allButFirst: 3) withFirstCharacterDownshifted 			type: #number 			definingMorph: self 			morphGetSelector: #valueFromContents 			morphPutSelector: #acceptValue:)! !!String methodsFor: '*Etoys-tiles' stamp: 'ar 4/10/2005 17:06'!newTileMorphRepresentative	^ TileMorph new setLiteral: self;addSuffixIfCan! !!PluggableTextMorph methodsFor: '*Etoys-model access' stamp: 'RAA 11/5/2000 14:10'!eToyGetMainFont	^ textMorph textStyle! !!Morph methodsFor: '*Etoys-customevents-scripting' stamp: 'nk 9/25/2003 11:24'!removeEventTrigger: aSymbol for: aPlayer 	"Remove all the event registrations for aPlayer that are triggered by 	aSymbol. User custom events are triggered at the World, 	while system custom events are triggered on individual Morphs."	self removeActionsSatisfying: [:action | action receiver == aPlayer				and: [(#(#doScript: #triggerScript: ) includes: action selector)						and: [action arguments first == aSymbol]]]! !!StandardScriptingSystem methodsFor: '*Etoys-font & color choices' stamp: 'sw 9/14/1998 14:41'!statusColorSymbolFor: statusSymbol	#(	(normal					green)		(ticking					blue)		(paused					red)		(mouseDown				yellow)		(mouseStillDown			lightYellow)		(mouseUp				lightBlue)		(mouseEnter				lightBrown)		(mouseLeave			lightRed)		(mouseEnterDragging	lightGray)		(mouseLeaveDragging	darkGray)		(keyStroke				lightGreen)) do:			[:pair | statusSymbol == pair first ifTrue: [^ pair second]].		^ #blue! !!ColorType methodsFor: '*Etoys-color' stamp: 'sw 9/27/2001 17:21'!typeColor	"Answer the color for tiles to be associated with objects of this type"	^ self subduedColorFromTriplet: #(1.0  0 0.065)	! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'sw 10/30/2000 09:08'!referenceAt: aSymbol	"Answer the object referred to by aSymbol in the 'References' scheme of things, or nil if none"	^ References at: aSymbol ifAbsent: [nil]! !!DataType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:38'!addUserSlotItemsTo: aMenu slotSymbol: slotSym	"Optionally add items to the menu that pertain to a user-defined slot of the given symbol"! !!SystemDictionary methodsFor: '*Etoys-copying' stamp: 'sw 11/21/2001 15:08'!assureUniClass	"Assure that the receiver has a uniclass.  Or rather, in this case, stop short of fulfilling such a request"	self error: 'We do not want uniclasses descending from here'! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'tk 10/20/2004 15:52'!buttonDownTile	"Answer a boolean-valued tile which reports whether the button is down"	^ self systemQueryPhraseWithActionString: '(ActiveHand anyButtonPressed)' labelled: 'button down?' translated! !!Morph methodsFor: '*Etoys-customevents-scripting' stamp: 'nk 9/24/2003 17:46'!removeAllEventTriggersFor: aPlayer	"Remove all the event registrations for aPlayer.	User custom events are triggered at the World,	while system custom events are triggered on individual Morphs."	self removeActionsSatisfying: 			[:action | action receiver == aPlayer and: [(#(#doScript: #triggerScript:) includes: action selector) ]].! !!GeeMailMorph methodsFor: '*Etoys-customevents-access' stamp: 'nk 10/12/2003 13:22'!visibleMorphs	"Answer a collection of morphs that were visible as of the last step"	^Array withAll: (self valueOfProperty: #visibleMorphs ifAbsentPut: [ WeakArray new ]).! !!StandardScriptingSystem methodsFor: '*Etoys-script-control' stamp: 'sw 10/30/1998 15:35'!stepUp: evt with: aMorph	aMorph presenter stepUp: evt with: aMorph! !!Boolean methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:19'!basicType	"Answer a symbol representing the inherent type of the receiver"	^ #Boolean! !!PluggableTextMorphWithModel methodsFor: '*Etoys-player' stamp: 'sw 10/30/2000 11:14'!currentDataValue	"Answer the current data value of the receiver"	^ myContents! !!StandardScriptingSystem methodsFor: '*Etoys-customevents-custom events' stamp: 'nk 9/26/2003 23:31'!customEventStati	^self globalCustomEventNames,	self userCustomEventNames! !!String methodsFor: '*Etoys-tiles' stamp: 'yo 11/3/2004 19:24'!basicType	"Answer a symbol representing the inherent type of the receiver"	"Number String Boolean player collection sound color etc"	^ #String! !!ButtonPhaseType methodsFor: '*Etoys-color' stamp: 'sw 9/27/2001 17:20'!typeColor	"Answer the color for tiles to be associated with objects of this type"	^ self subduedColorFromTriplet: #(0.806 1.0 0.806)	! !!PasteUpMorph methodsFor: '*Etoys-support' stamp: 'RAA 1/8/2001 15:24'!showAllPlayers	| a |	a := OrderedCollection new.	self allMorphsDo: [ :x | 		(x player notNil and: [x player hasUserDefinedScripts]) ifTrue: [a add: x]	].	a do: [ :each | each openViewerForArgument].! !!PluggableTextMorph methodsFor: '*Etoys-transcript' stamp: 'RAA 5/1/2002 18:17'!appendTextEtoy: moreText	"Append the text in the model's writeStream to the editable text. "	self handleEdit: [		self 			selectInvisiblyFrom: textMorph asText size + 1 to: textMorph asText size;			replaceSelectionWith: moreText;			selectFrom: textMorph asText size + 1 to: textMorph asText size;			hasUnacceptedEdits: false;			scrollSelectionIntoView;			changed	]! !!GraphicType methodsFor: '*Etoys-tiles' stamp: 'sw 9/25/2001 21:06'!updatingTileForTarget: aTarget partName: partName getter: getter setter: setter	"Answer, for classic tiles, an updating readout tile for a part with the receiver's type, with the given getter and setter"	^ ThumbnailMorph new objectToView: aTarget viewSelector: getter; extent: 21@21; yourself! !!ParseNode methodsFor: '*Etoys-tiles' stamp: 'RAA 8/24/1999 18:18'!explanation	^self class printString! !!DataType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 02:53'!comparatorForSampleBoolean	"Answer the comparator to use in tile coercions involving the receiver; normally, the equality comparator is used but NumberType overrides"	^ #=! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'sw 2/6/2003 18:00'!nameForScriptsCategory	"Answer the name to use for the viewer category that contains scripts"	^ #scripts! !!SoundType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:30'!defaultArgumentTile	"Answer a tile to represent the type"	^ SoundTile new typeColor: self typeColor! !!DataType methodsFor: '*Etoys-color' stamp: 'sw 8/28/2004 20:30'!subduedColorFromTriplet: anRGBTriplet	"Currently:  as an expedient, simply return a standard system-wide constant; this is used only for the border-color of tiles...	Formerly:  Answer a subdued color derived from the rgb-triplet to use as a tile color."	^ ScriptingSystem standardTileBorderColor"	^ (Color fromRgbTriplet: anRGBTriplet) mixed: ScriptingSystem colorFudge with: ScriptingSystem uniformTileInteriorColor"! !!StandardScriptingSystem methodsFor: '*Etoys-form dictionary' stamp: 'sw 12/7/1998 16:47'!standardForms	"ScriptingSystem standardForms"	^ FormDictionary collect: [:f | f]! !!PasteUpMorph methodsFor: '*Etoys-customevents-scripting' stamp: 'nk 9/26/2003 23:24'!addUserCustomEventNamed: aSymbol help: helpString	self userCustomEventsRegistry at: aSymbol put: helpString.! !!StandardScriptingSystem methodsFor: '*Etoys-form dictionary' stamp: 'sw 5/12/1999 10:09'!installSolidMenuForm	"ScriptingSystem installSolidMenuForm"	self saveForm:		(Form extent: 14@16 depth: 16	fromArray: #( 1 0 0 0 0 0 0 65537 65536 0 0 0 65537 0 65537 65537 65537 65537 65537 65537 65536 65537 65537 65537 65537 65537 1600061441 65536 65537 1600085855 1600085855 1600085855 1600085855 1600061441 65536 65537 1600085855 65537 65537 65537 65537 65536 65537 1600085855 65537 65537 65537 1600061441 65536 65537 1600085855 1600085855 1600085855 1600085855 1600085855 65537 65537 1600085855 65537 65537 65537 1600085855 65537 65537 1600085855 1600061441 65537 65537 89951 65537 65537 1600085855 1600085855 1600085855 1600085855 1600085855 65537 65537 1600085855 1600061441 65537 65537 65537 65537 65537 1600085855 65537 65537 65537 65536 65537 65537 65537 65537 65537 65537 65537 65537 1 65537 65537 65537 65537 65537 65536 0 65536 0 0 0 0 0) offset: 0@0)		atKey: 'SolidMenu'! !!DataType methodsFor: '*Etoys-initialization' stamp: 'sw 9/27/2001 17:32'!setFormatForDisplayer: aDisplayer	"Set up the displayer to have the right format characteristics"	aDisplayer useDefaultFormat.	aDisplayer growable: true	! !!ColorType methodsFor: '*Etoys-tiles' stamp: 'sw 1/5/2005 19:57'!wantsArrowsOnTiles	"Answer whether this data type wants up/down arrows on tiles representing its values"	^ false! !!FlapTab methodsFor: '*Etoys-support' stamp: 'sw 7/28/2001 01:31'!succeededInRevealing: aPlayer	"Try to reveal aPlayer, and answer whether we succeeded"	(super succeededInRevealing: aPlayer) ifTrue: [^ true].	self flapShowing ifTrue: [^ false].	(referent succeededInRevealing: aPlayer)		ifTrue:			[self showFlap.			aPlayer costume goHome; addHalo.			^ true].	^ false! !!UpdatingStringMorph methodsFor: '*Etoys-player' stamp: 'tk 9/26/2001 06:06'!currentDataValue	"Answer the current data value held by the receiver"	^ self valueFromContents! !!Color methodsFor: '*Etoys-tiles' stamp: 'sw 6/10/1998 17:50'!newTileMorphRepresentative	^ ColorTileMorph new colorSwatchColor: self! !!PasteUpMorph methodsFor: '*Etoys-support' stamp: 'ul 12/12/2009 14:08'!tellAllContents: aMessageSelector	"Send the given message selector to all the objects within the receiver"	self submorphs do:		[:m |			m player ifNotNil:				[:p | p performScriptIfCan: aMessageSelector]]! !!UpdatingStringMorph methodsFor: '*Etoys-card in a stack' stamp: 'tk 9/25/2001 11:43'!setNewContentsFrom: stringOrNumberOrNil	self acceptValue: stringOrNumberOrNil! !!StandardScriptingSystem methodsFor: '*Etoys-customevents-custom events' stamp: 'nk 7/20/2003 12:37'!removeCustomEventNamed: aSymbol for: registrant	| registration helpString |	registration := self customEventsRegistry at: aSymbol ifAbsent: [ ^nil ].	helpString := registration removeKey: registrant ifAbsent: [].	registration isEmpty ifTrue: [ self customEventsRegistry removeKey: aSymbol ].	^helpString! !!SimpleSliderMorph methodsFor: '*Etoys-support' stamp: 'sw 9/1/2000 10:38'!getNumericValue	"Answer the numeric value of the receiver"	^ self getScaledValue! !!Vocabulary methodsFor: '*Etoys-queries' stamp: 'nice 12/27/2009 20:32'!tileWordingForSelector: aSelector	"Answer the wording to emblazon on tiles representing aSelector"	| anInterface |	anInterface := self methodInterfaceAt: aSelector asSymbol ifAbsent:		[ | inherent |		inherent := Utilities inherentSelectorForGetter: aSelector.		^ inherent			ifNil:				[self translatedWordingFor: aSelector]			ifNotNil:				[inherent translated]].	^ anInterface wording! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'sw 9/15/2000 06:24'!informScriptingUser: aString	"This provides a hook for logging messages that the user or the developer may wish to see; at present it simply logs the message to the Transcript, with a standard prefix to signal their provenance.  Such messages will fall on the floor if there is no Transcript window open"	Transcript cr; show: 'SCRIPT NOTE: ', aString! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'sw 11/13/2001 14:41'!newScriptingSpace2	"Answer a complete scripting space"	| aTemplate  aPlayfield aControl |		(aTemplate := PasteUpMorph new)		setNameTo: 'etoy';		extent: 638 @ 470;		color: Color white;		impartPrivatePresenter;		setProperty: #automaticPhraseExpansion toValue: true;		beSticky.	aTemplate useRoundedCorners; borderWidth: 2. 	aControl :=  ScriptingSystem scriptControlButtons setToAdhereToEdge: #bottomLeft.	aControl beSticky; borderWidth: 0; beTransparent.	aTemplate addMorphBack: aControl.	aTemplate presenter addTrashCan.	aTemplate addMorph: (aPlayfield := PasteUpMorph new).	aPlayfield		setNameTo: 'playfield';		useRoundedCorners;		setToAdhereToEdge: #topLeft;		extent: 340@300;		position: aTemplate topRight - (400@0);		beSticky;		automaticViewing: true;		wantsMouseOverHalos: true.	aTemplate presenter standardPlayfield: aPlayfield.		^ aTemplate! !!PasteUpMorph methodsFor: '*Etoys-customevents-scripting' stamp: 'nk 9/26/2003 23:20'!userCustomEventNames	| reg |	reg := self valueOfProperty: #userCustomEventsRegistry ifAbsent: [ ^#() ].	^reg keys asArray sort! !!StringType methodsFor: '*Etoys-color' stamp: 'sw 9/27/2001 17:21'!typeColor	"Answer the color for tiles to be associated with objects of this type"	^ self subduedColorFromTriplet: #(0.0 0.0 1.0)	! !!UpdatingStringMorph methodsFor: '*Etoys-target access' stamp: 'sw 3/7/2004 15:49'!hasStructureOfComplexWatcher	"Answer whether the receiver has precisely the structure of a so-called complex watcher, as used in the etoy system."	| top |	top := (self owner ifNil: [^ false]) owner.	^ ((((top isMemberOf: AlignmentMorph)		and: [top submorphs size = 4])			and: [top submorphs first isMemberOf: TileMorph])				and: [top submorphs third isMemberOf: AlignmentMorph])! !!MenuType methodsFor: '*Etoys-color' stamp: 'sw 9/27/2001 17:21'!typeColor	"Answer the color for tiles to be associated with objects of this type"	^ self subduedColorFromTriplet: #(0.4 0.4 0.4)	! !!LassoPatchMorph methodsFor: '*Etoys-misc' stamp: 'sw 7/5/2004 01:50'!isCandidateForAutomaticViewing	"Answer whether the receiver is a candidate for automatic viewing.  Only relevant if a now-seldom-used feature, automaticViewing, is in play"	^ self isPartsDonor not! !!StandardScriptingSystem methodsFor: '*Etoys-customevents-custom events' stamp: 'nk 11/1/2004 07:47'!addCustomEventFor: registrantClass named: aSymbol help: helpString targetMorphClass: targetClass	| registration |	registration := self customEventsRegistry at: aSymbol ifAbsentPut: [ IdentityDictionary new ].	registration at: registrantClass put: { helpString. targetClass }.! !!DataType methodsFor: '*Etoys-tiles' stamp: 'sw 1/4/2005 00:45'!updatingTileForTarget: aTarget partName: partName getter: getter setter: setter	"Answer, for classic tiles, an updating readout tile for a part with the receiver's type, with the given getter and setter"	| aTile displayer actualSetter |	actualSetter := setter ifNotNil:		[(#(none #nil unused) includes: setter) ifTrue: [nil] ifFalse: [setter]].	aTile := self newReadoutTile.	displayer := UpdatingStringMorph new		getSelector: getter;		target: aTarget;		growable: true;		minimumWidth: 24;		putSelector: actualSetter.	"Note that when typeSymbol = #number, the #target: call above will have dealt with floatPrecision details"	self setFormatForDisplayer: displayer.	aTile addMorphBack: displayer.	(actualSetter notNil and: [self wantsArrowsOnTiles]) ifTrue: [aTile addArrows].		getter numArgs == 0 ifTrue:		[aTile setLiteralInitially: (aTarget perform: getter)].	^ aTile! !!NumberType methodsFor: '*Etoys-tiles' stamp: 'sw 9/26/2001 03:18'!wantsSuffixArrow	"Answer whether a tile showing data of this type would like to have a suffix arrow"	^ true! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'tk 10/20/2004 15:52'!buttonUpTile	"Answer a boolean-valued tile which reports whether the button is up"	^ self systemQueryPhraseWithActionString: '(ActiveHand noButtonPressed)' labelled: 'button up?' translated! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'sw 5/16/2001 12:58'!setterSelectorForGetter: aGetterSymbol	"Answer the setter selector corresponding to a given getter"	^ (('s', (aGetterSymbol copyFrom: 2 to: aGetterSymbol size)), ':') asSymbol	"ScriptingSystem setterSelectorForGetter: #getCursor"! !!Morph methodsFor: '*Etoys-customevents-scripting' stamp: 'nk 11/1/2004 10:54'!triggerEtoyEvent: aSymbol	"Trigger whatever scripts may be connected to the event named aSymbol.	If anyone comes back to ask who sent it, return our player."	[ self triggerEvent: aSymbol ]		on: GetTriggeringObjectNotification do: [ :ex |			ex isNested				ifTrue: [ ex pass ]				ifFalse: [ ex resume: self assuredPlayer ]]! !!StandardScriptingSystem methodsFor: '*Etoys-tile colors' stamp: 'sw 8/28/2004 20:31'!standardTileBorderColor	"Answer the color to use for tile borders"	^ Color r: 0.804 g: 0.76 b: 0.564! !!TextMorph methodsFor: '*Etoys-card in a stack' stamp: 'sw 10/30/2000 09:02'!couldHoldSeparateDataForEachInstance	"Answer whether this type of morph is inherently capable of holding separate data for each instance ('card data')"	^ true! !!TheWorldMenu methodsFor: '*Etoys-construction' stamp: 'RAA 5/24/2000 22:34'!playfieldMenu	^ myWorld playfieldOptionsMenu! !!Color methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:26'!basicType	"Answer a symbol representing the inherent type of the receiver"	^ #Color! !!PaintBoxMorph methodsFor: '*Etoys-support' stamp: 'sw 6/30/1999 20:33'!isCandidateForAutomaticViewing	^ false! !!DataType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:37'!newReadoutTile	"Answer a tile that can serve as a readout for data of this type"	^ StringReadoutTile new typeColor: Color lightGray lighter! !!NumberType methodsFor: '*Etoys-tiles' stamp: 'sw 9/26/2001 03:11'!wantsAssignmentTileVariants	"Answer whether an assignment tile for a variable of this type should show variants to increase-by, decrease-by, multiply-by."	^ true! !!StandardScriptingSystem methodsFor: '*Etoys-tile colors' stamp: 'sw 10/29/1998 16:18'!colorFudge	^ 0.4! !!StandardScriptingSystem methodsFor: '*Etoys-script-control' stamp: 'sw 1/23/2001 11:39'!scriptControlButtons	"Answer a composite object that serves to control the stop/stop/go status of a Presenter"	| wrapper |	wrapper := AlignmentMorph newRow setNameTo: 'script controls'.	wrapper vResizing: #shrinkWrap.	wrapper hResizing: #shrinkWrap.	wrapper addMorph: self stopButton.	wrapper addMorphBack: self stepButton.	wrapper addMorphBack: self goButton.	wrapper beTransparent.	^ wrapper! !!UnknownType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:33'!wantsArrowsOnTiles	"Answer whether this data type wants up/down arrows on tiles representing its values"	^ false! !!UndefinedObject methodsFor: '*Etoys-*Morphic-customevents-class initialization' stamp: 'nk 11/1/2004 07:48'!initialize	"AlansTextPlusMorph initialize"	ScriptingSystem addCustomEventFor: self named: #scrolledIntoView help: 'when I am scrolled into view in a GeeMailMorph' targetMorphClass: Morph.	ScriptingSystem addCustomEventFor: self named: #scrolledOutOfView help: 'when I am scrolled out of view in a GeeMailMorph'  targetMorphClass: Morph.! !!ClassDescription methodsFor: '*Etoys-accessing method dictionary' stamp: 'sw 3/20/2001 13:26'!namedTileScriptSelectors	"Answer a list of all the selectors of named tile scripts.  Initially, only Player reimplements, but if we switch to a scheme in which every class can have uniclass subclasses, this would kick in elsewhere"	^ OrderedCollection new! !!SmallInteger methodsFor: '*Etoys-printing' stamp: 'sw 10/26/2000 09:01'!uniqueNameForReference	"Answer a nice name by which the receiver can be referred to by other objects.   For SmallIntegers, we can actually just use the receiver's own printString, though this is pretty strange in some ways."	^ self asString! !!UpdatingStringMorph methodsFor: '*Etoys-menus' stamp: 'tk 9/26/2001 06:08'!putOnBackground	"Place the receiver, formerly private to its card, onto the shared background.  If the receiver needs data carried on its behalf by the card, such data will be represented on every card."	"If I seem to have per-card data, then set that up."	target class superclass == CardPlayer ifTrue: [		(self hasOwner: target costume) ifTrue: [				self setProperty: #holdsSeparateDataForEachInstance toValue: true]].	super putOnBackground.! !!PasteUpMorph methodsFor: '*Etoys-support' stamp: 'gm 2/22/2003 13:09'!recreateScripts	"self currentWorld recreateScripts."	Preferences enable: #universalTiles.	Preferences enable: #capitalizedReferences.	"Rebuild viewers"	self flapTabs do: 			[:ff | 			(ff isMemberOf: ViewerFlapTab) 				ifTrue: 					[ff referent 						submorphsDo: [:m | (m isStandardViewer) ifTrue: [m recreateCategories]]]].	"Rebuild scriptors"	((self flapTabs collect: [:t | t referent]) copyWith: self) 		do: [:w | w allScriptEditors do: [:scrEd | scrEd unhibernate]]! !!ServerDirectory methodsFor: '*Etoys-school support' stamp: 'ar 9/5/2001 16:12'!hasEToyUserList	^eToyUserListUrl notNil! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'nk 10/14/2004 11:19'!wordingForOperator: aString	"Answer the wording to be seen by the user for the given operator symbol/string"	| toTest |	toTest := aString asString.	#(	(append:				'include at end')		(arrowheadsOnAllPens	'arrowheads on all pens')		(beep:					'make sound')		(bounce:				'bounce')		(clearTurtleTrails		'clear pen trails')		(clearOwnersPenTrails	'clear all pen trails')		(colorSees				'color  sees')		(color:sees:				'color sees')		(doMenuItem:			'do menu item')		(doScript:				'do')		(forward:				'forward by')		(goToRightOf:			'align after')		(includeAtCursor:		'include at cursor')		(isDivisibleBy:			'is divisible by')		(liftAllPens				'lift all pens')		(lowerAllPens			'lower all pens')		(makeNewDrawingIn:	'start painting in')		(max:					'max')		(min:					'min')		(moveToward:			'move toward')		(noArrowheadsOnAllPens	'no arrowheads on pens')		(overlapsAny			'overlaps any')		(pauseAll:				'pause all')		(pauseScript:			'pause script')		(prepend:				'include at beginning')		(seesColor:				'is over color')		(startAll:				'start all')		(startScript:				'start script')		(stopProgramatically	'stop')		(stopAll:					'stop all')		(stopScript:				'stop script')		(tellAllSiblings:			'tell all siblings')		(tellSelfAndAllSiblings:	'send to all')		(turn:					'turn by')		(turnToward:				'turn toward')		(wearCostumeOf:		'look like'))	do:		[:pair | toTest = pair first ifTrue: [^ pair second]].	^ toTest	"StandardScriptingSystem initialize"! !!GraphicType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:30'!defaultArgumentTile	"Answer a tile to represent the type"	^ GraphicTile new typeColor: self typeColor! !!LiteralNode methodsFor: '*Etoys-tiles' stamp: 'ar 8/16/2001 13:27'!explanation	(key isVariableBinding) ifFalse: [		^'Literal ', key storeString	].	key key isNil ifTrue: [		^'Literal ', ('###',key value soleInstance name) 	] ifFalse: [		^'Literal ', ('##', key key) 	].	! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'sw 6/27/2004 11:11'!helpStringOrNilForOperator: anOperator	"Answer the help string associated with the given operator, nil if none found."	| anIndex opsAndHelp |	(anIndex := (opsAndHelp := self arithmeticalOperatorsAndHelpStrings) first indexOf: anOperator) > 0		ifTrue:	[^ (opsAndHelp second at: anIndex) translated].	(anIndex := (opsAndHelp := self numericComparitorsAndHelpStrings) first indexOf: anOperator) > 0		ifTrue:	[^ (opsAndHelp second at: anIndex) translated].	anOperator = #, ifTrue:		[^ 'Concatenate two Strings' translated].	^ nil! !!ThumbnailMorph methodsFor: '*Etoys-scripting' stamp: 'nk 8/29/2004 17:18'!tearOffTile	(objectToView isPlayerLike) ifTrue: [^ objectToView tearOffTileForSelf].	objectToView ifNil: [^ nil].	^ objectToView isMorph		ifTrue:			[objectToView]		ifFalse:			[objectToView costume]! !!ImageMorph methodsFor: '*Etoys-card in a stack' stamp: 'sw 10/23/2000 18:22'!couldHoldSeparateDataForEachInstance	"Answer whether the receiver can potentially hold separate data for each instance"	^ true! !!TheWorldMenu methodsFor: '*Etoys-popups' stamp: 'RAA 5/26/2000 10:26'!playfieldDo	"Build the playfield menu for the world."	self doPopUp: myWorld playfieldOptionsMenu! !!StringType methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:33'!wantsArrowsOnTiles	"Answer whether this data type wants up/down arrows on tiles representing its values"	^ false! !!StandardScriptingSystem methodsFor: '*Etoys-customevents-custom events' stamp: 'nk 11/1/2004 07:56'!globalCustomEventNamesFor: aPlayer	| morph names |	morph := aPlayer costume renderedMorph.	names := SortedCollection new.	self customEventsRegistry keysAndValuesDo: [ :k :v |		(v anySatisfy: [ :array | morph isKindOf: array second ])			ifTrue: [ names add: k ]].	^names asArray! !!GrabPatchMorph methodsFor: '*Etoys-misc' stamp: 'sw 7/5/2004 01:49'!isCandidateForAutomaticViewing	"Answer whether the receiver is a candidate for automatic viewing.  Only relevant if a now-seldom-used feature, automaticViewing, is in play"	^ self isPartsDonor not! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'sw 3/10/2004 23:24'!helpStringForOperator: anOperator	"Answer the help string associated with the given operator. If none found, return a standard no-help-available reply"	^ (self helpStringOrNilForOperator: anOperator) ifNil:		['Sorry, no help available here' translated]  "This should never be seen, but is provided as a backstop"! !!SketchMorph methodsFor: '*Etoys-card in a stack' stamp: 'sw 10/30/2000 10:29'!couldHoldSeparateDataForEachInstance	"Answer whether this type of morph is inherently capable of holding separate data for each instance ('card data')  SketchMorphs answer true, because they can serve as 'picture-holding' fields"	^ true! !!AssignmentNode methodsFor: '*Etoys-tiles' stamp: 'RAA 8/15/1999 16:31'!explanation	^'The value of ',value explanation,' is being stored in ',variable explanation! !!PasteUpMorph methodsFor: '*Etoys-world menu' stamp: 'yo 3/15/2005 13:36'!attemptCleanupReporting: whetherToReport	"Try to fix up some bad things that are known to occur in some etoy projects we've seen. If the whetherToReport parameter is true, an informer is presented after the cleanups"	| fixes |	fixes := 0.	ActiveWorld ifNotNil:		[(ActiveWorld submorphs select:			[:m | (m isKindOf: ScriptEditorMorph) and: [m submorphs isEmpty]]) do:				[:m | m delete.  fixes := fixes + 1]].	TransformationMorph allSubInstancesDo:		[:m | (m player notNil and: [m renderedMorph ~~ m])			ifTrue:				[m renderedMorph visible ifFalse:					[m renderedMorph visible: true.  fixes := fixes + 1]]].	(Player class allSubInstances select: [:cl | cl isUniClass]) do:		[:aUniclass |			fixes := fixes + aUniclass cleanseScripts].	self presenter flushPlayerListCache; allExtantPlayers.	whetherToReport ifTrue:		[self inform: ('{1} [or more] repair(s) made' translated format: {fixes printString})]"ActiveWorld attemptCleanupReporting: true.ActiveWorld attemptCleanupReporting: false."! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'nice 12/26/2009 21:57'!holderWithAlphabet	"Answer a fully instantiated Holder that has submorphs that represent the letters of the uppercase alphabet, with each one having an 'index' slot which bears the letter's index in the alphabet -- 1 for A, 2 for B, etc.   A few special characters are provided as per ack request 10/00; for these the index provided is rather arbitrarily assigned"	| aMorph aPlayer oneCharString aContainer aWrapper |	"ScriptingSystem holderWithAlphabet openInHand"	aContainer := self prototypicalHolder useRoundedCorners.	aContainer borderColor: Color blue lighter.	aWrapper := AlignmentMorph new hResizing: #shrinkWrap; vResizing: #shrinkWrap; layoutInset: 0.	aWrapper addMorphBack: (aMorph := TextMorph new contents: 'A').	aMorph beAllFont: ((TextStyle named: Preferences standardEToysFont familyName) fontOfSize: 24).	aMorph width: 14; lock.	aWrapper beTransparent; setNameTo: 'A'.	aPlayer := aWrapper assuredPlayer.	aPlayer addInstanceVariableNamed: #index type: #Number value: 1.	aContainer addMorphBack: aWrapper.	2 to: 26 do:		[:anIndex |			| newMorph |			newMorph := aWrapper usableSiblingInstance.			newMorph player perform: #setIndex: with: anIndex.			newMorph firstSubmorph contents: (oneCharString := ($A asciiValue + anIndex - 1) asCharacter asString).			newMorph setNameTo: oneCharString.			aContainer addMorphBack: newMorph].	#(' ' '.' '#') with: #(27 28 29) do:		[:aString :anIndex |			| newMorph |			newMorph := aWrapper usableSiblingInstance.			newMorph player perform: #setIndex: with: anIndex.			newMorph firstSubmorph contents: aString.			aString = ' '				ifTrue:					[newMorph setNameTo: 'space'.					newMorph color: (Color gray alpha: 0.2)]				ifFalse:					[newMorph setNameTo: aString].			aContainer addMorphBack: newMorph].	aContainer setNameTo: 'alphabet'.	aContainer isPartsBin: true.	aContainer enableDrop: false.	aContainer indicateCursor: false; width: 162.	aContainer color: (Color r: 0.839 g: 1.0 b: 1.0).  "Color fromUser"	^ aContainer! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'sw 9/21/2000 22:39'!numericComparitorsAndHelpStrings	"Answer an array whose first element is the list of comparitors, and whose second element is a list of the corresponding help strings"	^ #((< <= = ~= > >= isDivisibleBy:)	 	('less than' 'less than or equal' 'equal' 'not equal' 'greater than' 'greater than or equal' 'divisible by' ))! !!StandardScriptingSystem methodsFor: '*Etoys-utilities' stamp: 'sw 10/30/2000 16:37'!allKnownClassVariableNames	"Answer a set of all the knwon class variable names in the system.  This normally retrieves them from a cache, and at present there is no organized mechanism for invalidating the cache.  The idea is to avoid, in the References scheme, names that may create a conflict"	^ ClassVarNamesInUse ifNil: [ClassVarNamesInUse := self allClassVarNamesInSystem]	"ClassVarNamesInUse := nil.	Time millisecondsToRun: [ScriptingSystem allKnownClassVariableNames]"! !!PasteUpMorph methodsFor: '*Etoys-support' stamp: 'nice 12/27/2009 03:11'!relaunchAllViewers	"Relaunch all the viewers in the project"		(self submorphs select: [:m | m isKindOf: ViewerFlapTab]) do: 			[:aTab | | aViewer | 			aViewer := aTab referent submorphs 						detect: [:sm | sm isStandardViewer]						ifNone: [nil].			aViewer ifNotNil: [aViewer relaunchViewer]			"ActiveWorld relaunchAllViewers"]! !!TabbedPalette methodsFor: '*Etoys-viewer tab' stamp: 'sw 3/3/1999 13:17'!viewMorph: aMorph	"The receiver is expected to have a viewer tab; select it, and target it to aMorph"	| aPlayer aViewer oldOwner |	((currentPage isKindOf: Viewer) and: [currentPage scriptedPlayer == aMorph player])		ifTrue:			[^ self].	oldOwner := owner.	self delete.	self visible: false.	aPlayer := aMorph assuredPlayer.	self showNoPalette.	aViewer :=  StandardViewer new initializeFor: aPlayer barHeight: 0.	aViewer enforceTileColorPolicy.	self showNoPalette.	currentPage ifNotNil: [currentPage delete].	self addMorphBack: (currentPage := aViewer beSticky).	self snapToEdgeIfAppropriate.	tabsMorph highlightTab: nil.	self visible: true.	oldOwner addMorphFront: self.	self world startSteppingSubmorphsOf: aViewer.	self layoutChanged! !!StandardScriptingSystem methodsFor: '*Etoys-parts bin' stamp: 'sw 11/16/2004 13:56'!noButtonPressedTiles	"Answer tiles representing the query 'is no button pressed?'"	^ self tilesForQuery: '(ActiveHand noButtonPressed)' label: 'button up?' translated! !!SketchMorph methodsFor: '*Etoys-e-toy support' stamp: 'RAA 1/13/2001 11:38'!appearsToBeSameCostumeAs: aMorph	(aMorph isKindOf: self class) ifFalse: [^false].	^originalForm == aMorph form or: [		originalForm appearsToBeSameCostumeAs: aMorph form	]! !!StandardScriptingSystem methodsFor: '*Etoys-customevents-custom events' stamp: 'nk 9/26/2003 23:26'!removeUserCustomEventNamed: eventName	| retval |	retval := self currentWorld removeUserCustomEventNamed: eventName.	"Vocabulary addStandardVocabulary: UserCustomEventNameType new."	Vocabulary customEventsVocabulary.	SymbolListTile updateAllTilesForVocabularyNamed: #CustomEvents.	^retval! !StandardScriptingSystem removeSelector: #prepareForExternalReleaseNamed:!EToySystem class removeSelector: #stripMethodsForExternalRelease!