"Change Set:		8636KernelTests-nice.126KernelTests-nice.126:Cosmetic: move or remove a few temps inside closures"!!InstructionClientTest methodsFor: 'tests' stamp: 'nice 12/26/2009 10:21'!testInstructions	"just interpret all of methods of Object"	| client |	client := InstructionClient new.		Object methodDict do: [:method |			| scanner |			scanner := (InstructionStream on: method).			[scanner pc <= method endPC] whileTrue: [					self shouldnt: [scanner interpretNextInstructionFor: client] raise: Error.			].	].! !!InstVarRefLocatorTest methodsFor: 'tests' stamp: 'nice 12/27/2009 03:11'!testInstructions		Object methodDict do: [:method | | scanner printer end |		scanner := InstructionStream on: method.		printer := InstVarRefLocator new.		end := scanner method endPC.		[scanner pc <= end] whileTrue: [			self shouldnt: [printer interpretNextInstructionUsing: scanner] raise: Error.		].	].! !!IntegerTest methodsFor: 'tests - bitLogic' stamp: 'nice 12/27/2009 03:11'!testBitAt	| trials bitSequence2 |	self		assert: ((1 to: 100) allSatisfy: [:i | (0 bitAt: i) = 0])		description: 'all bits of zero are set to zero'.		self		assert: ((1 to: 100) allSatisfy: [:i | (-1 bitAt: i) = 1])		description: 'In two complements, all bits of -1 are set to 1'.				trials := #(		'2r10010011'		'2r11100100'		'2r10000000'		'2r0000101011011001'		'2r1000101011011001'		'2r0101010101011000'		'2r0010011110110010'		'2r0010011000000000'		'2r00100111101100101000101011011001'		'2r01110010011110110010100110101101'		'2r10101011101011001010000010110110'		'2r10101000000000000000000000000000'		'2r0010101110101001110010100000101101100010011110110010100010101100'		'2r1010101110101100101000001011011000100111101100101000101011011001'		'2r1010101110101000000000000000000000000000000000000000000000000000').	trials do: [:bitSequence | | aNumber |		aNumber := Number readFrom: bitSequence.		bitSequence2 := (bitSequence size - 2 to: 1 by: -1) inject: '2r' into: [:string :i | string copyWith: (Character digitValue: (aNumber bitAt: i))].		self assert: bitSequence2 = bitSequence].		trials do: [:bitSequence | | bitInvert |		bitInvert := -1 - (Number readFrom: bitSequence).		bitSequence2 := (bitSequence size - 2 to: 1 by: -1) inject: '2r' into: [:string :i | string copyWith: (Character digitValue: 1 - (bitInvert bitAt: i))].		self assert: bitSequence2 = bitSequence description: '-1-x is similar to a bitInvert operation in two complement']! !