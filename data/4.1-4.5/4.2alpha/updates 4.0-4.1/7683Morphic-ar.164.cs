"Change Set:		7683Morphic-ar.164Morphic-ar.164:First pass on FreeTypePlus integration:- Integrate overrides/extensions- Fold modal dialog support from Polymorph- Add FontChooserTool as a font chooser dialog- Use dialog in standard font choice placesMorphic-ar.161:Integrate Polymorph fix for BorderedMorph>>areasRemainingToFill:.Morphic-ar.162:Merged Morphic-djr.161:Fix a bug where hitting alt-M on a string selection in a Workspace (among other combinations) would throw a MNU.Morphic-laza.163:This makes the keyboard shortcut for the DualChangeSorter <alt><shift>C work again"!Model subclass: #FontChooserTool	instanceVariableNames: 'title selectedFontIndex fontList target getSelector setSelector pointSize emphasis window result'	classVariableNames: 'Default'	poolDictionaries: ''	category: 'Morphic-Support'!!FontChooserTool class methodsFor: 'opening' stamp: 'ar 8/30/2009 15:05'!open	"		FontChooserTool open.	"	^self new open! !!FontChooserTool methodsFor: 'toolbuilder' stamp: 'ar 8/30/2009 14:38'!buildPointSizeListWith: builder	"Build the font choosers list of point sizes"	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 		model: self;		list: #pointSizeList; 		getIndex: #selectedPointSizeIndex; 		setIndex: #selectedPointSizeIndex:.	^listSpec! !!FontChooserTool class methodsFor: 'opening' stamp: 'ar 8/30/2009 15:20'!withTitle: titleString for: anObject setSelector: setSelector getSelector: getSelector	"		(FontChooserTool 			withTitle: 'Choose the Menu Font' 			for: Preferences 			setSelector: #setMenuFontTo: 			getSelector: #standardMenuFont) open.	"	| instance |	instance := self new.	instance 		title: titleString;		target: anObject;		setSelector: setSelector;		getSelector: getSelector.	^instance! !!FontChooserTool methodsFor: 'point size' stamp: 'ar 8/30/2009 14:27'!selectedPointSizeIndex	^self pointSizeList indexOf: (pointSize reduce asString padded: #left to: 3 with: $ )! !!PasteUpMorph methodsFor: 'polymorph' stamp: 'gvc 1/12/2007 16:57'!modalLockTo: aSystemWindow	"Don't lock the world!! Lock the submorphs.	The modal window gets opened afterwards so is OK."		|lockStates|	lockStates _ IdentityDictionary new.	self submorphsDo: [:m |		lockStates at: m put: m isLocked.		m lock].	self		setProperty: #submorphLockStates		toValue: lockStates! !!TransformMorph methodsFor: 'drawing' stamp: 'ar 8/30/2009 14:03'!drawSubmorphsOn: aCanvas	aCanvas transformBy: transform		clippingTo: self innerBounds		during: [:myCanvas |			(self angle ~= 0.0 or: [self scale ~= 1.0])				ifTrue:[ 					AbstractFont forceNonSubPixelDuring:[						submorphs reverseDo:[:m | myCanvas fullDrawMorph: m] ] ]				ifFalse:[					submorphs reverseDo:[:m | myCanvas fullDrawMorph: m] ] ] 		smoothing: smoothing! !!SystemWindow methodsFor: 'polymorph' stamp: 'gvc 1/16/2007 12:24'!modalOwner	"Answer the modal owner of the receiver, if any."	^self valueOfProperty: #modalOwner! !!FontChooserTool methodsFor: 'toolbuilder' stamp: 'ar 8/30/2009 14:59'!contents	| sample i c f |	sample := WriteStream on: ''.	f := self selectedFont ifNil:[^Text new].	f isSymbolFont ifFalse:[		sample 			nextPutAll: 'the quick brown fox jumps over the lazy dog' ;cr;			nextPutAll:  'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.' ;cr;cr;			nextPutAll: '0123456789'; cr; cr;			nextPutAll: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';		yourself.	] ifTrue:[		i := 0.		33 to: 255 do:[:ci |			sample nextPut: (c:=Character value: ci).			i := i + 1.			(('@Z`z' includes:c) or:[i = 30]) 				ifTrue:[i :=0. sample cr]].	].	sample := sample contents asText.	sample addAttribute: (TextFontReference toFont: f).	^sample! !!FontChooserTool methodsFor: 'accessing' stamp: 'ar 8/30/2009 14:27'!getSelector: aSelectorSymbolOrFont	"Set the value of getSelector"	getSelector := aSelectorSymbolOrFont! !!FontChooserTool class methodsFor: 'accessing' stamp: 'ar 8/30/2009 17:02'!default	"Answer the default font chooser tool"	^Default ifNil:[self]! !!TextEditor methodsFor: 'attributes' stamp: 'ar 8/30/2009 17:02'!changeTextFontDialog	"Present a dialog which allows the user to select a font, and if one is chosen, apply it to the current selection.	If there is no selection, or the selection is empty, apply it to the whole morph."	| curFont startIndex chooser newFont |	startIndex := self startIndex.	curFont := (paragraph text fontAt: startIndex withStyle: paragraph textStyle).	(curFont isKindOf: LogicalFont)		ifTrue:[			curFont := curFont copy.			((paragraph text emphasisAt: startIndex) anyMask: 1) ifTrue:[curFont forceBold].			((paragraph text emphasisAt: startIndex) anyMask: 2) ifTrue:[curFont forceItalicOrOblique].			curFont clearRealFont].	morph openModal: (		Cursor wait showWhile: [ 			(chooser := FontChooserTool default				withTitle: 'Change the selected text''s font to...' translated				for: self 				setSelector: #changeSelectionFontTo:				getSelector: curFont) open]).	newFont := chooser result.	newFont ifNotNil:[self changeSelectionFontTo: newFont].! !!FontChooserTool methodsFor: 'toolbuilder' stamp: 'ar 8/30/2009 15:01'!buildWith: builder	"Create the ui for the browser"	"ToolBuilder open: self"	| windowSpec |	windowSpec := self buildWindowWith: builder specs: {		(0@0 corner: 0.4@0.4) -> [self buildFontListWith: builder].		(0.4@0 corner: 0.8@0.4) -> [self buildStyleListWith: builder].		(0.8@0 corner: 1.0@0.4) -> [self buildPointSizeListWith: builder].		(0.0@0.4 corner: 1.0@0.88) -> [self buildPreviewPaneWith: builder].		(0.0@0.88 corner: 1@1) -> [self buildButtonBarWith: builder].	}.	windowSpec extent: 400@300.	window := builder build: windowSpec.	^window! !!FontChooserTool methodsFor: 'initialize' stamp: 'ar 8/30/2009 14:27'!windowTitle	^ title translated! !!FontChooserTool methodsFor: 'point size' stamp: 'ar 8/30/2009 16:28'!pointSizeList	^self selectedFont textStyle pointSizes collect: [:each | each asString padded: #left to: 3 with: $ ]! !!FontChooserTool methodsFor: 'toolbuilder' stamp: 'ar 8/30/2009 15:06'!open	^ToolBuilder open: self! !!FontChooserTool methodsFor: 'font list' stamp: 'ar 8/30/2009 17:05'!selectedFont	| font family |	family := self fontList at: self selectedFontIndex ifAbsent:[^TextStyle defaultFont].	font := (TextStyle named: family) fontOfPointSize: pointSize.	^font emphasized: emphasis! !!FontChooserTool methodsFor: 'accessing' stamp: 'ar 8/30/2009 14:27'!title: anObject	"Set the value of title"	title := anObject! !!FontChooserTool methodsFor: 'font list' stamp: 'ar 8/30/2009 16:24'!selectedFontIndex: anIndex	anIndex = 0 ifTrue: [^self].	selectedFontIndex := anIndex.	self changed: #selectedFontIndex.	self changed: #selectedFontStyleIndex.	self changed: #pointSizeList.	self changed: #pointSizeIndex.	self changed: #contents.! !!TextMorphEditor methodsFor: 'attributes' stamp: 'ar 8/30/2009 16:35'!changeSelectionFontTo: aFont	| attr |	aFont ifNil:[^self].	attr _ TextFontReference toFont: aFont.	paragraph text addAttribute: attr from: self startIndex to: (self stopIndex-1 min: paragraph text size).	paragraph composeAll.	self recomputeInterval.	morph changed.! !!SystemWindow methodsFor: 'polymorph' stamp: 'gvc 1/16/2007 12:27'!modalLockTo: aSystemWindow	"Lock the receiver as a modal owner of the given window."	aSystemWindow		setProperty: #modalOwner toValue: self.	self setProperty: #modalChild toValue: aSystemWindow! !!FontChooserTool methodsFor: 'toolbuilder' stamp: 'ar 8/30/2009 14:41'!buildPreviewPaneWith: builder	"Build the preview panel"	| textSpec |	textSpec := builder pluggableTextSpec new.	textSpec 		model: self;		getText: #contents.	^textSpec! !!FontChooserTool methodsFor: 'toolbuilder' stamp: 'ar 8/30/2009 14:47'!buildWindowWith: builder	| windowSpec |	windowSpec := builder pluggableWindowSpec new.	windowSpec model: self.	windowSpec label: #windowTitle.	windowSpec children: OrderedCollection new.	^windowSpec! !!TextMorphEditor methodsFor: 'attributes' stamp: 'ar 8/30/2009 17:02'!changeTextFont	"Present a dialog which allows the user to select a font, and if one is chosen, apply it to the current selection.	If there is no selection, or the selection is empty, apply it to the whole morph."	| curFont startIndex chooser newFont |	startIndex := self startIndex.	curFont := (paragraph text fontAt: startIndex withStyle: paragraph textStyle).	morph openModal: (		Cursor wait showWhile: [ 			(chooser := FontChooserTool default				withTitle: 'Change the selected text''s font to...' translated				for: self 				setSelector: #changeSelectionFontTo:				getSelector: curFont) open]).	newFont := chooser result.	newFont ifNotNil:[self changeSelectionFontTo: newFont].! !!GrafPort methodsFor: 'private' stamp: 'tween 6/8/2008 12:29'!installStrikeFont: aStrikeFont foregroundColor: foregroundColor backgroundColor: backgroundColor	super installStrikeFont: aStrikeFont foregroundColor: foregroundColor backgroundColor: backgroundColor.	aStrikeFont glyphs depth = 1 ifTrue: [		alpha := foregroundColor privateAlpha.		"dynamically switch between blend modes to support translucent text"		"To handle the transition from TTCFont to StrikeFont, rule 34 must be taken into account."		alpha = 255 ifTrue:[			combinationRule = 30 ifTrue: [combinationRule := Form over].			combinationRule = 31 ifTrue: [combinationRule := Form paint].			combinationRule = 34 ifTrue: [combinationRule := Form paint].			combinationRule = 41 ifTrue: [combinationRule := Form paint]. "41 is  SPRmode"		] ifFalse:[			combinationRule = Form over ifTrue: [combinationRule := 30].			combinationRule = Form paint ifTrue: [combinationRule := 31].			combinationRule = 34 ifTrue: [combinationRule := 31].			combinationRule = 41 ifTrue: [combinationRule := 31]. "41 is SPR mode"		]	].	lastFont := aStrikeFont.	lastFontForegroundColor := foregroundColor.	lastFontBackgroundColor := backgroundColor.! !!FontChooserTool methodsFor: 'font list' stamp: 'ar 8/30/2009 16:24'!selectedFontFamily	^self fontList at: self selectedFontIndex ifAbsent:[nil].		! !!TextLine methodsFor: 'scanning' stamp: 'tween 4/6/2007 12:48'!justifiedPadFor: spaceIndex font: aFont	"Compute the width of pad for a given space in a line of justified text."	| pad |	internalSpaces = 0 ifTrue: [^0].	^(aFont notNil and:[aFont isSubPixelPositioned])		ifTrue:[paddingWidth * 1.0 / internalSpaces]		ifFalse:[			pad _ paddingWidth // internalSpaces.			spaceIndex <= (paddingWidth \\ internalSpaces)				ifTrue: [pad + 1]				ifFalse: [pad]]		! !!SystemWindow methodsFor: 'top window' stamp: 'ar 8/30/2009 14:25'!activateWindow	"Bring me to the front and make me able to respond to mouse and keyboard.	Was #activate (sw 5/18/2001 23:20)"	| oldTop outerMorph sketchEditor pal |	outerMorph := self topRendererOrSelf.	outerMorph owner ifNil: [^ self "avoid spurious activate when drop in trash"].	oldTop := TopWindow.	oldTop = self ifTrue: [^self].	TopWindow := self.	oldTop ifNotNil: [oldTop passivate].	outerMorph owner firstSubmorph == outerMorph		ifFalse: ["Bring me (with any flex) to the top if not already"				outerMorph owner addMorphFront: outerMorph].	self submorphsDo: [:m | m unlock].	labelArea ifNotNil:		[labelArea submorphsDo: [:m | m unlock].		self setStripeColorsFrom: self paneColorToUse].	self isCollapsed ifFalse:		[model modelWakeUpIn: self.		self positionSubmorphs.		labelArea ifNil: [self adjustBorderUponActivationWhenLabeless]].	(sketchEditor := self extantSketchEditor) ifNotNil:		[sketchEditor comeToFront.		(pal := self world findA: PaintBoxMorph) ifNotNil:			[pal comeToFront]].! !!FontChooserTool methodsFor: 'accessing' stamp: 'ar 8/30/2009 14:27'!setSelector: anObject	"Set the value of setSelector"	setSelector := anObject! !!FontChooserTool methodsFor: 'toolbuilder' stamp: 'ar 8/30/2009 16:23'!buildFontListWith: builder	"Build the font choosers list of font names"	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 		model: self;		list: #fontList; 		getIndex: #selectedFontIndex; 		setIndex: #selectedFontIndex:.	^listSpec! !!TextEditor methodsFor: 'attributes' stamp: 'ar 8/30/2009 15:14'!changeSelectionFontTo: aFont	| attr |	aFont ifNil:[^self].	attr _ TextFontReference toFont: aFont.	paragraph text addAttribute: attr from: self startIndex to: (self stopIndex-1 min: paragraph text size).	paragraph composeAll.	self recomputeInterval.	morph changed.! !!FontChooserTool methodsFor: 'accessing' stamp: 'ar 8/30/2009 14:27'!getSelector	"Answer the value of getSelector"	^ getSelector! !!PasteUpMorph methodsFor: 'polymorph' stamp: 'gvc 1/12/2007 17:01'!modalUnlockFrom: aSystemWindow	"Don't unlock the world!! Unlock the submorphs	that were not originally locked."		|lockStates|	lockStates := self		valueOfProperty: #submorphLockStates		ifAbsent: [^self].	self removeProperty: #submorphLockStates.	lockStates keysAndValuesDo: [:m :locked |		locked ifFalse: [m unlock]]! !!FontChooserTool methodsFor: 'accessing' stamp: 'ar 8/30/2009 14:27'!target	"Answer the value of target"	^ target! !!SystemWindow methodsFor: 'polymorph' stamp: 'gvc 9/4/2007 13:42'!rememberedKeyboardFocus	"Answer the remembered keyboard focus for the receiver."		^self valueOfProperty: #rememberedFocus! !!StringMorph methodsFor: 'menu' stamp: 'ar 8/30/2009 16:44'!changeFont	| newFont chooser|	chooser := self openModal: (		Cursor wait showWhile: [UIManager default 			chooseFont: 'Choose a Font' 			for: self 			setSelector: #font: 			getSelector: self fontToUse]).	newFont := chooser result.	newFont ifNotNil:[self font: newFont].! !!SystemWindow methodsFor: 'polymorph' stamp: 'gvc 1/16/2007 12:26'!modalUnlockFrom: aSystemWindow	"Unlock the receiver as a modal owner of the given window."	aSystemWindow removeProperty: #modalOwner.	self removeProperty: #modalChild.	self activate! !!TextEditor methodsFor: 'attributes' stamp: 'ar 8/30/2009 17:02'!changeTextFont	"Present a dialog which allows the user to select a font, and if one is chosen, apply it to the current selection.	If there is no selection, or the selection is empty, apply it to the whole morph."	| curFont startIndex chooser newFont |	startIndex := self startIndex.	curFont := (paragraph text fontAt: startIndex withStyle: paragraph textStyle).	morph openModal: (		Cursor wait showWhile: [ 			(chooser := FontChooserTool default				withTitle: 'Change the selected text''s font to...' translated				for: self 				setSelector: #changeSelectionFontTo:				getSelector: curFont) open]).	newFont := chooser result.	newFont ifNotNil:[self changeSelectionFontTo: newFont].! !!FontChooserTool methodsFor: 'actions' stamp: 'ar 8/30/2009 15:03'!accept	self apply.	result := self selectedFont.	ToolBuilder default close: window.! !!FontChooserTool class methodsFor: 'opening' stamp: 'ar 8/30/2009 15:20'!openWithWindowTitle: titleString for: anObject setSelector: setSelector getSelector: getSelector	"		FontChooserTool 			openWithWindowTitle: 'Choose the Menu Font' 			for: Preferences 			setSelector: #setMenuFontTo: 			getSelector: #standardMenuFont.	"	^(self withTitle: titleString for: anObject setSelector: setSelector getSelector: getSelector) open! !!SystemWindow methodsFor: 'top window' stamp: 'ar 8/30/2009 14:25'!activate	"Activate the owner too."	|mo mc|	mo := self modalOwner.	mc := self modalChild.	mc isNil		ifFalse: [mc owner notNil ifTrue: [				mc activate.				^mc modalChild isNil ifTrue: [mc flash]]].	(self paneMorphs size > 1 and: [self splitters isEmpty])		ifTrue: [self addPaneSplitters].	self activateWindow.	self rememberedKeyboardFocus		ifNil: [(self respondsTo: #navigateFocusForward)				ifTrue: [self navigateFocusForward]]		ifNotNilDo: [:m | m world						ifNil: [self rememberKeyboardFocus: nil] "deleted"						ifNotNilDo: [:w | 							m wantsKeyboardFocus								ifTrue: [m takeKeyboardFocus]								ifFalse: [(self respondsTo: #navigateFocusForward)											ifTrue: [self navigateFocusForward]]]].	(mo notNil and: [mo isKindOf: SystemWindow])		ifTrue: [mo bringBehind: self]! !!BorderedMorph methodsFor: 'drawing' stamp: 'ar 8/25/2009 11:37'!areasRemainingToFill: aRectangle	"Fixed here to test the fillStyle rather than color for translucency.	Since can have a translucent fillStyle while the (calculated) color is not."		self fillStyle isTranslucent		ifTrue: [^ Array with: aRectangle].	self wantsRoundedCorners		ifTrue: [(self borderWidth > 0					and: [self borderColor isColor							and: [self borderColor isTranslucent]])				ifTrue: [^ aRectangle						areasOutside: (self innerBounds intersect: self boundsWithinCorners)]				ifFalse: [^ aRectangle areasOutside: self boundsWithinCorners]]		ifFalse: [(self borderWidth > 0					and: [self borderColor isColor							and: [self borderColor isTranslucent]])				ifTrue: [^ aRectangle areasOutside: self innerBounds]				ifFalse: [^ aRectangle areasOutside: self bounds]]! !!FontChooserTool methodsFor: 'toolbuilder' stamp: 'ar 8/30/2009 15:07'!buildButtonBarWith: builder	"Build the button bar"	| panelSpec buttonSpec |	panelSpec := builder pluggablePanelSpec new.	panelSpec children: OrderedCollection new.	buttonSpec := builder pluggableButtonSpec new.	buttonSpec 			model: self;			label: ' Apply ' translated; 			action: #apply;			frame: (0.0@0 corner: 0.33@1).	panelSpec children addLast: buttonSpec.	buttonSpec := builder pluggableButtonSpec new.	buttonSpec 			model: self;			label: '     OK     ' translated; 			action: #accept;			frame: (0.33@0 corner: 0.67@1).	panelSpec children addLast: buttonSpec.	buttonSpec := builder pluggableButtonSpec new.	buttonSpec 			model: self;			label: ' Cancel ' translated; 			action: #cancel;			frame: (0.67@0 corner: 1@1).	panelSpec children addLast: buttonSpec.	^panelSpec! !!FontChooserTool methodsFor: 'initialize' stamp: 'ar 8/30/2009 16:18'!initialize	super initialize.	title := 'Choose A Font'.	getSelector := TextStyle defaultFont.	emphasis := 0.! !!FontChooserTool methodsFor: 'toolbuilder' stamp: 'ar 8/30/2009 14:46'!buildWindowWith: builder specs: specs	| windowSpec rect action widgetSpec |	windowSpec := self buildWindowWith: builder.	specs do:[:assoc|		rect := assoc key.		action := assoc value.		widgetSpec := action value.		widgetSpec ifNotNil:[			widgetSpec frame: rect.			windowSpec children add: widgetSpec]].	^windowSpec! !!TextMorphEditor methodsFor: 'accessing' stamp: 'djr 8/26/2009 10:37'!setSearch: aString	| bk |	"Set the FindText and ChangeText to seek aString; except if already seeking aString, leave ChangeText alone so again will repeat last replacement."	(bk := morph ownerThatIsA: BookMorph) ifNotNil: [		bk setProperty: #tempSearchKey 			toValue: (aString findTokens: Character separators)].	aString ifNotNil: [		FindText string = aString			ifFalse: [FindText := ChangeText := aString asText]].! !!FontChooserTool methodsFor: 'font list' stamp: 'ar 8/30/2009 16:39'!fontList	"List of available font family names"	^fontList ifNil:[fontList := (TextConstants select: [:each | each isKindOf: TextStyle]) keys asArray sort]! !!Morph methodsFor: 'polymorph' stamp: 'gvc 9/11/2006 09:37'!modalLockTo: aSystemWindow	"Lock the receiver as a modal owner of the given window."	self lock! !!SystemWindow methodsFor: 'polymorph' stamp: 'gvc 1/16/2007 12:51'!bringBehind: aMorph	"Make the receiver be directly behind the given morph.	Take into account any modal owner and propagate."	|outerMorph|	outerMorph := self topRendererOrSelf.	outerMorph owner ifNil: [^ self "avoid spurious activate when drop in trash"].	outerMorph owner addMorph: outerMorph after: aMorph topRendererOrSelf.	self modalOwner ifNotNilDo: [:mo | mo bringBehind: self]! !!BalloonMorph class methodsFor: 'utility' stamp: 'tween 8/7/2007 01:59'!chooseBalloonFont	"BalloonMorph chooseBalloonFont"	Preferences 		chooseFontWithPrompt:  'Ballon Help font...' translated		andSendTo: self 		withSelector: #setBalloonFontTo: 		highlightSelector: #balloonFont! !!FontChooserTool methodsFor: 'accessing' stamp: 'ar 8/30/2009 15:21'!result	^result! !!FontChooserTool methodsFor: 'style list' stamp: 'ar 8/30/2009 16:26'!selectedFontStyleIndex: anIndex	anIndex = 0 ifTrue: [^self].	emphasis := anIndex - 1.	self changed: #selectedFontStyleIndex.	self changed: #contents.! !!FontChooserTool methodsFor: 'font list' stamp: 'ar 8/30/2009 16:22'!selectedFontIndex	| font textStyleName family |	selectedFontIndex ifNotNil: [^selectedFontIndex].	selectedFontIndex := 0.	font := (getSelector isSymbol and:[target notNil])		ifTrue:[target perform: getSelector]		ifFalse:[getSelector].	font ifNotNil:[		emphasis := font emphasis.		pointSize := font pointSize.		textStyleName := font textStyleName.		family := self fontList detect:[:f | f = textStyleName] ifNone:[].	].	selectedFontIndex := self fontList indexOf: family ifAbsent:[0].	self selectedFontIndex: selectedFontIndex.	^selectedFontIndex! !!PasteUpMorph methodsFor: 'world menu' stamp: 'laza 8/31/2009 00:57'!findAWindowSatisfying: qualifyingBlock orMakeOneUsing: makeBlock 	"Locate a window satisfying a block, open it, and bring it to the front.  Create one if necessary, by using the makeBlock"	| aWindow |	submorphs do: 			[:aMorph | 			(((aWindow := aMorph renderedMorph) isSystemWindow) 				and: [qualifyingBlock value: aWindow]) 					ifTrue: 						[aWindow isCollapsed ifTrue: [aWindow expand].						aWindow activateAndForceLabelToShow.						^self]].	"None found, so create one"	makeBlock value! !!FontChooserTool methodsFor: 'point size' stamp: 'ar 8/30/2009 14:51'!pointSize: aNumber	pointSize := aNumber.	self changed: #pointSize.	self changed: #contents.! !!FontChooserTool methodsFor: 'actions' stamp: 'ar 8/30/2009 14:27'!apply	| font |	target ifNotNil:[		setSelector ifNotNil:[			font := self selectedFont.			font ifNotNil:[				target perform: setSelector with: font]]].! !!FontChooserTool methodsFor: 'actions' stamp: 'ar 8/30/2009 15:04'!cancel	result := nil.	ToolBuilder default close: window.! !!FontChooserTool methodsFor: 'initialize' stamp: 'ar 8/30/2009 15:22'!initialExtent	^400@300! !!PluggableListMorph methodsFor: 'menus' stamp: 'tween 9/8/2007 14:56'!setListFont	"set the font for the list"	Preferences 		chooseFontWithPrompt: 'Choose the font for this list' translated 		andSendTo: self 		withSelector: #font: 		highlightSelector: #font! !!PasteUpMorph methodsFor: 'world menu' stamp: 'laza 8/31/2009 01:03'!findAFileList: evt 	"Locate a file list, open it, and bring it to the front.	Create one if necessary, respecting the Preference."	self		findAWindowSatisfying: [:aWindow | aWindow model isKindOf: FileList]		orMakeOneUsing: [FileList2 prototypicalToolWindow openInWorld]! !!FontChooserTool methodsFor: 'point size' stamp: 'ar 8/30/2009 16:27'!selectedPointSizeIndex: anIndex	anIndex = 0 ifTrue: [^self].	pointSize := (self pointSizeList at: anIndex) withBlanksTrimmed asNumber.	self changed: #pointSizeList.	self changed: #contents.! !!FontChooserTool methodsFor: 'toolbuilder' stamp: 'ar 8/30/2009 16:25'!buildStyleListWith: builder	"Build the font choosers list of font styles"	| listSpec |	listSpec := builder pluggableListSpec new.	listSpec 		model: self;		list: #fontStyleList; 		getIndex: #selectedFontStyleIndex; 		setIndex: #selectedFontStyleIndex:.	^listSpec! !!FontChooserTool methodsFor: 'style list' stamp: 'ar 8/30/2009 16:15'!fontStyleList	"names of simulated styles are enclosed in parenthesis"	^#('Regular' 'Bold' 'Italic' 'Bold Italic')! !!GrafPort methodsFor: 'accessing' stamp: 'tween 4/5/2007 08:03'!lastFontForegroundColor	^lastFontForegroundColor! !!FontChooserTool class methodsFor: 'opening' stamp: 'ar 8/30/2009 15:06'!windowTitle: titleString for: anObject setSelector: setSelector getSelector: getSelector	| instance |		instance := self new.	instance 		title: titleString;		target: anObject;		setSelector: setSelector;		getSelector: getSelector.	^instance open! !!Morph methodsFor: 'polymorph' stamp: 'tween 3/2/2008 19:41'!openModal: aSystemWindow	"Open the given window locking the receiver until it is dismissed.	Answer the system window.	Restore the original keyboard focus when closed."	|area mySysWin keyboardFocus|	keyboardFocus _ self activeHand keyboardFocus.	mySysWin := self isSystemWindow ifTrue: [self] ifFalse: [self ownerThatIsA: SystemWindow].	mySysWin ifNil: [mySysWin := self].	mySysWin modalLockTo: aSystemWindow.	( RealEstateAgent respondsTo: #reduceByFlaps: )		ifTrue:[			area := RealEstateAgent reduceByFlaps: RealEstateAgent maximumUsableArea]		ifFalse:[			area := RealEstateAgent maximumUsableArea].	aSystemWindow extent: aSystemWindow initialExtent.	aSystemWindow position = (0@0)		ifTrue: [aSystemWindow				position: self activeHand position - (aSystemWindow extent // 2)].	aSystemWindow		bounds: (aSystemWindow bounds translatedToBeWithin: area).	[ToolBuilder default runModal: aSystemWindow openAsIs]		ensure: [mySysWin modalUnlockFrom: aSystemWindow.				self activeHand newKeyboardFocus: keyboardFocus].	^aSystemWindow! !!FontChooserTool methodsFor: 'accessing' stamp: 'ar 8/30/2009 15:19'!window	^window! !!FontChooserTool class methodsFor: 'accessing' stamp: 'ar 8/30/2009 17:02'!default: aFontChooser	"Answer the default font chooser tool"	Default := aFontChooser! !!Morph methodsFor: 'polymorph' stamp: 'gvc 9/11/2006 09:38'!modalUnlockFrom: aSystemWindow	"Unlock the receiver as a modal owner of the given window."	self unlock! !!FontChooserTool methodsFor: 'accessing' stamp: 'ar 8/30/2009 14:27'!target: anObject	"Set the value of target"	target := anObject! !!FontChooserTool methodsFor: 'point size' stamp: 'ar 8/30/2009 14:27'!selectedPointSize	^self selectedFont pointSize! !!FontChooserTool methodsFor: 'point size' stamp: 'ar 8/30/2009 14:27'!pointSize	^pointSize ifNil: [pointSize := 10.0]! !!FontChooserTool methodsFor: 'style list' stamp: 'ar 8/30/2009 16:25'!selectedFontStyleIndex	"This is a hack"	^emphasis+1! !!SystemWindow methodsFor: 'polymorph' stamp: 'gvc 1/16/2007 12:24'!modalChild	"Answer the modal child of the receiver, if any."	^self valueOfProperty: #modalChild! !