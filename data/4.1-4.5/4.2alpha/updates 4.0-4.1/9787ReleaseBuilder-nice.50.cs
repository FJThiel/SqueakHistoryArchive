"Change Set:		9787ReleaseBuilder-nice.50ReleaseBuilder-nice.50:1) avoid now useless assignments to block arguments2) fix underscores"!!ReleaseBuilderFor3dot11 methodsFor: 'unloadPackages' stamp: 'edc 6/2/2008 09:45'!unloadTraitsTraitsStubs| loader |	loader := CodeLoader new.	loader baseURL:'http://installer.pbwiki.org/f/'.		"Sources and segments can be loaded in parallel"	loader loadSourceFiles: #('UnloadTraits-TraitsStubs.cs' ).	! !!ReleaseBuilderFor3dot10 methodsFor: 'updates' stamp: 'edc 5/15/2007 08:03'!newUpdateFor: aBugNo"  ReleaseBuilderFor3dot10 new  newUpdateFor: nnnn"|cs updateNo  newName newSet lastName|mantisNo := aBugNo.updateNo := SystemVersion current highestUpdate + 1.lastName := ChangeSet allChangeSetNames last.	newName := UIManager default		request: 'Please name the new change set:'		initialAnswer: updateNo asString, lastName.	newName isEmptyOrNil ifTrue:		[^ nil].	newSet := ChangeSet basicNewChangeSet: newName.	newSet ifNotNil:		[ChangeSet  newChanges: newSet].	cs := newSet .cs preamble:  '"',(Installer mantis preambleCsForRB: aBugNo) withSqueakLineEndings asUnHtml , '"'.cs postscript: '"', self postcriptTemplate, aBugNo asString, '"ReleaseBuilderFor3dot10 new updatePackages: '.self updateToNext.cs editPostscript! !!ReleaseBuilder methodsFor: 'squeakland' stamp: 'nice 1/11/2010 20:22'!makeSqueaklandReleasePhaseStripping	"ReleaseBuilder new makeSqueaklandReleasePhaseStripping"	#(#Helvetica #Palatino #Courier #ComicSansMS )		do: [:n | TextConstants				removeKey: n				ifAbsent: []].	Smalltalk		at: #Player		ifPresent: [:superCls | superCls				allSubclassesDo: [:cls | 					cls isSystemDefined						ifFalse: [cls removeFromSystem]]].	Smalltalk garbageCollect.	Smalltalk discardFFI; discardSUnit; discardSpeech.	"discardMVC;"	SystemOrganization removeEmptyCategories.	Smalltalk garbageCollect.	ScheduledControllers := nil.	Behavior flushObsoleteSubclasses.	Smalltalk garbageCollect; garbageCollect.	DataStream initialize.	Smalltalk fixObsoleteReferences! !!ReleaseBuilderFor3dot11 methodsFor: 'unloadPackages' stamp: 'edc 6/2/2008 09:44'!unloadTraitsClearRefs| loader |	loader := CodeLoader new.	loader baseURL:'http://installer.pbwiki.org/f/'.		"Sources and segments can be loaded in parallel"	loader loadSourceFiles: #('UnloadTraits-ClearRefs.cs' ).	! !!ReleaseBuilderSqueakland methodsFor: 'utilities' stamp: 'nice 1/11/2010 20:21'!finalStripping	"ReleaseBuilderSqueakland new finalStripping"	#(#Helvetica #Palatino #Courier #ComicSansMS )		do: [:n | TextConstants				removeKey: n				ifAbsent: []].	Smalltalk		at: #Player		ifPresent: [:superCls | superCls				allSubclassesDo: [:cls | 					cls isSystemDefined						ifFalse: [cls removeFromSystem]]].	Smalltalk garbageCollect.	Smalltalk discardFFI; discardSUnit; discardSpeech.	"discardMVC;"	SystemOrganization removeEmptyCategories.! !!ReleaseBuilderFor3dot11 methodsFor: 'unloadPackages' stamp: 'edc 6/2/2008 09:34'!unloadTraitsStubOutAcessors| loader |	loader := CodeLoader new.	loader baseURL:'http://installer.pbwiki.org/f/'.		"Sources and segments can be loaded in parallel"	loader loadSourceFiles: #('UnloadTraits-StubOutAcessors.cs' ).	! !!ReleaseBuilderFor3dot11 methodsFor: 'cleaning' stamp: 'edc 2/5/2008 07:33'!getRidOfUnwantedMorphs| objFl aButton  partBin unwantedMorph |aButton := SimpleButtonMorph new label: 'Tools'.			aButton actWhen: #buttonDown.objFl := Flaps globalFlapTabWithID: 'Objects'.objFl referent showCategory: 'Tools' fromButton: aButton.partBin := objFl referent submorphs at: 1.unwantedMorph := partBin submorphThat: [:any| (any arguments at: 2) = 'SUnit Runner'] ifNone: [].unwantedMorph delete.2 timesRepeat: [unwantedMorph := partBin submorphThat: [:any| (any arguments at: 2) = 'Package Loader'] ifNone: []. "we have two of this "unwantedMorph delete].objFl := Flaps globalFlapTabWithID: 'Tools'.partBin := objFl referent.unwantedMorph := partBin submorphThat: [:any| (any arguments at: 2) = 'Package Loader'] ifNone: [].unwantedMorph delete.unwantedMorph := partBin submorphThat: [:any| (any arguments at: 2) = 'SUnit Runner'] ifNone: [].unwantedMorph delete.! !