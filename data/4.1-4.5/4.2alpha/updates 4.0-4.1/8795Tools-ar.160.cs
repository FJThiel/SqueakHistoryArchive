"Change Set:		8795Tools-ar.160Tools-ar.160:Make Protocols unloadable: Move ProtocolBrowser, Lexicon, InstanceBrowser to Protocols-Tools. Remove support for change set categories since they introduced another protocol dependency. If you care about the latter, holler and I'll put them back."!CodeHolder subclass: #ChangeSorter	instanceVariableNames: 'parent myChangeSet currentClassName currentSelector priorChangeSetList'	classVariableNames: ''	poolDictionaries: ''	category: 'Tools-Changes'!Object subclass: #ChangesOrganizer	instanceVariableNames: ''	classVariableNames: 'ChangeSetNamesInRelease RecentUpdateMarker'	poolDictionaries: ''	category: 'Tools-Changes'!!ChangeSorter methodsFor: 'changeSet menu' stamp: 'ar 1/4/2010 01:59'!newSet	"Create a new changeSet and show it., making it the current one.  Reject name if already in use."	| aSet |	self okToChange ifFalse: [^ self].	aSet := self class newChangeSet.	aSet ifNotNil:[		self update.		self showChangeSet: aSet.		self changed: #relabel]! !!ChangeSorter methodsFor: 'access' stamp: 'ar 1/4/2010 01:58'!labelString	"The label for my entire window.  The large button that displays my name is gotten via mainButtonName"	^ String streamContents:		[:aStream |			aStream nextPutAll: (ChangeSet current == myChangeSet				ifTrue: ['Changes go to "', myChangeSet name, '"']				ifFalse: ['ChangeSet: ', myChangeSet name])]! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'ar 1/4/2010 01:59'!updateIfNecessary	"Recompute all of my panes."	| newList |	self okToChange ifFalse: [^ self].	myChangeSet ifNil: [^ self].  "Has been known to happen though shouldn't"	(myChangeSet isMoribund) ifTrue:		[self changed: #changeSetList.		^ self showChangeSet: ChangeSet current].	newList := self changeSetList.	(priorChangeSetList == nil or: [priorChangeSetList ~= newList])		ifTrue:			[priorChangeSetList := newList.			self changed: #changeSetList].	self showChangeSet: myChangeSet! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'ar 1/4/2010 01:56'!changeSetMenu: aMenu shifted: isShifted 	"Set up aMenu to hold commands for the change-set-list pane.  This could be for a single or double changeSorter"	isShifted ifTrue: [^ self shiftedChangeSetMenu: aMenu].	Smalltalk isMorphic		ifTrue:			[aMenu title: 'Change Set'.			aMenu addStayUpItemSpecial]		ifFalse:			[aMenu title: 'Change Set:' , myChangeSet name].	aMenu add: 'make changes go to me (m)' action: #newCurrent.	aMenu addLine.	aMenu add: 'new change set... (n)' action: #newSet.	aMenu add: 'find...(f)' action: #findCngSet.	aMenu add: 'select change set...' action: #chooseCngSet.	aMenu addLine.	aMenu add: 'rename change set (r)' action: #rename.	aMenu add: 'file out (o)' action: #fileOut.	aMenu add: 'mail to list' action: #mailOut.	aMenu add: 'browse methods (b)' action: #browseChangeSet.	aMenu add: 'browse change set (B)' action: #openChangeSetBrowser.	aMenu addLine.	parent		ifNotNil: 			[aMenu add: 'copy all to other side (c)' action: #copyAllToOther.			aMenu add: 'submerge into other side' action: #submergeIntoOtherSide.			aMenu add: 'subtract other side (-)' action: #subtractOtherSide.			aMenu addLine].	myChangeSet hasPreamble		ifTrue: 			[aMenu add: 'edit preamble (p)' action: #addPreamble.			aMenu add: 'remove preamble' action: #removePreamble]		ifFalse: [aMenu add: 'add preamble (p)' action: #addPreamble].	myChangeSet hasPostscript		ifTrue: 			[aMenu add: 'edit postscript...' action: #editPostscript.			aMenu add: 'remove postscript' action: #removePostscript]		ifFalse: [aMenu add: 'add postscript...' action: #editPostscript].	aMenu addLine.	aMenu add: 'destroy change set (x)' action: #remove.	aMenu addLine.	aMenu add: 'more...' action: #offerShiftedChangeSetMenu.	^ aMenu! !!DualChangeSorter methodsFor: 'other' stamp: 'ar 1/4/2010 02:01'!labelString	"The window label"	^'Changes go to "', ChangeSet current name,  '"'.! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'ar 1/4/2010 02:00'!shiftedChangeSetMenu: aMenu	"Set up aMenu to hold items relating to the change-set-list pane when the shift key is down"	Smalltalk isMorphic ifTrue:		[aMenu title: 'Change set (shifted)'.		aMenu addStayUpItemSpecial].	"CONFLICTS SECTION"	aMenu add: 'conflicts with other change sets' action: #browseMethodConflicts.	aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in at least one other change set.'.	parent ifNotNil:		[aMenu add: 'conflicts with change set opposite' action: #methodConflictsWithOtherSide.			aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in the one on the opposite side of the change sorter.'.].	aMenu addLine.	"CHECKS SECTION"	aMenu add: 'check for slips' action: #lookForSlips.	aMenu balloonTextForLastItem: 'Check this change set for halts and references to Transcript.'.	aMenu add: 'check for unsent messages' action: #checkForUnsentMessages.	aMenu balloonTextForLastItem:'Check this change set for messages that are not sent anywhere in the system'.	aMenu add: 'check for uncommented methods' action: #checkForUncommentedMethods.	aMenu balloonTextForLastItem:'Check this change set for methods that do not have comments'.	aMenu add: 'check for uncommented classes' action: #checkForUncommentedClasses.	aMenu balloonTextForLastItem:'Check for classes with code in this changeset which lack class comments'.	Utilities authorInitialsPerSe isEmptyOrNil ifFalse:		[aMenu add: 'check for other authors' action: #checkForAlienAuthorship.		aMenu balloonTextForLastItem:'Check this change set for methods whose current authoring stamp does not start with "', Utilities authorInitials, '"'.	aMenu add: 'check for any other authors' action: #checkForAnyAlienAuthorship.	aMenu balloonTextForLastItem:'Check this change set for methods any of whose authoring stamps do not start with "', Utilities authorInitials, '"'].	aMenu add: 'check for uncategorized methods' action: #checkForUnclassifiedMethods.	aMenu balloonTextForLastItem:'Check to see if any methods in the selected change set have not yet been assigned to a category.  If any are found, open a browser on them.'.	aMenu addLine.	aMenu add: 'inspect change set' action: #inspectChangeSet.	aMenu balloonTextForLastItem: 'Open an inspector on this change set. (There are some details in a change set which you don''t see in a change sorter.)'.	aMenu add: 'update' action: #update.	aMenu balloonTextForLastItem: 'Update the display for this change set.  (This is done automatically when you activate this window, so is seldom needed.)'.	aMenu add: 'go to change set''s project' action: #goToChangeSetsProject.	aMenu balloonTextForLastItem: 'If this change set is currently associated with a Project, go to that project right now.'.	aMenu add: 'promote to top of list' action: #promoteToTopChangeSet.	aMenu balloonTextForLastItem:'Make this change set appear first in change-set lists in all change sorters.'.	aMenu add: 'trim history' action: #trimHistory.	aMenu balloonTextForLastItem: ' Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes.  NOTE: can cause confusion if later filed in over an earlier version of these changes'.	aMenu add: 'remove contained in class categories...' action: #removeContainedInClassCategories.	aMenu balloonTextForLastItem: ' Drops any changes in given class categories'.	aMenu add: 'clear this change set' action: #clearChangeSet.	aMenu balloonTextForLastItem: 'Reset this change set to a pristine state where it holds no information. CAUTION: this is destructive and irreversible!!'.	aMenu add: 'expunge uniclasses' action: #expungeUniclasses.	aMenu balloonTextForLastItem:'Remove from the change set all memory of uniclasses, e.g. classes added on behalf of etoys, fabrik, etc., whose classnames end with a digit.'.	aMenu add: 'uninstall this change set' action: #uninstallChangeSet.	aMenu balloonTextForLastItem: 'Attempt to uninstall this change set. CAUTION: this may not work completely and is irreversible!!'.	aMenu addLine.	aMenu add: 'file into new...' action: #fileIntoNewChangeSet.	aMenu balloonTextForLastItem: 'Load a fileout from disk and place its changes into a new change set (seldom needed -- much better to do this from a file-list browser these days.)'.	aMenu add: 'reorder all change sets' action: #reorderChangeSets.	aMenu balloonTextForLastItem:'Applies a standard reordering of all change-sets in the system -- at the bottom will come the sets that come with the release; next will come all the numbered updates; finally, at the top, will come all other change sets'.	aMenu addLine.	aMenu add: 'more...' action: #offerUnshiftedChangeSetMenu.	aMenu balloonTextForLastItem: 'Takes you back to the primary change-set menu.'.	^ aMenu! !!ChangesOrganizer class methodsFor: 'class initialization' stamp: 'ar 1/4/2010 02:02'!initialize	"Initialize the class variables"	RecentUpdateMarker := 0.! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'ar 1/4/2010 01:54'!changeSetList	"Answer a list of ChangeSet names to be shown in the change sorter."	^ChangeSet allChangeSets collect:[:cs| cs name]! !!ChangeSorter methodsFor: 'changeSet menu' stamp: 'ar 1/4/2010 01:55'!changeSetListKey: aChar from: view	"Respond to a Command key.  I am a model with a listView that has a list of changeSets."	aChar == $b ifTrue: [^ self browseChangeSet].	aChar == $B ifTrue: [^ self openChangeSetBrowser].	aChar == $c ifTrue: [^ self copyAllToOther].	aChar == $D ifTrue: [^ self toggleDiffing]. 	aChar == $f ifTrue: [^ self findCngSet].	aChar == $m ifTrue: [^ self newCurrent].	aChar == $n ifTrue: [^ self newSet].	aChar == $o ifTrue: [^ self fileOut].	aChar == $p ifTrue: [^ self addPreamble].	aChar == $r ifTrue: [^ self rename].	aChar == $x ifTrue: [^ self remove].	aChar == $- ifTrue: [^ self subtractOtherSide].	^ self messageListKey: aChar from: view! !!ChangeSorter methodsFor: 'creation' stamp: 'ar 1/4/2010 02:01'!veryDeepInner: deepCopier	"Copy all of my instance variables.  Some need to be not copied at all, but shared."super veryDeepInner: deepCopier."parent := parent.		Weakly copied""myChangeSet := myChangeSet.		Weakly copied"currentClassName := currentClassName veryDeepCopyWith: deepCopier."currentSelector := currentSelector.		Symbol"priorChangeSetList := priorChangeSetList veryDeepCopyWith: deepCopier.! !ProtocolBrowser removeSelector: #list!ProtocolBrowser removeSelector: #on:!Lexicon removeSelector: #selectorsRetrieved!Lexicon removeSelector: #setLocalClassVarRefs!Lexicon removeSelector: #removeFromSelectorsVisited!ChangeSorter class removeSelector: #changeSetCategoryNamed:!ChangeSorter removeSelector: #showChangeSetCategory:!Lexicon removeSelector: #setToShowSelector:!Lexicon removeSelector: #limitClass:!ChangeSorter removeSelector: #showCategoriesOfChangeSet!Lexicon removeSelector: #selectImplementedMessageAndEvaluate:!ProtocolBrowser removeSelector: #setSelector:!ChangeSetCategory removeSelector: #acceptsManualAdditions!Lexicon removeSelector: #annotation!Lexicon removeSelector: #updateSelectorsVisitedfrom:to:!InstanceBrowser removeSelector: #targetObject!Lexicon removeSelector: #browseInstVarDefs!StaticChangeSetCategory removeSelector: #acceptsManualAdditions!ProtocolBrowser removeSelector: #initListFrom:highlighting:!Lexicon removeSelector: #limitClass!Lexicon removeSelector: #setSendersSearch!Lexicon removeSelector: #buildCustomButtonsWith:!Lexicon removeSelector: #doItReceiver!Lexicon removeSelector: #selectorsMatching!ProtocolBrowser class removeSelector: #openSubProtocolForClass:!ChangeSetCategory removeSelector: #hasChangeForClassName:selector:otherThanIn:!Lexicon removeSelector: #showCategory!Lexicon removeSelector: #showSearchPane!ProtocolBrowser removeSelector: #selector!Lexicon removeSelector: #setClassAndSelectorIn:!ChangeSetCategory removeSelector: #fillAggregateChangeSet!StringHolder removeSelector: #browseFullProtocol!Lexicon class removeSelector: #activeCategoryName!ChangeSetCategoryWithParameters removeSelector: #reconstituteList!ChangeSetCategory removeSelector: #reconstituteList!Lexicon removeSelector: #browseClassVarRefs!Lexicon removeSelector: #setMethodListFromSearchString!Lexicon removeSelector: #categoryListMenu:shifted:!Lexicon removeSelector: #reformulateListNoting:!InstanceBrowser removeSelector: #openOnObject:showingSelector:!StaticChangeSetCategory removeSelector: #addChangeSet:!ProtocolBrowser removeSelector: #selectedClassOrMetaClass!ProtocolBrowser removeSelector: #setClassAndSelectorIn:!ProtocolBrowser removeSelector: #selector:!Lexicon removeSelector: #removeFromSelectorsVisited:!ChangeSetCategoryWithParameters removeSelector: #addChangeSet:!ChangesOrganizer class removeSelector: #initializeChangeSetCategories!Lexicon removeSelector: #messageListKey:from:!Lexicon removeSelector: #selectWithinCurrentCategory:!Smalltalk removeClassNamed: #ChangeSetCategory!Smalltalk removeClassNamed: #Lexicon!ChangeSetCategory removeSelector: #defaultChangeSetToShow!Lexicon removeSelector: #selectSelectorItsNaturalCategory:!ProtocolBrowser class removeSelector: #openFullProtocolForClass:!Lexicon removeSelector: #toggleSearch!ChangeSorter removeSelector: #chooseChangeSetCategoryInMorphic!Lexicon removeSelector: #selectedMessage!ChangeSorter removeSelector: #makeNewCategoryShowingClassChanges!Smalltalk removeClassNamed: #ChangeSetCategoryWithParameters!Lexicon removeSelector: #buildCodePaneWith:!Lexicon removeSelector: #queryCharacterization!Lexicon removeSelector: #limitClassString!ChangeSorter removeSelector: #parenthesizedCategoryName!Lexicon removeSelector: #browseInstVarRefs!Lexicon removeSelector: #openOnClass:showingSelector:!ChangeSetCategory removeSelector: #includesChangeSet:!ChangeSorter removeSelector: #addToCategoryOpposite!Lexicon removeSelector: #categoryListMenuTitle!Lexicon removeSelector: #maybeReselectClass:selector:!Lexicon removeSelector: #buildCategoryListWith:!Lexicon removeSelector: #currentQueryParameter!Lexicon removeSelector: #navigateToPreviousMethod!Lexicon removeSelector: #selectorsChanged!ProtocolBrowser removeSelector: #onSubProtocolOf:!Lexicon removeSelector: #canShowMultipleMessageCategories!Lexicon removeSelector: #customButtonSpecs!Lexicon removeSelector: #showHomeCategory!Lexicon removeSelector: #lastSearchString!ChangeSorter removeSelector: #fillAggregateChangeSet!Lexicon removeSelector: #useVocabulary:!Lexicon removeSelector: #targetObject!ChangeSorter removeSelector: #categorySubmenu:shifted:!Lexicon removeSelector: #categoryOfSelector:!Lexicon class removeSelector: #viewedCategoryName!Lexicon removeSelector: #setLocalInstVarRefs!Lexicon removeSelector: #initListFrom:highlighting:!Lexicon removeSelector: #setLimitClass:!Lexicon removeSelector: #showCategoriesPane!Lexicon removeSelector: #categoryDefiningSelector:!Lexicon removeSelector: #addModelItemsToWindowMenu:!Lexicon removeSelector: #categoryList!ChangeSorter removeSelector: #fileOutAllChangeSets!Lexicon removeSelector: #retainMethodSelectionWhileSwitchingToCategory:!Lexicon removeSelector: #removeMessage!Lexicon removeSelector: #okayToAccept!Lexicon removeSelector: #displaySelector:!ChangeSorter removeSelector: #removeFromCategory!ChangeSorter removeSelector: #renameCategory!Lexicon removeSelector: #switchToVocabulary:!Lexicon removeSelector: #startingWindowTitle!Lexicon removeSelector: #newCategoryPane!ChangeSetCategoryWithParameters removeSelector: #acceptsManualAdditions!Lexicon removeSelector: #seeAlso:!Lexicon removeSelector: #chooseVocabulary!Lexicon removeSelector: #chooseLimitClass!ProtocolBrowser removeSelector: #getList!Lexicon removeSelector: #contents!Lexicon removeSelector: #selectedClassOrMetaClass!Lexicon removeSelector: #categoryListIndex:!ProtocolBrowser removeSelector: #growable!ChangeSorter class removeSelector: #initializeChangeSetCategories!Inspector removeSelector: #browseFullProtocol!ChangesOrganizer class removeSelector: #changeSetCategoryNamed:!Lexicon removeSelector: #openOnClass:inWorld:showingSelector:!Lexicon removeSelector: #showQueryResultsCategory!Lexicon removeSelector: #setLocalInstVarDefs!Inspector removeSelector: #spawnFullProtocol!Lexicon removeSelector: #offerMenu!Smalltalk removeClassNamed: #StaticChangeSetCategory!ChangeSorter removeSelector: #removeCategory!ChangeSorter removeSelector: #methodConflictsWithOppositeCategory!Lexicon removeSelector: #chooseCategory:!Lexicon removeSelector: #reformulateCategoryList!Lexicon removeSelector: #navigateToNextMethod!Lexicon removeSelector: #selectorsVisited!Lexicon removeSelector: #categoryWithNameSpecifiedBy:!Lexicon removeSelector: #hasSearchPane!Lexicon removeSelector: #lastSendersSearchSelector!Lexicon removeSelector: #adjustWindowTitle!StaticChangeSetCategory removeSelector: #reconstituteList!ChangeSorter removeSelector: #changeSetCategory!Lexicon removeSelector: #initialLimitClass!ChangeSetCategory removeSelector: #fileOutAllChangeSets!Lexicon removeSelector: #preserveSelectorIfPossibleSurrounding:!InstanceBrowser removeSelector: #startingWindowTitle!ChangeSorter removeSelector: #chooseChangeSetCategory!Lexicon removeSelector: #categoryListKey:from:!Lexicon removeSelector: #selectorsDefiningInstVar!Smalltalk removeClassNamed: #InstanceBrowser!ChangeSorter removeSelector: #setDefaultChangeSetCategory!InstanceBrowser removeSelector: #openOnObject:inWorld:showingSelector:!Lexicon removeSelector: #methodsWithInitials!Lexicon removeSelector: #selectorsReferringToInstVar!Lexicon class removeSelector: #windowColorSpecification!Lexicon removeSelector: #showMethodsWithInitials:!CodeHolder removeSelector: #spawnFullProtocol!Lexicon removeSelector: #showMethodsWithInitials!Inspector removeSelector: #spawnProtocol!Lexicon removeSelector: #seeAlso!Lexicon removeSelector: #reformulateList!InstanceBrowser removeSelector: #offerMenu!Lexicon removeSelector: #categoryListIndex!Lexicon removeSelector: #buildWith:!Lexicon removeSelector: #noteAcceptanceOfCodeFor:!Lexicon class removeSelector: #queryCategoryName!Lexicon removeSelector: #selectorsSendingSelectedSelector!ChangeSetCategoryWithParameters removeSelector: #parameters:!Lexicon removeSelector: #categoriesPane!Lexicon removeSelector: #showMethodsInCurrentChangeSet!Lexicon removeSelector: #navigateToRecentMethod!Lexicon removeSelector: #selectorsReferringToClassVar!Lexicon removeSelector: #addSpecialButtonsTo:with:!Lexicon removeSelector: #navigateToASender!Lexicon removeSelector: #methodsWithInitials:!Lexicon class removeSelector: #sendersCategoryName!ChangeSorter removeSelector: #makeNewCategory!StaticChangeSetCategory removeSelector: #includesChangeSet:!Lexicon removeSelector: #lastSearchString:!Smalltalk removeClassNamed: #ProtocolBrowser!InstanceBrowser removeSelector: #inspectViewee!Lexicon class removeSelector: #allCategoryName!ChangeSetCategoryWithParameters removeSelector: #includesChangeSet:!Lexicon removeSelector: #messageListIndex:!Lexicon removeSelector: #selectWithinCurrentCategoryIfPossible:!Lexicon removeSelector: #obtainNewSearchString!ChangeSetCategory removeSelector: #changeSetList!InstanceBrowser class removeSelector: #windowColorSpecification!Lexicon removeSelector: #showMainCategory!CodeHolder removeSelector: #spawnProtocol!Lexicon removeSelector: #methodListFromSearchString:!Lexicon removeSelector: #wantsAnnotationPane!ChangeSetCategory removeSelector: #membershipSelector:!InstanceBrowser removeSelector: #viewViewee!ChangeSorter removeSelector: #offerCategorySubmenu!Lexicon removeSelector: #selectedCategoryName!ChangesOrganizer initialize!