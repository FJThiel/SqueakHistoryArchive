"Change Set:		8143Tools-ar.142Tools-ar.142:Remove support for isolation layers.Tools-nice.140:clean-up isSelfEvaluatingTools-nice.141:Correct http://code.google.com/p/pharo/issues/detail?id=1425an inspector wouldn't handle a variableSubclass with instance variables correctlyAlso change a ((select:) detect:) construct, to rather use (detect: [and: []])As said in the comment, the code already is ugly enough."!CodeHolder subclass: #Debugger	instanceVariableNames: 'interruptedProcess interruptedController contextStack contextStackTop contextStackIndex contextStackList receiverInspector contextVariablesInspector externalInterrupt proceedValue selectingPC debuggerMap savedCursor errorWasInUIProcess labelString message'	classVariableNames: 'ContextStackKeystrokes ErrorRecursion'	poolDictionaries: ''	category: 'Tools-Debugger'!!ParagraphEditor methodsFor: '*Tools' stamp: 'ar 11/12/2009 01:00'!debug: aCompiledMethod receiver: anObject in: evalContext	| selector guineaPig debugger context |	selector := evalContext isNil ifTrue: [#DoIt] ifFalse: [#DoItIn:].	anObject class addSelectorSilently: selector withMethod: aCompiledMethod.	guineaPig := evalContext isNil		ifTrue: [[anObject DoIt] newProcess]		ifFalse: [[anObject DoItIn: evalContext] newProcess].	context := guineaPig suspendedContext.	debugger := Debugger new		process: guineaPig		controller: ((Smalltalk isMorphic not and: [ScheduledControllers inActiveControllerProcess])				ifTrue: [ScheduledControllers activeController]				ifFalse: [nil])		context: context.	debugger openFullNoSuspendLabel: 'Debug it'.	[debugger interruptedContext method == aCompiledMethod]		whileFalse: [debugger send].	anObject class basicRemoveSelector: selector! !!Debugger methodsFor: 'private' stamp: 'ar 11/12/2009 00:59'!process: aProcess controller: aController context: aContext	super initialize.	Smalltalk at: #MessageTally ifPresentAndInMemory: [:c | c new close].	contents := nil. 	interruptedProcess := aProcess.	interruptedController := aController.	contextStackTop := aContext.	self newStack: (contextStackTop stackOfSize: 1).	contextStackIndex := 1.	externalInterrupt := false.	selectingPC := true.	Smalltalk isMorphic ifTrue:		[errorWasInUIProcess := false]! !!Inspector methodsFor: 'selecting' stamp: 'nice 11/8/2009 15:17'!replaceSelectionValue: anObject 	"The receiver has a list of variables of its inspected object. One of these 	is selected. The value of the selected variable is set to the value, 	anObject."	| basicIndex si instVarIndex |	selectionIndex <= 2 ifTrue: [		self toggleIndex: (si := selectionIndex).  		self toggleIndex: si.		^ object].	instVarIndex := selectionIndex - 2.	instVarIndex > object class instSize		ifFalse: [^ object instVarAt: instVarIndex put: anObject].	object class isVariable or: [self error: 'Cannot replace selection'].	basicIndex := selectionIndex - 2 - object class instSize.	(object basicSize <= (self i1 + self i2)  or: [basicIndex <= self i1])		ifTrue: [^object basicAt: basicIndex put: anObject]		ifFalse: [^object basicAt: object basicSize - (self i1 + self i2) + basicIndex					put: anObject]! !!Debugger class methodsFor: 'instance creation' stamp: 'ar 11/12/2009 00:59'!context: aContext	"Answer an instance of me for debugging the active process starting with the given context."	^ self new		process: Processor activeProcess		controller:			((Smalltalk isMorphic not and: [ScheduledControllers inActiveControllerProcess])				ifTrue: [ScheduledControllers activeController]				ifFalse: [nil])		context: aContext! !!Debugger methodsFor: 'initialize' stamp: 'ar 11/12/2009 00:58'!openNotifierContents: msgString label: label	"Create and schedule a notifier view with the given label and message. A notifier view shows just the message or the first several lines of the stack, with a menu that allows the user to open a full debugger if so desired."	"NOTE: When this method returns, a new process has been scheduled to run the windows, and thus this notifier, but the previous active porcess has not been suspended.  The sender will do this."	| msg builder spec |	Sensor flushKeyboard.	savedCursor := Sensor currentCursor.	Sensor currentCursor: Cursor normal.	(label beginsWith: 'Space is low')		ifTrue: [msg := self lowSpaceChoices, (msgString ifNil: [''])]		ifFalse: [msg := msgString].	builder := ToolBuilder default.	spec := self buildNotifierWith: builder label: label message: msg.	self expandStack.	builder open: spec.	errorWasInUIProcess := Project spawnNewProcessIfThisIsUI: interruptedProcess.! !!Debugger methodsFor: 'private' stamp: 'ar 11/12/2009 00:58'!resumeProcess: aTopView 	Smalltalk isMorphic		ifFalse: [aTopView erase].	savedCursor		ifNotNil: [Sensor currentCursor: savedCursor].	interruptedProcess isTerminated ifFalse: [		Smalltalk isMorphic			ifTrue: [errorWasInUIProcess					ifTrue: [Project resumeProcess: interruptedProcess]					ifFalse: [interruptedProcess resume]]			ifFalse: [ScheduledControllers activeControllerNoTerminate: interruptedController andProcess: interruptedProcess]].	"if old process was terminated, just terminate current one"	interruptedProcess := nil.	"Before delete, so release doesn't terminate it"	Smalltalk isMorphic		ifTrue: [aTopView delete.			World displayWorld]		ifFalse: [aTopView controller closeAndUnscheduleNoErase].	Smalltalk installLowSpaceWatcher.	"restart low space handler"	errorWasInUIProcess == false		ifFalse: [Processor terminateActive]! !!Debugger class methodsFor: 'class initialization' stamp: 'ar 11/12/2009 01:00'!openContext: aContext label: aString contents: contentsStringOrNil	"Open a notifier in response to an error, halt, or notify. A notifier view just shows a short view of the sender stack and provides a menu that lets the user open a full debugger."	<primitive: 19> "Simulation guard"	ErrorRecursion not & Preferences logDebuggerStackToFile ifTrue:		[Smalltalk logError: aString inContext: aContext to: 'SqueakDebug.log'].	ErrorRecursion ifTrue:[		ErrorRecursion := false.		self primitiveError: aString].	ErrorRecursion := true.	self informExistingDebugger: aContext label: aString.	(Debugger context: aContext)		openNotifierContents: contentsStringOrNil		label: aString.	ErrorRecursion := false.	Processor activeProcess suspend.! !!Debugger methodsFor: 'tally support' stamp: 'nice 11/11/2009 19:13'!getTextMorphWithSelection	"This is extremely ugly... We I need to get a reference of the code pane, which is not easily accessible"	^self dependents		detect: [:m| (m isKindOf: PluggableTextMorph)			and: [m selectionInterval first > 1]]		ifNone: [nil]! !Debugger class removeSelector: #context:isolationHead:!Debugger removeSelector: #process:controller:context:isolationHead:!PointerFinder removeSelector: #isSelfEvaluating!Debugger removeSelector: #isolationRecoveryAdvice!