"Change Set:		9687Kernel-nice.424Kernel-nice.424:Cache well known digit values in NumberParser for speed.Testing the base as of previous implementation was not a good idea, because some Unicode characters could have a digitValue < 10."!Object subclass: #NumberParser	instanceVariableNames: 'sourceStream base neg integerPart fractionPart exponent scale nDigits lastNonZero requestor failBlock'	classVariableNames: 'DigitValues'	poolDictionaries: ''	category: 'Kernel-Numbers'!!NumberParser class methodsFor: 'class initialization' stamp: 'nice 3/14/2010 22:38'!initializeDigitValues	"Initialize the well known digit value of ascii characters."		DigitValues := Array new: 256 withAll: -1.	0 to: 255 do: [:i | DigitValues at: i + 1 put: (Character value: i) digitValue]! !!NumberParser class methodsFor: 'class initialization' stamp: 'nice 3/14/2010 22:33'!initialize	self initializeDigitValues.! !!NumberParser methodsFor: 'parsing-large int' stamp: 'nice 3/14/2010 22:44'!nextElementaryLargeIntegerBase: aRadix	"Form an unsigned integer with incoming digits from sourceStream.	Return this integer, or zero if no digits found.	Stop reading if end of digits or if a LargeInteger is formed.	Count the number of digits and the position of lastNonZero digit and store them in instVar"	| value digit code char |	value := 0.	nDigits := 0.	lastNonZero := 0.	DigitValues ifNil: [self class initializeDigitValues].	"Avoid using digitValue which is awfully slow"	[value isLarge or: [(char := sourceStream next) == nil		or: [code := char charCode.			digit := code < 256				ifTrue: [DigitValues at: 1 + code]				ifFalse: [char digitValue].			(0 > digit or: [digit >= aRadix])				and: [sourceStream skip: -1.					true]]]]		whileFalse: [			nDigits := nDigits + 1.			0 = digit				ifFalse: [lastNonZero := nDigits].			value := value * aRadix + digit].	^value! !NumberParser initialize!