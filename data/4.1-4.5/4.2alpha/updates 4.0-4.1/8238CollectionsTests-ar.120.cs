"Change Set:		8238CollectionsTests-ar.120CollectionsTests-ar.120:Merging CollectionsTests-ul.119:- new test for HashedCollection sizingCollectionsTests-ul.115:- added a new class: WeakSetTest with a test: #testIncludes which (besides the common inclusion testing) demonstrates a bug in WeakSet >> #includes:CollectionsTests-ar.116:Updated tests for ifEmpty: / ifNotEmpty:.CollectionsTests-dtl.117:Add tests to document current behavior of String>>beginsWith: and String>>endsWith:Other dialects (VW) may treat these differently for empty strings, e.g.:'abc' beginsWith: '''abc' endsWith: ''CollectionsTests-ul.119:- new test for HashedCollection sizingCollectionsTests-ul.118:- added a test for String >> #withInternetLineEndings"!ClassTestCase subclass: #WeakSetTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CollectionsTests-Weak'!TestCase subclass: #HashedCollectionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CollectionsTests-Abstract'!!WeakSetTest methodsFor: 'as yet unclassified' stamp: 'ul 11/20/2009 22:53'!testIncludes	| weakSet transientFakeNilObject |	weakSet := WeakSet new.	#(true nil 1) do: [ :each |		self deny: (weakSet includes: each) ].	weakSet add: true.	self assert: (weakSet includes: true).	weakSet remove: true.	self deny: (weakSet includes: true).	transientFakeNilObject := ((1 to: 1000) detect: [ :each | each asString hash - nil hash \\ weakSet capacity = 0 ]) asString. "this string will occupy the same slot as nil would"	weakSet add: transientFakeNilObject.	transientFakeNilObject := transientFakeNilObject copy.	Smalltalk garbageCollect. "get rid of transientFakeNilObject"	self deny: (weakSet includes: transientFakeNilObject).	self deny: (weakSet includes: nil)			! !!StringTest methodsFor: 'testing - internet' stamp: 'ul 11/23/2009 14:39'!testWithInternetLineEndings	{		'abc' -> 'abc'.		'abc', String cr -> ('abc', String crlf).		'abc', String lf -> ('abc', String crlf).		'abc', String crlf -> ('abc', String crlf).		String cr, 'abc' -> (String crlf, 'abc').		String lf, 'abc' -> (String crlf, 'abc').		String crlf, 'abc' -> (String crlf, 'abc').		'abc', String cr, String cr, 'abc' -> ('abc', String crlf, String crlf, 'abc').		'abc', String lf, String lf, 'abc' -> ('abc', String crlf, String crlf, 'abc').		'abc', String crlf, String crlf, 'abc' -> ('abc', String crlf, String crlf, 'abc').		String cr, 'abc', String cr, String crlf, 'abc', String lf -> (String crlf, 'abc', String crlf, String crlf, 'abc', String crlf).		String lf, 'abc', String lf, String crlf, 'abc', String cr -> (String crlf, 'abc', String crlf, String crlf, 'abc', String crlf).	} do: [ :each |		self assert: each key withInternetLineEndings = each value ]! !!StringTest methodsFor: 'tests - finding' stamp: 'dtl 11/21/2009 15:55'!testEndsWith	self assert: ('Elvis' endsWith: 'vis').	self assert: ('Elvis' endsWith: 'Elvis').	self assert: ('Elvis' endsWith: 's').	self deny: ('Elvis' endsWith: 'S').	self deny: ('Elvis' endsWith: ' Elvis').	self deny: ('' endsWith: '').	self deny: ('abc' endsWith: '')! !!HashedCollectionTest methodsFor: 'test - class - sizing' stamp: 'ul 11/25/2009 03:49'!testGoodPrimes	| primes |	primes := HashedCollection goodPrimes.	self assert: primes isSorted.	primes do: [ :each | self assert: each isPrime ].	self assert: (		primes select: [ :p |			| result |			result := false.			p > 2069 ifTrue: [			1 to: 8 do: [ :k |				1 to: 32 do: [ :a |					(p gcd: (256 raisedTo: k) + a) = 1 ifFalse: [						result := true ].					(p gcd: (256 raisedTo: k) - a) = 1 ifFalse: [						result := true ] ] ] ].			result ]) isEmpty.! !!HashedCollectionTest methodsFor: 'test - class - sizing' stamp: 'ul 11/25/2009 04:23'!testSizeFor	#(		0 1 5 10 30 57 89 578 1234 1912 2411 2591 5627 7849		10999 61356 68602 73189 79868 86789 239984 239985 501175 661865 841558		9669391 15207345 19827345 23469817 27858432 65223175 106650047		157687845 190892299 234947087 264782114 269617510 270995400 		392236508 456647275 468699153 606865011 606997796 617927086		837938371 880614337 989233852 1000473294 1060034095) do: [ :each |			| size |			size := HashedCollection sizeFor: each.			size <= HashedCollection goodPrimes last ifTrue: [				self assert: size isPrime ].			self assert: size odd.			self assert: size * 3 // 4 >= each ]! !!StringTest methodsFor: 'tests - finding' stamp: 'dtl 11/21/2009 15:57'!testBeginsWith	self assert: ('Elvis' beginsWith: 'Elv').	self assert: ('Elvis' beginsWith: 'Elvis').	self assert: ('Elvis' beginsWith: 'E').	self deny: ('Elvis' beginsWith: 'e').	self deny: ('Elvis' beginsWith: 'Elvis ').	self deny: ('' beginsWith: '').	self deny: ('abc' beginsWith: '')! !!HashedCollectionTest methodsFor: 'test - class - sizing' stamp: 'ul 11/25/2009 03:55'!testGoodPrimeAtLeast	| primes |	primes := HashedCollection goodPrimes.	primes do: [ :each |		self assert: (HashedCollection goodPrimeAtLeast: each) = each.		self assert: (HashedCollection goodPrimeAtLeast: each - 1) = each.		self assert: (HashedCollection goodPrimeAtLeast: each + 1) > each ].	(0 to: 1000) do: [ :each |		| goodPrime |		goodPrime := HashedCollection goodPrimeAtLeast: each.		self assert: goodPrime isPrime.		self assert: goodPrime >= each.		self assert: (primes detect: [ :ea | ea >= each ] ifNone: [ each + 1 ]) = goodPrime ].	self assert: (HashedCollection goodPrimeAtLeast: primes last + 1) odd! !!CollectionTest methodsFor: 'tests' stamp: 'ar 11/21/2009 00:58'!testIfNotEmpty	empty ifNotEmpty: [self assert: false].	self assert: (nonEmpty ifNotEmpty: [self]) == self.	self assert: (nonEmpty ifNotEmpty: [:s | s first]) = #x.	self assert: (empty ifNotEmpty: [self]) == empty.! !!CollectionTest methodsFor: 'tests' stamp: 'ar 11/21/2009 01:00'!testIfEmpty	nonEmpty ifEmpty: [self assert: false].	self assert: (empty ifEmpty: [self]) == self.	self assert: (nonEmpty ifEmpty: [self]) == nonEmpty.! !