"Change Set:		9429KernelTests-ul.141KernelTests-ul.141:- tests for the #cull: protocollKernelTests-nice.140:Change the expectations to reflect current implementation:1) '1.0e+14' asNumber -> 1.0e142) '123.' asNumber -> 123.0"!TestCase subclass: #BlockClosureTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'KernelTests-Methods'!!IntegerTest methodsFor: 'tests - instance creation' stamp: 'nice 2/22/2010 22:15'!testReadFrom	"Ensure remaining characters in a stream are not lost when parsing an integer."	| rs i s |	rs := ReadStream on: '123s could be confused with a ScaledDecimal'.	i := Number readFrom: rs.	self assert: i == 123.	s := rs upToEnd.	self assert: 's could be confused with a ScaledDecimal' = s.		rs := ReadStream on: '123.s could be confused with a ScaledDecimal'.	i := Number readFrom: rs.	self assert: i = 123.0.	s := rs upToEnd.	self assert: 's could be confused with a ScaledDecimal' = s! !!BlockClosureTest methodsFor: 'tests - evaluating' stamp: 'ul 2/21/2010 16:55'!testCullCull	self shouldnt: [ [ ] cull: 1 cull: 2 ] raise: Error.	self shouldnt: [ [ :x | ] cull: 1 cull: 2 ] raise: Error.	self shouldnt: [ [ :x :y | ] cull: 1 cull: 2 ] raise: Error.	self should: [ [ :x :y :z | ] cull: 1 cull: 2 ] raise: Error.	self should: [ [ :x :y :z :a | ] cull: 1 cull: 2 ] raise: Error.	self should: [ [ :x :y :z :a :b | ] cull: 1 cull: 2 ] raise: Error.	self assert: ([ 0 ] cull: 1 cull: 2) = 0.	self assert: ([ :x | x ] cull: 1 cull: 2) = 1.	self assert: ([ :x :y | y ] cull: 1 cull: 2) = 2.	! !!NumberParsingTest methodsFor: 'tests - Float' stamp: 'nice 2/22/2010 22:17'!testFloatFromStringWithExponent	"This covers parsing in Number>>readFrom:"	| aFloat |	aFloat := '1.0e-14' asNumber.	self assert: 1.0e-14 = aFloat.	aFloat := '1.0e-14 1' asNumber.	self assert: 1.0e-14 = aFloat.	aFloat := '1.0e-14e' asNumber.	self assert: 1.0e-14 = aFloat.	aFloat := '1.0e14e' asNumber.	self assert: 1.0e14 = aFloat.	aFloat := '1.0e+14e' asNumber. "Plus sign is parseable too"	self assert: 1.0e14 = aFloat.! !!BlockClosureTest methodsFor: 'tests - evaluating' stamp: 'ul 2/21/2010 17:03'!testCullCullCullCull	self shouldnt: [ [ ] cull: 1 cull: 2 cull: 3 cull: 4 ] raise: Error.	self shouldnt: [ [ :x | ] cull: 1 cull: 2 cull: 3 cull: 4 ] raise: Error.	self shouldnt: [ [ :x :y | ] cull: 1 cull: 2 cull: 3 cull: 4 ] raise: Error.	self shouldnt: [ [ :x :y :z | ] cull: 1 cull: 2 cull: 3 cull: 4 ] raise: Error.	self shouldnt: [ [ :x :y :z :a | ] cull: 1 cull: 2 cull: 3 cull: 4 ] raise: Error.	self should: [ [ :x :y :z :a :b | ] cull: 1 cull: 2 cull: 3 cull: 4 ] raise: Error.	self assert: ([ 0 ] cull: 1 cull: 2 cull: 3 cull: 4) = 0.	self assert: ([ :x | x ] cull: 1 cull: 2 cull: 3 cull: 4) = 1.	self assert: ([ :x :y | y ] cull: 1 cull: 2 cull: 3 cull: 4) = 2.	self assert: ([ :x :y :z | z ] cull: 1 cull: 2 cull: 3 cull: 4) = 3.	self assert: ([ :x :y :z :a | a ] cull: 1 cull: 2 cull: 3 cull: 4) = 4.! !!IntegerTest methodsFor: 'tests - instance creation' stamp: 'nice 2/22/2010 22:19'!testStringAsNumber	"This covers parsing in Number>>readFrom:	Trailing decimal points should be ignored."	self assert: ('123' asNumber == 123).	self assert: ('-123' asNumber == -123).	self assert: ('123.' asNumber = 123).	self assert: ('123.' asNumber) isFloat.	self assert: ('-123.' asNumber = -123).	self assert: ('-123.' asNumber) isFloat.	self assert: ('123This is not to be read' asNumber == 123).	self assert: ('123s could be confused with a ScaledDecimal' asNumber == 123).	self assert: ('123e could be confused with a Float' asNumber == 123).! !!BlockClosureTest methodsFor: 'tests - evaluating' stamp: 'ul 2/21/2010 17:02'!testCullCullCull	self shouldnt: [ [ ] cull: 1 cull: 2 cull: 3 ] raise: Error.	self shouldnt: [ [ :x | ] cull: 1 cull: 2 cull: 3 ] raise: Error.	self shouldnt: [ [ :x :y | ] cull: 1 cull: 2 cull: 3 ] raise: Error.	self shouldnt: [ [ :x :y :z | ] cull: 1 cull: 2 cull: 3 ] raise: Error.	self should: [ [ :x :y :z :a | ] cull: 1 cull: 2 cull: 3 ] raise: Error.	self should: [ [ :x :y :z :a :b | ] cull: 1 cull: 2 cull: 3 ] raise: Error.	self assert: ([ 0 ] cull: 1 cull: 2 cull: 3) = 0.	self assert: ([ :x | x ] cull: 1 cull: 2 cull: 3) = 1.	self assert: ([ :x :y | y ] cull: 1 cull: 2 cull: 3) = 2.	self assert: ([ :x :y :z | z ] cull: 1 cull: 2 cull: 3) = 3.	! !!NumberParsingTest methodsFor: 'tests - Integer' stamp: 'nice 2/22/2010 22:19'!testIntegerReadFrom	"Ensure remaining characters in a stream are not lost when parsing an integer."	| rs i s |	rs := ReadStream on: '123s could be confused with a ScaledDecimal'.	i := Number readFrom: rs.	self assert: i == 123.	s := rs upToEnd.	self assert: 's could be confused with a ScaledDecimal' = s.	rs := ReadStream on: '123.s could be confused with a ScaledDecimal'.	i := Number readFrom: rs.	self assert: i = 123.	s := rs upToEnd.	self assert: 's could be confused with a ScaledDecimal' = s.	rs := ReadStream on: '123sA has unary message sA'.	i := Number readFrom: rs.	self assert: i == 123.	s := rs upToEnd.	self assert: 'sA has unary message sA' = s.		rs := ReadStream on: '123sB has unary message sB'.	i := Number readFrom: rs.	self assert: i == 123.	s := rs upToEnd.	self assert: 'sB has unary message sB' = s.! !!NumberParsingTest methodsFor: 'tests - Integer' stamp: 'nice 2/22/2010 22:18'!testIntegerFromString	"This covers parsing in Number>>readFrom:	Trailing decimal points should be ignored."	self assert: ('123' asNumber == 123).	self assert: ('-123' asNumber == -123).	self assert: ('123.' asNumber = 123).	self assert: ('123.' asNumber) isFloat.	self assert: ('-123.' asNumber = -123).	self assert: ('-123.' asNumber) isFloat.	self assert: ('123This is not to be read' asNumber == 123).	self assert: ('123s could be confused with a ScaledDecimal' asNumber == 123).	self assert: ('123e could be confused with a Float' asNumber == 123).! !!BlockClosureTest methodsFor: 'tests - evaluating' stamp: 'ul 2/21/2010 17:02'!testCull	self shouldnt: [ [ ] cull: 1 ] raise: Error.	self shouldnt: [ [ :x | ] cull: 1 ] raise: Error.	self should: [ [ :x :y | ] cull: 1 ] raise: Error.	self should: [ [ :x :y :z | ] cull: 1 ] raise: Error.	self should: [ [ :x :y :z :a | ] cull: 1 ] raise: Error.	self should: [ [ :x :y :z :a :b | ] cull: 1 ] raise: Error.	self assert: ([ 0 ] cull: 1) = 0.	self assert: ([ :x | x ] cull: 1) = 1	! !!NumberParsingTest methodsFor: 'tests - Float' stamp: 'nice 2/22/2010 22:17'!testFloatFromStreamWithExponent	"This covers parsing in Number>>readFrom:"	| rs aFloat |	rs := '1.0e-14' readStream.	aFloat := Number readFrom: rs.	self assert: 1.0e-14 = aFloat.	self assert: rs atEnd.	rs := '1.0e-14 1' readStream.	aFloat := Number readFrom: rs.	self assert: 1.0e-14 = aFloat.	self assert: rs upToEnd = ' 1'.	rs := '1.0e-14eee' readStream.	aFloat := Number readFrom: rs.	self assert: 1.0e-14 = aFloat.	self assert: rs upToEnd = 'eee'.	rs := '1.0e14e10' readStream.	aFloat := Number readFrom: rs.	self assert: 1.0e14 = aFloat.	self assert: rs upToEnd = 'e10'.	rs := '1.0e+14e' readStream. "Plus sign is parseable too"	aFloat := Number readFrom: rs.	self assert: 1.0e14 = aFloat.	self assert: rs upToEnd = 'e'.	rs := '1.0e' readStream.	aFloat := Number readFrom: rs.	self assert: 1.0 = aFloat.	self assert: rs upToEnd = 'e'.! !