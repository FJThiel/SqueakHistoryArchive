"Change Set:		9441CollectionsTests-ul.149CollectionsTests-ul.149:- added a new test for WeakRegistry to test multiple finalizers per objectCollectionsTests-ul.146:- mergedCollectionsTests-ar.147:Document an ancient bug in RunArray class>>scanFrom:."!ClassTestCase subclass: #ByteArrayTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CollectionsTests-Arrayed'!!ByteArrayTest methodsFor: 'hex tests' stamp: 'ar 2/23/2010 07:16'!testHex	self assert: #[122 43 213 7] hex = '7a2bd507'.	self assert: (UUID fromString: '97c1f2dd-f920-9948-b329-319a30c16386') hex					= '97c1f2ddf9209948b329319a30c16386'.! !!WeakRegistryTest methodsFor: 'tests' stamp: 'ul 2/26/2010 13:59'!testFinalizationWithMultipleFinalizersPerObject	| object registry counter |	registry := WeakRegistry new.	object := Object new.	counter := 0.	5 timesRepeat: [		registry add: object executor: (ObjectFinalizer			receiver: [ counter := counter + 1 ]			selector: #value) ].	self assert: registry size = 1.	object := nil. 	Smalltalk garbageCollect.	registry finalizeValues.	self assert: registry isEmpty.	self assert: counter = 5! !!WeakRegistryTest methodsFor: 'tests' stamp: 'ul 2/26/2010 14:46'!testRemovingDoesntLeak	| w finalized block hash object executor |	w := WeakRegistry new: 1.	finalized := false.	block := [ :v | finalized := v ].	object := Object new.	executor := ObjectFinalizer		receiver: block		selector: #value:		argument: true.	hash := object hash.	w add: hash.	w add: object executor: executor.	object := nil. "let it go"	w remove: hash.	Smalltalk garbageCollect. "finalize it"	self assert: w isEmpty.	self assert: finalized! !!WeakRegistryTest methodsFor: 'tests' stamp: 'ul 2/26/2010 14:50'!testRemovingByAHighPriorityProcessDoesntLeak	| w finalized block hash object executor semaphore |	w := WeakRegistry new: 1.	finalized := false.	block := [ :v | finalized := v ].	object := Object new.	executor := ObjectFinalizer		receiver: block		selector: #value:		argument: true.	hash := object hash.	w add: hash.	w add: object executor: executor.	semaphore := Semaphore new.	[ 		object := nil. "let it go"		w remove: hash.		semaphore signal ] 			forkAt: WeakArray runningFinalizationProcess priority + 1.	semaphore wait.	Smalltalk garbageCollect. "finalize it"	self assert: w isEmpty.	self assert: finalized! !!WeakRegistryTest methodsFor: 'tests' stamp: 'ul 2/26/2010 14:50'!testGrowingByAHighPriorityProcessDoesntLeak	| w finalized block object executor semaphore |	w := WeakRegistry new: 1.	finalized := false.	block := [ :v | finalized := v ].	object := Object new.	executor := ObjectFinalizer		receiver: block		selector: #value:		argument: true.	w add: object executor: executor.	semaphore := Semaphore new.	[ 		object := nil. "let it go"		w addAll: (1 to: 1000). "force growing"		semaphore signal ] 			forkAt: WeakArray runningFinalizationProcess priority + 1.	semaphore wait.	Smalltalk garbageCollect. "finalize it"	self assert: w size = 1000.	self assert: finalized! !!ByteArrayTest methodsFor: 'hex tests' stamp: 'ar 2/23/2010 07:15'!testReadHexFrom	self assert: (ByteArray readHexFrom: '7a2bd507') = #[122 43 213 7].	self assert: (UUID readHexFrom: '97c1f2ddf9209948b329319a30c16386')					= (UUID fromString: '97c1f2dd-f920-9948-b329-319a30c16386').! !!WeakRegistryTest methodsFor: 'tests' stamp: 'ul 2/26/2010 14:51'!testFinalization	| w finalized block object |	w := WeakRegistry new: 1.	finalized := false.	block := [ :v | finalized := v ].	object := ObjectFinalizer "an object that responds to #finalize"		receiver: block		selector: #value:		argument: true.	w add: object.	object := nil. "let it go"	Smalltalk garbageCollect. "finalize it"	self assert: w isEmpty.	self assert: finalized! !!RunArrayTest methodsFor: 'tests - instance creation' stamp: 'ar 2/24/2010 18:05'!testScanFromTrailer	"This test documents an ancient bug in RunArray class>>scanFrom:."	self assert: (RunArray scanFrom: '(8 4 5),b,!!' readStream) = 		(RunArray runs: #(8 4 5) values: { {}. {TextEmphasis bold}. {} }).! !!WeakRegistryTest methodsFor: 'tests' stamp: 'ul 2/26/2010 14:50'!testGrowingDoesntLeak	| w finalized block object executor |	w := WeakRegistry new: 1.	finalized := false.	block := [ :v | finalized := v ].	object := Object new.	executor := ObjectFinalizer		receiver: block		selector: #value:		argument: true.	w add: object executor: executor.	object := nil. "let it go"	w addAll: (1 to: 1000). "force growing"	Smalltalk garbageCollect. "finalize it"	self assert: w size = 1000.	self assert: finalized! !