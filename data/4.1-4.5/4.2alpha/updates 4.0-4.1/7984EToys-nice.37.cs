"Change Set:		7984EToys-nice.37EToys-nice.37:Track selectors usage, use #includesSelector: #selectorsDo: and #includesKey: where dueEToys-nice.36:Use #fasterKeysand correct a bug in#includesSelector:forInstance:ofClass:limitClass:Observe the old code:What you see, in the second loop:	theKeys collect: [anInstVarNames | Utilities setterSelectorFor: anInstVarName]Is not what you get, because at this stage, keys contains the (Utilities getterSelectorFor: anInstVarName), that is #getFoo for anInstVarName #fooSo the second loop did collect #setGetFoo: ...I didn't try it, but that's how I read it."!!EToyVocabulary methodsFor: 'initialization' stamp: 'nice 10/19/2009 22:49'!includesSelector: aSelector forInstance: anInstance ofClass: aTargetClass limitClass: mostGenericClass	"Answer whether the vocabulary includes the given selector for the given class (and instance, if provided), only considering method implementations in mostGenericClass and lower"	| classToUse aClass |	(aTargetClass isUniClass and:		[(aTargetClass namedTileScriptSelectors includes: aSelector) or:			[aTargetClass slotInfo fasterKeys anySatisfy:				[:anInstVarName | (Utilities getterSelectorFor: anInstVarName) = aSelector or: [(Utilities setterSelectorFor: anInstVarName) = aSelector]]]])					 ifTrue: [^ true].	(methodInterfaces includesKey: aSelector) ifFalse: [^ false].	classToUse := self classToUseFromInstance: anInstance ofClass: aTargetClass.	^ (aClass := classToUse whichClassIncludesSelector: aSelector)		ifNil:			[false]		ifNotNil:			[aClass includesBehavior: mostGenericClass]! !!ButtonProperties methodsFor: 'events' stamp: 'nice 10/20/2009 20:55'!editButtonsScript: evt	"The user has touched my Scriptor halo-handle.  Bring up a Scriptor on the script of the button."	| cardsPasteUp cardsPlayer anEditor scriptSelector |	cardsPasteUp := self pasteUpMorph.	(cardsPlayer := cardsPasteUp assuredPlayer) assureUniClass.	scriptSelector := self figureOutScriptSelector.	scriptSelector ifNil: [		scriptSelector := cardsPasteUp scriptSelectorToTriggerFor: self.		anEditor := cardsPlayer newTextualScriptorFor: scriptSelector.		evt hand attachMorph: anEditor.		^self	].	(cardsPlayer class includesSelector: scriptSelector) ifTrue: [		anEditor := cardsPlayer scriptEditorFor: scriptSelector.		evt hand attachMorph: anEditor.		^self	].	"Method somehow got removed; I guess we start aftresh"	scriptSelector := nil.	^ self editButtonsScript! !!StandardScriptingSystem methodsFor: '*eToys-customevents-custom events' stamp: 'nice 10/19/2009 22:28'!globalCustomEventNames	^self customEventsRegistry fasterKeys sort! !!KedamaSequenceExecutionStub methodsFor: 'method management' stamp: 'nice 10/19/2009 22:14'!compileAllAccessors	turtles info fasterKeys do: [:k |		(#(who x y heading color visible normal) includes: k) ifFalse: [			self compileScalarInstVarAccessorsFor: k.		].	].! !!EToyVocabulary methodsFor: 'method list' stamp: 'nice 10/19/2009 22:04'!allMethodsInCategory: aCategoryName forInstance: anObject ofClass: aClass	"Answer a list of all methods in the etoy interface which are in the given category, on behalf of anObject, or if it is nil, aClass"	| aCategory unfiltered suitableSelectors isAll |	aCategoryName ifNil: [^ OrderedCollection new].	aClass isUniClass ifTrue:		[aCategoryName = ScriptingSystem nameForScriptsCategory ifTrue:			[^ aClass namedTileScriptSelectors].		aCategoryName = ScriptingSystem nameForInstanceVariablesCategory ifTrue:			[^ aClass slotInfo fasterKeys sort collect:				[:anInstVarName | Utilities getterSelectorFor: anInstVarName]]].	unfiltered := (isAll := aCategoryName = self allCategoryName)		ifTrue:			[methodInterfaces collect: [:anInterface | anInterface selector]]		ifFalse:			[aCategory := categories detect: [:cat | cat categoryName = aCategoryName] 							ifNone: [^ OrderedCollection new].			aCategory elementsInOrder collect: [:anElement | anElement selector]].	(anObject isKindOf: Player) ifTrue:		[suitableSelectors := anObject costume selectorsForViewer.		unfiltered := unfiltered  select:			[:aSelector | suitableSelectors includes: aSelector]].	(isAll and: [aClass isUniClass]) ifTrue:		[unfiltered addAll: aClass namedTileScriptSelectors.		unfiltered addAll: (aClass slotInfo fasterKeys sort collect:			[:anInstVarName | Utilities getterSelectorFor: anInstVarName])].	^ (unfiltered copyWithoutAll: #(dummy unused)) asSortedArray! !!ScriptableButton methodsFor: 'script' stamp: 'nice 10/20/2009 21:03'!editButtonsScript	"The user has touched my Scriptor halo-handle.  Bring up a Scriptor on the script of the button."	| cardsPasteUp cardsPlayer anEditor |	cardsPasteUp := self pasteUpMorph.	(cardsPlayer := cardsPasteUp assuredPlayer) assureUniClass.	anEditor := scriptSelector ifNil: 					[scriptSelector := cardsPasteUp scriptSelectorToTriggerFor: self.					cardsPlayer newTextualScriptorFor: scriptSelector.					cardsPlayer scriptEditorFor: scriptSelector					]				ifNotNil: 					[(cardsPlayer class includesSelector: scriptSelector) 						ifTrue: [cardsPlayer scriptEditorFor: scriptSelector]						ifFalse: 							["Method somehow got removed; I guess we start afresh"							scriptSelector := nil.							^self editButtonsScript]].	anEditor showingMethodPane ifTrue: [anEditor toggleWhetherShowingTiles].	self currentHand attachMorph: anEditor! !!Player methodsFor: 'scripts-kernel' stamp: 'nice 10/20/2009 21:00'!newTextualScriptorFor: aSelector	"Sprout a scriptor for aSelector, opening up in textual mode.  Rather special-purpose, consult my lone sender"	| aMethodWithInterface aScriptEditor |	(self class includesSelector: aSelector) ifTrue: [self error: 'selector already exists'].	aMethodWithInterface := self class permanentUserScriptFor: aSelector player: self.	aScriptEditor := aMethodWithInterface instantiatedScriptEditorForPlayer: self.	aScriptEditor install.	aScriptEditor showSourceInScriptor.	aMethodWithInterface selector numArgs == 0 ifTrue:		[self class allSubInstancesDo: [:anInst | anInst scriptInstantiationForSelector: aMethodWithInterface selector]].		"The above assures the presence of a ScriptInstantiation for the new selector in all siblings"	self updateAllViewersAndForceToShow: #scripts.	^ aScriptEditor! !!KedamaMorph methodsFor: 'turtles' stamp: 'nice 10/20/2009 20:14'!makeTurtles: count examplerPlayer: tp color: c ofPrototype: prototype turtles: turtles randomize: randomizeFlag	| array inst |	array := tp turtles.	(turtlesDict includesKey: tp) ifFalse: [		self addToTurtleDisplayList: tp.		turtlesDict at: tp put: (array := turtles).	].	inst := prototype ifNil: [self makePrototypeOfExampler: tp color: c].	turtlesDictSemaphore critical: [array setTurtlesCount: count prototype: inst for: self randomize: randomizeFlag].	self calcTurtlesCount.	self changed.! !!SyntaxMorph class methodsFor: 'as yet unclassified' stamp: 'nice 10/20/2009 21:03'!testAll	| source tree total count systNav|"SyntaxMorph testAll"	systNav := self systemNavigation.	count := total := 0.	systNav allBehaviorsDo: [ :aClass | total := total + 1].'Testing all behaviors'	displayProgressAt: Sensor cursorPoint	from: 0 to: total	during: [ :bar |		systNav allBehaviorsDo: [ :aClass |			bar value: (count := count + 1).			aClass selectorsDo: [ :aSelector |				source := (aClass compiledMethodAt: aSelector) getSourceFromFile.				tree := Compiler new 					parse: source 					in: aClass 					notifying: nil.				tree asMorphicSyntaxUsing: SyntaxMorph.			].		].	].! !!KedamaTurtleVectorPlayer methodsFor: 'player protocol' stamp: 'nice 10/19/2009 22:14'!compileAllAccessors	info fasterKeys do: [:k |		(#(who x y heading color visible) includes: k) ifFalse: [			self compileVectorInstVarAccessorsFor: k.		].	].! !!PasteUpMorph methodsFor: '*eToys-customevents-scripting' stamp: 'nice 10/19/2009 22:20'!userCustomEventNames	| reg |	reg := self valueOfProperty: #userCustomEventsRegistry ifAbsent: [ ^#() ].	^reg fasterKeys sort! !