"Change Set:		9819Morphic-ar.397Morphic-ar.397:Merging Morphic-cbr.392:I find it irksome that we have two help menus (one in the main docking bar, one in the world menu.) I also find it irksome that there's so much stuff in the help menu that's in the world menu that's not really help-related.I moved the stuff that's actually help (except for 'world menu help' which really isn't that helpful) out of the world menu and into the docking bar. I took everything else that wasn't already exposed somewhere and put it in the Extras menu on the docking bar.I moved telemorphic up to the top of the world menu because I don't know what it's for, because it pops a submenu that wants self to be an instance of TheWorldMenu, and because I didn't really care to mess with transplanting it.Morphic-tfel.396:SystemWindowWithButton needs to adjust the button position if the menu button is on the right"!!SystemWindowWithButton methodsFor: 'label' stamp: 'sw 2/15/1999 22:41'!buttonInTitle: aButton	buttonInTitle := aButton.	self addMorphFront: aButton! !!SystemWindowWithButton class methodsFor: 'preferences' stamp: 'tfel 3/27/2010 12:36'!hideExpandButton	^ true! !!TheWorldMenu methodsFor: 'construction' stamp: 'cbr 3/26/2010 01:26'!buildWorldMenu	"Build the menu that is put up when the screen-desktop is clicked on"	| menu |	menu := MenuMorph new defaultTarget: self.	menu commandKeyHandler: self.	self colorForDebugging: menu.	menu addStayUpItem.	self makeConvenient: menu.	Smalltalk at: #ServiceGUI ifPresent:[:sgui|		sgui worldMenu: menu.		sgui onlyServices ifTrue: [^ menu].	].	self addProjectEntries: menu.	myWorld addUndoItemsTo: menu.	self addRestoreDisplay: menu.	self addUtilities: menu.	self addObjectsAndTools: menu.	self addPrintAndDebug: menu.	self addSaveAndQuit: menu.	^ menu! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'cbr 3/26/2010 00:53'!extrasMenuOn: aDockingBar 	aDockingBar addItem: [ :it|		it 	contents: 'Extras' translated;			addSubMenu: [:menu|				menu addItem:[:item|					item						contents: 'Recover Changes' translated;						help: 'Recover changes after a crash' translated;						icon: MenuIcons smallHelpIcon;						target: ChangeList;						selector: #browseRecentLog].				menu addLine.				menu addItem:[:item|					item						contents: 'Window Colors' translated;						help: 'Changes the window color scheme' translated;						addSubMenu:[:submenu| self windowColorsOn: submenu]].				menu addItem:[:item|					item						contents: 'Set Author Initials' translated;						help: 'Sets the author initials' translated;						target: Utilities;						selector: #setAuthorInitials].				menu addItem:[:item|					item						contents: 'Restore Display (r)' translated;						help: 'Redraws the entire display' translated;						target: World;						selector: #restoreMorphicDisplay].				menu addItem:[:item|					item						contents: 'Rebuild Menus' translated;						help: 'Rebuilds the menu bar' translated;						target: TheWorldMainDockingBar;						selector: #updateInstances].				menu addLine.				menu addItem:[:item|					item						contents: 'Start Profiler' translated;						help: 'Starts the profiler' translated;						target: self;						selector: #startMessageTally].				menu addItem:[:item|					item						contents: 'Collect Garbage' translated;						help: 'Run the garbage collector and report space usage' translated;						target: Utilities;						selector: #garbageCollectAndReport].				menu addItem:[:item|					item						contents: 'Purge Undo Records' translated;						help: 'Save space by removing all the undo information remembered in all projects' translated;						target: CommandHistory;						selector: #resetAllHistory].				menu addItem:[:item|					item						contents: 'VM statistics' translated;						help: 'Virtual Machine information' translated;						target: self;						selector: #vmStatistics].				menu addLine.				menu addItem:[:item|					item						contents: 'Graphical Imports' translated;						help: 'View the global repository called ImageImports; you can easily import external graphics into ImageImports via the FileList' translated;						target: (Imports default);						selector: #viewImages].				menu addItem:[:item|					item						contents: 'Standard Graphics Library' translated;						help: 'Lets you view and change the system''s standard library of graphics' translated;						target: ScriptingSystem;						selector: #inspectFormDictionary].				menu addItem:[:item|					item						contents: 'Annotation Setup' translated;						help: 'Click here to get a little window that will allow you to specify which types of annotations, in which order, you wish to see in the annotation panes of browsers and other tools' translated;						target: Preferences;						selector: #editAnnotations].			] ]! !!SystemWindowWithButton methodsFor: 'geometry' stamp: 'tfel 3/27/2010 13:22'!adjustExtraButton	| leftMargin |	buttonInTitle ifNil: [^ self].	leftMargin := self boxExtent x + 3.	self class moveMenuButtonRight ifTrue: [leftMargin := leftMargin * 2].	buttonInTitle align: buttonInTitle topRight with: self innerBounds topRight - (leftMargin@0)! !!TheWorldMenu methodsFor: 'construction' stamp: 'cbr 3/26/2010 00:57'!addUtilities: menu	Preferences simpleMenus ifFalse: [		self			fillIn: menu			from: {				{ 'open...'. { self. #openWindow } }.				{ 'windows...'. { self. #windowsDo } }.				{ 'changes...'. { self. #changesDo } }			} ].	self		fillIn: menu		from: {"			{ 'help...'. { self. #helpDo }. 'puts up a menu of useful items for updating the system, determining what version you are running, and much else' }."			{ 'appearance...'. { self. #appearanceDo }. 'put up a menu offering many controls over appearance.' }		}.	Preferences simpleMenus ifFalse: [		self			fillIn: menu			from: {				{ 'do...'. { Utilities. #offerCommonRequests }. 'put up an editible list of convenient expressions, and evaluate the one selected.' }			} ]! !!TheWorldMainDockingBar methodsFor: 'construction' stamp: 'cbr 3/26/2010 00:02'!helpMenuOn: aDockingBar	aDockingBar addItem: [ :it |		it	contents: 'Help' translated;			addSubMenu: [ :menu |  'Todo'.				menu addItem:[:item|					item						contents: 'Online Resources' translated;						help: 'Online resources for Squeak' translated;						target: self;						selector: #showSqueakResources ].				menu addItem:[:item|					item						contents: 'Keyboard Shortcuts' translated;						help: 'Keyboard bindings used in Squeak' translated;						target: Utilities;						selector: #openCommandKeyHelp ].				menu addItem:[:item|					item						contents: 'Font Size Summary' translated;						help: 'Font size summary from the old Squeak 3.10.2 help menu.' translated;						target: TextStyle;						selector: #fontSizeSummary ].				menu addItem:[:item|					item						contents: 'Useful Expressions' translated;						help: 'Useful expressions from the old Squeak 3.10.2 help menu.' translated;						target: Utilities;						selector: #openStandardWorkspace ].			]].! !!TheWorldMenu methodsFor: 'construction' stamp: 'cbr 3/26/2010 00:46'!addObjectsAndTools: menu	self		fillIn: menu		from: {			nil.			{ 'objects (o)'. { #myWorld. #activateObjectsTool }. 'A tool for finding and obtaining many kinds of objects' }.			{ 'new morph...'. { self. #newMorph }. 'Offers a variety of ways to create new objects' }.			nil.			{ 'authoring tools...'. { self. #scriptingDo }. 'A menu of choices useful for authoring' }.			{ 'playfield options...'. { self. #playfieldDo }. 'A menu of options pertaining to this object as viewed as a playfield' }.			{ 'flaps...'. { self. #flapsDo }. 'A menu relating to use of flaps.  For best results, use "keep this menu up"' }.			{ 'projects...'. { self. #projectDo }. 'A menu of commands relating to use of projects' }.			{ 'telemorphic...' . {self. #remoteDo}.  'commands for doing multi-machine "telemorphic" experiments'}.			nil		}! !