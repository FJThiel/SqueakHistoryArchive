"Change Set:		9839Collections-ar.353Collections-ar.353:Fix do:displayingProgress: to suppress changing the label to nil if the display block returns nil (accidentally or deliberately).Collections-ul.351:- added #shuffle and #shuffleBy: to shuffle SequenceableCollections in-placeCollections-nice.352:Fix http://bugs.squeak.org/view.php?id=6391Assign correct unicode value to Euro character(old value was that of MacRoman encoding - previously the generic currency symbol)"!!SequenceableCollection methodsFor: 'shuffling' stamp: 'ul 3/28/2010 01:03'!shuffledBy: aRandom	"Durstenfeld's version of the Fisher-Yates shuffle"	^self copy shuffleBy: aRandom! !!Collection methodsFor: 'enumerating' stamp: 'ar 3/31/2010 20:53'!do: aBlock displayingProgress: aStringOrBlock every: msecs	"Enumerate aBlock displaying progress information. 	If the argument is a string, use a static label for the process. 	If the argument is a block, evaluate it with the element to retrieve the label.	The msecs argument ensures that updates happen at most every msecs.	Example:		Smalltalk allClasses 			do:[:aClass| (Delay forMilliseconds: 1) wait]			displayingProgress:[:aClass| 'Processing ', aClass name]			every: 0.		Smalltalk allClasses 			do:[:aClass| (Delay forMilliseconds: 1) wait]			displayingProgress:[:aClass| 'Processing ', aClass name]			every: 100.	"	| size labelBlock count oldLabel lastUpdate |	labelBlock := aStringOrBlock isString 		ifTrue:[[:item| aStringOrBlock]] 		ifFalse:[aStringOrBlock].	oldLabel := nil.	count := lastUpdate := 0.	size := self size.	'' displayProgressAt: Sensor cursorPoint from: 0 to: size during:[:bar |		self do:[:each| | newLabel |			"Special handling for first and last element"			(count = 0 or:[count+1 = size 				or:[(Time millisecondsSince: lastUpdate) >= msecs]]) ifTrue:[					bar value: count.					oldLabel = (newLabel := (labelBlock value: each) ifNil:[oldLabel]) ifFalse:[					ProgressNotification signal: '' extra: (oldLabel := newLabel).				].				lastUpdate := Time millisecondClockValue.			].			aBlock value: each.			count := count + 1.	]]! !!Character class methodsFor: 'accessing untypeable characters' stamp: 'nice 3/29/2010 18:14'!euro	"The Euro currency sign, that E with two dashes. The code point is a official unicode ISO/IEC-10646-1"	^ Unicode value: 16r20AC! !!SequenceableCollection methodsFor: 'shuffling' stamp: 'ul 3/28/2010 00:56'!shuffle	^self shuffleBy: Collection randomForPicking! !!SequenceableCollection methodsFor: 'shuffling' stamp: 'ul 3/26/2010 16:48'!shuffleBy: aRandom	"Durstenfeld's version of the Fisher-Yates shuffle"	self size to: 2 by: -1 do: [ :i | 		self swap: i with: (aRandom nextInt: i) ]! !