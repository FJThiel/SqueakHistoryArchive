"Change Set:		8344Collections-ar.240Collections-ar.240:Signal OutOfMemory instead of calling signalLowSpace.Collections-ul.238:- added #lf and #crlf to WriteStream (like #cr)- updated String >> #withInternetLineEndingsCollections-nice.239:Remove some now useless fixTemps"!!WriteStream methodsFor: 'character writing' stamp: 'ul 12/2/2009 05:47'!lf	"Append a line feed character to the receiver."	self nextPut: Character lf! !!Heap methodsFor: 'accessing' stamp: 'stephane.ducasse 4/13/2009 21:05'!indexUpdateBlock: aBlockOrNil	indexUpdateBlock := aBlockOrNil.! !!WriteStream methodsFor: 'character writing' stamp: 'ul 12/2/2009 05:47'!crlf	"Append a line feed character to the receiver."	self nextPut: Character cr; nextPut: Character lf! !!SortedCollection methodsFor: 'accessing' stamp: 'stephane.ducasse 4/13/2009 21:11'!sortBlock: aBlock 	"Make the argument, aBlock, be the criterion for ordering elements of the 	receiver."	sortBlock := aBlock.	"sortBlocks with side effects may not work right"	self size > 0 ifTrue: [self reSort]! !!String methodsFor: 'internet' stamp: 'ul 12/2/2009 05:49'!withInternetLineEndings	"change line endings from CR's and LF's to CRLF's.  This is probably in prepration for sending a string over the Internet"		^self class		new: self size * 16 // 15 "provisions for CR-LF pairs"		streamContents: [ :stream |			self lineIndicesDo: [:start :endWithoutDelimiters :end |				stream nextPutAll: (self copyFrom: start to: endWithoutDelimiters).				endWithoutDelimiters = end ifFalse: [					stream crlf ] ] ]! !!Heap methodsFor: 'accessing' stamp: 'stephane.ducasse 4/13/2009 21:05'!sortBlock: aBlock	sortBlock := aBlock.	self reSort.! !!Interval class methodsFor: 'instance creation' stamp: 'ar 12/4/2009 13:46'!new	"Primitive. Create and answer with a new instance of the receiver	(a class) with no indexable fields. Fail if the class is indexable. Override	SequenceableCollection new. Essential. See Object documentation	whatIsAPrimitive."	<primitive: 70>	self isVariable ifTrue: [ ^ self new: 0 ].	"space must be low"	OutOfMemory signal.	^ self new  "retry if user proceeds"! !!SortedCollection methodsFor: 'converting' stamp: 'nice 12/2/2009 08:35'!reverseInPlace	"Change this colleciton into its reversed.	Do not make a copy like reversed do, but change self in place."		| newFirstIndex oldSortBlock |	newFirstIndex := 1 + array size - lastIndex.	lastIndex := 1 + array size - firstIndex.	firstIndex := newFirstIndex.	array := array reversed.	oldSortBlock := (sortBlock ifNil: [[:a :b | a <= b]]) copy.	sortBlock := [:a :b | oldSortBlock value: b value: a]! !