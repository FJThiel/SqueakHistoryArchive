'From Squeak3.11alpha of 13 February 2010 [latest update: #9483] on 9 March 2010 at 11:11:23 am'!!Browser methodsFor: 'class functions' stamp: 'ar 3/5/2010 21:08'!copyClass	| originalName copysName oldDefinition newDefinition |	classListIndex = 0 ifTrue: [^ self].	self okToChange ifFalse: [^ self].	originalName := self selectedClass name.	copysName := self request: 'Please type new class name' initialAnswer: originalName.	copysName = '' ifTrue: [^ self].  " Cancel returns '' "	copysName := copysName asSymbol.	copysName = originalName ifTrue: [^ self].	(Smalltalk hasClassNamed: copysName)		ifTrue: [^ self error: copysName , ' already exists'].	oldDefinition := self selectedClass definition.	newDefinition := oldDefinition copyReplaceAll: '#' , originalName asString with: '#' , copysName asString.	Cursor wait 		showWhile: [| class |					class := Compiler evaluate: newDefinition logged: true.					class copyAllCategoriesFrom: (Smalltalk at: originalName).					class class copyAllCategoriesFrom: (Smalltalk at: originalName) class].	self classListIndex: 0.	self changed: #classList! !!Browser methodsFor: 'class functions' stamp: 'ar 3/5/2010 20:24'!renameClass	| oldName newName obs |	classListIndex = 0		ifTrue: [^ self].	self okToChange		ifFalse: [^ self].	oldName := self selectedClass name.	newName := self request: 'Please type new class name' initialAnswer: oldName.	newName = ''		ifTrue: [^ self].	"Cancel returns ''"	newName := newName asSymbol.	newName = oldName		ifTrue: [^ self].	(self selectedClass environment includesKey: newName)		ifTrue: [^ self error: newName , ' already exists'].	self selectedClass rename: newName.	self changed: #classList.	self classListIndex: (self classListIndexOf: newName).	obs := self systemNavigation				allCallsOn: (self selectedClass environment associationAt: newName).	obs isEmpty		ifFalse: [self systemNavigation				browseMessageList: obs				name: 'Obsolete References to ' , oldName				autoSelect: oldName]! !!Browser methodsFor: 'class list' stamp: 'ar 3/5/2010 21:08'!recent	"Let the user select from a list of recently visited classes.  11/96 stp.	 12/96 di:  use class name, not classes themselves.	 : dont fall into debugger in empty case"	| className class recentList |	recentList := RecentClasses select: [:n | Smalltalk hasClassNamed: n].	recentList size == 0 ifTrue: [^ Beeper beep].	className := UIManager default chooseFrom: recentList values: recentList.	className == nil ifTrue: [^ self].	class := Smalltalk at: className.	self selectCategoryForClass: class.	self classListIndex: (self classListIndexOf: class name)! !!Debugger methodsFor: 'private' stamp: 'ar 3/5/2010 20:31'!process: aProcess controller: aController context: aContext	super initialize.	Smalltalk at: #MessageTally ifPresent:[:tally| tally terminateTimerProcess].	contents := nil. 	interruptedProcess := aProcess.	interruptedController := aController.	contextStackTop := aContext.	self newStack: (contextStackTop stackOfSize: 1).	contextStackIndex := 1.	externalInterrupt := false.	selectingPC := true.	Smalltalk isMorphic ifTrue:		[errorWasInUIProcess := false]! !!FileContentsBrowser methodsFor: 'infoView' stamp: 'ar 3/5/2010 21:09'!packageInfo: p	| nClasses newClasses oldClasses |	p isNil ifTrue:[^''].	nClasses := newClasses := oldClasses := 0.	p classes do:[:cls|		nClasses := nClasses + 1.		(Smalltalk hasClassNamed: cls name)			ifTrue:[oldClasses := oldClasses + 1]			ifFalse:[newClasses := newClasses + 1]].	^nClasses printString,' classes (', newClasses printString, ' new / ', oldClasses printString, ' modified)'! !