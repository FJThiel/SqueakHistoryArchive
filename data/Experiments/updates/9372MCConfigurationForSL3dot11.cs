'From Squeak3.11alpha of 13 February 2010 [latest update: #9483] on 9 March 2010 at 11:11:24 am'!Object subclass: #MCPackageLoader	instanceVariableNames: 'requirements unloadableDefinitions obsoletions additions removals errorDefinitions provisions methodAdditions '	classVariableNames: 'ChangeHIghUp '	poolDictionaries: ''	category: 'Monticello-Loading'!!MCConfiguration methodsFor: 'private' stamp: 'edc 3/8/2010 10:52'!depsSatisfying: selectBlock versionDo: verBlock displayingProgress: progressString 	| repoMap count packagesInThis existe |	repoMap := Dictionary new.	packagesInThis := #('311Deprecated' 'Balloon' 'Collections' 'Compiler' 'Compression' 'Exceptions' 'Files' 'Graphics' 'Kernel' 'MinimalMorphic'  'Morphic' 'MorphicExtras' 'Multilingual' 'Network' 'PackageInfo-Base' 'ST80' 'SUnit' 'Services' 'ShoutCore' 'Sound' 'Squeak-Version' 'System' 'ToolBuilder-Kernel' 'ToolBuilder-MVC' 'ToolBuilder-Morphic' 'ToolBuilder-SUnit' 'Tools' 'Traits' 'TraitsTests' 'TrueType'). "this is needed until we agree on the polished changes go to trunk and become the default to all." .	self repositories		do: [:repo | 			MCRepositoryGroup default addRepository: repo.			repo allVersionNames				ifEmpty: [self logWarning: 'cannot read from ' , repo description]				ifNotEmptyDo: [:all | all						do: [:ver | repoMap at: ver put: repo]]].	count := 0.	self dependencies		do: [:dep | 			| ver repo | 			existe := packagesInThis includes: dep package name.			existe				ifTrue: [ver := dep versionInfo name.					repo := repoMap								at: ver								ifAbsent: [self logError: 'Version ' , ver , ' not found in any repository'.									self logError: 'Aborting'.									^ count].					(selectBlock value: dep)						ifTrue: [| new | 							new := self										versionNamed: ver										for: dep										from: repo.							new								ifNil: [self logError: 'Could not download version ' , ver , ' from ' , repo description.									self logError: 'Aborting'.									^ count]								ifNotNil: [self logUpdate: dep package with: new.									ProgressNotification signal: '' extra: 'Installing ' , ver.									verBlock value: new.									count := count + 1]].					dep package workingCopy repositoryGroup addRepository: repo]				ifFalse: [self logWarning: 'NOT LOADING ' , dep package name printString]]		displayingProgress: progressString.	^ count! !!MCDependencySorter methodsFor: 'private' stamp: 'edc 7/11/2008 09:04'!removeRequirement: anObject	required  removeKey: anObject ifAbsent: [#()].! !!MCPackageLoader methodsFor: 'private' stamp: 'edc 7/11/2008 09:39'!analyze	| sorter solved |		sorter := self sorterForItems: additions.	additions := sorter orderedItems.	requirements := sorter externalRequirements.	solved := Set new.	 requirements		do: [:cl | Object lookForClass: cl.			sorter removeRequirement: cl.			solved add: cl].		requirements := requirements difference: solved.	unloadableDefinitions := sorter itemsWithMissingRequirements asSortedCollection.	sorter := self sorterForItems: removals.	removals := sorter orderedItems reversed  ! !!MCPackageLoader methodsFor: 'private' stamp: 'avi 2/17/2004 13:15'!tryToLoad: aDefinition	[aDefinition loadOver: (self obsoletionFor: aDefinition)] on: Error do: [errorDefinitions add: aDefinition].! !!MCPackageLoader methodsFor: 'private' stamp: 'edc 2/13/2010 17:46'!useChangeSetNamed: baseName during: aBlock 	"Use the named change set, or create one with the given name."	| changeHolder oldChanges newChanges csName |	changeHolder := (ChangeSet respondsTo: #newChanges:)				ifTrue: [ChangeSet]				ifFalse: [Smalltalk].	oldChanges := (ChangeSet respondsTo: #current)				ifTrue: [ChangeSet current]				ifFalse: [Smalltalk changes].	self class changeHighestUpdate		ifTrue: [csName := (SystemVersion current highestUpdate + 1) asString , baseName.			newChanges := (ChangesOrganizer changeSetNamed: csName)						ifNil: [ChangeSet new name: csName].			changeHolder newChanges: newChanges.			[aBlock value]				ensure: [changeHolder newChanges: oldChanges].			SystemVersion current registerUpdate: SystemVersion current highestUpdate + 1]		ifFalse: [newChanges := (ChangesOrganizer changeSetNamed: baseName)						ifNil: [ChangeSet new name: baseName].			changeHolder newChanges: newChanges.			[aBlock value]				ensure: [changeHolder newChanges: oldChanges]]! !!MCPackageLoader class methodsFor: 'as yet unclassified' stamp: 'edc 9/29/2009 12:03'!changeHighestUpdate" MCPackageLoader changeHighestUpdate""Whether change highestUpdate by default.	If true, logs to a file named after the configuration (config.nn.log).	If false, logs to the transcript."	<preference: 'Change SystemVersion current highestUpdate' 		category: 'Monticello' 		description: 'If true,  each monticello package loaded rises the highestUpdate)' 		type: #Boolean>	^ChangeHIghUp  ifNil:[ChangeHIghUp := false].! !!MCPackageLoader class methodsFor: 'as yet unclassified' stamp: 'edc 10/1/2009 16:29'!setHighestUpdate: aBoolean" MCPackageLoader togleHighestUpdate"self changeHighestUpdate.	^ChangeHIghUp  := aBoolean! !!Parser methodsFor: 'error handling' stamp: 'stephaneducassse 11/5/2005 16:39'!interactive	"this version of the method is necessary to load code from MC else the interactive mode is one. 	This method is really bad since it links the compiler package with the Tools	one. The solution would be to have a real SyntaxError exception belonging to the 	compiler package and not a subclass of StringHolder - sd Nov 2005"	"the code submitted by PlusTools is ideally the one that should be used	interactive	      ^requestor ~~ nil "		^ (requestor == nil or: [requestor isKindOf: SyntaxError]) not! !!Utilities class methodsFor: 'fetching updates' stamp: 'edc 2/14/2010 09:15'!updateFromServer	"Update the image by loading all pending updates from the server. Also	save local copies of the update files if the #updateSavesFile preference	is set to true"	| config |	MCPackageLoader setHighestUpdate: true.		"Flush all caches. If a previous download failed this is often helpful"	MCFileBasedRepository flushAllCaches.	config := MCMcmUpdater updateFromRepositories: #(		'http://source.squeak.org/trunk'	).	MCPackageLoader  setHighestUpdate: false..	self inform: 'Update completed.Current update number: ', SystemVersion current highestUpdate.! !Object subclass: #MCPackageLoader	instanceVariableNames: 'requirements unloadableDefinitions obsoletions additions removals errorDefinitions provisions methodAdditions'	classVariableNames: 'ChangeHIghUp'	poolDictionaries: ''	category: 'Monticello-Loading'!