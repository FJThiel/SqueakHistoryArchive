'From Squeak3.11alpha of 13 February 2010 [latest update: #9483] on 9 March 2010 at 11:11:23 am'!Object subclass: #DirectoryEntry	instanceVariableNames: 'name creationTime modificationTime dirFlag fileSize directory '	classVariableNames: ''	poolDictionaries: ''	category: 'Files-Directories'!!DirectoryEntry commentStamp: '<historical>' prior: 0!an entry in a directory; a reference to either a file or a directory.!DirectoryEntry subclass: #DirectoryEntryDirectory	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Files-Directories'!!DirectoryEntryDirectory commentStamp: 'cmm 9/13/2007 12:24' prior: 0!an entry in a directory; a reference to a directory.!DirectoryEntry subclass: #DirectoryEntryFile	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Files-Directories'!!DirectoryEntry methodsFor: 'access' stamp: 'cmm 2/15/2010 13:53'!at: index	"compatibility interface"	self deprecated: 'old-style access to DirectoryEntry'.	index = 1 ifTrue: [ ^self name ].	index = 2 ifTrue: [ ^self creationTime ].	index = 3 ifTrue: [ ^self modificationTime ].	index = 4 ifTrue:[ ^self isDirectory ].	index = 5 ifTrue:[ ^self fileSize ].	self error: 'invalid index specified'.! !!DirectoryEntry methodsFor: 'access' stamp: 'cmm 9/12/2007 17:36'!containingDirectory	"Answer the FileDirectory in which I reside."	^ directory! !!DirectoryEntry methodsFor: 'access' stamp: 'cmm 8/10/2007 12:25'!creationDateAndTime	"The DateAndTime my entry in the file system was created."	^DateAndTime fromSeconds: creationTime! !!DirectoryEntry methodsFor: 'access' stamp: 'cmm 2/15/2010 13:16'!creationTime	"The time the entry was created, as an Integer number of seconds offset from the DateAndTime epoch."	^creationTime! !!DirectoryEntry methodsFor: 'access' stamp: 'cmm 2/15/2010 15:52'!fileSizeString	"Answer my file size as an easy-to-read String."	^ self fileSize asBytesDescription! !!DirectoryEntry methodsFor: 'access' stamp: 'cmm 11/30/2008 23:48'!fullName	"The fully-qualified name."	^ directory fullNameFor: self name! !!DirectoryEntry methodsFor: 'access' stamp: 'cmm 9/12/2007 17:25'!isDirectory	"whether this entry represents a directory"	self subclassResponsibility! !!DirectoryEntry methodsFor: 'access' stamp: 'cmm 8/10/2007 12:25'!modificationDateAndTime	"The DateAndTime my entry in the file system was last modified."	^ DateAndTime fromSeconds: modificationTime! !!DirectoryEntry methodsFor: 'access' stamp: 'cmm 8/29/2007 17:44'!printOn: aStream 	super printOn: aStream.	aStream		space ;		nextPutAll: self name! !!DirectoryEntry methodsFor: 'private-initialization' stamp: 'cmm 12/21/2007 16:04'!setDirectory: aFileOrServerDirectory 	"Set only my (containing) directory.  This is only needed because I couldn't factor ServerDirectory class>>#parseFTPEntry: to the instance-side (because HTTPClient utility uses it).  Therefore, they pass a nil and then set my 'directory' immediately after.."	directory := aFileOrServerDirectory! !!DirectoryEntry methodsFor: 'private-initialization' stamp: 'cmm 9/12/2007 17:20'!setDirectory: aFileDirectoryOrServerDirectory name: name0  creationTime: creationTime0  modificationTime: modificationTime0 fileSize: fileSize0	directory := aFileDirectoryOrServerDirectory.	name := name0.	creationTime := creationTime0.	modificationTime := modificationTime0.	fileSize := fileSize0! !!DirectoryEntry methodsFor: 'file operations' stamp: 'cmm 9/26/2007 13:36'!copyTo: fileOrServerDirectory 	"Copy me to fileOrServerDirectory."	self subclassResponsibility! !!DirectoryEntry methodsFor: 'file operations' stamp: 'cmm 9/26/2007 13:03'!delete	"Physically remove from the disk."	self subclassResponsibility! !!DirectoryEntry methodsFor: 'services' stamp: 'cmm 11/30/2008 23:48'!services	"Answer the same collection of SimpleServiceEntry's accessed by the FileList."	^ FileList itemsForFile: self fullName! !!DirectoryEntry class methodsFor: 'instance creation' stamp: 'cmm 9/12/2007 17:21'!directory: aFileDirectoryOrServerDirectory name: name0 creationTime: creationTime modificationTime: modificationTime fileSize: fileSize 	^ self new 		setDirectory: aFileDirectoryOrServerDirectory		name: name0		creationTime: creationTime		modificationTime: modificationTime		fileSize: fileSize! !!DirectoryEntry class methodsFor: 'instance creation' stamp: 'cmm 9/12/2007 17:23'!fromArray: array directory: aFileDirectoryOrServerDirectory 	| entryType |	entryType := (array at: 4) 		ifTrue: [ DirectoryEntryDirectory ]		ifFalse: [ DirectoryEntryFile ].	^ entryType 		directory: aFileDirectoryOrServerDirectory		name: (array at: 1)		creationTime: (array at: 2)		modificationTime: (array at: 3)		fileSize: (array at: 5)! !!DirectoryEntry class methodsFor: 'deprecated' stamp: 'cmm 2/15/2010 15:22'!name: name0  creationTime: creationTime  modificationTime: modificationTime   isDirectory: isDirectory  fileSize: fileSize	"This is the legacy creation method we are trying to phase out.  Please use #directory:  name:  creationTime:  modificationTime:  fileSize:." 	| type |	type := isDirectory 		ifTrue: [ DirectoryEntryDirectory ]		ifFalse: [ DirectoryEntryFile ].	^ type		directory: nil		name: name0  		creationTime: creationTime  		modificationTime: modificationTime   		fileSize: fileSize! !!DirectoryEntryDirectory methodsFor: 'convert' stamp: 'cmm 9/12/2007 17:40'!asFileDirectory	"Answer a FileDirectory representing the same directory I represent."	^ self containingDirectory in: [ : cd | cd on: (cd fullNameFor: self name) ]! !!DirectoryEntryDirectory methodsFor: 'file operations' stamp: 'cmm 10/5/2007 17:41'!copyHere: aDirectoryEntryFile	"Copy aDirectoryFileEntry, which represents a file, to the directory I represent."	^ self asFileDirectory copyHere: aDirectoryEntryFile! !!DirectoryEntryDirectory methodsFor: 'testing' stamp: 'cmm 9/13/2007 12:24'!isDirectory	"whether this entry represents a directory, it does."	^ true! !!DirectoryEntryFile methodsFor: 'stream access' stamp: 'cmm 10/5/2007 12:13'!contentsFrom: startPosition to: endPosition 	"Answer my contents from startPosition to endPosition."	^ FileStream 		detectFile: [ self readStream ]		do: 			[ : stream | 			stream				position: startPosition ;				next: endPosition - startPosition + 1 ]! !!DirectoryEntryFile methodsFor: 'stream access' stamp: 'cmm 9/27/2007 16:29'!contentsTo: endPosition 	"Answer my contents up to endPosition."	^ self 		contentsFrom: 0		to: endPosition! !!DirectoryEntryFile methodsFor: 'stream access' stamp: 'cmm 2/15/2010 13:41'!readStream	"Answer a FileStream on my contents that can be read, but not written."	^ directory readOnlyFileNamed: self name! !!DirectoryEntryFile methodsFor: 'stream access' stamp: 'cmm 2/15/2010 13:41'!readWriteStream	"Answer a FileStream on my contents that can be read and written."	^ directory fileNamed: self name! !!DirectoryEntryFile methodsFor: 'file operations' stamp: 'cmm 9/27/2007 11:49'!copyTo: targetDirectory 	"Make a copy of me in targetDirectory.  targetDirectory can be a FileDirectory, ServerDirectory or a DirectoryEntryDirectory.  If a file with my name already exists in targetDirectory, signal a FileExistsException."	^ targetDirectory copyHere: self! !!DirectoryEntryFile methodsFor: 'file operations' stamp: 'cmm 9/26/2007 16:46'!delete	directory deleteFileNamed: self name! !!DirectoryEntryFile methodsFor: 'testing' stamp: 'cmm 9/13/2007 12:24'!isDirectory	"whether this entry represents a directory, it does not."	^ false! !!FileDirectory methodsFor: 'enumeration' stamp: 'cmm 8/9/2007 16:47'!directoryNames	"Return a collection of names for the subdirectories of this directory."	"FileDirectory default directoryNames"	^ (self entries select: [:entry | entry isDirectory ])		collect: [:entry | entry name]! !!FileDirectory methodsFor: 'enumeration' stamp: 'cmm 8/10/2007 12:14'!entries	"Return a collection of DirectoryEntry's for the files and directories in this directory.  See primLookupEntryIn:index: for further details."	"FileDirectory default entries"	^ self directoryContentsFor: pathName! !!FileDirectory methodsFor: 'enumeration' stamp: 'cmm 8/9/2007 16:46'!fileAndDirectoryNames	"FileDirectory default fileAndDirectoryNames"	^ self entries collect: [ : entry | entry name ]! !!FileDirectory methodsFor: 'enumeration' stamp: 'cmm 2/15/2010 15:55'!fileNames	"Return a collection of names for the files (but not directories) in this directory."	"FileDirectory default fileNames"	^ (self entries reject: [ : entry | entry isDirectory ]) 		collect: [ : entry | entry name ]! !!FileDirectory methodsFor: 'file operations' stamp: 'cmm 10/5/2007 17:40'!copyHere: aDirectoryEntryFile 	"Copy aDirectoryEntryFile, which represents a file, to the directory I represent."	aDirectoryEntryFile readStream in: 		[ : readStream | 		[ self 			putFile: readStream			named: aDirectoryEntryFile name ] ensure: [ readStream close ] ]! !!FileDirectory methodsFor: 'file status' stamp: 'cmm 4/4/2007 16:33'!entryAt: fileName ifAbsent: aBlock	"Find the entry with local name fileName and answer it.	If not found, answer the result of evaluating aBlock."	| comparisonBlock |	self isCaseSensitive		ifTrue: [comparisonBlock := [:entry | entry name = fileName]]		ifFalse: [comparisonBlock := [:entry | entry name sameAs: fileName]].	^ self entries detect: comparisonBlock ifNone: [aBlock value]! !!FileDirectory methodsFor: 'path access' stamp: 'cmm 10/8/2009 16:37'!/ aString 	"Answer a FileDirectory on a subdirectory named aString, of the receiver."	^ FileDirectory on: (self fullNameFor: aString)! !!FileDirectory methodsFor: 'private' stamp: 'cmm 8/9/2007 17:15'!directoryContentsFor: fullPath	"Return a collection of directory entries for the files and directories in the directory with the given path. See primLookupEntryIn:index: for further details."	"FileDirectory default directoryContentsFor: ''"	| entries index done entryArray f |	entries := OrderedCollection new: 200.	index := 1.	done := false.	f := fullPath asVmPathName.	[done] whileFalse: [		entryArray := self primLookupEntryIn: f index: index.		#badDirectoryPath = entryArray ifTrue: [			^(InvalidDirectoryError pathName: pathName asSqueakPathName) signal].		entryArray == nil			ifTrue: [done := true]			ifFalse: [entries addLast: (DirectoryEntry fromArray: entryArray directory: self)].		index := index + 1].	^ entries asArray collect: [:s | s convertFromSystemName].! !!AcornFileDirectory methodsFor: 'private' stamp: 'cmm 9/12/2007 17:23'!directoryContentsFor: fullPath 	"Return a collection of directory entries for the files and directories in 	the directory with the given path. See primLookupEntryIn:index: for 	further details."	"FileDirectory default directoryContentsFor: ''"	| entries extraPath |	entries := super directoryContentsFor: fullPath.	fullPath isNullPath		ifTrue: [			"For Acorn we also make sure that at least the parent of the current dir 			is added - sometimes this is in a filing system that has not been (or 			cannot be) polled for disc root names"			extraPath := self class default containingDirectory.			"Only add the extra path if we haven't already got the root of the current dir in the list"			entries detect: [:ent | extraPath fullName beginsWith: ent name] 				ifNone: [entries := entries								copyWith: (DirectoryEntryDirectory										directory: self										name: extraPath fullName										creationTime: 0										modificationTime: 0										fileSize: 0)]].	^ entries! !!Integer methodsFor: '*files' stamp: 'cmm 2/15/2010 15:52'!asBytesDescription	"Answer a terse, easily-readable representation of this Integer reprsenting a number of bytes.  Useful for file-browsers."	| suffixes |	suffixes := { 'k'"ilobytes". 'M'"egabytes". 'G'"igabytes". 'T'"erabytes". 'P'"etabytes". 'E'"xabytes". 'Z'"ettabytes". 'Y'"ottabytes"}.	suffixes size to: 1 by: -1 do:		[ : index |  | units |		units := 1000 raisedTo: index.		self > units ifTrue: [ ^ ((self / units) asFloat roundTo: 0.01) asString, (suffixes at: index) ] ].	^ self asString! !DirectoryEntry class removeSelector: #fromArray:!DirectoryEntry removeSelector: #privateName:creationTime:modificationTime:isDirectory:fileSize:!DirectoryEntry removeSelector: #size!Object subclass: #DirectoryEntry	instanceVariableNames: 'directory name creationTime modificationTime fileSize'	classVariableNames: ''	poolDictionaries: ''	category: 'Files-Directories'!