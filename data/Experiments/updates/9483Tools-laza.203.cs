'From Squeak3.11alpha of 13 February 2010 [latest update: #9483] on 9 March 2010 at 11:11:22 am'!!FileList methodsFor: 'volume list and pattern' stamp: 'laza 3/8/2010 10:24'!fileNameFormattedFrom: entry sizePad: sizePad	"entry is a 5-element array of the form:		(name creationTime modificationTime dirFlag fileSize)"	| sizeStr nameStr dateStr |	nameStr := entry isDirectory		ifTrue: [entry name , self folderString]		ifFalse: [entry name].	dateStr := ((Date fromSeconds: entry modificationTime )					printFormat: #(3 2 1 $. 1 1 2)) , ' ' ,				(String streamContents: [:s |					(Time fromSeconds: entry modificationTime \\ 86400)						print24: true on: s]).	sizeStr := entry fileSize asStringWithCommas.	sortMode = #name ifTrue:		[^ nameStr , '    (' , dateStr , ' ' , sizeStr , ')'].	sortMode = #date ifTrue:		[^ '(' , dateStr , ' ' , sizeStr , ') ' , nameStr].	sortMode = #size ifTrue:		[^ '(' , (String new: sizePad - sizeStr size withAll: Character space) , sizeStr , ' ' , dateStr , ') ' , nameStr].! !!FileList methodsFor: 'private' stamp: 'laza 3/8/2010 10:11'!listForPatterns: anArray	"Make the list be those file names which match the pattern."	| sizePad newList |	newList := Set new.	anArray do: [ :pat | newList addAll: (self entriesMatching: pat) ].	newList := (SortedCollection sortBlock: self sortBlock) addAll: newList; yourself.	sizePad := (newList inject: 0 into: [:mx :entry | mx max: (entry fileSize)])					asStringWithCommas size.	newList := newList collect: [ :e | self fileNameFormattedFrom: e sizePad: sizePad ].	volList size = 1 ifTrue:		["Include known servers along with other desktop volumes" 		^ newList asArray ,		(ServerDirectory serverNames collect: [:n | '^' , n , self folderString])].	^ newList asArray! !!FileList2 methodsFor: 'volume list and pattern' stamp: 'laza 3/8/2010 11:52'!listForPatterns: anArray	"Make the list be those file names which match the patterns."	| sizePad newList |	directory ifNil: [^#()].	(fileSelectionBlock isKindOf: MessageSend) ifTrue: [		fileSelectionBlock arguments: {directory entries}.		newList := fileSelectionBlock value.		fileSelectionBlock arguments: #().	] ifFalse: [		newList := Set new.		anArray do: [ :pat |			newList addAll: (directory entries select: [:entry | fileSelectionBlock value: entry value: pat]) ].	].	newList := newList asSortedCollection: self sortBlock.	sizePad := (newList inject: 0 into: [:mx :entry | mx max: entry fileSize])					asStringWithCommas size.	newList := newList collect: [ :e | self fileNameFormattedFrom: e sizePad: sizePad ].	^ newList asArray! !!FileChooser methodsFor: 'updating' stamp: 'laza 3/8/2010 12:02'!fileNameFormattedFrom: entry sizePad: sizePad 	"If the short file list flag is false, we send this on to the superclass."	| nameStr |	showShortFileNames 		ifFalse: [^super fileNameFormattedFrom: entry sizePad: sizePad].	"Otherwise, just show the name of the file in the file list."	nameStr := (entry isDirectory)					ifTrue: [entry name, self folderString]					ifFalse: [entry name].	^nameStr! !