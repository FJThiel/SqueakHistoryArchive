'From Squeak3.11alpha of 13 February 2010 [latest update: #9483] on 9 March 2010 at 11:11:24 am'!Model subclass: #PreferenceBrowser	instanceVariableNames: 'selectedCategoryIndex selectedPreference searchPattern searchResults lastExecutedSearch preferences title'	classVariableNames: ''	poolDictionaries: ''	category: 'PreferenceBrowser'!!PreferenceBrowser methodsFor: 'accessing' stamp: 'hpt 9/18/2004 17:59'!allCategorySelected	^self selectedCategory = self allCategoryLabel! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'rr 10/1/2005 15:05'!allPreferences	^ preferences allPreferenceObjects  asSortedCollection:			[:pref1 :pref2 | 			pref1 viewRegistry viewOrder  <pref2 viewRegistry viewOrder  or:					[pref1 viewRegistry viewOrder  =pref2 viewRegistry viewOrder 						 &(pref1 name  <pref2 name)]]! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'rr 10/1/2005 15:05'!categoryList	^OrderedCollection new		add:  self allCategoryLabel;		addAll: preferences categoryNames asSortedCollection;		add: self searchResultsCategoryLabel;		yourself.		! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'hpt 8/27/2005 23:35'!lastExecutedSearch	^lastExecutedSearch! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'stephaneducasse 2/4/2006 20:39'!lastExecutedSearch: aTextOrString	^lastExecutedSearch:= aTextOrString! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'hpt 9/18/2004 18:01'!nonSpecialCategorySelected	^self allCategorySelected not & self searchResultsCategorySelected not! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'rr 10/11/2005 17:14'!preferences	^ preferences! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'ar 8/9/2009 15:20'!preferencesInCategory: aCategory	^(preferences preferenceObjectsInCategory: aCategory) asSortedCollection:		[:pref1 :pref2 | 				pref1 viewRegistry viewOrder  <pref2 viewRegistry viewOrder  or:						[pref1 viewRegistry viewOrder  =pref2 viewRegistry viewOrder 							 &(pref1 name  <pref2 name)]]! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'hpt 7/8/2006 17:50'!searchFieldLegend	^''.! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'hpt 8/27/2005 23:39'!searchPattern	^searchPattern ifNil: [searchPattern := self searchFieldLegend]! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'stephaneducasse 2/4/2006 20:39'!searchPattern: aStringOrText	aStringOrText 		ifEmpty: [searchPattern := self searchFieldLegend]		ifNotEmpty: [searchPattern := aStringOrText asString].	self changed: #searchPattern.	^true! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'kb 11/12/2009 14:51'!searchPatternNeverTriggered	^self searchPattern! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'stephaneducasse 2/4/2006 20:39'!searchResults	^searchResults ifNil: [searchResults := #()]! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'hpt 9/18/2004 18:01'!searchResultsCategorySelected	^self selectedCategory = self searchResultsCategoryLabel! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'stephaneducasse 2/4/2006 20:39'!selectFirstPreferenceOrNil	| prefs |	self selectedCategory		ifNil: [^self selectedPreference: nil].	prefs := self preferencesInCategory: self selectedCategory.	prefs isEmpty		ifTrue: [^self selectedPreference: nil].	self selectedPreference: prefs first.! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'hpt 9/19/2004 03:23'!selectSearchResultsCategory	self selectedCategoryIndex: (self categoryList indexOf: self searchResultsCategoryLabel)! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'hpt 9/19/2004 00:01'!selectedCategory	^self categoryList at: selectedCategoryIndex ifAbsent: []! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'hpt 9/25/2004 17:09'!selectedCategory: aCategorySymbol	self selectedCategoryIndex: (self categoryList indexOf: aCategorySymbol ifAbsent: [0]).! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'hpt 9/18/2004 20:49'!selectedCategoryIndex	^selectedCategoryIndex ifNil: [selectedCategoryIndex := 0].! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'hpt 9/18/2004 23:45'!selectedCategoryIndex: anIndex	anIndex = 0		ifTrue: [^self].	self selectedPreference: nil.	selectedCategoryIndex := anIndex.	self changed: #selectedCategoryIndex.! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'hpt 9/19/2004 03:27'!selectedCategoryPreferences	self allCategorySelected		ifTrue: [^self allPreferences].	self searchResultsCategorySelected 		ifTrue: [^self searchResults].	^self preferencesInCategory: self selectedCategory.	! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'hpt 9/18/2004 20:53'!selectedPreference	^selectedPreference! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'hpt 9/19/2004 00:39'!selectedPreference: aPreference	selectedPreference := aPreference.	self changed: #selectedPreference.	self changed: #selectedPreferenceIndex.	self changed: #selectedPreferenceHelpText.! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'hpt 12/8/2004 15:22'!selectedPreferenceHelpText	self selectedPreference		ifNil: [^''].	^self selectedPreference helpString withBlanksTrimmed.! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'hpt 9/18/2004 21:17'!selectedPreferenceIndex	^self selectedCategoryPreferences indexOf: self selectedPreference ifAbsent: [0]! !!PreferenceBrowser methodsFor: 'accessing' stamp: 'hpt 9/18/2004 23:41'!selectedPreferenceIndex: anIndex	anIndex = 0		ifTrue: [^self].	self selectedPreference: (self selectedCategoryPreferences at: anIndex).! !!PreferenceBrowser methodsFor: 'buttons callbacks' stamp: 'hpt 9/19/2004 03:21'!searchSelected	self searchPreferencesFor: self searchPattern.! !!PreferenceBrowser methodsFor: 'find' stamp: 'rr 10/1/2005 15:05'!findCategoryFromPreference: prefSymbol	"Find all categories in which the preference occurs"	| aMenu| 	aMenu := MenuMorph new defaultTarget: self.	(preferences categoriesContainingPreference: prefSymbol) do:		[:aCategory | aMenu add: aCategory target: self selector: #selectedCategory: argument: aCategory].	aMenu popUpInWorld! !!PreferenceBrowser methodsFor: 'initialize-release' stamp: 'rr 10/1/2005 15:25'!initialize	preferences := Preferences.	title := 'Preference Browser'.! !!PreferenceBrowser methodsFor: 'preferences search' stamp: 'hpt 9/19/2004 12:01'!defaultSelected	Preferences chooseInitialSettings! !!PreferenceBrowser methodsFor: 'preferences search' stamp: 'hpt 8/27/2005 13:18'!helpSelected 	"Open up a workspace with explanatory info in it about the Preference Browser"	Workspace new		contents: self helpText;		openLabel: self windowTitle.! !!PreferenceBrowser methodsFor: 'preferences search' stamp: 'hpt 8/27/2005 13:42'!helpText	^(String streamContents: [:str |		str nextPutAll:'Many aspects of the system are goberned by the settings of various ''Preferences''.Click on any of the categories shown at the left list to see all the preferences in that category. Or type into the search box at the bottom of the window, then hit Search, and all Preferences matching whatever you typed in will appear in the ''search results'' category. A preference is considered to match your search if either its name matches the text *or* if anything in the preference''s help text does.To find out more about any particular Preference just select it and its help text will appear.Some preferences can be ''local'' instead of global. When a preference is set as global its value will apply to whatever project you are in. A local preference will only be valid in the project that you set it in.The ''Save'' button allow you to quickly save your current settings so it can later be restored with the ''Load'' button.To carry your settings to another Squeak you might want to use the ''Save to disk'' and ''Load from disk'' buttons. The save to disk option will store all your settings in a ''my.prefs'' file in your Squeak''s current directory.Lastly, you can use the "theme..." button to set multiple preferences all at once; click on the "theme..." button and try the themes already provided with your Squeak image.']) translated! !!PreferenceBrowser methodsFor: 'preferences search' stamp: 'rr 10/1/2005 15:05'!loadFromDiskSelected 	preferences restorePreferencesFromDisk! !!PreferenceBrowser methodsFor: 'preferences search' stamp: 'rr 10/1/2005 15:05'!loadSelected	preferences restorePersonalPreferences ! !!PreferenceBrowser methodsFor: 'preferences search' stamp: 'rr 10/1/2005 15:05'!saveSelected	preferences savePersonalPreferences ! !!PreferenceBrowser methodsFor: 'preferences search' stamp: 'rr 10/1/2005 15:05'!saveToDiskSelected 	preferences storePreferencesToDisk! !!PreferenceBrowser methodsFor: 'preferences search' stamp: 'hpt 8/27/2005 23:36'!searchPreferencesFor: pattern	| result |	result := pattern asString asLowercase withBlanksTrimmed.	result ifEmpty: [^self].	searchResults := self allPreferences select: [:aPreference |		(aPreference name includesSubstring: result caseSensitive: false) or:				[aPreference helpString includesSubstring: result caseSensitive: false]].			self selectSearchResultsCategory.	self lastExecutedSearch: pattern.! !!PreferenceBrowser methodsFor: 'preferences search' stamp: 'rr 10/1/2005 15:06'!themeSelected 	preferences offerThemesMenu! !!PreferenceBrowser methodsFor: 'stepping' stamp: 'hpt 8/27/2005 23:35'!stepAt: millisecondClockValue in: aWindow	super stepAt: millisecondClockValue in: aWindow.	self searchPattern ~= self lastExecutedSearch		ifTrue: [self searchPreferencesFor: self searchPattern].! !!PreferenceBrowser methodsFor: 'stepping' stamp: 'hpt 8/27/2005 23:41'!wantsStepsIn: aWindow	^true.! !!PreferenceBrowser methodsFor: 'user interface' stamp: 'hpt 9/19/2004 02:30'!allCategoryLabel	^'-- all --' translated! !!PreferenceBrowser methodsFor: 'user interface' stamp: 'md 2/28/2006 17:28'!initialExtent	^ 520@440! !!PreferenceBrowser methodsFor: 'user interface' stamp: 'hpt 9/19/2004 02:30'!searchResultsCategoryLabel	^'-- search results --' translated! !!PreferenceBrowser methodsFor: 'user interface' stamp: 'rr 1/8/2006 12:35'!windowTitle	^ title translated! !!PreferenceBrowser methodsFor: '*services-base' stamp: 'rr 10/1/2005 15:25'!initializeForServices	preferences := ServicePreferences.	title := 'Services Browser'! !!PreferenceBrowser class methodsFor: 'class initialization' stamp: 'hpt 9/19/2004 12:45'!initialize	self		registerWindowColor;		registerInOpenMenu;		registerInFlaps! !!PreferenceBrowser class methodsFor: 'class initialization' stamp: 'hpt 9/19/2004 12:48'!registerInFlaps	Flaps 		registerQuad: 			{ #PreferenceBrowser. 			#prototypicalToolWindow.			'Preference Browser' translated.			'A tool for expressing personal preferences for numerous options' translated }	 	forFlapNamed: 'Tools' translated.	Flaps replaceToolsFlap! !!PreferenceBrowser class methodsFor: 'class initialization' stamp: 'hpt 9/19/2004 12:40'!registerInOpenMenu	(TheWorldMenu respondsTo: #registerOpenCommand:) ifTrue: [		TheWorldMenu unregisterOpenCommand: 'Preference Browser'.		TheWorldMenu registerOpenCommand: {'Preference Browser'. {self. #open}}].		! !!PreferenceBrowser class methodsFor: 'class initialization' stamp: 'hpt 9/19/2004 12:39'!registerWindowColor	(Preferences windowColorFor: self name) = Color white		ifTrue: [ Preferences setWindowColorFor: self name to: (Color colorFrom: self windowColorSpecification brightColor) ].! !!PreferenceBrowser class methodsFor: 'class initialization' stamp: 'hpt 9/19/2004 12:45'!unload	self 		unregisterFromOpenMenu;		unregisterFromFlaps.! !!PreferenceBrowser class methodsFor: 'class initialization' stamp: 'hpt 9/19/2004 12:47'!unregisterFromFlaps	Flaps 		unregisterQuadsWithReceiver: self;		replaceToolsFlap! !!PreferenceBrowser class methodsFor: 'class initialization' stamp: 'hpt 9/19/2004 12:44'!unregisterFromOpenMenu	 (TheWorldMenu respondsTo: #registerOpenCommand:)		ifTrue: [TheWorldMenu unregisterOpenCommand: 'Preference Browser'].! !!PreferenceBrowser class methodsFor: 'instance creation' stamp: 'stephaneducasse 2/4/2006 20:39'!open	| browser |	browser := self new.	(PreferenceBrowserMorph withModel: browser)		openInWorld.	^browser.	! !!PreferenceBrowser class methodsFor: 'instance creation' stamp: 'hpt 9/19/2004 12:51'!prototypicalToolWindow	| window |	window := PreferenceBrowserMorph withModel: self new.	window applyModelExtent.	^window! !!PreferenceBrowser class methodsFor: 'window color' stamp: 'hpt 9/18/2004 15:46'!windowColorSpecification	"Answer a WindowColorSpec object that declares my preference"	^ WindowColorSpec classSymbol: self name wording: 'Preference Browser' brightColor: #(0.645 1.0 1.0)	pastelColor: #(0.886 1.0 1.0) helpMessage: 'A tool for expressing personal preferences for numerous options.'! !!PreferenceBrowser class methodsFor: '*services-base' stamp: 'rr 7/10/2006 15:27'!openForServices	"PreferenceBrowser openForServices"	| browser |	browser := self new.	browser initializeForServices.	(ServiceBrowserMorph withModel: browser)		openInWorld.	^browser.	! !PreferenceBrowser initialize!