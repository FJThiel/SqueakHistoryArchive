'From Squeak3.11alpha of 13 February 2010 [latest update: #9483] on 9 March 2010 at 11:11:22 am'!!SystemDictionary commentStamp: 'nice 3/6/2010 21:56' prior: 0!I represent a special dictionary used as global namespace for class names :	Smalltalk globals classNames.and for traits too:	Smalltalk globals traitNames.	and a few other globals:	(Smalltalk globals keys reject: [:k | (Smalltalk globals at: k) isBehavior])			collect: [:k | k -> (Smalltalk globals at: k) class].As the above example let you guess, the global namespace of Smalltalk system is accessed through:	Smalltalk globals.!!ProjectLauncher methodsFor: 'running' stamp: 'nice 3/7/2010 01:32'!startUpAfterLogin	| scriptName loader isUrl |	self setupFlaps.	Preferences readDocumentAtStartup ifTrue: [		HTTPClient isRunningInBrowser ifTrue:[			self setupFromParameters.			scriptName := self parameterAt: 'src'.			CodeLoader defaultBaseURL: (self parameterAt: 'Base').		] ifFalse:[			scriptName := (Smalltalk documentPath) ifNil:[''].			scriptName := scriptName convertFromSystemString.			scriptName isEmpty ifFalse:[				"figure out if script name is a URL by itself"				isUrl := (scriptName asLowercase beginsWith:'http://') or:[						(scriptName asLowercase beginsWith:'file://') or:[						(scriptName asLowercase beginsWith:'ftp://')]].				isUrl ifFalse:[scriptName := 'file:',scriptName]].		]. ]	ifFalse: [ scriptName := '' ].	scriptName isEmptyOrNil		ifTrue:[^Preferences eToyFriendly ifTrue: [self currentWorld addGlobalFlaps]].	loader := CodeLoader new.	loader loadSourceFiles: (Array with: scriptName).	(scriptName asLowercase endsWith: '.pr') 		ifTrue:[self installProjectFrom: loader]		ifFalse:[loader installSourceFiles].! !!SmalltalkImage methodsFor: 'command line' stamp: 'nice 3/7/2010 01:11'!argumentAt: i	"Answer the i-th argument of the command line, or nil if not so many argument."		^self getSystemAttribute: 2 + i! !!SmalltalkImage methodsFor: 'command line' stamp: 'nice 3/7/2010 01:30'!arguments	"Answer an array with all the command line arguments.	This does not include imagePath, documentPath nor any option."		"Smalltalk commandLine arguments"		^Array streamContents: [:str |		| arg i |		i := 1.		[i > 998 or: [(arg := self argumentAt: i) == nil]]			whileFalse:				[str nextPut: arg.				i := i + 1]].! !!SmalltalkImage methodsFor: 'command line' stamp: 'nice 3/7/2010 01:28'!commandLine	"Answer the object to query about command line."		^self! !!SmalltalkImage methodsFor: 'command line' stamp: 'nice 3/7/2010 01:22'!documentPath	"Answer the absolute path of the document passed to the vm or nil if none."		"Smalltalk commandLine documentPath"		^self getSystemAttribute: 2! !!SmalltalkImage methodsFor: 'command line' stamp: 'nice 3/7/2010 00:18'!extractParameters	"This method is used by Seaside 2.8.3"	| pName value index paramNameValueDictionary |	paramNameValueDictionary := Dictionary new.	index := 3. "Muss bei 3 starten, da 2 documentName ist"	[pName := self  getSystemAttribute: index.	pName isEmptyOrNil] whileFalse:[		index := index + 1.		value := self getSystemAttribute: index.		value ifNil: [value := '']. 		paramNameValueDictionary at: pName asUppercase put: value.		index := index + 1].	^paramNameValueDictionary! !!SmalltalkImage methodsFor: 'command line' stamp: 'nice 3/7/2010 01:11'!optionAt: i	"Answer the i-th option of the command line, or nil if not so many options."		^self getSystemAttribute: i negated! !!SmalltalkImage methodsFor: 'command line' stamp: 'nice 3/7/2010 01:31'!options	"Answer an array with all the command line options."		"Smalltalk commandLine options"		^Array streamContents: [:str |		| arg i |		i := 1.		[i > 1000 or: [(arg := self optionAt: i) == nil]]			whileFalse:				[str nextPut: arg.				i := i + 1]].! !!SmalltalkImage methodsFor: 'command line' stamp: 'nice 3/7/2010 02:29'!vmPath	"Answer the path for the directory containing the Smalltalk virtual machine. Return the 	empty string if this primitive is not implemented."	"Smalltalk vmPath"	^ (FilePath pathName: (self primVmPath) isEncoded: true) asSqueakPathName.! !!SmalltalkImage methodsFor: 'private' stamp: 'md 10/26/2003 13:08'!getSystemAttribute: attributeID 	"Optional. Answer the string for the system attribute with the given 	integer ID. Answer nil if the given attribute is not defined on this 	platform. On platforms that support invoking programs from command 	lines (e.g., Unix), this mechanism can be used to pass command line 	arguments to programs written in Squeak.	By convention, the first command line argument that is not a VM	configuration option is considered a 'document' to be filed in. Such a	document can add methods and classes, can contain a serialized object,	can include code to be executed, or any combination of these.	Currently defined attributes include: 	-1000...-1 - command line arguments that specify VM options 	0 - the full path name for currently executing VM 	(or, on some platforms, just the path name of the VM's directory) 	1 - full path name of this image 	2 - a Squeak document to open, if any 	3...1000 - command line arguments for Squeak programs 	1001 - this platform's operating system 	1002 - operating system version 	1003 - this platform's processor type	1004 - vm version"	<primitive: 149>	^ nil! !!SmalltalkImage methodsFor: 'os' stamp: 'nice 3/7/2010 01:28'!os	"Answer the object to query about os."		^self! !!SmalltalkImage methodsFor: 'os' stamp: 'nice 3/7/2010 01:36'!osVersion	"Return the version number string of the platform we're running on"		"Smalltalk osVersion"	^(self getSystemAttribute: 1002) asString! !!SmalltalkImage methodsFor: 'os' stamp: 'nice 3/7/2010 01:21'!platformName	"Return the name of the platform we're running on."		"Smalltalk os platformName"	^self getSystemAttribute: 1001! !!SmalltalkImage methodsFor: 'os' stamp: 'nice 3/7/2010 01:21'!platformSubtype	"Return the subType of the platform we're running on."	"Smalltalk os platformSubtype"		^self getSystemAttribute: 1003! !!SmalltalkImage methodsFor: 'os' stamp: 'nice 3/7/2010 01:20'!windowSystemName				"Return the name of the window system currently being used for display."		"Smalltalk os windowSystemName"	^self getSystemAttribute: 1005! !