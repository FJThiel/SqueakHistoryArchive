'From Squeak3.11alpha of 13 February 2010 [latest update: #9483] on 9 March 2010 at 11:11:23 am'!!Decompiler commentStamp: 'nice 3/1/2010 19:56' prior: 0!I decompile a method in three phases:	Reverser: postfix byte codes -> prefix symbolic codes (nodes and atoms)	Parser: prefix symbolic codes -> node tree (same as the compiler)	Printer: node tree -> text (done by the nodes)	instance vars:	constructor <DecompilerConstructor> an auxiliary knowing how to generate Abstract Syntax Tree (node tree)	method <CompiledMethod> the method being decompiled	instVars <Array of: String> the instance variables of the class implementing method	tempVars <String | (OrderedCollection of: String)> hold the names of temporary variables (if known)		NOTE: POLYMORPHISM WILL BE RESOLVED IN #initSymbols:	constTable <Collection of: ParseNode> parse node associated with byte encoded constants (nil true false 0 1 -1 etc...)	stack <OrderedCollection of: (ParseNode | String | Integer) > multipurpose...	statements <OrderedCollection of: ParseNode> the statements of the method being decompiled 	lastPc <Integer>	exit <Integer>	caseExits <OrderedCollection of: Integer> - stack of exit addresses that have been seen in the branches of caseOf:'s	lastJumpPc <Integer>	lastReturnPc <Integer>	limit <Integer>	hasValue <Boolean>	blockStackBase <Integer>	numLocaltemps <Integer | Symbol> - number of temps local to a block; also a flag indicating decompiling a block	blockStartsToTempVars <Dictionary key: Integer value: (OrderedCollection of: String)>	tempVarCount <Integer> number of temp vars used by the method!!BlockNode methodsFor: 'code generation (closures)' stamp: 'nice 3/2/2010 00:58'!addRemoteTemp: aTempVariableNode rootNode: rootNode "<MethodNode>"	"Add aTempVariableNode to my actualScope's sequence of	 remote temps.  If I am an optimized block then the actual	 scope is my actualScopeIfOptimized, otherwise it is myself."	remoteTempNode == nil ifTrue:		[remoteTempNode := RemoteTempVectorNode new								name: self remoteTempNodeName								index: arguments size + temporaries size								type: LdTempType								scope: 0.		 actualScopeIfOptimized			ifNil:				[self addTempNode: remoteTempNode.				 remoteTempNode definingScope: self]			ifNotNil: [actualScopeIfOptimized addHoistedTemps: { remoteTempNode }]].	remoteTempNode addRemoteTemp: aTempVariableNode encoder: rootNode encoder.	"use remove:ifAbsent: because the deferred analysis for optimized	 loops can result in the temp has already been hoised into the root."	self removeTempNode: aTempVariableNode ifAbsent: [		self actualScope removeTempNode: aTempVariableNode ifAbsent: ["should not happen"]].	^remoteTempNode! !!BlockNode methodsFor: 'code generation (closures)' stamp: 'nice 3/1/2010 23:14'!addTempNode: aTempVariableNode	"Utilities for when we want to add some temporaries."		self makeTemporariesRemovable.	^temporaries add: aTempVariableNode! !!BlockNode methodsFor: 'code generation (closures)' stamp: 'nice 3/1/2010 23:01'!makeTemporariesRemovable	"Utilities for when we want to remove some temporaries."		temporaries isArray ifTrue:		[temporaries := temporaries asOrderedCollection].! !!BlockNode methodsFor: 'code generation (closures)' stamp: 'nice 3/1/2010 23:13'!removeTempNode: aTempVariableNode ifAbsent: aBlock	"Utilities for when we want to remove some temporaries."		self makeTemporariesRemovable.	^temporaries remove: aTempVariableNode ifAbsent: aBlock	! !!Compiler methodsFor: 'private' stamp: 'ar 3/4/2010 23:38'!interactive	"Answer true if compilation is interactive"	^requestor notNil! !!Encoder methodsFor: 'private' stamp: 'ar 3/4/2010 23:39'!interactive	"Answer true if compilation is interactive"	^requestor interactive! !!Parser methodsFor: 'error handling' stamp: 'stephaneducassse 11/5/2005 16:39'!interactive	"this version of the method is necessary to load code from MC else the interactive mode is one. 	This method is really bad since it links the compiler package with the Tools	one. The solution would be to have a real SyntaxError exception belonging to the 	compiler package and not a subclass of StringHolder - sd Nov 2005"	"the code submitted by PlusTools is ideally the one that should be used	interactive	      ^requestor ~~ nil "		^ (requestor == nil or: [requestor isKindOf: SyntaxError]) not! !