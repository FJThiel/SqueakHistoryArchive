'From Squeak3.11alpha of 13 February 2010 [latest update: #9483] on 9 March 2010 at 11:11:23 am'!!FileList2 commentStamp: 'BJP 11/19/2003 21:13' prior: 0!Some variations on FileList that- use a hierarchical pane to show folder structure- use different pane combinations, button layouts and prefiltering for specific usesFileList2 morphicView openInWorld				"an alternative to the standard FileList"FileList2 morphicViewNoFile openInWorld			"useful for selecting, but not viewing"FileList2 morphicViewProjectLoader openInWorld	"useful for finding and loading projects"FileList2 modalFolderSelector						"allows the user to select a folder"!FileList2 class	instanceVariableNames: 'lastSelDir '!!FileList methodsFor: 'volume list and pattern' stamp: 'laza 3/8/2010 10:24'!fileNameFormattedFrom: entry sizePad: sizePad	"entry is a 5-element array of the form:		(name creationTime modificationTime dirFlag fileSize)"	| sizeStr nameStr dateStr |	nameStr := entry isDirectory		ifTrue: [entry name , self folderString]		ifFalse: [entry name].	dateStr := ((Date fromSeconds: entry modificationTime )					printFormat: #(3 2 1 $. 1 1 2)) , ' ' ,				(String streamContents: [:s |					(Time fromSeconds: entry modificationTime \\ 86400)						print24: true on: s]).	sizeStr := entry fileSize asStringWithCommas.	sortMode = #name ifTrue:		[^ nameStr , '    (' , dateStr , ' ' , sizeStr , ')'].	sortMode = #date ifTrue:		[^ '(' , dateStr , ' ' , sizeStr , ') ' , nameStr].	sortMode = #size ifTrue:		[^ '(' , (String new: sizePad - sizeStr size withAll: Character space) , sizeStr , ' ' , dateStr , ') ' , nameStr].! !!FileList methodsFor: 'private' stamp: 'cmm 2/18/2010 20:38'!entriesMatching: patternString	"Answer a list of directory entries which match the patternString.	The patternString may consist of multiple patterns separated by ';'.	Each pattern can include a '*' or '#' as wildcards - see String>>match:"	| entries patterns |	entries := directory entries reject:[:e| e isDirectory].	patterns := patternString findTokens: ';'.	(patterns anySatisfy: [:each | each = '*'])		ifTrue: [^ entries].	^ entries select: [:entry | patterns anySatisfy: [:each | each match: entry name]]! !!FileList methodsFor: 'private' stamp: 'laza 3/8/2010 10:11'!listForPatterns: anArray	"Make the list be those file names which match the pattern."	| sizePad newList |	newList := Set new.	anArray do: [ :pat | newList addAll: (self entriesMatching: pat) ].	newList := (SortedCollection sortBlock: self sortBlock) addAll: newList; yourself.	sizePad := (newList inject: 0 into: [:mx :entry | mx max: (entry fileSize)])					asStringWithCommas size.	newList := newList collect: [ :e | self fileNameFormattedFrom: e sizePad: sizePad ].	volList size = 1 ifTrue:		["Include known servers along with other desktop volumes" 		^ newList asArray ,		(ServerDirectory serverNames collect: [:n | '^' , n , self folderString])].	^ newList asArray! !!FileList2 methodsFor: 'volume list and pattern' stamp: 'laza 3/8/2010 11:52'!listForPatterns: anArray	"Make the list be those file names which match the patterns."	| sizePad newList |	directory ifNil: [^#()].	(fileSelectionBlock isKindOf: MessageSend) ifTrue: [		fileSelectionBlock arguments: {directory entries}.		newList := fileSelectionBlock value.		fileSelectionBlock arguments: #().	] ifFalse: [		newList := Set new.		anArray do: [ :pat |			newList addAll: (directory entries select: [:entry | fileSelectionBlock value: entry value: pat]) ].	].	newList := newList asSortedCollection: self sortBlock.	sizePad := (newList inject: 0 into: [:mx :entry | mx max: entry fileSize])					asStringWithCommas size.	newList := newList collect: [ :e | self fileNameFormattedFrom: e sizePad: sizePad ].	^ newList asArray! !!ObjectExplorer methodsFor: 'accessing' stamp: 'cmm 2/19/2010 14:40'!rootObject	^ rootObject! !!Utilities class methodsFor: '*Tools' stamp: 'dtl 2/12/2010 22:33'!closeAllDebuggers	"Utilities closeAllDebuggers"	Smalltalk isMorphic	ifTrue:		[((Smalltalk at: #SystemWindow) allSubInstances select: [:w | w model isKindOf: Debugger])			do: [:w | w delete]]	ifFalse:		[((Smalltalk at: #StandardSystemController) allInstances select: [:w | w model isKindOf: Debugger])			do: [:w | w closeAndUnscheduleNoTerminate]]! !FileList2 class	instanceVariableNames: 'lastSelDir'!