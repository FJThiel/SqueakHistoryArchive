'From SqueakLight4 of 9 April 2011 [latest update: #11160] on 9 April 2011 at 7:16:41 am'!!CompiledMethod methodsFor: 'printing' stamp: 'edc 10/6/2008 09:54'!author self timeStamp isEmpty ifFalse: [^self timeStamp substrings first] ifTrue:[^'unknown']	! !!Utilities class methodsFor: 'identification' stamp: 'yo 12/3/2004 17:04'!methodsWithInitials: targetInitials	"Based on a do-it contributed to the Squeak mailing list by Göran Hultgen: Browse methods whose initials (in the time-stamp, as logged to disk) match the given initials. Print out the complete time-stamp table to the Transcript. Answer a list of (initials -> count) associations.CAUTION: It may take several minutes for this to complete."	"Time millisecondsToRun: [Utilities methodsWithInitials: 'bf']"	| initials timeStamp  allSubmitters |	initials := ''.	timeStamp := ''.	allSubmitters := Bag new.	self systemNavigation		browseAllSelect:			[:cm |				timeStamp := Utilities timeStampForMethod: cm.				initials := timeStamp isEmpty					ifTrue:						['']					ifFalse:						[timeStamp substrings first].				initials := initials isEmpty					ifTrue:						['<no time stamp>']					ifFalse:						[initials first isDigit							ifTrue:								['<date>']							ifFalse:								[initials]].				allSubmitters add: initials.				(initials = targetInitials)]		name: ('Methods with initials ', targetInitials)		autoSelect: nil.	allSubmitters sortedCounts do: [:elem | Transcript cr; show: elem asString].	^ allSubmitters! !!Utilities class methodsFor: 'identification' stamp: 'edc 8/27/2010 11:16'!methodsWithInitials: targetInitials inClass: aClass 	"Based on a do-it contributed to the Squeak mailing list by G¦É¬ran	Hultgen: Browse methods whose initials (in the time-stamp, as logged to	disk) match the given initials.	Print out the complete time-stamp table to the Transcript.	Answer a list of (initials -> count) associations.		CAUTION: It may take several minutes for this to complete."	"Time millisecondsToRun: [Utilities methodsWithInitials: 'bf']"	| methodList methodListClass |	methodList := OrderedCollection new.	aClass methodDict				do: [:cm | (cm author = targetInitials) ifTrue:[methodList add: cm]].	methodListClass := OrderedCollection new.	aClass class methodDict				do: [:cm | (cm author = targetInitials) ifTrue:[methodListClass add: cm]].					^methodList,methodListClass! !!Utilities class methodsFor: 'identification' stamp: 'edc 4/19/2010 16:54'!methodsWithInitials: targetInitials inPackage: aPackage 	"Utilities methodsWithInitials: 'edc' inPackage: 'Monticello'"	| methodList more|	methodList := OrderedCollection new.	(PackageInfo named: aPackage) classes		do: [:ea | more := (Utilities methodsWithInitials: targetInitials inClass: ea).			more ifNotEmpty: [methodList				add: more ]].	^ methodList! !