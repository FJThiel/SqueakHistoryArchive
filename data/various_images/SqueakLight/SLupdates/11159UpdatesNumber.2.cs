'From SqueakLight4 of 9 April 2011 [latest update: #11159] on 9 April 2011 at 7:07:06 am'!Object subclass: #MCPackageLoader	instanceVariableNames: 'requirements unloadableDefinitions obsoletions additions removals errorDefinitions provisions methodAdditions '	classVariableNames: 'ChangeHIghUp '	poolDictionaries: ''	category: 'Monticello-Loading'!!MCPackageLoader methodsFor: 'private' stamp: 'edc 2/11/2011 07:44'!useChangeSetNamed: TrunkbaseName during: aBlock 	"Use the named change set, or create one with the given name."	| changeHolder oldChanges newChanges csName baseName |	TrunkbaseName startsWithDigit ifTrue:[baseName := '-',TrunkbaseName] ifFalse:[baseName := TrunkbaseName].	changeHolder := (ChangeSet respondsTo: #newChanges:)				ifTrue: [ChangeSet]				ifFalse: [Smalltalk].	oldChanges := (ChangeSet respondsTo: #current)				ifTrue: [ChangeSet current]				ifFalse: [Smalltalk changes].	self class changeHighestUpdate		ifTrue: [csName := (SystemVersion current highestUpdate + 1) asString , baseName.			newChanges := (ChangesOrganizer changeSetNamed: csName)						ifNil: [ChangeSet new name: csName].			changeHolder newChanges: newChanges.			[aBlock value]				ensure: [changeHolder newChanges: oldChanges].			SystemVersion current registerUpdate: SystemVersion current highestUpdate + 1]		ifFalse: [newChanges := (ChangesOrganizer changeSetNamed: baseName)						ifNil: [ChangeSet new name: baseName].			changeHolder newChanges: newChanges.			[aBlock value]				ensure: [changeHolder newChanges: oldChanges]] ! !!MCPackageLoader class methodsFor: 'as yet unclassified' stamp: 'edc 9/29/2009 12:03'!changeHighestUpdate" MCPackageLoader changeHighestUpdate""Whether change highestUpdate by default.	If true, logs to a file named after the configuration (config.nn.log).	If false, logs to the transcript."	<preference: 'Change SystemVersion current highestUpdate' 		category: 'Monticello' 		description: 'If true,  each monticello package loaded rises the highestUpdate)' 		type: #Boolean>	^ChangeHIghUp  ifNil:[ChangeHIghUp := false].! !!MCPackageLoader class methodsFor: 'as yet unclassified' stamp: 'edc 10/1/2009 16:29'!setHighestUpdate: aBoolean" MCPackageLoader togleHighestUpdate"self changeHighestUpdate.	^ChangeHIghUp  := aBoolean! !!Utilities class methodsFor: 'fetching updates' stamp: 'edc 7/28/2007 10:51'!extractThisVersion: list	"Pull out the part of the list that applies to this version."	| listContents version versIndex |	listContents := self parseListContents: list.	version := SystemVersion current version.		versIndex := (listContents collect: [:pair | pair first]) indexOf: version.	versIndex = 0 ifTrue: [^ Array new].		"abort"	^ (listContents at: versIndex) last! !!Utilities class methodsFor: 'fetching updates' stamp: 'edc 2/13/2011 10:43'!updateFromServer	"Update the image by loading all pending updates from the server."	| config answer |	MCPackageLoader setHighestUpdate: true.	"Flush all caches. If a previous download failed this is often helpful"	MCFileBasedRepository flushAllCaches.	config := MCMcmUpdater updateFromDefaultRepository.	config ifNil: [^self inform: 'Unable to retrieve updates from remote repository.' translated].	"self setSystemVersionFromConfig: config."	self inform: ('Update completed.Current update number: ' translated, SystemVersion current highestUpdate).answer := self confirm: 'You wish cleanup the image ?'.answer ifTrue:[self updateFromServerCleanup].MCPackageLoader setHighestUpdate: false.! !!Utilities class methodsFor: 'fetching updates' stamp: 'edc 9/20/2010 07:47'!updateFromServerCleanup	MCFileBasedRepository flushAllCaches.MCDefinition clearInstances.3 timesRepeat: [ Smalltalk garbageCollect].Smalltalk condenseChanges! !Object subclass: #MCPackageLoader	instanceVariableNames: 'requirements unloadableDefinitions obsoletions additions removals errorDefinitions provisions methodAdditions'	classVariableNames: 'ChangeHIghUp'	poolDictionaries: ''	category: 'Monticello-Loading'!