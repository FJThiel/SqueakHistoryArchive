'From SqueakLight|II of 31 May 2008 [latest update: #7125] on 11 June 2008 at 8:44:50 am'!"Change Set:		FixingBackBehaviorDate:			11 June 2008Author:			Edgar J. De CleeneThe current method #back is a misconception about what a stream is. A stream contains a pointer *between* elements with past and future elements. This method considers that the pointer is *on* an element. Please consider unit tests which verifies #back and #oldBack behavior.This changeset renames #back to #oldBack for backward compatibility, implements #back and adds 4 tests.I take the Damien cs and adapt for SL"!!PositionableStream methodsFor: 'accessing' stamp: 'dc 8/1/2007 16:21'!back	"Go back one element and return it."	self position = 0 ifTrue: [self errorCantGoBack].	self skip: -1.	^ self peek! !!PositionableStream methodsFor: 'accessing' stamp: 'dc 8/1/2007 16:20'!oldBack	"Go back one element and return it.  Use indirect messages in case I am a StandardFileStream"	"The method is a misconception about what a stream is. A stream contains a pointer *between* elements with past and future elements. This method considers that the pointer is *on* an element. Please consider unit tests which verifies #back and #oldBack behavior. (Damien Cassou - 1 August 2007)"	self position = 0 ifTrue: [self errorCantGoBack].	self position = 1 ifTrue: [self position: 0.  ^ nil].	self skip: -2.	^ self next! !!PositionableStream methodsFor: 'accessing' stamp: 'dc 8/1/2007 16:02'!peekBack	"Return the element at the previous position, without changing position.  Use indirect messages in case self is a StandardFileStream."	| element |	element := self oldBack.	self skip: 1.	^ element! !!PositionableStream methodsFor: 'fileIn/Out' stamp: 'dc 8/1/2007 16:02'!backChunk	"Answer the contents of the receiver back to the previous terminator character.  Doubled terminators indicate an embedded terminator character."	| terminator out ch |	terminator := $!!.	out := WriteStream on: (String new: 1000).	[(ch := self oldBack) == nil] whileFalse: 			[ch == terminator 				ifTrue: 					[self peekBack == terminator 						ifTrue: [self oldBack	"skip doubled terminator"]						ifFalse: [^ out contents reversed]].			out nextPut: ch].	^ out contents reversed! !!String methodsFor: 'converting' stamp: 'dc 8/1/2007 16:02'!asSignedInteger	"Returns the first signed integer it can find or nil."	| start stream |	start := self findFirst: [:char | char isDigit].	start isZero ifTrue: [^ nil].	stream := (ReadStream on: self) position: start.	stream oldBack = $- ifTrue: [stream oldBack].	^ Integer readFrom: stream! !