'From Squeak 1.31 of Feb 4, 1998 on 21 March 1998 at 7:02:04 pm'!"Change Set:		Finalization-SockStreamDate:			22 March 1998Author:			Andreas RaabSample finalzation for Sockets and StandardFileStreams. Try to execute the following as one single doIt:	FileDirectory newFileNamed: 'blurb.st'.	FileDirectory newFileNamed: 'blurb.st'.	FileDirectory newFileNamed: 'blurb.st'.	FileDirectory newFileNamed: 'blurb.st'.Without finalization you will just get an error."!Object subclass: #Socket	instanceVariableNames: 'semaphore socketHandle '	classVariableNames: 'Connected InvalidSocket OtherEndClosed Registry ThisEndClosed Unconnected WaitingForConnection '	poolDictionaries: ''	category: 'System-Network'!FileStream subclass: #StandardFileStream	instanceVariableNames: 'name fileID buffer1 sizeCache '	classVariableNames: 'Registry '	poolDictionaries: ''	category: 'System-Files'!!Socket class methodsFor: 'registry' stamp: 'ar 3/21/98 17:40'!register: anObject	self registry add: anObject! !!Socket class methodsFor: 'registry' stamp: 'ar 3/21/98 17:40'!registry	^Registry isNil		ifTrue:[Registry := WeakRegistry new]		ifFalse:[Registry].! !!Socket class methodsFor: 'registry' stamp: 'ar 3/21/98 17:40'!unregister: anObject	self registry remove: anObject! !!StandardFileStream class methodsFor: 'registry' stamp: 'ar 3/21/98 17:24'!register: anObject	self registry add: anObject! !!StandardFileStream class methodsFor: 'registry' stamp: 'ar 3/21/98 17:24'!registry	^Registry isNil		ifTrue:[Registry := WeakRegistry new]		ifFalse:[Registry].! !!StandardFileStream class methodsFor: 'registry' stamp: 'ar 3/21/98 18:22'!unregister: anObject	self registry remove: anObject ifAbsent:[].! !!FileDirectory methodsFor: 'file operations' stamp: 'ar 3/21/98 18:08'!deleteFileNamed: localFileName ifAbsent: failBlock	"Delete the file of the given name if it exists, else evaluate failBlock.	If the first deletion attempt fails do a GC to force finalization of any lost references. ar 3/21/98 17:53"	(self 		retryWithGC:[self primDeleteFileNamed: (self fullNameFor: localFileName)]		until:[:result| result notNil]) == nil			ifTrue: [^failBlock value].! !!FileDirectory methodsFor: 'file operations' stamp: 'ar 3/21/98 18:10'!rename: oldFileName toBe: newFileName	"Rename the file of the given name to the new name. Fail if there is no file of the old name or if there is an existing file with the new name."	"Modified for retry after GC ar 3/21/98 18:09"	(self retryWithGC:[self primRename: (self fullNameFor: oldFileName)						to: (self fullNameFor: newFileName)]		until:[:result| result notNil]) == nil ifTrue:[	self error:'Attempt to rename a non-existent file,or to use a name that is already in use'].! !!FileDirectory methodsFor: 'private' stamp: 'ar 3/21/98 18:04'!primRename: oldFileFullName to: newFileFullName 	"Rename the file of the given name to the new name. Fail if there is no file of the old name or if there is an existing file with the new name.	Changed to return nil instead of failing ar 3/21/98 18:04"	<primitive: 159>	^nil! !!Socket methodsFor: 'initialize-destroy' stamp: 'ar 3/21/98 17:47'!destroy	"Destroy this socket. Its connection, if any, is aborted and its resources are freed. Do nothing if the socket has already been destroyed (i.e., if its socketHandle is nil)."	socketHandle = nil		ifFalse: [			self primSocketDestroy: socketHandle.			Smalltalk unregisterExternalObject: semaphore.			socketHandle _ nil.			semaphore _ nil.			self unregister].! !!Socket methodsFor: 'initialize-destroy' stamp: 'ar 3/21/98 17:47'!initialize	"Create a new socket handle."	| semaIndex |	semaphore _ Semaphore new.	semaIndex _ Smalltalk registerExternalObject: semaphore.	socketHandle _		self primSocketCreateNetwork: 0			type: 0			receiveBufferSize: 8000			sendBufSize: 8000			semaIndex: semaIndex.	self register.! !!Socket methodsFor: 'primitives' stamp: 'ar 3/21/98 17:43'!primSocketDestroyGently: socketID	"Release the resources associated with this socket. If a connection is open, it is aborted.	Do not fail if the receiver is already closed."	<primitive: 210>! !!Socket methodsFor: 'registry' stamp: 'ar 3/21/98 17:40'!register	^self class register: self! !!Socket methodsFor: 'registry' stamp: 'ar 3/21/98 17:41'!unregister	^self class unregister: self! !!Socket methodsFor: 'finalization' stamp: 'ar 3/21/98 17:44'!finalize	self primSocketDestroyGently: socketHandle.	Smalltalk unregisterExternalObject: semaphore.! !!FTPSocket methodsFor: 'finalization' stamp: 'ar 3/21/98 18:19'!actAsExecutor	super actAsExecutor.	dataSocket := nil.! !!StandardFileStream methodsFor: 'open/close' stamp: 'ar 3/21/98 17:38'!close	"Close the receiver.  12/12/96 sw	Modified for registry. ar 3/21/98 17:38"	self primClose: fileID.	self unregister.	closed _ true! !!StandardFileStream methodsFor: 'open/close' stamp: 'ar 3/21/98 18:11'!open: aFileName forWrite: writeMode 	"Open the receiver.  If writeMode is true, allow write, else access will be read-only.  2/12/96 sw"	"Changed to do a GC and retry before failing ar 3/21/98 17:25"	fileID _ self retryWithGC:[self primOpen: aFileName writable: writeMode] until:[:id| id notNil].	fileID == nil ifTrue: [^ nil].	self register.	name _ aFileName.	rwmode _ writeMode.	buffer1 _ String new: 1.	closed _ false! !!StandardFileStream methodsFor: 'registry' stamp: 'ar 3/21/98 17:23'!register	^self class register: self! !!StandardFileStream methodsFor: 'registry' stamp: 'ar 3/21/98 17:23'!unregister	^self class unregister: self! !!StandardFileStream methodsFor: 'finalization' stamp: 'ar 3/21/98 18:16'!actAsExecutor	super actAsExecutor.	name := nil.! !!StandardFileStream methodsFor: 'finalization' stamp: 'ar 3/21/98 18:15'!finalize	self primCloseGentle: fileID.! !