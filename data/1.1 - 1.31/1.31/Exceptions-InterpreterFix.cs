'From Squeak 1.31 of Feb 4, 1998 on 8 April 1998 at 11:08:28 pm'!"Change Set:		Exceptions-InterpreterFixDate:			8 April 1998Author:			Andreas Raab (ar) raab@isg.cs.uni-magdeburg.deThis change set contains the necessary fix for the normal VM to detect broken caller chains correctly."!!Interpreter methodsFor: 'return bytecodes' stamp: 'ar 4/8/98 20:42'!returnValue: resultObj to: returnContext	"Note: Assumed to be inlined into the dispatch loop."	| nilOop thisCntx methodContextClass contextOfCaller ctx |	self inline: true.	self sharedCodeNamed: 'commonReturn' inCase: 120.	nilOop _ nilObj. "keep in a register"	thisCntx _ activeContext.	methodContextClass _ self splObj: ClassMethodContext.	"Do a quick search for the return context.  If it's not found, raise the error in the	context that is trying to return.  (The cost of this is almost unmeasurably small.)"	ctx _ thisCntx.	[ctx ~= returnContext and: [ctx ~= nilOop]] whileTrue: [		ctx _ self fetchPointer: SenderIndex ofObject: ctx.	].	"make sure we can return to the given context"	((ctx = nilOop) or:[ (returnContext = nilOop) or:	 [(self fetchPointer: InstructionPointerIndex ofObject: returnContext) = nilOop]]) ifTrue: [		"error: sender's instruction pointer or context is nil; cannot return"		self internalPush: activeContext.		self internalPush: resultObj.		messageSelector _ self splObj: SelectorCannotReturn.		argumentCount _ 1.		^ self normalSend	].	[thisCntx = returnContext] whileFalse: [		"climb up stack to returnContext"		contextOfCaller _ self fetchPointer: SenderIndex ofObject: thisCntx.		"zap exited contexts so any future attempted use will be caught"		self storePointerUnchecked: SenderIndex ofObject: thisCntx withValue: nilOop.		self storePointerUnchecked: InstructionPointerIndex ofObject: thisCntx withValue: nilOop.		reclaimableContextCount > 0 ifTrue: [			"try to recycle this context"			reclaimableContextCount _ reclaimableContextCount - 1.			self recycleContextIfPossible: thisCntx methodContextClass: methodContextClass.		].		thisCntx _ contextOfCaller.	].	activeContext _ thisCntx.	(thisCntx < youngStart) ifTrue: [ self beRootIfOld: thisCntx ].	self internalFetchContextRegisters: thisCntx.  "updates local IP and SP"	self internalPush: resultObj.	self internalQuickCheckForInterrupts.! !