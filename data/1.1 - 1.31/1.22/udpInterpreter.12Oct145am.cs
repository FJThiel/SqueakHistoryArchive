'From Squeak 1.22 of September 21, 1997 on 12 October 1997 at 1:45:18 am'!"Change Set:		udpInterpreterDate:			12 October 1997Author:			Ian PiumartaInterpreter changes for 1.22 to add support for user-defined primitives."!ObjectMemory subclass: #Interpreter	instanceVariableNames: 'activeContext theHomeContext method receiver instructionPointer stackPointer localIP localSP messageSelector argumentCount newMethod currentBytecode successFlag primitiveIndex methodCache reclaimableContextCount mcProbe nextPollTick nextWakeupTick lastTick interruptKeycode interruptPending semaphoresToSignal semaphoresToSignalCount savedWindowSize userPrimitives '	classVariableNames: 'ActiveProcessIndex BlockArgumentCountIndex BytecodeTable CacheProbeMax CallerIndex CharacterValueIndex DirBadPath DirEntryFound DirNoMoreEntries ExcessSignalsIndex FirstLinkIndex HeaderIndex HomeIndex InitialIPIndex InstanceSpecificationIndex InstructionPointerIndex LastLinkIndex LiteralStart MaxPrimitiveIndex MaxUserPrimIndex MessageArgumentsIndex MessageDictionaryIndex MessageSelectorIndex MessageSize MethodArrayIndex MethodCacheEntries MethodCacheMask MethodCacheSize MethodIndex MinUserPrimIndex MyListIndex NextLinkIndex PrimitiveTable PriorityIndex ProcessListsIndex ReceiverIndex SelectorStart SemaphoresToSignalSize SenderIndex StackPointerIndex StreamArrayIndex StreamIndexIndex StreamReadLimitIndex StreamWriteLimitIndex SuperclassIndex SuspendedContextIndex TempFrameStart UserPrimitiveEntries UserPrimitivesSize ValueIndex XIndex YIndex '	poolDictionaries: ''	category: 'Squeak Interpreter'!!Interpreter methodsFor: 'initialization' stamp: 'ikp 10/10/97 01:05'!initializeInterpreter: bytesToShift	"Initialize Interpreter state before starting execution of a new image."	self initializeObjectMemory: bytesToShift.	activeContext	_ nilObj.	theHomeContext	_ nilObj.	method			_ nilObj.	receiver		_ nilObj.	messageSelector	_ nilObj.	newMethod		_ nilObj.	self initializeUserPrimitives.	self flushMethodCache.	self loadInitialContext.	interruptCheckCounter _ 0.	nextPollTick _ 0.	nextWakeupTick _ 0.	lastTick _ 0.	interruptKeycode _ 2094.  "cmd-."	interruptPending _ false.	semaphoresToSignalCount _ 0.! !!Interpreter methodsFor: 'primitive support' stamp: 'ikp 10/9/97 22:19'!primitiveResponse	primitiveIndex > MaxPrimitiveIndex ifTrue: [^self userPrimitiveResponse].	successFlag _ true.	self dispatchOn: primitiveIndex in: PrimitiveTable.	"check for possible timer interrupts after each primitive"	(successFlag and:	 [(nextWakeupTick ~= 0) and:	 [self ioMSecs >= nextWakeupTick]]) ifTrue: [		interruptCheckCounter _ 1000.		self checkForInterrupts].	^ successFlag! !!Interpreter methodsFor: 'user primitives' stamp: 'ikp 10/10/97 00:43'!declarePrimitiveIndex: primIndex Function: primFunction Args: argCount	"Note:	This method is called only during user primitive initialisation.  See the file 'sqUserPrims.c'."	| index |	(primIndex < MinUserPrimIndex or: [primIndex > MaxUserPrimIndex])		ifTrue: [self error: 'user-defined primitive index is outside allowable range'].	(argCount > 7)		ifTrue: [self error: 'user-defined primitive has too many arguments'].	index _ primIndex - MinUserPrimIndex + 1.	userPrimitives at: index put: primFunction.	userPrimitives at: index + UserPrimitiveEntries put: argCount.! !!Interpreter methodsFor: 'user primitives' stamp: 'ikp 10/10/97 18:28'!initializeUserPrimitives	1 to: UserPrimitivesSize do: [:index | userPrimitives at: index put: 0].	self sqInitializeUserPrimitives.! !!Interpreter methodsFor: 'user primitives' stamp: 'ikp 10/10/97 19:54'!stInstVarSizeOf: oop	"Return the number of fixed fields in the given object. (i.e., what Smalltalk would return for <obj> instVarSize)."	| hdr fmt class classFormat |	self inline: true.	(self isIntegerObject: oop) ifTrue: [^0].	hdr _ self baseHeader: oop.	fmt _ (hdr >> 8) bitAnd: 16rF.	((fmt > 3) or: [fmt = 2]) ifTrue: [^0].  "indexable fields only"	fmt < 2 ifTrue: [^self lengthOf: oop baseHeader: hdr format: fmt].	class _ self fetchClassOf: oop.	classFormat _ self formatOfClass: class.	^(classFormat >> 11 bitAnd: 16rC0) + (classFormat >> 2 bitAnd: 16r3F) - 1! !!Interpreter methodsFor: 'user primitives' stamp: 'ikp 10/10/97 18:29'!userPrimitiveResponse	"Note:	This method must be overridden in the simulator."	| index function numArgs recv a1 a2 a3 a4 a5 a6 a7 result |	self var: #function declareC: 'int (*function)(int, ...)'.	(primitiveIndex < MinUserPrimIndex or: [primitiveIndex > MaxUserPrimIndex])		ifTrue: [^false].	index _ primitiveIndex - MinUserPrimIndex + 1.	function _ self cCoerce: (userPrimitives at: index) to: 'int (*)(int, ...)'.	function = 0 ifTrue: [^self primitiveFail].	numArgs _ userPrimitives at: index + UserPrimitiveEntries.	numArgs = argumentCount ifFalse: [^false].	numArgs > 6 ifTrue: [a7 _ self stackTop. self pop: 1].	numArgs > 5 ifTrue: [a6 _ self stackTop. self pop: 1].	numArgs > 4 ifTrue: [a5 _ self stackTop. self pop: 1].	numArgs > 3 ifTrue: [a4 _ self stackTop. self pop: 1].	numArgs > 2 ifTrue: [a3 _ self stackTop. self pop: 1].	numArgs > 1 ifTrue: [a2 _ self stackTop. self pop: 1].	numArgs > 0 ifTrue: [a1 _ self stackTop. self pop: 1].	recv _ self stackTop.	self pop: 1.	result _ self cCode: 'function(recv, a1, a2, a3, a4, a5, a6, a7)'.	successFlag ifTrue: [self push: result] ifFalse: [self push: nilObj].	^successFlag! !!Interpreter class methodsFor: 'initialization' stamp: 'ikp 10/10/97 00:14'!initialize	"Interpreter initialize"	super initialize.  "initialize ObjectMemory constants"	self initializeAssociationIndex.	self initializeBytecodeTable.	self initializeCharacterIndex.	self initializeClassIndices.	self initializeContextIndices.	self initializeDirectoryLookupResultCodes.	self initializeMessageIndices.	self initializeMethodIndices.	self initializePointIndices.	self initializePrimitiveTable.	self initializeSchedulerIndices.	self initializeSmallIntegers.	self initializeStreamIndices.	MethodCacheEntries _ 512. 	MethodCacheMask _ MethodCacheEntries - 1.	(MethodCacheEntries bitAnd: MethodCacheMask) = 0		ifFalse: [ self error: 'MethodCacheEntries must be a power of two' ].	MethodCacheSize _ MethodCacheEntries * 4.	CacheProbeMax _ 3.	SemaphoresToSignalSize _ 25.	UserPrimitiveEntries _ 1024.	UserPrimitivesSize _ UserPrimitiveEntries * 2.	MinUserPrimIndex _ 1024.	MaxUserPrimIndex _ MinUserPrimIndex + UserPrimitiveEntries - 1.! !!Interpreter class methodsFor: 'translation' stamp: 'ikp 10/10/97 00:23'!declareCVarsIn: aCCodeGenerator	aCCodeGenerator var: 'methodCache'		declareC: 'int methodCache[', (MethodCacheSize + 1) printString, ']'.	aCCodeGenerator var: 'localIP'		declareC: 'char * localIP'.	aCCodeGenerator var: 'localSP'		declareC: 'char * localSP'.	aCCodeGenerator var: 'semaphoresToSignal'		declareC: 'int semaphoresToSignal[', (SemaphoresToSignalSize + 1) printString, ']'.	aCCodeGenerator var: 'userPrimitives'		declareC: 'int userPrimitives[', (UserPrimitivesSize + 1) printString, ']'.! !Interpreter initialize!